
LoRaWAN_End_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020880  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d18  080209c0  080209c0  000219c0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080216d8  080216d8  000245d8  2**0
                  CONTENTS
  4 .ARM          00000008  080216d8  080216d8  000226d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080216e0  080216e0  000245d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080216e0  080216e0  000226e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080216e8  080216e8  000226e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .USER_embedded_Keys 000000d8  0803e500  0803e500  00024500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000698  20000000  080216f0  00023000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .AI_SRAM1     0000002c  200006a0  08021d88  000236a0  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 11 LW_NVM_RAM    00000b98  20008000  20008000  00025000  2**2
                  ALLOC
 12 .bss          00001764  200006cc  200006cc  000246cc  2**2
                  ALLOC
 13 RAM1_region   00000000  20001e30  20001e30  000245d8  2**0
                  CONTENTS
 14 RAM2_region   00000000  20009000  20009000  000245d8  2**0
                  CONTENTS
 15 ._user_heap_stack 00000a00  20001e30  20001e30  000246cc  2**0
                  ALLOC
 16 .ARM.attributes 0000002a  00000000  00000000  000245d8  2**0
                  CONTENTS, READONLY
 17 .debug_info   0004ceea  00000000  00000000  00024602  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 0000b308  00000000  00000000  000714ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003a98  00000000  00000000  0007c7f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00002c90  00000000  00000000  00080290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00033b5a  00000000  00000000  00082f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0005090b  00000000  00000000  000b6a7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000f7201  00000000  00000000  00107385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000086  00000000  00000000  001fe586  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000fc3c  00000000  00000000  001fe60c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 000000af  00000000  00000000  0020e248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200006cc 	.word	0x200006cc
 800015c:	00000000 	.word	0x00000000
 8000160:	080209a8 	.word	0x080209a8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200006d0 	.word	0x200006d0
 800017c:	080209a8 	.word	0x080209a8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__gedf2>:
 80005a8:	f04f 3cff 	mov.w	ip, #4294967295
 80005ac:	e006      	b.n	80005bc <__cmpdf2+0x4>
 80005ae:	bf00      	nop

080005b0 <__ledf2>:
 80005b0:	f04f 0c01 	mov.w	ip, #1
 80005b4:	e002      	b.n	80005bc <__cmpdf2+0x4>
 80005b6:	bf00      	nop

080005b8 <__cmpdf2>:
 80005b8:	f04f 0c01 	mov.w	ip, #1
 80005bc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80005c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005cc:	bf18      	it	ne
 80005ce:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80005d2:	d01b      	beq.n	800060c <__cmpdf2+0x54>
 80005d4:	b001      	add	sp, #4
 80005d6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80005da:	bf0c      	ite	eq
 80005dc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80005e0:	ea91 0f03 	teqne	r1, r3
 80005e4:	bf02      	ittt	eq
 80005e6:	ea90 0f02 	teqeq	r0, r2
 80005ea:	2000      	moveq	r0, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	f110 0f00 	cmn.w	r0, #0
 80005f2:	ea91 0f03 	teq	r1, r3
 80005f6:	bf58      	it	pl
 80005f8:	4299      	cmppl	r1, r3
 80005fa:	bf08      	it	eq
 80005fc:	4290      	cmpeq	r0, r2
 80005fe:	bf2c      	ite	cs
 8000600:	17d8      	asrcs	r0, r3, #31
 8000602:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000606:	f040 0001 	orr.w	r0, r0, #1
 800060a:	4770      	bx	lr
 800060c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000610:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000614:	d102      	bne.n	800061c <__cmpdf2+0x64>
 8000616:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800061a:	d107      	bne.n	800062c <__cmpdf2+0x74>
 800061c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000620:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000624:	d1d6      	bne.n	80005d4 <__cmpdf2+0x1c>
 8000626:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800062a:	d0d3      	beq.n	80005d4 <__cmpdf2+0x1c>
 800062c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop

08000634 <__aeabi_cdrcmple>:
 8000634:	4684      	mov	ip, r0
 8000636:	4610      	mov	r0, r2
 8000638:	4662      	mov	r2, ip
 800063a:	468c      	mov	ip, r1
 800063c:	4619      	mov	r1, r3
 800063e:	4663      	mov	r3, ip
 8000640:	e000      	b.n	8000644 <__aeabi_cdcmpeq>
 8000642:	bf00      	nop

08000644 <__aeabi_cdcmpeq>:
 8000644:	b501      	push	{r0, lr}
 8000646:	f7ff ffb7 	bl	80005b8 <__cmpdf2>
 800064a:	2800      	cmp	r0, #0
 800064c:	bf48      	it	mi
 800064e:	f110 0f00 	cmnmi.w	r0, #0
 8000652:	bd01      	pop	{r0, pc}

08000654 <__aeabi_dcmpeq>:
 8000654:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000658:	f7ff fff4 	bl	8000644 <__aeabi_cdcmpeq>
 800065c:	bf0c      	ite	eq
 800065e:	2001      	moveq	r0, #1
 8000660:	2000      	movne	r0, #0
 8000662:	f85d fb08 	ldr.w	pc, [sp], #8
 8000666:	bf00      	nop

08000668 <__aeabi_dcmplt>:
 8000668:	f84d ed08 	str.w	lr, [sp, #-8]!
 800066c:	f7ff ffea 	bl	8000644 <__aeabi_cdcmpeq>
 8000670:	bf34      	ite	cc
 8000672:	2001      	movcc	r0, #1
 8000674:	2000      	movcs	r0, #0
 8000676:	f85d fb08 	ldr.w	pc, [sp], #8
 800067a:	bf00      	nop

0800067c <__aeabi_dcmple>:
 800067c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000680:	f7ff ffe0 	bl	8000644 <__aeabi_cdcmpeq>
 8000684:	bf94      	ite	ls
 8000686:	2001      	movls	r0, #1
 8000688:	2000      	movhi	r0, #0
 800068a:	f85d fb08 	ldr.w	pc, [sp], #8
 800068e:	bf00      	nop

08000690 <__aeabi_dcmpge>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff ffce 	bl	8000634 <__aeabi_cdrcmple>
 8000698:	bf94      	ite	ls
 800069a:	2001      	movls	r0, #1
 800069c:	2000      	movhi	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_dcmpgt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffc4 	bl	8000634 <__aeabi_cdrcmple>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_d2iz>:
 80006b8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80006bc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80006c0:	d215      	bcs.n	80006ee <__aeabi_d2iz+0x36>
 80006c2:	d511      	bpl.n	80006e8 <__aeabi_d2iz+0x30>
 80006c4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80006c8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80006cc:	d912      	bls.n	80006f4 <__aeabi_d2iz+0x3c>
 80006ce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80006d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80006d6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80006da:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80006de:	fa23 f002 	lsr.w	r0, r3, r2
 80006e2:	bf18      	it	ne
 80006e4:	4240      	negne	r0, r0
 80006e6:	4770      	bx	lr
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	4770      	bx	lr
 80006ee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80006f2:	d105      	bne.n	8000700 <__aeabi_d2iz+0x48>
 80006f4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80006f8:	bf08      	it	eq
 80006fa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80006fe:	4770      	bx	lr
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop

08000708 <__aeabi_frsub>:
 8000708:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 800070c:	e002      	b.n	8000714 <__addsf3>
 800070e:	bf00      	nop

08000710 <__aeabi_fsub>:
 8000710:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000714 <__addsf3>:
 8000714:	0042      	lsls	r2, r0, #1
 8000716:	bf1f      	itttt	ne
 8000718:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800071c:	ea92 0f03 	teqne	r2, r3
 8000720:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000724:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000728:	d06a      	beq.n	8000800 <__addsf3+0xec>
 800072a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800072e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000732:	bfc1      	itttt	gt
 8000734:	18d2      	addgt	r2, r2, r3
 8000736:	4041      	eorgt	r1, r0
 8000738:	4048      	eorgt	r0, r1
 800073a:	4041      	eorgt	r1, r0
 800073c:	bfb8      	it	lt
 800073e:	425b      	neglt	r3, r3
 8000740:	2b19      	cmp	r3, #25
 8000742:	bf88      	it	hi
 8000744:	4770      	bxhi	lr
 8000746:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800074a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800074e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000752:	bf18      	it	ne
 8000754:	4240      	negne	r0, r0
 8000756:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800075a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800075e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000762:	bf18      	it	ne
 8000764:	4249      	negne	r1, r1
 8000766:	ea92 0f03 	teq	r2, r3
 800076a:	d03f      	beq.n	80007ec <__addsf3+0xd8>
 800076c:	f1a2 0201 	sub.w	r2, r2, #1
 8000770:	fa41 fc03 	asr.w	ip, r1, r3
 8000774:	eb10 000c 	adds.w	r0, r0, ip
 8000778:	f1c3 0320 	rsb	r3, r3, #32
 800077c:	fa01 f103 	lsl.w	r1, r1, r3
 8000780:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000784:	d502      	bpl.n	800078c <__addsf3+0x78>
 8000786:	4249      	negs	r1, r1
 8000788:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800078c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000790:	d313      	bcc.n	80007ba <__addsf3+0xa6>
 8000792:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000796:	d306      	bcc.n	80007a6 <__addsf3+0x92>
 8000798:	0840      	lsrs	r0, r0, #1
 800079a:	ea4f 0131 	mov.w	r1, r1, rrx
 800079e:	f102 0201 	add.w	r2, r2, #1
 80007a2:	2afe      	cmp	r2, #254	@ 0xfe
 80007a4:	d251      	bcs.n	800084a <__addsf3+0x136>
 80007a6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80007aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007ae:	bf08      	it	eq
 80007b0:	f020 0001 	biceq.w	r0, r0, #1
 80007b4:	ea40 0003 	orr.w	r0, r0, r3
 80007b8:	4770      	bx	lr
 80007ba:	0049      	lsls	r1, r1, #1
 80007bc:	eb40 0000 	adc.w	r0, r0, r0
 80007c0:	3a01      	subs	r2, #1
 80007c2:	bf28      	it	cs
 80007c4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80007c8:	d2ed      	bcs.n	80007a6 <__addsf3+0x92>
 80007ca:	fab0 fc80 	clz	ip, r0
 80007ce:	f1ac 0c08 	sub.w	ip, ip, #8
 80007d2:	ebb2 020c 	subs.w	r2, r2, ip
 80007d6:	fa00 f00c 	lsl.w	r0, r0, ip
 80007da:	bfaa      	itet	ge
 80007dc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80007e0:	4252      	neglt	r2, r2
 80007e2:	4318      	orrge	r0, r3
 80007e4:	bfbc      	itt	lt
 80007e6:	40d0      	lsrlt	r0, r2
 80007e8:	4318      	orrlt	r0, r3
 80007ea:	4770      	bx	lr
 80007ec:	f092 0f00 	teq	r2, #0
 80007f0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80007f4:	bf06      	itte	eq
 80007f6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80007fa:	3201      	addeq	r2, #1
 80007fc:	3b01      	subne	r3, #1
 80007fe:	e7b5      	b.n	800076c <__addsf3+0x58>
 8000800:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000804:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000808:	bf18      	it	ne
 800080a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800080e:	d021      	beq.n	8000854 <__addsf3+0x140>
 8000810:	ea92 0f03 	teq	r2, r3
 8000814:	d004      	beq.n	8000820 <__addsf3+0x10c>
 8000816:	f092 0f00 	teq	r2, #0
 800081a:	bf08      	it	eq
 800081c:	4608      	moveq	r0, r1
 800081e:	4770      	bx	lr
 8000820:	ea90 0f01 	teq	r0, r1
 8000824:	bf1c      	itt	ne
 8000826:	2000      	movne	r0, #0
 8000828:	4770      	bxne	lr
 800082a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800082e:	d104      	bne.n	800083a <__addsf3+0x126>
 8000830:	0040      	lsls	r0, r0, #1
 8000832:	bf28      	it	cs
 8000834:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000838:	4770      	bx	lr
 800083a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800083e:	bf3c      	itt	cc
 8000840:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000844:	4770      	bxcc	lr
 8000846:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800084a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800084e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000852:	4770      	bx	lr
 8000854:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000858:	bf16      	itet	ne
 800085a:	4608      	movne	r0, r1
 800085c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000860:	4601      	movne	r1, r0
 8000862:	0242      	lsls	r2, r0, #9
 8000864:	bf06      	itte	eq
 8000866:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800086a:	ea90 0f01 	teqeq	r0, r1
 800086e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000872:	4770      	bx	lr

08000874 <__aeabi_ui2f>:
 8000874:	f04f 0300 	mov.w	r3, #0
 8000878:	e004      	b.n	8000884 <__aeabi_i2f+0x8>
 800087a:	bf00      	nop

0800087c <__aeabi_i2f>:
 800087c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000880:	bf48      	it	mi
 8000882:	4240      	negmi	r0, r0
 8000884:	ea5f 0c00 	movs.w	ip, r0
 8000888:	bf08      	it	eq
 800088a:	4770      	bxeq	lr
 800088c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000890:	4601      	mov	r1, r0
 8000892:	f04f 0000 	mov.w	r0, #0
 8000896:	e01c      	b.n	80008d2 <__aeabi_l2f+0x2a>

08000898 <__aeabi_ul2f>:
 8000898:	ea50 0201 	orrs.w	r2, r0, r1
 800089c:	bf08      	it	eq
 800089e:	4770      	bxeq	lr
 80008a0:	f04f 0300 	mov.w	r3, #0
 80008a4:	e00a      	b.n	80008bc <__aeabi_l2f+0x14>
 80008a6:	bf00      	nop

080008a8 <__aeabi_l2f>:
 80008a8:	ea50 0201 	orrs.w	r2, r0, r1
 80008ac:	bf08      	it	eq
 80008ae:	4770      	bxeq	lr
 80008b0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80008b4:	d502      	bpl.n	80008bc <__aeabi_l2f+0x14>
 80008b6:	4240      	negs	r0, r0
 80008b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008bc:	ea5f 0c01 	movs.w	ip, r1
 80008c0:	bf02      	ittt	eq
 80008c2:	4684      	moveq	ip, r0
 80008c4:	4601      	moveq	r1, r0
 80008c6:	2000      	moveq	r0, #0
 80008c8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80008cc:	bf08      	it	eq
 80008ce:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80008d2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80008d6:	fabc f28c 	clz	r2, ip
 80008da:	3a08      	subs	r2, #8
 80008dc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80008e0:	db10      	blt.n	8000904 <__aeabi_l2f+0x5c>
 80008e2:	fa01 fc02 	lsl.w	ip, r1, r2
 80008e6:	4463      	add	r3, ip
 80008e8:	fa00 fc02 	lsl.w	ip, r0, r2
 80008ec:	f1c2 0220 	rsb	r2, r2, #32
 80008f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80008f4:	fa20 f202 	lsr.w	r2, r0, r2
 80008f8:	eb43 0002 	adc.w	r0, r3, r2
 80008fc:	bf08      	it	eq
 80008fe:	f020 0001 	biceq.w	r0, r0, #1
 8000902:	4770      	bx	lr
 8000904:	f102 0220 	add.w	r2, r2, #32
 8000908:	fa01 fc02 	lsl.w	ip, r1, r2
 800090c:	f1c2 0220 	rsb	r2, r2, #32
 8000910:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000914:	fa21 f202 	lsr.w	r2, r1, r2
 8000918:	eb43 0002 	adc.w	r0, r3, r2
 800091c:	bf08      	it	eq
 800091e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000922:	4770      	bx	lr

08000924 <__aeabi_fmul>:
 8000924:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000928:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800092c:	bf1e      	ittt	ne
 800092e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000932:	ea92 0f0c 	teqne	r2, ip
 8000936:	ea93 0f0c 	teqne	r3, ip
 800093a:	d06f      	beq.n	8000a1c <__aeabi_fmul+0xf8>
 800093c:	441a      	add	r2, r3
 800093e:	ea80 0c01 	eor.w	ip, r0, r1
 8000942:	0240      	lsls	r0, r0, #9
 8000944:	bf18      	it	ne
 8000946:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800094a:	d01e      	beq.n	800098a <__aeabi_fmul+0x66>
 800094c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000950:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000954:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000958:	fba0 3101 	umull	r3, r1, r0, r1
 800095c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000960:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000964:	bf3e      	ittt	cc
 8000966:	0049      	lslcc	r1, r1, #1
 8000968:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800096c:	005b      	lslcc	r3, r3, #1
 800096e:	ea40 0001 	orr.w	r0, r0, r1
 8000972:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000976:	2afd      	cmp	r2, #253	@ 0xfd
 8000978:	d81d      	bhi.n	80009b6 <__aeabi_fmul+0x92>
 800097a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800097e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000982:	bf08      	it	eq
 8000984:	f020 0001 	biceq.w	r0, r0, #1
 8000988:	4770      	bx	lr
 800098a:	f090 0f00 	teq	r0, #0
 800098e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000992:	bf08      	it	eq
 8000994:	0249      	lsleq	r1, r1, #9
 8000996:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800099a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800099e:	3a7f      	subs	r2, #127	@ 0x7f
 80009a0:	bfc2      	ittt	gt
 80009a2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80009a6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80009aa:	4770      	bxgt	lr
 80009ac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009b0:	f04f 0300 	mov.w	r3, #0
 80009b4:	3a01      	subs	r2, #1
 80009b6:	dc5d      	bgt.n	8000a74 <__aeabi_fmul+0x150>
 80009b8:	f112 0f19 	cmn.w	r2, #25
 80009bc:	bfdc      	itt	le
 80009be:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80009c2:	4770      	bxle	lr
 80009c4:	f1c2 0200 	rsb	r2, r2, #0
 80009c8:	0041      	lsls	r1, r0, #1
 80009ca:	fa21 f102 	lsr.w	r1, r1, r2
 80009ce:	f1c2 0220 	rsb	r2, r2, #32
 80009d2:	fa00 fc02 	lsl.w	ip, r0, r2
 80009d6:	ea5f 0031 	movs.w	r0, r1, rrx
 80009da:	f140 0000 	adc.w	r0, r0, #0
 80009de:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80009e2:	bf08      	it	eq
 80009e4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80009e8:	4770      	bx	lr
 80009ea:	f092 0f00 	teq	r2, #0
 80009ee:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80009f2:	bf02      	ittt	eq
 80009f4:	0040      	lsleq	r0, r0, #1
 80009f6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80009fa:	3a01      	subeq	r2, #1
 80009fc:	d0f9      	beq.n	80009f2 <__aeabi_fmul+0xce>
 80009fe:	ea40 000c 	orr.w	r0, r0, ip
 8000a02:	f093 0f00 	teq	r3, #0
 8000a06:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a0a:	bf02      	ittt	eq
 8000a0c:	0049      	lsleq	r1, r1, #1
 8000a0e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000a12:	3b01      	subeq	r3, #1
 8000a14:	d0f9      	beq.n	8000a0a <__aeabi_fmul+0xe6>
 8000a16:	ea41 010c 	orr.w	r1, r1, ip
 8000a1a:	e78f      	b.n	800093c <__aeabi_fmul+0x18>
 8000a1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a20:	ea92 0f0c 	teq	r2, ip
 8000a24:	bf18      	it	ne
 8000a26:	ea93 0f0c 	teqne	r3, ip
 8000a2a:	d00a      	beq.n	8000a42 <__aeabi_fmul+0x11e>
 8000a2c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000a30:	bf18      	it	ne
 8000a32:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000a36:	d1d8      	bne.n	80009ea <__aeabi_fmul+0xc6>
 8000a38:	ea80 0001 	eor.w	r0, r0, r1
 8000a3c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000a40:	4770      	bx	lr
 8000a42:	f090 0f00 	teq	r0, #0
 8000a46:	bf17      	itett	ne
 8000a48:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000a4c:	4608      	moveq	r0, r1
 8000a4e:	f091 0f00 	teqne	r1, #0
 8000a52:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000a56:	d014      	beq.n	8000a82 <__aeabi_fmul+0x15e>
 8000a58:	ea92 0f0c 	teq	r2, ip
 8000a5c:	d101      	bne.n	8000a62 <__aeabi_fmul+0x13e>
 8000a5e:	0242      	lsls	r2, r0, #9
 8000a60:	d10f      	bne.n	8000a82 <__aeabi_fmul+0x15e>
 8000a62:	ea93 0f0c 	teq	r3, ip
 8000a66:	d103      	bne.n	8000a70 <__aeabi_fmul+0x14c>
 8000a68:	024b      	lsls	r3, r1, #9
 8000a6a:	bf18      	it	ne
 8000a6c:	4608      	movne	r0, r1
 8000a6e:	d108      	bne.n	8000a82 <__aeabi_fmul+0x15e>
 8000a70:	ea80 0001 	eor.w	r0, r0, r1
 8000a74:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000a78:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a7c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a80:	4770      	bx	lr
 8000a82:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a86:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_fdiv>:
 8000a8c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000a90:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000a94:	bf1e      	ittt	ne
 8000a96:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000a9a:	ea92 0f0c 	teqne	r2, ip
 8000a9e:	ea93 0f0c 	teqne	r3, ip
 8000aa2:	d069      	beq.n	8000b78 <__aeabi_fdiv+0xec>
 8000aa4:	eba2 0203 	sub.w	r2, r2, r3
 8000aa8:	ea80 0c01 	eor.w	ip, r0, r1
 8000aac:	0249      	lsls	r1, r1, #9
 8000aae:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ab2:	d037      	beq.n	8000b24 <__aeabi_fdiv+0x98>
 8000ab4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ab8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000abc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ac0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ac4:	428b      	cmp	r3, r1
 8000ac6:	bf38      	it	cc
 8000ac8:	005b      	lslcc	r3, r3, #1
 8000aca:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000ace:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ad2:	428b      	cmp	r3, r1
 8000ad4:	bf24      	itt	cs
 8000ad6:	1a5b      	subcs	r3, r3, r1
 8000ad8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000adc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ae0:	bf24      	itt	cs
 8000ae2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ae6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000aea:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000aee:	bf24      	itt	cs
 8000af0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000af4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000af8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000afc:	bf24      	itt	cs
 8000afe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000b02:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b06:	011b      	lsls	r3, r3, #4
 8000b08:	bf18      	it	ne
 8000b0a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000b0e:	d1e0      	bne.n	8000ad2 <__aeabi_fdiv+0x46>
 8000b10:	2afd      	cmp	r2, #253	@ 0xfd
 8000b12:	f63f af50 	bhi.w	80009b6 <__aeabi_fmul+0x92>
 8000b16:	428b      	cmp	r3, r1
 8000b18:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b1c:	bf08      	it	eq
 8000b1e:	f020 0001 	biceq.w	r0, r0, #1
 8000b22:	4770      	bx	lr
 8000b24:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000b28:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b2c:	327f      	adds	r2, #127	@ 0x7f
 8000b2e:	bfc2      	ittt	gt
 8000b30:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000b34:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b38:	4770      	bxgt	lr
 8000b3a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b3e:	f04f 0300 	mov.w	r3, #0
 8000b42:	3a01      	subs	r2, #1
 8000b44:	e737      	b.n	80009b6 <__aeabi_fmul+0x92>
 8000b46:	f092 0f00 	teq	r2, #0
 8000b4a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000b4e:	bf02      	ittt	eq
 8000b50:	0040      	lsleq	r0, r0, #1
 8000b52:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000b56:	3a01      	subeq	r2, #1
 8000b58:	d0f9      	beq.n	8000b4e <__aeabi_fdiv+0xc2>
 8000b5a:	ea40 000c 	orr.w	r0, r0, ip
 8000b5e:	f093 0f00 	teq	r3, #0
 8000b62:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b66:	bf02      	ittt	eq
 8000b68:	0049      	lsleq	r1, r1, #1
 8000b6a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000b6e:	3b01      	subeq	r3, #1
 8000b70:	d0f9      	beq.n	8000b66 <__aeabi_fdiv+0xda>
 8000b72:	ea41 010c 	orr.w	r1, r1, ip
 8000b76:	e795      	b.n	8000aa4 <__aeabi_fdiv+0x18>
 8000b78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000b7c:	ea92 0f0c 	teq	r2, ip
 8000b80:	d108      	bne.n	8000b94 <__aeabi_fdiv+0x108>
 8000b82:	0242      	lsls	r2, r0, #9
 8000b84:	f47f af7d 	bne.w	8000a82 <__aeabi_fmul+0x15e>
 8000b88:	ea93 0f0c 	teq	r3, ip
 8000b8c:	f47f af70 	bne.w	8000a70 <__aeabi_fmul+0x14c>
 8000b90:	4608      	mov	r0, r1
 8000b92:	e776      	b.n	8000a82 <__aeabi_fmul+0x15e>
 8000b94:	ea93 0f0c 	teq	r3, ip
 8000b98:	d104      	bne.n	8000ba4 <__aeabi_fdiv+0x118>
 8000b9a:	024b      	lsls	r3, r1, #9
 8000b9c:	f43f af4c 	beq.w	8000a38 <__aeabi_fmul+0x114>
 8000ba0:	4608      	mov	r0, r1
 8000ba2:	e76e      	b.n	8000a82 <__aeabi_fmul+0x15e>
 8000ba4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ba8:	bf18      	it	ne
 8000baa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000bae:	d1ca      	bne.n	8000b46 <__aeabi_fdiv+0xba>
 8000bb0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000bb4:	f47f af5c 	bne.w	8000a70 <__aeabi_fmul+0x14c>
 8000bb8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000bbc:	f47f af3c 	bne.w	8000a38 <__aeabi_fmul+0x114>
 8000bc0:	e75f      	b.n	8000a82 <__aeabi_fmul+0x15e>
 8000bc2:	bf00      	nop

08000bc4 <__gesf2>:
 8000bc4:	f04f 3cff 	mov.w	ip, #4294967295
 8000bc8:	e006      	b.n	8000bd8 <__cmpsf2+0x4>
 8000bca:	bf00      	nop

08000bcc <__lesf2>:
 8000bcc:	f04f 0c01 	mov.w	ip, #1
 8000bd0:	e002      	b.n	8000bd8 <__cmpsf2+0x4>
 8000bd2:	bf00      	nop

08000bd4 <__cmpsf2>:
 8000bd4:	f04f 0c01 	mov.w	ip, #1
 8000bd8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000bdc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000be0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000be8:	bf18      	it	ne
 8000bea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bee:	d011      	beq.n	8000c14 <__cmpsf2+0x40>
 8000bf0:	b001      	add	sp, #4
 8000bf2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000bf6:	bf18      	it	ne
 8000bf8:	ea90 0f01 	teqne	r0, r1
 8000bfc:	bf58      	it	pl
 8000bfe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000c02:	bf88      	it	hi
 8000c04:	17c8      	asrhi	r0, r1, #31
 8000c06:	bf38      	it	cc
 8000c08:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000c0c:	bf18      	it	ne
 8000c0e:	f040 0001 	orrne.w	r0, r0, #1
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	d102      	bne.n	8000c20 <__cmpsf2+0x4c>
 8000c1a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c1e:	d105      	bne.n	8000c2c <__cmpsf2+0x58>
 8000c20:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000c24:	d1e4      	bne.n	8000bf0 <__cmpsf2+0x1c>
 8000c26:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000c2a:	d0e1      	beq.n	8000bf0 <__cmpsf2+0x1c>
 8000c2c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop

08000c34 <__aeabi_cfrcmple>:
 8000c34:	4684      	mov	ip, r0
 8000c36:	4608      	mov	r0, r1
 8000c38:	4661      	mov	r1, ip
 8000c3a:	e7ff      	b.n	8000c3c <__aeabi_cfcmpeq>

08000c3c <__aeabi_cfcmpeq>:
 8000c3c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000c3e:	f7ff ffc9 	bl	8000bd4 <__cmpsf2>
 8000c42:	2800      	cmp	r0, #0
 8000c44:	bf48      	it	mi
 8000c46:	f110 0f00 	cmnmi.w	r0, #0
 8000c4a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000c4c <__aeabi_fcmpeq>:
 8000c4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c50:	f7ff fff4 	bl	8000c3c <__aeabi_cfcmpeq>
 8000c54:	bf0c      	ite	eq
 8000c56:	2001      	moveq	r0, #1
 8000c58:	2000      	movne	r0, #0
 8000c5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c5e:	bf00      	nop

08000c60 <__aeabi_fcmplt>:
 8000c60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c64:	f7ff ffea 	bl	8000c3c <__aeabi_cfcmpeq>
 8000c68:	bf34      	ite	cc
 8000c6a:	2001      	movcc	r0, #1
 8000c6c:	2000      	movcs	r0, #0
 8000c6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c72:	bf00      	nop

08000c74 <__aeabi_fcmple>:
 8000c74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c78:	f7ff ffe0 	bl	8000c3c <__aeabi_cfcmpeq>
 8000c7c:	bf94      	ite	ls
 8000c7e:	2001      	movls	r0, #1
 8000c80:	2000      	movhi	r0, #0
 8000c82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c86:	bf00      	nop

08000c88 <__aeabi_fcmpge>:
 8000c88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c8c:	f7ff ffd2 	bl	8000c34 <__aeabi_cfrcmple>
 8000c90:	bf94      	ite	ls
 8000c92:	2001      	movls	r0, #1
 8000c94:	2000      	movhi	r0, #0
 8000c96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c9a:	bf00      	nop

08000c9c <__aeabi_fcmpgt>:
 8000c9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ca0:	f7ff ffc8 	bl	8000c34 <__aeabi_cfrcmple>
 8000ca4:	bf34      	ite	cc
 8000ca6:	2001      	movcc	r0, #1
 8000ca8:	2000      	movcs	r0, #0
 8000caa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cae:	bf00      	nop

08000cb0 <__aeabi_f2iz>:
 8000cb0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000cb4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000cb8:	d30f      	bcc.n	8000cda <__aeabi_f2iz+0x2a>
 8000cba:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000cbe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000cc2:	d90d      	bls.n	8000ce0 <__aeabi_f2iz+0x30>
 8000cc4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000cc8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ccc:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000cd0:	fa23 f002 	lsr.w	r0, r3, r2
 8000cd4:	bf18      	it	ne
 8000cd6:	4240      	negne	r0, r0
 8000cd8:	4770      	bx	lr
 8000cda:	f04f 0000 	mov.w	r0, #0
 8000cde:	4770      	bx	lr
 8000ce0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000ce4:	d101      	bne.n	8000cea <__aeabi_f2iz+0x3a>
 8000ce6:	0242      	lsls	r2, r0, #9
 8000ce8:	d105      	bne.n	8000cf6 <__aeabi_f2iz+0x46>
 8000cea:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000cee:	bf08      	it	eq
 8000cf0:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000cf4:	4770      	bx	lr
 8000cf6:	f04f 0000 	mov.w	r0, #0
 8000cfa:	4770      	bx	lr

08000cfc <__aeabi_f2uiz>:
 8000cfc:	0042      	lsls	r2, r0, #1
 8000cfe:	d20e      	bcs.n	8000d1e <__aeabi_f2uiz+0x22>
 8000d00:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000d04:	d30b      	bcc.n	8000d1e <__aeabi_f2uiz+0x22>
 8000d06:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000d0a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d0e:	d409      	bmi.n	8000d24 <__aeabi_f2uiz+0x28>
 8000d10:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d14:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000d18:	fa23 f002 	lsr.w	r0, r3, r2
 8000d1c:	4770      	bx	lr
 8000d1e:	f04f 0000 	mov.w	r0, #0
 8000d22:	4770      	bx	lr
 8000d24:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000d28:	d101      	bne.n	8000d2e <__aeabi_f2uiz+0x32>
 8000d2a:	0242      	lsls	r2, r0, #9
 8000d2c:	d102      	bne.n	8000d34 <__aeabi_f2uiz+0x38>
 8000d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8000d32:	4770      	bx	lr
 8000d34:	f04f 0000 	mov.w	r0, #0
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop

08000d3c <__aeabi_uldivmod>:
 8000d3c:	b953      	cbnz	r3, 8000d54 <__aeabi_uldivmod+0x18>
 8000d3e:	b94a      	cbnz	r2, 8000d54 <__aeabi_uldivmod+0x18>
 8000d40:	2900      	cmp	r1, #0
 8000d42:	bf08      	it	eq
 8000d44:	2800      	cmpeq	r0, #0
 8000d46:	bf1c      	itt	ne
 8000d48:	f04f 31ff 	movne.w	r1, #4294967295
 8000d4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000d50:	f000 b988 	b.w	8001064 <__aeabi_idiv0>
 8000d54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d5c:	f000 f806 	bl	8000d6c <__udivmoddi4>
 8000d60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d68:	b004      	add	sp, #16
 8000d6a:	4770      	bx	lr

08000d6c <__udivmoddi4>:
 8000d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d70:	9d08      	ldr	r5, [sp, #32]
 8000d72:	468e      	mov	lr, r1
 8000d74:	4604      	mov	r4, r0
 8000d76:	4688      	mov	r8, r1
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d14a      	bne.n	8000e12 <__udivmoddi4+0xa6>
 8000d7c:	428a      	cmp	r2, r1
 8000d7e:	4617      	mov	r7, r2
 8000d80:	d962      	bls.n	8000e48 <__udivmoddi4+0xdc>
 8000d82:	fab2 f682 	clz	r6, r2
 8000d86:	b14e      	cbz	r6, 8000d9c <__udivmoddi4+0x30>
 8000d88:	f1c6 0320 	rsb	r3, r6, #32
 8000d8c:	fa01 f806 	lsl.w	r8, r1, r6
 8000d90:	fa20 f303 	lsr.w	r3, r0, r3
 8000d94:	40b7      	lsls	r7, r6
 8000d96:	ea43 0808 	orr.w	r8, r3, r8
 8000d9a:	40b4      	lsls	r4, r6
 8000d9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000da8:	0c23      	lsrs	r3, r4, #16
 8000daa:	fb0e 8811 	mls	r8, lr, r1, r8
 8000dae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db2:	fb01 f20c 	mul.w	r2, r1, ip
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d909      	bls.n	8000dce <__udivmoddi4+0x62>
 8000dba:	18fb      	adds	r3, r7, r3
 8000dbc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000dc0:	f080 80ea 	bcs.w	8000f98 <__udivmoddi4+0x22c>
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	f240 80e7 	bls.w	8000f98 <__udivmoddi4+0x22c>
 8000dca:	3902      	subs	r1, #2
 8000dcc:	443b      	add	r3, r7
 8000dce:	1a9a      	subs	r2, r3, r2
 8000dd0:	b2a3      	uxth	r3, r4
 8000dd2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dd6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dde:	fb00 fc0c 	mul.w	ip, r0, ip
 8000de2:	459c      	cmp	ip, r3
 8000de4:	d909      	bls.n	8000dfa <__udivmoddi4+0x8e>
 8000de6:	18fb      	adds	r3, r7, r3
 8000de8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dec:	f080 80d6 	bcs.w	8000f9c <__udivmoddi4+0x230>
 8000df0:	459c      	cmp	ip, r3
 8000df2:	f240 80d3 	bls.w	8000f9c <__udivmoddi4+0x230>
 8000df6:	443b      	add	r3, r7
 8000df8:	3802      	subs	r0, #2
 8000dfa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dfe:	eba3 030c 	sub.w	r3, r3, ip
 8000e02:	2100      	movs	r1, #0
 8000e04:	b11d      	cbz	r5, 8000e0e <__udivmoddi4+0xa2>
 8000e06:	40f3      	lsrs	r3, r6
 8000e08:	2200      	movs	r2, #0
 8000e0a:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e12:	428b      	cmp	r3, r1
 8000e14:	d905      	bls.n	8000e22 <__udivmoddi4+0xb6>
 8000e16:	b10d      	cbz	r5, 8000e1c <__udivmoddi4+0xb0>
 8000e18:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4608      	mov	r0, r1
 8000e20:	e7f5      	b.n	8000e0e <__udivmoddi4+0xa2>
 8000e22:	fab3 f183 	clz	r1, r3
 8000e26:	2900      	cmp	r1, #0
 8000e28:	d146      	bne.n	8000eb8 <__udivmoddi4+0x14c>
 8000e2a:	4573      	cmp	r3, lr
 8000e2c:	d302      	bcc.n	8000e34 <__udivmoddi4+0xc8>
 8000e2e:	4282      	cmp	r2, r0
 8000e30:	f200 8105 	bhi.w	800103e <__udivmoddi4+0x2d2>
 8000e34:	1a84      	subs	r4, r0, r2
 8000e36:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	4690      	mov	r8, r2
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	d0e5      	beq.n	8000e0e <__udivmoddi4+0xa2>
 8000e42:	e9c5 4800 	strd	r4, r8, [r5]
 8000e46:	e7e2      	b.n	8000e0e <__udivmoddi4+0xa2>
 8000e48:	2a00      	cmp	r2, #0
 8000e4a:	f000 8090 	beq.w	8000f6e <__udivmoddi4+0x202>
 8000e4e:	fab2 f682 	clz	r6, r2
 8000e52:	2e00      	cmp	r6, #0
 8000e54:	f040 80a4 	bne.w	8000fa0 <__udivmoddi4+0x234>
 8000e58:	1a8a      	subs	r2, r1, r2
 8000e5a:	0c03      	lsrs	r3, r0, #16
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	b280      	uxth	r0, r0
 8000e62:	b2bc      	uxth	r4, r7
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e6a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e72:	fb04 f20c 	mul.w	r2, r4, ip
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x11e>
 8000e7a:	18fb      	adds	r3, r7, r3
 8000e7c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x11c>
 8000e82:	429a      	cmp	r2, r3
 8000e84:	f200 80e0 	bhi.w	8001048 <__udivmoddi4+0x2dc>
 8000e88:	46c4      	mov	ip, r8
 8000e8a:	1a9b      	subs	r3, r3, r2
 8000e8c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e90:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e94:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e98:	fb02 f404 	mul.w	r4, r2, r4
 8000e9c:	429c      	cmp	r4, r3
 8000e9e:	d907      	bls.n	8000eb0 <__udivmoddi4+0x144>
 8000ea0:	18fb      	adds	r3, r7, r3
 8000ea2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000ea6:	d202      	bcs.n	8000eae <__udivmoddi4+0x142>
 8000ea8:	429c      	cmp	r4, r3
 8000eaa:	f200 80ca 	bhi.w	8001042 <__udivmoddi4+0x2d6>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	1b1b      	subs	r3, r3, r4
 8000eb2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000eb6:	e7a5      	b.n	8000e04 <__udivmoddi4+0x98>
 8000eb8:	f1c1 0620 	rsb	r6, r1, #32
 8000ebc:	408b      	lsls	r3, r1
 8000ebe:	fa22 f706 	lsr.w	r7, r2, r6
 8000ec2:	431f      	orrs	r7, r3
 8000ec4:	fa0e f401 	lsl.w	r4, lr, r1
 8000ec8:	fa20 f306 	lsr.w	r3, r0, r6
 8000ecc:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ed0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ed4:	4323      	orrs	r3, r4
 8000ed6:	fa00 f801 	lsl.w	r8, r0, r1
 8000eda:	fa1f fc87 	uxth.w	ip, r7
 8000ede:	fbbe f0f9 	udiv	r0, lr, r9
 8000ee2:	0c1c      	lsrs	r4, r3, #16
 8000ee4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ee8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000eec:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ef0:	45a6      	cmp	lr, r4
 8000ef2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef6:	d909      	bls.n	8000f0c <__udivmoddi4+0x1a0>
 8000ef8:	193c      	adds	r4, r7, r4
 8000efa:	f100 3aff 	add.w	sl, r0, #4294967295
 8000efe:	f080 809c 	bcs.w	800103a <__udivmoddi4+0x2ce>
 8000f02:	45a6      	cmp	lr, r4
 8000f04:	f240 8099 	bls.w	800103a <__udivmoddi4+0x2ce>
 8000f08:	3802      	subs	r0, #2
 8000f0a:	443c      	add	r4, r7
 8000f0c:	eba4 040e 	sub.w	r4, r4, lr
 8000f10:	fa1f fe83 	uxth.w	lr, r3
 8000f14:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f18:	fb09 4413 	mls	r4, r9, r3, r4
 8000f1c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f20:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f24:	45a4      	cmp	ip, r4
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x1ce>
 8000f28:	193c      	adds	r4, r7, r4
 8000f2a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f2e:	f080 8082 	bcs.w	8001036 <__udivmoddi4+0x2ca>
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d97f      	bls.n	8001036 <__udivmoddi4+0x2ca>
 8000f36:	3b02      	subs	r3, #2
 8000f38:	443c      	add	r4, r7
 8000f3a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f46:	4564      	cmp	r4, ip
 8000f48:	4673      	mov	r3, lr
 8000f4a:	46e1      	mov	r9, ip
 8000f4c:	d362      	bcc.n	8001014 <__udivmoddi4+0x2a8>
 8000f4e:	d05f      	beq.n	8001010 <__udivmoddi4+0x2a4>
 8000f50:	b15d      	cbz	r5, 8000f6a <__udivmoddi4+0x1fe>
 8000f52:	ebb8 0203 	subs.w	r2, r8, r3
 8000f56:	eb64 0409 	sbc.w	r4, r4, r9
 8000f5a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5e:	fa22 f301 	lsr.w	r3, r2, r1
 8000f62:	431e      	orrs	r6, r3
 8000f64:	40cc      	lsrs	r4, r1
 8000f66:	e9c5 6400 	strd	r6, r4, [r5]
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	e74f      	b.n	8000e0e <__udivmoddi4+0xa2>
 8000f6e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f72:	0c01      	lsrs	r1, r0, #16
 8000f74:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f78:	b280      	uxth	r0, r0
 8000f7a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f7e:	463b      	mov	r3, r7
 8000f80:	4638      	mov	r0, r7
 8000f82:	463c      	mov	r4, r7
 8000f84:	46b8      	mov	r8, r7
 8000f86:	46be      	mov	lr, r7
 8000f88:	2620      	movs	r6, #32
 8000f8a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f8e:	eba2 0208 	sub.w	r2, r2, r8
 8000f92:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f96:	e766      	b.n	8000e66 <__udivmoddi4+0xfa>
 8000f98:	4601      	mov	r1, r0
 8000f9a:	e718      	b.n	8000dce <__udivmoddi4+0x62>
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	e72c      	b.n	8000dfa <__udivmoddi4+0x8e>
 8000fa0:	f1c6 0220 	rsb	r2, r6, #32
 8000fa4:	fa2e f302 	lsr.w	r3, lr, r2
 8000fa8:	40b7      	lsls	r7, r6
 8000faa:	40b1      	lsls	r1, r6
 8000fac:	fa20 f202 	lsr.w	r2, r0, r2
 8000fb0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fb4:	430a      	orrs	r2, r1
 8000fb6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fba:	b2bc      	uxth	r4, r7
 8000fbc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fc0:	0c11      	lsrs	r1, r2, #16
 8000fc2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fc6:	fb08 f904 	mul.w	r9, r8, r4
 8000fca:	40b0      	lsls	r0, r6
 8000fcc:	4589      	cmp	r9, r1
 8000fce:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fd2:	b280      	uxth	r0, r0
 8000fd4:	d93e      	bls.n	8001054 <__udivmoddi4+0x2e8>
 8000fd6:	1879      	adds	r1, r7, r1
 8000fd8:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fdc:	d201      	bcs.n	8000fe2 <__udivmoddi4+0x276>
 8000fde:	4589      	cmp	r9, r1
 8000fe0:	d81f      	bhi.n	8001022 <__udivmoddi4+0x2b6>
 8000fe2:	eba1 0109 	sub.w	r1, r1, r9
 8000fe6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fea:	fb09 f804 	mul.w	r8, r9, r4
 8000fee:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ff2:	b292      	uxth	r2, r2
 8000ff4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ff8:	4542      	cmp	r2, r8
 8000ffa:	d229      	bcs.n	8001050 <__udivmoddi4+0x2e4>
 8000ffc:	18ba      	adds	r2, r7, r2
 8000ffe:	f109 31ff 	add.w	r1, r9, #4294967295
 8001002:	d2c4      	bcs.n	8000f8e <__udivmoddi4+0x222>
 8001004:	4542      	cmp	r2, r8
 8001006:	d2c2      	bcs.n	8000f8e <__udivmoddi4+0x222>
 8001008:	f1a9 0102 	sub.w	r1, r9, #2
 800100c:	443a      	add	r2, r7
 800100e:	e7be      	b.n	8000f8e <__udivmoddi4+0x222>
 8001010:	45f0      	cmp	r8, lr
 8001012:	d29d      	bcs.n	8000f50 <__udivmoddi4+0x1e4>
 8001014:	ebbe 0302 	subs.w	r3, lr, r2
 8001018:	eb6c 0c07 	sbc.w	ip, ip, r7
 800101c:	3801      	subs	r0, #1
 800101e:	46e1      	mov	r9, ip
 8001020:	e796      	b.n	8000f50 <__udivmoddi4+0x1e4>
 8001022:	eba7 0909 	sub.w	r9, r7, r9
 8001026:	4449      	add	r1, r9
 8001028:	f1a8 0c02 	sub.w	ip, r8, #2
 800102c:	fbb1 f9fe 	udiv	r9, r1, lr
 8001030:	fb09 f804 	mul.w	r8, r9, r4
 8001034:	e7db      	b.n	8000fee <__udivmoddi4+0x282>
 8001036:	4673      	mov	r3, lr
 8001038:	e77f      	b.n	8000f3a <__udivmoddi4+0x1ce>
 800103a:	4650      	mov	r0, sl
 800103c:	e766      	b.n	8000f0c <__udivmoddi4+0x1a0>
 800103e:	4608      	mov	r0, r1
 8001040:	e6fd      	b.n	8000e3e <__udivmoddi4+0xd2>
 8001042:	443b      	add	r3, r7
 8001044:	3a02      	subs	r2, #2
 8001046:	e733      	b.n	8000eb0 <__udivmoddi4+0x144>
 8001048:	f1ac 0c02 	sub.w	ip, ip, #2
 800104c:	443b      	add	r3, r7
 800104e:	e71c      	b.n	8000e8a <__udivmoddi4+0x11e>
 8001050:	4649      	mov	r1, r9
 8001052:	e79c      	b.n	8000f8e <__udivmoddi4+0x222>
 8001054:	eba1 0109 	sub.w	r1, r1, r9
 8001058:	46c4      	mov	ip, r8
 800105a:	fbb1 f9fe 	udiv	r9, r1, lr
 800105e:	fb09 f804 	mul.w	r8, r9, r4
 8001062:	e7c4      	b.n	8000fee <__udivmoddi4+0x282>

08001064 <__aeabi_idiv0>:
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop

08001068 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001070:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001074:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001076:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4313      	orrs	r3, r2
 800107e:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001080:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001084:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4013      	ands	r3, r2
 800108a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800108c:	68fb      	ldr	r3, [r7, #12]
}
 800108e:	bf00      	nop
 8001090:	3714      	adds	r7, #20
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr

08001098 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 800109e:	4b2f      	ldr	r3, [pc, #188]	@ (800115c <MX_ADC_Init+0xc4>)
 80010a0:	4a2f      	ldr	r2, [pc, #188]	@ (8001160 <MX_ADC_Init+0xc8>)
 80010a2:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010a4:	4b2d      	ldr	r3, [pc, #180]	@ (800115c <MX_ADC_Init+0xc4>)
 80010a6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80010aa:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80010ac:	4b2b      	ldr	r3, [pc, #172]	@ (800115c <MX_ADC_Init+0xc4>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010b2:	4b2a      	ldr	r3, [pc, #168]	@ (800115c <MX_ADC_Init+0xc4>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010b8:	4b28      	ldr	r3, [pc, #160]	@ (800115c <MX_ADC_Init+0xc4>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010be:	4b27      	ldr	r3, [pc, #156]	@ (800115c <MX_ADC_Init+0xc4>)
 80010c0:	2204      	movs	r2, #4
 80010c2:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80010c4:	4b25      	ldr	r3, [pc, #148]	@ (800115c <MX_ADC_Init+0xc4>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80010ca:	4b24      	ldr	r3, [pc, #144]	@ (800115c <MX_ADC_Init+0xc4>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80010d0:	4b22      	ldr	r3, [pc, #136]	@ (800115c <MX_ADC_Init+0xc4>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 80010d6:	4b21      	ldr	r3, [pc, #132]	@ (800115c <MX_ADC_Init+0xc4>)
 80010d8:	2201      	movs	r2, #1
 80010da:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80010dc:	4b1f      	ldr	r3, [pc, #124]	@ (800115c <MX_ADC_Init+0xc4>)
 80010de:	2200      	movs	r2, #0
 80010e0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010e4:	4b1d      	ldr	r3, [pc, #116]	@ (800115c <MX_ADC_Init+0xc4>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010ea:	4b1c      	ldr	r3, [pc, #112]	@ (800115c <MX_ADC_Init+0xc4>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 80010f0:	4b1a      	ldr	r3, [pc, #104]	@ (800115c <MX_ADC_Init+0xc4>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80010f8:	4b18      	ldr	r3, [pc, #96]	@ (800115c <MX_ADC_Init+0xc4>)
 80010fa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80010fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8001100:	4b16      	ldr	r3, [pc, #88]	@ (800115c <MX_ADC_Init+0xc4>)
 8001102:	2207      	movs	r2, #7
 8001104:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001106:	4b15      	ldr	r3, [pc, #84]	@ (800115c <MX_ADC_Init+0xc4>)
 8001108:	2207      	movs	r2, #7
 800110a:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.OversamplingMode = DISABLE;
 800110c:	4b13      	ldr	r3, [pc, #76]	@ (800115c <MX_ADC_Init+0xc4>)
 800110e:	2200      	movs	r2, #0
 8001110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001114:	4b11      	ldr	r3, [pc, #68]	@ (800115c <MX_ADC_Init+0xc4>)
 8001116:	2200      	movs	r2, #0
 8001118:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800111a:	4810      	ldr	r0, [pc, #64]	@ (800115c <MX_ADC_Init+0xc4>)
 800111c:	f001 fd8e 	bl	8002c3c <HAL_ADC_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_ADC_Init+0x92>
  {
    Error_Handler();
 8001126:	f000 f8e5 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */
#if AI
  ADC_ChannelConfTypeDef sConfig = {0};
 800112a:	1d3b      	adds	r3, r7, #4
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]

  sConfig.Channel = ADC_CHANNEL_5; // ADC1_IN5 → PB1
 8001134:	4b0b      	ldr	r3, [pc, #44]	@ (8001164 <MX_ADC_Init+0xcc>)
 8001136:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001138:	2300      	movs	r3, #0
 800113a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1; // Consistente con Init
 800113c:	2300      	movs	r3, #0
 800113e:	60fb      	str	r3, [r7, #12]

  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001140:	1d3b      	adds	r3, r7, #4
 8001142:	4619      	mov	r1, r3
 8001144:	4805      	ldr	r0, [pc, #20]	@ (800115c <MX_ADC_Init+0xc4>)
 8001146:	f001 ff0d 	bl	8002f64 <HAL_ADC_ConfigChannel>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_ADC_Init+0xbc>
  {
    Error_Handler();
 8001150:	f000 f8d0 	bl	80012f4 <Error_Handler>
  }
#endif
  /* USER CODE END ADC_Init 2 */

}
 8001154:	bf00      	nop
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	200006e8 	.word	0x200006e8
 8001160:	40012400 	.word	0x40012400
 8001164:	14000020 	.word	0x14000020

08001168 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a05      	ldr	r2, [pc, #20]	@ (800118c <HAL_ADC_MspInit+0x24>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d103      	bne.n	8001182 <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800117a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800117e:	f7ff ff73 	bl	8001068 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40012400 	.word	0x40012400

08001190 <LL_AHB1_GRP1_EnableClock>:
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001198:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800119c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800119e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80011a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4013      	ands	r3, r2
 80011b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011b4:	68fb      	ldr	r3, [r7, #12]
}
 80011b6:	bf00      	nop
 80011b8:	3714      	adds	r7, #20
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr

080011c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80011c4:	2004      	movs	r0, #4
 80011c6:	f7ff ffe3 	bl	8001190 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011ca:	2001      	movs	r0, #1
 80011cc:	f7ff ffe0 	bl	8001190 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 80011d0:	2200      	movs	r2, #0
 80011d2:	2102      	movs	r1, #2
 80011d4:	200f      	movs	r0, #15
 80011d6:	f002 f8f4 	bl	80033c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80011da:	200f      	movs	r0, #15
 80011dc:	f002 f90b 	bl	80033f6 <HAL_NVIC_EnableIRQ>

}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <LL_AHB2_GRP1_EnableClock>:
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80011ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011f0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80011f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80011fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001200:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4013      	ands	r3, r2
 8001206:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001208:	68fb      	ldr	r3, [r7, #12]
}
 800120a:	bf00      	nop
 800120c:	3714      	adds	r7, #20
 800120e:	46bd      	mov	sp, r7
 8001210:	bc80      	pop	{r7}
 8001212:	4770      	bx	lr

08001214 <MX_GPIO_Init>:
 * Output
 * EVENT_OUT
 * EXTI
 */
void MX_GPIO_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
#endif

#if MY_TX
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001228:	2001      	movs	r0, #1
 800122a:	f7ff ffdb 	bl	80011e4 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800122e:	2002      	movs	r0, #2
 8001230:	f7ff ffd8 	bl	80011e4 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001234:	2004      	movs	r0, #4
 8001236:	f7ff ffd5 	bl	80011e4 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800123a:	2080      	movs	r0, #128	@ 0x80
 800123c:	f7ff ffd2 	bl	80011e4 <LL_AHB2_GRP1_EnableClock>

	/*Configure GPIO pins : PA14 PA12 PA15 PA13
                             PA11 PA10 PA0 PA9
                             PA6 PA1 PA7 PA4
                             PA5 PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13
 8001240:	f64f 73f3 	movw	r3, #65523	@ 0xfff3
 8001244:	607b      	str	r3, [r7, #4]
			|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_9
			|GPIO_PIN_6|GPIO_PIN_1|GPIO_PIN_7|GPIO_PIN_4
			|GPIO_PIN_5|GPIO_PIN_8;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001246:	2303      	movs	r3, #3
 8001248:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	4619      	mov	r1, r3
 8001252:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001256:	f002 fd11 	bl	8003c7c <HAL_GPIO_Init>

	/*Configure GPIO pins : PB15 PB3 PB4 PB7
                             PB9 PB14 PB5 PB8
                             PB13 PB2 PB6 PB12
                             PB1 PB11 PB10 */
	GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7
 800125a:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800125e:	607b      	str	r3, [r7, #4]
			|GPIO_PIN_9|GPIO_PIN_14|GPIO_PIN_5|GPIO_PIN_8
			|GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_12
			|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_10;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001260:	2303      	movs	r3, #3
 8001262:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001268:	1d3b      	adds	r3, r7, #4
 800126a:	4619      	mov	r1, r3
 800126c:	480e      	ldr	r0, [pc, #56]	@ (80012a8 <MX_GPIO_Init+0x94>)
 800126e:	f002 fd05 	bl	8003c7c <HAL_GPIO_Init>

	/*Configure GPIO pins : PC13 PC2 PC1 PC0
                             PC6 */
	GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0
 8001272:	f242 0347 	movw	r3, #8263	@ 0x2047
 8001276:	607b      	str	r3, [r7, #4]
			|GPIO_PIN_6;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001278:	2303      	movs	r3, #3
 800127a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	4619      	mov	r1, r3
 8001284:	4809      	ldr	r0, [pc, #36]	@ (80012ac <MX_GPIO_Init+0x98>)
 8001286:	f002 fcf9 	bl	8003c7c <HAL_GPIO_Init>

	/*Configure GPIO pin : PH3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 800128a:	2308      	movs	r3, #8
 800128c:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800128e:	2303      	movs	r3, #3
 8001290:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	4619      	mov	r1, r3
 800129a:	4805      	ldr	r0, [pc, #20]	@ (80012b0 <MX_GPIO_Init+0x9c>)
 800129c:	f002 fcee 	bl	8003c7c <HAL_GPIO_Init>

#endif

#endif

}
 80012a0:	bf00      	nop
 80012a2:	3718      	adds	r7, #24
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	48000400 	.word	0x48000400
 80012ac:	48000800 	.word	0x48000800
 80012b0:	48001c00 	.word	0x48001c00

080012b4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
	HAL_Init();														// Configure HAL
	HAL_PWR_EnablePVD();											// Enable PVD
#endif

#if !(MY_DEBUGGER_ENABLED || MY_LPTIM_Monitor || MY_RTCB_Monitor)
	My_Set_All_GPIO_To_Analog_Mode();											// Set all GPIO in Analog Mode
 80012b8:	f01b fa78 	bl	801c7ac <My_Set_All_GPIO_To_Analog_Mode>
#endif

	My_PS_Detection();												// Power Supply (PS) Detection Function: Detects if the System is Supplied by a Power Supply with a voltage > 2.9 V or by an Harvester
 80012bc:	f01b fdbc 	bl	801ce38 <My_PS_Detection>

#if MY_UNDERVOLTING_FEATURE

	My_SystemClock_Config(); 										// Configure the System Clock Frequency Below 16 MHz to allow Undervolting
 80012c0:	f01b fd08 	bl	801ccd4 <My_SystemClock_Config>
	my_SystemClock_Config_done = 1;									// SystemClock is Configures
 80012c4:	4b0a      	ldr	r3, [pc, #40]	@ (80012f0 <main+0x3c>)
 80012c6:	2201      	movs	r2, #1
 80012c8:	701a      	strb	r2, [r3, #0]
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2);	// Configure Undervolting
 80012ca:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80012ce:	f003 fe05 	bl	8004edc <HAL_PWREx_ControlVoltageScaling>
	my_SystemClock_Config_done = 1;	// SystemClock is Configured

#endif

#if MY_TX_ABP
	MX_RTC_Init();
 80012d2:	f000 f83d 	bl	8001350 <MX_RTC_Init>
#endif

	MX_LPTIM1_Init();
 80012d6:	f01a f8f5 	bl	801b4c4 <MX_LPTIM1_Init>

#if !MY_DEBUGGER_ENABLED
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80012da:	f7ff ff9b 	bl	8001214 <MX_GPIO_Init>
#if AI
	MX_ADC_Init();
 80012de:	f7ff fedb 	bl	8001098 <MX_ADC_Init>
	MX_X_CUBE_AI_Init(); 				// initialization AI
 80012e2:	f019 fe7d 	bl	801afe0 <MX_X_CUBE_AI_Init>
#endif
	MX_LoRaWAN_Init();
 80012e6:	f000 ffab 	bl	8002240 <MX_LoRaWAN_Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* USER CODE END WHILE */
		MX_LoRaWAN_Process();
 80012ea:	f000 ffb7 	bl	800225c <MX_LoRaWAN_Process>
 80012ee:	e7fc      	b.n	80012ea <main+0x36>
 80012f0:	2000074c 	.word	0x2000074c

080012f4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f8:	b672      	cpsid	i
}
 80012fa:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80012fc:	bf00      	nop
 80012fe:	e7fd      	b.n	80012fc <Error_Handler+0x8>

08001300 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001304:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001308:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800130c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001310:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001314:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	bc80      	pop	{r7}
 800131e:	4770      	bx	lr

08001320 <LL_APB1_GRP1_EnableClock>:
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001328:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800132c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800132e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4313      	orrs	r3, r2
 8001336:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001338:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800133c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4013      	ands	r3, r2
 8001342:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001344:	68fb      	ldr	r3, [r7, #12]
}
 8001346:	bf00      	nop
 8001348:	3714      	adds	r7, #20
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr

08001350 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0

#if MY_TX_ABP
	My_RTC_Init();
 8001354:	f01a fc96 	bl	801bc84 <My_RTC_Init>
	    Error_Handler();
	  }
	  /* USER CODE BEGIN RTC_Init 2 */
#endif

}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}

0800135c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b090      	sub	sp, #64	@ 0x40
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]

	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001364:	f107 0308 	add.w	r3, r7, #8
 8001368:	2238      	movs	r2, #56	@ 0x38
 800136a:	2100      	movs	r1, #0
 800136c:	4618      	mov	r0, r3
 800136e:	f01e fc87 	bl	801fc80 <memset>
	if(rtcHandle->Instance==RTC)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a15      	ldr	r2, [pc, #84]	@ (80013cc <HAL_RTC_MspInit+0x70>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d122      	bne.n	80013c2 <HAL_RTC_MspInit+0x66>

		/* USER CODE END RTC_MspInit 0 */

		/** Initializes the peripherals clocks
		 */
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800137c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001380:	60bb      	str	r3, [r7, #8]
		PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001382:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001386:	63fb      	str	r3, [r7, #60]	@ 0x3c

		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001388:	f107 0308 	add.w	r3, r7, #8
 800138c:	4618      	mov	r0, r3
 800138e:	f005 f8ab 	bl	80064e8 <HAL_RCCEx_PeriphCLKConfig>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <HAL_RTC_MspInit+0x40>
		{
			Error_Handler();
 8001398:	f7ff ffac 	bl	80012f4 <Error_Handler>
		}

		/* RTC clock enable */
		__HAL_RCC_RTC_ENABLE();
 800139c:	f7ff ffb0 	bl	8001300 <LL_RCC_EnableRTC>
		__HAL_RCC_RTCAPB_CLK_ENABLE();
 80013a0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80013a4:	f7ff ffbc 	bl	8001320 <LL_APB1_GRP1_EnableClock>

		/* RTC interrupt Init */
		HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 80013a8:	2200      	movs	r2, #0
 80013aa:	2100      	movs	r1, #0
 80013ac:	2002      	movs	r0, #2
 80013ae:	f002 f808 	bl	80033c2 <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80013b2:	2200      	movs	r2, #0
 80013b4:	2100      	movs	r1, #0
 80013b6:	202a      	movs	r0, #42	@ 0x2a
 80013b8:	f002 f803 	bl	80033c2 <HAL_NVIC_SetPriority>
#if MY_TX_OTAA
		HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
		HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
#endif
		/* USER CODE BEGIN RTC_MspInit 1 */
		HAL_RTCEx_EnableBypassShadow(rtcHandle);
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f005 fe1f 	bl	8007000 <HAL_RTCEx_EnableBypassShadow>
		/* USER CODE END RTC_MspInit 1 */
	}
}
 80013c2:	bf00      	nop
 80013c4:	3740      	adds	r7, #64	@ 0x40
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40002800 	.word	0x40002800

080013d0 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 80013d4:	4b03      	ldr	r3, [pc, #12]	@ (80013e4 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80013dc:	bf00      	nop
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr
 80013e4:	58000400 	.word	0x58000400

080013e8 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr

080013f4 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr

08001400 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001404:	f001 faea 	bl	80029dc <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8001408:	f7ff ffe2 	bl	80013d0 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 800140c:	2001      	movs	r0, #1
 800140e:	f003 fe25 	bl	800505c <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}

08001416 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 800141a:	f001 faed 	bl	80029f8 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 800141e:	f000 feb9 	bl	8002194 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}

08001426 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 800142a:	f001 fad7 	bl	80029dc <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800142e:	2101      	movs	r1, #1
 8001430:	2000      	movs	r0, #0
 8001432:	f003 fcd7 	bl	8004de4 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}

0800143a <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 800143e:	f001 fadb 	bl	80029f8 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	af00      	add	r7, sp, #0

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_PVM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 0, 0);
 800144a:	2200      	movs	r2, #0
 800144c:	2100      	movs	r1, #0
 800144e:	2001      	movs	r0, #1
 8001450:	f001 ffb7 	bl	80033c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 8001454:	2001      	movs	r0, #1
 8001456:	f001 ffce 	bl	80033f6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}

0800145e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001462:	bf00      	nop
 8001464:	e7fd      	b.n	8001462 <NMI_Handler+0x4>

08001466 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800146a:	bf00      	nop
 800146c:	e7fd      	b.n	800146a <HardFault_Handler+0x4>

0800146e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001472:	bf00      	nop
 8001474:	e7fd      	b.n	8001472 <MemManage_Handler+0x4>

08001476 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800147a:	bf00      	nop
 800147c:	e7fd      	b.n	800147a <BusFault_Handler+0x4>

0800147e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001482:	bf00      	nop
 8001484:	e7fd      	b.n	8001482 <UsageFault_Handler+0x4>

08001486 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr

08001492 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001496:	bf00      	nop
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr

0800149e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr

080014aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr

080014b6 <PVD_PVM_IRQHandler>:

/**
  * @brief This function handles PVD and PVM detector.
  */
void PVD_PVM_IRQHandler(void)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_PVM_IRQn 0 */

  /* USER CODE END PVD_PVM_IRQn 0 */
  HAL_PWREx_PVD_PVM_IRQHandler();
 80014ba:	f003 fdf9 	bl	80050b0 <HAL_PWREx_PVD_PVM_IRQHandler>
  /* USER CODE BEGIN PVD_PVM_IRQn 1 */

  /* USER CODE END PVD_PVM_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
	...

080014c4 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 80014c8:	4802      	ldr	r0, [pc, #8]	@ (80014d4 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 80014ca:	f005 fdcb 	bl	8007064 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000750 	.word	0x20000750

080014d8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 80014dc:	2001      	movs	r0, #1
 80014de:	f002 fe13 	bl	8004108 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT2_Pin);
 80014ea:	2002      	movs	r0, #2
 80014ec:	f002 fe0c 	bl	8004108 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80014f0:	bf00      	nop
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80014f8:	4802      	ldr	r0, [pc, #8]	@ (8001504 <DMA1_Channel5_IRQHandler+0x10>)
 80014fa:	f002 fa21 	bl	8003940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000838 	.word	0x20000838

08001508 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT3_Pin);
 800150c:	2040      	movs	r0, #64	@ 0x40
 800150e:	f002 fdfb 	bl	8004108 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800151c:	4802      	ldr	r0, [pc, #8]	@ (8001528 <USART2_IRQHandler+0x10>)
 800151e:	f006 fbeb 	bl	8007cf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	200007a4 	.word	0x200007a4

0800152c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001530:	4802      	ldr	r0, [pc, #8]	@ (800153c <RTC_Alarm_IRQHandler+0x10>)
 8001532:	f005 fc61 	bl	8006df8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000750 	.word	0x20000750

08001540 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001544:	4802      	ldr	r0, [pc, #8]	@ (8001550 <SUBGHZ_Radio_IRQHandler+0x10>)
 8001546:	f006 f8f1 	bl	800772c <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000788 	.word	0x20000788

08001554 <LPTIM1_IRQHandler>:

/* USER CODE BEGIN 1 */
void LPTIM1_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0

	HAL_LPTIM_IRQHandler(&hlptim1);
 8001558:	4802      	ldr	r0, [pc, #8]	@ (8001564 <LPTIM1_IRQHandler+0x10>)
 800155a:	f01c f889 	bl	801d670 <HAL_LPTIM_IRQHandler>
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20001b40 	.word	0x20001b40

08001568 <LPTIM2_IRQHandler>:

void LPTIM2_IRQHandler(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
	HAL_LPTIM_IRQHandler(&hlptim2);
 800156c:	4802      	ldr	r0, [pc, #8]	@ (8001578 <LPTIM2_IRQHandler+0x10>)
 800156e:	f01c f87f 	bl	801d670 <HAL_LPTIM_IRQHandler>
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20001b7c 	.word	0x20001b7c

0800157c <COMP_IRQHandler>:

void COMP_IRQHandler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 8001580:	4803      	ldr	r0, [pc, #12]	@ (8001590 <COMP_IRQHandler+0x14>)
 8001582:	f01b fd91 	bl	801d0a8 <HAL_COMP_IRQHandler>
  HAL_COMP_IRQHandler(&hcomp2);
 8001586:	4803      	ldr	r0, [pc, #12]	@ (8001594 <COMP_IRQHandler+0x18>)
 8001588:	f01b fd8e 	bl	801d0a8 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */

  /* USER CODE END COMP_IRQn 1 */
}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20001ae8 	.word	0x20001ae8
 8001594:	20001b14 	.word	0x20001b14

08001598 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80015a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015a4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80015a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80015b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015b4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4013      	ands	r3, r2
 80015ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015bc:	68fb      	ldr	r3, [r7, #12]
}
 80015be:	bf00      	nop
 80015c0:	3714      	adds	r7, #20
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr

080015c8 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80015cc:	4b06      	ldr	r3, [pc, #24]	@ (80015e8 <MX_SUBGHZ_Init+0x20>)
 80015ce:	2208      	movs	r2, #8
 80015d0:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80015d2:	4805      	ldr	r0, [pc, #20]	@ (80015e8 <MX_SUBGHZ_Init+0x20>)
 80015d4:	f005 fe28 	bl	8007228 <HAL_SUBGHZ_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80015de:	f7ff fe89 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000788 	.word	0x20000788

080015ec <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80015f4:	2001      	movs	r0, #1
 80015f6:	f7ff ffcf 	bl	8001598 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2100      	movs	r1, #0
 80015fe:	2032      	movs	r0, #50	@ 0x32
 8001600:	f001 fedf 	bl	80033c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001604:	2032      	movs	r0, #50	@ 0x32
 8001606:	f001 fef6 	bl	80033f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <LL_RCC_SetClkAfterWakeFromStop>:
{
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800161a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8001624:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4313      	orrs	r3, r2
 800162c:	608b      	str	r3, [r1, #8]
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr

08001638 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
//	DBG_Init();

	/* USER CODE END SystemApp_Init_1 */

	/* Ensure that MSI is wake-up system clock */
	__HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 800163c:	2000      	movs	r0, #0
 800163e:	f7ff ffe8 	bl	8001612 <LL_RCC_SetClkAfterWakeFromStop>

	/*Initialize timer and RTC*/
	UTIL_TIMER_Init();
 8001642:	f018 ff65 	bl	801a510 <UTIL_TIMER_Init>
	SYS_TimerInitialisedFlag = 1;
 8001646:	4b0c      	ldr	r3, [pc, #48]	@ (8001678 <SystemApp_Init+0x40>)
 8001648:	2201      	movs	r2, #1
 800164a:	701a      	strb	r2, [r3, #0]
	/* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
	DBG_Init();
 800164c:	f000 f8a8 	bl	80017a0 <DBG_Init>

	/*Initialize the terminal */
	UTIL_ADV_TRACE_Init();
 8001650:	f018 f90a 	bl	8019868 <UTIL_ADV_TRACE_Init>
	UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001654:	4809      	ldr	r0, [pc, #36]	@ (800167c <SystemApp_Init+0x44>)
 8001656:	f018 f9b5 	bl	80199c4 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

	/* #warning "should be removed when proper obl is done" */
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800165a:	4b09      	ldr	r3, [pc, #36]	@ (8001680 <SystemApp_Init+0x48>)
 800165c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001660:	611a      	str	r2, [r3, #16]

	/*Set verbose LEVEL*/
	UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001662:	2002      	movs	r0, #2
 8001664:	f018 f9bc 	bl	80199e0 <UTIL_ADV_TRACE_SetVerboseLevel>

	/*Initialize the Sensors */
//	EnvSensors_Init();

	/*Init low power manager*/
	UTIL_LPM_Init();
 8001668:	f018 fba4 	bl	8019db4 <UTIL_LPM_Init>
	/* Disable Stand-by mode */
	UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 800166c:	2101      	movs	r1, #1
 800166e:	2001      	movs	r0, #1
 8001670:	f018 fbe0 	bl	8019e34 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

	/* USER CODE BEGIN SystemApp_Init_2 */

	/* USER CODE END SystemApp_Init_2 */
}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000794 	.word	0x20000794
 800167c:	08001691 	.word	0x08001691
 8001680:	58004000 	.word	0x58004000

08001684 <UTIL_SEQ_Idle>:

/**
 * @brief redefines __weak function in stm32_seq.c such to enter low power
 */
void UTIL_SEQ_Idle(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UTIL_SEQ_Idle_1 */

	/* USER CODE END UTIL_SEQ_Idle_1 */
	UTIL_LPM_EnterLowPower();
 8001688:	f018 fc04 	bl	8019e94 <UTIL_LPM_EnterLowPower>
	/* USER CODE BEGIN UTIL_SEQ_Idle_2 */

	/* USER CODE END UTIL_SEQ_Idle_2 */
}
 800168c:	bf00      	nop
 800168e:	bd80      	pop	{r7, pc}

08001690 <TimestampNow>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af02      	add	r7, sp, #8
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN TimestampNow_1 */

	/* USER CODE END TimestampNow_1 */
	SysTime_t curtime = SysTimeGet();
 800169a:	f107 0308 	add.w	r3, r7, #8
 800169e:	4618      	mov	r0, r3
 80016a0:	f018 fe78 	bl	801a394 <SysTimeGet>
	tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80016aa:	9200      	str	r2, [sp, #0]
 80016ac:	4a07      	ldr	r2, [pc, #28]	@ (80016cc <TimestampNow+0x3c>)
 80016ae:	2110      	movs	r1, #16
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f000 f81d 	bl	80016f0 <tiny_snprintf_like>
	*size = strlen((char *)buff);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7fe fd62 	bl	8000180 <strlen>
 80016bc:	4603      	mov	r3, r0
 80016be:	b29a      	uxth	r2, r3
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	801a      	strh	r2, [r3, #0]
	/* USER CODE BEGIN TimestampNow_2 */

	/* USER CODE END TimestampNow_2 */
}
 80016c4:	bf00      	nop
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	080209c0 	.word	0x080209c0

080016d0 <UTIL_ADV_TRACE_PreSendHook>:
/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

	/* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
	UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 80016d4:	2101      	movs	r1, #1
 80016d6:	2002      	movs	r0, #2
 80016d8:	f018 fb7c 	bl	8019dd4 <UTIL_LPM_SetStopMode>
	/* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

	/* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 80016dc:	bf00      	nop
 80016de:	bd80      	pop	{r7, pc}

080016e0 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

	/* USER CODE END UTIL_LPM_SetStopMode_1 */
	UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 80016e4:	2100      	movs	r1, #0
 80016e6:	2002      	movs	r0, #2
 80016e8:	f018 fb74 	bl	8019dd4 <UTIL_LPM_SetStopMode>
	/* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

	/* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 80016f0:	b40c      	push	{r2, r3}
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b084      	sub	sp, #16
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
 80016fa:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN tiny_snprintf_like_1 */

	/* USER CODE END tiny_snprintf_like_1 */
	va_list vaArgs;
	va_start(vaArgs, strFormat);
 80016fc:	f107 031c 	add.w	r3, r7, #28
 8001700:	60fb      	str	r3, [r7, #12]
	UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001702:	6839      	ldr	r1, [r7, #0]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f019 fa25 	bl	801ab58 <tiny_vsnprintf_like>
	va_end(vaArgs);
	/* USER CODE BEGIN tiny_snprintf_like_2 */

	/* USER CODE END tiny_snprintf_like_2 */
}
 800170e:	bf00      	nop
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001718:	b002      	add	sp, #8
 800171a:	4770      	bx	lr

0800171c <HAL_InitTick>:

/**
 * @note This function overwrites the __weak one from HAL
 */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
	/*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
	/* USER CODE BEGIN HAL_InitTick_1 */

	/* USER CODE END HAL_InitTick_1 */
	return HAL_OK;
 8001724:	2300      	movs	r3, #0
	/* USER CODE BEGIN HAL_InitTick_2 */

	/* USER CODE END HAL_InitTick_2 */
}
 8001726:	4618      	mov	r0, r3
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr

08001730 <HAL_GetTick>:

/**
 * @note This function overwrites the __weak one from HAL
 */
uint32_t HAL_GetTick(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
	uint32_t ret = 0;
 8001736:	2300      	movs	r3, #0
 8001738:	607b      	str	r3, [r7, #4]
	/* TIMER_IF can be based on other counter the SysTick e.g. RTC */
	/* USER CODE BEGIN HAL_GetTick_1 */

	/* USER CODE END HAL_GetTick_1 */
	if (SYS_TimerInitialisedFlag == 0)
 800173a:	4b06      	ldr	r3, [pc, #24]	@ (8001754 <HAL_GetTick+0x24>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d002      	beq.n	8001748 <HAL_GetTick+0x18>

		/* USER CODE END HAL_GetTick_EarlyCall */
	}
	else
	{
		ret = TIMER_IF_GetTimerValue();
 8001742:	f000 f9c7 	bl	8001ad4 <TIMER_IF_GetTimerValue>
 8001746:	6078      	str	r0, [r7, #4]
	}
	/* USER CODE BEGIN HAL_GetTick_2 */

	/* USER CODE END HAL_GetTick_2 */
	return ret;
 8001748:	687b      	ldr	r3, [r7, #4]
}
 800174a:	4618      	mov	r0, r3
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000794 	.word	0x20000794

08001758 <HAL_Delay>:

/**
 * @note This function overwrites the __weak one from HAL
 */
void HAL_Delay(__IO uint32_t Delay)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	/* TIMER_IF can be based on other counter the SysTick e.g. RTC */
	/* USER CODE BEGIN HAL_Delay_1 */

	/* USER CODE END HAL_Delay_1 */
	TIMER_IF_DelayMs(Delay);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4618      	mov	r0, r3
 8001764:	f000 fa3d 	bl	8001be2 <TIMER_IF_DelayMs>
	/* USER CODE BEGIN HAL_Delay_2 */

	/* USER CODE END HAL_Delay_2 */
}
 8001768:	bf00      	nop
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <LL_AHB2_GRP1_EnableClock>:
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001778:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800177c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800177e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4313      	orrs	r3, r2
 8001786:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001788:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800178c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4013      	ands	r3, r2
 8001792:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001794:	68fb      	ldr	r3, [r7, #12]
}
 8001796:	bf00      	nop
 8001798:	3714      	adds	r7, #20
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr

080017a0 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
#define DEBUGGER_ENABLED MY_DEBUGGER_ENABLED
  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 80017a6:	f001 f935 	bl	8002a14 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 80017aa:	f001 f939 	bl	8002a20 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 80017ae:	f001 f93d 	bl	8002a2c <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 80017b2:	1d3b      	adds	r3, r7, #4
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]
 80017be:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 80017c0:	2301      	movs	r3, #1
 80017c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c8:	2303      	movs	r3, #3
 80017ca:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 80017cc:	2002      	movs	r0, #2
 80017ce:	f7ff ffcf 	bl	8001770 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 80017d2:	2002      	movs	r0, #2
 80017d4:	f7ff ffcc 	bl	8001770 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 80017d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017dc:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 80017de:	1d3b      	adds	r3, r7, #4
 80017e0:	4619      	mov	r1, r3
 80017e2:	480d      	ldr	r0, [pc, #52]	@ (8001818 <DBG_Init+0x78>)
 80017e4:	f002 fa4a 	bl	8003c7c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 80017e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017ec:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 80017ee:	1d3b      	adds	r3, r7, #4
 80017f0:	4619      	mov	r1, r3
 80017f2:	4809      	ldr	r0, [pc, #36]	@ (8001818 <DBG_Init+0x78>)
 80017f4:	f002 fa42 	bl	8003c7c <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 80017f8:	2200      	movs	r2, #0
 80017fa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017fe:	4806      	ldr	r0, [pc, #24]	@ (8001818 <DBG_Init+0x78>)
 8001800:	f002 fc6a 	bl	80040d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8001804:	2200      	movs	r2, #0
 8001806:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800180a:	4803      	ldr	r0, [pc, #12]	@ (8001818 <DBG_Init+0x78>)
 800180c:	f002 fc64 	bl	80040d8 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8001810:	bf00      	nop
 8001812:	3718      	adds	r7, #24
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	48000400 	.word	0x48000400

0800181c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	e00a      	b.n	8001844 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800182e:	f3af 8000 	nop.w
 8001832:	4601      	mov	r1, r0
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	1c5a      	adds	r2, r3, #1
 8001838:	60ba      	str	r2, [r7, #8]
 800183a:	b2ca      	uxtb	r2, r1
 800183c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	3301      	adds	r3, #1
 8001842:	617b      	str	r3, [r7, #20]
 8001844:	697a      	ldr	r2, [r7, #20]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	429a      	cmp	r2, r3
 800184a:	dbf0      	blt.n	800182e <_read+0x12>
  }

  return len;
 800184c:	687b      	ldr	r3, [r7, #4]
}
 800184e:	4618      	mov	r0, r3
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b086      	sub	sp, #24
 800185a:	af00      	add	r7, sp, #0
 800185c:	60f8      	str	r0, [r7, #12]
 800185e:	60b9      	str	r1, [r7, #8]
 8001860:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001862:	2300      	movs	r3, #0
 8001864:	617b      	str	r3, [r7, #20]
 8001866:	e009      	b.n	800187c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	1c5a      	adds	r2, r3, #1
 800186c:	60ba      	str	r2, [r7, #8]
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	3301      	adds	r3, #1
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	697a      	ldr	r2, [r7, #20]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	429a      	cmp	r2, r3
 8001882:	dbf1      	blt.n	8001868 <_write+0x12>
  }
  return len;
 8001884:	687b      	ldr	r3, [r7, #4]
}
 8001886:	4618      	mov	r0, r3
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <_close>:

int _close(int file)
{
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001896:	f04f 33ff 	mov.w	r3, #4294967295
}
 800189a:	4618      	mov	r0, r3
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	bc80      	pop	{r7}
 80018a2:	4770      	bx	lr

080018a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018b4:	605a      	str	r2, [r3, #4]
  return 0;
 80018b6:	2300      	movs	r3, #0
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	bc80      	pop	{r7}
 80018c0:	4770      	bx	lr

080018c2 <_isatty>:

int _isatty(int file)
{
 80018c2:	b480      	push	{r7}
 80018c4:	b083      	sub	sp, #12
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018ca:	2301      	movs	r3, #1
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bc80      	pop	{r7}
 80018d4:	4770      	bx	lr

080018d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018d6:	b480      	push	{r7}
 80018d8:	b085      	sub	sp, #20
 80018da:	af00      	add	r7, sp, #0
 80018dc:	60f8      	str	r0, [r7, #12]
 80018de:	60b9      	str	r1, [r7, #8]
 80018e0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018e2:	2300      	movs	r3, #0
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3714      	adds	r7, #20
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bc80      	pop	{r7}
 80018ec:	4770      	bx	lr
	...

080018f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018f8:	4a14      	ldr	r2, [pc, #80]	@ (800194c <_sbrk+0x5c>)
 80018fa:	4b15      	ldr	r3, [pc, #84]	@ (8001950 <_sbrk+0x60>)
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001904:	4b13      	ldr	r3, [pc, #76]	@ (8001954 <_sbrk+0x64>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d102      	bne.n	8001912 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800190c:	4b11      	ldr	r3, [pc, #68]	@ (8001954 <_sbrk+0x64>)
 800190e:	4a12      	ldr	r2, [pc, #72]	@ (8001958 <_sbrk+0x68>)
 8001910:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001912:	4b10      	ldr	r3, [pc, #64]	@ (8001954 <_sbrk+0x64>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4413      	add	r3, r2
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	429a      	cmp	r2, r3
 800191e:	d207      	bcs.n	8001930 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001920:	f01e fa0c 	bl	801fd3c <__errno>
 8001924:	4603      	mov	r3, r0
 8001926:	220c      	movs	r2, #12
 8001928:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800192a:	f04f 33ff 	mov.w	r3, #4294967295
 800192e:	e009      	b.n	8001944 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001930:	4b08      	ldr	r3, [pc, #32]	@ (8001954 <_sbrk+0x64>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001936:	4b07      	ldr	r3, [pc, #28]	@ (8001954 <_sbrk+0x64>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4413      	add	r3, r2
 800193e:	4a05      	ldr	r2, [pc, #20]	@ (8001954 <_sbrk+0x64>)
 8001940:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001942:	68fb      	ldr	r3, [r7, #12]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3718      	adds	r7, #24
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20008000 	.word	0x20008000
 8001950:	00000800 	.word	0x00000800
 8001954:	20000798 	.word	0x20000798
 8001958:	20001e30 	.word	0x20001e30

0800195c <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
}
 8001968:	4618      	mov	r0, r3
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	bc80      	pop	{r7}
 8001970:	4770      	bx	lr
	...

08001974 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800197a:	2300      	movs	r3, #0
 800197c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 800197e:	4b14      	ldr	r3, [pc, #80]	@ (80019d0 <TIMER_IF_Init+0x5c>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	f083 0301 	eor.w	r3, r3, #1
 8001986:	b2db      	uxtb	r3, r3
 8001988:	2b00      	cmp	r3, #0
 800198a:	d01b      	beq.n	80019c4 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800198c:	4b11      	ldr	r3, [pc, #68]	@ (80019d4 <TIMER_IF_Init+0x60>)
 800198e:	f04f 32ff 	mov.w	r2, #4294967295
 8001992:	631a      	str	r2, [r3, #48]	@ 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8001994:	f7ff fcdc 	bl	8001350 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8001998:	f000 f856 	bl	8001a48 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 800199c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019a0:	480c      	ldr	r0, [pc, #48]	@ (80019d4 <TIMER_IF_Init+0x60>)
 80019a2:	f005 f9cd 	bl	8006d40 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80019a6:	4b0b      	ldr	r3, [pc, #44]	@ (80019d4 <TIMER_IF_Init+0x60>)
 80019a8:	f04f 32ff 	mov.w	r2, #4294967295
 80019ac:	631a      	str	r2, [r3, #48]	@ 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 80019ae:	4809      	ldr	r0, [pc, #36]	@ (80019d4 <TIMER_IF_Init+0x60>)
 80019b0:	f005 fb26 	bl	8007000 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 80019b4:	2000      	movs	r0, #0
 80019b6:	f000 f9c9 	bl	8001d4c <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 80019ba:	f000 f85f 	bl	8001a7c <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 80019be:	4b04      	ldr	r3, [pc, #16]	@ (80019d0 <TIMER_IF_Init+0x5c>)
 80019c0:	2201      	movs	r2, #1
 80019c2:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 80019c4:	79fb      	ldrb	r3, [r7, #7]
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	2000079c 	.word	0x2000079c
 80019d4:	20000750 	.word	0x20000750

080019d8 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08e      	sub	sp, #56	@ 0x38
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80019e0:	2300      	movs	r3, #0
 80019e2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 80019e6:	f107 0308 	add.w	r3, r7, #8
 80019ea:	222c      	movs	r2, #44	@ 0x2c
 80019ec:	2100      	movs	r1, #0
 80019ee:	4618      	mov	r0, r3
 80019f0:	f01e f946 	bl	801fc80 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 80019f4:	f000 f828 	bl	8001a48 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 80019f8:	4b11      	ldr	r3, [pc, #68]	@ (8001a40 <TIMER_IF_StartTimer+0x68>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	4413      	add	r3, r2
 8001a00:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001a02:	2300      	movs	r3, #0
 8001a04:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001a10:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001a14:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001a16:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a1a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001a1c:	f107 0308 	add.w	r3, r7, #8
 8001a20:	2201      	movs	r2, #1
 8001a22:	4619      	mov	r1, r3
 8001a24:	4807      	ldr	r0, [pc, #28]	@ (8001a44 <TIMER_IF_StartTimer+0x6c>)
 8001a26:	f005 f87f 	bl	8006b28 <HAL_RTC_SetAlarm_IT>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8001a30:	f7ff fc60 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8001a34:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3738      	adds	r7, #56	@ 0x38
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	200007a0 	.word	0x200007a0
 8001a44:	20000750 	.word	0x20000750

08001a48 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001a52:	4b08      	ldr	r3, [pc, #32]	@ (8001a74 <TIMER_IF_StopTimer+0x2c>)
 8001a54:	2201      	movs	r2, #1
 8001a56:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001a58:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a5c:	4806      	ldr	r0, [pc, #24]	@ (8001a78 <TIMER_IF_StopTimer+0x30>)
 8001a5e:	f005 f96f 	bl	8006d40 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001a62:	4b05      	ldr	r3, [pc, #20]	@ (8001a78 <TIMER_IF_StopTimer+0x30>)
 8001a64:	f04f 32ff 	mov.w	r2, #4294967295
 8001a68:	631a      	str	r2, [r3, #48]	@ 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8001a6a:	79fb      	ldrb	r3, [r7, #7]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40002800 	.word	0x40002800
 8001a78:	20000750 	.word	0x20000750

08001a7c <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8001a80:	f000 f984 	bl	8001d8c <GetTimerTicks>
 8001a84:	4603      	mov	r3, r0
 8001a86:	4a03      	ldr	r2, [pc, #12]	@ (8001a94 <TIMER_IF_SetTimerContext+0x18>)
 8001a88:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001a8a:	4b02      	ldr	r3, [pc, #8]	@ (8001a94 <TIMER_IF_SetTimerContext+0x18>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	200007a0 	.word	0x200007a0

08001a98 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001a9c:	4b02      	ldr	r3, [pc, #8]	@ (8001aa8 <TIMER_IF_GetTimerContext+0x10>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bc80      	pop	{r7}
 8001aa6:	4770      	bx	lr
 8001aa8:	200007a0 	.word	0x200007a0

08001aac <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8001ab6:	f000 f969 	bl	8001d8c <GetTimerTicks>
 8001aba:	4602      	mov	r2, r0
 8001abc:	4b04      	ldr	r3, [pc, #16]	@ (8001ad0 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8001ac4:	687b      	ldr	r3, [r7, #4]
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	200007a0 	.word	0x200007a0

08001ad4 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8001ade:	4b06      	ldr	r3, [pc, #24]	@ (8001af8 <TIMER_IF_GetTimerValue+0x24>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d002      	beq.n	8001aec <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8001ae6:	f000 f951 	bl	8001d8c <GetTimerTicks>
 8001aea:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8001aec:	687b      	ldr	r3, [r7, #4]
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	2000079c 	.word	0x2000079c

08001afc <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8001b06:	2303      	movs	r3, #3
 8001b08:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8001b0a:	687b      	ldr	r3, [r7, #4]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr

08001b16 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8001b16:	b5b0      	push	{r4, r5, r7, lr}
 8001b18:	b084      	sub	sp, #16
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001b1e:	2100      	movs	r1, #0
 8001b20:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8001b22:	6879      	ldr	r1, [r7, #4]
 8001b24:	2000      	movs	r0, #0
 8001b26:	460a      	mov	r2, r1
 8001b28:	4603      	mov	r3, r0
 8001b2a:	0d95      	lsrs	r5, r2, #22
 8001b2c:	0294      	lsls	r4, r2, #10
 8001b2e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001b32:	f04f 0300 	mov.w	r3, #0
 8001b36:	4620      	mov	r0, r4
 8001b38:	4629      	mov	r1, r5
 8001b3a:	f7ff f8ff 	bl	8000d3c <__aeabi_uldivmod>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	4613      	mov	r3, r2
 8001b44:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8001b46:	68fb      	ldr	r3, [r7, #12]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3710      	adds	r7, #16
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bdb0      	pop	{r4, r5, r7, pc}

08001b50 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8001b50:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001b54:	b085      	sub	sp, #20
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	2000      	movs	r0, #0
 8001b62:	460c      	mov	r4, r1
 8001b64:	4605      	mov	r5, r0
 8001b66:	4620      	mov	r0, r4
 8001b68:	4629      	mov	r1, r5
 8001b6a:	f04f 0a00 	mov.w	sl, #0
 8001b6e:	f04f 0b00 	mov.w	fp, #0
 8001b72:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8001b76:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8001b7a:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8001b7e:	4650      	mov	r0, sl
 8001b80:	4659      	mov	r1, fp
 8001b82:	1b02      	subs	r2, r0, r4
 8001b84:	eb61 0305 	sbc.w	r3, r1, r5
 8001b88:	f04f 0000 	mov.w	r0, #0
 8001b8c:	f04f 0100 	mov.w	r1, #0
 8001b90:	0099      	lsls	r1, r3, #2
 8001b92:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001b96:	0090      	lsls	r0, r2, #2
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	eb12 0804 	adds.w	r8, r2, r4
 8001ba0:	eb43 0905 	adc.w	r9, r3, r5
 8001ba4:	f04f 0200 	mov.w	r2, #0
 8001ba8:	f04f 0300 	mov.w	r3, #0
 8001bac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bb0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bb4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bb8:	4690      	mov	r8, r2
 8001bba:	4699      	mov	r9, r3
 8001bbc:	4640      	mov	r0, r8
 8001bbe:	4649      	mov	r1, r9
 8001bc0:	f04f 0200 	mov.w	r2, #0
 8001bc4:	f04f 0300 	mov.w	r3, #0
 8001bc8:	0a82      	lsrs	r2, r0, #10
 8001bca:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8001bce:	0a8b      	lsrs	r3, r1, #10
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3714      	adds	r7, #20
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001be0:	4770      	bx	lr

08001be2 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b084      	sub	sp, #16
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7ff ff93 	bl	8001b16 <TIMER_IF_Convert_ms2Tick>
 8001bf0:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8001bf2:	f000 f8cb 	bl	8001d8c <GetTimerTicks>
 8001bf6:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001bf8:	e000      	b.n	8001bfc <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8001bfa:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001bfc:	f000 f8c6 	bl	8001d8c <GetTimerTicks>
 8001c00:	4602      	mov	r2, r0
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d8f6      	bhi.n	8001bfa <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8001c0c:	bf00      	nop
 8001c0e:	bf00      	nop
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_RTCEx_SSRUEventCallback>:
//
//	/* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
//}

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b084      	sub	sp, #16
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8001c1e:	f000 f8a5 	bl	8001d6c <TIMER_IF_BkUp_Read_MSBticks>
 8001c22:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	3301      	adds	r3, #1
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f000 f88f 	bl	8001d4c <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8001c2e:	bf00      	nop
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8001c36:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c3a:	b08c      	sub	sp, #48	@ 0x30
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8001c44:	f000 f8a2 	bl	8001d8c <GetTimerTicks>
 8001c48:	62b8      	str	r0, [r7, #40]	@ 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8001c4a:	f000 f88f 	bl	8001d6c <TIMER_IF_BkUp_Read_MSBticks>
 8001c4e:	6278      	str	r0, [r7, #36]	@ 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8001c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c52:	2200      	movs	r2, #0
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	60fa      	str	r2, [r7, #12]
 8001c58:	f04f 0200 	mov.w	r2, #0
 8001c5c:	f04f 0300 	mov.w	r3, #0
 8001c60:	68b9      	ldr	r1, [r7, #8]
 8001c62:	000b      	movs	r3, r1
 8001c64:	2200      	movs	r2, #0
 8001c66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c68:	2000      	movs	r0, #0
 8001c6a:	460c      	mov	r4, r1
 8001c6c:	4605      	mov	r5, r0
 8001c6e:	eb12 0804 	adds.w	r8, r2, r4
 8001c72:	eb43 0905 	adc.w	r9, r3, r5
 8001c76:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8001c7a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c7e:	f04f 0200 	mov.w	r2, #0
 8001c82:	f04f 0300 	mov.w	r3, #0
 8001c86:	0a82      	lsrs	r2, r0, #10
 8001c88:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8001c8c:	0a8b      	lsrs	r3, r1, #10
 8001c8e:	4613      	mov	r3, r2
 8001c90:	62fb      	str	r3, [r7, #44]	@ 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	2200      	movs	r2, #0
 8001c96:	603b      	str	r3, [r7, #0]
 8001c98:	607a      	str	r2, [r7, #4]
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8001ca0:	f04f 0b00 	mov.w	fp, #0
 8001ca4:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff ff50 	bl	8001b50 <TIMER_IF_Convert_Tick2ms>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8001cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3730      	adds	r7, #48	@ 0x30
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001cc4 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	2100      	movs	r1, #0
 8001cd0:	4803      	ldr	r0, [pc, #12]	@ (8001ce0 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8001cd2:	f005 f9e1 	bl	8007098 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	20000750 	.word	0x20000750

08001ce4 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	2101      	movs	r1, #1
 8001cf0:	4803      	ldr	r0, [pc, #12]	@ (8001d00 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8001cf2:	f005 f9d1 	bl	8007098 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20000750 	.word	0x20000750

08001d04 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8001d0e:	2100      	movs	r1, #0
 8001d10:	4804      	ldr	r0, [pc, #16]	@ (8001d24 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8001d12:	f005 f9d9 	bl	80070c8 <HAL_RTCEx_BKUPRead>
 8001d16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8001d18:	687b      	ldr	r3, [r7, #4]
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	20000750 	.word	0x20000750

08001d28 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8001d32:	2101      	movs	r1, #1
 8001d34:	4804      	ldr	r0, [pc, #16]	@ (8001d48 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8001d36:	f005 f9c7 	bl	80070c8 <HAL_RTCEx_BKUPRead>
 8001d3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8001d3c:	687b      	ldr	r3, [r7, #4]
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000750 	.word	0x20000750

08001d4c <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	2102      	movs	r1, #2
 8001d58:	4803      	ldr	r0, [pc, #12]	@ (8001d68 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8001d5a:	f005 f99d 	bl	8007098 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8001d5e:	bf00      	nop
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	20000750 	.word	0x20000750

08001d6c <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8001d72:	2102      	movs	r1, #2
 8001d74:	4804      	ldr	r0, [pc, #16]	@ (8001d88 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8001d76:	f005 f9a7 	bl	80070c8 <HAL_RTCEx_BKUPRead>
 8001d7a:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8001d7c:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	20000750 	.word	0x20000750

08001d8c <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8001d92:	480b      	ldr	r0, [pc, #44]	@ (8001dc0 <GetTimerTicks+0x34>)
 8001d94:	f7ff fde2 	bl	800195c <LL_RTC_TIME_GetSubSecond>
 8001d98:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001d9a:	e003      	b.n	8001da4 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8001d9c:	4808      	ldr	r0, [pc, #32]	@ (8001dc0 <GetTimerTicks+0x34>)
 8001d9e:	f7ff fddd 	bl	800195c <LL_RTC_TIME_GetSubSecond>
 8001da2:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001da4:	4806      	ldr	r0, [pc, #24]	@ (8001dc0 <GetTimerTicks+0x34>)
 8001da6:	f7ff fdd9 	bl	800195c <LL_RTC_TIME_GetSubSecond>
 8001daa:	4602      	mov	r2, r0
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d1f4      	bne.n	8001d9c <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3708      	adds	r7, #8
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40002800 	.word	0x40002800

08001dc4 <LL_AHB2_GRP1_EnableClock>:
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001dcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dd0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001dd2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001ddc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001de0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4013      	ands	r3, r2
 8001de6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001de8:	68fb      	ldr	r3, [r7, #12]
}
 8001dea:	bf00      	nop
 8001dec:	3714      	adds	r7, #20
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bc80      	pop	{r7}
 8001df2:	4770      	bx	lr

08001df4 <LL_APB1_GRP1_EnableClock>:
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001dfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e00:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001e02:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001e0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e10:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4013      	ands	r3, r2
 8001e16:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e18:	68fb      	ldr	r3, [r7, #12]
}
 8001e1a:	bf00      	nop
 8001e1c:	3714      	adds	r7, #20
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bc80      	pop	{r7}
 8001e22:	4770      	bx	lr

08001e24 <LL_APB1_GRP1_DisableClock>:
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001e2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e30:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	43db      	mvns	r3, r3
 8001e36:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	658b      	str	r3, [r1, #88]	@ 0x58
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr

08001e48 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e4c:	4b22      	ldr	r3, [pc, #136]	@ (8001ed8 <MX_USART2_UART_Init+0x90>)
 8001e4e:	4a23      	ldr	r2, [pc, #140]	@ (8001edc <MX_USART2_UART_Init+0x94>)
 8001e50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e52:	4b21      	ldr	r3, [pc, #132]	@ (8001ed8 <MX_USART2_UART_Init+0x90>)
 8001e54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e5a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ed8 <MX_USART2_UART_Init+0x90>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e60:	4b1d      	ldr	r3, [pc, #116]	@ (8001ed8 <MX_USART2_UART_Init+0x90>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e66:	4b1c      	ldr	r3, [pc, #112]	@ (8001ed8 <MX_USART2_UART_Init+0x90>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e6c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ed8 <MX_USART2_UART_Init+0x90>)
 8001e6e:	220c      	movs	r2, #12
 8001e70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e72:	4b19      	ldr	r3, [pc, #100]	@ (8001ed8 <MX_USART2_UART_Init+0x90>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e78:	4b17      	ldr	r3, [pc, #92]	@ (8001ed8 <MX_USART2_UART_Init+0x90>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e7e:	4b16      	ldr	r3, [pc, #88]	@ (8001ed8 <MX_USART2_UART_Init+0x90>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e84:	4b14      	ldr	r3, [pc, #80]	@ (8001ed8 <MX_USART2_UART_Init+0x90>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e8a:	4b13      	ldr	r3, [pc, #76]	@ (8001ed8 <MX_USART2_UART_Init+0x90>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e90:	4811      	ldr	r0, [pc, #68]	@ (8001ed8 <MX_USART2_UART_Init+0x90>)
 8001e92:	f005 fe14 	bl	8007abe <HAL_UART_Init>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001e9c:	f7ff fa2a 	bl	80012f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	480d      	ldr	r0, [pc, #52]	@ (8001ed8 <MX_USART2_UART_Init+0x90>)
 8001ea4:	f007 ff37 	bl	8009d16 <HAL_UARTEx_SetTxFifoThreshold>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001eae:	f7ff fa21 	bl	80012f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	4808      	ldr	r0, [pc, #32]	@ (8001ed8 <MX_USART2_UART_Init+0x90>)
 8001eb6:	f007 ff6c 	bl	8009d92 <HAL_UARTEx_SetRxFifoThreshold>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001ec0:	f7ff fa18 	bl	80012f4 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8001ec4:	4804      	ldr	r0, [pc, #16]	@ (8001ed8 <MX_USART2_UART_Init+0x90>)
 8001ec6:	f007 feeb 	bl	8009ca0 <HAL_UARTEx_EnableFifoMode>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001ed0:	f7ff fa10 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ed4:	bf00      	nop
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	200007a4 	.word	0x200007a4
 8001edc:	40004400 	.word	0x40004400

08001ee0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b096      	sub	sp, #88	@ 0x58
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	60da      	str	r2, [r3, #12]
 8001ef6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ef8:	f107 030c 	add.w	r3, r7, #12
 8001efc:	2238      	movs	r2, #56	@ 0x38
 8001efe:	2100      	movs	r1, #0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f01d febd 	bl	801fc80 <memset>
  if(uartHandle->Instance==USART2)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a33      	ldr	r2, [pc, #204]	@ (8001fd8 <HAL_UART_MspInit+0xf8>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d15f      	bne.n	8001fd0 <HAL_UART_MspInit+0xf0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f10:	2302      	movs	r3, #2
 8001f12:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001f14:	4b31      	ldr	r3, [pc, #196]	@ (8001fdc <HAL_UART_MspInit+0xfc>)
 8001f16:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f18:	f107 030c 	add.w	r3, r7, #12
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f004 fae3 	bl	80064e8 <HAL_RCCEx_PeriphCLKConfig>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f28:	f7ff f9e4 	bl	80012f4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f2c:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001f30:	f7ff ff60 	bl	8001df4 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f34:	2001      	movs	r0, #1
 8001f36:	f7ff ff45 	bl	8001dc4 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8001f3a:	230c      	movs	r3, #12
 8001f3c:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f46:	2303      	movs	r3, #3
 8001f48:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f4a:	2307      	movs	r3, #7
 8001f4c:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001f52:	4619      	mov	r1, r3
 8001f54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f58:	f001 fe90 	bl	8003c7c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel5;
 8001f5c:	4b20      	ldr	r3, [pc, #128]	@ (8001fe0 <HAL_UART_MspInit+0x100>)
 8001f5e:	4a21      	ldr	r2, [pc, #132]	@ (8001fe4 <HAL_UART_MspInit+0x104>)
 8001f60:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001f62:	4b1f      	ldr	r3, [pc, #124]	@ (8001fe0 <HAL_UART_MspInit+0x100>)
 8001f64:	2214      	movs	r2, #20
 8001f66:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f68:	4b1d      	ldr	r3, [pc, #116]	@ (8001fe0 <HAL_UART_MspInit+0x100>)
 8001f6a:	2210      	movs	r2, #16
 8001f6c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f6e:	4b1c      	ldr	r3, [pc, #112]	@ (8001fe0 <HAL_UART_MspInit+0x100>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f74:	4b1a      	ldr	r3, [pc, #104]	@ (8001fe0 <HAL_UART_MspInit+0x100>)
 8001f76:	2280      	movs	r2, #128	@ 0x80
 8001f78:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f7a:	4b19      	ldr	r3, [pc, #100]	@ (8001fe0 <HAL_UART_MspInit+0x100>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f80:	4b17      	ldr	r3, [pc, #92]	@ (8001fe0 <HAL_UART_MspInit+0x100>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001f86:	4b16      	ldr	r3, [pc, #88]	@ (8001fe0 <HAL_UART_MspInit+0x100>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f8c:	4b14      	ldr	r3, [pc, #80]	@ (8001fe0 <HAL_UART_MspInit+0x100>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001f92:	4813      	ldr	r0, [pc, #76]	@ (8001fe0 <HAL_UART_MspInit+0x100>)
 8001f94:	f001 fa5a 	bl	800344c <HAL_DMA_Init>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8001f9e:	f7ff f9a9 	bl	80012f4 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001fa2:	2110      	movs	r1, #16
 8001fa4:	480e      	ldr	r0, [pc, #56]	@ (8001fe0 <HAL_UART_MspInit+0x100>)
 8001fa6:	f001 fd91 	bl	8003acc <HAL_DMA_ConfigChannelAttributes>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <HAL_UART_MspInit+0xd4>
    {
      Error_Handler();
 8001fb0:	f7ff f9a0 	bl	80012f4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a0a      	ldr	r2, [pc, #40]	@ (8001fe0 <HAL_UART_MspInit+0x100>)
 8001fb8:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001fba:	4a09      	ldr	r2, [pc, #36]	@ (8001fe0 <HAL_UART_MspInit+0x100>)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	2102      	movs	r1, #2
 8001fc4:	2025      	movs	r0, #37	@ 0x25
 8001fc6:	f001 f9fc 	bl	80033c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001fca:	2025      	movs	r0, #37	@ 0x25
 8001fcc:	f001 fa13 	bl	80033f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001fd0:	bf00      	nop
 8001fd2:	3758      	adds	r7, #88	@ 0x58
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40004400 	.word	0x40004400
 8001fdc:	000c0004 	.word	0x000c0004
 8001fe0:	20000838 	.word	0x20000838
 8001fe4:	40020058 	.word	0x40020058

08001fe8 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART2)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a0b      	ldr	r2, [pc, #44]	@ (8002024 <HAL_UART_MspDeInit+0x3c>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d110      	bne.n	800201c <HAL_UART_MspDeInit+0x34>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8001ffa:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001ffe:	f7ff ff11 	bl	8001e24 <LL_APB1_GRP1_DisableClock>

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 8002002:	210c      	movs	r1, #12
 8002004:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002008:	f001 ff98 	bl	8003f3c <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002010:	4618      	mov	r0, r3
 8002012:	f001 fac3 	bl	800359c <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002016:	2025      	movs	r0, #37	@ 0x25
 8002018:	f001 f9fb 	bl	8003412 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 800201c:	bf00      	nop
 800201e:	3708      	adds	r7, #8
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	40004400 	.word	0x40004400

08002028 <LL_APB1_GRP1_ForceReset>:
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8002030:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002034:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002036:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4313      	orrs	r3, r2
 800203e:	638b      	str	r3, [r1, #56]	@ 0x38
}
 8002040:	bf00      	nop
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	bc80      	pop	{r7}
 8002048:	4770      	bx	lr

0800204a <LL_APB1_GRP1_ReleaseReset>:
{
 800204a:	b480      	push	{r7}
 800204c:	b083      	sub	sp, #12
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8002052:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002056:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	43db      	mvns	r3, r3
 800205c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002060:	4013      	ands	r3, r2
 8002062:	638b      	str	r3, [r1, #56]	@ 0x38
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	bc80      	pop	{r7}
 800206c:	4770      	bx	lr
	...

08002070 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002078:	4b06      	ldr	r3, [pc, #24]	@ (8002094 <LL_EXTI_EnableIT_0_31+0x24>)
 800207a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800207e:	4905      	ldr	r1, [pc, #20]	@ (8002094 <LL_EXTI_EnableIT_0_31+0x24>)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4313      	orrs	r3, r2
 8002084:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	bc80      	pop	{r7}
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	58000800 	.word	0x58000800

08002098 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80020a0:	4a07      	ldr	r2, [pc, #28]	@ (80020c0 <vcom_Init+0x28>)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 80020a6:	f7ff f88b 	bl	80011c0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80020aa:	f7ff fecd 	bl	8001e48 <MX_USART2_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
 80020ae:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 80020b2:	f7ff ffdd 	bl	8002070 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 80020b6:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	2000089c 	.word	0x2000089c

080020c4 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 80020c8:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80020cc:	f7ff ffac 	bl	8002028 <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_USART2_RELEASE_RESET();
 80020d0:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80020d4:	f7ff ffb9 	bl	800204a <LL_APB1_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 80020d8:	4804      	ldr	r0, [pc, #16]	@ (80020ec <vcom_DeInit+0x28>)
 80020da:	f7ff ff85 	bl	8001fe8 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 80020de:	200f      	movs	r0, #15
 80020e0:	f001 f997 	bl	8003412 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 80020e4:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	200007a4 	.word	0x200007a4

080020f0 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	460b      	mov	r3, r1
 80020fa:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 80020fc:	887b      	ldrh	r3, [r7, #2]
 80020fe:	461a      	mov	r2, r3
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	4804      	ldr	r0, [pc, #16]	@ (8002114 <vcom_Trace_DMA+0x24>)
 8002104:	f005 fd78 	bl	8007bf8 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8002108:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	200007a4 	.word	0x200007a4

08002118 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002120:	4a19      	ldr	r2, [pc, #100]	@ (8002188 <vcom_ReceiveInit+0x70>)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002126:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800212a:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 800212c:	f107 0308 	add.w	r3, r7, #8
 8002130:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002134:	4815      	ldr	r0, [pc, #84]	@ (800218c <vcom_ReceiveInit+0x74>)
 8002136:	f007 fd26 	bl	8009b86 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 800213a:	bf00      	nop
 800213c:	4b13      	ldr	r3, [pc, #76]	@ (800218c <vcom_ReceiveInit+0x74>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002146:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800214a:	d0f7      	beq.n	800213c <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 800214c:	bf00      	nop
 800214e:	4b0f      	ldr	r3, [pc, #60]	@ (800218c <vcom_ReceiveInit+0x74>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	69db      	ldr	r3, [r3, #28]
 8002154:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002158:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800215c:	d1f7      	bne.n	800214e <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 800215e:	4b0b      	ldr	r3, [pc, #44]	@ (800218c <vcom_ReceiveInit+0x74>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	4b09      	ldr	r3, [pc, #36]	@ (800218c <vcom_ReceiveInit+0x74>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800216c:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 800216e:	4807      	ldr	r0, [pc, #28]	@ (800218c <vcom_ReceiveInit+0x74>)
 8002170:	f007 fd64 	bl	8009c3c <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 8002174:	2201      	movs	r2, #1
 8002176:	4906      	ldr	r1, [pc, #24]	@ (8002190 <vcom_ReceiveInit+0x78>)
 8002178:	4804      	ldr	r0, [pc, #16]	@ (800218c <vcom_ReceiveInit+0x74>)
 800217a:	f005 fcf1 	bl	8007b60 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 800217e:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002180:	4618      	mov	r0, r3
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	200008a0 	.word	0x200008a0
 800218c:	200007a4 	.word	0x200007a4
 8002190:	20000898 	.word	0x20000898

08002194 <vcom_Resume>:

void vcom_Resume(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002198:	4808      	ldr	r0, [pc, #32]	@ (80021bc <vcom_Resume+0x28>)
 800219a:	f005 fc90 	bl	8007abe <HAL_UART_Init>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <vcom_Resume+0x14>
  {
    Error_Handler();
 80021a4:	f7ff f8a6 	bl	80012f4 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80021a8:	4805      	ldr	r0, [pc, #20]	@ (80021c0 <vcom_Resume+0x2c>)
 80021aa:	f001 f94f 	bl	800344c <HAL_DMA_Init>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <vcom_Resume+0x24>
  {
    Error_Handler();
 80021b4:	f7ff f89e 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 80021b8:	bf00      	nop
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	200007a4 	.word	0x200007a4
 80021c0:	20000838 	.word	0x20000838

080021c4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a05      	ldr	r2, [pc, #20]	@ (80021e8 <HAL_UART_TxCpltCallback+0x24>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d103      	bne.n	80021de <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 80021d6:	4b05      	ldr	r3, [pc, #20]	@ (80021ec <HAL_UART_TxCpltCallback+0x28>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2000      	movs	r0, #0
 80021dc:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 80021de:	bf00      	nop
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40004400 	.word	0x40004400
 80021ec:	2000089c 	.word	0x2000089c

080021f0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002234 <HAL_UART_RxCpltCallback+0x44>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d113      	bne.n	800222a <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8002202:	4b0d      	ldr	r3, [pc, #52]	@ (8002238 <HAL_UART_RxCpltCallback+0x48>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00a      	beq.n	8002220 <HAL_UART_RxCpltCallback+0x30>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002210:	2b00      	cmp	r3, #0
 8002212:	d105      	bne.n	8002220 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8002214:	4b08      	ldr	r3, [pc, #32]	@ (8002238 <HAL_UART_RxCpltCallback+0x48>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2200      	movs	r2, #0
 800221a:	2101      	movs	r1, #1
 800221c:	4807      	ldr	r0, [pc, #28]	@ (800223c <HAL_UART_RxCpltCallback+0x4c>)
 800221e:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8002220:	2201      	movs	r2, #1
 8002222:	4906      	ldr	r1, [pc, #24]	@ (800223c <HAL_UART_RxCpltCallback+0x4c>)
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f005 fc9b 	bl	8007b60 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 800222a:	bf00      	nop
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40004400 	.word	0x40004400
 8002238:	200008a0 	.word	0x200008a0
 800223c:	20000898 	.word	0x20000898

08002240 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */
	my_MX_GPIO_Init_done = 1;
 8002244:	4b04      	ldr	r3, [pc, #16]	@ (8002258 <MX_LoRaWAN_Init+0x18>)
 8002246:	2201      	movs	r2, #1
 8002248:	701a      	strb	r2, [r3, #0]
  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800224a:	f7ff f9f5 	bl	8001638 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800224e:	f000 f80d 	bl	800226c <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8002252:	bf00      	nop
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	200008a4 	.word	0x200008a4

0800225c <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8002260:	f04f 30ff 	mov.w	r0, #4294967295
 8002264:	f017 fe68 	bl	8019f38 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8002268:	bf00      	nop
 800226a:	bd80      	pop	{r7, pc}

0800226c <LoRaWAN_Init>:


/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
#endif

#if MY_TX

#if MY_TX_ABP
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_RTF), UTIL_SEQ_RFU, SendTxData);	// Register task for: SendTxData
 8002270:	4a1e      	ldr	r2, [pc, #120]	@ (80022ec <LoRaWAN_Init+0x80>)
 8002272:	2100      	movs	r1, #0
 8002274:	2010      	movs	r0, #16
 8002276:	f017 ff5b 	bl	801a130 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_EHF), UTIL_SEQ_RFU, My_EHF);		// Register task for: My_EHF
 800227a:	4a1d      	ldr	r2, [pc, #116]	@ (80022f0 <LoRaWAN_Init+0x84>)
 800227c:	2100      	movs	r1, #0
 800227e:	2020      	movs	r0, #32
 8002280:	f017 ff56 	bl	801a130 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_ESF), UTIL_SEQ_RFU, My_ESF);		// Register task for: My_ESF
 8002284:	4a1b      	ldr	r2, [pc, #108]	@ (80022f4 <LoRaWAN_Init+0x88>)
 8002286:	2100      	movs	r1, #0
 8002288:	2040      	movs	r0, #64	@ 0x40
 800228a:	f017 ff51 	bl	801a130 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_SMF), UTIL_SEQ_RFU, My_SMF);	 	// Register Task for: My_SMF
 800228e:	4a1a      	ldr	r2, [pc, #104]	@ (80022f8 <LoRaWAN_Init+0x8c>)
 8002290:	2100      	movs	r1, #0
 8002292:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002296:	f017 ff4b 	bl	801a130 <UTIL_SEQ_RegTask>
#if AI
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_AIF), UTIL_SEQ_RFU, My_AIF);		// Register Task for: My_AIF
 800229a:	4a18      	ldr	r2, [pc, #96]	@ (80022fc <LoRaWAN_Init+0x90>)
 800229c:	2100      	movs	r1, #0
 800229e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80022a2:	f017 ff45 	bl	801a130 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_EHF), UTIL_SEQ_RFU, My_EHF);		// Register task for: My_EHF
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_ESF), UTIL_SEQ_RFU, My_ESF);		// Register task for: My_ESF
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_SMF), UTIL_SEQ_RFU, My_SMF);	 	// Register Task for: My_SMF
#endif

	LoraInfo_Init();									 					// LoRaWAN info (Region, ClassB, Kms(Key Management Service))
 80022a6:	f000 f9b1 	bl	800260c <LoraInfo_Init>

	LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);     					// LoRaMacPrimitives: Used to notify LmHandler of LoRaMac events and LoRaMacCallbacks On MacProcessNotify:
 80022aa:	4915      	ldr	r1, [pc, #84]	@ (8002300 <LoRaWAN_Init+0x94>)
 80022ac:	4815      	ldr	r0, [pc, #84]	@ (8002304 <LoRaWAN_Init+0x98>)
 80022ae:	f007 fe1d 	bl	8009eec <LmHandlerInit>
	// When a radio interrupt (IRQ) occurs, it means that the radio has finished transmitting or receiving a message and needs to be handled by the MAC layer

	//LmHandlerParams.TxDatarate = 2;
	LmHandlerConfigure(&LmHandlerParams);                					// LoRaWAN Configuration using LmHandlerParams
 80022b2:	4815      	ldr	r0, [pc, #84]	@ (8002308 <LoRaWAN_Init+0x9c>)
 80022b4:	f007 fe48 	bl	8009f48 <LmHandlerConfigure>

	LmHandlerJoin(ActivationType, ForceRejoin);          					// LoRaWAN network ACTIVATION_TYPE_ABP file  (LmHandlerJoin) is modified, to work only with ABP no need to OTAA activation
 80022b8:	4b14      	ldr	r3, [pc, #80]	@ (800230c <LoRaWAN_Init+0xa0>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	4a14      	ldr	r2, [pc, #80]	@ (8002310 <LoRaWAN_Init+0xa4>)
 80022be:	7812      	ldrb	r2, [r2, #0]
 80022c0:	4611      	mov	r1, r2
 80022c2:	4618      	mov	r0, r3
 80022c4:	f007 ff62 	bl	800a18c <LmHandlerJoin>

	if (my_Current_State != PSS)
 80022c8:	4b12      	ldr	r3, [pc, #72]	@ (8002314 <LoRaWAN_Init+0xa8>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d002      	beq.n	80022d6 <LoRaWAN_Init+0x6a>
	{
		my_SubghzApp_Init_done = 1;
 80022d0:	4b11      	ldr	r3, [pc, #68]	@ (8002318 <LoRaWAN_Init+0xac>)
 80022d2:	2201      	movs	r2, #1
 80022d4:	701a      	strb	r2, [r3, #0]
#if MY_RADIO_DEACTIVATION
		Radio.Sleep();
#endif
	}
#if MY_TX_ABP
	SendTxData();
 80022d6:	f000 f92d 	bl	8002534 <SendTxData>
#endif
	my_LoRAWAN_Init++;
 80022da:	4b10      	ldr	r3, [pc, #64]	@ (800231c <LoRaWAN_Init+0xb0>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	3301      	adds	r3, #1
 80022e0:	b2da      	uxtb	r2, r3
 80022e2:	4b0e      	ldr	r3, [pc, #56]	@ (800231c <LoRaWAN_Init+0xb0>)
 80022e4:	701a      	strb	r2, [r3, #0]
#endif
	/* USER CODE END LoRaWAN_Init_Last */
}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	08002535 	.word	0x08002535
 80022f0:	0801bdb9 	.word	0x0801bdb9
 80022f4:	0801bf61 	.word	0x0801bf61
 80022f8:	0801c0a1 	.word	0x0801c0a1
 80022fc:	0801c141 	.word	0x0801c141
 8002300:	01030000 	.word	0x01030000
 8002304:	20000004 	.word	0x20000004
 8002308:	20000050 	.word	0x20000050
 800230c:	20000000 	.word	0x20000000
 8002310:	200008a6 	.word	0x200008a6
 8002314:	20001be9 	.word	0x20001be9
 8002318:	200008a7 	.word	0x200008a7
 800231c:	200008a5 	.word	0x200008a5

08002320 <My_Adv_Data_Init>:


#if MY_TX

void My_Adv_Data_Init(void)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 8002326:	2300      	movs	r3, #0
 8002328:	607b      	str	r3, [r7, #4]

	if (my_LoRAWAN_Init++ > N_LORA_TX)
 800232a:	4b59      	ldr	r3, [pc, #356]	@ (8002490 <My_Adv_Data_Init+0x170>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	1c5a      	adds	r2, r3, #1
 8002330:	b2d1      	uxtb	r1, r2
 8002332:	4a57      	ldr	r2, [pc, #348]	@ (8002490 <My_Adv_Data_Init+0x170>)
 8002334:	7011      	strb	r1, [r2, #0]
 8002336:	2b01      	cmp	r3, #1
 8002338:	f240 809a 	bls.w	8002470 <My_Adv_Data_Init+0x150>
	{
		AppData.Buffer[i++] = (uint8_t)((my_Trise_time >> 8) & 0xFF); 			// 0
 800233c:	4b55      	ldr	r3, [pc, #340]	@ (8002494 <My_Adv_Data_Init+0x174>)
 800233e:	881b      	ldrh	r3, [r3, #0]
 8002340:	0a1b      	lsrs	r3, r3, #8
 8002342:	b298      	uxth	r0, r3
 8002344:	4b54      	ldr	r3, [pc, #336]	@ (8002498 <My_Adv_Data_Init+0x178>)
 8002346:	685a      	ldr	r2, [r3, #4]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	1c59      	adds	r1, r3, #1
 800234c:	6079      	str	r1, [r7, #4]
 800234e:	4413      	add	r3, r2
 8002350:	b2c2      	uxtb	r2, r0
 8002352:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)(my_Trise_time & 0xFF); 					// 1
 8002354:	4b4f      	ldr	r3, [pc, #316]	@ (8002494 <My_Adv_Data_Init+0x174>)
 8002356:	8818      	ldrh	r0, [r3, #0]
 8002358:	4b4f      	ldr	r3, [pc, #316]	@ (8002498 <My_Adv_Data_Init+0x178>)
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	1c59      	adds	r1, r3, #1
 8002360:	6079      	str	r1, [r7, #4]
 8002362:	4413      	add	r3, r2
 8002364:	b2c2      	uxtb	r2, r0
 8002366:	701a      	strb	r2, [r3, #0]

#if MY_ES_FEATURE_ENABLE

		if(my_Cmode == DCM)
 8002368:	4b4c      	ldr	r3, [pc, #304]	@ (800249c <My_Adv_Data_Init+0x17c>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d103      	bne.n	8002378 <My_Adv_Data_Init+0x58>
		{
			my_ESD_Level = 0;
 8002370:	4b4b      	ldr	r3, [pc, #300]	@ (80024a0 <My_Adv_Data_Init+0x180>)
 8002372:	2200      	movs	r2, #0
 8002374:	701a      	strb	r2, [r3, #0]
 8002376:	e00a      	b.n	800238e <My_Adv_Data_Init+0x6e>
		}
		else if (my_Cmode == CCM)
 8002378:	4b48      	ldr	r3, [pc, #288]	@ (800249c <My_Adv_Data_Init+0x17c>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d103      	bne.n	8002388 <My_Adv_Data_Init+0x68>
		{
			my_ESD_Level = 1;
 8002380:	4b47      	ldr	r3, [pc, #284]	@ (80024a0 <My_Adv_Data_Init+0x180>)
 8002382:	2201      	movs	r2, #1
 8002384:	701a      	strb	r2, [r3, #0]
 8002386:	e002      	b.n	800238e <My_Adv_Data_Init+0x6e>
		}
		else
		{
			my_ESD_Level = 2;
 8002388:	4b45      	ldr	r3, [pc, #276]	@ (80024a0 <My_Adv_Data_Init+0x180>)
 800238a:	2202      	movs	r2, #2
 800238c:	701a      	strb	r2, [r3, #0]
		}
		AppData.Buffer[i++] = (uint8_t)(my_ESD_Level & 0xFF); 					// 2
 800238e:	4b42      	ldr	r3, [pc, #264]	@ (8002498 <My_Adv_Data_Init+0x178>)
 8002390:	685a      	ldr	r2, [r3, #4]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	1c59      	adds	r1, r3, #1
 8002396:	6079      	str	r1, [r7, #4]
 8002398:	4413      	add	r3, r2
 800239a:	4a41      	ldr	r2, [pc, #260]	@ (80024a0 <My_Adv_Data_Init+0x180>)
 800239c:	7812      	ldrb	r2, [r2, #0]
 800239e:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)(My_EBK_status & 0xFF); 					// 3
 80023a0:	4b3d      	ldr	r3, [pc, #244]	@ (8002498 <My_Adv_Data_Init+0x178>)
 80023a2:	685a      	ldr	r2, [r3, #4]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	1c59      	adds	r1, r3, #1
 80023a8:	6079      	str	r1, [r7, #4]
 80023aa:	4413      	add	r3, r2
 80023ac:	4a3d      	ldr	r2, [pc, #244]	@ (80024a4 <My_Adv_Data_Init+0x184>)
 80023ae:	7812      	ldrb	r2, [r2, #0]
 80023b0:	701a      	strb	r2, [r3, #0]

#if MY_SM_FEATURE_ENABLE

#if MY_SHT40
		/**** Get Temperature from STH40 ****/
		AppData.Buffer[i++] = (uint8_t)((my_SHT40_Temp >> 24) & 0xFF); 			// 4
 80023b2:	4b3d      	ldr	r3, [pc, #244]	@ (80024a8 <My_Adv_Data_Init+0x188>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	0e18      	lsrs	r0, r3, #24
 80023b8:	4b37      	ldr	r3, [pc, #220]	@ (8002498 <My_Adv_Data_Init+0x178>)
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	1c59      	adds	r1, r3, #1
 80023c0:	6079      	str	r1, [r7, #4]
 80023c2:	4413      	add	r3, r2
 80023c4:	b2c2      	uxtb	r2, r0
 80023c6:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)((my_SHT40_Temp >> 16) & 0xFF); 			// 5
 80023c8:	4b37      	ldr	r3, [pc, #220]	@ (80024a8 <My_Adv_Data_Init+0x188>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	0c18      	lsrs	r0, r3, #16
 80023ce:	4b32      	ldr	r3, [pc, #200]	@ (8002498 <My_Adv_Data_Init+0x178>)
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	1c59      	adds	r1, r3, #1
 80023d6:	6079      	str	r1, [r7, #4]
 80023d8:	4413      	add	r3, r2
 80023da:	b2c2      	uxtb	r2, r0
 80023dc:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)((my_SHT40_Temp >> 8) & 0xFF); 			// 6
 80023de:	4b32      	ldr	r3, [pc, #200]	@ (80024a8 <My_Adv_Data_Init+0x188>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	0a18      	lsrs	r0, r3, #8
 80023e4:	4b2c      	ldr	r3, [pc, #176]	@ (8002498 <My_Adv_Data_Init+0x178>)
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	1c59      	adds	r1, r3, #1
 80023ec:	6079      	str	r1, [r7, #4]
 80023ee:	4413      	add	r3, r2
 80023f0:	b2c2      	uxtb	r2, r0
 80023f2:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)(my_SHT40_Temp & 0xFF); 					// 7
 80023f4:	4b2c      	ldr	r3, [pc, #176]	@ (80024a8 <My_Adv_Data_Init+0x188>)
 80023f6:	6818      	ldr	r0, [r3, #0]
 80023f8:	4b27      	ldr	r3, [pc, #156]	@ (8002498 <My_Adv_Data_Init+0x178>)
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	1c59      	adds	r1, r3, #1
 8002400:	6079      	str	r1, [r7, #4]
 8002402:	4413      	add	r3, r2
 8002404:	b2c2      	uxtb	r2, r0
 8002406:	701a      	strb	r2, [r3, #0]

		/**** Get RH from STH40 ****/
		AppData.Buffer[i++] = (uint8_t)((my_SHT40_Humid >> 24) & 0xFF); 		// 8
 8002408:	4b28      	ldr	r3, [pc, #160]	@ (80024ac <My_Adv_Data_Init+0x18c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	0e18      	lsrs	r0, r3, #24
 800240e:	4b22      	ldr	r3, [pc, #136]	@ (8002498 <My_Adv_Data_Init+0x178>)
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	1c59      	adds	r1, r3, #1
 8002416:	6079      	str	r1, [r7, #4]
 8002418:	4413      	add	r3, r2
 800241a:	b2c2      	uxtb	r2, r0
 800241c:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)((my_SHT40_Humid >> 16) & 0xFF); 		// 9
 800241e:	4b23      	ldr	r3, [pc, #140]	@ (80024ac <My_Adv_Data_Init+0x18c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	0c18      	lsrs	r0, r3, #16
 8002424:	4b1c      	ldr	r3, [pc, #112]	@ (8002498 <My_Adv_Data_Init+0x178>)
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	1c59      	adds	r1, r3, #1
 800242c:	6079      	str	r1, [r7, #4]
 800242e:	4413      	add	r3, r2
 8002430:	b2c2      	uxtb	r2, r0
 8002432:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)((my_SHT40_Humid >> 8) & 0xFF); 			// 10
 8002434:	4b1d      	ldr	r3, [pc, #116]	@ (80024ac <My_Adv_Data_Init+0x18c>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	0a18      	lsrs	r0, r3, #8
 800243a:	4b17      	ldr	r3, [pc, #92]	@ (8002498 <My_Adv_Data_Init+0x178>)
 800243c:	685a      	ldr	r2, [r3, #4]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	1c59      	adds	r1, r3, #1
 8002442:	6079      	str	r1, [r7, #4]
 8002444:	4413      	add	r3, r2
 8002446:	b2c2      	uxtb	r2, r0
 8002448:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)(my_SHT40_Humid & 0xFF); 				// 11
 800244a:	4b18      	ldr	r3, [pc, #96]	@ (80024ac <My_Adv_Data_Init+0x18c>)
 800244c:	6818      	ldr	r0, [r3, #0]
 800244e:	4b12      	ldr	r3, [pc, #72]	@ (8002498 <My_Adv_Data_Init+0x178>)
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	1c59      	adds	r1, r3, #1
 8002456:	6079      	str	r1, [r7, #4]
 8002458:	4413      	add	r3, r2
 800245a:	b2c2      	uxtb	r2, r0
 800245c:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)((my_Trise_time_stop >> 8) & 0xFF); 		// 43
		AppData.Buffer[i++] = (uint8_t)(my_Trise_time_stop & 0xFF); 			// 44
#endif
		/* Send the result of the neural network*/
#if AI
		AppData.Buffer[i++] =(uint8_t)(result_nn);
 800245e:	4b0e      	ldr	r3, [pc, #56]	@ (8002498 <My_Adv_Data_Init+0x178>)
 8002460:	685a      	ldr	r2, [r3, #4]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	1c59      	adds	r1, r3, #1
 8002466:	6079      	str	r1, [r7, #4]
 8002468:	4413      	add	r3, r2
 800246a:	4a11      	ldr	r2, [pc, #68]	@ (80024b0 <My_Adv_Data_Init+0x190>)
 800246c:	7812      	ldrb	r2, [r2, #0]
 800246e:	701a      	strb	r2, [r3, #0]
#endif
	}

	AppData.BufferSize = i;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	b2da      	uxtb	r2, r3
 8002474:	4b08      	ldr	r3, [pc, #32]	@ (8002498 <My_Adv_Data_Init+0x178>)
 8002476:	705a      	strb	r2, [r3, #1]
	AppData.Port = LORAWAN_USER_APP_PORT;
 8002478:	4b07      	ldr	r3, [pc, #28]	@ (8002498 <My_Adv_Data_Init+0x178>)
 800247a:	2202      	movs	r2, #2
 800247c:	701a      	strb	r2, [r3, #0]
	my_Trise_time = 0;
 800247e:	4b05      	ldr	r3, [pc, #20]	@ (8002494 <My_Adv_Data_Init+0x174>)
 8002480:	2200      	movs	r2, #0
 8002482:	801a      	strh	r2, [r3, #0]
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	bc80      	pop	{r7}
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	200008a5 	.word	0x200008a5
 8002494:	20001bc6 	.word	0x20001bc6
 8002498:	20000068 	.word	0x20000068
 800249c:	20001bea 	.word	0x20001bea
 80024a0:	20001bb8 	.word	0x20001bb8
 80024a4:	20001bb9 	.word	0x20001bb9
 80024a8:	20001bf4 	.word	0x20001bf4
 80024ac:	20001bf8 	.word	0x20001bf8
 80024b0:	20001a48 	.word	0x20001a48

080024b4 <My_EMS_Adv_Data_Init>:

void My_EMS_Adv_Data_Init(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 80024ba:	2300      	movs	r3, #0
 80024bc:	607b      	str	r3, [r7, #4]
	uint8_t j = 0;
 80024be:	2300      	movs	r3, #0
 80024c0:	70fb      	strb	r3, [r7, #3]

	for(j=0;j<MY_DIM_EMS_BUFFER;j++)
 80024c2:	2300      	movs	r3, #0
 80024c4:	70fb      	strb	r3, [r7, #3]
 80024c6:	e021      	b.n	800250c <My_EMS_Adv_Data_Init+0x58>
	{
		AppData.Buffer[i++] = (uint8_t)((my_ems_buffer[j] >> 8) & 0xFF);
 80024c8:	78fb      	ldrb	r3, [r7, #3]
 80024ca:	4a18      	ldr	r2, [pc, #96]	@ (800252c <My_EMS_Adv_Data_Init+0x78>)
 80024cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024d0:	0a1b      	lsrs	r3, r3, #8
 80024d2:	b298      	uxth	r0, r3
 80024d4:	4b16      	ldr	r3, [pc, #88]	@ (8002530 <My_EMS_Adv_Data_Init+0x7c>)
 80024d6:	685a      	ldr	r2, [r3, #4]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	1c59      	adds	r1, r3, #1
 80024dc:	6079      	str	r1, [r7, #4]
 80024de:	4413      	add	r3, r2
 80024e0:	b2c2      	uxtb	r2, r0
 80024e2:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)(my_ems_buffer[j] & 0xFF);
 80024e4:	78fb      	ldrb	r3, [r7, #3]
 80024e6:	4a11      	ldr	r2, [pc, #68]	@ (800252c <My_EMS_Adv_Data_Init+0x78>)
 80024e8:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 80024ec:	4b10      	ldr	r3, [pc, #64]	@ (8002530 <My_EMS_Adv_Data_Init+0x7c>)
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	1c59      	adds	r1, r3, #1
 80024f4:	6079      	str	r1, [r7, #4]
 80024f6:	4413      	add	r3, r2
 80024f8:	b2c2      	uxtb	r2, r0
 80024fa:	701a      	strb	r2, [r3, #0]
		my_ems_buffer[j] = 0;
 80024fc:	78fb      	ldrb	r3, [r7, #3]
 80024fe:	4a0b      	ldr	r2, [pc, #44]	@ (800252c <My_EMS_Adv_Data_Init+0x78>)
 8002500:	2100      	movs	r1, #0
 8002502:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(j=0;j<MY_DIM_EMS_BUFFER;j++)
 8002506:	78fb      	ldrb	r3, [r7, #3]
 8002508:	3301      	adds	r3, #1
 800250a:	70fb      	strb	r3, [r7, #3]
 800250c:	78fb      	ldrb	r3, [r7, #3]
 800250e:	2b08      	cmp	r3, #8
 8002510:	d9da      	bls.n	80024c8 <My_EMS_Adv_Data_Init+0x14>
	}
	AppData.BufferSize = i;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	b2da      	uxtb	r2, r3
 8002516:	4b06      	ldr	r3, [pc, #24]	@ (8002530 <My_EMS_Adv_Data_Init+0x7c>)
 8002518:	705a      	strb	r2, [r3, #1]
	AppData.Port = LORAWAN_USER_APP_PORT;
 800251a:	4b05      	ldr	r3, [pc, #20]	@ (8002530 <My_EMS_Adv_Data_Init+0x7c>)
 800251c:	2202      	movs	r2, #2
 800251e:	701a      	strb	r2, [r3, #0]

}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	bc80      	pop	{r7}
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	20001bcc 	.word	0x20001bcc
 8002530:	20000068 	.word	0x20000068

08002534 <SendTxData>:

void SendTxData(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
#if !(MY_DEBUGGER_ENABLED || MY_LPTIM_Monitor || MY_RTCB_Monitor)
	My_Set_All_GPIO_To_Analog_Mode();								// Set all GPIO in Analog Mode
 8002538:	f01a f938 	bl	801c7ac <My_Set_All_GPIO_To_Analog_Mode>
#endif

#if MY_ES_FEATURE_ENABLE
	My_VDD_to_ES_Switch(Switch_OPEN);											// Open VDD to ES Switch
 800253c:	2000      	movs	r0, #0
 800253e:	f01a fc9f 	bl	801ce80 <My_VDD_to_ES_Switch>

#if MY_SHT40 && MY_STHS34PF80 && MY_STTS22H && STEVAL_HARVEST1
	My_VDD_to_VDDS2_Switch(Switch_OPEN);										// unBias the Sensors
#endif

	HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0); 	// Configure Radio Interrupt with the Highest Priority
 8002542:	2200      	movs	r2, #0
 8002544:	2100      	movs	r1, #0
 8002546:	2032      	movs	r0, #50	@ 0x32
 8002548:	f000 ff3b 	bl	80033c2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);			// Set Radio Interrupt
 800254c:	2032      	movs	r0, #50	@ 0x32
 800254e:	f000 ff52 	bl	80033f6 <HAL_NVIC_EnableIRQ>

	if (my_Current_State == PSS)
 8002552:	4b20      	ldr	r3, [pc, #128]	@ (80025d4 <SendTxData+0xa0>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d113      	bne.n	8002582 <SendTxData+0x4e>
	{
		HAL_ResumeTick();
 800255a:	f000 fa4d 	bl	80029f8 <HAL_ResumeTick>
		while(1)
		{
			My_Adv_Data_Init();
 800255e:	f7ff fedf 	bl	8002320 <My_Adv_Data_Init>
			HAL_Delay(3000);			// If Supplied by a Battery --> Add a delay for the Idle time between TX
 8002562:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002566:	f7ff f8f7 	bl	8001758 <HAL_Delay>
			my_Previous_State = PSS;
 800256a:	4b1b      	ldr	r3, [pc, #108]	@ (80025d8 <SendTxData+0xa4>)
 800256c:	2201      	movs	r2, #1
 800256e:	701a      	strb	r2, [r3, #0]
			LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);	// send the data using LoRaWAN parameters (lmhandler params) with zero delay on Tx
 8002570:	4b1a      	ldr	r3, [pc, #104]	@ (80025dc <SendTxData+0xa8>)
 8002572:	78db      	ldrb	r3, [r3, #3]
 8002574:	2200      	movs	r2, #0
 8002576:	4619      	mov	r1, r3
 8002578:	4819      	ldr	r0, [pc, #100]	@ (80025e0 <SendTxData+0xac>)
 800257a:	f007 fe43 	bl	800a204 <LmHandlerSend>
			My_Adv_Data_Init();
 800257e:	bf00      	nop
 8002580:	e7ed      	b.n	800255e <SendTxData+0x2a>
		}
	}
	else
	{
		My_Exit_Stop2_Mode_WFI();
 8002582:	f01a f9cd 	bl	801c920 <My_Exit_Stop2_Mode_WFI>

		HAL_NVIC_ClearPendingIRQ(LPTIM1_IRQn);	// Clear LPTIM1 Interrupt
 8002586:	2027      	movs	r0, #39	@ 0x27
 8002588:	f000 ff51 	bl	800342e <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_DisableIRQ(LPTIM1_IRQn);		// Disable LPTIM1 Interrupt
 800258c:	2027      	movs	r0, #39	@ 0x27
 800258e:	f000 ff40 	bl	8003412 <HAL_NVIC_DisableIRQ>

		if (my_Current_State != SMS)
 8002592:	4b10      	ldr	r3, [pc, #64]	@ (80025d4 <SendTxData+0xa0>)
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	2b07      	cmp	r3, #7
 8002598:	d005      	beq.n	80025a6 <SendTxData+0x72>
		{
			my_Previous_State = EHS;
 800259a:	4b0f      	ldr	r3, [pc, #60]	@ (80025d8 <SendTxData+0xa4>)
 800259c:	2203      	movs	r2, #3
 800259e:	701a      	strb	r2, [r3, #0]
			my_Current_State = RTS;				// EHS --> RTS
 80025a0:	4b0c      	ldr	r3, [pc, #48]	@ (80025d4 <SendTxData+0xa0>)
 80025a2:	2202      	movs	r2, #2
 80025a4:	701a      	strb	r2, [r3, #0]
		}

		/*Check if it is the first Wake-up event after the Energy Missing State (EMS)
		 *If the system just woke up from EMS it sends the buffer that has been filled during the night
		 */
		if(my_Previous_State == EMS)
 80025a6:	4b0c      	ldr	r3, [pc, #48]	@ (80025d8 <SendTxData+0xa4>)
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	2b05      	cmp	r3, #5
 80025ac:	d102      	bne.n	80025b4 <SendTxData+0x80>
		{
			My_EMS_Adv_Data_Init();
 80025ae:	f7ff ff81 	bl	80024b4 <My_EMS_Adv_Data_Init>
 80025b2:	e001      	b.n	80025b8 <SendTxData+0x84>
		}
		else 									// Otherwise it sends the last measurement
		{
			My_Adv_Data_Init();
 80025b4:	f7ff feb4 	bl	8002320 <My_Adv_Data_Init>
		}

		BSP_RADIO_Init();
 80025b8:	f000 f8de 	bl	8002778 <BSP_RADIO_Init>
		LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);	// send the data using LoRaWAN parameters (lmhandler params) with zero delay on Tx
 80025bc:	4b07      	ldr	r3, [pc, #28]	@ (80025dc <SendTxData+0xa8>)
 80025be:	78db      	ldrb	r3, [r3, #3]
 80025c0:	2200      	movs	r2, #0
 80025c2:	4619      	mov	r1, r3
 80025c4:	4806      	ldr	r0, [pc, #24]	@ (80025e0 <SendTxData+0xac>)
 80025c6:	f007 fe1d 	bl	800a204 <LmHandlerSend>
		BSP_RADIO_DeInit();
 80025ca:	f000 f913 	bl	80027f4 <BSP_RADIO_DeInit>
	}
}
 80025ce:	bf00      	nop
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	20001be9 	.word	0x20001be9
 80025d8:	20001be8 	.word	0x20001be8
 80025dc:	20000050 	.word	0x20000050
 80025e0:	20000068 	.word	0x20000068

080025e4 <OnTxData>:

}
#endif
#if MY_TX_ABP
static void OnTxData(LmHandlerTxParams_t *params)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN OnTxData_1 */

	/* USER CODE END OnTxData_1 */
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bc80      	pop	{r7}
 80025f4:	4770      	bx	lr

080025f6 <OnMacProcessNotify>:
}
#endif

#if MY_TX
static void OnMacProcessNotify(void)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	af00      	add	r7, sp, #0
#if MY_TX_ABP
	/* USER CODE BEGIN OnMacProcessNotify_1 */
	LoRaMacProcess( );                                                            // should be Called at first the LoRaMAC process before to run all package process features
 80025fa:	f009 fc75 	bl	800bee8 <LoRaMacProcess>

	/* USER CODE END OnMacProcessNotify_1 */

	/* USER CODE BEGIN OnMacProcessNotify_2 */
	UTIL_SEQ_SetTask((1 <<CFG_SEQ_Task_EHF ), CFG_SEQ_Prio_0);   // My_EHF
 80025fe:	2100      	movs	r1, #0
 8002600:	2020      	movs	r0, #32
 8002602:	f017 fdb7 	bl	801a174 <UTIL_SEQ_SetTask>
		UTIL_SEQ_SetTask((1 <<CFG_SEQ_Task_EHF ), CFG_SEQ_Prio_0);   // My_EHF
		}
	/* USER CODE END OnMacProcessNotify_2 */
#endif
	/* USER CODE END OnMacProcessNotify_2 */
}
 8002606:	bf00      	nop
 8002608:	bd80      	pop	{r7, pc}
	...

0800260c <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  loraInfo.ContextManagement = 0;
 8002610:	4b15      	ldr	r3, [pc, #84]	@ (8002668 <LoraInfo_Init+0x5c>)
 8002612:	2200      	movs	r2, #0
 8002614:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 8002616:	4b14      	ldr	r3, [pc, #80]	@ (8002668 <LoraInfo_Init+0x5c>)
 8002618:	2200      	movs	r2, #0
 800261a:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800261c:	4b12      	ldr	r3, [pc, #72]	@ (8002668 <LoraInfo_Init+0x5c>)
 800261e:	2200      	movs	r2, #0
 8002620:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 8002622:	4b11      	ldr	r3, [pc, #68]	@ (8002668 <LoraInfo_Init+0x5c>)
 8002624:	2200      	movs	r2, #0
 8002626:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 8002628:	4b0f      	ldr	r3, [pc, #60]	@ (8002668 <LoraInfo_Init+0x5c>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f043 0320 	orr.w	r3, r3, #32
 8002630:	4a0d      	ldr	r2, [pc, #52]	@ (8002668 <LoraInfo_Init+0x5c>)
 8002632:	6053      	str	r3, [r2, #4]
#endif
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 8002634:	4b0c      	ldr	r3, [pc, #48]	@ (8002668 <LoraInfo_Init+0x5c>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d10d      	bne.n	8002658 <LoraInfo_Init+0x4c>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800263c:	4b0b      	ldr	r3, [pc, #44]	@ (800266c <LoraInfo_Init+0x60>)
 800263e:	2200      	movs	r2, #0
 8002640:	2100      	movs	r1, #0
 8002642:	2000      	movs	r0, #0
 8002644:	f017 f93e 	bl	80198c4 <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 8002648:	bf00      	nop
 800264a:	f017 f929 	bl	80198a0 <UTIL_ADV_TRACE_IsBufferEmpty>
 800264e:	4603      	mov	r3, r0
 8002650:	2b01      	cmp	r3, #1
 8002652:	d1fa      	bne.n	800264a <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 8002654:	bf00      	nop
 8002656:	e7fd      	b.n	8002654 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 8002658:	4b03      	ldr	r3, [pc, #12]	@ (8002668 <LoraInfo_Init+0x5c>)
 800265a:	2200      	movs	r2, #0
 800265c:	60da      	str	r2, [r3, #12]
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
#else /* CONTEXT_MANAGEMENT_ENABLED == 1 */
  loraInfo.ContextManagement = 1;
 800265e:	4b02      	ldr	r3, [pc, #8]	@ (8002668 <LoraInfo_Init+0x5c>)
 8002660:	2201      	movs	r2, #1
 8002662:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 8002664:	bf00      	nop
 8002666:	bd80      	pop	{r7, pc}
 8002668:	2000099c 	.word	0x2000099c
 800266c:	080209cc 	.word	0x080209cc

08002670 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 8002674:	4b02      	ldr	r3, [pc, #8]	@ (8002680 <LoraInfo_GetPtr+0x10>)
}
 8002676:	4618      	mov	r0, r3
 8002678:	46bd      	mov	sp, r7
 800267a:	bc80      	pop	{r7}
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	2000099c 	.word	0x2000099c

08002684 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 8002688:	f000 f876 	bl	8002778 <BSP_RADIO_Init>
 800268c:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800268e:	4618      	mov	r0, r3
 8002690:	bd80      	pop	{r7, pc}

08002692 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b082      	sub	sp, #8
 8002696:	af00      	add	r7, sp, #0
 8002698:	4603      	mov	r3, r0
 800269a:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800269c:	79fb      	ldrb	r3, [r7, #7]
 800269e:	4618      	mov	r0, r3
 80026a0:	f000 f8ce 	bl	8002840 <BSP_RADIO_ConfigRFSwitch>
 80026a4:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 80026b2:	f000 f921 	bl	80028f8 <BSP_RADIO_GetTxConfig>
 80026b6:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	bd80      	pop	{r7, pc}

080026bc <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 80026c0:	f000 f921 	bl	8002906 <BSP_RADIO_IsTCXO>
 80026c4:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	bd80      	pop	{r7, pc}

080026ca <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 80026ce:	f000 f921 	bl	8002914 <BSP_RADIO_IsDCDC>
 80026d2:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4603      	mov	r3, r0
 80026e0:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 80026e2:	79fb      	ldrb	r3, [r7, #7]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f000 f91c 	bl	8002922 <BSP_RADIO_GetRFOMaxPowerConfig>
 80026ea:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80026f4:	480d      	ldr	r0, [pc, #52]	@ (800272c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80026f6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80026f8:	f01a fc94 	bl	801d024 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026fc:	480c      	ldr	r0, [pc, #48]	@ (8002730 <LoopForever+0x6>)
  ldr r1, =_edata
 80026fe:	490d      	ldr	r1, [pc, #52]	@ (8002734 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002700:	4a0d      	ldr	r2, [pc, #52]	@ (8002738 <LoopForever+0xe>)
  movs r3, #0
 8002702:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002704:	e002      	b.n	800270c <LoopCopyDataInit>

08002706 <CopyDataInit>:


CopyDataInit:
  ldr r4, [r2, r3]
 8002706:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002708:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800270a:	3304      	adds	r3, #4

0800270c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800270c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800270e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002710:	d3f9      	bcc.n	8002706 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002712:	4a0a      	ldr	r2, [pc, #40]	@ (800273c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002714:	4c0a      	ldr	r4, [pc, #40]	@ (8002740 <LoopForever+0x16>)
  movs r3, #0
 8002716:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002718:	e001      	b.n	800271e <LoopFillZerobss>

0800271a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800271a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800271c:	3204      	adds	r2, #4

0800271e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800271e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002720:	d3fb      	bcc.n	800271a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002722:	f01d fb11 	bl	801fd48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002726:	f7fe fdc5 	bl	80012b4 <main>

0800272a <LoopForever>:

LoopForever:
    b LoopForever
 800272a:	e7fe      	b.n	800272a <LoopForever>
  ldr   r0, =_estack
 800272c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002730:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002734:	20000698 	.word	0x20000698
  ldr r2, =_sidata
 8002738:	080216f0 	.word	0x080216f0
  ldr r2, =_sbss
 800273c:	200006cc 	.word	0x200006cc
  ldr r4, =_ebss
 8002740:	20001e30 	.word	0x20001e30

08002744 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002744:	e7fe      	b.n	8002744 <ADC_IRQHandler>

08002746 <LL_AHB2_GRP1_EnableClock>:
{
 8002746:	b480      	push	{r7}
 8002748:	b085      	sub	sp, #20
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800274e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002752:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002754:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4313      	orrs	r3, r2
 800275c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800275e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002762:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4013      	ands	r3, r2
 8002768:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800276a:	68fb      	ldr	r3, [r7, #12]
}
 800276c:	bf00      	nop
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	bc80      	pop	{r7}
 8002774:	4770      	bx	lr
	...

08002778 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 800277e:	1d3b      	adds	r3, r7, #4
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	605a      	str	r2, [r3, #4]
 8002786:	609a      	str	r2, [r3, #8]
 8002788:	60da      	str	r2, [r3, #12]
 800278a:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 800278c:	2004      	movs	r0, #4
 800278e:	f7ff ffda 	bl	8002746 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8002792:	2310      	movs	r3, #16
 8002794:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002796:	2301      	movs	r3, #1
 8002798:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 800279a:	2300      	movs	r3, #0
 800279c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800279e:	2303      	movs	r3, #3
 80027a0:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 80027a2:	1d3b      	adds	r3, r7, #4
 80027a4:	4619      	mov	r1, r3
 80027a6:	4812      	ldr	r0, [pc, #72]	@ (80027f0 <BSP_RADIO_Init+0x78>)
 80027a8:	f001 fa68 	bl	8003c7c <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 80027ac:	2320      	movs	r3, #32
 80027ae:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 80027b0:	1d3b      	adds	r3, r7, #4
 80027b2:	4619      	mov	r1, r3
 80027b4:	480e      	ldr	r0, [pc, #56]	@ (80027f0 <BSP_RADIO_Init+0x78>)
 80027b6:	f001 fa61 	bl	8003c7c <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 80027ba:	2308      	movs	r3, #8
 80027bc:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 80027be:	1d3b      	adds	r3, r7, #4
 80027c0:	4619      	mov	r1, r3
 80027c2:	480b      	ldr	r0, [pc, #44]	@ (80027f0 <BSP_RADIO_Init+0x78>)
 80027c4:	f001 fa5a 	bl	8003c7c <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80027c8:	2200      	movs	r2, #0
 80027ca:	2120      	movs	r1, #32
 80027cc:	4808      	ldr	r0, [pc, #32]	@ (80027f0 <BSP_RADIO_Init+0x78>)
 80027ce:	f001 fc83 	bl	80040d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80027d2:	2200      	movs	r2, #0
 80027d4:	2110      	movs	r1, #16
 80027d6:	4806      	ldr	r0, [pc, #24]	@ (80027f0 <BSP_RADIO_Init+0x78>)
 80027d8:	f001 fc7e 	bl	80040d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 80027dc:	2200      	movs	r2, #0
 80027de:	2108      	movs	r1, #8
 80027e0:	4803      	ldr	r0, [pc, #12]	@ (80027f0 <BSP_RADIO_Init+0x78>)
 80027e2:	f001 fc79 	bl	80040d8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3718      	adds	r7, #24
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	48000800 	.word	0x48000800

080027f4 <BSP_RADIO_DeInit>:
/**
  * @brief  DeInit Radio Switch
  * @retval BSP status
  */
int32_t BSP_RADIO_DeInit(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 80027f8:	2004      	movs	r0, #4
 80027fa:	f7ff ffa4 	bl	8002746 <LL_AHB2_GRP1_EnableClock>

  /* Turn off switch */
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80027fe:	2200      	movs	r2, #0
 8002800:	2110      	movs	r1, #16
 8002802:	480e      	ldr	r0, [pc, #56]	@ (800283c <BSP_RADIO_DeInit+0x48>)
 8002804:	f001 fc68 	bl	80040d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002808:	2200      	movs	r2, #0
 800280a:	2120      	movs	r1, #32
 800280c:	480b      	ldr	r0, [pc, #44]	@ (800283c <BSP_RADIO_DeInit+0x48>)
 800280e:	f001 fc63 	bl	80040d8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8002812:	2200      	movs	r2, #0
 8002814:	2108      	movs	r1, #8
 8002816:	4809      	ldr	r0, [pc, #36]	@ (800283c <BSP_RADIO_DeInit+0x48>)
 8002818:	f001 fc5e 	bl	80040d8 <HAL_GPIO_WritePin>
  
  /* DeInit the Radio Switch pin */
  HAL_GPIO_DeInit(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN);
 800281c:	2110      	movs	r1, #16
 800281e:	4807      	ldr	r0, [pc, #28]	@ (800283c <BSP_RADIO_DeInit+0x48>)
 8002820:	f001 fb8c 	bl	8003f3c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN);
 8002824:	2120      	movs	r1, #32
 8002826:	4805      	ldr	r0, [pc, #20]	@ (800283c <BSP_RADIO_DeInit+0x48>)
 8002828:	f001 fb88 	bl	8003f3c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN);
 800282c:	2108      	movs	r1, #8
 800282e:	4803      	ldr	r0, [pc, #12]	@ (800283c <BSP_RADIO_DeInit+0x48>)
 8002830:	f001 fb84 	bl	8003f3c <HAL_GPIO_DeInit>

  return BSP_ERROR_NONE;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	48000800 	.word	0x48000800

08002840 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 800284a:	79fb      	ldrb	r3, [r7, #7]
 800284c:	2b03      	cmp	r3, #3
 800284e:	d84b      	bhi.n	80028e8 <BSP_RADIO_ConfigRFSwitch+0xa8>
 8002850:	a201      	add	r2, pc, #4	@ (adr r2, 8002858 <BSP_RADIO_ConfigRFSwitch+0x18>)
 8002852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002856:	bf00      	nop
 8002858:	08002869 	.word	0x08002869
 800285c:	08002889 	.word	0x08002889
 8002860:	080028a9 	.word	0x080028a9
 8002864:	080028c9 	.word	0x080028c9
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8002868:	2200      	movs	r2, #0
 800286a:	2108      	movs	r1, #8
 800286c:	4821      	ldr	r0, [pc, #132]	@ (80028f4 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800286e:	f001 fc33 	bl	80040d8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8002872:	2200      	movs	r2, #0
 8002874:	2110      	movs	r1, #16
 8002876:	481f      	ldr	r0, [pc, #124]	@ (80028f4 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8002878:	f001 fc2e 	bl	80040d8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 800287c:	2200      	movs	r2, #0
 800287e:	2120      	movs	r1, #32
 8002880:	481c      	ldr	r0, [pc, #112]	@ (80028f4 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8002882:	f001 fc29 	bl	80040d8 <HAL_GPIO_WritePin>
      break;      
 8002886:	e030      	b.n	80028ea <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002888:	2201      	movs	r2, #1
 800288a:	2108      	movs	r1, #8
 800288c:	4819      	ldr	r0, [pc, #100]	@ (80028f4 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800288e:	f001 fc23 	bl	80040d8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002892:	2201      	movs	r2, #1
 8002894:	2110      	movs	r1, #16
 8002896:	4817      	ldr	r0, [pc, #92]	@ (80028f4 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8002898:	f001 fc1e 	bl	80040d8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 800289c:	2200      	movs	r2, #0
 800289e:	2120      	movs	r1, #32
 80028a0:	4814      	ldr	r0, [pc, #80]	@ (80028f4 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80028a2:	f001 fc19 	bl	80040d8 <HAL_GPIO_WritePin>
      break;
 80028a6:	e020      	b.n	80028ea <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 80028a8:	2201      	movs	r2, #1
 80028aa:	2108      	movs	r1, #8
 80028ac:	4811      	ldr	r0, [pc, #68]	@ (80028f4 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80028ae:	f001 fc13 	bl	80040d8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 80028b2:	2201      	movs	r2, #1
 80028b4:	2110      	movs	r1, #16
 80028b6:	480f      	ldr	r0, [pc, #60]	@ (80028f4 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80028b8:	f001 fc0e 	bl	80040d8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80028bc:	2201      	movs	r2, #1
 80028be:	2120      	movs	r1, #32
 80028c0:	480c      	ldr	r0, [pc, #48]	@ (80028f4 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80028c2:	f001 fc09 	bl	80040d8 <HAL_GPIO_WritePin>
      break;
 80028c6:	e010      	b.n	80028ea <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 80028c8:	2201      	movs	r2, #1
 80028ca:	2108      	movs	r1, #8
 80028cc:	4809      	ldr	r0, [pc, #36]	@ (80028f4 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80028ce:	f001 fc03 	bl	80040d8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80028d2:	2200      	movs	r2, #0
 80028d4:	2110      	movs	r1, #16
 80028d6:	4807      	ldr	r0, [pc, #28]	@ (80028f4 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80028d8:	f001 fbfe 	bl	80040d8 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80028dc:	2201      	movs	r2, #1
 80028de:	2120      	movs	r1, #32
 80028e0:	4804      	ldr	r0, [pc, #16]	@ (80028f4 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80028e2:	f001 fbf9 	bl	80040d8 <HAL_GPIO_WritePin>
      break;
 80028e6:	e000      	b.n	80028ea <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    default:
      break;    
 80028e8:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3708      	adds	r7, #8
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	48000800 	.word	0x48000800

080028f8 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_LP_HP;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	46bd      	mov	sp, r7
 8002902:	bc80      	pop	{r7}
 8002904:	4770      	bx	lr

08002906 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 8002906:	b480      	push	{r7}
 8002908:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 800290a:	2301      	movs	r3, #1
}
 800290c:	4618      	mov	r0, r3
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr

08002914 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 8002918:	2301      	movs	r3, #1
}
 800291a:	4618      	mov	r0, r3
 800291c:	46bd      	mov	sp, r7
 800291e:	bc80      	pop	{r7}
 8002920:	4770      	bx	lr

08002922 <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 8002922:	b480      	push	{r7}
 8002924:	b085      	sub	sp, #20
 8002926:	af00      	add	r7, sp, #0
 8002928:	4603      	mov	r3, r0
 800292a:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 800292c:	79fb      	ldrb	r3, [r7, #7]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d102      	bne.n	8002938 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8002932:	230f      	movs	r3, #15
 8002934:	60fb      	str	r3, [r7, #12]
 8002936:	e001      	b.n	800293c <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8002938:	2316      	movs	r3, #22
 800293a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800293c:	68fb      	ldr	r3, [r7, #12]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3714      	adds	r7, #20
 8002942:	46bd      	mov	sp, r7
 8002944:	bc80      	pop	{r7}
 8002946:	4770      	bx	lr

08002948 <LL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_DisableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGSleepMode(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800294c:	4b04      	ldr	r3, [pc, #16]	@ (8002960 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	4a03      	ldr	r2, [pc, #12]	@ (8002960 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002952:	f023 0301 	bic.w	r3, r3, #1
 8002956:	6053      	str	r3, [r2, #4]
}
 8002958:	bf00      	nop
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr
 8002960:	e0042000 	.word	0xe0042000

08002964 <LL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_DisableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStopMode(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002968:	4b04      	ldr	r3, [pc, #16]	@ (800297c <LL_DBGMCU_DisableDBGStopMode+0x18>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	4a03      	ldr	r2, [pc, #12]	@ (800297c <LL_DBGMCU_DisableDBGStopMode+0x18>)
 800296e:	f023 0302 	bic.w	r3, r3, #2
 8002972:	6053      	str	r3, [r2, #4]
}
 8002974:	bf00      	nop
 8002976:	46bd      	mov	sp, r7
 8002978:	bc80      	pop	{r7}
 800297a:	4770      	bx	lr
 800297c:	e0042000 	.word	0xe0042000

08002980 <LL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disable the Debug Module during STANDBY mode
  * @rmtoll DBGMCU_CR    DBG_STANDBY   LL_DBGMCU_DisableDBGStandbyMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStandbyMode(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002984:	4b04      	ldr	r3, [pc, #16]	@ (8002998 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	4a03      	ldr	r2, [pc, #12]	@ (8002998 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 800298a:	f023 0304 	bic.w	r3, r3, #4
 800298e:	6053      	str	r3, [r2, #4]
}
 8002990:	bf00      	nop
 8002992:	46bd      	mov	sp, r7
 8002994:	bc80      	pop	{r7}
 8002996:	4770      	bx	lr
 8002998:	e0042000 	.word	0xe0042000

0800299c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80029a2:	2300      	movs	r3, #0
 80029a4:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029a6:	2003      	movs	r0, #3
 80029a8:	f000 fd00 	bl	80033ac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80029ac:	f003 fbbe 	bl	800612c <HAL_RCC_GetHCLKFreq>
 80029b0:	4603      	mov	r3, r0
 80029b2:	4a09      	ldr	r2, [pc, #36]	@ (80029d8 <HAL_Init+0x3c>)
 80029b4:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029b6:	200f      	movs	r0, #15
 80029b8:	f7fe feb0 	bl	800171c <HAL_InitTick>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d002      	beq.n	80029c8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	71fb      	strb	r3, [r7, #7]
 80029c6:	e001      	b.n	80029cc <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80029c8:	f7fe fd3d 	bl	8001446 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80029cc:	79fb      	ldrb	r3, [r7, #7]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	20000070 	.word	0x20000070

080029dc <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80029e0:	4b04      	ldr	r3, [pc, #16]	@ (80029f4 <HAL_SuspendTick+0x18>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a03      	ldr	r2, [pc, #12]	@ (80029f4 <HAL_SuspendTick+0x18>)
 80029e6:	f023 0302 	bic.w	r3, r3, #2
 80029ea:	6013      	str	r3, [r2, #0]
}
 80029ec:	bf00      	nop
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bc80      	pop	{r7}
 80029f2:	4770      	bx	lr
 80029f4:	e000e010 	.word	0xe000e010

080029f8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80029fc:	4b04      	ldr	r3, [pc, #16]	@ (8002a10 <HAL_ResumeTick+0x18>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a03      	ldr	r2, [pc, #12]	@ (8002a10 <HAL_ResumeTick+0x18>)
 8002a02:	f043 0302 	orr.w	r3, r3, #2
 8002a06:	6013      	str	r3, [r2, #0]
}
 8002a08:	bf00      	nop
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc80      	pop	{r7}
 8002a0e:	4770      	bx	lr
 8002a10:	e000e010 	.word	0xe000e010

08002a14 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 8002a18:	f7ff ff96 	bl	8002948 <LL_DBGMCU_DisableDBGSleepMode>
}
 8002a1c:	bf00      	nop
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 8002a24:	f7ff ff9e 	bl	8002964 <LL_DBGMCU_DisableDBGStopMode>
}
 8002a28:	bf00      	nop
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8002a30:	f7ff ffa6 	bl	8002980 <LL_DBGMCU_DisableDBGStandbyMode>
}
 8002a34:	bf00      	nop
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	601a      	str	r2, [r3, #0]
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr

08002a5c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bc80      	pop	{r7}
 8002a74:	4770      	bx	lr

08002a76 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002a76:	b480      	push	{r7}
 8002a78:	b085      	sub	sp, #20
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	60f8      	str	r0, [r7, #12]
 8002a7e:	60b9      	str	r1, [r7, #8]
 8002a80:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	695a      	ldr	r2, [r3, #20]
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	2107      	movs	r1, #7
 8002a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a92:	43db      	mvns	r3, r3
 8002a94:	401a      	ands	r2, r3
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	f003 0304 	and.w	r3, r3, #4
 8002a9c:	6879      	ldr	r1, [r7, #4]
 8002a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002aa8:	bf00      	nop
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr

08002ab2 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b083      	sub	sp, #12
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
 8002aba:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	695a      	ldr	r2, [r3, #20]
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	f003 0304 	and.w	r3, r3, #4
 8002ac6:	2107      	movs	r1, #7
 8002ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8002acc:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bc80      	pop	{r7}
 8002ae0:	4770      	bx	lr

08002ae2 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b085      	sub	sp, #20
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	60f8      	str	r0, [r7, #12]
 8002aea:	60b9      	str	r1, [r7, #8]
 8002aec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	f003 031f 	and.w	r3, r3, #31
 8002af8:	210f      	movs	r1, #15
 8002afa:	fa01 f303 	lsl.w	r3, r1, r3
 8002afe:	43db      	mvns	r3, r3
 8002b00:	401a      	ands	r2, r3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	0e9b      	lsrs	r3, r3, #26
 8002b06:	f003 010f 	and.w	r1, r3, #15
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	f003 031f 	and.w	r3, r3, #31
 8002b10:	fa01 f303 	lsl.w	r3, r1, r3
 8002b14:	431a      	orrs	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002b1a:	bf00      	nop
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr

08002b24 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bc80      	pop	{r7}
 8002b46:	4770      	bx	lr

08002b48 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002b5c:	43db      	mvns	r3, r3
 8002b5e:	401a      	ands	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bc80      	pop	{r7}
 8002b6c:	4770      	bx	lr

08002b6e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b085      	sub	sp, #20
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	60f8      	str	r0, [r7, #12]
 8002b76:	60b9      	str	r1, [r7, #8]
 8002b78:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	695a      	ldr	r2, [r3, #20]
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	021b      	lsls	r3, r3, #8
 8002b82:	43db      	mvns	r3, r3
 8002b84:	401a      	ands	r2, r3
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	0219      	lsls	r1, r3, #8
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	400b      	ands	r3, r1
 8002b8e:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8002b92:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002b96:	431a      	orrs	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002b9c:	bf00      	nop
 8002b9e:	3714      	adds	r7, #20
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bc80      	pop	{r7}
 8002ba4:	4770      	bx	lr

08002ba6 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b083      	sub	sp, #12
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002bb6:	f023 0317 	bic.w	r3, r3, #23
 8002bba:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002bc2:	bf00      	nop
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bc80      	pop	{r7}
 8002bca:	4770      	bx	lr

08002bcc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bdc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002be0:	d101      	bne.n	8002be6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002be2:	2301      	movs	r3, #1
 8002be4:	e000      	b.n	8002be8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bc80      	pop	{r7}
 8002bf0:	4770      	bx	lr

08002bf2 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b083      	sub	sp, #12
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d101      	bne.n	8002c0a <LL_ADC_IsEnabled+0x18>
 8002c06:	2301      	movs	r3, #1
 8002c08:	e000      	b.n	8002c0c <LL_ADC_IsEnabled+0x1a>
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bc80      	pop	{r7}
 8002c14:	4770      	bx	lr

08002c16 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c16:	b480      	push	{r7}
 8002c18:	b083      	sub	sp, #12
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f003 0304 	and.w	r3, r3, #4
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	d101      	bne.n	8002c2e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e000      	b.n	8002c30 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c2e:	2300      	movs	r3, #0
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bc80      	pop	{r7}
 8002c38:	4770      	bx	lr
	...

08002c3c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b088      	sub	sp, #32
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c44:	2300      	movs	r3, #0
 8002c46:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002c50:	2300      	movs	r3, #0
 8002c52:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e17e      	b.n	8002f5c <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d109      	bne.n	8002c80 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f7fe fa7b 	bl	8001168 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7ff ffa1 	bl	8002bcc <LL_ADC_IsInternalRegulatorEnabled>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d115      	bne.n	8002cbc <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4618      	mov	r0, r3
 8002c96:	f7ff ff86 	bl	8002ba6 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c9a:	4b9e      	ldr	r3, [pc, #632]	@ (8002f14 <HAL_ADC_Init+0x2d8>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	099b      	lsrs	r3, r3, #6
 8002ca0:	4a9d      	ldr	r2, [pc, #628]	@ (8002f18 <HAL_ADC_Init+0x2dc>)
 8002ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca6:	099b      	lsrs	r3, r3, #6
 8002ca8:	3301      	adds	r3, #1
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002cae:	e002      	b.n	8002cb6 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1f9      	bne.n	8002cb0 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7ff ff83 	bl	8002bcc <LL_ADC_IsInternalRegulatorEnabled>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10d      	bne.n	8002ce8 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cd0:	f043 0210 	orr.w	r2, r3, #16
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cdc:	f043 0201 	orr.w	r2, r3, #1
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff ff92 	bl	8002c16 <LL_ADC_REG_IsConversionOngoing>
 8002cf2:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cf8:	f003 0310 	and.w	r3, r3, #16
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	f040 8124 	bne.w	8002f4a <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f040 8120 	bne.w	8002f4a <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d0e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002d12:	f043 0202 	orr.w	r2, r3, #2
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7ff ff67 	bl	8002bf2 <LL_ADC_IsEnabled>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f040 80a7 	bne.w	8002e7a <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	7e1b      	ldrb	r3, [r3, #24]
 8002d34:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002d36:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	7e5b      	ldrb	r3, [r3, #25]
 8002d3c:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002d3e:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	7e9b      	ldrb	r3, [r3, #26]
 8002d44:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002d46:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002d4c:	2a00      	cmp	r2, #0
 8002d4e:	d002      	beq.n	8002d56 <HAL_ADC_Init+0x11a>
 8002d50:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002d54:	e000      	b.n	8002d58 <HAL_ADC_Init+0x11c>
 8002d56:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002d58:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002d5e:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	da04      	bge.n	8002d72 <HAL_ADC_Init+0x136>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002d70:	e001      	b.n	8002d76 <HAL_ADC_Init+0x13a>
 8002d72:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                           |
 8002d76:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002d7e:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002d80:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d114      	bne.n	8002dbc <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	7e9b      	ldrb	r3, [r3, #26]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d104      	bne.n	8002da4 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002da0:	61bb      	str	r3, [r7, #24]
 8002da2:	e00b      	b.n	8002dbc <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002da8:	f043 0220 	orr.w	r2, r3, #32
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002db4:	f043 0201 	orr.w	r2, r3, #1
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d009      	beq.n	8002dd8 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc8:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	f423 33fe 	bic.w	r3, r3, #130048	@ 0x1fc00
 8002de2:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	6812      	ldr	r2, [r2, #0]
 8002dea:	69b9      	ldr	r1, [r7, #24]
 8002dec:	430b      	orrs	r3, r1
 8002dee:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d111      	bne.n	8002e32 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002e1a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002e20:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002e26:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	f043 0301 	orr.w	r3, r3, #1
 8002e30:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	691a      	ldr	r2, [r3, #16]
 8002e38:	4b38      	ldr	r3, [pc, #224]	@ (8002f1c <HAL_ADC_Init+0x2e0>)
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	6812      	ldr	r2, [r2, #0]
 8002e40:	6979      	ldr	r1, [r7, #20]
 8002e42:	430b      	orrs	r3, r1
 8002e44:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002e4e:	d014      	beq.n	8002e7a <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002e54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e58:	d00f      	beq.n	8002e7a <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002e5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002e62:	d00a      	beq.n	8002e7a <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8002e64:	4b2e      	ldr	r3, [pc, #184]	@ (8002f20 <HAL_ADC_Init+0x2e4>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002e74:	492a      	ldr	r1, [pc, #168]	@ (8002f20 <HAL_ADC_Init+0x2e4>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6818      	ldr	r0, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e82:	461a      	mov	r2, r3
 8002e84:	2100      	movs	r1, #0
 8002e86:	f7ff fdf6 	bl	8002a76 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6818      	ldr	r0, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e92:	461a      	mov	r2, r3
 8002e94:	4923      	ldr	r1, [pc, #140]	@ (8002f24 <HAL_ADC_Init+0x2e8>)
 8002e96:	f7ff fdee 	bl	8002a76 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d108      	bne.n	8002eb4 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f062 020f 	orn	r2, r2, #15
 8002eb0:	629a      	str	r2, [r3, #40]	@ 0x28
 8002eb2:	e017      	b.n	8002ee4 <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ebc:	d112      	bne.n	8002ee4 <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	69db      	ldr	r3, [r3, #28]
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	f003 031c 	and.w	r3, r3, #28
 8002ed0:	f06f 020f 	mvn.w	r2, #15
 8002ed4:	fa02 f103 	lsl.w	r1, r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	629a      	str	r2, [r3, #40]	@ 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2100      	movs	r1, #0
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7ff fde1 	bl	8002ab2 <LL_ADC_GetSamplingTimeCommonChannels>
 8002ef0:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d116      	bne.n	8002f28 <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f04:	f023 0303 	bic.w	r3, r3, #3
 8002f08:	f043 0201 	orr.w	r2, r3, #1
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	659a      	str	r2, [r3, #88]	@ 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002f10:	e023      	b.n	8002f5a <HAL_ADC_Init+0x31e>
 8002f12:	bf00      	nop
 8002f14:	20000070 	.word	0x20000070
 8002f18:	053e2d63 	.word	0x053e2d63
 8002f1c:	1ffffc02 	.word	0x1ffffc02
 8002f20:	40012708 	.word	0x40012708
 8002f24:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f2c:	f023 0312 	bic.w	r3, r3, #18
 8002f30:	f043 0210 	orr.w	r2, r3, #16
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f3c:	f043 0201 	orr.w	r2, r3, #1
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002f48:	e007      	b.n	8002f5a <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f4e:	f043 0210 	orr.w	r2, r3, #16
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8002f5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3720      	adds	r7, #32
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b088      	sub	sp, #32
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002f72:	2300      	movs	r3, #0
 8002f74:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d101      	bne.n	8002f8c <HAL_ADC_ConfigChannel+0x28>
 8002f88:	2302      	movs	r3, #2
 8002f8a:	e110      	b.n	80031ae <HAL_ADC_ConfigChannel+0x24a>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff fe3c 	bl	8002c16 <LL_ADC_REG_IsConversionOngoing>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f040 80f7 	bne.w	8003194 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	f000 80b1 	beq.w	8003112 <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002fb8:	d004      	beq.n	8002fc4 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002fbe:	4a7e      	ldr	r2, [pc, #504]	@ (80031b8 <HAL_ADC_ConfigChannel+0x254>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d108      	bne.n	8002fd6 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4619      	mov	r1, r3
 8002fce:	4610      	mov	r0, r2
 8002fd0:	f7ff fda8 	bl	8002b24 <LL_ADC_REG_SetSequencerChAdd>
 8002fd4:	e041      	b.n	800305a <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f003 031f 	and.w	r3, r3, #31
 8002fe2:	210f      	movs	r1, #15
 8002fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	401a      	ands	r2, r3
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d105      	bne.n	8003004 <HAL_ADC_ConfigChannel+0xa0>
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	0e9b      	lsrs	r3, r3, #26
 8002ffe:	f003 031f 	and.w	r3, r3, #31
 8003002:	e011      	b.n	8003028 <HAL_ADC_ConfigChannel+0xc4>
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	fa93 f3a3 	rbit	r3, r3
 8003010:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d101      	bne.n	8003020 <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 800301c:	2320      	movs	r3, #32
 800301e:	e003      	b.n	8003028 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	fab3 f383 	clz	r3, r3
 8003026:	b2db      	uxtb	r3, r3
 8003028:	6839      	ldr	r1, [r7, #0]
 800302a:	6849      	ldr	r1, [r1, #4]
 800302c:	f001 011f 	and.w	r1, r1, #31
 8003030:	408b      	lsls	r3, r1
 8003032:	431a      	orrs	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	089b      	lsrs	r3, r3, #2
 800303e:	1c5a      	adds	r2, r3, #1
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	69db      	ldr	r3, [r3, #28]
 8003044:	429a      	cmp	r2, r3
 8003046:	d808      	bhi.n	800305a <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6818      	ldr	r0, [r3, #0]
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	6859      	ldr	r1, [r3, #4]
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	461a      	mov	r2, r3
 8003056:	f7ff fd44 	bl	8002ae2 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6818      	ldr	r0, [r3, #0]
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	6819      	ldr	r1, [r3, #0]
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	461a      	mov	r2, r3
 8003068:	f7ff fd81 	bl	8002b6e <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2b00      	cmp	r3, #0
 8003072:	f280 8097 	bge.w	80031a4 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003076:	4851      	ldr	r0, [pc, #324]	@ (80031bc <HAL_ADC_ConfigChannel+0x258>)
 8003078:	f7ff fcf0 	bl	8002a5c <LL_ADC_GetCommonPathInternalCh>
 800307c:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a4f      	ldr	r2, [pc, #316]	@ (80031c0 <HAL_ADC_ConfigChannel+0x25c>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d120      	bne.n	80030ca <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800308e:	2b00      	cmp	r3, #0
 8003090:	d11b      	bne.n	80030ca <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003098:	4619      	mov	r1, r3
 800309a:	4848      	ldr	r0, [pc, #288]	@ (80031bc <HAL_ADC_ConfigChannel+0x258>)
 800309c:	f7ff fccc 	bl	8002a38 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030a0:	4b48      	ldr	r3, [pc, #288]	@ (80031c4 <HAL_ADC_ConfigChannel+0x260>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	099b      	lsrs	r3, r3, #6
 80030a6:	4a48      	ldr	r2, [pc, #288]	@ (80031c8 <HAL_ADC_ConfigChannel+0x264>)
 80030a8:	fba2 2303 	umull	r2, r3, r2, r3
 80030ac:	099b      	lsrs	r3, r3, #6
 80030ae:	1c5a      	adds	r2, r3, #1
 80030b0:	4613      	mov	r3, r2
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	4413      	add	r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80030ba:	e002      	b.n	80030c2 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	3b01      	subs	r3, #1
 80030c0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1f9      	bne.n	80030bc <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80030c8:	e06c      	b.n	80031a4 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a3f      	ldr	r2, [pc, #252]	@ (80031cc <HAL_ADC_ConfigChannel+0x268>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d10c      	bne.n	80030ee <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d107      	bne.n	80030ee <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030e4:	4619      	mov	r1, r3
 80030e6:	4835      	ldr	r0, [pc, #212]	@ (80031bc <HAL_ADC_ConfigChannel+0x258>)
 80030e8:	f7ff fca6 	bl	8002a38 <LL_ADC_SetCommonPathInternalCh>
 80030ec:	e05a      	b.n	80031a4 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a37      	ldr	r2, [pc, #220]	@ (80031d0 <HAL_ADC_ConfigChannel+0x26c>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d155      	bne.n	80031a4 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d150      	bne.n	80031a4 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003108:	4619      	mov	r1, r3
 800310a:	482c      	ldr	r0, [pc, #176]	@ (80031bc <HAL_ADC_ConfigChannel+0x258>)
 800310c:	f7ff fc94 	bl	8002a38 <LL_ADC_SetCommonPathInternalCh>
 8003110:	e048      	b.n	80031a4 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800311a:	d004      	beq.n	8003126 <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003120:	4a25      	ldr	r2, [pc, #148]	@ (80031b8 <HAL_ADC_ConfigChannel+0x254>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d107      	bne.n	8003136 <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4619      	mov	r1, r3
 8003130:	4610      	mov	r0, r2
 8003132:	f7ff fd09 	bl	8002b48 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2b00      	cmp	r3, #0
 800313c:	da32      	bge.n	80031a4 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800313e:	481f      	ldr	r0, [pc, #124]	@ (80031bc <HAL_ADC_ConfigChannel+0x258>)
 8003140:	f7ff fc8c 	bl	8002a5c <LL_ADC_GetCommonPathInternalCh>
 8003144:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a1d      	ldr	r2, [pc, #116]	@ (80031c0 <HAL_ADC_ConfigChannel+0x25c>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d107      	bne.n	8003160 <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003156:	4619      	mov	r1, r3
 8003158:	4818      	ldr	r0, [pc, #96]	@ (80031bc <HAL_ADC_ConfigChannel+0x258>)
 800315a:	f7ff fc6d 	bl	8002a38 <LL_ADC_SetCommonPathInternalCh>
 800315e:	e021      	b.n	80031a4 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a19      	ldr	r2, [pc, #100]	@ (80031cc <HAL_ADC_ConfigChannel+0x268>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d107      	bne.n	800317a <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003170:	4619      	mov	r1, r3
 8003172:	4812      	ldr	r0, [pc, #72]	@ (80031bc <HAL_ADC_ConfigChannel+0x258>)
 8003174:	f7ff fc60 	bl	8002a38 <LL_ADC_SetCommonPathInternalCh>
 8003178:	e014      	b.n	80031a4 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a14      	ldr	r2, [pc, #80]	@ (80031d0 <HAL_ADC_ConfigChannel+0x26c>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d10f      	bne.n	80031a4 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800318a:	4619      	mov	r1, r3
 800318c:	480b      	ldr	r0, [pc, #44]	@ (80031bc <HAL_ADC_ConfigChannel+0x258>)
 800318e:	f7ff fc53 	bl	8002a38 <LL_ADC_SetCommonPathInternalCh>
 8003192:	e007      	b.n	80031a4 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003198:	f043 0220 	orr.w	r2, r3, #32
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 80031ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3720      	adds	r7, #32
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	80000004 	.word	0x80000004
 80031bc:	40012708 	.word	0x40012708
 80031c0:	b0001000 	.word	0xb0001000
 80031c4:	20000070 	.word	0x20000070
 80031c8:	053e2d63 	.word	0x053e2d63
 80031cc:	b8004000 	.word	0xb8004000
 80031d0:	b4002000 	.word	0xb4002000

080031d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f003 0307 	and.w	r3, r3, #7
 80031e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003218 <__NVIC_SetPriorityGrouping+0x44>)
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031f0:	4013      	ands	r3, r2
 80031f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003200:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003204:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003206:	4a04      	ldr	r2, [pc, #16]	@ (8003218 <__NVIC_SetPriorityGrouping+0x44>)
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	60d3      	str	r3, [r2, #12]
}
 800320c:	bf00      	nop
 800320e:	3714      	adds	r7, #20
 8003210:	46bd      	mov	sp, r7
 8003212:	bc80      	pop	{r7}
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	e000ed00 	.word	0xe000ed00

0800321c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003220:	4b04      	ldr	r3, [pc, #16]	@ (8003234 <__NVIC_GetPriorityGrouping+0x18>)
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	0a1b      	lsrs	r3, r3, #8
 8003226:	f003 0307 	and.w	r3, r3, #7
}
 800322a:	4618      	mov	r0, r3
 800322c:	46bd      	mov	sp, r7
 800322e:	bc80      	pop	{r7}
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	e000ed00 	.word	0xe000ed00

08003238 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	4603      	mov	r3, r0
 8003240:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003246:	2b00      	cmp	r3, #0
 8003248:	db0b      	blt.n	8003262 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800324a:	79fb      	ldrb	r3, [r7, #7]
 800324c:	f003 021f 	and.w	r2, r3, #31
 8003250:	4906      	ldr	r1, [pc, #24]	@ (800326c <__NVIC_EnableIRQ+0x34>)
 8003252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003256:	095b      	lsrs	r3, r3, #5
 8003258:	2001      	movs	r0, #1
 800325a:	fa00 f202 	lsl.w	r2, r0, r2
 800325e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003262:	bf00      	nop
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	bc80      	pop	{r7}
 800326a:	4770      	bx	lr
 800326c:	e000e100 	.word	0xe000e100

08003270 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	4603      	mov	r3, r0
 8003278:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800327a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800327e:	2b00      	cmp	r3, #0
 8003280:	db12      	blt.n	80032a8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003282:	79fb      	ldrb	r3, [r7, #7]
 8003284:	f003 021f 	and.w	r2, r3, #31
 8003288:	490a      	ldr	r1, [pc, #40]	@ (80032b4 <__NVIC_DisableIRQ+0x44>)
 800328a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328e:	095b      	lsrs	r3, r3, #5
 8003290:	2001      	movs	r0, #1
 8003292:	fa00 f202 	lsl.w	r2, r0, r2
 8003296:	3320      	adds	r3, #32
 8003298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800329c:	f3bf 8f4f 	dsb	sy
}
 80032a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80032a2:	f3bf 8f6f 	isb	sy
}
 80032a6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bc80      	pop	{r7}
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	e000e100 	.word	0xe000e100

080032b8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	4603      	mov	r3, r0
 80032c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	db0c      	blt.n	80032e4 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032ca:	79fb      	ldrb	r3, [r7, #7]
 80032cc:	f003 021f 	and.w	r2, r3, #31
 80032d0:	4907      	ldr	r1, [pc, #28]	@ (80032f0 <__NVIC_ClearPendingIRQ+0x38>)
 80032d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d6:	095b      	lsrs	r3, r3, #5
 80032d8:	2001      	movs	r0, #1
 80032da:	fa00 f202 	lsl.w	r2, r0, r2
 80032de:	3360      	adds	r3, #96	@ 0x60
 80032e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bc80      	pop	{r7}
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	e000e100 	.word	0xe000e100

080032f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	4603      	mov	r3, r0
 80032fc:	6039      	str	r1, [r7, #0]
 80032fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003304:	2b00      	cmp	r3, #0
 8003306:	db0a      	blt.n	800331e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	b2da      	uxtb	r2, r3
 800330c:	490c      	ldr	r1, [pc, #48]	@ (8003340 <__NVIC_SetPriority+0x4c>)
 800330e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003312:	0112      	lsls	r2, r2, #4
 8003314:	b2d2      	uxtb	r2, r2
 8003316:	440b      	add	r3, r1
 8003318:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800331c:	e00a      	b.n	8003334 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	b2da      	uxtb	r2, r3
 8003322:	4908      	ldr	r1, [pc, #32]	@ (8003344 <__NVIC_SetPriority+0x50>)
 8003324:	79fb      	ldrb	r3, [r7, #7]
 8003326:	f003 030f 	and.w	r3, r3, #15
 800332a:	3b04      	subs	r3, #4
 800332c:	0112      	lsls	r2, r2, #4
 800332e:	b2d2      	uxtb	r2, r2
 8003330:	440b      	add	r3, r1
 8003332:	761a      	strb	r2, [r3, #24]
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	bc80      	pop	{r7}
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	e000e100 	.word	0xe000e100
 8003344:	e000ed00 	.word	0xe000ed00

08003348 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003348:	b480      	push	{r7}
 800334a:	b089      	sub	sp, #36	@ 0x24
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f003 0307 	and.w	r3, r3, #7
 800335a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	f1c3 0307 	rsb	r3, r3, #7
 8003362:	2b04      	cmp	r3, #4
 8003364:	bf28      	it	cs
 8003366:	2304      	movcs	r3, #4
 8003368:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	3304      	adds	r3, #4
 800336e:	2b06      	cmp	r3, #6
 8003370:	d902      	bls.n	8003378 <NVIC_EncodePriority+0x30>
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	3b03      	subs	r3, #3
 8003376:	e000      	b.n	800337a <NVIC_EncodePriority+0x32>
 8003378:	2300      	movs	r3, #0
 800337a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800337c:	f04f 32ff 	mov.w	r2, #4294967295
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	fa02 f303 	lsl.w	r3, r2, r3
 8003386:	43da      	mvns	r2, r3
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	401a      	ands	r2, r3
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003390:	f04f 31ff 	mov.w	r1, #4294967295
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	fa01 f303 	lsl.w	r3, r1, r3
 800339a:	43d9      	mvns	r1, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033a0:	4313      	orrs	r3, r2
         );
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3724      	adds	r7, #36	@ 0x24
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bc80      	pop	{r7}
 80033aa:	4770      	bx	lr

080033ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f7ff ff0d 	bl	80031d4 <__NVIC_SetPriorityGrouping>
}
 80033ba:	bf00      	nop
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b086      	sub	sp, #24
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	4603      	mov	r3, r0
 80033ca:	60b9      	str	r1, [r7, #8]
 80033cc:	607a      	str	r2, [r7, #4]
 80033ce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80033d0:	f7ff ff24 	bl	800321c <__NVIC_GetPriorityGrouping>
 80033d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	68b9      	ldr	r1, [r7, #8]
 80033da:	6978      	ldr	r0, [r7, #20]
 80033dc:	f7ff ffb4 	bl	8003348 <NVIC_EncodePriority>
 80033e0:	4602      	mov	r2, r0
 80033e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033e6:	4611      	mov	r1, r2
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7ff ff83 	bl	80032f4 <__NVIC_SetPriority>
}
 80033ee:	bf00      	nop
 80033f0:	3718      	adds	r7, #24
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b082      	sub	sp, #8
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	4603      	mov	r3, r0
 80033fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff ff17 	bl	8003238 <__NVIC_EnableIRQ>
}
 800340a:	bf00      	nop
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b082      	sub	sp, #8
 8003416:	af00      	add	r7, sp, #0
 8003418:	4603      	mov	r3, r0
 800341a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800341c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003420:	4618      	mov	r0, r3
 8003422:	f7ff ff25 	bl	8003270 <__NVIC_DisableIRQ>
}
 8003426:	bf00      	nop
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <HAL_NVIC_ClearPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b082      	sub	sp, #8
 8003432:	af00      	add	r7, sp, #0
 8003434:	4603      	mov	r3, r0
 8003436:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff ff3b 	bl	80032b8 <__NVIC_ClearPendingIRQ>
}
 8003442:	bf00      	nop
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
	...

0800344c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e08e      	b.n	800357c <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	461a      	mov	r2, r3
 8003464:	4b47      	ldr	r3, [pc, #284]	@ (8003584 <HAL_DMA_Init+0x138>)
 8003466:	429a      	cmp	r2, r3
 8003468:	d80f      	bhi.n	800348a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	461a      	mov	r2, r3
 8003470:	4b45      	ldr	r3, [pc, #276]	@ (8003588 <HAL_DMA_Init+0x13c>)
 8003472:	4413      	add	r3, r2
 8003474:	4a45      	ldr	r2, [pc, #276]	@ (800358c <HAL_DMA_Init+0x140>)
 8003476:	fba2 2303 	umull	r2, r3, r2, r3
 800347a:	091b      	lsrs	r3, r3, #4
 800347c:	009a      	lsls	r2, r3, #2
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a42      	ldr	r2, [pc, #264]	@ (8003590 <HAL_DMA_Init+0x144>)
 8003486:	641a      	str	r2, [r3, #64]	@ 0x40
 8003488:	e00e      	b.n	80034a8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	461a      	mov	r2, r3
 8003490:	4b40      	ldr	r3, [pc, #256]	@ (8003594 <HAL_DMA_Init+0x148>)
 8003492:	4413      	add	r3, r2
 8003494:	4a3d      	ldr	r2, [pc, #244]	@ (800358c <HAL_DMA_Init+0x140>)
 8003496:	fba2 2303 	umull	r2, r3, r2, r3
 800349a:	091b      	lsrs	r3, r3, #4
 800349c:	009a      	lsls	r2, r3, #2
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a3c      	ldr	r2, [pc, #240]	@ (8003598 <HAL_DMA_Init+0x14c>)
 80034a6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2202      	movs	r2, #2
 80034ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	6812      	ldr	r2, [r2, #0]
 80034ba:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80034be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034c2:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6819      	ldr	r1, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	689a      	ldr	r2, [r3, #8]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	431a      	orrs	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	431a      	orrs	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	431a      	orrs	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	431a      	orrs	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	431a      	orrs	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a1b      	ldr	r3, [r3, #32]
 80034f0:	431a      	orrs	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 fb52 	bl	8003ba4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003508:	d102      	bne.n	8003510 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685a      	ldr	r2, [r3, #4]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003518:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800351c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003526:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d010      	beq.n	8003552 <HAL_DMA_Init+0x106>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	2b04      	cmp	r3, #4
 8003536:	d80c      	bhi.n	8003552 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 fb7b 	bl	8003c34 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003542:	2200      	movs	r2, #0
 8003544:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800354e:	605a      	str	r2, [r3, #4]
 8003550:	e008      	b.n	8003564 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3708      	adds	r7, #8
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	40020407 	.word	0x40020407
 8003588:	bffdfff8 	.word	0xbffdfff8
 800358c:	cccccccd 	.word	0xcccccccd
 8003590:	40020000 	.word	0x40020000
 8003594:	bffdfbf8 	.word	0xbffdfbf8
 8003598:	40020400 	.word	0x40020400

0800359c <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e07b      	b.n	80036a6 <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 0201 	bic.w	r2, r2, #1
 80035bc:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	461a      	mov	r2, r3
 80035c4:	4b3a      	ldr	r3, [pc, #232]	@ (80036b0 <HAL_DMA_DeInit+0x114>)
 80035c6:	429a      	cmp	r2, r3
 80035c8:	d80f      	bhi.n	80035ea <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	461a      	mov	r2, r3
 80035d0:	4b38      	ldr	r3, [pc, #224]	@ (80036b4 <HAL_DMA_DeInit+0x118>)
 80035d2:	4413      	add	r3, r2
 80035d4:	4a38      	ldr	r2, [pc, #224]	@ (80036b8 <HAL_DMA_DeInit+0x11c>)
 80035d6:	fba2 2303 	umull	r2, r3, r2, r3
 80035da:	091b      	lsrs	r3, r3, #4
 80035dc:	009a      	lsls	r2, r3, #2
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a35      	ldr	r2, [pc, #212]	@ (80036bc <HAL_DMA_DeInit+0x120>)
 80035e6:	641a      	str	r2, [r3, #64]	@ 0x40
 80035e8:	e00e      	b.n	8003608 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	461a      	mov	r2, r3
 80035f0:	4b33      	ldr	r3, [pc, #204]	@ (80036c0 <HAL_DMA_DeInit+0x124>)
 80035f2:	4413      	add	r3, r2
 80035f4:	4a30      	ldr	r2, [pc, #192]	@ (80036b8 <HAL_DMA_DeInit+0x11c>)
 80035f6:	fba2 2303 	umull	r2, r3, r2, r3
 80035fa:	091b      	lsrs	r3, r3, #4
 80035fc:	009a      	lsls	r2, r3, #2
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a2f      	ldr	r2, [pc, #188]	@ (80036c4 <HAL_DMA_DeInit+0x128>)
 8003606:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2200      	movs	r2, #0
 800360e:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003614:	f003 021c 	and.w	r2, r3, #28
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361c:	2101      	movs	r1, #1
 800361e:	fa01 f202 	lsl.w	r2, r1, r2
 8003622:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 fabd 	bl	8003ba4 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800362e:	2200      	movs	r2, #0
 8003630:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800363a:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00f      	beq.n	8003664 <HAL_DMA_DeInit+0xc8>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	2b04      	cmp	r3, #4
 800364a:	d80b      	bhi.n	8003664 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 faf1 	bl	8003c34 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003656:	2200      	movs	r2, #0
 8003658:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003662:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3708      	adds	r7, #8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	40020407 	.word	0x40020407
 80036b4:	bffdfff8 	.word	0xbffdfff8
 80036b8:	cccccccd 	.word	0xcccccccd
 80036bc:	40020000 	.word	0x40020000
 80036c0:	bffdfbf8 	.word	0xbffdfbf8
 80036c4:	40020400 	.word	0x40020400

080036c8 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
 80036d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036d6:	2300      	movs	r3, #0
 80036d8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d101      	bne.n	80036e8 <HAL_DMA_Start_IT+0x20>
 80036e4:	2302      	movs	r3, #2
 80036e6:	e069      	b.n	80037bc <HAL_DMA_Start_IT+0xf4>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d155      	bne.n	80037a8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2202      	movs	r2, #2
 8003700:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 0201 	bic.w	r2, r2, #1
 8003718:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	68b9      	ldr	r1, [r7, #8]
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f000 fa02 	bl	8003b2a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800372a:	2b00      	cmp	r3, #0
 800372c:	d008      	beq.n	8003740 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f042 020e 	orr.w	r2, r2, #14
 800373c:	601a      	str	r2, [r3, #0]
 800373e:	e00f      	b.n	8003760 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 0204 	bic.w	r2, r2, #4
 800374e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f042 020a 	orr.w	r2, r2, #10
 800375e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d007      	beq.n	800377e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003778:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800377c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003782:	2b00      	cmp	r3, #0
 8003784:	d007      	beq.n	8003796 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003790:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003794:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f042 0201 	orr.w	r2, r2, #1
 80037a4:	601a      	str	r2, [r3, #0]
 80037a6:	e008      	b.n	80037ba <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2280      	movs	r2, #128	@ 0x80
 80037ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80037ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3718      	adds	r7, #24
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e04f      	b.n	8003876 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d008      	beq.n	80037f4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2204      	movs	r2, #4
 80037e6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e040      	b.n	8003876 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 020e 	bic.w	r2, r2, #14
 8003802:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800380e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003812:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f022 0201 	bic.w	r2, r2, #1
 8003822:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003828:	f003 021c 	and.w	r2, r3, #28
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003830:	2101      	movs	r1, #1
 8003832:	fa01 f202 	lsl.w	r2, r1, r2
 8003836:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003840:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00c      	beq.n	8003864 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003854:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003858:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003862:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	bc80      	pop	{r7}
 800387e:	4770      	bx	lr

08003880 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003888:	2300      	movs	r3, #0
 800388a:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2b02      	cmp	r3, #2
 8003896:	d005      	beq.n	80038a4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2204      	movs	r2, #4
 800389c:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	73fb      	strb	r3, [r7, #15]
 80038a2:	e047      	b.n	8003934 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f022 020e 	bic.w	r2, r2, #14
 80038b2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 0201 	bic.w	r2, r2, #1
 80038c2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038ce:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d8:	f003 021c 	and.w	r2, r3, #28
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e0:	2101      	movs	r1, #1
 80038e2:	fa01 f202 	lsl.w	r2, r1, r2
 80038e6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80038f0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00c      	beq.n	8003914 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003904:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003908:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003912:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003928:	2b00      	cmp	r3, #0
 800392a:	d003      	beq.n	8003934 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	4798      	blx	r3
    }
  }
  return status;
 8003934:	7bfb      	ldrb	r3, [r7, #15]
}
 8003936:	4618      	mov	r0, r3
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
	...

08003940 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800395c:	f003 031c 	and.w	r3, r3, #28
 8003960:	2204      	movs	r2, #4
 8003962:	409a      	lsls	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	4013      	ands	r3, r2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d027      	beq.n	80039bc <HAL_DMA_IRQHandler+0x7c>
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	f003 0304 	and.w	r3, r3, #4
 8003972:	2b00      	cmp	r3, #0
 8003974:	d022      	beq.n	80039bc <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0320 	and.w	r3, r3, #32
 8003980:	2b00      	cmp	r3, #0
 8003982:	d107      	bne.n	8003994 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f022 0204 	bic.w	r2, r2, #4
 8003992:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003998:	f003 021c 	and.w	r2, r3, #28
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a0:	2104      	movs	r1, #4
 80039a2:	fa01 f202 	lsl.w	r2, r1, r2
 80039a6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f000 8081 	beq.w	8003ab4 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80039ba:	e07b      	b.n	8003ab4 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039c0:	f003 031c 	and.w	r3, r3, #28
 80039c4:	2202      	movs	r2, #2
 80039c6:	409a      	lsls	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	4013      	ands	r3, r2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d03d      	beq.n	8003a4c <HAL_DMA_IRQHandler+0x10c>
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d038      	beq.n	8003a4c <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0320 	and.w	r3, r3, #32
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d10b      	bne.n	8003a00 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f022 020a 	bic.w	r2, r2, #10
 80039f6:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	461a      	mov	r2, r3
 8003a06:	4b2e      	ldr	r3, [pc, #184]	@ (8003ac0 <HAL_DMA_IRQHandler+0x180>)
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d909      	bls.n	8003a20 <HAL_DMA_IRQHandler+0xe0>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a10:	f003 031c 	and.w	r3, r3, #28
 8003a14:	4a2b      	ldr	r2, [pc, #172]	@ (8003ac4 <HAL_DMA_IRQHandler+0x184>)
 8003a16:	2102      	movs	r1, #2
 8003a18:	fa01 f303 	lsl.w	r3, r1, r3
 8003a1c:	6053      	str	r3, [r2, #4]
 8003a1e:	e008      	b.n	8003a32 <HAL_DMA_IRQHandler+0xf2>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a24:	f003 031c 	and.w	r3, r3, #28
 8003a28:	4a27      	ldr	r2, [pc, #156]	@ (8003ac8 <HAL_DMA_IRQHandler+0x188>)
 8003a2a:	2102      	movs	r1, #2
 8003a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a30:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if (hdma->XferCpltCallback != NULL)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d038      	beq.n	8003ab4 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003a4a:	e033      	b.n	8003ab4 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a50:	f003 031c 	and.w	r3, r3, #28
 8003a54:	2208      	movs	r2, #8
 8003a56:	409a      	lsls	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d02a      	beq.n	8003ab6 <HAL_DMA_IRQHandler+0x176>
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	f003 0308 	and.w	r3, r3, #8
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d025      	beq.n	8003ab6 <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 020e 	bic.w	r2, r2, #14
 8003a78:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a7e:	f003 021c 	and.w	r2, r3, #28
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a86:	2101      	movs	r1, #1
 8003a88:	fa01 f202 	lsl.w	r2, r1, r2
 8003a8c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2201      	movs	r2, #1
 8003a92:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d004      	beq.n	8003ab6 <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003ab4:	bf00      	nop
 8003ab6:	bf00      	nop
}
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	40020080 	.word	0x40020080
 8003ac4:	40020400 	.word	0x40020400
 8003ac8:	40020000 	.word	0x40020000

08003acc <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d103      	bne.n	8003ae8 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	72fb      	strb	r3, [r7, #11]
    return status;
 8003ae4:	7afb      	ldrb	r3, [r7, #11]
 8003ae6:	e01b      	b.n	8003b20 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	f003 0310 	and.w	r3, r3, #16
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00d      	beq.n	8003b16 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d004      	beq.n	8003b0e <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b0a:	60fb      	str	r3, [r7, #12]
 8003b0c:	e003      	b.n	8003b16 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003b14:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	601a      	str	r2, [r3, #0]

  return status;
 8003b1e:	7afb      	ldrb	r3, [r7, #11]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3714      	adds	r7, #20
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bc80      	pop	{r7}
 8003b28:	4770      	bx	lr

08003b2a <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b085      	sub	sp, #20
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	60f8      	str	r0, [r7, #12]
 8003b32:	60b9      	str	r1, [r7, #8]
 8003b34:	607a      	str	r2, [r7, #4]
 8003b36:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003b40:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d004      	beq.n	8003b54 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003b52:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b58:	f003 021c 	and.w	r2, r3, #28
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b60:	2101      	movs	r1, #1
 8003b62:	fa01 f202 	lsl.w	r2, r1, r2
 8003b66:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	683a      	ldr	r2, [r7, #0]
 8003b6e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	2b10      	cmp	r3, #16
 8003b76:	d108      	bne.n	8003b8a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68ba      	ldr	r2, [r7, #8]
 8003b86:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003b88:	e007      	b.n	8003b9a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68ba      	ldr	r2, [r7, #8]
 8003b90:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	60da      	str	r2, [r3, #12]
}
 8003b9a:	bf00      	nop
 8003b9c:	3714      	adds	r7, #20
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bc80      	pop	{r7}
 8003ba2:	4770      	bx	lr

08003ba4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	4b1c      	ldr	r3, [pc, #112]	@ (8003c24 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d813      	bhi.n	8003be0 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bbc:	089b      	lsrs	r3, r3, #2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003bc4:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	3b08      	subs	r3, #8
 8003bd4:	4a14      	ldr	r2, [pc, #80]	@ (8003c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8003bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bda:	091b      	lsrs	r3, r3, #4
 8003bdc:	60fb      	str	r3, [r7, #12]
 8003bde:	e011      	b.n	8003c04 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003be4:	089b      	lsrs	r3, r3, #2
 8003be6:	009a      	lsls	r2, r3, #2
 8003be8:	4b10      	ldr	r3, [pc, #64]	@ (8003c2c <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8003bea:	4413      	add	r3, r2
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	3b08      	subs	r3, #8
 8003bf8:	4a0b      	ldr	r2, [pc, #44]	@ (8003c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8003bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfe:	091b      	lsrs	r3, r3, #4
 8003c00:	3307      	adds	r3, #7
 8003c02:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a0a      	ldr	r2, [pc, #40]	@ (8003c30 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8003c08:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f003 031f 	and.w	r3, r3, #31
 8003c10:	2201      	movs	r2, #1
 8003c12:	409a      	lsls	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003c18:	bf00      	nop
 8003c1a:	3714      	adds	r7, #20
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bc80      	pop	{r7}
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	40020407 	.word	0x40020407
 8003c28:	cccccccd 	.word	0xcccccccd
 8003c2c:	4002081c 	.word	0x4002081c
 8003c30:	40020880 	.word	0x40020880

08003c34 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c44:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	4b0a      	ldr	r3, [pc, #40]	@ (8003c74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003c4a:	4413      	add	r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	461a      	mov	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a08      	ldr	r2, [pc, #32]	@ (8003c78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003c58:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	f003 0303 	and.w	r3, r3, #3
 8003c62:	2201      	movs	r2, #1
 8003c64:	409a      	lsls	r2, r3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003c6a:	bf00      	nop
 8003c6c:	3714      	adds	r7, #20
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bc80      	pop	{r7}
 8003c72:	4770      	bx	lr
 8003c74:	1000823f 	.word	0x1000823f
 8003c78:	40020940 	.word	0x40020940

08003c7c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b087      	sub	sp, #28
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c86:	2300      	movs	r3, #0
 8003c88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c8a:	e140      	b.n	8003f0e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	2101      	movs	r1, #1
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	fa01 f303 	lsl.w	r3, r1, r3
 8003c98:	4013      	ands	r3, r2
 8003c9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f000 8132 	beq.w	8003f08 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f003 0303 	and.w	r3, r3, #3
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d005      	beq.n	8003cbc <HAL_GPIO_Init+0x40>
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f003 0303 	and.w	r3, r3, #3
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d130      	bne.n	8003d1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	2203      	movs	r2, #3
 8003cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ccc:	43db      	mvns	r3, r3
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	68da      	ldr	r2, [r3, #12]
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfa:	43db      	mvns	r3, r3
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	091b      	lsrs	r3, r3, #4
 8003d08:	f003 0201 	and.w	r2, r3, #1
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f003 0303 	and.w	r3, r3, #3
 8003d26:	2b03      	cmp	r3, #3
 8003d28:	d017      	beq.n	8003d5a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	2203      	movs	r2, #3
 8003d36:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3a:	43db      	mvns	r3, r3
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	689a      	ldr	r2, [r3, #8]
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	005b      	lsls	r3, r3, #1
 8003d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f003 0303 	and.w	r3, r3, #3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d123      	bne.n	8003dae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	08da      	lsrs	r2, r3, #3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	3208      	adds	r2, #8
 8003d6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	f003 0307 	and.w	r3, r3, #7
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	220f      	movs	r2, #15
 8003d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d82:	43db      	mvns	r3, r3
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	4013      	ands	r3, r2
 8003d88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	691a      	ldr	r2, [r3, #16]
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	f003 0307 	and.w	r3, r3, #7
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	08da      	lsrs	r2, r3, #3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	3208      	adds	r2, #8
 8003da8:	6939      	ldr	r1, [r7, #16]
 8003daa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	2203      	movs	r2, #3
 8003dba:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbe:	43db      	mvns	r3, r3
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f003 0203 	and.w	r2, r3, #3
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	005b      	lsls	r3, r3, #1
 8003dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f000 808c 	beq.w	8003f08 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003df0:	4a4e      	ldr	r2, [pc, #312]	@ (8003f2c <HAL_GPIO_Init+0x2b0>)
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	089b      	lsrs	r3, r3, #2
 8003df6:	3302      	adds	r3, #2
 8003df8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	f003 0303 	and.w	r3, r3, #3
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	2207      	movs	r2, #7
 8003e08:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0c:	43db      	mvns	r3, r3
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	4013      	ands	r3, r2
 8003e12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003e1a:	d00d      	beq.n	8003e38 <HAL_GPIO_Init+0x1bc>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a44      	ldr	r2, [pc, #272]	@ (8003f30 <HAL_GPIO_Init+0x2b4>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d007      	beq.n	8003e34 <HAL_GPIO_Init+0x1b8>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a43      	ldr	r2, [pc, #268]	@ (8003f34 <HAL_GPIO_Init+0x2b8>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d101      	bne.n	8003e30 <HAL_GPIO_Init+0x1b4>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	e004      	b.n	8003e3a <HAL_GPIO_Init+0x1be>
 8003e30:	2307      	movs	r3, #7
 8003e32:	e002      	b.n	8003e3a <HAL_GPIO_Init+0x1be>
 8003e34:	2301      	movs	r3, #1
 8003e36:	e000      	b.n	8003e3a <HAL_GPIO_Init+0x1be>
 8003e38:	2300      	movs	r3, #0
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	f002 0203 	and.w	r2, r2, #3
 8003e40:	0092      	lsls	r2, r2, #2
 8003e42:	4093      	lsls	r3, r2
 8003e44:	693a      	ldr	r2, [r7, #16]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e4a:	4938      	ldr	r1, [pc, #224]	@ (8003f2c <HAL_GPIO_Init+0x2b0>)
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	089b      	lsrs	r3, r3, #2
 8003e50:	3302      	adds	r3, #2
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e58:	4b37      	ldr	r3, [pc, #220]	@ (8003f38 <HAL_GPIO_Init+0x2bc>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	43db      	mvns	r3, r3
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	4013      	ands	r3, r2
 8003e66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d003      	beq.n	8003e7c <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e7c:	4a2e      	ldr	r2, [pc, #184]	@ (8003f38 <HAL_GPIO_Init+0x2bc>)
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003e82:	4b2d      	ldr	r3, [pc, #180]	@ (8003f38 <HAL_GPIO_Init+0x2bc>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	43db      	mvns	r3, r3
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	4013      	ands	r3, r2
 8003e90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d003      	beq.n	8003ea6 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ea6:	4a24      	ldr	r2, [pc, #144]	@ (8003f38 <HAL_GPIO_Init+0x2bc>)
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8003eac:	4b22      	ldr	r3, [pc, #136]	@ (8003f38 <HAL_GPIO_Init+0x2bc>)
 8003eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003eb2:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	43db      	mvns	r3, r3
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	4013      	ands	r3, r2
 8003ebc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d003      	beq.n	8003ed2 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8003ed2:	4a19      	ldr	r2, [pc, #100]	@ (8003f38 <HAL_GPIO_Init+0x2bc>)
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8003eda:	4b17      	ldr	r3, [pc, #92]	@ (8003f38 <HAL_GPIO_Init+0x2bc>)
 8003edc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ee0:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	43db      	mvns	r3, r3
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d003      	beq.n	8003f00 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8003f00:	4a0d      	ldr	r2, [pc, #52]	@ (8003f38 <HAL_GPIO_Init+0x2bc>)
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	fa22 f303 	lsr.w	r3, r2, r3
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f47f aeb7 	bne.w	8003c8c <HAL_GPIO_Init+0x10>
  }
}
 8003f1e:	bf00      	nop
 8003f20:	bf00      	nop
 8003f22:	371c      	adds	r7, #28
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bc80      	pop	{r7}
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	40010000 	.word	0x40010000
 8003f30:	48000400 	.word	0x48000400
 8003f34:	48000800 	.word	0x48000800
 8003f38:	58000800 	.word	0x58000800

08003f3c <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b087      	sub	sp, #28
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f46:	2300      	movs	r3, #0
 8003f48:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003f4a:	e0af      	b.n	80040ac <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	fa02 f303 	lsl.w	r3, r2, r3
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	4013      	ands	r3, r2
 8003f58:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f000 80a2 	beq.w	80040a6 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003f62:	4a59      	ldr	r2, [pc, #356]	@ (80040c8 <HAL_GPIO_DeInit+0x18c>)
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	089b      	lsrs	r3, r3, #2
 8003f68:	3302      	adds	r3, #2
 8003f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f6e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	f003 0303 	and.w	r3, r3, #3
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	2207      	movs	r2, #7
 8003f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	4013      	ands	r3, r2
 8003f82:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003f8a:	d00d      	beq.n	8003fa8 <HAL_GPIO_DeInit+0x6c>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	4a4f      	ldr	r2, [pc, #316]	@ (80040cc <HAL_GPIO_DeInit+0x190>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d007      	beq.n	8003fa4 <HAL_GPIO_DeInit+0x68>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4a4e      	ldr	r2, [pc, #312]	@ (80040d0 <HAL_GPIO_DeInit+0x194>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d101      	bne.n	8003fa0 <HAL_GPIO_DeInit+0x64>
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	e004      	b.n	8003faa <HAL_GPIO_DeInit+0x6e>
 8003fa0:	2307      	movs	r3, #7
 8003fa2:	e002      	b.n	8003faa <HAL_GPIO_DeInit+0x6e>
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e000      	b.n	8003faa <HAL_GPIO_DeInit+0x6e>
 8003fa8:	2300      	movs	r3, #0
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	f002 0203 	and.w	r2, r2, #3
 8003fb0:	0092      	lsls	r2, r2, #2
 8003fb2:	4093      	lsls	r3, r2
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d136      	bne.n	8004028 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8003fba:	4b46      	ldr	r3, [pc, #280]	@ (80040d4 <HAL_GPIO_DeInit+0x198>)
 8003fbc:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	43db      	mvns	r3, r3
 8003fc4:	4943      	ldr	r1, [pc, #268]	@ (80040d4 <HAL_GPIO_DeInit+0x198>)
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8003fcc:	4b41      	ldr	r3, [pc, #260]	@ (80040d4 <HAL_GPIO_DeInit+0x198>)
 8003fce:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	43db      	mvns	r3, r3
 8003fd6:	493f      	ldr	r1, [pc, #252]	@ (80040d4 <HAL_GPIO_DeInit+0x198>)
 8003fd8:	4013      	ands	r3, r2
 8003fda:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8003fde:	4b3d      	ldr	r3, [pc, #244]	@ (80040d4 <HAL_GPIO_DeInit+0x198>)
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	43db      	mvns	r3, r3
 8003fe6:	493b      	ldr	r1, [pc, #236]	@ (80040d4 <HAL_GPIO_DeInit+0x198>)
 8003fe8:	4013      	ands	r3, r2
 8003fea:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8003fec:	4b39      	ldr	r3, [pc, #228]	@ (80040d4 <HAL_GPIO_DeInit+0x198>)
 8003fee:	685a      	ldr	r2, [r3, #4]
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	43db      	mvns	r3, r3
 8003ff4:	4937      	ldr	r1, [pc, #220]	@ (80040d4 <HAL_GPIO_DeInit+0x198>)
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	f003 0303 	and.w	r3, r3, #3
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	2207      	movs	r2, #7
 8004004:	fa02 f303 	lsl.w	r3, r2, r3
 8004008:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800400a:	4a2f      	ldr	r2, [pc, #188]	@ (80040c8 <HAL_GPIO_DeInit+0x18c>)
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	089b      	lsrs	r3, r3, #2
 8004010:	3302      	adds	r3, #2
 8004012:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	43da      	mvns	r2, r3
 800401a:	482b      	ldr	r0, [pc, #172]	@ (80040c8 <HAL_GPIO_DeInit+0x18c>)
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	089b      	lsrs	r3, r3, #2
 8004020:	400a      	ands	r2, r1
 8004022:	3302      	adds	r3, #2
 8004024:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	005b      	lsls	r3, r3, #1
 8004030:	2103      	movs	r1, #3
 8004032:	fa01 f303 	lsl.w	r3, r1, r3
 8004036:	431a      	orrs	r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	08da      	lsrs	r2, r3, #3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	3208      	adds	r2, #8
 8004044:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	f003 0307 	and.w	r3, r3, #7
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	220f      	movs	r2, #15
 8004052:	fa02 f303 	lsl.w	r3, r2, r3
 8004056:	43db      	mvns	r3, r3
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	08d2      	lsrs	r2, r2, #3
 800405c:	4019      	ands	r1, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	3208      	adds	r2, #8
 8004062:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	689a      	ldr	r2, [r3, #8]
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	005b      	lsls	r3, r3, #1
 800406e:	2103      	movs	r1, #3
 8004070:	fa01 f303 	lsl.w	r3, r1, r3
 8004074:	43db      	mvns	r3, r3
 8004076:	401a      	ands	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	2101      	movs	r1, #1
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	fa01 f303 	lsl.w	r3, r1, r3
 8004088:	43db      	mvns	r3, r3
 800408a:	401a      	ands	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	68da      	ldr	r2, [r3, #12]
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	005b      	lsls	r3, r3, #1
 8004098:	2103      	movs	r1, #3
 800409a:	fa01 f303 	lsl.w	r3, r1, r3
 800409e:	43db      	mvns	r3, r3
 80040a0:	401a      	ands	r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	60da      	str	r2, [r3, #12]
    }

    position++;
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	3301      	adds	r3, #1
 80040aa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	fa22 f303 	lsr.w	r3, r2, r3
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	f47f af49 	bne.w	8003f4c <HAL_GPIO_DeInit+0x10>
  }
}
 80040ba:	bf00      	nop
 80040bc:	bf00      	nop
 80040be:	371c      	adds	r7, #28
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bc80      	pop	{r7}
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	40010000 	.word	0x40010000
 80040cc:	48000400 	.word	0x48000400
 80040d0:	48000800 	.word	0x48000800
 80040d4:	58000800 	.word	0x58000800

080040d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	460b      	mov	r3, r1
 80040e2:	807b      	strh	r3, [r7, #2]
 80040e4:	4613      	mov	r3, r2
 80040e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80040e8:	787b      	ldrb	r3, [r7, #1]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d003      	beq.n	80040f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80040ee:	887a      	ldrh	r2, [r7, #2]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80040f4:	e002      	b.n	80040fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80040f6:	887a      	ldrh	r2, [r7, #2]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80040fc:	bf00      	nop
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	bc80      	pop	{r7}
 8004104:	4770      	bx	lr
	...

08004108 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	4603      	mov	r3, r0
 8004110:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004112:	4b08      	ldr	r3, [pc, #32]	@ (8004134 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004114:	68da      	ldr	r2, [r3, #12]
 8004116:	88fb      	ldrh	r3, [r7, #6]
 8004118:	4013      	ands	r3, r2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d006      	beq.n	800412c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800411e:	4a05      	ldr	r2, [pc, #20]	@ (8004134 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004120:	88fb      	ldrh	r3, [r7, #6]
 8004122:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004124:	88fb      	ldrh	r3, [r7, #6]
 8004126:	4618      	mov	r0, r3
 8004128:	f000 f806 	bl	8004138 <HAL_GPIO_EXTI_Callback>
  }
}
 800412c:	bf00      	nop
 800412e:	3708      	adds	r7, #8
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	58000800 	.word	0x58000800

08004138 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	4603      	mov	r3, r0
 8004140:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004142:	bf00      	nop
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	bc80      	pop	{r7}
 800414a:	4770      	bx	lr

0800414c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e081      	b.n	8004262 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d106      	bne.n	8004178 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 f879 	bl	800426a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2224      	movs	r2, #36	@ 0x24
 800417c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f022 0201 	bic.w	r2, r2, #1
 800418e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685a      	ldr	r2, [r3, #4]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800419c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	689a      	ldr	r2, [r3, #8]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80041ac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d107      	bne.n	80041c6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	689a      	ldr	r2, [r3, #8]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80041c2:	609a      	str	r2, [r3, #8]
 80041c4:	e006      	b.n	80041d4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	689a      	ldr	r2, [r3, #8]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80041d2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d104      	bne.n	80041e6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80041e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	6812      	ldr	r2, [r2, #0]
 80041f0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80041f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68da      	ldr	r2, [r3, #12]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004208:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	691a      	ldr	r2, [r3, #16]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	430a      	orrs	r2, r1
 8004222:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	69d9      	ldr	r1, [r3, #28]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a1a      	ldr	r2, [r3, #32]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	430a      	orrs	r2, r1
 8004232:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f042 0201 	orr.w	r2, r2, #1
 8004242:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2220      	movs	r2, #32
 800424e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3708      	adds	r7, #8
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800426a:	b480      	push	{r7}
 800426c:	b083      	sub	sp, #12
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8004272:	bf00      	nop
 8004274:	370c      	adds	r7, #12
 8004276:	46bd      	mov	sp, r7
 8004278:	bc80      	pop	{r7}
 800427a:	4770      	bx	lr

0800427c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b088      	sub	sp, #32
 8004280:	af02      	add	r7, sp, #8
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	607a      	str	r2, [r7, #4]
 8004286:	461a      	mov	r2, r3
 8004288:	460b      	mov	r3, r1
 800428a:	817b      	strh	r3, [r7, #10]
 800428c:	4613      	mov	r3, r2
 800428e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b20      	cmp	r3, #32
 800429a:	f040 80da 	bne.w	8004452 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d101      	bne.n	80042ac <HAL_I2C_Master_Transmit+0x30>
 80042a8:	2302      	movs	r3, #2
 80042aa:	e0d3      	b.n	8004454 <HAL_I2C_Master_Transmit+0x1d8>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80042b4:	f7fd fa3c 	bl	8001730 <HAL_GetTick>
 80042b8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	9300      	str	r3, [sp, #0]
 80042be:	2319      	movs	r3, #25
 80042c0:	2201      	movs	r2, #1
 80042c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80042c6:	68f8      	ldr	r0, [r7, #12]
 80042c8:	f000 f9e5 	bl	8004696 <I2C_WaitOnFlagUntilTimeout>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d001      	beq.n	80042d6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e0be      	b.n	8004454 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2221      	movs	r2, #33	@ 0x21
 80042da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2210      	movs	r2, #16
 80042e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	893a      	ldrh	r2, [r7, #8]
 80042f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004302:	b29b      	uxth	r3, r3
 8004304:	2bff      	cmp	r3, #255	@ 0xff
 8004306:	d90e      	bls.n	8004326 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	22ff      	movs	r2, #255	@ 0xff
 800430c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004312:	b2da      	uxtb	r2, r3
 8004314:	8979      	ldrh	r1, [r7, #10]
 8004316:	4b51      	ldr	r3, [pc, #324]	@ (800445c <HAL_I2C_Master_Transmit+0x1e0>)
 8004318:	9300      	str	r3, [sp, #0]
 800431a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f000 fbd0 	bl	8004ac4 <I2C_TransferConfig>
 8004324:	e06c      	b.n	8004400 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800432a:	b29a      	uxth	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004334:	b2da      	uxtb	r2, r3
 8004336:	8979      	ldrh	r1, [r7, #10]
 8004338:	4b48      	ldr	r3, [pc, #288]	@ (800445c <HAL_I2C_Master_Transmit+0x1e0>)
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f000 fbbf 	bl	8004ac4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004346:	e05b      	b.n	8004400 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004348:	697a      	ldr	r2, [r7, #20]
 800434a:	6a39      	ldr	r1, [r7, #32]
 800434c:	68f8      	ldr	r0, [r7, #12]
 800434e:	f000 f9e2 	bl	8004716 <I2C_WaitOnTXISFlagUntilTimeout>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d001      	beq.n	800435c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e07b      	b.n	8004454 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004360:	781a      	ldrb	r2, [r3, #0]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800436c:	1c5a      	adds	r2, r3, #1
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004376:	b29b      	uxth	r3, r3
 8004378:	3b01      	subs	r3, #1
 800437a:	b29a      	uxth	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004384:	3b01      	subs	r3, #1
 8004386:	b29a      	uxth	r2, r3
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004390:	b29b      	uxth	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d034      	beq.n	8004400 <HAL_I2C_Master_Transmit+0x184>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800439a:	2b00      	cmp	r3, #0
 800439c:	d130      	bne.n	8004400 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	9300      	str	r3, [sp, #0]
 80043a2:	6a3b      	ldr	r3, [r7, #32]
 80043a4:	2200      	movs	r2, #0
 80043a6:	2180      	movs	r1, #128	@ 0x80
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	f000 f974 	bl	8004696 <I2C_WaitOnFlagUntilTimeout>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d001      	beq.n	80043b8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e04d      	b.n	8004454 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043bc:	b29b      	uxth	r3, r3
 80043be:	2bff      	cmp	r3, #255	@ 0xff
 80043c0:	d90e      	bls.n	80043e0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	22ff      	movs	r2, #255	@ 0xff
 80043c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043cc:	b2da      	uxtb	r2, r3
 80043ce:	8979      	ldrh	r1, [r7, #10]
 80043d0:	2300      	movs	r3, #0
 80043d2:	9300      	str	r3, [sp, #0]
 80043d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	f000 fb73 	bl	8004ac4 <I2C_TransferConfig>
 80043de:	e00f      	b.n	8004400 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ee:	b2da      	uxtb	r2, r3
 80043f0:	8979      	ldrh	r1, [r7, #10]
 80043f2:	2300      	movs	r3, #0
 80043f4:	9300      	str	r3, [sp, #0]
 80043f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043fa:	68f8      	ldr	r0, [r7, #12]
 80043fc:	f000 fb62 	bl	8004ac4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004404:	b29b      	uxth	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d19e      	bne.n	8004348 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	6a39      	ldr	r1, [r7, #32]
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	f000 f9c1 	bl	8004796 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e01a      	b.n	8004454 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2220      	movs	r2, #32
 8004424:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	6859      	ldr	r1, [r3, #4]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	4b0b      	ldr	r3, [pc, #44]	@ (8004460 <HAL_I2C_Master_Transmit+0x1e4>)
 8004432:	400b      	ands	r3, r1
 8004434:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2220      	movs	r2, #32
 800443a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800444e:	2300      	movs	r3, #0
 8004450:	e000      	b.n	8004454 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004452:	2302      	movs	r3, #2
  }
}
 8004454:	4618      	mov	r0, r3
 8004456:	3718      	adds	r7, #24
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	80002000 	.word	0x80002000
 8004460:	fe00e800 	.word	0xfe00e800

08004464 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b088      	sub	sp, #32
 8004468:	af02      	add	r7, sp, #8
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	607a      	str	r2, [r7, #4]
 800446e:	461a      	mov	r2, r3
 8004470:	460b      	mov	r3, r1
 8004472:	817b      	strh	r3, [r7, #10]
 8004474:	4613      	mov	r3, r2
 8004476:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2b20      	cmp	r3, #32
 8004482:	f040 80db 	bne.w	800463c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800448c:	2b01      	cmp	r3, #1
 800448e:	d101      	bne.n	8004494 <HAL_I2C_Master_Receive+0x30>
 8004490:	2302      	movs	r3, #2
 8004492:	e0d4      	b.n	800463e <HAL_I2C_Master_Receive+0x1da>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800449c:	f7fd f948 	bl	8001730 <HAL_GetTick>
 80044a0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	9300      	str	r3, [sp, #0]
 80044a6:	2319      	movs	r3, #25
 80044a8:	2201      	movs	r2, #1
 80044aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	f000 f8f1 	bl	8004696 <I2C_WaitOnFlagUntilTimeout>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e0bf      	b.n	800463e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2222      	movs	r2, #34	@ 0x22
 80044c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2210      	movs	r2, #16
 80044ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	893a      	ldrh	r2, [r7, #8]
 80044de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2200      	movs	r2, #0
 80044e4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	2bff      	cmp	r3, #255	@ 0xff
 80044ee:	d90e      	bls.n	800450e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	22ff      	movs	r2, #255	@ 0xff
 80044f4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044fa:	b2da      	uxtb	r2, r3
 80044fc:	8979      	ldrh	r1, [r7, #10]
 80044fe:	4b52      	ldr	r3, [pc, #328]	@ (8004648 <HAL_I2C_Master_Receive+0x1e4>)
 8004500:	9300      	str	r3, [sp, #0]
 8004502:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	f000 fadc 	bl	8004ac4 <I2C_TransferConfig>
 800450c:	e06d      	b.n	80045ea <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004512:	b29a      	uxth	r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800451c:	b2da      	uxtb	r2, r3
 800451e:	8979      	ldrh	r1, [r7, #10]
 8004520:	4b49      	ldr	r3, [pc, #292]	@ (8004648 <HAL_I2C_Master_Receive+0x1e4>)
 8004522:	9300      	str	r3, [sp, #0]
 8004524:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	f000 facb 	bl	8004ac4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800452e:	e05c      	b.n	80045ea <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	6a39      	ldr	r1, [r7, #32]
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f000 f96b 	bl	8004810 <I2C_WaitOnRXNEFlagUntilTimeout>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d001      	beq.n	8004544 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e07c      	b.n	800463e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800454e:	b2d2      	uxtb	r2, r2
 8004550:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004556:	1c5a      	adds	r2, r3, #1
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004560:	3b01      	subs	r3, #1
 8004562:	b29a      	uxth	r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800456c:	b29b      	uxth	r3, r3
 800456e:	3b01      	subs	r3, #1
 8004570:	b29a      	uxth	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800457a:	b29b      	uxth	r3, r3
 800457c:	2b00      	cmp	r3, #0
 800457e:	d034      	beq.n	80045ea <HAL_I2C_Master_Receive+0x186>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004584:	2b00      	cmp	r3, #0
 8004586:	d130      	bne.n	80045ea <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	9300      	str	r3, [sp, #0]
 800458c:	6a3b      	ldr	r3, [r7, #32]
 800458e:	2200      	movs	r2, #0
 8004590:	2180      	movs	r1, #128	@ 0x80
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f000 f87f 	bl	8004696 <I2C_WaitOnFlagUntilTimeout>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e04d      	b.n	800463e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	2bff      	cmp	r3, #255	@ 0xff
 80045aa:	d90e      	bls.n	80045ca <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	22ff      	movs	r2, #255	@ 0xff
 80045b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045b6:	b2da      	uxtb	r2, r3
 80045b8:	8979      	ldrh	r1, [r7, #10]
 80045ba:	2300      	movs	r3, #0
 80045bc:	9300      	str	r3, [sp, #0]
 80045be:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f000 fa7e 	bl	8004ac4 <I2C_TransferConfig>
 80045c8:	e00f      	b.n	80045ea <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045d8:	b2da      	uxtb	r2, r3
 80045da:	8979      	ldrh	r1, [r7, #10]
 80045dc:	2300      	movs	r3, #0
 80045de:	9300      	str	r3, [sp, #0]
 80045e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f000 fa6d 	bl	8004ac4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d19d      	bne.n	8004530 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	6a39      	ldr	r1, [r7, #32]
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f000 f8cc 	bl	8004796 <I2C_WaitOnSTOPFlagUntilTimeout>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d001      	beq.n	8004608 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e01a      	b.n	800463e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2220      	movs	r2, #32
 800460e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6859      	ldr	r1, [r3, #4]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	4b0c      	ldr	r3, [pc, #48]	@ (800464c <HAL_I2C_Master_Receive+0x1e8>)
 800461c:	400b      	ands	r3, r1
 800461e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2220      	movs	r2, #32
 8004624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004638:	2300      	movs	r3, #0
 800463a:	e000      	b.n	800463e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800463c:	2302      	movs	r3, #2
  }
}
 800463e:	4618      	mov	r0, r3
 8004640:	3718      	adds	r7, #24
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	80002400 	.word	0x80002400
 800464c:	fe00e800 	.word	0xfe00e800

08004650 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	f003 0302 	and.w	r3, r3, #2
 8004662:	2b02      	cmp	r3, #2
 8004664:	d103      	bne.n	800466e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2200      	movs	r2, #0
 800466c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	2b01      	cmp	r3, #1
 800467a:	d007      	beq.n	800468c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	699a      	ldr	r2, [r3, #24]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f042 0201 	orr.w	r2, r2, #1
 800468a:	619a      	str	r2, [r3, #24]
  }
}
 800468c:	bf00      	nop
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	bc80      	pop	{r7}
 8004694:	4770      	bx	lr

08004696 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b084      	sub	sp, #16
 800469a:	af00      	add	r7, sp, #0
 800469c:	60f8      	str	r0, [r7, #12]
 800469e:	60b9      	str	r1, [r7, #8]
 80046a0:	603b      	str	r3, [r7, #0]
 80046a2:	4613      	mov	r3, r2
 80046a4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046a6:	e022      	b.n	80046ee <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ae:	d01e      	beq.n	80046ee <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046b0:	f7fd f83e 	bl	8001730 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	683a      	ldr	r2, [r7, #0]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d302      	bcc.n	80046c6 <I2C_WaitOnFlagUntilTimeout+0x30>
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d113      	bne.n	80046ee <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ca:	f043 0220 	orr.w	r2, r3, #32
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2220      	movs	r2, #32
 80046d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e00f      	b.n	800470e <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	699a      	ldr	r2, [r3, #24]
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	4013      	ands	r3, r2
 80046f8:	68ba      	ldr	r2, [r7, #8]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	bf0c      	ite	eq
 80046fe:	2301      	moveq	r3, #1
 8004700:	2300      	movne	r3, #0
 8004702:	b2db      	uxtb	r3, r3
 8004704:	461a      	mov	r2, r3
 8004706:	79fb      	ldrb	r3, [r7, #7]
 8004708:	429a      	cmp	r2, r3
 800470a:	d0cd      	beq.n	80046a8 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004716:	b580      	push	{r7, lr}
 8004718:	b084      	sub	sp, #16
 800471a:	af00      	add	r7, sp, #0
 800471c:	60f8      	str	r0, [r7, #12]
 800471e:	60b9      	str	r1, [r7, #8]
 8004720:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004722:	e02c      	b.n	800477e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	68b9      	ldr	r1, [r7, #8]
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	f000 f8eb 	bl	8004904 <I2C_IsErrorOccurred>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d001      	beq.n	8004738 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e02a      	b.n	800478e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800473e:	d01e      	beq.n	800477e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004740:	f7fc fff6 	bl	8001730 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	429a      	cmp	r2, r3
 800474e:	d302      	bcc.n	8004756 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d113      	bne.n	800477e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800475a:	f043 0220 	orr.w	r2, r3, #32
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2220      	movs	r2, #32
 8004766:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e007      	b.n	800478e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	f003 0302 	and.w	r3, r3, #2
 8004788:	2b02      	cmp	r3, #2
 800478a:	d1cb      	bne.n	8004724 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b084      	sub	sp, #16
 800479a:	af00      	add	r7, sp, #0
 800479c:	60f8      	str	r0, [r7, #12]
 800479e:	60b9      	str	r1, [r7, #8]
 80047a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047a2:	e028      	b.n	80047f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	68b9      	ldr	r1, [r7, #8]
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f000 f8ab 	bl	8004904 <I2C_IsErrorOccurred>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d001      	beq.n	80047b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80047b4:	2301      	movs	r3, #1
 80047b6:	e026      	b.n	8004806 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047b8:	f7fc ffba 	bl	8001730 <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	68ba      	ldr	r2, [r7, #8]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d302      	bcc.n	80047ce <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d113      	bne.n	80047f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047d2:	f043 0220 	orr.w	r2, r3, #32
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2220      	movs	r2, #32
 80047de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e007      	b.n	8004806 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	f003 0320 	and.w	r3, r3, #32
 8004800:	2b20      	cmp	r3, #32
 8004802:	d1cf      	bne.n	80047a4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
	...

08004810 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800481c:	e064      	b.n	80048e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	68b9      	ldr	r1, [r7, #8]
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f000 f86e 	bl	8004904 <I2C_IsErrorOccurred>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e062      	b.n	80048f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	f003 0320 	and.w	r3, r3, #32
 800483c:	2b20      	cmp	r3, #32
 800483e:	d138      	bne.n	80048b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	f003 0304 	and.w	r3, r3, #4
 800484a:	2b04      	cmp	r3, #4
 800484c:	d105      	bne.n	800485a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004852:	2b00      	cmp	r3, #0
 8004854:	d001      	beq.n	800485a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004856:	2300      	movs	r3, #0
 8004858:	e04e      	b.n	80048f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	f003 0310 	and.w	r3, r3, #16
 8004864:	2b10      	cmp	r3, #16
 8004866:	d107      	bne.n	8004878 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2210      	movs	r2, #16
 800486e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2204      	movs	r2, #4
 8004874:	645a      	str	r2, [r3, #68]	@ 0x44
 8004876:	e002      	b.n	800487e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2220      	movs	r2, #32
 8004884:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	6859      	ldr	r1, [r3, #4]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	4b1b      	ldr	r3, [pc, #108]	@ (8004900 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8004892:	400b      	ands	r3, r1
 8004894:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2220      	movs	r2, #32
 800489a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e022      	b.n	80048f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048b2:	f7fc ff3d 	bl	8001730 <HAL_GetTick>
 80048b6:	4602      	mov	r2, r0
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d302      	bcc.n	80048c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10f      	bne.n	80048e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048cc:	f043 0220 	orr.w	r2, r3, #32
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2220      	movs	r2, #32
 80048d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e007      	b.n	80048f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	f003 0304 	and.w	r3, r3, #4
 80048f2:	2b04      	cmp	r3, #4
 80048f4:	d193      	bne.n	800481e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3710      	adds	r7, #16
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	fe00e800 	.word	0xfe00e800

08004904 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b08a      	sub	sp, #40	@ 0x28
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004910:	2300      	movs	r3, #0
 8004912:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800491e:	2300      	movs	r3, #0
 8004920:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	f003 0310 	and.w	r3, r3, #16
 800492c:	2b00      	cmp	r3, #0
 800492e:	d068      	beq.n	8004a02 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2210      	movs	r2, #16
 8004936:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004938:	e049      	b.n	80049ce <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004940:	d045      	beq.n	80049ce <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004942:	f7fc fef5 	bl	8001730 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	68ba      	ldr	r2, [r7, #8]
 800494e:	429a      	cmp	r2, r3
 8004950:	d302      	bcc.n	8004958 <I2C_IsErrorOccurred+0x54>
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d13a      	bne.n	80049ce <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004962:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800496a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004976:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800497a:	d121      	bne.n	80049c0 <I2C_IsErrorOccurred+0xbc>
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004982:	d01d      	beq.n	80049c0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004984:	7cfb      	ldrb	r3, [r7, #19]
 8004986:	2b20      	cmp	r3, #32
 8004988:	d01a      	beq.n	80049c0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	685a      	ldr	r2, [r3, #4]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004998:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800499a:	f7fc fec9 	bl	8001730 <HAL_GetTick>
 800499e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049a0:	e00e      	b.n	80049c0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80049a2:	f7fc fec5 	bl	8001730 <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	2b19      	cmp	r3, #25
 80049ae:	d907      	bls.n	80049c0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80049b0:	6a3b      	ldr	r3, [r7, #32]
 80049b2:	f043 0320 	orr.w	r3, r3, #32
 80049b6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80049be:	e006      	b.n	80049ce <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	f003 0320 	and.w	r3, r3, #32
 80049ca:	2b20      	cmp	r3, #32
 80049cc:	d1e9      	bne.n	80049a2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	699b      	ldr	r3, [r3, #24]
 80049d4:	f003 0320 	and.w	r3, r3, #32
 80049d8:	2b20      	cmp	r3, #32
 80049da:	d003      	beq.n	80049e4 <I2C_IsErrorOccurred+0xe0>
 80049dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d0aa      	beq.n	800493a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80049e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d103      	bne.n	80049f4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2220      	movs	r2, #32
 80049f2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80049f4:	6a3b      	ldr	r3, [r7, #32]
 80049f6:	f043 0304 	orr.w	r3, r3, #4
 80049fa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d00b      	beq.n	8004a2c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004a14:	6a3b      	ldr	r3, [r7, #32]
 8004a16:	f043 0301 	orr.w	r3, r3, #1
 8004a1a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a24:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00b      	beq.n	8004a4e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004a36:	6a3b      	ldr	r3, [r7, #32]
 8004a38:	f043 0308 	orr.w	r3, r3, #8
 8004a3c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004a46:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d00b      	beq.n	8004a70 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004a58:	6a3b      	ldr	r3, [r7, #32]
 8004a5a:	f043 0302 	orr.w	r3, r3, #2
 8004a5e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a68:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8004a70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d01c      	beq.n	8004ab2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f7ff fde9 	bl	8004650 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	6859      	ldr	r1, [r3, #4]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	4b0d      	ldr	r3, [pc, #52]	@ (8004ac0 <I2C_IsErrorOccurred+0x1bc>)
 8004a8a:	400b      	ands	r3, r1
 8004a8c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a92:	6a3b      	ldr	r3, [r7, #32]
 8004a94:	431a      	orrs	r2, r3
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2220      	movs	r2, #32
 8004a9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004ab2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3728      	adds	r7, #40	@ 0x28
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	fe00e800 	.word	0xfe00e800

08004ac4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b087      	sub	sp, #28
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	607b      	str	r3, [r7, #4]
 8004ace:	460b      	mov	r3, r1
 8004ad0:	817b      	strh	r3, [r7, #10]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ad6:	897b      	ldrh	r3, [r7, #10]
 8004ad8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004adc:	7a7b      	ldrb	r3, [r7, #9]
 8004ade:	041b      	lsls	r3, r3, #16
 8004ae0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ae4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004aea:	6a3b      	ldr	r3, [r7, #32]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004af2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	685a      	ldr	r2, [r3, #4]
 8004afa:	6a3b      	ldr	r3, [r7, #32]
 8004afc:	0d5b      	lsrs	r3, r3, #21
 8004afe:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004b02:	4b07      	ldr	r3, [pc, #28]	@ (8004b20 <I2C_TransferConfig+0x5c>)
 8004b04:	430b      	orrs	r3, r1
 8004b06:	43db      	mvns	r3, r3
 8004b08:	ea02 0103 	and.w	r1, r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	697a      	ldr	r2, [r7, #20]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004b16:	bf00      	nop
 8004b18:	371c      	adds	r7, #28
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bc80      	pop	{r7}
 8004b1e:	4770      	bx	lr
 8004b20:	03ff63ff 	.word	0x03ff63ff

08004b24 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b20      	cmp	r3, #32
 8004b38:	d138      	bne.n	8004bac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d101      	bne.n	8004b48 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004b44:	2302      	movs	r3, #2
 8004b46:	e032      	b.n	8004bae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2224      	movs	r2, #36	@ 0x24
 8004b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f022 0201 	bic.w	r2, r2, #1
 8004b66:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004b76:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	6819      	ldr	r1, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	683a      	ldr	r2, [r7, #0]
 8004b84:	430a      	orrs	r2, r1
 8004b86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f042 0201 	orr.w	r2, r2, #1
 8004b96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2220      	movs	r2, #32
 8004b9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	e000      	b.n	8004bae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004bac:	2302      	movs	r3, #2
  }
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	370c      	adds	r7, #12
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bc80      	pop	{r7}
 8004bb6:	4770      	bx	lr

08004bb8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b20      	cmp	r3, #32
 8004bcc:	d139      	bne.n	8004c42 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d101      	bne.n	8004bdc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004bd8:	2302      	movs	r3, #2
 8004bda:	e033      	b.n	8004c44 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2224      	movs	r2, #36	@ 0x24
 8004be8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f022 0201 	bic.w	r2, r2, #1
 8004bfa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004c0a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	021b      	lsls	r3, r3, #8
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68fa      	ldr	r2, [r7, #12]
 8004c1c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f042 0201 	orr.w	r2, r2, #1
 8004c2c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2220      	movs	r2, #32
 8004c32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	e000      	b.n	8004c44 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004c42:	2302      	movs	r3, #2
  }
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3714      	adds	r7, #20
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bc80      	pop	{r7}
 8004c4c:	4770      	bx	lr
	...

08004c50 <LL_EXTI_EnableIT_0_31>:
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8004c58:	4b06      	ldr	r3, [pc, #24]	@ (8004c74 <LL_EXTI_EnableIT_0_31+0x24>)
 8004c5a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8004c5e:	4905      	ldr	r1, [pc, #20]	@ (8004c74 <LL_EXTI_EnableIT_0_31+0x24>)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4313      	orrs	r3, r2
 8004c64:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8004c68:	bf00      	nop
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bc80      	pop	{r7}
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	58000800 	.word	0x58000800

08004c78 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8004c80:	4b06      	ldr	r3, [pc, #24]	@ (8004c9c <LL_EXTI_DisableIT_0_31+0x24>)
 8004c82:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	43db      	mvns	r3, r3
 8004c8a:	4904      	ldr	r1, [pc, #16]	@ (8004c9c <LL_EXTI_DisableIT_0_31+0x24>)
 8004c8c:	4013      	ands	r3, r2
 8004c8e:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8004c92:	bf00      	nop
 8004c94:	370c      	adds	r7, #12
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bc80      	pop	{r7}
 8004c9a:	4770      	bx	lr
 8004c9c:	58000800 	.word	0x58000800

08004ca0 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_22
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8004ca8:	4b05      	ldr	r3, [pc, #20]	@ (8004cc0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	4904      	ldr	r1, [pc, #16]	@ (8004cc0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	600b      	str	r3, [r1, #0]

}
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bc80      	pop	{r7}
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	58000800 	.word	0x58000800

08004cc4 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_22
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8004ccc:	4b05      	ldr	r3, [pc, #20]	@ (8004ce4 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	43db      	mvns	r3, r3
 8004cd4:	4903      	ldr	r1, [pc, #12]	@ (8004ce4 <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	600b      	str	r3, [r1, #0]

}
 8004cda:	bf00      	nop
 8004cdc:	370c      	adds	r7, #12
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bc80      	pop	{r7}
 8004ce2:	4770      	bx	lr
 8004ce4:	58000800 	.word	0x58000800

08004ce8 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_22
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8004cf0:	4b05      	ldr	r3, [pc, #20]	@ (8004d08 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8004cf2:	685a      	ldr	r2, [r3, #4]
 8004cf4:	4904      	ldr	r1, [pc, #16]	@ (8004d08 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	604b      	str	r3, [r1, #4]
}
 8004cfc:	bf00      	nop
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bc80      	pop	{r7}
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	58000800 	.word	0x58000800

08004d0c <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_22
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8004d14:	4b05      	ldr	r3, [pc, #20]	@ (8004d2c <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8004d16:	685a      	ldr	r2, [r3, #4]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	43db      	mvns	r3, r3
 8004d1c:	4903      	ldr	r1, [pc, #12]	@ (8004d2c <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8004d1e:	4013      	ands	r3, r2
 8004d20:	604b      	str	r3, [r1, #4]
}
 8004d22:	bf00      	nop
 8004d24:	370c      	adds	r7, #12
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bc80      	pop	{r7}
 8004d2a:	4770      	bx	lr
 8004d2c:	58000800 	.word	0x58000800

08004d30 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004d30:	b480      	push	{r7}
 8004d32:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d34:	4b04      	ldr	r3, [pc, #16]	@ (8004d48 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a03      	ldr	r2, [pc, #12]	@ (8004d48 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004d3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d3e:	6013      	str	r3, [r2, #0]
}
 8004d40:	bf00      	nop
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bc80      	pop	{r7}
 8004d46:	4770      	bx	lr
 8004d48:	58000400 	.word	0x58000400

08004d4c <HAL_PWR_ConfigPVD>:
  * @note   For devices dual core: if "sConfigPVD->Mode" is set to PVD_MODE_IT,
  *         wake-up target is set to wake-up the selected CPU.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 8004d54:	4b1b      	ldr	r3, [pc, #108]	@ (8004dc4 <HAL_PWR_ConfigPVD+0x78>)
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	f023 020e 	bic.w	r2, r3, #14
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4918      	ldr	r1, [pc, #96]	@ (8004dc4 <HAL_PWR_ConfigPVD+0x78>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */

  /* Note: On STM32WL series, power PVD event is not available on EXTI lines   */
  /*       (only interruption is available through EXTI line 16).             */
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8004d66:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8004d6a:	f7ff ff85 	bl	8004c78 <LL_EXTI_DisableIT_0_31>
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8004d6e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8004d72:	f7ff ffcb 	bl	8004d0c <LL_EXTI_DisableFallingTrig_0_31>
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 8004d76:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8004d7a:	f7ff ffa3 	bl	8004cc4 <LL_EXTI_DisableRisingTrig_0_31>

  /* Configure interrupt mode */
  if ((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d003      	beq.n	8004d92 <HAL_PWR_ConfigPVD+0x46>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8004d8a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8004d8e:	f7ff ff5f 	bl	8004c50 <LL_EXTI_EnableIT_0_31>
  }

  /* Configure the edge */
  if ((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f003 0301 	and.w	r3, r3, #1
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d003      	beq.n	8004da6 <HAL_PWR_ConfigPVD+0x5a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8004d9e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8004da2:	f7ff ffa1 	bl	8004ce8 <LL_EXTI_EnableFallingTrig_0_31>
  }

  if ((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f003 0302 	and.w	r3, r3, #2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d003      	beq.n	8004dba <HAL_PWR_ConfigPVD+0x6e>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8004db2:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8004db6:	f7ff ff73 	bl	8004ca0 <LL_EXTI_EnableRisingTrig_0_31>
  }

  return HAL_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3708      	adds	r7, #8
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	58000400 	.word	0x58000400

08004dc8 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8004dcc:	4b04      	ldr	r3, [pc, #16]	@ (8004de0 <HAL_PWR_EnablePVD+0x18>)
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	4a03      	ldr	r2, [pc, #12]	@ (8004de0 <HAL_PWR_EnablePVD+0x18>)
 8004dd2:	f043 0301 	orr.w	r3, r3, #1
 8004dd6:	6053      	str	r3, [r2, #4]
}
 8004dd8:	bf00      	nop
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bc80      	pop	{r7}
 8004dde:	4770      	bx	lr
 8004de0:	58000400 	.word	0x58000400

08004de4 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	460b      	mov	r3, r1
 8004dee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d10c      	bne.n	8004e10 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8004df6:	4b13      	ldr	r3, [pc, #76]	@ (8004e44 <HAL_PWR_EnterSLEEPMode+0x60>)
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004dfe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e02:	d10d      	bne.n	8004e20 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8004e04:	f000 f8cc 	bl	8004fa0 <HAL_PWREx_DisableLowPowerRunMode>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d008      	beq.n	8004e20 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8004e0e:	e015      	b.n	8004e3c <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8004e10:	4b0c      	ldr	r3, [pc, #48]	@ (8004e44 <HAL_PWR_EnterSLEEPMode+0x60>)
 8004e12:	695b      	ldr	r3, [r3, #20]
 8004e14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d101      	bne.n	8004e20 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8004e1c:	f000 f8b2 	bl	8004f84 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004e20:	4b09      	ldr	r3, [pc, #36]	@ (8004e48 <HAL_PWR_EnterSLEEPMode+0x64>)
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	4a08      	ldr	r2, [pc, #32]	@ (8004e48 <HAL_PWR_EnterSLEEPMode+0x64>)
 8004e26:	f023 0304 	bic.w	r3, r3, #4
 8004e2a:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004e2c:	78fb      	ldrb	r3, [r7, #3]
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d101      	bne.n	8004e36 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004e32:	bf30      	wfi
 8004e34:	e002      	b.n	8004e3c <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004e36:	bf40      	sev
    __WFE();
 8004e38:	bf20      	wfe
    __WFE();
 8004e3a:	bf20      	wfe
  }
}
 8004e3c:	3708      	adds	r7, #8
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	58000400 	.word	0x58000400
 8004e48:	e000ed00 	.word	0xe000ed00

08004e4c <LL_EXTI_ReadFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_22
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 8004e54:	4b04      	ldr	r3, [pc, #16]	@ (8004e68 <LL_EXTI_ReadFlag_0_31+0x1c>)
 8004e56:	68da      	ldr	r2, [r3, #12]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4013      	ands	r3, r2
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bc80      	pop	{r7}
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	58000800 	.word	0x58000800

08004e6c <LL_EXTI_ReadFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         @arg @ref LL_EXTI_LINE_45
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_32_63(uint32_t ExtiLine)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(EXTI->PR2, ExtiLine));
 8004e74:	4b04      	ldr	r3, [pc, #16]	@ (8004e88 <LL_EXTI_ReadFlag_32_63+0x1c>)
 8004e76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4013      	ands	r3, r2
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bc80      	pop	{r7}
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	58000800 	.word	0x58000800

08004e8c <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_22
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8004e94:	4a03      	ldr	r2, [pc, #12]	@ (8004ea4 <LL_EXTI_ClearFlag_0_31+0x18>)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	60d3      	str	r3, [r2, #12]
}
 8004e9a:	bf00      	nop
 8004e9c:	370c      	adds	r7, #12
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bc80      	pop	{r7}
 8004ea2:	4770      	bx	lr
 8004ea4:	58000800 	.word	0x58000800

08004ea8 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         @arg @ref LL_EXTI_LINE_45
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8004eb0:	4a03      	ldr	r2, [pc, #12]	@ (8004ec0 <LL_EXTI_ClearFlag_32_63+0x18>)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8004eb6:	bf00      	nop
 8004eb8:	370c      	adds	r7, #12
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bc80      	pop	{r7}
 8004ebe:	4770      	bx	lr
 8004ec0:	58000800 	.word	0x58000800

08004ec4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004ec8:	4b03      	ldr	r3, [pc, #12]	@ (8004ed8 <HAL_PWREx_GetVoltageRange+0x14>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bc80      	pop	{r7}
 8004ed6:	4770      	bx	lr
 8004ed8:	58000400 	.word	0x58000400

08004edc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004eea:	d12f      	bne.n	8004f4c <HAL_PWREx_ControlVoltageScaling+0x70>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004eec:	4b22      	ldr	r3, [pc, #136]	@ (8004f78 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004ef4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ef8:	d037      	beq.n	8004f6a <HAL_PWREx_ControlVoltageScaling+0x8e>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004efa:	4b1f      	ldr	r3, [pc, #124]	@ (8004f78 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004f02:	4a1d      	ldr	r2, [pc, #116]	@ (8004f78 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8004f04:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004f08:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8004f0a:	4b1c      	ldr	r3, [pc, #112]	@ (8004f7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	2232      	movs	r2, #50	@ 0x32
 8004f10:	fb02 f303 	mul.w	r3, r2, r3
 8004f14:	4a1a      	ldr	r2, [pc, #104]	@ (8004f80 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004f16:	fba2 2303 	umull	r2, r3, r2, r3
 8004f1a:	0c9b      	lsrs	r3, r3, #18
 8004f1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f1e:	e002      	b.n	8004f26 <HAL_PWREx_ControlVoltageScaling+0x4a>
      {
        wait_loop_index--;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	3b01      	subs	r3, #1
 8004f24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f26:	4b14      	ldr	r3, [pc, #80]	@ (8004f78 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f32:	d102      	bne.n	8004f3a <HAL_PWREx_ControlVoltageScaling+0x5e>
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1f2      	bne.n	8004f20 <HAL_PWREx_ControlVoltageScaling+0x44>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f3a:	4b0f      	ldr	r3, [pc, #60]	@ (8004f78 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f46:	d110      	bne.n	8004f6a <HAL_PWREx_ControlVoltageScaling+0x8e>
      {
        return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e00f      	b.n	8004f6c <HAL_PWREx_ControlVoltageScaling+0x90>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8004f78 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004f54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f58:	d007      	beq.n	8004f6a <HAL_PWREx_ControlVoltageScaling+0x8e>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004f5a:	4b07      	ldr	r3, [pc, #28]	@ (8004f78 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004f62:	4a05      	ldr	r2, [pc, #20]	@ (8004f78 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8004f64:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004f68:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }

  return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3714      	adds	r7, #20
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bc80      	pop	{r7}
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	58000400 	.word	0x58000400
 8004f7c:	20000070 	.word	0x20000070
 8004f80:	431bde83 	.word	0x431bde83

08004f84 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8004f84:	b480      	push	{r7}
 8004f86:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8004f88:	4b04      	ldr	r3, [pc, #16]	@ (8004f9c <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a03      	ldr	r2, [pc, #12]	@ (8004f9c <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8004f8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004f92:	6013      	str	r3, [r2, #0]
}
 8004f94:	bf00      	nop
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bc80      	pop	{r7}
 8004f9a:	4770      	bx	lr
 8004f9c:	58000400 	.word	0x58000400

08004fa0 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8004fa6:	4b16      	ldr	r3, [pc, #88]	@ (8005000 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a15      	ldr	r2, [pc, #84]	@ (8005000 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004fac:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004fb0:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8004fb2:	4b14      	ldr	r3, [pc, #80]	@ (8005004 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2232      	movs	r2, #50	@ 0x32
 8004fb8:	fb02 f303 	mul.w	r3, r2, r3
 8004fbc:	4a12      	ldr	r2, [pc, #72]	@ (8005008 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8004fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc2:	0c9b      	lsrs	r3, r3, #18
 8004fc4:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004fc6:	e002      	b.n	8004fce <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	3b01      	subs	r3, #1
 8004fcc:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004fce:	4b0c      	ldr	r3, [pc, #48]	@ (8005000 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fd6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fda:	d102      	bne.n	8004fe2 <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1f2      	bne.n	8004fc8 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8004fe2:	4b07      	ldr	r3, [pc, #28]	@ (8005000 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fee:	d101      	bne.n	8004ff4 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e000      	b.n	8004ff6 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bc80      	pop	{r7}
 8004ffe:	4770      	bx	lr
 8005000:	58000400 	.word	0x58000400
 8005004:	20000070 	.word	0x20000070
 8005008:	431bde83 	.word	0x431bde83

0800500c <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	4603      	mov	r3, r0
 8005014:	71fb      	strb	r3, [r7, #7]
  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP0);

#else
  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 8005016:	4b0f      	ldr	r3, [pc, #60]	@ (8005054 <HAL_PWREx_EnterSTOP0Mode+0x48>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a0e      	ldr	r2, [pc, #56]	@ (8005054 <HAL_PWREx_EnterSTOP0Mode+0x48>)
 800501c:	f023 0307 	bic.w	r3, r3, #7
 8005020:	6013      	str	r3, [r2, #0]

#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005022:	4b0d      	ldr	r3, [pc, #52]	@ (8005058 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	4a0c      	ldr	r2, [pc, #48]	@ (8005058 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8005028:	f043 0304 	orr.w	r3, r3, #4
 800502c:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800502e:	79fb      	ldrb	r3, [r7, #7]
 8005030:	2b01      	cmp	r3, #1
 8005032:	d101      	bne.n	8005038 <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005034:	bf30      	wfi
 8005036:	e002      	b.n	800503e <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8005038:	bf40      	sev
    __WFE();
 800503a:	bf20      	wfe
    __WFE();
 800503c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800503e:	4b06      	ldr	r3, [pc, #24]	@ (8005058 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	4a05      	ldr	r2, [pc, #20]	@ (8005058 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8005044:	f023 0304 	bic.w	r3, r3, #4
 8005048:	6113      	str	r3, [r2, #16]
}
 800504a:	bf00      	nop
 800504c:	370c      	adds	r7, #12
 800504e:	46bd      	mov	sp, r7
 8005050:	bc80      	pop	{r7}
 8005052:	4770      	bx	lr
 8005054:	58000400 	.word	0x58000400
 8005058:	e000ed00 	.word	0xe000ed00

0800505c <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	4603      	mov	r3, r0
 8005064:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8005066:	4b10      	ldr	r3, [pc, #64]	@ (80050a8 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f023 0307 	bic.w	r3, r3, #7
 800506e:	4a0e      	ldr	r2, [pc, #56]	@ (80050a8 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8005070:	f043 0302 	orr.w	r3, r3, #2
 8005074:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005076:	4b0d      	ldr	r3, [pc, #52]	@ (80050ac <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	4a0c      	ldr	r2, [pc, #48]	@ (80050ac <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800507c:	f043 0304 	orr.w	r3, r3, #4
 8005080:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8005082:	79fb      	ldrb	r3, [r7, #7]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d101      	bne.n	800508c <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005088:	bf30      	wfi
 800508a:	e002      	b.n	8005092 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800508c:	bf40      	sev
    __WFE();
 800508e:	bf20      	wfe
    __WFE();
 8005090:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005092:	4b06      	ldr	r3, [pc, #24]	@ (80050ac <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	4a05      	ldr	r2, [pc, #20]	@ (80050ac <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005098:	f023 0304 	bic.w	r3, r3, #4
 800509c:	6113      	str	r3, [r2, #16]
}
 800509e:	bf00      	nop
 80050a0:	370c      	adds	r7, #12
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bc80      	pop	{r7}
 80050a6:	4770      	bx	lr
 80050a8:	58000400 	.word	0x58000400
 80050ac:	e000ed00 	.word	0xe000ed00

080050b0 <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if (__HAL_PWR_PVD_EXTI_GET_FLAG() != 0UL)
 80050b4:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80050b8:	f7ff fec8 	bl	8004e4c <LL_EXTI_ReadFlag_0_31>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d005      	beq.n	80050ce <HAL_PWREx_PVD_PVM_IRQHandler+0x1e>
  {
    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 80050c2:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80050c6:	f7ff fee1 	bl	8004e8c <LL_EXTI_ClearFlag_0_31>

    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 80050ca:	f016 fb65 	bl	801b798 <HAL_PWR_PVDCallback>
  }

  if (__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0UL)
 80050ce:	2004      	movs	r0, #4
 80050d0:	f7ff fecc 	bl	8004e6c <LL_EXTI_ReadFlag_32_63>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d004      	beq.n	80050e4 <HAL_PWREx_PVD_PVM_IRQHandler+0x34>
  {
    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 80050da:	2004      	movs	r0, #4
 80050dc:	f7ff fee4 	bl	8004ea8 <LL_EXTI_ClearFlag_32_63>

    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 80050e0:	f000 f802 	bl	80050e8 <HAL_PWREx_PVM3Callback>
  }
}
 80050e4:	bf00      	nop
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 80050e8:	b480      	push	{r7}
 80050ea:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 80050ec:	bf00      	nop
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bc80      	pop	{r7}
 80050f2:	4770      	bx	lr

080050f4 <LL_PWR_IsEnabledBkUpAccess>:
{
 80050f4:	b480      	push	{r7}
 80050f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80050f8:	4b06      	ldr	r3, [pc, #24]	@ (8005114 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005100:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005104:	d101      	bne.n	800510a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8005106:	2301      	movs	r3, #1
 8005108:	e000      	b.n	800510c <LL_PWR_IsEnabledBkUpAccess+0x18>
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	46bd      	mov	sp, r7
 8005110:	bc80      	pop	{r7}
 8005112:	4770      	bx	lr
 8005114:	58000400 	.word	0x58000400

08005118 <LL_RCC_HSE_EnableTcxo>:
{
 8005118:	b480      	push	{r7}
 800511a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800511c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005126:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800512a:	6013      	str	r3, [r2, #0]
}
 800512c:	bf00      	nop
 800512e:	46bd      	mov	sp, r7
 8005130:	bc80      	pop	{r7}
 8005132:	4770      	bx	lr

08005134 <LL_RCC_HSE_DisableTcxo>:
{
 8005134:	b480      	push	{r7}
 8005136:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005138:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005142:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005146:	6013      	str	r3, [r2, #0]
}
 8005148:	bf00      	nop
 800514a:	46bd      	mov	sp, r7
 800514c:	bc80      	pop	{r7}
 800514e:	4770      	bx	lr

08005150 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005150:	b480      	push	{r7}
 8005152:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005154:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800515e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005162:	d101      	bne.n	8005168 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8005164:	2301      	movs	r3, #1
 8005166:	e000      	b.n	800516a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	46bd      	mov	sp, r7
 800516e:	bc80      	pop	{r7}
 8005170:	4770      	bx	lr

08005172 <LL_RCC_HSE_Enable>:
{
 8005172:	b480      	push	{r7}
 8005174:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005176:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005180:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005184:	6013      	str	r3, [r2, #0]
}
 8005186:	bf00      	nop
 8005188:	46bd      	mov	sp, r7
 800518a:	bc80      	pop	{r7}
 800518c:	4770      	bx	lr

0800518e <LL_RCC_HSE_Disable>:
{
 800518e:	b480      	push	{r7}
 8005190:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8005192:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800519c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051a0:	6013      	str	r3, [r2, #0]
}
 80051a2:	bf00      	nop
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bc80      	pop	{r7}
 80051a8:	4770      	bx	lr

080051aa <LL_RCC_HSE_IsReady>:
{
 80051aa:	b480      	push	{r7}
 80051ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80051ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80051bc:	d101      	bne.n	80051c2 <LL_RCC_HSE_IsReady+0x18>
 80051be:	2301      	movs	r3, #1
 80051c0:	e000      	b.n	80051c4 <LL_RCC_HSE_IsReady+0x1a>
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bc80      	pop	{r7}
 80051ca:	4770      	bx	lr

080051cc <LL_RCC_HSI_Enable>:
{
 80051cc:	b480      	push	{r7}
 80051ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80051d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80051da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051de:	6013      	str	r3, [r2, #0]
}
 80051e0:	bf00      	nop
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bc80      	pop	{r7}
 80051e6:	4770      	bx	lr

080051e8 <LL_RCC_HSI_Disable>:
{
 80051e8:	b480      	push	{r7}
 80051ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80051ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80051f6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051fa:	6013      	str	r3, [r2, #0]
}
 80051fc:	bf00      	nop
 80051fe:	46bd      	mov	sp, r7
 8005200:	bc80      	pop	{r7}
 8005202:	4770      	bx	lr

08005204 <LL_RCC_HSI_IsReady>:
{
 8005204:	b480      	push	{r7}
 8005206:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005208:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005212:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005216:	d101      	bne.n	800521c <LL_RCC_HSI_IsReady+0x18>
 8005218:	2301      	movs	r3, #1
 800521a:	e000      	b.n	800521e <LL_RCC_HSI_IsReady+0x1a>
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	46bd      	mov	sp, r7
 8005222:	bc80      	pop	{r7}
 8005224:	4770      	bx	lr

08005226 <LL_RCC_HSI_SetCalibTrimming>:
{
 8005226:	b480      	push	{r7}
 8005228:	b083      	sub	sp, #12
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800522e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	061b      	lsls	r3, r3, #24
 800523c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005240:	4313      	orrs	r3, r2
 8005242:	604b      	str	r3, [r1, #4]
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	bc80      	pop	{r7}
 800524c:	4770      	bx	lr

0800524e <LL_RCC_LSE_IsReady>:
{
 800524e:	b480      	push	{r7}
 8005250:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005252:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005256:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800525a:	f003 0302 	and.w	r3, r3, #2
 800525e:	2b02      	cmp	r3, #2
 8005260:	d101      	bne.n	8005266 <LL_RCC_LSE_IsReady+0x18>
 8005262:	2301      	movs	r3, #1
 8005264:	e000      	b.n	8005268 <LL_RCC_LSE_IsReady+0x1a>
 8005266:	2300      	movs	r3, #0
}
 8005268:	4618      	mov	r0, r3
 800526a:	46bd      	mov	sp, r7
 800526c:	bc80      	pop	{r7}
 800526e:	4770      	bx	lr

08005270 <LL_RCC_LSI_Enable>:
{
 8005270:	b480      	push	{r7}
 8005272:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8005274:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005278:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800527c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005280:	f043 0301 	orr.w	r3, r3, #1
 8005284:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8005288:	bf00      	nop
 800528a:	46bd      	mov	sp, r7
 800528c:	bc80      	pop	{r7}
 800528e:	4770      	bx	lr

08005290 <LL_RCC_LSI_Disable>:
{
 8005290:	b480      	push	{r7}
 8005292:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005294:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005298:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800529c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80052a0:	f023 0301 	bic.w	r3, r3, #1
 80052a4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80052a8:	bf00      	nop
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bc80      	pop	{r7}
 80052ae:	4770      	bx	lr

080052b0 <LL_RCC_LSI_IsReady>:
{
 80052b0:	b480      	push	{r7}
 80052b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80052b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052bc:	f003 0302 	and.w	r3, r3, #2
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d101      	bne.n	80052c8 <LL_RCC_LSI_IsReady+0x18>
 80052c4:	2301      	movs	r3, #1
 80052c6:	e000      	b.n	80052ca <LL_RCC_LSI_IsReady+0x1a>
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bc80      	pop	{r7}
 80052d0:	4770      	bx	lr

080052d2 <LL_RCC_MSI_Enable>:
{
 80052d2:	b480      	push	{r7}
 80052d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80052d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80052e0:	f043 0301 	orr.w	r3, r3, #1
 80052e4:	6013      	str	r3, [r2, #0]
}
 80052e6:	bf00      	nop
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bc80      	pop	{r7}
 80052ec:	4770      	bx	lr

080052ee <LL_RCC_MSI_Disable>:
{
 80052ee:	b480      	push	{r7}
 80052f0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80052f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80052fc:	f023 0301 	bic.w	r3, r3, #1
 8005300:	6013      	str	r3, [r2, #0]
}
 8005302:	bf00      	nop
 8005304:	46bd      	mov	sp, r7
 8005306:	bc80      	pop	{r7}
 8005308:	4770      	bx	lr

0800530a <LL_RCC_MSI_IsReady>:
{
 800530a:	b480      	push	{r7}
 800530c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800530e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0302 	and.w	r3, r3, #2
 8005318:	2b02      	cmp	r3, #2
 800531a:	d101      	bne.n	8005320 <LL_RCC_MSI_IsReady+0x16>
 800531c:	2301      	movs	r3, #1
 800531e:	e000      	b.n	8005322 <LL_RCC_MSI_IsReady+0x18>
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	46bd      	mov	sp, r7
 8005326:	bc80      	pop	{r7}
 8005328:	4770      	bx	lr

0800532a <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 800532a:	b480      	push	{r7}
 800532c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800532e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0308 	and.w	r3, r3, #8
 8005338:	2b08      	cmp	r3, #8
 800533a:	d101      	bne.n	8005340 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 800533c:	2301      	movs	r3, #1
 800533e:	e000      	b.n	8005342 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	46bd      	mov	sp, r7
 8005346:	bc80      	pop	{r7}
 8005348:	4770      	bx	lr

0800534a <LL_RCC_MSI_GetRange>:
{
 800534a:	b480      	push	{r7}
 800534c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800534e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005358:	4618      	mov	r0, r3
 800535a:	46bd      	mov	sp, r7
 800535c:	bc80      	pop	{r7}
 800535e:	4770      	bx	lr

08005360 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8005360:	b480      	push	{r7}
 8005362:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005364:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005368:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800536c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8005370:	4618      	mov	r0, r3
 8005372:	46bd      	mov	sp, r7
 8005374:	bc80      	pop	{r7}
 8005376:	4770      	bx	lr

08005378 <LL_RCC_MSI_SetCalibTrimming>:
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8005380:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	021b      	lsls	r3, r3, #8
 800538e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005392:	4313      	orrs	r3, r2
 8005394:	604b      	str	r3, [r1, #4]
}
 8005396:	bf00      	nop
 8005398:	370c      	adds	r7, #12
 800539a:	46bd      	mov	sp, r7
 800539c:	bc80      	pop	{r7}
 800539e:	4770      	bx	lr

080053a0 <LL_RCC_SetSysClkSource>:
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80053a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f023 0203 	bic.w	r2, r3, #3
 80053b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	608b      	str	r3, [r1, #8]
}
 80053bc:	bf00      	nop
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bc80      	pop	{r7}
 80053c4:	4770      	bx	lr

080053c6 <LL_RCC_GetSysClkSource>:
{
 80053c6:	b480      	push	{r7}
 80053c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80053ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	f003 030c 	and.w	r3, r3, #12
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bc80      	pop	{r7}
 80053da:	4770      	bx	lr

080053dc <LL_RCC_SetAHBPrescaler>:
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80053e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	608b      	str	r3, [r1, #8]
}
 80053f8:	bf00      	nop
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bc80      	pop	{r7}
 8005400:	4770      	bx	lr

08005402 <LL_C2_RCC_SetAHBPrescaler>:
{
 8005402:	b480      	push	{r7}
 8005404:	b083      	sub	sp, #12
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800540a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800540e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005412:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005416:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4313      	orrs	r3, r2
 800541e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8005422:	bf00      	nop
 8005424:	370c      	adds	r7, #12
 8005426:	46bd      	mov	sp, r7
 8005428:	bc80      	pop	{r7}
 800542a:	4770      	bx	lr

0800542c <LL_RCC_SetAHB3Prescaler>:
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005434:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005438:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800543c:	f023 020f 	bic.w	r2, r3, #15
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	091b      	lsrs	r3, r3, #4
 8005444:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005448:	4313      	orrs	r3, r2
 800544a:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800544e:	bf00      	nop
 8005450:	370c      	adds	r7, #12
 8005452:	46bd      	mov	sp, r7
 8005454:	bc80      	pop	{r7}
 8005456:	4770      	bx	lr

08005458 <LL_RCC_SetAPB1Prescaler>:
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005460:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800546a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4313      	orrs	r3, r2
 8005472:	608b      	str	r3, [r1, #8]
}
 8005474:	bf00      	nop
 8005476:	370c      	adds	r7, #12
 8005478:	46bd      	mov	sp, r7
 800547a:	bc80      	pop	{r7}
 800547c:	4770      	bx	lr

0800547e <LL_RCC_SetAPB2Prescaler>:
{
 800547e:	b480      	push	{r7}
 8005480:	b083      	sub	sp, #12
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005486:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005490:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4313      	orrs	r3, r2
 8005498:	608b      	str	r3, [r1, #8]
}
 800549a:	bf00      	nop
 800549c:	370c      	adds	r7, #12
 800549e:	46bd      	mov	sp, r7
 80054a0:	bc80      	pop	{r7}
 80054a2:	4770      	bx	lr

080054a4 <LL_RCC_GetAHBPrescaler>:
{
 80054a4:	b480      	push	{r7}
 80054a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80054a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bc80      	pop	{r7}
 80054b8:	4770      	bx	lr

080054ba <LL_RCC_GetAHB3Prescaler>:
{
 80054ba:	b480      	push	{r7}
 80054bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80054be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80054c6:	011b      	lsls	r3, r3, #4
 80054c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bc80      	pop	{r7}
 80054d2:	4770      	bx	lr

080054d4 <LL_RCC_GetAPB1Prescaler>:
{
 80054d4:	b480      	push	{r7}
 80054d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80054d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bc80      	pop	{r7}
 80054e8:	4770      	bx	lr

080054ea <LL_RCC_GetAPB2Prescaler>:
{
 80054ea:	b480      	push	{r7}
 80054ec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80054ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bc80      	pop	{r7}
 80054fe:	4770      	bx	lr

08005500 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005500:	b480      	push	{r7}
 8005502:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005504:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800550e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005512:	6013      	str	r3, [r2, #0]
}
 8005514:	bf00      	nop
 8005516:	46bd      	mov	sp, r7
 8005518:	bc80      	pop	{r7}
 800551a:	4770      	bx	lr

0800551c <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800551c:	b480      	push	{r7}
 800551e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005520:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800552a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800552e:	6013      	str	r3, [r2, #0]
}
 8005530:	bf00      	nop
 8005532:	46bd      	mov	sp, r7
 8005534:	bc80      	pop	{r7}
 8005536:	4770      	bx	lr

08005538 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005538:	b480      	push	{r7}
 800553a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800553c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005546:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800554a:	d101      	bne.n	8005550 <LL_RCC_PLL_IsReady+0x18>
 800554c:	2301      	movs	r3, #1
 800554e:	e000      	b.n	8005552 <LL_RCC_PLL_IsReady+0x1a>
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	46bd      	mov	sp, r7
 8005556:	bc80      	pop	{r7}
 8005558:	4770      	bx	lr

0800555a <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800555a:	b480      	push	{r7}
 800555c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800555e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	0a1b      	lsrs	r3, r3, #8
 8005566:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800556a:	4618      	mov	r0, r3
 800556c:	46bd      	mov	sp, r7
 800556e:	bc80      	pop	{r7}
 8005570:	4770      	bx	lr

08005572 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005572:	b480      	push	{r7}
 8005574:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005576:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8005580:	4618      	mov	r0, r3
 8005582:	46bd      	mov	sp, r7
 8005584:	bc80      	pop	{r7}
 8005586:	4770      	bx	lr

08005588 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005588:	b480      	push	{r7}
 800558a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800558c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8005596:	4618      	mov	r0, r3
 8005598:	46bd      	mov	sp, r7
 800559a:	bc80      	pop	{r7}
 800559c:	4770      	bx	lr

0800559e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800559e:	b480      	push	{r7}
 80055a0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80055a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	f003 0303 	and.w	r3, r3, #3
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bc80      	pop	{r7}
 80055b2:	4770      	bx	lr

080055b4 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80055b4:	b480      	push	{r7}
 80055b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80055b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055c6:	d101      	bne.n	80055cc <LL_RCC_IsActiveFlag_HPRE+0x18>
 80055c8:	2301      	movs	r3, #1
 80055ca:	e000      	b.n	80055ce <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bc80      	pop	{r7}
 80055d4:	4770      	bx	lr

080055d6 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80055d6:	b480      	push	{r7}
 80055d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80055da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055de:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80055e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055e6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055ea:	d101      	bne.n	80055f0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80055ec:	2301      	movs	r3, #1
 80055ee:	e000      	b.n	80055f2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bc80      	pop	{r7}
 80055f8:	4770      	bx	lr

080055fa <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80055fa:	b480      	push	{r7}
 80055fc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80055fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005602:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005606:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800560a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800560e:	d101      	bne.n	8005614 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005610:	2301      	movs	r3, #1
 8005612:	e000      	b.n	8005616 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	46bd      	mov	sp, r7
 800561a:	bc80      	pop	{r7}
 800561c:	4770      	bx	lr

0800561e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800561e:	b480      	push	{r7}
 8005620:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005622:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800562c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005630:	d101      	bne.n	8005636 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8005632:	2301      	movs	r3, #1
 8005634:	e000      	b.n	8005638 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	46bd      	mov	sp, r7
 800563c:	bc80      	pop	{r7}
 800563e:	4770      	bx	lr

08005640 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005640:	b480      	push	{r7}
 8005642:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005644:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800564e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005652:	d101      	bne.n	8005658 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8005654:	2301      	movs	r3, #1
 8005656:	e000      	b.n	800565a <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	46bd      	mov	sp, r7
 800565e:	bc80      	pop	{r7}
 8005660:	4770      	bx	lr
	...

08005664 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b088      	sub	sp, #32
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d101      	bne.n	8005676 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e36f      	b.n	8005d56 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005676:	f7ff fea6 	bl	80053c6 <LL_RCC_GetSysClkSource>
 800567a:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800567c:	f7ff ff8f 	bl	800559e <LL_RCC_PLL_GetMainSource>
 8005680:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0320 	and.w	r3, r3, #32
 800568a:	2b00      	cmp	r3, #0
 800568c:	f000 80c4 	beq.w	8005818 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d005      	beq.n	80056a2 <HAL_RCC_OscConfig+0x3e>
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	2b0c      	cmp	r3, #12
 800569a:	d176      	bne.n	800578a <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d173      	bne.n	800578a <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a1b      	ldr	r3, [r3, #32]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e353      	b.n	8005d56 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80056b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 0308 	and.w	r3, r3, #8
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d005      	beq.n	80056cc <HAL_RCC_OscConfig+0x68>
 80056c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80056ca:	e006      	b.n	80056da <HAL_RCC_OscConfig+0x76>
 80056cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056d4:	091b      	lsrs	r3, r3, #4
 80056d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80056da:	4293      	cmp	r3, r2
 80056dc:	d222      	bcs.n	8005724 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056e2:	4618      	mov	r0, r3
 80056e4:	f000 fd5a 	bl	800619c <RCC_SetFlashLatencyFromMSIRange>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d001      	beq.n	80056f2 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e331      	b.n	8005d56 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80056f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80056fc:	f043 0308 	orr.w	r3, r3, #8
 8005700:	6013      	str	r3, [r2, #0]
 8005702:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005710:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005714:	4313      	orrs	r3, r2
 8005716:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800571c:	4618      	mov	r0, r3
 800571e:	f7ff fe2b 	bl	8005378 <LL_RCC_MSI_SetCalibTrimming>
 8005722:	e021      	b.n	8005768 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005724:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800572e:	f043 0308 	orr.w	r3, r3, #8
 8005732:	6013      	str	r3, [r2, #0]
 8005734:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005742:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005746:	4313      	orrs	r3, r2
 8005748:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800574e:	4618      	mov	r0, r3
 8005750:	f7ff fe12 	bl	8005378 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005758:	4618      	mov	r0, r3
 800575a:	f000 fd1f 	bl	800619c <RCC_SetFlashLatencyFromMSIRange>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d001      	beq.n	8005768 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e2f6      	b.n	8005d56 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005768:	f000 fce0 	bl	800612c <HAL_RCC_GetHCLKFreq>
 800576c:	4603      	mov	r3, r0
 800576e:	4aa7      	ldr	r2, [pc, #668]	@ (8005a0c <HAL_RCC_OscConfig+0x3a8>)
 8005770:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8005772:	4ba7      	ldr	r3, [pc, #668]	@ (8005a10 <HAL_RCC_OscConfig+0x3ac>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4618      	mov	r0, r3
 8005778:	f7fb ffd0 	bl	800171c <HAL_InitTick>
 800577c:	4603      	mov	r3, r0
 800577e:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8005780:	7cfb      	ldrb	r3, [r7, #19]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d047      	beq.n	8005816 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8005786:	7cfb      	ldrb	r3, [r7, #19]
 8005788:	e2e5      	b.n	8005d56 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a1b      	ldr	r3, [r3, #32]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d02c      	beq.n	80057ec <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005792:	f7ff fd9e 	bl	80052d2 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005796:	f7fb ffcb 	bl	8001730 <HAL_GetTick>
 800579a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800579c:	e008      	b.n	80057b0 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800579e:	f7fb ffc7 	bl	8001730 <HAL_GetTick>
 80057a2:	4602      	mov	r2, r0
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d901      	bls.n	80057b0 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	e2d2      	b.n	8005d56 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 80057b0:	f7ff fdab 	bl	800530a <LL_RCC_MSI_IsReady>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d0f1      	beq.n	800579e <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80057ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80057c4:	f043 0308 	orr.w	r3, r3, #8
 80057c8:	6013      	str	r3, [r2, #0]
 80057ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057d8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80057dc:	4313      	orrs	r3, r2
 80057de:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7ff fdc7 	bl	8005378 <LL_RCC_MSI_SetCalibTrimming>
 80057ea:	e015      	b.n	8005818 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80057ec:	f7ff fd7f 	bl	80052ee <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80057f0:	f7fb ff9e 	bl	8001730 <HAL_GetTick>
 80057f4:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80057f6:	e008      	b.n	800580a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80057f8:	f7fb ff9a 	bl	8001730 <HAL_GetTick>
 80057fc:	4602      	mov	r2, r0
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	2b02      	cmp	r3, #2
 8005804:	d901      	bls.n	800580a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e2a5      	b.n	8005d56 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 800580a:	f7ff fd7e 	bl	800530a <LL_RCC_MSI_IsReady>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1f1      	bne.n	80057f8 <HAL_RCC_OscConfig+0x194>
 8005814:	e000      	b.n	8005818 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8005816:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0301 	and.w	r3, r3, #1
 8005820:	2b00      	cmp	r3, #0
 8005822:	d058      	beq.n	80058d6 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	2b08      	cmp	r3, #8
 8005828:	d005      	beq.n	8005836 <HAL_RCC_OscConfig+0x1d2>
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	2b0c      	cmp	r3, #12
 800582e:	d108      	bne.n	8005842 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	2b03      	cmp	r3, #3
 8005834:	d105      	bne.n	8005842 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d14b      	bne.n	80058d6 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e289      	b.n	8005d56 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8005842:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005854:	4313      	orrs	r3, r2
 8005856:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005860:	d102      	bne.n	8005868 <HAL_RCC_OscConfig+0x204>
 8005862:	f7ff fc86 	bl	8005172 <LL_RCC_HSE_Enable>
 8005866:	e00d      	b.n	8005884 <HAL_RCC_OscConfig+0x220>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8005870:	d104      	bne.n	800587c <HAL_RCC_OscConfig+0x218>
 8005872:	f7ff fc51 	bl	8005118 <LL_RCC_HSE_EnableTcxo>
 8005876:	f7ff fc7c 	bl	8005172 <LL_RCC_HSE_Enable>
 800587a:	e003      	b.n	8005884 <HAL_RCC_OscConfig+0x220>
 800587c:	f7ff fc87 	bl	800518e <LL_RCC_HSE_Disable>
 8005880:	f7ff fc58 	bl	8005134 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d012      	beq.n	80058b2 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800588c:	f7fb ff50 	bl	8001730 <HAL_GetTick>
 8005890:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8005892:	e008      	b.n	80058a6 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005894:	f7fb ff4c 	bl	8001730 <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	2b64      	cmp	r3, #100	@ 0x64
 80058a0:	d901      	bls.n	80058a6 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e257      	b.n	8005d56 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 80058a6:	f7ff fc80 	bl	80051aa <LL_RCC_HSE_IsReady>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d0f1      	beq.n	8005894 <HAL_RCC_OscConfig+0x230>
 80058b0:	e011      	b.n	80058d6 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058b2:	f7fb ff3d 	bl	8001730 <HAL_GetTick>
 80058b6:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80058b8:	e008      	b.n	80058cc <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058ba:	f7fb ff39 	bl	8001730 <HAL_GetTick>
 80058be:	4602      	mov	r2, r0
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	2b64      	cmp	r3, #100	@ 0x64
 80058c6:	d901      	bls.n	80058cc <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80058c8:	2303      	movs	r3, #3
 80058ca:	e244      	b.n	8005d56 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80058cc:	f7ff fc6d 	bl	80051aa <LL_RCC_HSE_IsReady>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1f1      	bne.n	80058ba <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 0302 	and.w	r3, r3, #2
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d046      	beq.n	8005970 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	2b04      	cmp	r3, #4
 80058e6:	d005      	beq.n	80058f4 <HAL_RCC_OscConfig+0x290>
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	2b0c      	cmp	r3, #12
 80058ec:	d10e      	bne.n	800590c <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d10b      	bne.n	800590c <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d101      	bne.n	8005900 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e22a      	b.n	8005d56 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	695b      	ldr	r3, [r3, #20]
 8005904:	4618      	mov	r0, r3
 8005906:	f7ff fc8e 	bl	8005226 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800590a:	e031      	b.n	8005970 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d019      	beq.n	8005948 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005914:	f7ff fc5a 	bl	80051cc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005918:	f7fb ff0a 	bl	8001730 <HAL_GetTick>
 800591c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800591e:	e008      	b.n	8005932 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005920:	f7fb ff06 	bl	8001730 <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	2b02      	cmp	r3, #2
 800592c:	d901      	bls.n	8005932 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e211      	b.n	8005d56 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8005932:	f7ff fc67 	bl	8005204 <LL_RCC_HSI_IsReady>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d0f1      	beq.n	8005920 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	695b      	ldr	r3, [r3, #20]
 8005940:	4618      	mov	r0, r3
 8005942:	f7ff fc70 	bl	8005226 <LL_RCC_HSI_SetCalibTrimming>
 8005946:	e013      	b.n	8005970 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005948:	f7ff fc4e 	bl	80051e8 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800594c:	f7fb fef0 	bl	8001730 <HAL_GetTick>
 8005950:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8005952:	e008      	b.n	8005966 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005954:	f7fb feec 	bl	8001730 <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	2b02      	cmp	r3, #2
 8005960:	d901      	bls.n	8005966 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e1f7      	b.n	8005d56 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005966:	f7ff fc4d 	bl	8005204 <LL_RCC_HSI_IsReady>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1f1      	bne.n	8005954 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0308 	and.w	r3, r3, #8
 8005978:	2b00      	cmp	r3, #0
 800597a:	d06e      	beq.n	8005a5a <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	699b      	ldr	r3, [r3, #24]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d056      	beq.n	8005a32 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8005984:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005988:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800598c:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	69da      	ldr	r2, [r3, #28]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f003 0310 	and.w	r3, r3, #16
 8005998:	429a      	cmp	r2, r3
 800599a:	d031      	beq.n	8005a00 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f003 0302 	and.w	r3, r3, #2
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d006      	beq.n	80059b4 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d101      	bne.n	80059b4 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e1d0      	b.n	8005d56 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f003 0301 	and.w	r3, r3, #1
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d013      	beq.n	80059e6 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80059be:	f7ff fc67 	bl	8005290 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80059c2:	f7fb feb5 	bl	8001730 <HAL_GetTick>
 80059c6:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80059c8:	e008      	b.n	80059dc <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059ca:	f7fb feb1 	bl	8001730 <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	2b11      	cmp	r3, #17
 80059d6:	d901      	bls.n	80059dc <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e1bc      	b.n	8005d56 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80059dc:	f7ff fc68 	bl	80052b0 <LL_RCC_LSI_IsReady>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1f1      	bne.n	80059ca <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80059e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80059ee:	f023 0210 	bic.w	r2, r3, #16
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	69db      	ldr	r3, [r3, #28]
 80059f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80059fa:	4313      	orrs	r3, r2
 80059fc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a00:	f7ff fc36 	bl	8005270 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a04:	f7fb fe94 	bl	8001730 <HAL_GetTick>
 8005a08:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8005a0a:	e00c      	b.n	8005a26 <HAL_RCC_OscConfig+0x3c2>
 8005a0c:	20000070 	.word	0x20000070
 8005a10:	20000074 	.word	0x20000074
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a14:	f7fb fe8c 	bl	8001730 <HAL_GetTick>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	2b11      	cmp	r3, #17
 8005a20:	d901      	bls.n	8005a26 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e197      	b.n	8005d56 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8005a26:	f7ff fc43 	bl	80052b0 <LL_RCC_LSI_IsReady>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d0f1      	beq.n	8005a14 <HAL_RCC_OscConfig+0x3b0>
 8005a30:	e013      	b.n	8005a5a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a32:	f7ff fc2d 	bl	8005290 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a36:	f7fb fe7b 	bl	8001730 <HAL_GetTick>
 8005a3a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8005a3c:	e008      	b.n	8005a50 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a3e:	f7fb fe77 	bl	8001730 <HAL_GetTick>
 8005a42:	4602      	mov	r2, r0
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	2b11      	cmp	r3, #17
 8005a4a:	d901      	bls.n	8005a50 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e182      	b.n	8005d56 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8005a50:	f7ff fc2e 	bl	80052b0 <LL_RCC_LSI_IsReady>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1f1      	bne.n	8005a3e <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 0304 	and.w	r3, r3, #4
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	f000 80d8 	beq.w	8005c18 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005a68:	f7ff fb44 	bl	80050f4 <LL_PWR_IsEnabledBkUpAccess>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d113      	bne.n	8005a9a <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005a72:	f7ff f95d 	bl	8004d30 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a76:	f7fb fe5b 	bl	8001730 <HAL_GetTick>
 8005a7a:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005a7c:	e008      	b.n	8005a90 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a7e:	f7fb fe57 	bl	8001730 <HAL_GetTick>
 8005a82:	4602      	mov	r2, r0
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	d901      	bls.n	8005a90 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e162      	b.n	8005d56 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005a90:	f7ff fb30 	bl	80050f4 <LL_PWR_IsEnabledBkUpAccess>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d0f1      	beq.n	8005a7e <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d07b      	beq.n	8005b9a <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	2b85      	cmp	r3, #133	@ 0x85
 8005aa8:	d003      	beq.n	8005ab2 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	2b05      	cmp	r3, #5
 8005ab0:	d109      	bne.n	8005ac6 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005ab2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005abe:	f043 0304 	orr.w	r3, r3, #4
 8005ac2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ac6:	f7fb fe33 	bl	8001730 <HAL_GetTick>
 8005aca:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005acc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ad4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005ad8:	f043 0301 	orr.w	r3, r3, #1
 8005adc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005ae0:	e00a      	b.n	8005af8 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ae2:	f7fb fe25 	bl	8001730 <HAL_GetTick>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	1ad3      	subs	r3, r2, r3
 8005aec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d901      	bls.n	8005af8 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	e12e      	b.n	8005d56 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005af8:	f7ff fba9 	bl	800524e <LL_RCC_LSE_IsReady>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d0ef      	beq.n	8005ae2 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	2b81      	cmp	r3, #129	@ 0x81
 8005b08:	d003      	beq.n	8005b12 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	2b85      	cmp	r3, #133	@ 0x85
 8005b10:	d121      	bne.n	8005b56 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b12:	f7fb fe0d 	bl	8001730 <HAL_GetTick>
 8005b16:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005b18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b20:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005b24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005b2c:	e00a      	b.n	8005b44 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b2e:	f7fb fdff 	bl	8001730 <HAL_GetTick>
 8005b32:	4602      	mov	r2, r0
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d901      	bls.n	8005b44 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8005b40:	2303      	movs	r3, #3
 8005b42:	e108      	b.n	8005d56 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005b44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d0ec      	beq.n	8005b2e <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005b54:	e060      	b.n	8005c18 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b56:	f7fb fdeb 	bl	8001730 <HAL_GetTick>
 8005b5a:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005b5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b64:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005b68:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b6c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005b70:	e00a      	b.n	8005b88 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b72:	f7fb fddd 	bl	8001730 <HAL_GetTick>
 8005b76:	4602      	mov	r2, r0
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d901      	bls.n	8005b88 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	e0e6      	b.n	8005d56 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005b88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005b90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d1ec      	bne.n	8005b72 <HAL_RCC_OscConfig+0x50e>
 8005b98:	e03e      	b.n	8005c18 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b9a:	f7fb fdc9 	bl	8001730 <HAL_GetTick>
 8005b9e:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005ba0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ba8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005bac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005bb4:	e00a      	b.n	8005bcc <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bb6:	f7fb fdbb 	bl	8001730 <HAL_GetTick>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	1ad3      	subs	r3, r2, r3
 8005bc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d901      	bls.n	8005bcc <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	e0c4      	b.n	8005d56 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005bcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d1ec      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005bdc:	f7fb fda8 	bl	8001730 <HAL_GetTick>
 8005be0:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005be2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005bee:	f023 0301 	bic.w	r3, r3, #1
 8005bf2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005bf6:	e00a      	b.n	8005c0e <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005bf8:	f7fb fd9a 	bl	8001730 <HAL_GetTick>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d901      	bls.n	8005c0e <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	e0a3      	b.n	8005d56 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005c0e:	f7ff fb1e 	bl	800524e <LL_RCC_LSE_IsReady>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1ef      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	f000 8099 	beq.w	8005d54 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	2b0c      	cmp	r3, #12
 8005c26:	d06c      	beq.n	8005d02 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d14b      	bne.n	8005cc8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c30:	f7ff fc74 	bl	800551c <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c34:	f7fb fd7c 	bl	8001730 <HAL_GetTick>
 8005c38:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005c3a:	e008      	b.n	8005c4e <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c3c:	f7fb fd78 	bl	8001730 <HAL_GetTick>
 8005c40:	4602      	mov	r2, r0
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	2b0a      	cmp	r3, #10
 8005c48:	d901      	bls.n	8005c4e <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e083      	b.n	8005d56 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8005c4e:	f7ff fc73 	bl	8005538 <LL_RCC_PLL_IsReady>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1f1      	bne.n	8005c3c <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c5c:	68da      	ldr	r2, [r3, #12]
 8005c5e:	4b40      	ldr	r3, [pc, #256]	@ (8005d60 <HAL_RCC_OscConfig+0x6fc>)
 8005c60:	4013      	ands	r3, r2
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005c6a:	4311      	orrs	r1, r2
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005c70:	0212      	lsls	r2, r2, #8
 8005c72:	4311      	orrs	r1, r2
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005c78:	4311      	orrs	r1, r2
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005c7e:	4311      	orrs	r1, r2
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005c84:	430a      	orrs	r2, r1
 8005c86:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c8e:	f7ff fc37 	bl	8005500 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ca0:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ca2:	f7fb fd45 	bl	8001730 <HAL_GetTick>
 8005ca6:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8005ca8:	e008      	b.n	8005cbc <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005caa:	f7fb fd41 	bl	8001730 <HAL_GetTick>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	2b0a      	cmp	r3, #10
 8005cb6:	d901      	bls.n	8005cbc <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e04c      	b.n	8005d56 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8005cbc:	f7ff fc3c 	bl	8005538 <LL_RCC_PLL_IsReady>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d0f1      	beq.n	8005caa <HAL_RCC_OscConfig+0x646>
 8005cc6:	e045      	b.n	8005d54 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cc8:	f7ff fc28 	bl	800551c <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ccc:	f7fb fd30 	bl	8001730 <HAL_GetTick>
 8005cd0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005cd2:	e008      	b.n	8005ce6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cd4:	f7fb fd2c 	bl	8001730 <HAL_GetTick>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	2b0a      	cmp	r3, #10
 8005ce0:	d901      	bls.n	8005ce6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e037      	b.n	8005d56 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8005ce6:	f7ff fc27 	bl	8005538 <LL_RCC_PLL_IsReady>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d1f1      	bne.n	8005cd4 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005cf0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005cf4:	68da      	ldr	r2, [r3, #12]
 8005cf6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005cfa:	4b1a      	ldr	r3, [pc, #104]	@ (8005d64 <HAL_RCC_OscConfig+0x700>)
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	60cb      	str	r3, [r1, #12]
 8005d00:	e028      	b.n	8005d54 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d101      	bne.n	8005d0e <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e023      	b.n	8005d56 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	f003 0203 	and.w	r2, r3, #3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d115      	bne.n	8005d50 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d10e      	bne.n	8005d50 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d3c:	021b      	lsls	r3, r3, #8
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d106      	bne.n	8005d50 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d001      	beq.n	8005d54 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e000      	b.n	8005d56 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3720      	adds	r7, #32
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	11c1808c 	.word	0x11c1808c
 8005d64:	eefefffc 	.word	0xeefefffc

08005d68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d101      	bne.n	8005d7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e12c      	b.n	8005fd6 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d7c:	4b98      	ldr	r3, [pc, #608]	@ (8005fe0 <HAL_RCC_ClockConfig+0x278>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 0307 	and.w	r3, r3, #7
 8005d84:	683a      	ldr	r2, [r7, #0]
 8005d86:	429a      	cmp	r2, r3
 8005d88:	d91b      	bls.n	8005dc2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d8a:	4b95      	ldr	r3, [pc, #596]	@ (8005fe0 <HAL_RCC_ClockConfig+0x278>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f023 0207 	bic.w	r2, r3, #7
 8005d92:	4993      	ldr	r1, [pc, #588]	@ (8005fe0 <HAL_RCC_ClockConfig+0x278>)
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d9a:	f7fb fcc9 	bl	8001730 <HAL_GetTick>
 8005d9e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005da0:	e008      	b.n	8005db4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005da2:	f7fb fcc5 	bl	8001730 <HAL_GetTick>
 8005da6:	4602      	mov	r2, r0
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	1ad3      	subs	r3, r2, r3
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d901      	bls.n	8005db4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005db0:	2303      	movs	r3, #3
 8005db2:	e110      	b.n	8005fd6 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005db4:	4b8a      	ldr	r3, [pc, #552]	@ (8005fe0 <HAL_RCC_ClockConfig+0x278>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0307 	and.w	r3, r3, #7
 8005dbc:	683a      	ldr	r2, [r7, #0]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d1ef      	bne.n	8005da2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 0302 	and.w	r3, r3, #2
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d016      	beq.n	8005dfc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f7ff fb02 	bl	80053dc <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005dd8:	f7fb fcaa 	bl	8001730 <HAL_GetTick>
 8005ddc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005dde:	e008      	b.n	8005df2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005de0:	f7fb fca6 	bl	8001730 <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	2b02      	cmp	r3, #2
 8005dec:	d901      	bls.n	8005df2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e0f1      	b.n	8005fd6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005df2:	f7ff fbdf 	bl	80055b4 <LL_RCC_IsActiveFlag_HPRE>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d0f1      	beq.n	8005de0 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0320 	and.w	r3, r3, #32
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d016      	beq.n	8005e36 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	695b      	ldr	r3, [r3, #20]
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f7ff faf8 	bl	8005402 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005e12:	f7fb fc8d 	bl	8001730 <HAL_GetTick>
 8005e16:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005e18:	e008      	b.n	8005e2c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005e1a:	f7fb fc89 	bl	8001730 <HAL_GetTick>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	1ad3      	subs	r3, r2, r3
 8005e24:	2b02      	cmp	r3, #2
 8005e26:	d901      	bls.n	8005e2c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005e28:	2303      	movs	r3, #3
 8005e2a:	e0d4      	b.n	8005fd6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005e2c:	f7ff fbd3 	bl	80055d6 <LL_RCC_IsActiveFlag_C2HPRE>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d0f1      	beq.n	8005e1a <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d016      	beq.n	8005e70 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	699b      	ldr	r3, [r3, #24]
 8005e46:	4618      	mov	r0, r3
 8005e48:	f7ff faf0 	bl	800542c <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005e4c:	f7fb fc70 	bl	8001730 <HAL_GetTick>
 8005e50:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005e52:	e008      	b.n	8005e66 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005e54:	f7fb fc6c 	bl	8001730 <HAL_GetTick>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	2b02      	cmp	r3, #2
 8005e60:	d901      	bls.n	8005e66 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	e0b7      	b.n	8005fd6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005e66:	f7ff fbc8 	bl	80055fa <LL_RCC_IsActiveFlag_SHDHPRE>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d0f1      	beq.n	8005e54 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0304 	and.w	r3, r3, #4
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d016      	beq.n	8005eaa <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	4618      	mov	r0, r3
 8005e82:	f7ff fae9 	bl	8005458 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005e86:	f7fb fc53 	bl	8001730 <HAL_GetTick>
 8005e8a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005e8c:	e008      	b.n	8005ea0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005e8e:	f7fb fc4f 	bl	8001730 <HAL_GetTick>
 8005e92:	4602      	mov	r2, r0
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	1ad3      	subs	r3, r2, r3
 8005e98:	2b02      	cmp	r3, #2
 8005e9a:	d901      	bls.n	8005ea0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	e09a      	b.n	8005fd6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005ea0:	f7ff fbbd 	bl	800561e <LL_RCC_IsActiveFlag_PPRE1>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d0f1      	beq.n	8005e8e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 0308 	and.w	r3, r3, #8
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d017      	beq.n	8005ee6 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	691b      	ldr	r3, [r3, #16]
 8005eba:	00db      	lsls	r3, r3, #3
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f7ff fade 	bl	800547e <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005ec2:	f7fb fc35 	bl	8001730 <HAL_GetTick>
 8005ec6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005ec8:	e008      	b.n	8005edc <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005eca:	f7fb fc31 	bl	8001730 <HAL_GetTick>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	2b02      	cmp	r3, #2
 8005ed6:	d901      	bls.n	8005edc <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005ed8:	2303      	movs	r3, #3
 8005eda:	e07c      	b.n	8005fd6 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005edc:	f7ff fbb0 	bl	8005640 <LL_RCC_IsActiveFlag_PPRE2>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d0f1      	beq.n	8005eca <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 0301 	and.w	r3, r3, #1
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d043      	beq.n	8005f7a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d106      	bne.n	8005f08 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005efa:	f7ff f956 	bl	80051aa <LL_RCC_HSE_IsReady>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d11e      	bne.n	8005f42 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005f04:	2301      	movs	r3, #1
 8005f06:	e066      	b.n	8005fd6 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	2b03      	cmp	r3, #3
 8005f0e:	d106      	bne.n	8005f1e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005f10:	f7ff fb12 	bl	8005538 <LL_RCC_PLL_IsReady>
 8005f14:	4603      	mov	r3, r0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d113      	bne.n	8005f42 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	e05b      	b.n	8005fd6 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d106      	bne.n	8005f34 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005f26:	f7ff f9f0 	bl	800530a <LL_RCC_MSI_IsReady>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d108      	bne.n	8005f42 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e050      	b.n	8005fd6 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005f34:	f7ff f966 	bl	8005204 <LL_RCC_HSI_IsReady>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d101      	bne.n	8005f42 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e049      	b.n	8005fd6 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	4618      	mov	r0, r3
 8005f48:	f7ff fa2a 	bl	80053a0 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f4c:	f7fb fbf0 	bl	8001730 <HAL_GetTick>
 8005f50:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f52:	e00a      	b.n	8005f6a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f54:	f7fb fbec 	bl	8001730 <HAL_GetTick>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d901      	bls.n	8005f6a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	e035      	b.n	8005fd6 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f6a:	f7ff fa2c 	bl	80053c6 <LL_RCC_GetSysClkSource>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	429a      	cmp	r2, r3
 8005f78:	d1ec      	bne.n	8005f54 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f7a:	4b19      	ldr	r3, [pc, #100]	@ (8005fe0 <HAL_RCC_ClockConfig+0x278>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 0307 	and.w	r3, r3, #7
 8005f82:	683a      	ldr	r2, [r7, #0]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d21b      	bcs.n	8005fc0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f88:	4b15      	ldr	r3, [pc, #84]	@ (8005fe0 <HAL_RCC_ClockConfig+0x278>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f023 0207 	bic.w	r2, r3, #7
 8005f90:	4913      	ldr	r1, [pc, #76]	@ (8005fe0 <HAL_RCC_ClockConfig+0x278>)
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f98:	f7fb fbca 	bl	8001730 <HAL_GetTick>
 8005f9c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f9e:	e008      	b.n	8005fb2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005fa0:	f7fb fbc6 	bl	8001730 <HAL_GetTick>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d901      	bls.n	8005fb2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e011      	b.n	8005fd6 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8005fe0 <HAL_RCC_ClockConfig+0x278>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 0307 	and.w	r3, r3, #7
 8005fba:	683a      	ldr	r2, [r7, #0]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d1ef      	bne.n	8005fa0 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005fc0:	f000 f8b4 	bl	800612c <HAL_RCC_GetHCLKFreq>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	4a07      	ldr	r2, [pc, #28]	@ (8005fe4 <HAL_RCC_ClockConfig+0x27c>)
 8005fc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8005fca:	4b07      	ldr	r3, [pc, #28]	@ (8005fe8 <HAL_RCC_ClockConfig+0x280>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f7fb fba4 	bl	800171c <HAL_InitTick>
 8005fd4:	4603      	mov	r3, r0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3710      	adds	r7, #16
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	58004000 	.word	0x58004000
 8005fe4:	20000070 	.word	0x20000070
 8005fe8:	20000074 	.word	0x20000074

08005fec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fec:	b590      	push	{r4, r7, lr}
 8005fee:	b087      	sub	sp, #28
 8005ff0:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ffa:	f7ff f9e4 	bl	80053c6 <LL_RCC_GetSysClkSource>
 8005ffe:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006000:	f7ff facd 	bl	800559e <LL_RCC_PLL_GetMainSource>
 8006004:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d005      	beq.n	8006018 <HAL_RCC_GetSysClockFreq+0x2c>
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	2b0c      	cmp	r3, #12
 8006010:	d139      	bne.n	8006086 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2b01      	cmp	r3, #1
 8006016:	d136      	bne.n	8006086 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8006018:	f7ff f987 	bl	800532a <LL_RCC_MSI_IsEnabledRangeSelect>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d115      	bne.n	800604e <HAL_RCC_GetSysClockFreq+0x62>
 8006022:	f7ff f982 	bl	800532a <LL_RCC_MSI_IsEnabledRangeSelect>
 8006026:	4603      	mov	r3, r0
 8006028:	2b01      	cmp	r3, #1
 800602a:	d106      	bne.n	800603a <HAL_RCC_GetSysClockFreq+0x4e>
 800602c:	f7ff f98d 	bl	800534a <LL_RCC_MSI_GetRange>
 8006030:	4603      	mov	r3, r0
 8006032:	0a1b      	lsrs	r3, r3, #8
 8006034:	f003 030f 	and.w	r3, r3, #15
 8006038:	e005      	b.n	8006046 <HAL_RCC_GetSysClockFreq+0x5a>
 800603a:	f7ff f991 	bl	8005360 <LL_RCC_MSI_GetRangeAfterStandby>
 800603e:	4603      	mov	r3, r0
 8006040:	0a1b      	lsrs	r3, r3, #8
 8006042:	f003 030f 	and.w	r3, r3, #15
 8006046:	4a36      	ldr	r2, [pc, #216]	@ (8006120 <HAL_RCC_GetSysClockFreq+0x134>)
 8006048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800604c:	e014      	b.n	8006078 <HAL_RCC_GetSysClockFreq+0x8c>
 800604e:	f7ff f96c 	bl	800532a <LL_RCC_MSI_IsEnabledRangeSelect>
 8006052:	4603      	mov	r3, r0
 8006054:	2b01      	cmp	r3, #1
 8006056:	d106      	bne.n	8006066 <HAL_RCC_GetSysClockFreq+0x7a>
 8006058:	f7ff f977 	bl	800534a <LL_RCC_MSI_GetRange>
 800605c:	4603      	mov	r3, r0
 800605e:	091b      	lsrs	r3, r3, #4
 8006060:	f003 030f 	and.w	r3, r3, #15
 8006064:	e005      	b.n	8006072 <HAL_RCC_GetSysClockFreq+0x86>
 8006066:	f7ff f97b 	bl	8005360 <LL_RCC_MSI_GetRangeAfterStandby>
 800606a:	4603      	mov	r3, r0
 800606c:	091b      	lsrs	r3, r3, #4
 800606e:	f003 030f 	and.w	r3, r3, #15
 8006072:	4a2b      	ldr	r2, [pc, #172]	@ (8006120 <HAL_RCC_GetSysClockFreq+0x134>)
 8006074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006078:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d115      	bne.n	80060ac <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006084:	e012      	b.n	80060ac <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	2b04      	cmp	r3, #4
 800608a:	d102      	bne.n	8006092 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800608c:	4b25      	ldr	r3, [pc, #148]	@ (8006124 <HAL_RCC_GetSysClockFreq+0x138>)
 800608e:	617b      	str	r3, [r7, #20]
 8006090:	e00c      	b.n	80060ac <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	2b08      	cmp	r3, #8
 8006096:	d109      	bne.n	80060ac <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8006098:	f7ff f85a 	bl	8005150 <LL_RCC_HSE_IsEnabledDiv2>
 800609c:	4603      	mov	r3, r0
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d102      	bne.n	80060a8 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80060a2:	4b20      	ldr	r3, [pc, #128]	@ (8006124 <HAL_RCC_GetSysClockFreq+0x138>)
 80060a4:	617b      	str	r3, [r7, #20]
 80060a6:	e001      	b.n	80060ac <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80060a8:	4b1f      	ldr	r3, [pc, #124]	@ (8006128 <HAL_RCC_GetSysClockFreq+0x13c>)
 80060aa:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80060ac:	f7ff f98b 	bl	80053c6 <LL_RCC_GetSysClkSource>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b0c      	cmp	r3, #12
 80060b4:	d12f      	bne.n	8006116 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80060b6:	f7ff fa72 	bl	800559e <LL_RCC_PLL_GetMainSource>
 80060ba:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2b02      	cmp	r3, #2
 80060c0:	d003      	beq.n	80060ca <HAL_RCC_GetSysClockFreq+0xde>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2b03      	cmp	r3, #3
 80060c6:	d003      	beq.n	80060d0 <HAL_RCC_GetSysClockFreq+0xe4>
 80060c8:	e00d      	b.n	80060e6 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80060ca:	4b16      	ldr	r3, [pc, #88]	@ (8006124 <HAL_RCC_GetSysClockFreq+0x138>)
 80060cc:	60fb      	str	r3, [r7, #12]
        break;
 80060ce:	e00d      	b.n	80060ec <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80060d0:	f7ff f83e 	bl	8005150 <LL_RCC_HSE_IsEnabledDiv2>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d102      	bne.n	80060e0 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80060da:	4b12      	ldr	r3, [pc, #72]	@ (8006124 <HAL_RCC_GetSysClockFreq+0x138>)
 80060dc:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80060de:	e005      	b.n	80060ec <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80060e0:	4b11      	ldr	r3, [pc, #68]	@ (8006128 <HAL_RCC_GetSysClockFreq+0x13c>)
 80060e2:	60fb      	str	r3, [r7, #12]
        break;
 80060e4:	e002      	b.n	80060ec <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	60fb      	str	r3, [r7, #12]
        break;
 80060ea:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80060ec:	f7ff fa35 	bl	800555a <LL_RCC_PLL_GetN>
 80060f0:	4602      	mov	r2, r0
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	fb03 f402 	mul.w	r4, r3, r2
 80060f8:	f7ff fa46 	bl	8005588 <LL_RCC_PLL_GetDivider>
 80060fc:	4603      	mov	r3, r0
 80060fe:	091b      	lsrs	r3, r3, #4
 8006100:	3301      	adds	r3, #1
 8006102:	fbb4 f4f3 	udiv	r4, r4, r3
 8006106:	f7ff fa34 	bl	8005572 <LL_RCC_PLL_GetR>
 800610a:	4603      	mov	r3, r0
 800610c:	0f5b      	lsrs	r3, r3, #29
 800610e:	3301      	adds	r3, #1
 8006110:	fbb4 f3f3 	udiv	r3, r4, r3
 8006114:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8006116:	697b      	ldr	r3, [r7, #20]
}
 8006118:	4618      	mov	r0, r3
 800611a:	371c      	adds	r7, #28
 800611c:	46bd      	mov	sp, r7
 800611e:	bd90      	pop	{r4, r7, pc}
 8006120:	08020fb4 	.word	0x08020fb4
 8006124:	00f42400 	.word	0x00f42400
 8006128:	01e84800 	.word	0x01e84800

0800612c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800612c:	b598      	push	{r3, r4, r7, lr}
 800612e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006130:	f7ff ff5c 	bl	8005fec <HAL_RCC_GetSysClockFreq>
 8006134:	4604      	mov	r4, r0
 8006136:	f7ff f9b5 	bl	80054a4 <LL_RCC_GetAHBPrescaler>
 800613a:	4603      	mov	r3, r0
 800613c:	091b      	lsrs	r3, r3, #4
 800613e:	f003 030f 	and.w	r3, r3, #15
 8006142:	4a03      	ldr	r2, [pc, #12]	@ (8006150 <HAL_RCC_GetHCLKFreq+0x24>)
 8006144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006148:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800614c:	4618      	mov	r0, r3
 800614e:	bd98      	pop	{r3, r4, r7, pc}
 8006150:	08020f54 	.word	0x08020f54

08006154 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006154:	b598      	push	{r3, r4, r7, lr}
 8006156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006158:	f7ff ffe8 	bl	800612c <HAL_RCC_GetHCLKFreq>
 800615c:	4604      	mov	r4, r0
 800615e:	f7ff f9b9 	bl	80054d4 <LL_RCC_GetAPB1Prescaler>
 8006162:	4603      	mov	r3, r0
 8006164:	0a1b      	lsrs	r3, r3, #8
 8006166:	4a03      	ldr	r2, [pc, #12]	@ (8006174 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800616c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006170:	4618      	mov	r0, r3
 8006172:	bd98      	pop	{r3, r4, r7, pc}
 8006174:	08020f94 	.word	0x08020f94

08006178 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006178:	b598      	push	{r3, r4, r7, lr}
 800617a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800617c:	f7ff ffd6 	bl	800612c <HAL_RCC_GetHCLKFreq>
 8006180:	4604      	mov	r4, r0
 8006182:	f7ff f9b2 	bl	80054ea <LL_RCC_GetAPB2Prescaler>
 8006186:	4603      	mov	r3, r0
 8006188:	0adb      	lsrs	r3, r3, #11
 800618a:	4a03      	ldr	r2, [pc, #12]	@ (8006198 <HAL_RCC_GetPCLK2Freq+0x20>)
 800618c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006190:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006194:	4618      	mov	r0, r3
 8006196:	bd98      	pop	{r3, r4, r7, pc}
 8006198:	08020f94 	.word	0x08020f94

0800619c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800619c:	b590      	push	{r4, r7, lr}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	091b      	lsrs	r3, r3, #4
 80061a8:	f003 030f 	and.w	r3, r3, #15
 80061ac:	4a10      	ldr	r2, [pc, #64]	@ (80061f0 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80061ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061b2:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80061b4:	f7ff f981 	bl	80054ba <LL_RCC_GetAHB3Prescaler>
 80061b8:	4603      	mov	r3, r0
 80061ba:	091b      	lsrs	r3, r3, #4
 80061bc:	f003 030f 	and.w	r3, r3, #15
 80061c0:	4a0c      	ldr	r2, [pc, #48]	@ (80061f4 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80061c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80061cc:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	4a09      	ldr	r2, [pc, #36]	@ (80061f8 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80061d2:	fba2 2303 	umull	r2, r3, r2, r3
 80061d6:	0c9c      	lsrs	r4, r3, #18
 80061d8:	f7fe fe74 	bl	8004ec4 <HAL_PWREx_GetVoltageRange>
 80061dc:	4603      	mov	r3, r0
 80061de:	4619      	mov	r1, r3
 80061e0:	4620      	mov	r0, r4
 80061e2:	f000 f80b 	bl	80061fc <RCC_SetFlashLatency>
 80061e6:	4603      	mov	r3, r0
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3714      	adds	r7, #20
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd90      	pop	{r4, r7, pc}
 80061f0:	08020fb4 	.word	0x08020fb4
 80061f4:	08020f54 	.word	0x08020f54
 80061f8:	431bde83 	.word	0x431bde83

080061fc <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b08e      	sub	sp, #56	@ 0x38
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8006206:	4a3a      	ldr	r2, [pc, #232]	@ (80062f0 <RCC_SetFlashLatency+0xf4>)
 8006208:	f107 0320 	add.w	r3, r7, #32
 800620c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006210:	6018      	str	r0, [r3, #0]
 8006212:	3304      	adds	r3, #4
 8006214:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8006216:	4a37      	ldr	r2, [pc, #220]	@ (80062f4 <RCC_SetFlashLatency+0xf8>)
 8006218:	f107 0318 	add.w	r3, r7, #24
 800621c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006220:	6018      	str	r0, [r3, #0]
 8006222:	3304      	adds	r3, #4
 8006224:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8006226:	4a34      	ldr	r2, [pc, #208]	@ (80062f8 <RCC_SetFlashLatency+0xfc>)
 8006228:	f107 030c 	add.w	r3, r7, #12
 800622c:	ca07      	ldmia	r2, {r0, r1, r2}
 800622e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006232:	2300      	movs	r3, #0
 8006234:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800623c:	d11b      	bne.n	8006276 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800623e:	2300      	movs	r3, #0
 8006240:	633b      	str	r3, [r7, #48]	@ 0x30
 8006242:	e014      	b.n	800626e <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006246:	005b      	lsls	r3, r3, #1
 8006248:	3338      	adds	r3, #56	@ 0x38
 800624a:	443b      	add	r3, r7
 800624c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8006250:	461a      	mov	r2, r3
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4293      	cmp	r3, r2
 8006256:	d807      	bhi.n	8006268 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	3338      	adds	r3, #56	@ 0x38
 800625e:	443b      	add	r3, r7
 8006260:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006264:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006266:	e021      	b.n	80062ac <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800626a:	3301      	adds	r3, #1
 800626c:	633b      	str	r3, [r7, #48]	@ 0x30
 800626e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006270:	2b02      	cmp	r3, #2
 8006272:	d9e7      	bls.n	8006244 <RCC_SetFlashLatency+0x48>
 8006274:	e01a      	b.n	80062ac <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006276:	2300      	movs	r3, #0
 8006278:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800627a:	e014      	b.n	80062a6 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800627c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800627e:	005b      	lsls	r3, r3, #1
 8006280:	3338      	adds	r3, #56	@ 0x38
 8006282:	443b      	add	r3, r7
 8006284:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8006288:	461a      	mov	r2, r3
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4293      	cmp	r3, r2
 800628e:	d807      	bhi.n	80062a0 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	3338      	adds	r3, #56	@ 0x38
 8006296:	443b      	add	r3, r7
 8006298:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800629c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800629e:	e005      	b.n	80062ac <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80062a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062a2:	3301      	adds	r3, #1
 80062a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062a8:	2b02      	cmp	r3, #2
 80062aa:	d9e7      	bls.n	800627c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80062ac:	4b13      	ldr	r3, [pc, #76]	@ (80062fc <RCC_SetFlashLatency+0x100>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f023 0207 	bic.w	r2, r3, #7
 80062b4:	4911      	ldr	r1, [pc, #68]	@ (80062fc <RCC_SetFlashLatency+0x100>)
 80062b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062b8:	4313      	orrs	r3, r2
 80062ba:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80062bc:	f7fb fa38 	bl	8001730 <HAL_GetTick>
 80062c0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80062c2:	e008      	b.n	80062d6 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80062c4:	f7fb fa34 	bl	8001730 <HAL_GetTick>
 80062c8:	4602      	mov	r2, r0
 80062ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	2b02      	cmp	r3, #2
 80062d0:	d901      	bls.n	80062d6 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e007      	b.n	80062e6 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80062d6:	4b09      	ldr	r3, [pc, #36]	@ (80062fc <RCC_SetFlashLatency+0x100>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 0307 	and.w	r3, r3, #7
 80062de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d1ef      	bne.n	80062c4 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3738      	adds	r7, #56	@ 0x38
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	08020a1c 	.word	0x08020a1c
 80062f4:	08020a24 	.word	0x08020a24
 80062f8:	08020a2c 	.word	0x08020a2c
 80062fc:	58004000 	.word	0x58004000

08006300 <LL_RCC_LSE_IsReady>:
{
 8006300:	b480      	push	{r7}
 8006302:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006304:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006308:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800630c:	f003 0302 	and.w	r3, r3, #2
 8006310:	2b02      	cmp	r3, #2
 8006312:	d101      	bne.n	8006318 <LL_RCC_LSE_IsReady+0x18>
 8006314:	2301      	movs	r3, #1
 8006316:	e000      	b.n	800631a <LL_RCC_LSE_IsReady+0x1a>
 8006318:	2300      	movs	r3, #0
}
 800631a:	4618      	mov	r0, r3
 800631c:	46bd      	mov	sp, r7
 800631e:	bc80      	pop	{r7}
 8006320:	4770      	bx	lr

08006322 <LL_RCC_SetUSARTClockSource>:
{
 8006322:	b480      	push	{r7}
 8006324:	b083      	sub	sp, #12
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800632a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800632e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	0c1b      	lsrs	r3, r3, #16
 8006336:	43db      	mvns	r3, r3
 8006338:	401a      	ands	r2, r3
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	b29b      	uxth	r3, r3
 800633e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006342:	4313      	orrs	r3, r2
 8006344:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006348:	bf00      	nop
 800634a:	370c      	adds	r7, #12
 800634c:	46bd      	mov	sp, r7
 800634e:	bc80      	pop	{r7}
 8006350:	4770      	bx	lr

08006352 <LL_RCC_SetI2SClockSource>:
{
 8006352:	b480      	push	{r7}
 8006354:	b083      	sub	sp, #12
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800635a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800635e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006362:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006366:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4313      	orrs	r3, r2
 800636e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006372:	bf00      	nop
 8006374:	370c      	adds	r7, #12
 8006376:	46bd      	mov	sp, r7
 8006378:	bc80      	pop	{r7}
 800637a:	4770      	bx	lr

0800637c <LL_RCC_SetLPUARTClockSource>:
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006384:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006388:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800638c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006390:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4313      	orrs	r3, r2
 8006398:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800639c:	bf00      	nop
 800639e:	370c      	adds	r7, #12
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bc80      	pop	{r7}
 80063a4:	4770      	bx	lr

080063a6 <LL_RCC_SetI2CClockSource>:
{
 80063a6:	b480      	push	{r7}
 80063a8:	b083      	sub	sp, #12
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80063ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063b2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	091b      	lsrs	r3, r3, #4
 80063ba:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80063be:	43db      	mvns	r3, r3
 80063c0:	401a      	ands	r2, r3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	011b      	lsls	r3, r3, #4
 80063c6:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80063ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80063ce:	4313      	orrs	r3, r2
 80063d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80063d4:	bf00      	nop
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	bc80      	pop	{r7}
 80063dc:	4770      	bx	lr

080063de <LL_RCC_SetLPTIMClockSource>:
{
 80063de:	b480      	push	{r7}
 80063e0:	b083      	sub	sp, #12
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80063e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80063ea:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	0c1b      	lsrs	r3, r3, #16
 80063f2:	041b      	lsls	r3, r3, #16
 80063f4:	43db      	mvns	r3, r3
 80063f6:	401a      	ands	r2, r3
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	041b      	lsls	r3, r3, #16
 80063fc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006400:	4313      	orrs	r3, r2
 8006402:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006406:	bf00      	nop
 8006408:	370c      	adds	r7, #12
 800640a:	46bd      	mov	sp, r7
 800640c:	bc80      	pop	{r7}
 800640e:	4770      	bx	lr

08006410 <LL_RCC_SetRNGClockSource>:
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006418:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800641c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006420:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006424:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4313      	orrs	r3, r2
 800642c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006430:	bf00      	nop
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	bc80      	pop	{r7}
 8006438:	4770      	bx	lr

0800643a <LL_RCC_SetADCClockSource>:
{
 800643a:	b480      	push	{r7}
 800643c:	b083      	sub	sp, #12
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006442:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006446:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800644a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800644e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4313      	orrs	r3, r2
 8006456:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800645a:	bf00      	nop
 800645c:	370c      	adds	r7, #12
 800645e:	46bd      	mov	sp, r7
 8006460:	bc80      	pop	{r7}
 8006462:	4770      	bx	lr

08006464 <LL_RCC_SetRTCClockSource>:
{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800646c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006470:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006474:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006478:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4313      	orrs	r3, r2
 8006480:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8006484:	bf00      	nop
 8006486:	370c      	adds	r7, #12
 8006488:	46bd      	mov	sp, r7
 800648a:	bc80      	pop	{r7}
 800648c:	4770      	bx	lr

0800648e <LL_RCC_GetRTCClockSource>:
{
 800648e:	b480      	push	{r7}
 8006490:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006492:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006496:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800649a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800649e:	4618      	mov	r0, r3
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bc80      	pop	{r7}
 80064a4:	4770      	bx	lr

080064a6 <LL_RCC_ForceBackupDomainReset>:
{
 80064a6:	b480      	push	{r7}
 80064a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80064aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80064b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80064be:	bf00      	nop
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bc80      	pop	{r7}
 80064c4:	4770      	bx	lr

080064c6 <LL_RCC_ReleaseBackupDomainReset>:
{
 80064c6:	b480      	push	{r7}
 80064c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80064ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80064ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80064d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064da:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80064de:	bf00      	nop
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bc80      	pop	{r7}
 80064e4:	4770      	bx	lr
	...

080064e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b086      	sub	sp, #24
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80064f0:	2300      	movs	r3, #0
 80064f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80064f4:	2300      	movs	r3, #0
 80064f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80064f8:	2300      	movs	r3, #0
 80064fa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006504:	2b00      	cmp	r3, #0
 8006506:	d058      	beq.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8006508:	f7fe fc12 	bl	8004d30 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800650c:	f7fb f910 	bl	8001730 <HAL_GetTick>
 8006510:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006512:	e009      	b.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006514:	f7fb f90c 	bl	8001730 <HAL_GetTick>
 8006518:	4602      	mov	r2, r0
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	1ad3      	subs	r3, r2, r3
 800651e:	2b02      	cmp	r3, #2
 8006520:	d902      	bls.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	74fb      	strb	r3, [r7, #19]
        break;
 8006526:	e006      	b.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006528:	4b7b      	ldr	r3, [pc, #492]	@ (8006718 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006530:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006534:	d1ee      	bne.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8006536:	7cfb      	ldrb	r3, [r7, #19]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d13c      	bne.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 800653c:	f7ff ffa7 	bl	800648e <LL_RCC_GetRTCClockSource>
 8006540:	4602      	mov	r2, r0
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006546:	429a      	cmp	r2, r3
 8006548:	d00f      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800654a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800654e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006552:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006556:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006558:	f7ff ffa5 	bl	80064a6 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 800655c:	f7ff ffb3 	bl	80064c6 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006560:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	f003 0302 	and.w	r3, r3, #2
 8006570:	2b00      	cmp	r3, #0
 8006572:	d014      	beq.n	800659e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006574:	f7fb f8dc 	bl	8001730 <HAL_GetTick>
 8006578:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800657a:	e00b      	b.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800657c:	f7fb f8d8 	bl	8001730 <HAL_GetTick>
 8006580:	4602      	mov	r2, r0
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	f241 3288 	movw	r2, #5000	@ 0x1388
 800658a:	4293      	cmp	r3, r2
 800658c:	d902      	bls.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800658e:	2303      	movs	r3, #3
 8006590:	74fb      	strb	r3, [r7, #19]
            break;
 8006592:	e004      	b.n	800659e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8006594:	f7ff feb4 	bl	8006300 <LL_RCC_LSE_IsReady>
 8006598:	4603      	mov	r3, r0
 800659a:	2b01      	cmp	r3, #1
 800659c:	d1ee      	bne.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800659e:	7cfb      	ldrb	r3, [r7, #19]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d105      	bne.n	80065b0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065a8:	4618      	mov	r0, r3
 80065aa:	f7ff ff5b 	bl	8006464 <LL_RCC_SetRTCClockSource>
 80065ae:	e004      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80065b0:	7cfb      	ldrb	r3, [r7, #19]
 80065b2:	74bb      	strb	r3, [r7, #18]
 80065b4:	e001      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065b6:	7cfb      	ldrb	r3, [r7, #19]
 80065b8:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 0301 	and.w	r3, r3, #1
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d004      	beq.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	4618      	mov	r0, r3
 80065cc:	f7ff fea9 	bl	8006322 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f003 0302 	and.w	r3, r3, #2
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d004      	beq.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	4618      	mov	r0, r3
 80065e2:	f7ff fe9e 	bl	8006322 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 0320 	and.w	r3, r3, #32
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d004      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	4618      	mov	r0, r3
 80065f8:	f7ff fec0 	bl	800637c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006604:	2b00      	cmp	r3, #0
 8006606:	d004      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6a1b      	ldr	r3, [r3, #32]
 800660c:	4618      	mov	r0, r3
 800660e:	f7ff fee6 	bl	80063de <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800661a:	2b00      	cmp	r3, #0
 800661c:	d004      	beq.n	8006628 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006622:	4618      	mov	r0, r3
 8006624:	f7ff fedb 	bl	80063de <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006630:	2b00      	cmp	r3, #0
 8006632:	d004      	beq.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006638:	4618      	mov	r0, r3
 800663a:	f7ff fed0 	bl	80063de <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006646:	2b00      	cmp	r3, #0
 8006648:	d004      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	695b      	ldr	r3, [r3, #20]
 800664e:	4618      	mov	r0, r3
 8006650:	f7ff fea9 	bl	80063a6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800665c:	2b00      	cmp	r3, #0
 800665e:	d004      	beq.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	699b      	ldr	r3, [r3, #24]
 8006664:	4618      	mov	r0, r3
 8006666:	f7ff fe9e 	bl	80063a6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006672:	2b00      	cmp	r3, #0
 8006674:	d004      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	69db      	ldr	r3, [r3, #28]
 800667a:	4618      	mov	r0, r3
 800667c:	f7ff fe93 	bl	80063a6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 0310 	and.w	r3, r3, #16
 8006688:	2b00      	cmp	r3, #0
 800668a:	d011      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	4618      	mov	r0, r3
 8006692:	f7ff fe5e 	bl	8006352 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	68db      	ldr	r3, [r3, #12]
 800669a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800669e:	d107      	bne.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80066a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80066aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80066ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d010      	beq.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7ff fea5 	bl	8006410 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d107      	bne.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80066ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80066d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80066dc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d011      	beq.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ee:	4618      	mov	r0, r3
 80066f0:	f7ff fea3 	bl	800643a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066fc:	d107      	bne.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80066fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006702:	68db      	ldr	r3, [r3, #12]
 8006704:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006708:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800670c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800670e:	7cbb      	ldrb	r3, [r7, #18]
}
 8006710:	4618      	mov	r0, r3
 8006712:	3718      	adds	r7, #24
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}
 8006718:	58000400 	.word	0x58000400

0800671c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d071      	beq.n	8006812 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006734:	b2db      	uxtb	r3, r3
 8006736:	2b00      	cmp	r3, #0
 8006738:	d106      	bne.n	8006748 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f7fa fe0a 	bl	800135c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2202      	movs	r2, #2
 800674c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006750:	4b32      	ldr	r3, [pc, #200]	@ (800681c <HAL_RTC_Init+0x100>)
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	f003 0310 	and.w	r3, r3, #16
 8006758:	2b10      	cmp	r3, #16
 800675a:	d051      	beq.n	8006800 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800675c:	4b2f      	ldr	r3, [pc, #188]	@ (800681c <HAL_RTC_Init+0x100>)
 800675e:	22ca      	movs	r2, #202	@ 0xca
 8006760:	625a      	str	r2, [r3, #36]	@ 0x24
 8006762:	4b2e      	ldr	r3, [pc, #184]	@ (800681c <HAL_RTC_Init+0x100>)
 8006764:	2253      	movs	r2, #83	@ 0x53
 8006766:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8006768:	6878      	ldr	r0, [r7, #4]
 800676a:	f000 fb9d 	bl	8006ea8 <RTC_EnterInitMode>
 800676e:	4603      	mov	r3, r0
 8006770:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8006772:	7bfb      	ldrb	r3, [r7, #15]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d13f      	bne.n	80067f8 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006778:	4b28      	ldr	r3, [pc, #160]	@ (800681c <HAL_RTC_Init+0x100>)
 800677a:	699b      	ldr	r3, [r3, #24]
 800677c:	4a27      	ldr	r2, [pc, #156]	@ (800681c <HAL_RTC_Init+0x100>)
 800677e:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8006782:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006786:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006788:	4b24      	ldr	r3, [pc, #144]	@ (800681c <HAL_RTC_Init+0x100>)
 800678a:	699a      	ldr	r2, [r3, #24]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6859      	ldr	r1, [r3, #4]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	4319      	orrs	r1, r3
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	699b      	ldr	r3, [r3, #24]
 800679a:	430b      	orrs	r3, r1
 800679c:	491f      	ldr	r1, [pc, #124]	@ (800681c <HAL_RTC_Init+0x100>)
 800679e:	4313      	orrs	r3, r2
 80067a0:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	68da      	ldr	r2, [r3, #12]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	041b      	lsls	r3, r3, #16
 80067ac:	491b      	ldr	r1, [pc, #108]	@ (800681c <HAL_RTC_Init+0x100>)
 80067ae:	4313      	orrs	r3, r2
 80067b0:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80067b2:	4b1a      	ldr	r3, [pc, #104]	@ (800681c <HAL_RTC_Init+0x100>)
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067c2:	430b      	orrs	r3, r1
 80067c4:	4915      	ldr	r1, [pc, #84]	@ (800681c <HAL_RTC_Init+0x100>)
 80067c6:	4313      	orrs	r3, r2
 80067c8:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 fba0 	bl	8006f10 <RTC_ExitInitMode>
 80067d0:	4603      	mov	r3, r0
 80067d2:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 80067d4:	7bfb      	ldrb	r3, [r7, #15]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d10e      	bne.n	80067f8 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 80067da:	4b10      	ldr	r3, [pc, #64]	@ (800681c <HAL_RTC_Init+0x100>)
 80067dc:	699b      	ldr	r3, [r3, #24]
 80067de:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a19      	ldr	r1, [r3, #32]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	69db      	ldr	r3, [r3, #28]
 80067ea:	4319      	orrs	r1, r3
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	695b      	ldr	r3, [r3, #20]
 80067f0:	430b      	orrs	r3, r1
 80067f2:	490a      	ldr	r1, [pc, #40]	@ (800681c <HAL_RTC_Init+0x100>)
 80067f4:	4313      	orrs	r3, r2
 80067f6:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067f8:	4b08      	ldr	r3, [pc, #32]	@ (800681c <HAL_RTC_Init+0x100>)
 80067fa:	22ff      	movs	r2, #255	@ 0xff
 80067fc:	625a      	str	r2, [r3, #36]	@ 0x24
 80067fe:	e001      	b.n	8006804 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8006800:	2300      	movs	r3, #0
 8006802:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006804:	7bfb      	ldrb	r3, [r7, #15]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d103      	bne.n	8006812 <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2201      	movs	r2, #1
 800680e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 8006812:	7bfb      	ldrb	r3, [r7, #15]
}
 8006814:	4618      	mov	r0, r3
 8006816:	3710      	adds	r7, #16
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}
 800681c:	40002800 	.word	0x40002800

08006820 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006820:	b590      	push	{r4, r7, lr}
 8006822:	b087      	sub	sp, #28
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006832:	2b01      	cmp	r3, #1
 8006834:	d101      	bne.n	800683a <HAL_RTC_SetTime+0x1a>
 8006836:	2302      	movs	r3, #2
 8006838:	e088      	b.n	800694c <HAL_RTC_SetTime+0x12c>
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2201      	movs	r2, #1
 800683e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2202      	movs	r2, #2
 8006846:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800684a:	4b42      	ldr	r3, [pc, #264]	@ (8006954 <HAL_RTC_SetTime+0x134>)
 800684c:	22ca      	movs	r2, #202	@ 0xca
 800684e:	625a      	str	r2, [r3, #36]	@ 0x24
 8006850:	4b40      	ldr	r3, [pc, #256]	@ (8006954 <HAL_RTC_SetTime+0x134>)
 8006852:	2253      	movs	r2, #83	@ 0x53
 8006854:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006856:	68f8      	ldr	r0, [r7, #12]
 8006858:	f000 fb26 	bl	8006ea8 <RTC_EnterInitMode>
 800685c:	4603      	mov	r3, r0
 800685e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006860:	7cfb      	ldrb	r3, [r7, #19]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d15e      	bne.n	8006924 <HAL_RTC_SetTime+0x104>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8006866:	4b3b      	ldr	r3, [pc, #236]	@ (8006954 <HAL_RTC_SetTime+0x134>)
 8006868:	68db      	ldr	r3, [r3, #12]
 800686a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800686e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006872:	d057      	beq.n	8006924 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d125      	bne.n	80068c6 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800687a:	4b36      	ldr	r3, [pc, #216]	@ (8006954 <HAL_RTC_SetTime+0x134>)
 800687c:	699b      	ldr	r3, [r3, #24]
 800687e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006882:	2b00      	cmp	r3, #0
 8006884:	d102      	bne.n	800688c <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	2200      	movs	r2, #0
 800688a:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	4618      	mov	r0, r3
 8006892:	f000 fb7b 	bl	8006f8c <RTC_ByteToBcd2>
 8006896:	4603      	mov	r3, r0
 8006898:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	785b      	ldrb	r3, [r3, #1]
 800689e:	4618      	mov	r0, r3
 80068a0:	f000 fb74 	bl	8006f8c <RTC_ByteToBcd2>
 80068a4:	4603      	mov	r3, r0
 80068a6:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80068a8:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	789b      	ldrb	r3, [r3, #2]
 80068ae:	4618      	mov	r0, r3
 80068b0:	f000 fb6c 	bl	8006f8c <RTC_ByteToBcd2>
 80068b4:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80068b6:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	78db      	ldrb	r3, [r3, #3]
 80068be:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80068c0:	4313      	orrs	r3, r2
 80068c2:	617b      	str	r3, [r7, #20]
 80068c4:	e017      	b.n	80068f6 <HAL_RTC_SetTime+0xd6>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80068c6:	4b23      	ldr	r3, [pc, #140]	@ (8006954 <HAL_RTC_SetTime+0x134>)
 80068c8:	699b      	ldr	r3, [r3, #24]
 80068ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d102      	bne.n	80068d8 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	2200      	movs	r2, #0
 80068d6:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	785b      	ldrb	r3, [r3, #1]
 80068e2:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80068e4:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80068e6:	68ba      	ldr	r2, [r7, #8]
 80068e8:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80068ea:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	78db      	ldrb	r3, [r3, #3]
 80068f0:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80068f2:	4313      	orrs	r3, r2
 80068f4:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 80068f6:	4a17      	ldr	r2, [pc, #92]	@ (8006954 <HAL_RTC_SetTime+0x134>)
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80068fe:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8006902:	6013      	str	r3, [r2, #0]
      
      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8006904:	4b13      	ldr	r3, [pc, #76]	@ (8006954 <HAL_RTC_SetTime+0x134>)
 8006906:	699b      	ldr	r3, [r3, #24]
 8006908:	4a12      	ldr	r2, [pc, #72]	@ (8006954 <HAL_RTC_SetTime+0x134>)
 800690a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800690e:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8006910:	4b10      	ldr	r3, [pc, #64]	@ (8006954 <HAL_RTC_SetTime+0x134>)
 8006912:	699a      	ldr	r2, [r3, #24]
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	68d9      	ldr	r1, [r3, #12]
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	691b      	ldr	r3, [r3, #16]
 800691c:	430b      	orrs	r3, r1
 800691e:	490d      	ldr	r1, [pc, #52]	@ (8006954 <HAL_RTC_SetTime+0x134>)
 8006920:	4313      	orrs	r3, r2
 8006922:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 8006924:	68f8      	ldr	r0, [r7, #12]
 8006926:	f000 faf3 	bl	8006f10 <RTC_ExitInitMode>
 800692a:	4603      	mov	r3, r0
 800692c:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800692e:	4b09      	ldr	r3, [pc, #36]	@ (8006954 <HAL_RTC_SetTime+0x134>)
 8006930:	22ff      	movs	r2, #255	@ 0xff
 8006932:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8006934:	7cfb      	ldrb	r3, [r7, #19]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d103      	bne.n	8006942 <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2201      	movs	r2, #1
 800693e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 800694a:	7cfb      	ldrb	r3, [r7, #19]
}
 800694c:	4618      	mov	r0, r3
 800694e:	371c      	adds	r7, #28
 8006950:	46bd      	mov	sp, r7
 8006952:	bd90      	pop	{r4, r7, pc}
 8006954:	40002800 	.word	0x40002800

08006958 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b086      	sub	sp, #24
 800695c:	af00      	add	r7, sp, #0
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8006964:	4b2c      	ldr	r3, [pc, #176]	@ (8006a18 <HAL_RTC_GetTime+0xc0>)
 8006966:	689a      	ldr	r2, [r3, #8]
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800696c:	4b2a      	ldr	r3, [pc, #168]	@ (8006a18 <HAL_RTC_GetTime+0xc0>)
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006974:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006978:	d049      	beq.n	8006a0e <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 800697a:	4b27      	ldr	r3, [pc, #156]	@ (8006a18 <HAL_RTC_GetTime+0xc0>)
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 8006986:	4b24      	ldr	r3, [pc, #144]	@ (8006a18 <HAL_RTC_GetTime+0xc0>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800698e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8006992:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	0c1b      	lsrs	r3, r3, #16
 8006998:	b2db      	uxtb	r3, r3
 800699a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800699e:	b2da      	uxtb	r2, r3
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	0a1b      	lsrs	r3, r3, #8
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069ae:	b2da      	uxtb	r2, r3
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069bc:	b2da      	uxtb	r2, r3
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	0d9b      	lsrs	r3, r3, #22
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	f003 0301 	and.w	r3, r3, #1
 80069cc:	b2da      	uxtb	r2, r3
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d11a      	bne.n	8006a0e <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	781b      	ldrb	r3, [r3, #0]
 80069dc:	4618      	mov	r0, r3
 80069de:	f000 faf4 	bl	8006fca <RTC_Bcd2ToByte>
 80069e2:	4603      	mov	r3, r0
 80069e4:	461a      	mov	r2, r3
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	785b      	ldrb	r3, [r3, #1]
 80069ee:	4618      	mov	r0, r3
 80069f0:	f000 faeb 	bl	8006fca <RTC_Bcd2ToByte>
 80069f4:	4603      	mov	r3, r0
 80069f6:	461a      	mov	r2, r3
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	789b      	ldrb	r3, [r3, #2]
 8006a00:	4618      	mov	r0, r3
 8006a02:	f000 fae2 	bl	8006fca <RTC_Bcd2ToByte>
 8006a06:	4603      	mov	r3, r0
 8006a08:	461a      	mov	r2, r3
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3718      	adds	r7, #24
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	40002800 	.word	0x40002800

08006a1c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006a1c:	b590      	push	{r4, r7, lr}
 8006a1e:	b087      	sub	sp, #28
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d101      	bne.n	8006a36 <HAL_RTC_SetDate+0x1a>
 8006a32:	2302      	movs	r3, #2
 8006a34:	e071      	b.n	8006b1a <HAL_RTC_SetDate+0xfe>
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2202      	movs	r2, #2
 8006a42:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d10e      	bne.n	8006a6a <HAL_RTC_SetDate+0x4e>
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	785b      	ldrb	r3, [r3, #1]
 8006a50:	f003 0310 	and.w	r3, r3, #16
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d008      	beq.n	8006a6a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	785b      	ldrb	r3, [r3, #1]
 8006a5c:	f023 0310 	bic.w	r3, r3, #16
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	330a      	adds	r3, #10
 8006a64:	b2da      	uxtb	r2, r3
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d11c      	bne.n	8006aaa <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	78db      	ldrb	r3, [r3, #3]
 8006a74:	4618      	mov	r0, r3
 8006a76:	f000 fa89 	bl	8006f8c <RTC_ByteToBcd2>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	785b      	ldrb	r3, [r3, #1]
 8006a82:	4618      	mov	r0, r3
 8006a84:	f000 fa82 	bl	8006f8c <RTC_ByteToBcd2>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006a8c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	789b      	ldrb	r3, [r3, #2]
 8006a92:	4618      	mov	r0, r3
 8006a94:	f000 fa7a 	bl	8006f8c <RTC_ByteToBcd2>
 8006a98:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006a9a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	617b      	str	r3, [r7, #20]
 8006aa8:	e00e      	b.n	8006ac8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	78db      	ldrb	r3, [r3, #3]
 8006aae:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	785b      	ldrb	r3, [r3, #1]
 8006ab4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006ab6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8006ab8:	68ba      	ldr	r2, [r7, #8]
 8006aba:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006abc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006ac8:	4b16      	ldr	r3, [pc, #88]	@ (8006b24 <HAL_RTC_SetDate+0x108>)
 8006aca:	22ca      	movs	r2, #202	@ 0xca
 8006acc:	625a      	str	r2, [r3, #36]	@ 0x24
 8006ace:	4b15      	ldr	r3, [pc, #84]	@ (8006b24 <HAL_RTC_SetDate+0x108>)
 8006ad0:	2253      	movs	r2, #83	@ 0x53
 8006ad2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006ad4:	68f8      	ldr	r0, [r7, #12]
 8006ad6:	f000 f9e7 	bl	8006ea8 <RTC_EnterInitMode>
 8006ada:	4603      	mov	r3, r0
 8006adc:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006ade:	7cfb      	ldrb	r3, [r7, #19]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d10b      	bne.n	8006afc <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8006ae4:	4a0f      	ldr	r2, [pc, #60]	@ (8006b24 <HAL_RTC_SetDate+0x108>)
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006aec:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006af0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006af2:	68f8      	ldr	r0, [r7, #12]
 8006af4:	f000 fa0c 	bl	8006f10 <RTC_ExitInitMode>
 8006af8:	4603      	mov	r3, r0
 8006afa:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006afc:	4b09      	ldr	r3, [pc, #36]	@ (8006b24 <HAL_RTC_SetDate+0x108>)
 8006afe:	22ff      	movs	r2, #255	@ 0xff
 8006b00:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8006b02:	7cfb      	ldrb	r3, [r7, #19]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d103      	bne.n	8006b10 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 8006b18:	7cfb      	ldrb	r3, [r7, #19]
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	371c      	adds	r7, #28
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd90      	pop	{r4, r7, pc}
 8006b22:	bf00      	nop
 8006b24:	40002800 	.word	0x40002800

08006b28 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006b28:	b590      	push	{r4, r7, lr}
 8006b2a:	b087      	sub	sp, #28
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8006b34:	2300      	movs	r3, #0
 8006b36:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d101      	bne.n	8006b46 <HAL_RTC_SetAlarm_IT+0x1e>
 8006b42:	2302      	movs	r3, #2
 8006b44:	e0f3      	b.n	8006d2e <HAL_RTC_SetAlarm_IT+0x206>
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2201      	movs	r2, #1
 8006b4a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2202      	movs	r2, #2
 8006b52:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8006b56:	4b78      	ldr	r3, [pc, #480]	@ (8006d38 <HAL_RTC_SetAlarm_IT+0x210>)
 8006b58:	68db      	ldr	r3, [r3, #12]
 8006b5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006b5e:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b66:	d06a      	beq.n	8006c3e <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d13a      	bne.n	8006be4 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006b6e:	4b72      	ldr	r3, [pc, #456]	@ (8006d38 <HAL_RTC_SetAlarm_IT+0x210>)
 8006b70:	699b      	ldr	r3, [r3, #24]
 8006b72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d102      	bne.n	8006b80 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	695b      	ldr	r3, [r3, #20]
 8006b84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f000 f9fd 	bl	8006f8c <RTC_ByteToBcd2>
 8006b92:	4603      	mov	r3, r0
 8006b94:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	785b      	ldrb	r3, [r3, #1]
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f000 f9f6 	bl	8006f8c <RTC_ByteToBcd2>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006ba4:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	789b      	ldrb	r3, [r3, #2]
 8006baa:	4618      	mov	r0, r3
 8006bac:	f000 f9ee 	bl	8006f8c <RTC_ByteToBcd2>
 8006bb0:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006bb2:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	78db      	ldrb	r3, [r3, #3]
 8006bba:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006bbc:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f000 f9e0 	bl	8006f8c <RTC_ByteToBcd2>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006bd0:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006bd8:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006bde:	4313      	orrs	r3, r2
 8006be0:	617b      	str	r3, [r7, #20]
 8006be2:	e02c      	b.n	8006c3e <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	695b      	ldr	r3, [r3, #20]
 8006be8:	f1b3 3f80 	cmp.w	r3, #2155905152	@ 0x80808080
 8006bec:	d00d      	beq.n	8006c0a <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	695b      	ldr	r3, [r3, #20]
 8006bf2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006bf6:	d008      	beq.n	8006c0a <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006bf8:	4b4f      	ldr	r3, [pc, #316]	@ (8006d38 <HAL_RTC_SetAlarm_IT+0x210>)
 8006bfa:	699b      	ldr	r3, [r3, #24]
 8006bfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d102      	bne.n	8006c0a <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	2200      	movs	r2, #0
 8006c08:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	785b      	ldrb	r3, [r3, #1]
 8006c14:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006c16:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006c18:	68ba      	ldr	r2, [r7, #8]
 8006c1a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006c1c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	78db      	ldrb	r3, [r3, #3]
 8006c22:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006c24:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006c2c:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006c2e:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006c34:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c3e:	4b3e      	ldr	r3, [pc, #248]	@ (8006d38 <HAL_RTC_SetAlarm_IT+0x210>)
 8006c40:	22ca      	movs	r2, #202	@ 0xca
 8006c42:	625a      	str	r2, [r3, #36]	@ 0x24
 8006c44:	4b3c      	ldr	r3, [pc, #240]	@ (8006d38 <HAL_RTC_SetAlarm_IT+0x210>)
 8006c46:	2253      	movs	r2, #83	@ 0x53
 8006c48:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c52:	d12c      	bne.n	8006cae <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006c54:	4b38      	ldr	r3, [pc, #224]	@ (8006d38 <HAL_RTC_SetAlarm_IT+0x210>)
 8006c56:	699b      	ldr	r3, [r3, #24]
 8006c58:	4a37      	ldr	r2, [pc, #220]	@ (8006d38 <HAL_RTC_SetAlarm_IT+0x210>)
 8006c5a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006c5e:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006c60:	4b35      	ldr	r3, [pc, #212]	@ (8006d38 <HAL_RTC_SetAlarm_IT+0x210>)
 8006c62:	2201      	movs	r2, #1
 8006c64:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c6c:	d107      	bne.n	8006c7e <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	699a      	ldr	r2, [r3, #24]
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	69db      	ldr	r3, [r3, #28]
 8006c76:	4930      	ldr	r1, [pc, #192]	@ (8006d38 <HAL_RTC_SetAlarm_IT+0x210>)
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	644b      	str	r3, [r1, #68]	@ 0x44
 8006c7c:	e006      	b.n	8006c8c <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8006c7e:	4a2e      	ldr	r2, [pc, #184]	@ (8006d38 <HAL_RTC_SetAlarm_IT+0x210>)
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	6413      	str	r3, [r2, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8006c84:	4a2c      	ldr	r2, [pc, #176]	@ (8006d38 <HAL_RTC_SetAlarm_IT+0x210>)
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	699b      	ldr	r3, [r3, #24]
 8006c8a:	6453      	str	r3, [r2, #68]	@ 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8006c8c:	4a2a      	ldr	r2, [pc, #168]	@ (8006d38 <HAL_RTC_SetAlarm_IT+0x210>)
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	6713      	str	r3, [r2, #112]	@ 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c98:	f043 0201 	orr.w	r2, r3, #1
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006ca0:	4b25      	ldr	r3, [pc, #148]	@ (8006d38 <HAL_RTC_SetAlarm_IT+0x210>)
 8006ca2:	699b      	ldr	r3, [r3, #24]
 8006ca4:	4a24      	ldr	r2, [pc, #144]	@ (8006d38 <HAL_RTC_SetAlarm_IT+0x210>)
 8006ca6:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 8006caa:	6193      	str	r3, [r2, #24]
 8006cac:	e02b      	b.n	8006d06 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006cae:	4b22      	ldr	r3, [pc, #136]	@ (8006d38 <HAL_RTC_SetAlarm_IT+0x210>)
 8006cb0:	699b      	ldr	r3, [r3, #24]
 8006cb2:	4a21      	ldr	r2, [pc, #132]	@ (8006d38 <HAL_RTC_SetAlarm_IT+0x210>)
 8006cb4:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8006cb8:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006cba:	4b1f      	ldr	r3, [pc, #124]	@ (8006d38 <HAL_RTC_SetAlarm_IT+0x210>)
 8006cbc:	2202      	movs	r2, #2
 8006cbe:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cc6:	d107      	bne.n	8006cd8 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	699a      	ldr	r2, [r3, #24]
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	69db      	ldr	r3, [r3, #28]
 8006cd0:	4919      	ldr	r1, [pc, #100]	@ (8006d38 <HAL_RTC_SetAlarm_IT+0x210>)
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8006cd6:	e006      	b.n	8006ce6 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8006cd8:	4a17      	ldr	r2, [pc, #92]	@ (8006d38 <HAL_RTC_SetAlarm_IT+0x210>)
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	6493      	str	r3, [r2, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8006cde:	4a16      	ldr	r2, [pc, #88]	@ (8006d38 <HAL_RTC_SetAlarm_IT+0x210>)
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	699b      	ldr	r3, [r3, #24]
 8006ce4:	64d3      	str	r3, [r2, #76]	@ 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8006ce6:	4a14      	ldr	r2, [pc, #80]	@ (8006d38 <HAL_RTC_SetAlarm_IT+0x210>)
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	6753      	str	r3, [r2, #116]	@ 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cf2:	f043 0202 	orr.w	r2, r3, #2
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006cfa:	4b0f      	ldr	r3, [pc, #60]	@ (8006d38 <HAL_RTC_SetAlarm_IT+0x210>)
 8006cfc:	699b      	ldr	r3, [r3, #24]
 8006cfe:	4a0e      	ldr	r2, [pc, #56]	@ (8006d38 <HAL_RTC_SetAlarm_IT+0x210>)
 8006d00:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 8006d04:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006d06:	4b0d      	ldr	r3, [pc, #52]	@ (8006d3c <HAL_RTC_SetAlarm_IT+0x214>)
 8006d08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d0c:	4a0b      	ldr	r2, [pc, #44]	@ (8006d3c <HAL_RTC_SetAlarm_IT+0x214>)
 8006d0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d12:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d16:	4b08      	ldr	r3, [pc, #32]	@ (8006d38 <HAL_RTC_SetAlarm_IT+0x210>)
 8006d18:	22ff      	movs	r2, #255	@ 0xff
 8006d1a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	371c      	adds	r7, #28
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd90      	pop	{r4, r7, pc}
 8006d36:	bf00      	nop
 8006d38:	40002800 	.word	0x40002800
 8006d3c:	58000800 	.word	0x58000800

08006d40 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d101      	bne.n	8006d58 <HAL_RTC_DeactivateAlarm+0x18>
 8006d54:	2302      	movs	r3, #2
 8006d56:	e048      	b.n	8006dea <HAL_RTC_DeactivateAlarm+0xaa>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2202      	movs	r2, #2
 8006d64:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d68:	4b22      	ldr	r3, [pc, #136]	@ (8006df4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006d6a:	22ca      	movs	r2, #202	@ 0xca
 8006d6c:	625a      	str	r2, [r3, #36]	@ 0x24
 8006d6e:	4b21      	ldr	r3, [pc, #132]	@ (8006df4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006d70:	2253      	movs	r2, #83	@ 0x53
 8006d72:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d7a:	d115      	bne.n	8006da8 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006d7c:	4b1d      	ldr	r3, [pc, #116]	@ (8006df4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006d7e:	699b      	ldr	r3, [r3, #24]
 8006d80:	4a1c      	ldr	r2, [pc, #112]	@ (8006df4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006d82:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006d86:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8006d88:	4b1a      	ldr	r3, [pc, #104]	@ (8006df4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006d8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d8c:	4a19      	ldr	r2, [pc, #100]	@ (8006df4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006d8e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006d92:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d98:	f023 0201 	bic.w	r2, r3, #1
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006da0:	4b14      	ldr	r3, [pc, #80]	@ (8006df4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006da2:	2201      	movs	r2, #1
 8006da4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006da6:	e014      	b.n	8006dd2 <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006da8:	4b12      	ldr	r3, [pc, #72]	@ (8006df4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006daa:	699b      	ldr	r3, [r3, #24]
 8006dac:	4a11      	ldr	r2, [pc, #68]	@ (8006df4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006dae:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8006db2:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8006db4:	4b0f      	ldr	r3, [pc, #60]	@ (8006df4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006db6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006db8:	4a0e      	ldr	r2, [pc, #56]	@ (8006df4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006dba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006dbe:	64d3      	str	r3, [r2, #76]	@ 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dc4:	f023 0202 	bic.w	r2, r3, #2
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006dcc:	4b09      	ldr	r3, [pc, #36]	@ (8006df4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006dce:	2202      	movs	r2, #2
 8006dd0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006dd2:	4b08      	ldr	r3, [pc, #32]	@ (8006df4 <HAL_RTC_DeactivateAlarm+0xb4>)
 8006dd4:	22ff      	movs	r2, #255	@ 0xff
 8006dd6:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	370c      	adds	r7, #12
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bc80      	pop	{r7}
 8006df2:	4770      	bx	lr
 8006df4:	40002800 	.word	0x40002800

08006df8 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
	cnt++;
 8006e00:	4b14      	ldr	r3, [pc, #80]	@ (8006e54 <HAL_RTC_AlarmIRQHandler+0x5c>)
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	3301      	adds	r3, #1
 8006e06:	b2da      	uxtb	r2, r3
 8006e08:	4b12      	ldr	r3, [pc, #72]	@ (8006e54 <HAL_RTC_AlarmIRQHandler+0x5c>)
 8006e0a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8006e0c:	4b12      	ldr	r3, [pc, #72]	@ (8006e58 <HAL_RTC_AlarmIRQHandler+0x60>)
 8006e0e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e14:	4013      	ands	r3, r2
 8006e16:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f003 0301 	and.w	r3, r3, #1
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d005      	beq.n	8006e2e <HAL_RTC_AlarmIRQHandler+0x36>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006e22:	4b0d      	ldr	r3, [pc, #52]	@ (8006e58 <HAL_RTC_AlarmIRQHandler+0x60>)
 8006e24:	2201      	movs	r2, #1
 8006e26:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f014 fe6f 	bl	801bb0c <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f003 0302 	and.w	r3, r3, #2
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d005      	beq.n	8006e44 <HAL_RTC_AlarmIRQHandler+0x4c>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006e38:	4b07      	ldr	r3, [pc, #28]	@ (8006e58 <HAL_RTC_AlarmIRQHandler+0x60>)
 8006e3a:	2202      	movs	r2, #2
 8006e3c:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	f014 fe90 	bl	801bb64 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8006e4c:	bf00      	nop
 8006e4e:	3710      	adds	r7, #16
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}
 8006e54:	200009ac 	.word	0x200009ac
 8006e58:	40002800 	.word	0x40002800

08006e5c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8006e64:	4b0f      	ldr	r3, [pc, #60]	@ (8006ea4 <HAL_RTC_WaitForSynchro+0x48>)
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	4a0e      	ldr	r2, [pc, #56]	@ (8006ea4 <HAL_RTC_WaitForSynchro+0x48>)
 8006e6a:	f023 0320 	bic.w	r3, r3, #32
 8006e6e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8006e70:	f7fa fc5e 	bl	8001730 <HAL_GetTick>
 8006e74:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006e76:	e009      	b.n	8006e8c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006e78:	f7fa fc5a 	bl	8001730 <HAL_GetTick>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	1ad3      	subs	r3, r2, r3
 8006e82:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006e86:	d901      	bls.n	8006e8c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006e88:	2303      	movs	r3, #3
 8006e8a:	e006      	b.n	8006e9a <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006e8c:	4b05      	ldr	r3, [pc, #20]	@ (8006ea4 <HAL_RTC_WaitForSynchro+0x48>)
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	f003 0320 	and.w	r3, r3, #32
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d0ef      	beq.n	8006e78 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8006e98:	2300      	movs	r3, #0
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3710      	adds	r7, #16
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	40002800 	.word	0x40002800

08006ea8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006eb4:	4b15      	ldr	r3, [pc, #84]	@ (8006f0c <RTC_EnterInitMode+0x64>)
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d120      	bne.n	8006f02 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006ec0:	4b12      	ldr	r3, [pc, #72]	@ (8006f0c <RTC_EnterInitMode+0x64>)
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	4a11      	ldr	r2, [pc, #68]	@ (8006f0c <RTC_EnterInitMode+0x64>)
 8006ec6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006eca:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8006ecc:	f7fa fc30 	bl	8001730 <HAL_GetTick>
 8006ed0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006ed2:	e00d      	b.n	8006ef0 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006ed4:	f7fa fc2c 	bl	8001730 <HAL_GetTick>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	1ad3      	subs	r3, r2, r3
 8006ede:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006ee2:	d905      	bls.n	8006ef0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006ee4:	2303      	movs	r3, #3
 8006ee6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2203      	movs	r2, #3
 8006eec:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006ef0:	4b06      	ldr	r3, [pc, #24]	@ (8006f0c <RTC_EnterInitMode+0x64>)
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d102      	bne.n	8006f02 <RTC_EnterInitMode+0x5a>
 8006efc:	7bfb      	ldrb	r3, [r7, #15]
 8006efe:	2b03      	cmp	r3, #3
 8006f00:	d1e8      	bne.n	8006ed4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8006f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3710      	adds	r7, #16
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	40002800 	.word	0x40002800

08006f10 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8006f88 <RTC_ExitInitMode+0x78>)
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	4a19      	ldr	r2, [pc, #100]	@ (8006f88 <RTC_ExitInitMode+0x78>)
 8006f22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f26:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006f28:	4b17      	ldr	r3, [pc, #92]	@ (8006f88 <RTC_ExitInitMode+0x78>)
 8006f2a:	699b      	ldr	r3, [r3, #24]
 8006f2c:	f003 0320 	and.w	r3, r3, #32
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d10c      	bne.n	8006f4e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f7ff ff91 	bl	8006e5c <HAL_RTC_WaitForSynchro>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d01e      	beq.n	8006f7e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2203      	movs	r2, #3
 8006f44:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	73fb      	strb	r3, [r7, #15]
 8006f4c:	e017      	b.n	8006f7e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8006f88 <RTC_ExitInitMode+0x78>)
 8006f50:	699b      	ldr	r3, [r3, #24]
 8006f52:	4a0d      	ldr	r2, [pc, #52]	@ (8006f88 <RTC_ExitInitMode+0x78>)
 8006f54:	f023 0320 	bic.w	r3, r3, #32
 8006f58:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f7ff ff7e 	bl	8006e5c <HAL_RTC_WaitForSynchro>
 8006f60:	4603      	mov	r3, r0
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d005      	beq.n	8006f72 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2203      	movs	r2, #3
 8006f6a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8006f6e:	2303      	movs	r3, #3
 8006f70:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006f72:	4b05      	ldr	r3, [pc, #20]	@ (8006f88 <RTC_ExitInitMode+0x78>)
 8006f74:	699b      	ldr	r3, [r3, #24]
 8006f76:	4a04      	ldr	r2, [pc, #16]	@ (8006f88 <RTC_ExitInitMode+0x78>)
 8006f78:	f043 0320 	orr.w	r3, r3, #32
 8006f7c:	6193      	str	r3, [r2, #24]
  }

  return status;
 8006f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3710      	adds	r7, #16
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	40002800 	.word	0x40002800

08006f8c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b085      	sub	sp, #20
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	4603      	mov	r3, r0
 8006f94:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006f96:	2300      	movs	r3, #0
 8006f98:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8006f9a:	79fb      	ldrb	r3, [r7, #7]
 8006f9c:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8006f9e:	e005      	b.n	8006fac <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8006fa6:	7afb      	ldrb	r3, [r7, #11]
 8006fa8:	3b0a      	subs	r3, #10
 8006faa:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8006fac:	7afb      	ldrb	r3, [r7, #11]
 8006fae:	2b09      	cmp	r3, #9
 8006fb0:	d8f6      	bhi.n	8006fa0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	011b      	lsls	r3, r3, #4
 8006fb8:	b2da      	uxtb	r2, r3
 8006fba:	7afb      	ldrb	r3, [r7, #11]
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	b2db      	uxtb	r3, r3
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3714      	adds	r7, #20
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bc80      	pop	{r7}
 8006fc8:	4770      	bx	lr

08006fca <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006fca:	b480      	push	{r7}
 8006fcc:	b085      	sub	sp, #20
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8006fd4:	79fb      	ldrb	r3, [r7, #7]
 8006fd6:	091b      	lsrs	r3, r3, #4
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	461a      	mov	r2, r3
 8006fdc:	4613      	mov	r3, r2
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	4413      	add	r3, r2
 8006fe2:	005b      	lsls	r3, r3, #1
 8006fe4:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	b2da      	uxtb	r2, r3
 8006fea:	79fb      	ldrb	r3, [r7, #7]
 8006fec:	f003 030f 	and.w	r3, r3, #15
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	4413      	add	r3, r2
 8006ff4:	b2db      	uxtb	r3, r3
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3714      	adds	r7, #20
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bc80      	pop	{r7}
 8006ffe:	4770      	bx	lr

08007000 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800700e:	2b01      	cmp	r3, #1
 8007010:	d101      	bne.n	8007016 <HAL_RTCEx_EnableBypassShadow+0x16>
 8007012:	2302      	movs	r3, #2
 8007014:	e01f      	b.n	8007056 <HAL_RTCEx_EnableBypassShadow+0x56>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2201      	movs	r2, #1
 800701a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2202      	movs	r2, #2
 8007022:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007026:	4b0e      	ldr	r3, [pc, #56]	@ (8007060 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007028:	22ca      	movs	r2, #202	@ 0xca
 800702a:	625a      	str	r2, [r3, #36]	@ 0x24
 800702c:	4b0c      	ldr	r3, [pc, #48]	@ (8007060 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800702e:	2253      	movs	r2, #83	@ 0x53
 8007030:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007032:	4b0b      	ldr	r3, [pc, #44]	@ (8007060 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007034:	699b      	ldr	r3, [r3, #24]
 8007036:	4a0a      	ldr	r2, [pc, #40]	@ (8007060 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007038:	f043 0320 	orr.w	r3, r3, #32
 800703c:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800703e:	4b08      	ldr	r3, [pc, #32]	@ (8007060 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8007040:	22ff      	movs	r2, #255	@ 0xff
 8007042:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2201      	movs	r2, #1
 8007048:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	370c      	adds	r7, #12
 800705a:	46bd      	mov	sp, r7
 800705c:	bc80      	pop	{r7}
 800705e:	4770      	bx	lr
 8007060:	40002800 	.word	0x40002800

08007064 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 800706c:	4b09      	ldr	r3, [pc, #36]	@ (8007094 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800706e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007070:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007074:	2b00      	cmp	r3, #0
 8007076:	d005      	beq.n	8007084 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8007078:	4b06      	ldr	r3, [pc, #24]	@ (8007094 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800707a:	2240      	movs	r2, #64	@ 0x40
 800707c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f7fa fdc9 	bl	8001c16 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2201      	movs	r2, #1
 8007088:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 800708c:	bf00      	nop
 800708e:	3708      	adds	r7, #8
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	40002800 	.word	0x40002800

08007098 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8007098:	b480      	push	{r7}
 800709a:	b087      	sub	sp, #28
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80070a4:	4b07      	ldr	r3, [pc, #28]	@ (80070c4 <HAL_RTCEx_BKUPWrite+0x2c>)
 80070a6:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	697a      	ldr	r2, [r7, #20]
 80070ae:	4413      	add	r3, r2
 80070b0:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	601a      	str	r2, [r3, #0]
}
 80070b8:	bf00      	nop
 80070ba:	371c      	adds	r7, #28
 80070bc:	46bd      	mov	sp, r7
 80070be:	bc80      	pop	{r7}
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	4000b100 	.word	0x4000b100

080070c8 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 80070c8:	b480      	push	{r7}
 80070ca:	b085      	sub	sp, #20
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
 80070d0:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 80070d2:	4b07      	ldr	r3, [pc, #28]	@ (80070f0 <HAL_RTCEx_BKUPRead+0x28>)
 80070d4:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	68fa      	ldr	r2, [r7, #12]
 80070dc:	4413      	add	r3, r2
 80070de:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3714      	adds	r7, #20
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bc80      	pop	{r7}
 80070ec:	4770      	bx	lr
 80070ee:	bf00      	nop
 80070f0:	4000b100 	.word	0x4000b100

080070f4 <LL_PWR_SetRadioBusyTrigger>:
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80070fc:	4b06      	ldr	r3, [pc, #24]	@ (8007118 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007104:	4904      	ldr	r1, [pc, #16]	@ (8007118 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4313      	orrs	r3, r2
 800710a:	608b      	str	r3, [r1, #8]
}
 800710c:	bf00      	nop
 800710e:	370c      	adds	r7, #12
 8007110:	46bd      	mov	sp, r7
 8007112:	bc80      	pop	{r7}
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop
 8007118:	58000400 	.word	0x58000400

0800711c <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 800711c:	b480      	push	{r7}
 800711e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007120:	4b05      	ldr	r3, [pc, #20]	@ (8007138 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8007122:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007126:	4a04      	ldr	r2, [pc, #16]	@ (8007138 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8007128:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800712c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007130:	bf00      	nop
 8007132:	46bd      	mov	sp, r7
 8007134:	bc80      	pop	{r7}
 8007136:	4770      	bx	lr
 8007138:	58000400 	.word	0x58000400

0800713c <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 800713c:	b480      	push	{r7}
 800713e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007140:	4b05      	ldr	r3, [pc, #20]	@ (8007158 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8007142:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007146:	4a04      	ldr	r2, [pc, #16]	@ (8007158 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8007148:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800714c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007150:	bf00      	nop
 8007152:	46bd      	mov	sp, r7
 8007154:	bc80      	pop	{r7}
 8007156:	4770      	bx	lr
 8007158:	58000400 	.word	0x58000400

0800715c <LL_PWR_ClearFlag_RFBUSY>:
{
 800715c:	b480      	push	{r7}
 800715e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8007160:	4b03      	ldr	r3, [pc, #12]	@ (8007170 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8007162:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007166:	619a      	str	r2, [r3, #24]
}
 8007168:	bf00      	nop
 800716a:	46bd      	mov	sp, r7
 800716c:	bc80      	pop	{r7}
 800716e:	4770      	bx	lr
 8007170:	58000400 	.word	0x58000400

08007174 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8007174:	b480      	push	{r7}
 8007176:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8007178:	4b06      	ldr	r3, [pc, #24]	@ (8007194 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 800717a:	695b      	ldr	r3, [r3, #20]
 800717c:	f003 0302 	and.w	r3, r3, #2
 8007180:	2b02      	cmp	r3, #2
 8007182:	d101      	bne.n	8007188 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8007184:	2301      	movs	r3, #1
 8007186:	e000      	b.n	800718a <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	46bd      	mov	sp, r7
 800718e:	bc80      	pop	{r7}
 8007190:	4770      	bx	lr
 8007192:	bf00      	nop
 8007194:	58000400 	.word	0x58000400

08007198 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8007198:	b480      	push	{r7}
 800719a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 800719c:	4b06      	ldr	r3, [pc, #24]	@ (80071b8 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 800719e:	695b      	ldr	r3, [r3, #20]
 80071a0:	f003 0304 	and.w	r3, r3, #4
 80071a4:	2b04      	cmp	r3, #4
 80071a6:	d101      	bne.n	80071ac <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 80071a8:	2301      	movs	r3, #1
 80071aa:	e000      	b.n	80071ae <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bc80      	pop	{r7}
 80071b4:	4770      	bx	lr
 80071b6:	bf00      	nop
 80071b8:	58000400 	.word	0x58000400

080071bc <LL_RCC_RF_DisableReset>:
{
 80071bc:	b480      	push	{r7}
 80071be:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80071c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80071c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80071cc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80071d0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80071d4:	bf00      	nop
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bc80      	pop	{r7}
 80071da:	4770      	bx	lr

080071dc <LL_RCC_IsRFUnderReset>:
{
 80071dc:	b480      	push	{r7}
 80071de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80071e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80071e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80071ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80071f0:	d101      	bne.n	80071f6 <LL_RCC_IsRFUnderReset+0x1a>
 80071f2:	2301      	movs	r3, #1
 80071f4:	e000      	b.n	80071f8 <LL_RCC_IsRFUnderReset+0x1c>
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bc80      	pop	{r7}
 80071fe:	4770      	bx	lr

08007200 <LL_EXTI_EnableIT_32_63>:
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8007208:	4b06      	ldr	r3, [pc, #24]	@ (8007224 <LL_EXTI_EnableIT_32_63+0x24>)
 800720a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800720e:	4905      	ldr	r1, [pc, #20]	@ (8007224 <LL_EXTI_EnableIT_32_63+0x24>)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4313      	orrs	r3, r2
 8007214:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8007218:	bf00      	nop
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	bc80      	pop	{r7}
 8007220:	4770      	bx	lr
 8007222:	bf00      	nop
 8007224:	58000800 	.word	0x58000800

08007228 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d103      	bne.n	800723e <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	73fb      	strb	r3, [r7, #15]
    return status;
 800723a:	7bfb      	ldrb	r3, [r7, #15]
 800723c:	e052      	b.n	80072e4 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 800723e:	2300      	movs	r3, #0
 8007240:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	799b      	ldrb	r3, [r3, #6]
 8007246:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8007248:	7bbb      	ldrb	r3, [r7, #14]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d002      	beq.n	8007254 <HAL_SUBGHZ_Init+0x2c>
 800724e:	7bbb      	ldrb	r3, [r7, #14]
 8007250:	2b03      	cmp	r3, #3
 8007252:	d109      	bne.n	8007268 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f7fa f9c6 	bl	80015ec <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8007260:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8007264:	f7ff ffcc 	bl	8007200 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8007268:	7bbb      	ldrb	r3, [r7, #14]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d126      	bne.n	80072bc <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2202      	movs	r2, #2
 8007272:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8007274:	f7ff ffa2 	bl	80071bc <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007278:	4b1c      	ldr	r3, [pc, #112]	@ (80072ec <HAL_SUBGHZ_Init+0xc4>)
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	4613      	mov	r3, r2
 800727e:	00db      	lsls	r3, r3, #3
 8007280:	1a9b      	subs	r3, r3, r2
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	0cdb      	lsrs	r3, r3, #19
 8007286:	2264      	movs	r2, #100	@ 0x64
 8007288:	fb02 f303 	mul.w	r3, r2, r3
 800728c:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d105      	bne.n	80072a0 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8007294:	2301      	movs	r3, #1
 8007296:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2201      	movs	r2, #1
 800729c:	609a      	str	r2, [r3, #8]
        break;
 800729e:	e007      	b.n	80072b0 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	3b01      	subs	r3, #1
 80072a4:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 80072a6:	f7ff ff99 	bl	80071dc <LL_RCC_IsRFUnderReset>
 80072aa:	4603      	mov	r3, r0
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d1ee      	bne.n	800728e <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80072b0:	f7ff ff34 	bl	800711c <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 80072b4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80072b8:	f7ff ff1c 	bl	80070f4 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 80072bc:	f7ff ff4e 	bl	800715c <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 80072c0:	7bfb      	ldrb	r3, [r7, #15]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d10a      	bne.n	80072dc <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4618      	mov	r0, r3
 80072cc:	f000 fab6 	bl	800783c <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2201      	movs	r2, #1
 80072d4:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	719a      	strb	r2, [r3, #6]

  return status;
 80072e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3710      	adds	r7, #16
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	20000070 	.word	0x20000070

080072f0 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b086      	sub	sp, #24
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	607a      	str	r2, [r7, #4]
 80072fa:	461a      	mov	r2, r3
 80072fc:	460b      	mov	r3, r1
 80072fe:	817b      	strh	r3, [r7, #10]
 8007300:	4613      	mov	r3, r2
 8007302:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	799b      	ldrb	r3, [r3, #6]
 8007308:	b2db      	uxtb	r3, r3
 800730a:	2b01      	cmp	r3, #1
 800730c:	d14a      	bne.n	80073a4 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	795b      	ldrb	r3, [r3, #5]
 8007312:	2b01      	cmp	r3, #1
 8007314:	d101      	bne.n	800731a <HAL_SUBGHZ_WriteRegisters+0x2a>
 8007316:	2302      	movs	r3, #2
 8007318:	e045      	b.n	80073a6 <HAL_SUBGHZ_WriteRegisters+0xb6>
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2201      	movs	r2, #1
 800731e:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2202      	movs	r2, #2
 8007324:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007326:	68f8      	ldr	r0, [r7, #12]
 8007328:	f000 fb56 	bl	80079d8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800732c:	f7ff ff06 	bl	800713c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8007330:	210d      	movs	r1, #13
 8007332:	68f8      	ldr	r0, [r7, #12]
 8007334:	f000 faa2 	bl	800787c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8007338:	897b      	ldrh	r3, [r7, #10]
 800733a:	0a1b      	lsrs	r3, r3, #8
 800733c:	b29b      	uxth	r3, r3
 800733e:	b2db      	uxtb	r3, r3
 8007340:	4619      	mov	r1, r3
 8007342:	68f8      	ldr	r0, [r7, #12]
 8007344:	f000 fa9a 	bl	800787c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007348:	897b      	ldrh	r3, [r7, #10]
 800734a:	b2db      	uxtb	r3, r3
 800734c:	4619      	mov	r1, r3
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	f000 fa94 	bl	800787c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007354:	2300      	movs	r3, #0
 8007356:	82bb      	strh	r3, [r7, #20]
 8007358:	e00a      	b.n	8007370 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800735a:	8abb      	ldrh	r3, [r7, #20]
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	4413      	add	r3, r2
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	4619      	mov	r1, r3
 8007364:	68f8      	ldr	r0, [r7, #12]
 8007366:	f000 fa89 	bl	800787c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800736a:	8abb      	ldrh	r3, [r7, #20]
 800736c:	3301      	adds	r3, #1
 800736e:	82bb      	strh	r3, [r7, #20]
 8007370:	8aba      	ldrh	r2, [r7, #20]
 8007372:	893b      	ldrh	r3, [r7, #8]
 8007374:	429a      	cmp	r2, r3
 8007376:	d3f0      	bcc.n	800735a <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007378:	f7ff fed0 	bl	800711c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800737c:	68f8      	ldr	r0, [r7, #12]
 800737e:	f000 fb4f 	bl	8007a20 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d002      	beq.n	8007390 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	75fb      	strb	r3, [r7, #23]
 800738e:	e001      	b.n	8007394 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007390:	2300      	movs	r3, #0
 8007392:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2201      	movs	r2, #1
 8007398:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2200      	movs	r2, #0
 800739e:	715a      	strb	r2, [r3, #5]

    return status;
 80073a0:	7dfb      	ldrb	r3, [r7, #23]
 80073a2:	e000      	b.n	80073a6 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80073a4:	2302      	movs	r3, #2
  }
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3718      	adds	r7, #24
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}

080073ae <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b088      	sub	sp, #32
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	60f8      	str	r0, [r7, #12]
 80073b6:	607a      	str	r2, [r7, #4]
 80073b8:	461a      	mov	r2, r3
 80073ba:	460b      	mov	r3, r1
 80073bc:	817b      	strh	r3, [r7, #10]
 80073be:	4613      	mov	r3, r2
 80073c0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	799b      	ldrb	r3, [r3, #6]
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d14a      	bne.n	8007466 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	795b      	ldrb	r3, [r3, #5]
 80073d4:	2b01      	cmp	r3, #1
 80073d6:	d101      	bne.n	80073dc <HAL_SUBGHZ_ReadRegisters+0x2e>
 80073d8:	2302      	movs	r3, #2
 80073da:	e045      	b.n	8007468 <HAL_SUBGHZ_ReadRegisters+0xba>
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2201      	movs	r2, #1
 80073e0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80073e2:	68f8      	ldr	r0, [r7, #12]
 80073e4:	f000 faf8 	bl	80079d8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80073e8:	f7ff fea8 	bl	800713c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80073ec:	211d      	movs	r1, #29
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	f000 fa44 	bl	800787c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80073f4:	897b      	ldrh	r3, [r7, #10]
 80073f6:	0a1b      	lsrs	r3, r3, #8
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	4619      	mov	r1, r3
 80073fe:	68f8      	ldr	r0, [r7, #12]
 8007400:	f000 fa3c 	bl	800787c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007404:	897b      	ldrh	r3, [r7, #10]
 8007406:	b2db      	uxtb	r3, r3
 8007408:	4619      	mov	r1, r3
 800740a:	68f8      	ldr	r0, [r7, #12]
 800740c:	f000 fa36 	bl	800787c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8007410:	2100      	movs	r1, #0
 8007412:	68f8      	ldr	r0, [r7, #12]
 8007414:	f000 fa32 	bl	800787c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007418:	2300      	movs	r3, #0
 800741a:	82fb      	strh	r3, [r7, #22]
 800741c:	e009      	b.n	8007432 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800741e:	69b9      	ldr	r1, [r7, #24]
 8007420:	68f8      	ldr	r0, [r7, #12]
 8007422:	f000 fa81 	bl	8007928 <SUBGHZSPI_Receive>
      pData++;
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	3301      	adds	r3, #1
 800742a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800742c:	8afb      	ldrh	r3, [r7, #22]
 800742e:	3301      	adds	r3, #1
 8007430:	82fb      	strh	r3, [r7, #22]
 8007432:	8afa      	ldrh	r2, [r7, #22]
 8007434:	893b      	ldrh	r3, [r7, #8]
 8007436:	429a      	cmp	r2, r3
 8007438:	d3f1      	bcc.n	800741e <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800743a:	f7ff fe6f 	bl	800711c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	f000 faee 	bl	8007a20 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d002      	beq.n	8007452 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	77fb      	strb	r3, [r7, #31]
 8007450:	e001      	b.n	8007456 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8007452:	2300      	movs	r3, #0
 8007454:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2201      	movs	r2, #1
 800745a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2200      	movs	r2, #0
 8007460:	715a      	strb	r2, [r3, #5]

    return status;
 8007462:	7ffb      	ldrb	r3, [r7, #31]
 8007464:	e000      	b.n	8007468 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8007466:	2302      	movs	r3, #2
  }
}
 8007468:	4618      	mov	r0, r3
 800746a:	3720      	adds	r7, #32
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b086      	sub	sp, #24
 8007474:	af00      	add	r7, sp, #0
 8007476:	60f8      	str	r0, [r7, #12]
 8007478:	607a      	str	r2, [r7, #4]
 800747a:	461a      	mov	r2, r3
 800747c:	460b      	mov	r3, r1
 800747e:	72fb      	strb	r3, [r7, #11]
 8007480:	4613      	mov	r3, r2
 8007482:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	799b      	ldrb	r3, [r3, #6]
 8007488:	b2db      	uxtb	r3, r3
 800748a:	2b01      	cmp	r3, #1
 800748c:	d14a      	bne.n	8007524 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	795b      	ldrb	r3, [r3, #5]
 8007492:	2b01      	cmp	r3, #1
 8007494:	d101      	bne.n	800749a <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8007496:	2302      	movs	r3, #2
 8007498:	e045      	b.n	8007526 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2201      	movs	r2, #1
 800749e:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80074a0:	68f8      	ldr	r0, [r7, #12]
 80074a2:	f000 fa99 	bl	80079d8 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 80074a6:	7afb      	ldrb	r3, [r7, #11]
 80074a8:	2b84      	cmp	r3, #132	@ 0x84
 80074aa:	d002      	beq.n	80074b2 <HAL_SUBGHZ_ExecSetCmd+0x42>
 80074ac:	7afb      	ldrb	r3, [r7, #11]
 80074ae:	2b94      	cmp	r3, #148	@ 0x94
 80074b0:	d103      	bne.n	80074ba <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2201      	movs	r2, #1
 80074b6:	711a      	strb	r2, [r3, #4]
 80074b8:	e002      	b.n	80074c0 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2200      	movs	r2, #0
 80074be:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80074c0:	f7ff fe3c 	bl	800713c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80074c4:	7afb      	ldrb	r3, [r7, #11]
 80074c6:	4619      	mov	r1, r3
 80074c8:	68f8      	ldr	r0, [r7, #12]
 80074ca:	f000 f9d7 	bl	800787c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80074ce:	2300      	movs	r3, #0
 80074d0:	82bb      	strh	r3, [r7, #20]
 80074d2:	e00a      	b.n	80074ea <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80074d4:	8abb      	ldrh	r3, [r7, #20]
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	4413      	add	r3, r2
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	4619      	mov	r1, r3
 80074de:	68f8      	ldr	r0, [r7, #12]
 80074e0:	f000 f9cc 	bl	800787c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80074e4:	8abb      	ldrh	r3, [r7, #20]
 80074e6:	3301      	adds	r3, #1
 80074e8:	82bb      	strh	r3, [r7, #20]
 80074ea:	8aba      	ldrh	r2, [r7, #20]
 80074ec:	893b      	ldrh	r3, [r7, #8]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d3f0      	bcc.n	80074d4 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80074f2:	f7ff fe13 	bl	800711c <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 80074f6:	7afb      	ldrb	r3, [r7, #11]
 80074f8:	2b84      	cmp	r3, #132	@ 0x84
 80074fa:	d002      	beq.n	8007502 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80074fc:	68f8      	ldr	r0, [r7, #12]
 80074fe:	f000 fa8f 	bl	8007a20 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d002      	beq.n	8007510 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	75fb      	strb	r3, [r7, #23]
 800750e:	e001      	b.n	8007514 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007510:	2300      	movs	r3, #0
 8007512:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2201      	movs	r2, #1
 8007518:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2200      	movs	r2, #0
 800751e:	715a      	strb	r2, [r3, #5]

    return status;
 8007520:	7dfb      	ldrb	r3, [r7, #23]
 8007522:	e000      	b.n	8007526 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007524:	2302      	movs	r3, #2
  }
}
 8007526:	4618      	mov	r0, r3
 8007528:	3718      	adds	r7, #24
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800752e:	b580      	push	{r7, lr}
 8007530:	b088      	sub	sp, #32
 8007532:	af00      	add	r7, sp, #0
 8007534:	60f8      	str	r0, [r7, #12]
 8007536:	607a      	str	r2, [r7, #4]
 8007538:	461a      	mov	r2, r3
 800753a:	460b      	mov	r3, r1
 800753c:	72fb      	strb	r3, [r7, #11]
 800753e:	4613      	mov	r3, r2
 8007540:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	799b      	ldrb	r3, [r3, #6]
 800754a:	b2db      	uxtb	r3, r3
 800754c:	2b01      	cmp	r3, #1
 800754e:	d13d      	bne.n	80075cc <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	795b      	ldrb	r3, [r3, #5]
 8007554:	2b01      	cmp	r3, #1
 8007556:	d101      	bne.n	800755c <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8007558:	2302      	movs	r3, #2
 800755a:	e038      	b.n	80075ce <HAL_SUBGHZ_ExecGetCmd+0xa0>
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2201      	movs	r2, #1
 8007560:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007562:	68f8      	ldr	r0, [r7, #12]
 8007564:	f000 fa38 	bl	80079d8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007568:	f7ff fde8 	bl	800713c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800756c:	7afb      	ldrb	r3, [r7, #11]
 800756e:	4619      	mov	r1, r3
 8007570:	68f8      	ldr	r0, [r7, #12]
 8007572:	f000 f983 	bl	800787c <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007576:	2100      	movs	r1, #0
 8007578:	68f8      	ldr	r0, [r7, #12]
 800757a:	f000 f97f 	bl	800787c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800757e:	2300      	movs	r3, #0
 8007580:	82fb      	strh	r3, [r7, #22]
 8007582:	e009      	b.n	8007598 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007584:	69b9      	ldr	r1, [r7, #24]
 8007586:	68f8      	ldr	r0, [r7, #12]
 8007588:	f000 f9ce 	bl	8007928 <SUBGHZSPI_Receive>
      pData++;
 800758c:	69bb      	ldr	r3, [r7, #24]
 800758e:	3301      	adds	r3, #1
 8007590:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007592:	8afb      	ldrh	r3, [r7, #22]
 8007594:	3301      	adds	r3, #1
 8007596:	82fb      	strh	r3, [r7, #22]
 8007598:	8afa      	ldrh	r2, [r7, #22]
 800759a:	893b      	ldrh	r3, [r7, #8]
 800759c:	429a      	cmp	r2, r3
 800759e:	d3f1      	bcc.n	8007584 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80075a0:	f7ff fdbc 	bl	800711c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80075a4:	68f8      	ldr	r0, [r7, #12]
 80075a6:	f000 fa3b 	bl	8007a20 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d002      	beq.n	80075b8 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	77fb      	strb	r3, [r7, #31]
 80075b6:	e001      	b.n	80075bc <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 80075b8:	2300      	movs	r3, #0
 80075ba:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	2201      	movs	r2, #1
 80075c0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	2200      	movs	r2, #0
 80075c6:	715a      	strb	r2, [r3, #5]

    return status;
 80075c8:	7ffb      	ldrb	r3, [r7, #31]
 80075ca:	e000      	b.n	80075ce <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80075cc:	2302      	movs	r3, #2
  }
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3720      	adds	r7, #32
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b086      	sub	sp, #24
 80075da:	af00      	add	r7, sp, #0
 80075dc:	60f8      	str	r0, [r7, #12]
 80075de:	607a      	str	r2, [r7, #4]
 80075e0:	461a      	mov	r2, r3
 80075e2:	460b      	mov	r3, r1
 80075e4:	72fb      	strb	r3, [r7, #11]
 80075e6:	4613      	mov	r3, r2
 80075e8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	799b      	ldrb	r3, [r3, #6]
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d13e      	bne.n	8007672 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	795b      	ldrb	r3, [r3, #5]
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d101      	bne.n	8007600 <HAL_SUBGHZ_WriteBuffer+0x2a>
 80075fc:	2302      	movs	r3, #2
 80075fe:	e039      	b.n	8007674 <HAL_SUBGHZ_WriteBuffer+0x9e>
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2201      	movs	r2, #1
 8007604:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007606:	68f8      	ldr	r0, [r7, #12]
 8007608:	f000 f9e6 	bl	80079d8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800760c:	f7ff fd96 	bl	800713c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8007610:	210e      	movs	r1, #14
 8007612:	68f8      	ldr	r0, [r7, #12]
 8007614:	f000 f932 	bl	800787c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007618:	7afb      	ldrb	r3, [r7, #11]
 800761a:	4619      	mov	r1, r3
 800761c:	68f8      	ldr	r0, [r7, #12]
 800761e:	f000 f92d 	bl	800787c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007622:	2300      	movs	r3, #0
 8007624:	82bb      	strh	r3, [r7, #20]
 8007626:	e00a      	b.n	800763e <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007628:	8abb      	ldrh	r3, [r7, #20]
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	4413      	add	r3, r2
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	4619      	mov	r1, r3
 8007632:	68f8      	ldr	r0, [r7, #12]
 8007634:	f000 f922 	bl	800787c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007638:	8abb      	ldrh	r3, [r7, #20]
 800763a:	3301      	adds	r3, #1
 800763c:	82bb      	strh	r3, [r7, #20]
 800763e:	8aba      	ldrh	r2, [r7, #20]
 8007640:	893b      	ldrh	r3, [r7, #8]
 8007642:	429a      	cmp	r2, r3
 8007644:	d3f0      	bcc.n	8007628 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007646:	f7ff fd69 	bl	800711c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800764a:	68f8      	ldr	r0, [r7, #12]
 800764c:	f000 f9e8 	bl	8007a20 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d002      	beq.n	800765e <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8007658:	2301      	movs	r3, #1
 800765a:	75fb      	strb	r3, [r7, #23]
 800765c:	e001      	b.n	8007662 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 800765e:	2300      	movs	r3, #0
 8007660:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2201      	movs	r2, #1
 8007666:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	2200      	movs	r2, #0
 800766c:	715a      	strb	r2, [r3, #5]

    return status;
 800766e:	7dfb      	ldrb	r3, [r7, #23]
 8007670:	e000      	b.n	8007674 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8007672:	2302      	movs	r3, #2
  }
}
 8007674:	4618      	mov	r0, r3
 8007676:	3718      	adds	r7, #24
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b088      	sub	sp, #32
 8007680:	af00      	add	r7, sp, #0
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	607a      	str	r2, [r7, #4]
 8007686:	461a      	mov	r2, r3
 8007688:	460b      	mov	r3, r1
 800768a:	72fb      	strb	r3, [r7, #11]
 800768c:	4613      	mov	r3, r2
 800768e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	799b      	ldrb	r3, [r3, #6]
 8007698:	b2db      	uxtb	r3, r3
 800769a:	2b01      	cmp	r3, #1
 800769c:	d141      	bne.n	8007722 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	795b      	ldrb	r3, [r3, #5]
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d101      	bne.n	80076aa <HAL_SUBGHZ_ReadBuffer+0x2e>
 80076a6:	2302      	movs	r3, #2
 80076a8:	e03c      	b.n	8007724 <HAL_SUBGHZ_ReadBuffer+0xa8>
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2201      	movs	r2, #1
 80076ae:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80076b0:	68f8      	ldr	r0, [r7, #12]
 80076b2:	f000 f991 	bl	80079d8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80076b6:	f7ff fd41 	bl	800713c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 80076ba:	211e      	movs	r1, #30
 80076bc:	68f8      	ldr	r0, [r7, #12]
 80076be:	f000 f8dd 	bl	800787c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80076c2:	7afb      	ldrb	r3, [r7, #11]
 80076c4:	4619      	mov	r1, r3
 80076c6:	68f8      	ldr	r0, [r7, #12]
 80076c8:	f000 f8d8 	bl	800787c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80076cc:	2100      	movs	r1, #0
 80076ce:	68f8      	ldr	r0, [r7, #12]
 80076d0:	f000 f8d4 	bl	800787c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80076d4:	2300      	movs	r3, #0
 80076d6:	82fb      	strh	r3, [r7, #22]
 80076d8:	e009      	b.n	80076ee <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80076da:	69b9      	ldr	r1, [r7, #24]
 80076dc:	68f8      	ldr	r0, [r7, #12]
 80076de:	f000 f923 	bl	8007928 <SUBGHZSPI_Receive>
      pData++;
 80076e2:	69bb      	ldr	r3, [r7, #24]
 80076e4:	3301      	adds	r3, #1
 80076e6:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80076e8:	8afb      	ldrh	r3, [r7, #22]
 80076ea:	3301      	adds	r3, #1
 80076ec:	82fb      	strh	r3, [r7, #22]
 80076ee:	8afa      	ldrh	r2, [r7, #22]
 80076f0:	893b      	ldrh	r3, [r7, #8]
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d3f1      	bcc.n	80076da <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80076f6:	f7ff fd11 	bl	800711c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80076fa:	68f8      	ldr	r0, [r7, #12]
 80076fc:	f000 f990 	bl	8007a20 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d002      	beq.n	800770e <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8007708:	2301      	movs	r3, #1
 800770a:	77fb      	strb	r3, [r7, #31]
 800770c:	e001      	b.n	8007712 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 800770e:	2300      	movs	r3, #0
 8007710:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2201      	movs	r2, #1
 8007716:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	2200      	movs	r2, #0
 800771c:	715a      	strb	r2, [r3, #5]

    return status;
 800771e:	7ffb      	ldrb	r3, [r7, #31]
 8007720:	e000      	b.n	8007724 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8007722:	2302      	movs	r3, #2
  }
}
 8007724:	4618      	mov	r0, r3
 8007726:	3720      	adds	r7, #32
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8007734:	2300      	movs	r3, #0
 8007736:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8007738:	f107 020c 	add.w	r2, r7, #12
 800773c:	2302      	movs	r3, #2
 800773e:	2112      	movs	r1, #18
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f7ff fef4 	bl	800752e <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8007746:	7b3b      	ldrb	r3, [r7, #12]
 8007748:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 800774a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800774e:	021b      	lsls	r3, r3, #8
 8007750:	b21a      	sxth	r2, r3
 8007752:	7b7b      	ldrb	r3, [r7, #13]
 8007754:	b21b      	sxth	r3, r3
 8007756:	4313      	orrs	r3, r2
 8007758:	b21b      	sxth	r3, r3
 800775a:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 800775c:	f107 020c 	add.w	r2, r7, #12
 8007760:	2302      	movs	r3, #2
 8007762:	2102      	movs	r1, #2
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f7ff fe83 	bl	8007470 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800776a:	89fb      	ldrh	r3, [r7, #14]
 800776c:	f003 0301 	and.w	r3, r3, #1
 8007770:	2b00      	cmp	r3, #0
 8007772:	d002      	beq.n	800777a <HAL_SUBGHZ_IRQHandler+0x4e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f011 fea9 	bl	80194cc <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 800777a:	89fb      	ldrh	r3, [r7, #14]
 800777c:	085b      	lsrs	r3, r3, #1
 800777e:	f003 0301 	and.w	r3, r3, #1
 8007782:	2b00      	cmp	r3, #0
 8007784:	d002      	beq.n	800778c <HAL_SUBGHZ_IRQHandler+0x60>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f011 feae 	bl	80194e8 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800778c:	89fb      	ldrh	r3, [r7, #14]
 800778e:	089b      	lsrs	r3, r3, #2
 8007790:	f003 0301 	and.w	r3, r3, #1
 8007794:	2b00      	cmp	r3, #0
 8007796:	d002      	beq.n	800779e <HAL_SUBGHZ_IRQHandler+0x72>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f011 fefd 	bl	8019598 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800779e:	89fb      	ldrh	r3, [r7, #14]
 80077a0:	08db      	lsrs	r3, r3, #3
 80077a2:	f003 0301 	and.w	r3, r3, #1
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d002      	beq.n	80077b0 <HAL_SUBGHZ_IRQHandler+0x84>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f011 ff02 	bl	80195b4 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 80077b0:	89fb      	ldrh	r3, [r7, #14]
 80077b2:	091b      	lsrs	r3, r3, #4
 80077b4:	f003 0301 	and.w	r3, r3, #1
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d002      	beq.n	80077c2 <HAL_SUBGHZ_IRQHandler+0x96>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f011 ff07 	bl	80195d0 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 80077c2:	89fb      	ldrh	r3, [r7, #14]
 80077c4:	095b      	lsrs	r3, r3, #5
 80077c6:	f003 0301 	and.w	r3, r3, #1
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d002      	beq.n	80077d4 <HAL_SUBGHZ_IRQHandler+0xa8>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f011 fed4 	bl	801957c <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 80077d4:	89fb      	ldrh	r3, [r7, #14]
 80077d6:	099b      	lsrs	r3, r3, #6
 80077d8:	f003 0301 	and.w	r3, r3, #1
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d002      	beq.n	80077e6 <HAL_SUBGHZ_IRQHandler+0xba>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f011 fe8f 	bl	8019504 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 80077e6:	89fb      	ldrh	r3, [r7, #14]
 80077e8:	09db      	lsrs	r3, r3, #7
 80077ea:	f003 0301 	and.w	r3, r3, #1
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d00e      	beq.n	8007810 <HAL_SUBGHZ_IRQHandler+0xe4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 80077f2:	89fb      	ldrh	r3, [r7, #14]
 80077f4:	0a1b      	lsrs	r3, r3, #8
 80077f6:	f003 0301 	and.w	r3, r3, #1
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d004      	beq.n	8007808 <HAL_SUBGHZ_IRQHandler+0xdc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 80077fe:	2101      	movs	r1, #1
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f011 fe8d 	bl	8019520 <HAL_SUBGHZ_CADStatusCallback>
 8007806:	e003      	b.n	8007810 <HAL_SUBGHZ_IRQHandler+0xe4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8007808:	2100      	movs	r1, #0
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f011 fe88 	bl	8019520 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8007810:	89fb      	ldrh	r3, [r7, #14]
 8007812:	0a5b      	lsrs	r3, r3, #9
 8007814:	f003 0301 	and.w	r3, r3, #1
 8007818:	2b00      	cmp	r3, #0
 800781a:	d002      	beq.n	8007822 <HAL_SUBGHZ_IRQHandler+0xf6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f011 fe9d 	bl	801955c <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8007822:	89fb      	ldrh	r3, [r7, #14]
 8007824:	0b9b      	lsrs	r3, r3, #14
 8007826:	f003 0301 	and.w	r3, r3, #1
 800782a:	2b00      	cmp	r3, #0
 800782c:	d002      	beq.n	8007834 <HAL_SUBGHZ_IRQHandler+0x108>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f011 fedc 	bl	80195ec <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8007834:	bf00      	nop
 8007836:	3710      	adds	r7, #16
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007844:	4b0c      	ldr	r3, [pc, #48]	@ (8007878 <SUBGHZSPI_Init+0x3c>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a0b      	ldr	r2, [pc, #44]	@ (8007878 <SUBGHZSPI_Init+0x3c>)
 800784a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800784e:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8007850:	4a09      	ldr	r2, [pc, #36]	@ (8007878 <SUBGHZSPI_Init+0x3c>)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8007858:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800785a:	4b07      	ldr	r3, [pc, #28]	@ (8007878 <SUBGHZSPI_Init+0x3c>)
 800785c:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8007860:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007862:	4b05      	ldr	r3, [pc, #20]	@ (8007878 <SUBGHZSPI_Init+0x3c>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a04      	ldr	r2, [pc, #16]	@ (8007878 <SUBGHZSPI_Init+0x3c>)
 8007868:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800786c:	6013      	str	r3, [r2, #0]
}
 800786e:	bf00      	nop
 8007870:	370c      	adds	r7, #12
 8007872:	46bd      	mov	sp, r7
 8007874:	bc80      	pop	{r7}
 8007876:	4770      	bx	lr
 8007878:	58010000 	.word	0x58010000

0800787c <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 800787c:	b480      	push	{r7}
 800787e:	b087      	sub	sp, #28
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	460b      	mov	r3, r1
 8007886:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8007888:	2300      	movs	r3, #0
 800788a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800788c:	4b23      	ldr	r3, [pc, #140]	@ (800791c <SUBGHZSPI_Transmit+0xa0>)
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	4613      	mov	r3, r2
 8007892:	00db      	lsls	r3, r3, #3
 8007894:	1a9b      	subs	r3, r3, r2
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	0cdb      	lsrs	r3, r3, #19
 800789a:	2264      	movs	r2, #100	@ 0x64
 800789c:	fb02 f303 	mul.w	r3, r2, r3
 80078a0:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d105      	bne.n	80078b4 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 80078a8:	2301      	movs	r3, #1
 80078aa:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	609a      	str	r2, [r3, #8]
      break;
 80078b2:	e008      	b.n	80078c6 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	3b01      	subs	r3, #1
 80078b8:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80078ba:	4b19      	ldr	r3, [pc, #100]	@ (8007920 <SUBGHZSPI_Transmit+0xa4>)
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	f003 0302 	and.w	r3, r3, #2
 80078c2:	2b02      	cmp	r3, #2
 80078c4:	d1ed      	bne.n	80078a2 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80078c6:	4b17      	ldr	r3, [pc, #92]	@ (8007924 <SUBGHZSPI_Transmit+0xa8>)
 80078c8:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	78fa      	ldrb	r2, [r7, #3]
 80078ce:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80078d0:	4b12      	ldr	r3, [pc, #72]	@ (800791c <SUBGHZSPI_Transmit+0xa0>)
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	4613      	mov	r3, r2
 80078d6:	00db      	lsls	r3, r3, #3
 80078d8:	1a9b      	subs	r3, r3, r2
 80078da:	009b      	lsls	r3, r3, #2
 80078dc:	0cdb      	lsrs	r3, r3, #19
 80078de:	2264      	movs	r2, #100	@ 0x64
 80078e0:	fb02 f303 	mul.w	r3, r2, r3
 80078e4:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d105      	bne.n	80078f8 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 80078ec:	2301      	movs	r3, #1
 80078ee:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2201      	movs	r2, #1
 80078f4:	609a      	str	r2, [r3, #8]
      break;
 80078f6:	e008      	b.n	800790a <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	3b01      	subs	r3, #1
 80078fc:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80078fe:	4b08      	ldr	r3, [pc, #32]	@ (8007920 <SUBGHZSPI_Transmit+0xa4>)
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	f003 0301 	and.w	r3, r3, #1
 8007906:	2b01      	cmp	r3, #1
 8007908:	d1ed      	bne.n	80078e6 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800790a:	4b05      	ldr	r3, [pc, #20]	@ (8007920 <SUBGHZSPI_Transmit+0xa4>)
 800790c:	68db      	ldr	r3, [r3, #12]

  return status;
 800790e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007910:	4618      	mov	r0, r3
 8007912:	371c      	adds	r7, #28
 8007914:	46bd      	mov	sp, r7
 8007916:	bc80      	pop	{r7}
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	20000070 	.word	0x20000070
 8007920:	58010000 	.word	0x58010000
 8007924:	5801000c 	.word	0x5801000c

08007928 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8007928:	b480      	push	{r7}
 800792a:	b087      	sub	sp, #28
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007932:	2300      	movs	r3, #0
 8007934:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007936:	4b25      	ldr	r3, [pc, #148]	@ (80079cc <SUBGHZSPI_Receive+0xa4>)
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	4613      	mov	r3, r2
 800793c:	00db      	lsls	r3, r3, #3
 800793e:	1a9b      	subs	r3, r3, r2
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	0cdb      	lsrs	r3, r3, #19
 8007944:	2264      	movs	r2, #100	@ 0x64
 8007946:	fb02 f303 	mul.w	r3, r2, r3
 800794a:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d105      	bne.n	800795e <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2201      	movs	r2, #1
 800795a:	609a      	str	r2, [r3, #8]
      break;
 800795c:	e008      	b.n	8007970 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	3b01      	subs	r3, #1
 8007962:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007964:	4b1a      	ldr	r3, [pc, #104]	@ (80079d0 <SUBGHZSPI_Receive+0xa8>)
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	f003 0302 	and.w	r3, r3, #2
 800796c:	2b02      	cmp	r3, #2
 800796e:	d1ed      	bne.n	800794c <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007970:	4b18      	ldr	r3, [pc, #96]	@ (80079d4 <SUBGHZSPI_Receive+0xac>)
 8007972:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	22ff      	movs	r2, #255	@ 0xff
 8007978:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800797a:	4b14      	ldr	r3, [pc, #80]	@ (80079cc <SUBGHZSPI_Receive+0xa4>)
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	4613      	mov	r3, r2
 8007980:	00db      	lsls	r3, r3, #3
 8007982:	1a9b      	subs	r3, r3, r2
 8007984:	009b      	lsls	r3, r3, #2
 8007986:	0cdb      	lsrs	r3, r3, #19
 8007988:	2264      	movs	r2, #100	@ 0x64
 800798a:	fb02 f303 	mul.w	r3, r2, r3
 800798e:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d105      	bne.n	80079a2 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8007996:	2301      	movs	r3, #1
 8007998:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2201      	movs	r2, #1
 800799e:	609a      	str	r2, [r3, #8]
      break;
 80079a0:	e008      	b.n	80079b4 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	3b01      	subs	r3, #1
 80079a6:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80079a8:	4b09      	ldr	r3, [pc, #36]	@ (80079d0 <SUBGHZSPI_Receive+0xa8>)
 80079aa:	689b      	ldr	r3, [r3, #8]
 80079ac:	f003 0301 	and.w	r3, r3, #1
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d1ed      	bne.n	8007990 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 80079b4:	4b06      	ldr	r3, [pc, #24]	@ (80079d0 <SUBGHZSPI_Receive+0xa8>)
 80079b6:	68db      	ldr	r3, [r3, #12]
 80079b8:	b2da      	uxtb	r2, r3
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	701a      	strb	r2, [r3, #0]

  return status;
 80079be:	7dfb      	ldrb	r3, [r7, #23]
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	371c      	adds	r7, #28
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bc80      	pop	{r7}
 80079c8:	4770      	bx	lr
 80079ca:	bf00      	nop
 80079cc:	20000070 	.word	0x20000070
 80079d0:	58010000 	.word	0x58010000
 80079d4:	5801000c 	.word	0x5801000c

080079d8 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b084      	sub	sp, #16
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	791b      	ldrb	r3, [r3, #4]
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d111      	bne.n	8007a0c <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 80079e8:	4b0c      	ldr	r3, [pc, #48]	@ (8007a1c <SUBGHZ_CheckDeviceReady+0x44>)
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	4613      	mov	r3, r2
 80079ee:	005b      	lsls	r3, r3, #1
 80079f0:	4413      	add	r3, r2
 80079f2:	00db      	lsls	r3, r3, #3
 80079f4:	0c1b      	lsrs	r3, r3, #16
 80079f6:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80079f8:	f7ff fba0 	bl	800713c <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	3b01      	subs	r3, #1
 8007a00:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d1f9      	bne.n	80079fc <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007a08:	f7ff fb88 	bl	800711c <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 f807 	bl	8007a20 <SUBGHZ_WaitOnBusy>
 8007a12:	4603      	mov	r3, r0
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3710      	adds	r7, #16
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	20000070 	.word	0x20000070

08007a20 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b086      	sub	sp, #24
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8007a2c:	4b12      	ldr	r3, [pc, #72]	@ (8007a78 <SUBGHZ_WaitOnBusy+0x58>)
 8007a2e:	681a      	ldr	r2, [r3, #0]
 8007a30:	4613      	mov	r3, r2
 8007a32:	005b      	lsls	r3, r3, #1
 8007a34:	4413      	add	r3, r2
 8007a36:	00db      	lsls	r3, r3, #3
 8007a38:	0d1b      	lsrs	r3, r3, #20
 8007a3a:	2264      	movs	r2, #100	@ 0x64
 8007a3c:	fb02 f303 	mul.w	r3, r2, r3
 8007a40:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8007a42:	f7ff fba9 	bl	8007198 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8007a46:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d105      	bne.n	8007a5a <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2202      	movs	r2, #2
 8007a56:	609a      	str	r2, [r3, #8]
      break;
 8007a58:	e009      	b.n	8007a6e <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	3b01      	subs	r3, #1
 8007a5e:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8007a60:	f7ff fb88 	bl	8007174 <LL_PWR_IsActiveFlag_RFBUSYS>
 8007a64:	4602      	mov	r2, r0
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	4013      	ands	r3, r2
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d0e9      	beq.n	8007a42 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8007a6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3718      	adds	r7, #24
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	20000070 	.word	0x20000070

08007a7c <LL_RCC_GetUSARTClockSource>:
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8007a84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a88:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	401a      	ands	r2, r3
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	041b      	lsls	r3, r3, #16
 8007a94:	4313      	orrs	r3, r2
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	370c      	adds	r7, #12
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bc80      	pop	{r7}
 8007a9e:	4770      	bx	lr

08007aa0 <LL_RCC_GetLPUARTClockSource>:
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b083      	sub	sp, #12
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007aa8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007aac:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	4013      	ands	r3, r2
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	370c      	adds	r7, #12
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bc80      	pop	{r7}
 8007abc:	4770      	bx	lr

08007abe <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007abe:	b580      	push	{r7, lr}
 8007ac0:	b082      	sub	sp, #8
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d101      	bne.n	8007ad0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007acc:	2301      	movs	r3, #1
 8007ace:	e042      	b.n	8007b56 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d106      	bne.n	8007ae8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f7fa f9fc 	bl	8001ee0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2224      	movs	r2, #36	@ 0x24
 8007aec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	681a      	ldr	r2, [r3, #0]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f022 0201 	bic.w	r2, r2, #1
 8007afe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 fc3b 	bl	800837c <UART_SetConfig>
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d101      	bne.n	8007b10 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	e022      	b.n	8007b56 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d002      	beq.n	8007b1e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 fea3 	bl	8008864 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	685a      	ldr	r2, [r3, #4]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007b2c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	689a      	ldr	r2, [r3, #8]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007b3c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f042 0201 	orr.w	r2, r2, #1
 8007b4c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 ff29 	bl	80089a6 <UART_CheckIdleState>
 8007b54:	4603      	mov	r3, r0
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3708      	adds	r7, #8
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
	...

08007b60 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b08a      	sub	sp, #40	@ 0x28
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	4613      	mov	r3, r2
 8007b6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b74:	2b20      	cmp	r3, #32
 8007b76:	d137      	bne.n	8007be8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d002      	beq.n	8007b84 <HAL_UART_Receive_IT+0x24>
 8007b7e:	88fb      	ldrh	r3, [r7, #6]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d101      	bne.n	8007b88 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007b84:	2301      	movs	r3, #1
 8007b86:	e030      	b.n	8007bea <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a18      	ldr	r2, [pc, #96]	@ (8007bf4 <HAL_UART_Receive_IT+0x94>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d01f      	beq.n	8007bd8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d018      	beq.n	8007bd8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	e853 3f00 	ldrex	r3, [r3]
 8007bb2:	613b      	str	r3, [r7, #16]
   return(result);
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007bba:	627b      	str	r3, [r7, #36]	@ 0x24
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	461a      	mov	r2, r3
 8007bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc4:	623b      	str	r3, [r7, #32]
 8007bc6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc8:	69f9      	ldr	r1, [r7, #28]
 8007bca:	6a3a      	ldr	r2, [r7, #32]
 8007bcc:	e841 2300 	strex	r3, r2, [r1]
 8007bd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8007bd2:	69bb      	ldr	r3, [r7, #24]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d1e6      	bne.n	8007ba6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007bd8:	88fb      	ldrh	r3, [r7, #6]
 8007bda:	461a      	mov	r2, r3
 8007bdc:	68b9      	ldr	r1, [r7, #8]
 8007bde:	68f8      	ldr	r0, [r7, #12]
 8007be0:	f000 fff8 	bl	8008bd4 <UART_Start_Receive_IT>
 8007be4:	4603      	mov	r3, r0
 8007be6:	e000      	b.n	8007bea <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007be8:	2302      	movs	r3, #2
  }
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3728      	adds	r7, #40	@ 0x28
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
 8007bf2:	bf00      	nop
 8007bf4:	40008000 	.word	0x40008000

08007bf8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b08a      	sub	sp, #40	@ 0x28
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	4613      	mov	r3, r2
 8007c04:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c0c:	2b20      	cmp	r3, #32
 8007c0e:	d167      	bne.n	8007ce0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d002      	beq.n	8007c1c <HAL_UART_Transmit_DMA+0x24>
 8007c16:	88fb      	ldrh	r3, [r7, #6]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d101      	bne.n	8007c20 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	e060      	b.n	8007ce2 <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	68ba      	ldr	r2, [r7, #8]
 8007c24:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	88fa      	ldrh	r2, [r7, #6]
 8007c2a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	88fa      	ldrh	r2, [r7, #6]
 8007c32:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2221      	movs	r2, #33	@ 0x21
 8007c42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d028      	beq.n	8007ca0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c52:	4a26      	ldr	r2, [pc, #152]	@ (8007cec <HAL_UART_Transmit_DMA+0xf4>)
 8007c54:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c5a:	4a25      	ldr	r2, [pc, #148]	@ (8007cf0 <HAL_UART_Transmit_DMA+0xf8>)
 8007c5c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c62:	4a24      	ldr	r2, [pc, #144]	@ (8007cf4 <HAL_UART_Transmit_DMA+0xfc>)
 8007c64:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c76:	4619      	mov	r1, r3
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	3328      	adds	r3, #40	@ 0x28
 8007c7e:	461a      	mov	r2, r3
 8007c80:	88fb      	ldrh	r3, [r7, #6]
 8007c82:	f7fb fd21 	bl	80036c8 <HAL_DMA_Start_IT>
 8007c86:	4603      	mov	r3, r0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d009      	beq.n	8007ca0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2210      	movs	r2, #16
 8007c90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2220      	movs	r2, #32
 8007c98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	e020      	b.n	8007ce2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	2240      	movs	r2, #64	@ 0x40
 8007ca6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	3308      	adds	r3, #8
 8007cae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	e853 3f00 	ldrex	r3, [r3]
 8007cb6:	613b      	str	r3, [r7, #16]
   return(result);
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	3308      	adds	r3, #8
 8007cc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cc8:	623a      	str	r2, [r7, #32]
 8007cca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ccc:	69f9      	ldr	r1, [r7, #28]
 8007cce:	6a3a      	ldr	r2, [r7, #32]
 8007cd0:	e841 2300 	strex	r3, r2, [r1]
 8007cd4:	61bb      	str	r3, [r7, #24]
   return(result);
 8007cd6:	69bb      	ldr	r3, [r7, #24]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d1e5      	bne.n	8007ca8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	e000      	b.n	8007ce2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007ce0:	2302      	movs	r3, #2
  }
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3728      	adds	r7, #40	@ 0x28
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}
 8007cea:	bf00      	nop
 8007cec:	08008f5f 	.word	0x08008f5f
 8007cf0:	08008ff9 	.word	0x08008ff9
 8007cf4:	08009015 	.word	0x08009015

08007cf8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b0ba      	sub	sp, #232	@ 0xe8
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	69db      	ldr	r3, [r3, #28]
 8007d06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007d1e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007d22:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007d26:	4013      	ands	r3, r2
 8007d28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007d2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d11b      	bne.n	8007d6c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007d34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d38:	f003 0320 	and.w	r3, r3, #32
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d015      	beq.n	8007d6c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d44:	f003 0320 	and.w	r3, r3, #32
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d105      	bne.n	8007d58 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007d4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d009      	beq.n	8007d6c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	f000 82e3 	beq.w	8008328 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	4798      	blx	r3
      }
      return;
 8007d6a:	e2dd      	b.n	8008328 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007d6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	f000 8123 	beq.w	8007fbc <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007d76:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007d7a:	4b8d      	ldr	r3, [pc, #564]	@ (8007fb0 <HAL_UART_IRQHandler+0x2b8>)
 8007d7c:	4013      	ands	r3, r2
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d106      	bne.n	8007d90 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007d82:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007d86:	4b8b      	ldr	r3, [pc, #556]	@ (8007fb4 <HAL_UART_IRQHandler+0x2bc>)
 8007d88:	4013      	ands	r3, r2
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	f000 8116 	beq.w	8007fbc <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007d90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d94:	f003 0301 	and.w	r3, r3, #1
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d011      	beq.n	8007dc0 <HAL_UART_IRQHandler+0xc8>
 8007d9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007da0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d00b      	beq.n	8007dc0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	2201      	movs	r2, #1
 8007dae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007db6:	f043 0201 	orr.w	r2, r3, #1
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007dc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007dc4:	f003 0302 	and.w	r3, r3, #2
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d011      	beq.n	8007df0 <HAL_UART_IRQHandler+0xf8>
 8007dcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007dd0:	f003 0301 	and.w	r3, r3, #1
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d00b      	beq.n	8007df0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	2202      	movs	r2, #2
 8007dde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007de6:	f043 0204 	orr.w	r2, r3, #4
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007df4:	f003 0304 	and.w	r3, r3, #4
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d011      	beq.n	8007e20 <HAL_UART_IRQHandler+0x128>
 8007dfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e00:	f003 0301 	and.w	r3, r3, #1
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d00b      	beq.n	8007e20 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	2204      	movs	r2, #4
 8007e0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e16:	f043 0202 	orr.w	r2, r3, #2
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e24:	f003 0308 	and.w	r3, r3, #8
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d017      	beq.n	8007e5c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e30:	f003 0320 	and.w	r3, r3, #32
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d105      	bne.n	8007e44 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007e38:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007e3c:	4b5c      	ldr	r3, [pc, #368]	@ (8007fb0 <HAL_UART_IRQHandler+0x2b8>)
 8007e3e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d00b      	beq.n	8007e5c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	2208      	movs	r2, #8
 8007e4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e52:	f043 0208 	orr.w	r2, r3, #8
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007e5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d012      	beq.n	8007e8e <HAL_UART_IRQHandler+0x196>
 8007e68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e6c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d00c      	beq.n	8007e8e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007e7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e84:	f043 0220 	orr.w	r2, r3, #32
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	f000 8249 	beq.w	800832c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e9e:	f003 0320 	and.w	r3, r3, #32
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d013      	beq.n	8007ece <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007ea6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007eaa:	f003 0320 	and.w	r3, r3, #32
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d105      	bne.n	8007ebe <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007eb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007eb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d007      	beq.n	8007ece <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d003      	beq.n	8007ece <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ed4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ee2:	2b40      	cmp	r3, #64	@ 0x40
 8007ee4:	d005      	beq.n	8007ef2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007ee6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007eea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d054      	beq.n	8007f9c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 ffce 	bl	8008e94 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	689b      	ldr	r3, [r3, #8]
 8007efe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f02:	2b40      	cmp	r3, #64	@ 0x40
 8007f04:	d146      	bne.n	8007f94 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	3308      	adds	r3, #8
 8007f0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f10:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007f14:	e853 3f00 	ldrex	r3, [r3]
 8007f18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007f1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	3308      	adds	r3, #8
 8007f2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007f32:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007f36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007f3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007f42:	e841 2300 	strex	r3, r2, [r1]
 8007f46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007f4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d1d9      	bne.n	8007f06 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d017      	beq.n	8007f8c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f62:	4a15      	ldr	r2, [pc, #84]	@ (8007fb8 <HAL_UART_IRQHandler+0x2c0>)
 8007f64:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f7fb fc87 	bl	8003880 <HAL_DMA_Abort_IT>
 8007f72:	4603      	mov	r3, r0
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d019      	beq.n	8007fac <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007f86:	4610      	mov	r0, r2
 8007f88:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f8a:	e00f      	b.n	8007fac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f000 f9e0 	bl	8008352 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f92:	e00b      	b.n	8007fac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f000 f9dc 	bl	8008352 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f9a:	e007      	b.n	8007fac <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f000 f9d8 	bl	8008352 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007faa:	e1bf      	b.n	800832c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fac:	bf00      	nop
    return;
 8007fae:	e1bd      	b.n	800832c <HAL_UART_IRQHandler+0x634>
 8007fb0:	10000001 	.word	0x10000001
 8007fb4:	04000120 	.word	0x04000120
 8007fb8:	08009095 	.word	0x08009095

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	f040 8153 	bne.w	800826c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007fc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007fca:	f003 0310 	and.w	r3, r3, #16
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	f000 814c 	beq.w	800826c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007fd8:	f003 0310 	and.w	r3, r3, #16
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	f000 8145 	beq.w	800826c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	2210      	movs	r2, #16
 8007fe8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ff4:	2b40      	cmp	r3, #64	@ 0x40
 8007ff6:	f040 80bb 	bne.w	8008170 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008008:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800800c:	2b00      	cmp	r3, #0
 800800e:	f000 818f 	beq.w	8008330 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008018:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800801c:	429a      	cmp	r2, r3
 800801e:	f080 8187 	bcs.w	8008330 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008028:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f003 0320 	and.w	r3, r3, #32
 800803a:	2b00      	cmp	r3, #0
 800803c:	f040 8087 	bne.w	800814e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008048:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800804c:	e853 3f00 	ldrex	r3, [r3]
 8008050:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008054:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008058:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800805c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	461a      	mov	r2, r3
 8008066:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800806a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800806e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008072:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008076:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800807a:	e841 2300 	strex	r3, r2, [r1]
 800807e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008082:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008086:	2b00      	cmp	r3, #0
 8008088:	d1da      	bne.n	8008040 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	3308      	adds	r3, #8
 8008090:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008092:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008094:	e853 3f00 	ldrex	r3, [r3]
 8008098:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800809a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800809c:	f023 0301 	bic.w	r3, r3, #1
 80080a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	3308      	adds	r3, #8
 80080aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80080ae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80080b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80080b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80080ba:	e841 2300 	strex	r3, r2, [r1]
 80080be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80080c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d1e1      	bne.n	800808a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	3308      	adds	r3, #8
 80080cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80080d0:	e853 3f00 	ldrex	r3, [r3]
 80080d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80080d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80080d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80080dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	3308      	adds	r3, #8
 80080e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80080ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80080ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80080f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80080f2:	e841 2300 	strex	r3, r2, [r1]
 80080f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80080f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d1e3      	bne.n	80080c6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2220      	movs	r2, #32
 8008102:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008112:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008114:	e853 3f00 	ldrex	r3, [r3]
 8008118:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800811a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800811c:	f023 0310 	bic.w	r3, r3, #16
 8008120:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	461a      	mov	r2, r3
 800812a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800812e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008130:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008132:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008134:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008136:	e841 2300 	strex	r3, r2, [r1]
 800813a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800813c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800813e:	2b00      	cmp	r3, #0
 8008140:	d1e4      	bne.n	800810c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008148:	4618      	mov	r0, r3
 800814a:	f7fb fb3b 	bl	80037c4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2202      	movs	r2, #2
 8008152:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008160:	b29b      	uxth	r3, r3
 8008162:	1ad3      	subs	r3, r2, r3
 8008164:	b29b      	uxth	r3, r3
 8008166:	4619      	mov	r1, r3
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 f8fb 	bl	8008364 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800816e:	e0df      	b.n	8008330 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800817c:	b29b      	uxth	r3, r3
 800817e:	1ad3      	subs	r3, r2, r3
 8008180:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800818a:	b29b      	uxth	r3, r3
 800818c:	2b00      	cmp	r3, #0
 800818e:	f000 80d1 	beq.w	8008334 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8008192:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008196:	2b00      	cmp	r3, #0
 8008198:	f000 80cc 	beq.w	8008334 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081a4:	e853 3f00 	ldrex	r3, [r3]
 80081a8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80081aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80081b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	461a      	mov	r2, r3
 80081ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80081be:	647b      	str	r3, [r7, #68]	@ 0x44
 80081c0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80081c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80081c6:	e841 2300 	strex	r3, r2, [r1]
 80081ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80081cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d1e4      	bne.n	800819c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	3308      	adds	r3, #8
 80081d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081dc:	e853 3f00 	ldrex	r3, [r3]
 80081e0:	623b      	str	r3, [r7, #32]
   return(result);
 80081e2:	6a3b      	ldr	r3, [r7, #32]
 80081e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80081e8:	f023 0301 	bic.w	r3, r3, #1
 80081ec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	3308      	adds	r3, #8
 80081f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80081fa:	633a      	str	r2, [r7, #48]	@ 0x30
 80081fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008200:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008202:	e841 2300 	strex	r3, r2, [r1]
 8008206:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800820a:	2b00      	cmp	r3, #0
 800820c:	d1e1      	bne.n	80081d2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2220      	movs	r2, #32
 8008212:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2200      	movs	r2, #0
 800821a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	e853 3f00 	ldrex	r3, [r3]
 800822e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f023 0310 	bic.w	r3, r3, #16
 8008236:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	461a      	mov	r2, r3
 8008240:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008244:	61fb      	str	r3, [r7, #28]
 8008246:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008248:	69b9      	ldr	r1, [r7, #24]
 800824a:	69fa      	ldr	r2, [r7, #28]
 800824c:	e841 2300 	strex	r3, r2, [r1]
 8008250:	617b      	str	r3, [r7, #20]
   return(result);
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d1e4      	bne.n	8008222 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2202      	movs	r2, #2
 800825c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800825e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008262:	4619      	mov	r1, r3
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 f87d 	bl	8008364 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800826a:	e063      	b.n	8008334 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800826c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008270:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008274:	2b00      	cmp	r3, #0
 8008276:	d00e      	beq.n	8008296 <HAL_UART_IRQHandler+0x59e>
 8008278:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800827c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008280:	2b00      	cmp	r3, #0
 8008282:	d008      	beq.n	8008296 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800828c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f001 fc5e 	bl	8009b50 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008294:	e051      	b.n	800833a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800829a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d014      	beq.n	80082cc <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80082a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d105      	bne.n	80082ba <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80082ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d008      	beq.n	80082cc <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d03a      	beq.n	8008338 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	4798      	blx	r3
    }
    return;
 80082ca:	e035      	b.n	8008338 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80082cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d009      	beq.n	80082ec <HAL_UART_IRQHandler+0x5f4>
 80082d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d003      	beq.n	80082ec <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 feeb 	bl	80090c0 <UART_EndTransmit_IT>
    return;
 80082ea:	e026      	b.n	800833a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80082ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d009      	beq.n	800830c <HAL_UART_IRQHandler+0x614>
 80082f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082fc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008300:	2b00      	cmp	r3, #0
 8008302:	d003      	beq.n	800830c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f001 fc35 	bl	8009b74 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800830a:	e016      	b.n	800833a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800830c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008310:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008314:	2b00      	cmp	r3, #0
 8008316:	d010      	beq.n	800833a <HAL_UART_IRQHandler+0x642>
 8008318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800831c:	2b00      	cmp	r3, #0
 800831e:	da0c      	bge.n	800833a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f001 fc1e 	bl	8009b62 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008326:	e008      	b.n	800833a <HAL_UART_IRQHandler+0x642>
      return;
 8008328:	bf00      	nop
 800832a:	e006      	b.n	800833a <HAL_UART_IRQHandler+0x642>
    return;
 800832c:	bf00      	nop
 800832e:	e004      	b.n	800833a <HAL_UART_IRQHandler+0x642>
      return;
 8008330:	bf00      	nop
 8008332:	e002      	b.n	800833a <HAL_UART_IRQHandler+0x642>
      return;
 8008334:	bf00      	nop
 8008336:	e000      	b.n	800833a <HAL_UART_IRQHandler+0x642>
    return;
 8008338:	bf00      	nop
  }
}
 800833a:	37e8      	adds	r7, #232	@ 0xe8
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008340:	b480      	push	{r7}
 8008342:	b083      	sub	sp, #12
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008348:	bf00      	nop
 800834a:	370c      	adds	r7, #12
 800834c:	46bd      	mov	sp, r7
 800834e:	bc80      	pop	{r7}
 8008350:	4770      	bx	lr

08008352 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008352:	b480      	push	{r7}
 8008354:	b083      	sub	sp, #12
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800835a:	bf00      	nop
 800835c:	370c      	adds	r7, #12
 800835e:	46bd      	mov	sp, r7
 8008360:	bc80      	pop	{r7}
 8008362:	4770      	bx	lr

08008364 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008364:	b480      	push	{r7}
 8008366:	b083      	sub	sp, #12
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	460b      	mov	r3, r1
 800836e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008370:	bf00      	nop
 8008372:	370c      	adds	r7, #12
 8008374:	46bd      	mov	sp, r7
 8008376:	bc80      	pop	{r7}
 8008378:	4770      	bx	lr
	...

0800837c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800837c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008380:	b08c      	sub	sp, #48	@ 0x30
 8008382:	af00      	add	r7, sp, #0
 8008384:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008386:	2300      	movs	r3, #0
 8008388:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	689a      	ldr	r2, [r3, #8]
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	691b      	ldr	r3, [r3, #16]
 8008394:	431a      	orrs	r2, r3
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	695b      	ldr	r3, [r3, #20]
 800839a:	431a      	orrs	r2, r3
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	69db      	ldr	r3, [r3, #28]
 80083a0:	4313      	orrs	r3, r2
 80083a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	4b94      	ldr	r3, [pc, #592]	@ (80085fc <UART_SetConfig+0x280>)
 80083ac:	4013      	ands	r3, r2
 80083ae:	697a      	ldr	r2, [r7, #20]
 80083b0:	6812      	ldr	r2, [r2, #0]
 80083b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80083b4:	430b      	orrs	r3, r1
 80083b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	68da      	ldr	r2, [r3, #12]
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	430a      	orrs	r2, r1
 80083cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	699b      	ldr	r3, [r3, #24]
 80083d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a89      	ldr	r2, [pc, #548]	@ (8008600 <UART_SetConfig+0x284>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d004      	beq.n	80083e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	6a1b      	ldr	r3, [r3, #32]
 80083e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083e4:	4313      	orrs	r3, r2
 80083e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	689b      	ldr	r3, [r3, #8]
 80083ee:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80083f2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80083f6:	697a      	ldr	r2, [r7, #20]
 80083f8:	6812      	ldr	r2, [r2, #0]
 80083fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80083fc:	430b      	orrs	r3, r1
 80083fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008406:	f023 010f 	bic.w	r1, r3, #15
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	430a      	orrs	r2, r1
 8008414:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a7a      	ldr	r2, [pc, #488]	@ (8008604 <UART_SetConfig+0x288>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d127      	bne.n	8008470 <UART_SetConfig+0xf4>
 8008420:	2003      	movs	r0, #3
 8008422:	f7ff fb2b 	bl	8007a7c <LL_RCC_GetUSARTClockSource>
 8008426:	4603      	mov	r3, r0
 8008428:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 800842c:	2b03      	cmp	r3, #3
 800842e:	d81b      	bhi.n	8008468 <UART_SetConfig+0xec>
 8008430:	a201      	add	r2, pc, #4	@ (adr r2, 8008438 <UART_SetConfig+0xbc>)
 8008432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008436:	bf00      	nop
 8008438:	08008449 	.word	0x08008449
 800843c:	08008459 	.word	0x08008459
 8008440:	08008451 	.word	0x08008451
 8008444:	08008461 	.word	0x08008461
 8008448:	2301      	movs	r3, #1
 800844a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800844e:	e080      	b.n	8008552 <UART_SetConfig+0x1d6>
 8008450:	2302      	movs	r3, #2
 8008452:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008456:	e07c      	b.n	8008552 <UART_SetConfig+0x1d6>
 8008458:	2304      	movs	r3, #4
 800845a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800845e:	e078      	b.n	8008552 <UART_SetConfig+0x1d6>
 8008460:	2308      	movs	r3, #8
 8008462:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008466:	e074      	b.n	8008552 <UART_SetConfig+0x1d6>
 8008468:	2310      	movs	r3, #16
 800846a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800846e:	e070      	b.n	8008552 <UART_SetConfig+0x1d6>
 8008470:	697b      	ldr	r3, [r7, #20]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	4a64      	ldr	r2, [pc, #400]	@ (8008608 <UART_SetConfig+0x28c>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d138      	bne.n	80084ec <UART_SetConfig+0x170>
 800847a:	200c      	movs	r0, #12
 800847c:	f7ff fafe 	bl	8007a7c <LL_RCC_GetUSARTClockSource>
 8008480:	4603      	mov	r3, r0
 8008482:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8008486:	2b0c      	cmp	r3, #12
 8008488:	d82c      	bhi.n	80084e4 <UART_SetConfig+0x168>
 800848a:	a201      	add	r2, pc, #4	@ (adr r2, 8008490 <UART_SetConfig+0x114>)
 800848c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008490:	080084c5 	.word	0x080084c5
 8008494:	080084e5 	.word	0x080084e5
 8008498:	080084e5 	.word	0x080084e5
 800849c:	080084e5 	.word	0x080084e5
 80084a0:	080084d5 	.word	0x080084d5
 80084a4:	080084e5 	.word	0x080084e5
 80084a8:	080084e5 	.word	0x080084e5
 80084ac:	080084e5 	.word	0x080084e5
 80084b0:	080084cd 	.word	0x080084cd
 80084b4:	080084e5 	.word	0x080084e5
 80084b8:	080084e5 	.word	0x080084e5
 80084bc:	080084e5 	.word	0x080084e5
 80084c0:	080084dd 	.word	0x080084dd
 80084c4:	2300      	movs	r3, #0
 80084c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084ca:	e042      	b.n	8008552 <UART_SetConfig+0x1d6>
 80084cc:	2302      	movs	r3, #2
 80084ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084d2:	e03e      	b.n	8008552 <UART_SetConfig+0x1d6>
 80084d4:	2304      	movs	r3, #4
 80084d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084da:	e03a      	b.n	8008552 <UART_SetConfig+0x1d6>
 80084dc:	2308      	movs	r3, #8
 80084de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084e2:	e036      	b.n	8008552 <UART_SetConfig+0x1d6>
 80084e4:	2310      	movs	r3, #16
 80084e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80084ea:	e032      	b.n	8008552 <UART_SetConfig+0x1d6>
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a43      	ldr	r2, [pc, #268]	@ (8008600 <UART_SetConfig+0x284>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d12a      	bne.n	800854c <UART_SetConfig+0x1d0>
 80084f6:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80084fa:	f7ff fad1 	bl	8007aa0 <LL_RCC_GetLPUARTClockSource>
 80084fe:	4603      	mov	r3, r0
 8008500:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008504:	d01a      	beq.n	800853c <UART_SetConfig+0x1c0>
 8008506:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800850a:	d81b      	bhi.n	8008544 <UART_SetConfig+0x1c8>
 800850c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008510:	d00c      	beq.n	800852c <UART_SetConfig+0x1b0>
 8008512:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008516:	d815      	bhi.n	8008544 <UART_SetConfig+0x1c8>
 8008518:	2b00      	cmp	r3, #0
 800851a:	d003      	beq.n	8008524 <UART_SetConfig+0x1a8>
 800851c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008520:	d008      	beq.n	8008534 <UART_SetConfig+0x1b8>
 8008522:	e00f      	b.n	8008544 <UART_SetConfig+0x1c8>
 8008524:	2300      	movs	r3, #0
 8008526:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800852a:	e012      	b.n	8008552 <UART_SetConfig+0x1d6>
 800852c:	2302      	movs	r3, #2
 800852e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008532:	e00e      	b.n	8008552 <UART_SetConfig+0x1d6>
 8008534:	2304      	movs	r3, #4
 8008536:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800853a:	e00a      	b.n	8008552 <UART_SetConfig+0x1d6>
 800853c:	2308      	movs	r3, #8
 800853e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008542:	e006      	b.n	8008552 <UART_SetConfig+0x1d6>
 8008544:	2310      	movs	r3, #16
 8008546:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800854a:	e002      	b.n	8008552 <UART_SetConfig+0x1d6>
 800854c:	2310      	movs	r3, #16
 800854e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a2a      	ldr	r2, [pc, #168]	@ (8008600 <UART_SetConfig+0x284>)
 8008558:	4293      	cmp	r3, r2
 800855a:	f040 80a4 	bne.w	80086a6 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800855e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008562:	2b08      	cmp	r3, #8
 8008564:	d823      	bhi.n	80085ae <UART_SetConfig+0x232>
 8008566:	a201      	add	r2, pc, #4	@ (adr r2, 800856c <UART_SetConfig+0x1f0>)
 8008568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800856c:	08008591 	.word	0x08008591
 8008570:	080085af 	.word	0x080085af
 8008574:	08008599 	.word	0x08008599
 8008578:	080085af 	.word	0x080085af
 800857c:	0800859f 	.word	0x0800859f
 8008580:	080085af 	.word	0x080085af
 8008584:	080085af 	.word	0x080085af
 8008588:	080085af 	.word	0x080085af
 800858c:	080085a7 	.word	0x080085a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008590:	f7fd fde0 	bl	8006154 <HAL_RCC_GetPCLK1Freq>
 8008594:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008596:	e010      	b.n	80085ba <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008598:	4b1c      	ldr	r3, [pc, #112]	@ (800860c <UART_SetConfig+0x290>)
 800859a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800859c:	e00d      	b.n	80085ba <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800859e:	f7fd fd25 	bl	8005fec <HAL_RCC_GetSysClockFreq>
 80085a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80085a4:	e009      	b.n	80085ba <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80085aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80085ac:	e005      	b.n	80085ba <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80085ae:	2300      	movs	r3, #0
 80085b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80085b2:	2301      	movs	r3, #1
 80085b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80085b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80085ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085bc:	2b00      	cmp	r3, #0
 80085be:	f000 8137 	beq.w	8008830 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085c6:	4a12      	ldr	r2, [pc, #72]	@ (8008610 <UART_SetConfig+0x294>)
 80085c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085cc:	461a      	mov	r2, r3
 80085ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80085d4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	685a      	ldr	r2, [r3, #4]
 80085da:	4613      	mov	r3, r2
 80085dc:	005b      	lsls	r3, r3, #1
 80085de:	4413      	add	r3, r2
 80085e0:	69ba      	ldr	r2, [r7, #24]
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d305      	bcc.n	80085f2 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80085ec:	69ba      	ldr	r2, [r7, #24]
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d910      	bls.n	8008614 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80085f2:	2301      	movs	r3, #1
 80085f4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80085f8:	e11a      	b.n	8008830 <UART_SetConfig+0x4b4>
 80085fa:	bf00      	nop
 80085fc:	cfff69f3 	.word	0xcfff69f3
 8008600:	40008000 	.word	0x40008000
 8008604:	40013800 	.word	0x40013800
 8008608:	40004400 	.word	0x40004400
 800860c:	00f42400 	.word	0x00f42400
 8008610:	08020ff4 	.word	0x08020ff4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008616:	2200      	movs	r2, #0
 8008618:	60bb      	str	r3, [r7, #8]
 800861a:	60fa      	str	r2, [r7, #12]
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008620:	4a8e      	ldr	r2, [pc, #568]	@ (800885c <UART_SetConfig+0x4e0>)
 8008622:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008626:	b29b      	uxth	r3, r3
 8008628:	2200      	movs	r2, #0
 800862a:	603b      	str	r3, [r7, #0]
 800862c:	607a      	str	r2, [r7, #4]
 800862e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008632:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008636:	f7f8 fb81 	bl	8000d3c <__aeabi_uldivmod>
 800863a:	4602      	mov	r2, r0
 800863c:	460b      	mov	r3, r1
 800863e:	4610      	mov	r0, r2
 8008640:	4619      	mov	r1, r3
 8008642:	f04f 0200 	mov.w	r2, #0
 8008646:	f04f 0300 	mov.w	r3, #0
 800864a:	020b      	lsls	r3, r1, #8
 800864c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008650:	0202      	lsls	r2, r0, #8
 8008652:	6979      	ldr	r1, [r7, #20]
 8008654:	6849      	ldr	r1, [r1, #4]
 8008656:	0849      	lsrs	r1, r1, #1
 8008658:	2000      	movs	r0, #0
 800865a:	460c      	mov	r4, r1
 800865c:	4605      	mov	r5, r0
 800865e:	eb12 0804 	adds.w	r8, r2, r4
 8008662:	eb43 0905 	adc.w	r9, r3, r5
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	2200      	movs	r2, #0
 800866c:	469a      	mov	sl, r3
 800866e:	4693      	mov	fp, r2
 8008670:	4652      	mov	r2, sl
 8008672:	465b      	mov	r3, fp
 8008674:	4640      	mov	r0, r8
 8008676:	4649      	mov	r1, r9
 8008678:	f7f8 fb60 	bl	8000d3c <__aeabi_uldivmod>
 800867c:	4602      	mov	r2, r0
 800867e:	460b      	mov	r3, r1
 8008680:	4613      	mov	r3, r2
 8008682:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008684:	6a3b      	ldr	r3, [r7, #32]
 8008686:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800868a:	d308      	bcc.n	800869e <UART_SetConfig+0x322>
 800868c:	6a3b      	ldr	r3, [r7, #32]
 800868e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008692:	d204      	bcs.n	800869e <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	6a3a      	ldr	r2, [r7, #32]
 800869a:	60da      	str	r2, [r3, #12]
 800869c:	e0c8      	b.n	8008830 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800869e:	2301      	movs	r3, #1
 80086a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80086a4:	e0c4      	b.n	8008830 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	69db      	ldr	r3, [r3, #28]
 80086aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80086ae:	d167      	bne.n	8008780 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 80086b0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80086b4:	2b08      	cmp	r3, #8
 80086b6:	d828      	bhi.n	800870a <UART_SetConfig+0x38e>
 80086b8:	a201      	add	r2, pc, #4	@ (adr r2, 80086c0 <UART_SetConfig+0x344>)
 80086ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086be:	bf00      	nop
 80086c0:	080086e5 	.word	0x080086e5
 80086c4:	080086ed 	.word	0x080086ed
 80086c8:	080086f5 	.word	0x080086f5
 80086cc:	0800870b 	.word	0x0800870b
 80086d0:	080086fb 	.word	0x080086fb
 80086d4:	0800870b 	.word	0x0800870b
 80086d8:	0800870b 	.word	0x0800870b
 80086dc:	0800870b 	.word	0x0800870b
 80086e0:	08008703 	.word	0x08008703
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086e4:	f7fd fd36 	bl	8006154 <HAL_RCC_GetPCLK1Freq>
 80086e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80086ea:	e014      	b.n	8008716 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80086ec:	f7fd fd44 	bl	8006178 <HAL_RCC_GetPCLK2Freq>
 80086f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80086f2:	e010      	b.n	8008716 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086f4:	4b5a      	ldr	r3, [pc, #360]	@ (8008860 <UART_SetConfig+0x4e4>)
 80086f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80086f8:	e00d      	b.n	8008716 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086fa:	f7fd fc77 	bl	8005fec <HAL_RCC_GetSysClockFreq>
 80086fe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008700:	e009      	b.n	8008716 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008702:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008706:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008708:	e005      	b.n	8008716 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800870a:	2300      	movs	r3, #0
 800870c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800870e:	2301      	movs	r3, #1
 8008710:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008714:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008718:	2b00      	cmp	r3, #0
 800871a:	f000 8089 	beq.w	8008830 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008722:	4a4e      	ldr	r2, [pc, #312]	@ (800885c <UART_SetConfig+0x4e0>)
 8008724:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008728:	461a      	mov	r2, r3
 800872a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800872c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008730:	005a      	lsls	r2, r3, #1
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	085b      	lsrs	r3, r3, #1
 8008738:	441a      	add	r2, r3
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008742:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008744:	6a3b      	ldr	r3, [r7, #32]
 8008746:	2b0f      	cmp	r3, #15
 8008748:	d916      	bls.n	8008778 <UART_SetConfig+0x3fc>
 800874a:	6a3b      	ldr	r3, [r7, #32]
 800874c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008750:	d212      	bcs.n	8008778 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008752:	6a3b      	ldr	r3, [r7, #32]
 8008754:	b29b      	uxth	r3, r3
 8008756:	f023 030f 	bic.w	r3, r3, #15
 800875a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800875c:	6a3b      	ldr	r3, [r7, #32]
 800875e:	085b      	lsrs	r3, r3, #1
 8008760:	b29b      	uxth	r3, r3
 8008762:	f003 0307 	and.w	r3, r3, #7
 8008766:	b29a      	uxth	r2, r3
 8008768:	8bfb      	ldrh	r3, [r7, #30]
 800876a:	4313      	orrs	r3, r2
 800876c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	8bfa      	ldrh	r2, [r7, #30]
 8008774:	60da      	str	r2, [r3, #12]
 8008776:	e05b      	b.n	8008830 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008778:	2301      	movs	r3, #1
 800877a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800877e:	e057      	b.n	8008830 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008780:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008784:	2b08      	cmp	r3, #8
 8008786:	d828      	bhi.n	80087da <UART_SetConfig+0x45e>
 8008788:	a201      	add	r2, pc, #4	@ (adr r2, 8008790 <UART_SetConfig+0x414>)
 800878a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800878e:	bf00      	nop
 8008790:	080087b5 	.word	0x080087b5
 8008794:	080087bd 	.word	0x080087bd
 8008798:	080087c5 	.word	0x080087c5
 800879c:	080087db 	.word	0x080087db
 80087a0:	080087cb 	.word	0x080087cb
 80087a4:	080087db 	.word	0x080087db
 80087a8:	080087db 	.word	0x080087db
 80087ac:	080087db 	.word	0x080087db
 80087b0:	080087d3 	.word	0x080087d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087b4:	f7fd fcce 	bl	8006154 <HAL_RCC_GetPCLK1Freq>
 80087b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80087ba:	e014      	b.n	80087e6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80087bc:	f7fd fcdc 	bl	8006178 <HAL_RCC_GetPCLK2Freq>
 80087c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80087c2:	e010      	b.n	80087e6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80087c4:	4b26      	ldr	r3, [pc, #152]	@ (8008860 <UART_SetConfig+0x4e4>)
 80087c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80087c8:	e00d      	b.n	80087e6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80087ca:	f7fd fc0f 	bl	8005fec <HAL_RCC_GetSysClockFreq>
 80087ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80087d0:	e009      	b.n	80087e6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80087d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80087d8:	e005      	b.n	80087e6 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80087da:	2300      	movs	r3, #0
 80087dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80087de:	2301      	movs	r3, #1
 80087e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80087e4:	bf00      	nop
    }

    if (pclk != 0U)
 80087e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d021      	beq.n	8008830 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087f0:	4a1a      	ldr	r2, [pc, #104]	@ (800885c <UART_SetConfig+0x4e0>)
 80087f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087f6:	461a      	mov	r2, r3
 80087f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087fa:	fbb3 f2f2 	udiv	r2, r3, r2
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	085b      	lsrs	r3, r3, #1
 8008804:	441a      	add	r2, r3
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	685b      	ldr	r3, [r3, #4]
 800880a:	fbb2 f3f3 	udiv	r3, r2, r3
 800880e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008810:	6a3b      	ldr	r3, [r7, #32]
 8008812:	2b0f      	cmp	r3, #15
 8008814:	d909      	bls.n	800882a <UART_SetConfig+0x4ae>
 8008816:	6a3b      	ldr	r3, [r7, #32]
 8008818:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800881c:	d205      	bcs.n	800882a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800881e:	6a3b      	ldr	r3, [r7, #32]
 8008820:	b29a      	uxth	r2, r3
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	60da      	str	r2, [r3, #12]
 8008828:	e002      	b.n	8008830 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800882a:	2301      	movs	r3, #1
 800882c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	2201      	movs	r2, #1
 8008834:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	2201      	movs	r2, #1
 800883c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	2200      	movs	r2, #0
 8008844:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	2200      	movs	r2, #0
 800884a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800884c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008850:	4618      	mov	r0, r3
 8008852:	3730      	adds	r7, #48	@ 0x30
 8008854:	46bd      	mov	sp, r7
 8008856:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800885a:	bf00      	nop
 800885c:	08020ff4 	.word	0x08020ff4
 8008860:	00f42400 	.word	0x00f42400

08008864 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008864:	b480      	push	{r7}
 8008866:	b083      	sub	sp, #12
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008870:	f003 0301 	and.w	r3, r3, #1
 8008874:	2b00      	cmp	r3, #0
 8008876:	d00a      	beq.n	800888e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	430a      	orrs	r2, r1
 800888c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008892:	f003 0302 	and.w	r3, r3, #2
 8008896:	2b00      	cmp	r3, #0
 8008898:	d00a      	beq.n	80088b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	430a      	orrs	r2, r1
 80088ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088b4:	f003 0304 	and.w	r3, r3, #4
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d00a      	beq.n	80088d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	685b      	ldr	r3, [r3, #4]
 80088c2:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	430a      	orrs	r2, r1
 80088d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088d6:	f003 0308 	and.w	r3, r3, #8
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d00a      	beq.n	80088f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	430a      	orrs	r2, r1
 80088f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088f8:	f003 0310 	and.w	r3, r3, #16
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d00a      	beq.n	8008916 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	689b      	ldr	r3, [r3, #8]
 8008906:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	430a      	orrs	r2, r1
 8008914:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800891a:	f003 0320 	and.w	r3, r3, #32
 800891e:	2b00      	cmp	r3, #0
 8008920:	d00a      	beq.n	8008938 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	430a      	orrs	r2, r1
 8008936:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800893c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008940:	2b00      	cmp	r3, #0
 8008942:	d01a      	beq.n	800897a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	430a      	orrs	r2, r1
 8008958:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800895e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008962:	d10a      	bne.n	800897a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	430a      	orrs	r2, r1
 8008978:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800897e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008982:	2b00      	cmp	r3, #0
 8008984:	d00a      	beq.n	800899c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	430a      	orrs	r2, r1
 800899a:	605a      	str	r2, [r3, #4]
  }
}
 800899c:	bf00      	nop
 800899e:	370c      	adds	r7, #12
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bc80      	pop	{r7}
 80089a4:	4770      	bx	lr

080089a6 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80089a6:	b580      	push	{r7, lr}
 80089a8:	b086      	sub	sp, #24
 80089aa:	af02      	add	r7, sp, #8
 80089ac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80089b6:	f7f8 febb 	bl	8001730 <HAL_GetTick>
 80089ba:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f003 0308 	and.w	r3, r3, #8
 80089c6:	2b08      	cmp	r3, #8
 80089c8:	d10e      	bne.n	80089e8 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089ca:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80089ce:	9300      	str	r3, [sp, #0]
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2200      	movs	r2, #0
 80089d4:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f000 f832 	bl	8008a42 <UART_WaitOnFlagUntilTimeout>
 80089de:	4603      	mov	r3, r0
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d001      	beq.n	80089e8 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089e4:	2303      	movs	r3, #3
 80089e6:	e028      	b.n	8008a3a <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f003 0304 	and.w	r3, r3, #4
 80089f2:	2b04      	cmp	r3, #4
 80089f4:	d10e      	bne.n	8008a14 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089f6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80089fa:	9300      	str	r3, [sp, #0]
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2200      	movs	r2, #0
 8008a00:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 f81c 	bl	8008a42 <UART_WaitOnFlagUntilTimeout>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d001      	beq.n	8008a14 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a10:	2303      	movs	r3, #3
 8008a12:	e012      	b.n	8008a3a <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2220      	movs	r2, #32
 8008a18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2220      	movs	r2, #32
 8008a20:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2200      	movs	r2, #0
 8008a28:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2200      	movs	r2, #0
 8008a34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3710      	adds	r7, #16
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}

08008a42 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008a42:	b580      	push	{r7, lr}
 8008a44:	b09c      	sub	sp, #112	@ 0x70
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	60f8      	str	r0, [r7, #12]
 8008a4a:	60b9      	str	r1, [r7, #8]
 8008a4c:	603b      	str	r3, [r7, #0]
 8008a4e:	4613      	mov	r3, r2
 8008a50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a52:	e0a9      	b.n	8008ba8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a5a:	f000 80a5 	beq.w	8008ba8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a5e:	f7f8 fe67 	bl	8001730 <HAL_GetTick>
 8008a62:	4602      	mov	r2, r0
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	1ad3      	subs	r3, r2, r3
 8008a68:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d302      	bcc.n	8008a74 <UART_WaitOnFlagUntilTimeout+0x32>
 8008a6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d140      	bne.n	8008af6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a7c:	e853 3f00 	ldrex	r3, [r3]
 8008a80:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008a82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a84:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8008a88:	667b      	str	r3, [r7, #100]	@ 0x64
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	461a      	mov	r2, r3
 8008a90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008a92:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008a94:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a96:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008a98:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008a9a:	e841 2300 	strex	r3, r2, [r1]
 8008a9e:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008aa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d1e6      	bne.n	8008a74 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	3308      	adds	r3, #8
 8008aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ab0:	e853 3f00 	ldrex	r3, [r3]
 8008ab4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ab8:	f023 0301 	bic.w	r3, r3, #1
 8008abc:	663b      	str	r3, [r7, #96]	@ 0x60
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	3308      	adds	r3, #8
 8008ac4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008ac6:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008ac8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aca:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008acc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ace:	e841 2300 	strex	r3, r2, [r1]
 8008ad2:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008ad4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d1e5      	bne.n	8008aa6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	2220      	movs	r2, #32
 8008ade:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2220      	movs	r2, #32
 8008ae6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2200      	movs	r2, #0
 8008aee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 8008af2:	2303      	movs	r3, #3
 8008af4:	e069      	b.n	8008bca <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f003 0304 	and.w	r3, r3, #4
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d051      	beq.n	8008ba8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	69db      	ldr	r3, [r3, #28]
 8008b0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008b0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b12:	d149      	bne.n	8008ba8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008b1c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b26:	e853 3f00 	ldrex	r3, [r3]
 8008b2a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b2e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8008b32:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	461a      	mov	r2, r3
 8008b3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008b3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b3e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b40:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008b42:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008b44:	e841 2300 	strex	r3, r2, [r1]
 8008b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d1e6      	bne.n	8008b1e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	3308      	adds	r3, #8
 8008b56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	e853 3f00 	ldrex	r3, [r3]
 8008b5e:	613b      	str	r3, [r7, #16]
   return(result);
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	f023 0301 	bic.w	r3, r3, #1
 8008b66:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	3308      	adds	r3, #8
 8008b6e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008b70:	623a      	str	r2, [r7, #32]
 8008b72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b74:	69f9      	ldr	r1, [r7, #28]
 8008b76:	6a3a      	ldr	r2, [r7, #32]
 8008b78:	e841 2300 	strex	r3, r2, [r1]
 8008b7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b7e:	69bb      	ldr	r3, [r7, #24]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d1e5      	bne.n	8008b50 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2220      	movs	r2, #32
 8008b88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2220      	movs	r2, #32
 8008b90:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2220      	movs	r2, #32
 8008b98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008ba4:	2303      	movs	r3, #3
 8008ba6:	e010      	b.n	8008bca <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	69da      	ldr	r2, [r3, #28]
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	4013      	ands	r3, r2
 8008bb2:	68ba      	ldr	r2, [r7, #8]
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	bf0c      	ite	eq
 8008bb8:	2301      	moveq	r3, #1
 8008bba:	2300      	movne	r3, #0
 8008bbc:	b2db      	uxtb	r3, r3
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	79fb      	ldrb	r3, [r7, #7]
 8008bc2:	429a      	cmp	r2, r3
 8008bc4:	f43f af46 	beq.w	8008a54 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008bc8:	2300      	movs	r3, #0
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3770      	adds	r7, #112	@ 0x70
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}
	...

08008bd4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b0a3      	sub	sp, #140	@ 0x8c
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	60f8      	str	r0, [r7, #12]
 8008bdc:	60b9      	str	r1, [r7, #8]
 8008bde:	4613      	mov	r3, r2
 8008be0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	68ba      	ldr	r2, [r7, #8]
 8008be6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	88fa      	ldrh	r2, [r7, #6]
 8008bec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	88fa      	ldrh	r2, [r7, #6]
 8008bf4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	689b      	ldr	r3, [r3, #8]
 8008c02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c06:	d10e      	bne.n	8008c26 <UART_Start_Receive_IT+0x52>
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	691b      	ldr	r3, [r3, #16]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d105      	bne.n	8008c1c <UART_Start_Receive_IT+0x48>
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008c16:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008c1a:	e02d      	b.n	8008c78 <UART_Start_Receive_IT+0xa4>
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	22ff      	movs	r2, #255	@ 0xff
 8008c20:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008c24:	e028      	b.n	8008c78 <UART_Start_Receive_IT+0xa4>
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d10d      	bne.n	8008c4a <UART_Start_Receive_IT+0x76>
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	691b      	ldr	r3, [r3, #16]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d104      	bne.n	8008c40 <UART_Start_Receive_IT+0x6c>
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	22ff      	movs	r2, #255	@ 0xff
 8008c3a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008c3e:	e01b      	b.n	8008c78 <UART_Start_Receive_IT+0xa4>
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	227f      	movs	r2, #127	@ 0x7f
 8008c44:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008c48:	e016      	b.n	8008c78 <UART_Start_Receive_IT+0xa4>
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c52:	d10d      	bne.n	8008c70 <UART_Start_Receive_IT+0x9c>
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	691b      	ldr	r3, [r3, #16]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d104      	bne.n	8008c66 <UART_Start_Receive_IT+0x92>
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	227f      	movs	r2, #127	@ 0x7f
 8008c60:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008c64:	e008      	b.n	8008c78 <UART_Start_Receive_IT+0xa4>
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	223f      	movs	r2, #63	@ 0x3f
 8008c6a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008c6e:	e003      	b.n	8008c78 <UART_Start_Receive_IT+0xa4>
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2200      	movs	r2, #0
 8008c74:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	2222      	movs	r2, #34	@ 0x22
 8008c84:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	3308      	adds	r3, #8
 8008c8e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008c92:	e853 3f00 	ldrex	r3, [r3]
 8008c96:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008c98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008c9a:	f043 0301 	orr.w	r3, r3, #1
 8008c9e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	3308      	adds	r3, #8
 8008ca8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008cac:	673a      	str	r2, [r7, #112]	@ 0x70
 8008cae:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8008cb2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008cb4:	e841 2300 	strex	r3, r2, [r1]
 8008cb8:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8008cba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d1e3      	bne.n	8008c88 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008cc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008cc8:	d14f      	bne.n	8008d6a <UART_Start_Receive_IT+0x196>
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008cd0:	88fa      	ldrh	r2, [r7, #6]
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d349      	bcc.n	8008d6a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	689b      	ldr	r3, [r3, #8]
 8008cda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008cde:	d107      	bne.n	8008cf0 <UART_Start_Receive_IT+0x11c>
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	691b      	ldr	r3, [r3, #16]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d103      	bne.n	8008cf0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	4a46      	ldr	r2, [pc, #280]	@ (8008e04 <UART_Start_Receive_IT+0x230>)
 8008cec:	675a      	str	r2, [r3, #116]	@ 0x74
 8008cee:	e002      	b.n	8008cf6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	4a45      	ldr	r2, [pc, #276]	@ (8008e08 <UART_Start_Receive_IT+0x234>)
 8008cf4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	691b      	ldr	r3, [r3, #16]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d01a      	beq.n	8008d34 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d06:	e853 3f00 	ldrex	r3, [r3]
 8008d0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008d0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d12:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008d20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d22:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d24:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008d26:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008d28:	e841 2300 	strex	r3, r2, [r1]
 8008d2c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008d2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d1e4      	bne.n	8008cfe <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	3308      	adds	r3, #8
 8008d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d3e:	e853 3f00 	ldrex	r3, [r3]
 8008d42:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	3308      	adds	r3, #8
 8008d52:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008d54:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008d56:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d58:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008d5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d5c:	e841 2300 	strex	r3, r2, [r1]
 8008d60:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008d62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d1e5      	bne.n	8008d34 <UART_Start_Receive_IT+0x160>
 8008d68:	e046      	b.n	8008df8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	689b      	ldr	r3, [r3, #8]
 8008d6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d72:	d107      	bne.n	8008d84 <UART_Start_Receive_IT+0x1b0>
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	691b      	ldr	r3, [r3, #16]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d103      	bne.n	8008d84 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	4a23      	ldr	r2, [pc, #140]	@ (8008e0c <UART_Start_Receive_IT+0x238>)
 8008d80:	675a      	str	r2, [r3, #116]	@ 0x74
 8008d82:	e002      	b.n	8008d8a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	4a22      	ldr	r2, [pc, #136]	@ (8008e10 <UART_Start_Receive_IT+0x23c>)
 8008d88:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	691b      	ldr	r3, [r3, #16]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d019      	beq.n	8008dc6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d9a:	e853 3f00 	ldrex	r3, [r3]
 8008d9e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008da2:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008da6:	677b      	str	r3, [r7, #116]	@ 0x74
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	461a      	mov	r2, r3
 8008dae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008db0:	637b      	str	r3, [r7, #52]	@ 0x34
 8008db2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008db4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008db6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008db8:	e841 2300 	strex	r3, r2, [r1]
 8008dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d1e6      	bne.n	8008d92 <UART_Start_Receive_IT+0x1be>
 8008dc4:	e018      	b.n	8008df8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	e853 3f00 	ldrex	r3, [r3]
 8008dd2:	613b      	str	r3, [r7, #16]
   return(result);
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	f043 0320 	orr.w	r3, r3, #32
 8008dda:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	461a      	mov	r2, r3
 8008de2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008de4:	623b      	str	r3, [r7, #32]
 8008de6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de8:	69f9      	ldr	r1, [r7, #28]
 8008dea:	6a3a      	ldr	r2, [r7, #32]
 8008dec:	e841 2300 	strex	r3, r2, [r1]
 8008df0:	61bb      	str	r3, [r7, #24]
   return(result);
 8008df2:	69bb      	ldr	r3, [r7, #24]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d1e6      	bne.n	8008dc6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008df8:	2300      	movs	r3, #0
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	378c      	adds	r7, #140	@ 0x8c
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bc80      	pop	{r7}
 8008e02:	4770      	bx	lr
 8008e04:	080097e9 	.word	0x080097e9
 8008e08:	08009489 	.word	0x08009489
 8008e0c:	080092d1 	.word	0x080092d1
 8008e10:	08009119 	.word	0x08009119

08008e14 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b08f      	sub	sp, #60	@ 0x3c
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e22:	6a3b      	ldr	r3, [r7, #32]
 8008e24:	e853 3f00 	ldrex	r3, [r3]
 8008e28:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e2a:	69fb      	ldr	r3, [r7, #28]
 8008e2c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008e30:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	461a      	mov	r2, r3
 8008e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008e3c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e42:	e841 2300 	strex	r3, r2, [r1]
 8008e46:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d1e6      	bne.n	8008e1c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	3308      	adds	r3, #8
 8008e54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	e853 3f00 	ldrex	r3, [r3]
 8008e5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008e64:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	3308      	adds	r3, #8
 8008e6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e6e:	61ba      	str	r2, [r7, #24]
 8008e70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e72:	6979      	ldr	r1, [r7, #20]
 8008e74:	69ba      	ldr	r2, [r7, #24]
 8008e76:	e841 2300 	strex	r3, r2, [r1]
 8008e7a:	613b      	str	r3, [r7, #16]
   return(result);
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d1e5      	bne.n	8008e4e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2220      	movs	r2, #32
 8008e86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8008e8a:	bf00      	nop
 8008e8c:	373c      	adds	r7, #60	@ 0x3c
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bc80      	pop	{r7}
 8008e92:	4770      	bx	lr

08008e94 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b095      	sub	sp, #84	@ 0x54
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ea4:	e853 3f00 	ldrex	r3, [r3]
 8008ea8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008eb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008eba:	643b      	str	r3, [r7, #64]	@ 0x40
 8008ebc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ebe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008ec0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008ec2:	e841 2300 	strex	r3, r2, [r1]
 8008ec6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d1e6      	bne.n	8008e9c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	3308      	adds	r3, #8
 8008ed4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed6:	6a3b      	ldr	r3, [r7, #32]
 8008ed8:	e853 3f00 	ldrex	r3, [r3]
 8008edc:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ede:	69fb      	ldr	r3, [r7, #28]
 8008ee0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008ee4:	f023 0301 	bic.w	r3, r3, #1
 8008ee8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	3308      	adds	r3, #8
 8008ef0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ef2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ef6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ef8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008efa:	e841 2300 	strex	r3, r2, [r1]
 8008efe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d1e3      	bne.n	8008ece <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d118      	bne.n	8008f40 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	e853 3f00 	ldrex	r3, [r3]
 8008f1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	f023 0310 	bic.w	r3, r3, #16
 8008f22:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	461a      	mov	r2, r3
 8008f2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f2c:	61bb      	str	r3, [r7, #24]
 8008f2e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f30:	6979      	ldr	r1, [r7, #20]
 8008f32:	69ba      	ldr	r2, [r7, #24]
 8008f34:	e841 2300 	strex	r3, r2, [r1]
 8008f38:	613b      	str	r3, [r7, #16]
   return(result);
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d1e6      	bne.n	8008f0e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2220      	movs	r2, #32
 8008f44:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2200      	movs	r2, #0
 8008f52:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008f54:	bf00      	nop
 8008f56:	3754      	adds	r7, #84	@ 0x54
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bc80      	pop	{r7}
 8008f5c:	4770      	bx	lr

08008f5e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008f5e:	b580      	push	{r7, lr}
 8008f60:	b090      	sub	sp, #64	@ 0x40
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f003 0320 	and.w	r3, r3, #32
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d137      	bne.n	8008fea <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008f7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008f82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	3308      	adds	r3, #8
 8008f88:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f8c:	e853 3f00 	ldrex	r3, [r3]
 8008f90:	623b      	str	r3, [r7, #32]
   return(result);
 8008f92:	6a3b      	ldr	r3, [r7, #32]
 8008f94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f98:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008f9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	3308      	adds	r3, #8
 8008fa0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008fa2:	633a      	str	r2, [r7, #48]	@ 0x30
 8008fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fa6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008fa8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008faa:	e841 2300 	strex	r3, r2, [r1]
 8008fae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d1e5      	bne.n	8008f82 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008fb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	e853 3f00 	ldrex	r3, [r3]
 8008fc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fca:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	461a      	mov	r2, r3
 8008fd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fd4:	61fb      	str	r3, [r7, #28]
 8008fd6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd8:	69b9      	ldr	r1, [r7, #24]
 8008fda:	69fa      	ldr	r2, [r7, #28]
 8008fdc:	e841 2300 	strex	r3, r2, [r1]
 8008fe0:	617b      	str	r3, [r7, #20]
   return(result);
 8008fe2:	697b      	ldr	r3, [r7, #20]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d1e6      	bne.n	8008fb6 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008fe8:	e002      	b.n	8008ff0 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008fea:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008fec:	f7f9 f8ea 	bl	80021c4 <HAL_UART_TxCpltCallback>
}
 8008ff0:	bf00      	nop
 8008ff2:	3740      	adds	r7, #64	@ 0x40
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b084      	sub	sp, #16
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009004:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009006:	68f8      	ldr	r0, [r7, #12]
 8009008:	f7ff f99a 	bl	8008340 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800900c:	bf00      	nop
 800900e:	3710      	adds	r7, #16
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b086      	sub	sp, #24
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009020:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009028:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009030:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	689b      	ldr	r3, [r3, #8]
 8009038:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800903c:	2b80      	cmp	r3, #128	@ 0x80
 800903e:	d109      	bne.n	8009054 <UART_DMAError+0x40>
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	2b21      	cmp	r3, #33	@ 0x21
 8009044:	d106      	bne.n	8009054 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	2200      	movs	r2, #0
 800904a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800904e:	6978      	ldr	r0, [r7, #20]
 8009050:	f7ff fee0 	bl	8008e14 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	689b      	ldr	r3, [r3, #8]
 800905a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800905e:	2b40      	cmp	r3, #64	@ 0x40
 8009060:	d109      	bne.n	8009076 <UART_DMAError+0x62>
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2b22      	cmp	r3, #34	@ 0x22
 8009066:	d106      	bne.n	8009076 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	2200      	movs	r2, #0
 800906c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8009070:	6978      	ldr	r0, [r7, #20]
 8009072:	f7ff ff0f 	bl	8008e94 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800907c:	f043 0210 	orr.w	r2, r3, #16
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009086:	6978      	ldr	r0, [r7, #20]
 8009088:	f7ff f963 	bl	8008352 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800908c:	bf00      	nop
 800908e:	3718      	adds	r7, #24
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}

08009094 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b084      	sub	sp, #16
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2200      	movs	r2, #0
 80090a6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2200      	movs	r2, #0
 80090ae:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80090b2:	68f8      	ldr	r0, [r7, #12]
 80090b4:	f7ff f94d 	bl	8008352 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090b8:	bf00      	nop
 80090ba:	3710      	adds	r7, #16
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}

080090c0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b088      	sub	sp, #32
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	e853 3f00 	ldrex	r3, [r3]
 80090d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090dc:	61fb      	str	r3, [r7, #28]
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	461a      	mov	r2, r3
 80090e4:	69fb      	ldr	r3, [r7, #28]
 80090e6:	61bb      	str	r3, [r7, #24]
 80090e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090ea:	6979      	ldr	r1, [r7, #20]
 80090ec:	69ba      	ldr	r2, [r7, #24]
 80090ee:	e841 2300 	strex	r3, r2, [r1]
 80090f2:	613b      	str	r3, [r7, #16]
   return(result);
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d1e6      	bne.n	80090c8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2220      	movs	r2, #32
 80090fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2200      	movs	r2, #0
 8009106:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f7f9 f85b 	bl	80021c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800910e:	bf00      	nop
 8009110:	3720      	adds	r7, #32
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
	...

08009118 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b09c      	sub	sp, #112	@ 0x70
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009126:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009130:	2b22      	cmp	r3, #34	@ 0x22
 8009132:	f040 80be 	bne.w	80092b2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800913c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009140:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009144:	b2d9      	uxtb	r1, r3
 8009146:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800914a:	b2da      	uxtb	r2, r3
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009150:	400a      	ands	r2, r1
 8009152:	b2d2      	uxtb	r2, r2
 8009154:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800915a:	1c5a      	adds	r2, r3, #1
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009166:	b29b      	uxth	r3, r3
 8009168:	3b01      	subs	r3, #1
 800916a:	b29a      	uxth	r2, r3
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009178:	b29b      	uxth	r3, r3
 800917a:	2b00      	cmp	r3, #0
 800917c:	f040 80a1 	bne.w	80092c2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009186:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009188:	e853 3f00 	ldrex	r3, [r3]
 800918c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800918e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009190:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009194:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	461a      	mov	r2, r3
 800919c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800919e:	65bb      	str	r3, [r7, #88]	@ 0x58
 80091a0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80091a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80091a6:	e841 2300 	strex	r3, r2, [r1]
 80091aa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80091ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d1e6      	bne.n	8009180 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	3308      	adds	r3, #8
 80091b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091bc:	e853 3f00 	ldrex	r3, [r3]
 80091c0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80091c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091c4:	f023 0301 	bic.w	r3, r3, #1
 80091c8:	667b      	str	r3, [r7, #100]	@ 0x64
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	3308      	adds	r3, #8
 80091d0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80091d2:	647a      	str	r2, [r7, #68]	@ 0x44
 80091d4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091d6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80091d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80091da:	e841 2300 	strex	r3, r2, [r1]
 80091de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80091e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d1e5      	bne.n	80091b2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2220      	movs	r2, #32
 80091ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2200      	movs	r2, #0
 80091f2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2200      	movs	r2, #0
 80091f8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4a33      	ldr	r2, [pc, #204]	@ (80092cc <UART_RxISR_8BIT+0x1b4>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d01f      	beq.n	8009244 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800920e:	2b00      	cmp	r3, #0
 8009210:	d018      	beq.n	8009244 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800921a:	e853 3f00 	ldrex	r3, [r3]
 800921e:	623b      	str	r3, [r7, #32]
   return(result);
 8009220:	6a3b      	ldr	r3, [r7, #32]
 8009222:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009226:	663b      	str	r3, [r7, #96]	@ 0x60
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	461a      	mov	r2, r3
 800922e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009230:	633b      	str	r3, [r7, #48]	@ 0x30
 8009232:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009234:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009236:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009238:	e841 2300 	strex	r3, r2, [r1]
 800923c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800923e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009240:	2b00      	cmp	r3, #0
 8009242:	d1e6      	bne.n	8009212 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009248:	2b01      	cmp	r3, #1
 800924a:	d12e      	bne.n	80092aa <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2200      	movs	r2, #0
 8009250:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	e853 3f00 	ldrex	r3, [r3]
 800925e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	f023 0310 	bic.w	r3, r3, #16
 8009266:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	461a      	mov	r2, r3
 800926e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009270:	61fb      	str	r3, [r7, #28]
 8009272:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009274:	69b9      	ldr	r1, [r7, #24]
 8009276:	69fa      	ldr	r2, [r7, #28]
 8009278:	e841 2300 	strex	r3, r2, [r1]
 800927c:	617b      	str	r3, [r7, #20]
   return(result);
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d1e6      	bne.n	8009252 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	69db      	ldr	r3, [r3, #28]
 800928a:	f003 0310 	and.w	r3, r3, #16
 800928e:	2b10      	cmp	r3, #16
 8009290:	d103      	bne.n	800929a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	2210      	movs	r2, #16
 8009298:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80092a0:	4619      	mov	r1, r3
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f7ff f85e 	bl	8008364 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80092a8:	e00b      	b.n	80092c2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f7f8 ffa0 	bl	80021f0 <HAL_UART_RxCpltCallback>
}
 80092b0:	e007      	b.n	80092c2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	699a      	ldr	r2, [r3, #24]
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f042 0208 	orr.w	r2, r2, #8
 80092c0:	619a      	str	r2, [r3, #24]
}
 80092c2:	bf00      	nop
 80092c4:	3770      	adds	r7, #112	@ 0x70
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}
 80092ca:	bf00      	nop
 80092cc:	40008000 	.word	0x40008000

080092d0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b09c      	sub	sp, #112	@ 0x70
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80092de:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80092e8:	2b22      	cmp	r3, #34	@ 0x22
 80092ea:	f040 80be 	bne.w	800946a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092f4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092fc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80092fe:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8009302:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8009306:	4013      	ands	r3, r2
 8009308:	b29a      	uxth	r2, r3
 800930a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800930c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009312:	1c9a      	adds	r2, r3, #2
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800931e:	b29b      	uxth	r3, r3
 8009320:	3b01      	subs	r3, #1
 8009322:	b29a      	uxth	r2, r3
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009330:	b29b      	uxth	r3, r3
 8009332:	2b00      	cmp	r3, #0
 8009334:	f040 80a1 	bne.w	800947a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800933e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009340:	e853 3f00 	ldrex	r3, [r3]
 8009344:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009346:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009348:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800934c:	667b      	str	r3, [r7, #100]	@ 0x64
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	461a      	mov	r2, r3
 8009354:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009356:	657b      	str	r3, [r7, #84]	@ 0x54
 8009358:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800935a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800935c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800935e:	e841 2300 	strex	r3, r2, [r1]
 8009362:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009364:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009366:	2b00      	cmp	r3, #0
 8009368:	d1e6      	bne.n	8009338 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	3308      	adds	r3, #8
 8009370:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009372:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009374:	e853 3f00 	ldrex	r3, [r3]
 8009378:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800937a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800937c:	f023 0301 	bic.w	r3, r3, #1
 8009380:	663b      	str	r3, [r7, #96]	@ 0x60
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	3308      	adds	r3, #8
 8009388:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800938a:	643a      	str	r2, [r7, #64]	@ 0x40
 800938c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800938e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009390:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009392:	e841 2300 	strex	r3, r2, [r1]
 8009396:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800939a:	2b00      	cmp	r3, #0
 800939c:	d1e5      	bne.n	800936a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2220      	movs	r2, #32
 80093a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2200      	movs	r2, #0
 80093aa:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2200      	movs	r2, #0
 80093b0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4a33      	ldr	r2, [pc, #204]	@ (8009484 <UART_RxISR_16BIT+0x1b4>)
 80093b8:	4293      	cmp	r3, r2
 80093ba:	d01f      	beq.n	80093fc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d018      	beq.n	80093fc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093d0:	6a3b      	ldr	r3, [r7, #32]
 80093d2:	e853 3f00 	ldrex	r3, [r3]
 80093d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80093d8:	69fb      	ldr	r3, [r7, #28]
 80093da:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80093de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	461a      	mov	r2, r3
 80093e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80093e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80093ea:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80093ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093f0:	e841 2300 	strex	r3, r2, [r1]
 80093f4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80093f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d1e6      	bne.n	80093ca <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009400:	2b01      	cmp	r3, #1
 8009402:	d12e      	bne.n	8009462 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2200      	movs	r2, #0
 8009408:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	e853 3f00 	ldrex	r3, [r3]
 8009416:	60bb      	str	r3, [r7, #8]
   return(result);
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	f023 0310 	bic.w	r3, r3, #16
 800941e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	461a      	mov	r2, r3
 8009426:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009428:	61bb      	str	r3, [r7, #24]
 800942a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800942c:	6979      	ldr	r1, [r7, #20]
 800942e:	69ba      	ldr	r2, [r7, #24]
 8009430:	e841 2300 	strex	r3, r2, [r1]
 8009434:	613b      	str	r3, [r7, #16]
   return(result);
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d1e6      	bne.n	800940a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	69db      	ldr	r3, [r3, #28]
 8009442:	f003 0310 	and.w	r3, r3, #16
 8009446:	2b10      	cmp	r3, #16
 8009448:	d103      	bne.n	8009452 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	2210      	movs	r2, #16
 8009450:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009458:	4619      	mov	r1, r3
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f7fe ff82 	bl	8008364 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009460:	e00b      	b.n	800947a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f7f8 fec4 	bl	80021f0 <HAL_UART_RxCpltCallback>
}
 8009468:	e007      	b.n	800947a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	699a      	ldr	r2, [r3, #24]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f042 0208 	orr.w	r2, r2, #8
 8009478:	619a      	str	r2, [r3, #24]
}
 800947a:	bf00      	nop
 800947c:	3770      	adds	r7, #112	@ 0x70
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}
 8009482:	bf00      	nop
 8009484:	40008000 	.word	0x40008000

08009488 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b0ac      	sub	sp, #176	@ 0xb0
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009496:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	69db      	ldr	r3, [r3, #28]
 80094a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	689b      	ldr	r3, [r3, #8]
 80094b4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80094be:	2b22      	cmp	r3, #34	@ 0x22
 80094c0:	f040 8182 	bne.w	80097c8 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80094ca:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80094ce:	e125      	b.n	800971c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094d6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80094da:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80094de:	b2d9      	uxtb	r1, r3
 80094e0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80094e4:	b2da      	uxtb	r2, r3
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094ea:	400a      	ands	r2, r1
 80094ec:	b2d2      	uxtb	r2, r2
 80094ee:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094f4:	1c5a      	adds	r2, r3, #1
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009500:	b29b      	uxth	r3, r3
 8009502:	3b01      	subs	r3, #1
 8009504:	b29a      	uxth	r2, r3
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	69db      	ldr	r3, [r3, #28]
 8009512:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009516:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800951a:	f003 0307 	and.w	r3, r3, #7
 800951e:	2b00      	cmp	r3, #0
 8009520:	d053      	beq.n	80095ca <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009522:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009526:	f003 0301 	and.w	r3, r3, #1
 800952a:	2b00      	cmp	r3, #0
 800952c:	d011      	beq.n	8009552 <UART_RxISR_8BIT_FIFOEN+0xca>
 800952e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009532:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009536:	2b00      	cmp	r3, #0
 8009538:	d00b      	beq.n	8009552 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	2201      	movs	r2, #1
 8009540:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009548:	f043 0201 	orr.w	r2, r3, #1
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009552:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009556:	f003 0302 	and.w	r3, r3, #2
 800955a:	2b00      	cmp	r3, #0
 800955c:	d011      	beq.n	8009582 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800955e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009562:	f003 0301 	and.w	r3, r3, #1
 8009566:	2b00      	cmp	r3, #0
 8009568:	d00b      	beq.n	8009582 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	2202      	movs	r2, #2
 8009570:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009578:	f043 0204 	orr.w	r2, r3, #4
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009582:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009586:	f003 0304 	and.w	r3, r3, #4
 800958a:	2b00      	cmp	r3, #0
 800958c:	d011      	beq.n	80095b2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800958e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009592:	f003 0301 	and.w	r3, r3, #1
 8009596:	2b00      	cmp	r3, #0
 8009598:	d00b      	beq.n	80095b2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	2204      	movs	r2, #4
 80095a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095a8:	f043 0202 	orr.w	r2, r3, #2
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d006      	beq.n	80095ca <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f7fe fec8 	bl	8008352 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2200      	movs	r2, #0
 80095c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80095d0:	b29b      	uxth	r3, r3
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	f040 80a2 	bne.w	800971c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80095e0:	e853 3f00 	ldrex	r3, [r3]
 80095e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80095e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80095e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80095ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	461a      	mov	r2, r3
 80095f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80095fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80095fc:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095fe:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8009600:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009602:	e841 2300 	strex	r3, r2, [r1]
 8009606:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8009608:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800960a:	2b00      	cmp	r3, #0
 800960c:	d1e4      	bne.n	80095d8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	3308      	adds	r3, #8
 8009614:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009616:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009618:	e853 3f00 	ldrex	r3, [r3]
 800961c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800961e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009620:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009624:	f023 0301 	bic.w	r3, r3, #1
 8009628:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	3308      	adds	r3, #8
 8009632:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009636:	66ba      	str	r2, [r7, #104]	@ 0x68
 8009638:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800963a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800963c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800963e:	e841 2300 	strex	r3, r2, [r1]
 8009642:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009644:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009646:	2b00      	cmp	r3, #0
 8009648:	d1e1      	bne.n	800960e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	2220      	movs	r2, #32
 800964e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2200      	movs	r2, #0
 8009656:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4a5f      	ldr	r2, [pc, #380]	@ (80097e0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d021      	beq.n	80096ac <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009672:	2b00      	cmp	r3, #0
 8009674:	d01a      	beq.n	80096ac <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800967c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800967e:	e853 3f00 	ldrex	r3, [r3]
 8009682:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009684:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009686:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800968a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	461a      	mov	r2, r3
 8009694:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009698:	657b      	str	r3, [r7, #84]	@ 0x54
 800969a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800969c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800969e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80096a0:	e841 2300 	strex	r3, r2, [r1]
 80096a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80096a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d1e4      	bne.n	8009676 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d130      	bne.n	8009716 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2200      	movs	r2, #0
 80096b8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096c2:	e853 3f00 	ldrex	r3, [r3]
 80096c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80096c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ca:	f023 0310 	bic.w	r3, r3, #16
 80096ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	461a      	mov	r2, r3
 80096d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80096dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80096de:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80096e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80096e4:	e841 2300 	strex	r3, r2, [r1]
 80096e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80096ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d1e4      	bne.n	80096ba <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	69db      	ldr	r3, [r3, #28]
 80096f6:	f003 0310 	and.w	r3, r3, #16
 80096fa:	2b10      	cmp	r3, #16
 80096fc:	d103      	bne.n	8009706 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	2210      	movs	r2, #16
 8009704:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800970c:	4619      	mov	r1, r3
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f7fe fe28 	bl	8008364 <HAL_UARTEx_RxEventCallback>
 8009714:	e002      	b.n	800971c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f7f8 fd6a 	bl	80021f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800971c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8009720:	2b00      	cmp	r3, #0
 8009722:	d006      	beq.n	8009732 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8009724:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009728:	f003 0320 	and.w	r3, r3, #32
 800972c:	2b00      	cmp	r3, #0
 800972e:	f47f aecf 	bne.w	80094d0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009738:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800973c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009740:	2b00      	cmp	r3, #0
 8009742:	d049      	beq.n	80097d8 <UART_RxISR_8BIT_FIFOEN+0x350>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800974a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800974e:	429a      	cmp	r2, r3
 8009750:	d242      	bcs.n	80097d8 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	3308      	adds	r3, #8
 8009758:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800975a:	6a3b      	ldr	r3, [r7, #32]
 800975c:	e853 3f00 	ldrex	r3, [r3]
 8009760:	61fb      	str	r3, [r7, #28]
   return(result);
 8009762:	69fb      	ldr	r3, [r7, #28]
 8009764:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009768:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	3308      	adds	r3, #8
 8009772:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009776:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009778:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800977a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800977c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800977e:	e841 2300 	strex	r3, r2, [r1]
 8009782:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009786:	2b00      	cmp	r3, #0
 8009788:	d1e3      	bne.n	8009752 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	4a15      	ldr	r2, [pc, #84]	@ (80097e4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800978e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	e853 3f00 	ldrex	r3, [r3]
 800979c:	60bb      	str	r3, [r7, #8]
   return(result);
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	f043 0320 	orr.w	r3, r3, #32
 80097a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	461a      	mov	r2, r3
 80097ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80097b2:	61bb      	str	r3, [r7, #24]
 80097b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097b6:	6979      	ldr	r1, [r7, #20]
 80097b8:	69ba      	ldr	r2, [r7, #24]
 80097ba:	e841 2300 	strex	r3, r2, [r1]
 80097be:	613b      	str	r3, [r7, #16]
   return(result);
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d1e4      	bne.n	8009790 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80097c6:	e007      	b.n	80097d8 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	699a      	ldr	r2, [r3, #24]
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f042 0208 	orr.w	r2, r2, #8
 80097d6:	619a      	str	r2, [r3, #24]
}
 80097d8:	bf00      	nop
 80097da:	37b0      	adds	r7, #176	@ 0xb0
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}
 80097e0:	40008000 	.word	0x40008000
 80097e4:	08009119 	.word	0x08009119

080097e8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b0ae      	sub	sp, #184	@ 0xb8
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80097f6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	69db      	ldr	r3, [r3, #28]
 8009800:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	689b      	ldr	r3, [r3, #8]
 8009814:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800981e:	2b22      	cmp	r3, #34	@ 0x22
 8009820:	f040 8186 	bne.w	8009b30 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800982a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800982e:	e129      	b.n	8009a84 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009836:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800983e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8009842:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8009846:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800984a:	4013      	ands	r3, r2
 800984c:	b29a      	uxth	r2, r3
 800984e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009852:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009858:	1c9a      	adds	r2, r3, #2
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009864:	b29b      	uxth	r3, r3
 8009866:	3b01      	subs	r3, #1
 8009868:	b29a      	uxth	r2, r3
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	69db      	ldr	r3, [r3, #28]
 8009876:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800987a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800987e:	f003 0307 	and.w	r3, r3, #7
 8009882:	2b00      	cmp	r3, #0
 8009884:	d053      	beq.n	800992e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009886:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800988a:	f003 0301 	and.w	r3, r3, #1
 800988e:	2b00      	cmp	r3, #0
 8009890:	d011      	beq.n	80098b6 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009892:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009896:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800989a:	2b00      	cmp	r3, #0
 800989c:	d00b      	beq.n	80098b6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	2201      	movs	r2, #1
 80098a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098ac:	f043 0201 	orr.w	r2, r3, #1
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80098b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80098ba:	f003 0302 	and.w	r3, r3, #2
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d011      	beq.n	80098e6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80098c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80098c6:	f003 0301 	and.w	r3, r3, #1
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d00b      	beq.n	80098e6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	2202      	movs	r2, #2
 80098d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098dc:	f043 0204 	orr.w	r2, r3, #4
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80098e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80098ea:	f003 0304 	and.w	r3, r3, #4
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d011      	beq.n	8009916 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80098f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80098f6:	f003 0301 	and.w	r3, r3, #1
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d00b      	beq.n	8009916 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	2204      	movs	r2, #4
 8009904:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800990c:	f043 0202 	orr.w	r2, r3, #2
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800991c:	2b00      	cmp	r3, #0
 800991e:	d006      	beq.n	800992e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f7fe fd16 	bl	8008352 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2200      	movs	r2, #0
 800992a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009934:	b29b      	uxth	r3, r3
 8009936:	2b00      	cmp	r3, #0
 8009938:	f040 80a4 	bne.w	8009a84 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009942:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009944:	e853 3f00 	ldrex	r3, [r3]
 8009948:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800994a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800994c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009950:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	461a      	mov	r2, r3
 800995a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800995e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009962:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009964:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009966:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800996a:	e841 2300 	strex	r3, r2, [r1]
 800996e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009970:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009972:	2b00      	cmp	r3, #0
 8009974:	d1e2      	bne.n	800993c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	3308      	adds	r3, #8
 800997c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800997e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009980:	e853 3f00 	ldrex	r3, [r3]
 8009984:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009986:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009988:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800998c:	f023 0301 	bic.w	r3, r3, #1
 8009990:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	3308      	adds	r3, #8
 800999a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800999e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80099a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80099a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80099a6:	e841 2300 	strex	r3, r2, [r1]
 80099aa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80099ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d1e1      	bne.n	8009976 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2220      	movs	r2, #32
 80099b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2200      	movs	r2, #0
 80099be:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2200      	movs	r2, #0
 80099c4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4a5f      	ldr	r2, [pc, #380]	@ (8009b48 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d021      	beq.n	8009a14 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	685b      	ldr	r3, [r3, #4]
 80099d6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d01a      	beq.n	8009a14 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80099e6:	e853 3f00 	ldrex	r3, [r3]
 80099ea:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80099ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80099ee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80099f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	461a      	mov	r2, r3
 80099fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009a00:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009a02:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a04:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009a06:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009a08:	e841 2300 	strex	r3, r2, [r1]
 8009a0c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009a0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d1e4      	bne.n	80099de <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	d130      	bne.n	8009a7e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a2a:	e853 3f00 	ldrex	r3, [r3]
 8009a2e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009a30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a32:	f023 0310 	bic.w	r3, r3, #16
 8009a36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	461a      	mov	r2, r3
 8009a40:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009a44:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a46:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009a4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a4c:	e841 2300 	strex	r3, r2, [r1]
 8009a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009a52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d1e4      	bne.n	8009a22 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	69db      	ldr	r3, [r3, #28]
 8009a5e:	f003 0310 	and.w	r3, r3, #16
 8009a62:	2b10      	cmp	r3, #16
 8009a64:	d103      	bne.n	8009a6e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	2210      	movs	r2, #16
 8009a6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009a74:	4619      	mov	r1, r3
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f7fe fc74 	bl	8008364 <HAL_UARTEx_RxEventCallback>
 8009a7c:	e002      	b.n	8009a84 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f7f8 fbb6 	bl	80021f0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009a84:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d006      	beq.n	8009a9a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8009a8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009a90:	f003 0320 	and.w	r3, r3, #32
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	f47f aecb 	bne.w	8009830 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009aa0:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009aa4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d049      	beq.n	8009b40 <UART_RxISR_16BIT_FIFOEN+0x358>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009ab2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8009ab6:	429a      	cmp	r2, r3
 8009ab8:	d242      	bcs.n	8009b40 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	3308      	adds	r3, #8
 8009ac0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ac4:	e853 3f00 	ldrex	r3, [r3]
 8009ac8:	623b      	str	r3, [r7, #32]
   return(result);
 8009aca:	6a3b      	ldr	r3, [r7, #32]
 8009acc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009ad0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	3308      	adds	r3, #8
 8009ada:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009ade:	633a      	str	r2, [r7, #48]	@ 0x30
 8009ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ae2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009ae4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ae6:	e841 2300 	strex	r3, r2, [r1]
 8009aea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d1e3      	bne.n	8009aba <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	4a15      	ldr	r2, [pc, #84]	@ (8009b4c <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009af6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	e853 3f00 	ldrex	r3, [r3]
 8009b04:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	f043 0320 	orr.w	r3, r3, #32
 8009b0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	461a      	mov	r2, r3
 8009b16:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009b1a:	61fb      	str	r3, [r7, #28]
 8009b1c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b1e:	69b9      	ldr	r1, [r7, #24]
 8009b20:	69fa      	ldr	r2, [r7, #28]
 8009b22:	e841 2300 	strex	r3, r2, [r1]
 8009b26:	617b      	str	r3, [r7, #20]
   return(result);
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d1e4      	bne.n	8009af8 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009b2e:	e007      	b.n	8009b40 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	699a      	ldr	r2, [r3, #24]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f042 0208 	orr.w	r2, r2, #8
 8009b3e:	619a      	str	r2, [r3, #24]
}
 8009b40:	bf00      	nop
 8009b42:	37b8      	adds	r7, #184	@ 0xb8
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}
 8009b48:	40008000 	.word	0x40008000
 8009b4c:	080092d1 	.word	0x080092d1

08009b50 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b083      	sub	sp, #12
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009b58:	bf00      	nop
 8009b5a:	370c      	adds	r7, #12
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bc80      	pop	{r7}
 8009b60:	4770      	bx	lr

08009b62 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009b62:	b480      	push	{r7}
 8009b64:	b083      	sub	sp, #12
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009b6a:	bf00      	nop
 8009b6c:	370c      	adds	r7, #12
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bc80      	pop	{r7}
 8009b72:	4770      	bx	lr

08009b74 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b083      	sub	sp, #12
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009b7c:	bf00      	nop
 8009b7e:	370c      	adds	r7, #12
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bc80      	pop	{r7}
 8009b84:	4770      	bx	lr

08009b86 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8009b86:	b580      	push	{r7, lr}
 8009b88:	b088      	sub	sp, #32
 8009b8a:	af02      	add	r7, sp, #8
 8009b8c:	60f8      	str	r0, [r7, #12]
 8009b8e:	1d3b      	adds	r3, r7, #4
 8009b90:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 8009b94:	2300      	movs	r3, #0
 8009b96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009b9e:	2b01      	cmp	r3, #1
 8009ba0:	d101      	bne.n	8009ba6 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 8009ba2:	2302      	movs	r3, #2
 8009ba4:	e046      	b.n	8009c34 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	2201      	movs	r2, #1
 8009baa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2224      	movs	r2, #36	@ 0x24
 8009bb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	681a      	ldr	r2, [r3, #0]
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f022 0201 	bic.w	r2, r2, #1
 8009bc4:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	689b      	ldr	r3, [r3, #8]
 8009bcc:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009bd0:	687a      	ldr	r2, [r7, #4]
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	430a      	orrs	r2, r1
 8009bd8:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d105      	bne.n	8009bec <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8009be0:	1d3b      	adds	r3, r7, #4
 8009be2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009be6:	68f8      	ldr	r0, [r7, #12]
 8009be8:	f000 f911 	bl	8009e0e <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	681a      	ldr	r2, [r3, #0]
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f042 0201 	orr.w	r2, r2, #1
 8009bfa:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009bfc:	f7f7 fd98 	bl	8001730 <HAL_GetTick>
 8009c00:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c02:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009c06:	9300      	str	r3, [sp, #0]
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009c10:	68f8      	ldr	r0, [r7, #12]
 8009c12:	f7fe ff16 	bl	8008a42 <UART_WaitOnFlagUntilTimeout>
 8009c16:	4603      	mov	r3, r0
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d002      	beq.n	8009c22 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 8009c1c:	2303      	movs	r3, #3
 8009c1e:	75fb      	strb	r3, [r7, #23]
 8009c20:	e003      	b.n	8009c2a <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2220      	movs	r2, #32
 8009c26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return status;
 8009c32:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	3718      	adds	r7, #24
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}

08009c3c <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b089      	sub	sp, #36	@ 0x24
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009c4a:	2b01      	cmp	r3, #1
 8009c4c:	d101      	bne.n	8009c52 <HAL_UARTEx_EnableStopMode+0x16>
 8009c4e:	2302      	movs	r3, #2
 8009c50:	e021      	b.n	8009c96 <HAL_UARTEx_EnableStopMode+0x5a>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2201      	movs	r2, #1
 8009c56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	e853 3f00 	ldrex	r3, [r3]
 8009c66:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	f043 0302 	orr.w	r3, r3, #2
 8009c6e:	61fb      	str	r3, [r7, #28]
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	461a      	mov	r2, r3
 8009c76:	69fb      	ldr	r3, [r7, #28]
 8009c78:	61bb      	str	r3, [r7, #24]
 8009c7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c7c:	6979      	ldr	r1, [r7, #20]
 8009c7e:	69ba      	ldr	r2, [r7, #24]
 8009c80:	e841 2300 	strex	r3, r2, [r1]
 8009c84:	613b      	str	r3, [r7, #16]
   return(result);
 8009c86:	693b      	ldr	r3, [r7, #16]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d1e6      	bne.n	8009c5a <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009c94:	2300      	movs	r3, #0
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3724      	adds	r7, #36	@ 0x24
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bc80      	pop	{r7}
 8009c9e:	4770      	bx	lr

08009ca0 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009cae:	2b01      	cmp	r3, #1
 8009cb0:	d101      	bne.n	8009cb6 <HAL_UARTEx_EnableFifoMode+0x16>
 8009cb2:	2302      	movs	r3, #2
 8009cb4:	e02b      	b.n	8009d0e <HAL_UARTEx_EnableFifoMode+0x6e>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2201      	movs	r2, #1
 8009cba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2224      	movs	r2, #36	@ 0x24
 8009cc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	681a      	ldr	r2, [r3, #0]
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f022 0201 	bic.w	r2, r2, #1
 8009cdc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009ce4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8009cec:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	68fa      	ldr	r2, [r7, #12]
 8009cf4:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009cf6:	6878      	ldr	r0, [r7, #4]
 8009cf8:	f000 f8ac 	bl	8009e54 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2220      	movs	r2, #32
 8009d00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2200      	movs	r2, #0
 8009d08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009d0c:	2300      	movs	r3, #0
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3710      	adds	r7, #16
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}

08009d16 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009d16:	b580      	push	{r7, lr}
 8009d18:	b084      	sub	sp, #16
 8009d1a:	af00      	add	r7, sp, #0
 8009d1c:	6078      	str	r0, [r7, #4]
 8009d1e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009d26:	2b01      	cmp	r3, #1
 8009d28:	d101      	bne.n	8009d2e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009d2a:	2302      	movs	r3, #2
 8009d2c:	e02d      	b.n	8009d8a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2201      	movs	r2, #1
 8009d32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2224      	movs	r2, #36	@ 0x24
 8009d3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	681a      	ldr	r2, [r3, #0]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f022 0201 	bic.w	r2, r2, #1
 8009d54:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	689b      	ldr	r3, [r3, #8]
 8009d5c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	683a      	ldr	r2, [r7, #0]
 8009d66:	430a      	orrs	r2, r1
 8009d68:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 f872 	bl	8009e54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	68fa      	ldr	r2, [r7, #12]
 8009d76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2220      	movs	r2, #32
 8009d7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2200      	movs	r2, #0
 8009d84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009d88:	2300      	movs	r3, #0
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3710      	adds	r7, #16
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}

08009d92 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009d92:	b580      	push	{r7, lr}
 8009d94:	b084      	sub	sp, #16
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	6078      	str	r0, [r7, #4]
 8009d9a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009da2:	2b01      	cmp	r3, #1
 8009da4:	d101      	bne.n	8009daa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009da6:	2302      	movs	r3, #2
 8009da8:	e02d      	b.n	8009e06 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2201      	movs	r2, #1
 8009dae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2224      	movs	r2, #36	@ 0x24
 8009db6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	681a      	ldr	r2, [r3, #0]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f022 0201 	bic.w	r2, r2, #1
 8009dd0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	689b      	ldr	r3, [r3, #8]
 8009dd8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	683a      	ldr	r2, [r7, #0]
 8009de2:	430a      	orrs	r2, r1
 8009de4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f000 f834 	bl	8009e54 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	68fa      	ldr	r2, [r7, #12]
 8009df2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2220      	movs	r2, #32
 8009df8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009e04:	2300      	movs	r3, #0
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3710      	adds	r7, #16
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}

08009e0e <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8009e0e:	b480      	push	{r7}
 8009e10:	b085      	sub	sp, #20
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	60f8      	str	r0, [r7, #12]
 8009e16:	1d3b      	adds	r3, r7, #4
 8009e18:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	685b      	ldr	r3, [r3, #4]
 8009e22:	f023 0210 	bic.w	r2, r3, #16
 8009e26:	893b      	ldrh	r3, [r7, #8]
 8009e28:	4619      	mov	r1, r3
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	430a      	orrs	r2, r1
 8009e30:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	685b      	ldr	r3, [r3, #4]
 8009e38:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 8009e3c:	7abb      	ldrb	r3, [r7, #10]
 8009e3e:	061a      	lsls	r2, r3, #24
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	430a      	orrs	r2, r1
 8009e46:	605a      	str	r2, [r3, #4]
}
 8009e48:	bf00      	nop
 8009e4a:	3714      	adds	r7, #20
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bc80      	pop	{r7}
 8009e50:	4770      	bx	lr
	...

08009e54 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b085      	sub	sp, #20
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d108      	bne.n	8009e76 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2201      	movs	r2, #1
 8009e68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2201      	movs	r2, #1
 8009e70:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009e74:	e031      	b.n	8009eda <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009e76:	2308      	movs	r3, #8
 8009e78:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009e7a:	2308      	movs	r3, #8
 8009e7c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	689b      	ldr	r3, [r3, #8]
 8009e84:	0e5b      	lsrs	r3, r3, #25
 8009e86:	b2db      	uxtb	r3, r3
 8009e88:	f003 0307 	and.w	r3, r3, #7
 8009e8c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	689b      	ldr	r3, [r3, #8]
 8009e94:	0f5b      	lsrs	r3, r3, #29
 8009e96:	b2db      	uxtb	r3, r3
 8009e98:	f003 0307 	and.w	r3, r3, #7
 8009e9c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009e9e:	7bbb      	ldrb	r3, [r7, #14]
 8009ea0:	7b3a      	ldrb	r2, [r7, #12]
 8009ea2:	4910      	ldr	r1, [pc, #64]	@ (8009ee4 <UARTEx_SetNbDataToProcess+0x90>)
 8009ea4:	5c8a      	ldrb	r2, [r1, r2]
 8009ea6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009eaa:	7b3a      	ldrb	r2, [r7, #12]
 8009eac:	490e      	ldr	r1, [pc, #56]	@ (8009ee8 <UARTEx_SetNbDataToProcess+0x94>)
 8009eae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009eb0:	fb93 f3f2 	sdiv	r3, r3, r2
 8009eb4:	b29a      	uxth	r2, r3
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ebc:	7bfb      	ldrb	r3, [r7, #15]
 8009ebe:	7b7a      	ldrb	r2, [r7, #13]
 8009ec0:	4908      	ldr	r1, [pc, #32]	@ (8009ee4 <UARTEx_SetNbDataToProcess+0x90>)
 8009ec2:	5c8a      	ldrb	r2, [r1, r2]
 8009ec4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009ec8:	7b7a      	ldrb	r2, [r7, #13]
 8009eca:	4907      	ldr	r1, [pc, #28]	@ (8009ee8 <UARTEx_SetNbDataToProcess+0x94>)
 8009ecc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ece:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ed2:	b29a      	uxth	r2, r3
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009eda:	bf00      	nop
 8009edc:	3714      	adds	r7, #20
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bc80      	pop	{r7}
 8009ee2:	4770      	bx	lr
 8009ee4:	0802100c 	.word	0x0802100c
 8009ee8:	08021014 	.word	0x08021014

08009eec <LmHandlerInit>:
}
#endif

#if MY_TX
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 8009eec:	b480      	push	{r7}
 8009eee:	b083      	sub	sp, #12
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 8009ef6:	4a0d      	ldr	r2, [pc, #52]	@ (8009f2c <LmHandlerInit+0x40>)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6013      	str	r3, [r2, #0]

#if MY_TX_ABP
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 8009efc:	4b0c      	ldr	r3, [pc, #48]	@ (8009f30 <LmHandlerInit+0x44>)
 8009efe:	4a0d      	ldr	r2, [pc, #52]	@ (8009f34 <LmHandlerInit+0x48>)
 8009f00:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 8009f02:	4b0b      	ldr	r3, [pc, #44]	@ (8009f30 <LmHandlerInit+0x44>)
 8009f04:	4a0c      	ldr	r2, [pc, #48]	@ (8009f38 <LmHandlerInit+0x4c>)
 8009f06:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 8009f08:	4b09      	ldr	r3, [pc, #36]	@ (8009f30 <LmHandlerInit+0x44>)
 8009f0a:	4a0c      	ldr	r2, [pc, #48]	@ (8009f3c <LmHandlerInit+0x50>)
 8009f0c:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 8009f0e:	4b08      	ldr	r3, [pc, #32]	@ (8009f30 <LmHandlerInit+0x44>)
 8009f10:	4a0b      	ldr	r2, [pc, #44]	@ (8009f40 <LmHandlerInit+0x54>)
 8009f12:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 8009f14:	4b05      	ldr	r3, [pc, #20]	@ (8009f2c <LmHandlerInit+0x40>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	699b      	ldr	r3, [r3, #24]
 8009f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8009f44 <LmHandlerInit+0x58>)
 8009f1c:	6153      	str	r3, [r2, #20]
		LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
		LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
		LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
		LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
#endif
    return LORAMAC_HANDLER_SUCCESS;
 8009f1e:	2300      	movs	r3, #0

}
 8009f20:	4618      	mov	r0, r3
 8009f22:	370c      	adds	r7, #12
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bc80      	pop	{r7}
 8009f28:	4770      	bx	lr
 8009f2a:	bf00      	nop
 8009f2c:	200009f4 	.word	0x200009f4
 8009f30:	200009f8 	.word	0x200009f8
 8009f34:	0800a5c1 	.word	0x0800a5c1
 8009f38:	0800a635 	.word	0x0800a635
 8009f3c:	0800a705 	.word	0x0800a705
 8009f40:	0800a855 	.word	0x0800a855
 8009f44:	20000a08 	.word	0x20000a08

08009f48 <LmHandlerConfigure>:
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b092      	sub	sp, #72	@ 0x48
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
	MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 8009f50:	2218      	movs	r2, #24
 8009f52:	6879      	ldr	r1, [r7, #4]
 8009f54:	4884      	ldr	r0, [pc, #528]	@ (800a168 <LmHandlerConfigure+0x220>)
 8009f56:	f00c ff50 	bl	8016dfa <memcpy1>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    IsUplinkTxPending = false;
 8009f5a:	4b84      	ldr	r3, [pc, #528]	@ (800a16c <LmHandlerConfigure+0x224>)
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 8009f60:	f7f8 fb86 	bl	8002670 <LoraInfo_GetPtr>
 8009f64:	6478      	str	r0, [r7, #68]	@ 0x44

    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 8009f66:	4b80      	ldr	r3, [pc, #512]	@ (800a168 <LmHandlerConfigure+0x220>)
 8009f68:	781b      	ldrb	r3, [r3, #0]
 8009f6a:	461a      	mov	r2, r3
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	4093      	lsls	r3, r2
 8009f70:	461a      	mov	r2, r3
 8009f72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009f74:	685b      	ldr	r3, [r3, #4]
 8009f76:	4013      	ands	r3, r2
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d107      	bne.n	8009f8c <LmHandlerConfigure+0x44>
    {
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 8009f7c:	4b7c      	ldr	r3, [pc, #496]	@ (800a170 <LmHandlerConfigure+0x228>)
 8009f7e:	2201      	movs	r2, #1
 8009f80:	2100      	movs	r1, #0
 8009f82:	2000      	movs	r0, #0
 8009f84:	f00f fc9e 	bl	80198c4 <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 8009f88:	bf00      	nop
 8009f8a:	e7fd      	b.n	8009f88 <LmHandlerConfigure+0x40>
    }

    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 8009f8c:	4b76      	ldr	r3, [pc, #472]	@ (800a168 <LmHandlerConfigure+0x220>)
 8009f8e:	781b      	ldrb	r3, [r3, #0]
 8009f90:	461a      	mov	r2, r3
 8009f92:	4978      	ldr	r1, [pc, #480]	@ (800a174 <LmHandlerConfigure+0x22c>)
 8009f94:	4878      	ldr	r0, [pc, #480]	@ (800a178 <LmHandlerConfigure+0x230>)
 8009f96:	f004 f83f 	bl	800e018 <LoRaMacInitialization>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d002      	beq.n	8009fa6 <LmHandlerConfigure+0x5e>
    {
        return LORAMAC_HANDLER_ERROR;
 8009fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8009fa4:	e0dc      	b.n	800a160 <LmHandlerConfigure+0x218>
    }

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    /* Try the restore context from the Backup RAM structure if data retention is available */
    mibReq.Type = MIB_NVM_CTXS;
 8009fa6:	2327      	movs	r3, #39	@ 0x27
 8009fa8:	763b      	strb	r3, [r7, #24]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8009faa:	f107 0318 	add.w	r3, r7, #24
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f004 fd5e 	bl	800ea70 <LoRaMacMibSetRequestConfirm>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d103      	bne.n	8009fc2 <LmHandlerConfigure+0x7a>
    {
        CtxRestoreDone = true;
 8009fba:	4b70      	ldr	r3, [pc, #448]	@ (800a17c <LmHandlerConfigure+0x234>)
 8009fbc:	2201      	movs	r2, #1
 8009fbe:	701a      	strb	r2, [r3, #0]
 8009fc0:	e02a      	b.n	800a018 <LmHandlerConfigure+0xd0>
    }
    else
    {
        /* Restore context data backup from user callback (stored in FLASH) */
        mibReq.Type = MIB_NVM_BKP_CTXS;
 8009fc2:	2328      	movs	r3, #40	@ 0x28
 8009fc4:	763b      	strb	r3, [r7, #24]
        if( LmHandlerCallbacks->OnRestoreContextRequest != NULL )
 8009fc6:	4b6e      	ldr	r3, [pc, #440]	@ (800a180 <LmHandlerConfigure+0x238>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	691b      	ldr	r3, [r3, #16]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d00c      	beq.n	8009fea <LmHandlerConfigure+0xa2>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 8009fd0:	f107 0318 	add.w	r3, r7, #24
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	f004 fb73 	bl	800e6c0 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest( mibReq.Param.BackupContexts, sizeof( LoRaMacNvmData_t ) );
 8009fda:	4b69      	ldr	r3, [pc, #420]	@ (800a180 <LmHandlerConfigure+0x238>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	691b      	ldr	r3, [r3, #16]
 8009fe0:	69fa      	ldr	r2, [r7, #28]
 8009fe2:	f240 51cc 	movw	r1, #1484	@ 0x5cc
 8009fe6:	4610      	mov	r0, r2
 8009fe8:	4798      	blx	r3
        }
        /* Restore context data from backup to main nvm structure */
        mibReq.Type = MIB_NVM_CTXS;
 8009fea:	2327      	movs	r3, #39	@ 0x27
 8009fec:	763b      	strb	r3, [r7, #24]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8009fee:	f107 0318 	add.w	r3, r7, #24
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f004 fd3c 	bl	800ea70 <LoRaMacMibSetRequestConfirm>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d10c      	bne.n	800a018 <LmHandlerConfigure+0xd0>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 8009ffe:	2301      	movs	r3, #1
 800a000:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800a002:	f107 0318 	add.w	r3, r7, #24
 800a006:	4618      	mov	r0, r3
 800a008:	f004 fb5a 	bl	800e6c0 <LoRaMacMibGetRequestConfirm>
            if( mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE )
 800a00c:	7f3b      	ldrb	r3, [r7, #28]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d002      	beq.n	800a018 <LmHandlerConfigure+0xd0>
            {
                CtxRestoreDone = true;
 800a012:	4b5a      	ldr	r3, [pc, #360]	@ (800a17c <LmHandlerConfigure+0x234>)
 800a014:	2201      	movs	r2, #1
 800a016:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if( CtxRestoreDone == true )
 800a018:	4b58      	ldr	r3, [pc, #352]	@ (800a17c <LmHandlerConfigure+0x234>)
 800a01a:	781b      	ldrb	r3, [r3, #0]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d022      	beq.n	800a066 <LmHandlerConfigure+0x11e>
    {
        if( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800a020:	4b57      	ldr	r3, [pc, #348]	@ (800a180 <LmHandlerConfigure+0x238>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	69db      	ldr	r3, [r3, #28]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d004      	beq.n	800a034 <LmHandlerConfigure+0xec>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800a02a:	4b55      	ldr	r3, [pc, #340]	@ (800a180 <LmHandlerConfigure+0x238>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	69db      	ldr	r3, [r3, #28]
 800a030:	2000      	movs	r0, #0
 800a032:	4798      	blx	r3
        }

        mibReq.Type = MIB_NVM_CTXS;
 800a034:	2327      	movs	r3, #39	@ 0x27
 800a036:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800a038:	f107 0318 	add.w	r3, r7, #24
 800a03c:	4618      	mov	r0, r3
 800a03e:	f004 fb3f 	bl	800e6c0 <LoRaMacMibGetRequestConfirm>
        LoRaMacNvmData_t *current_nvm = mibReq.Param.Contexts;
 800a042:	69fb      	ldr	r3, [r7, #28]
 800a044:	643b      	str	r3, [r7, #64]	@ 0x40

        LmHandlerParams.ActiveRegion = current_nvm->MacGroup2.Region;
 800a046:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a048:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800a04c:	4b46      	ldr	r3, [pc, #280]	@ (800a168 <LmHandlerConfigure+0x220>)
 800a04e:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = current_nvm->MacGroup2.DeviceClass;
 800a050:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a052:	f893 2118 	ldrb.w	r2, [r3, #280]	@ 0x118
 800a056:	4b44      	ldr	r3, [pc, #272]	@ (800a168 <LmHandlerConfigure+0x220>)
 800a058:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
 800a05a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a05c:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 800a060:	4b41      	ldr	r3, [pc, #260]	@ (800a168 <LmHandlerConfigure+0x220>)
 800a062:	709a      	strb	r2, [r3, #2]
 800a064:	e008      	b.n	800a078 <LmHandlerConfigure+0x130>
    }
    else
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
    {
        mibReq.Type = MIB_NET_ID;
 800a066:	2305      	movs	r3, #5
 800a068:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800a06a:	2300      	movs	r3, #0
 800a06c:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800a06e:	f107 0318 	add.w	r3, r7, #24
 800a072:	4618      	mov	r0, r3
 800a074:	f004 fcfc 	bl	800ea70 <LoRaMacMibSetRequestConfirm>
    }

    /* Restore ID struct from NVM or Init from callbacks */
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 800a078:	4b3e      	ldr	r3, [pc, #248]	@ (800a174 <LmHandlerConfigure+0x22c>)
 800a07a:	689b      	ldr	r3, [r3, #8]
 800a07c:	4a3d      	ldr	r2, [pc, #244]	@ (800a174 <LmHandlerConfigure+0x22c>)
 800a07e:	68d2      	ldr	r2, [r2, #12]
 800a080:	4611      	mov	r1, r2
 800a082:	4618      	mov	r0, r3
 800a084:	f00c fb4c 	bl	8016720 <SecureElementInitMcuID>
 800a088:	4603      	mov	r3, r0
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d002      	beq.n	800a094 <LmHandlerConfigure+0x14c>
    {
        return LORAMAC_HANDLER_ERROR;
 800a08e:	f04f 33ff 	mov.w	r3, #4294967295
 800a092:	e065      	b.n	800a160 <LmHandlerConfigure+0x218>
    }

    /* Read secure-element DEV_EUI, JOIN_EUI and DEV_ADDR values. */
    mibReq.Type = MIB_DEV_ADDR;
 800a094:	2306      	movs	r3, #6
 800a096:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800a098:	f107 0318 	add.w	r3, r7, #24
 800a09c:	4618      	mov	r0, r3
 800a09e:	f004 fb0f 	bl	800e6c0 <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800a0a2:	69fb      	ldr	r3, [r7, #28]
 800a0a4:	4a37      	ldr	r2, [pc, #220]	@ (800a184 <LmHandlerConfigure+0x23c>)
 800a0a6:	6153      	str	r3, [r2, #20]

    /* Override DevAddress value after init from callbacks */
    LoRaMacMibSetRequestConfirm( &mibReq );
 800a0a8:	f107 0318 	add.w	r3, r7, #24
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f004 fcdf 	bl	800ea70 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_DEV_EUI;
 800a0b2:	2302      	movs	r3, #2
 800a0b4:	763b      	strb	r3, [r7, #24]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 800a0b6:	4b33      	ldr	r3, [pc, #204]	@ (800a184 <LmHandlerConfigure+0x23c>)
 800a0b8:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800a0ba:	f107 0318 	add.w	r3, r7, #24
 800a0be:	4618      	mov	r0, r3
 800a0c0:	f004 fafe 	bl	800e6c0 <LoRaMacMibGetRequestConfirm>

    mibReq.Type = MIB_JOIN_EUI;
 800a0c4:	2303      	movs	r3, #3
 800a0c6:	763b      	strb	r3, [r7, #24]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 800a0c8:	4b2f      	ldr	r3, [pc, #188]	@ (800a188 <LmHandlerConfigure+0x240>)
 800a0ca:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800a0cc:	f107 0318 	add.w	r3, r7, #24
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f004 faf5 	bl	800e6c0 <LoRaMacMibGetRequestConfirm>

    SecureElementPrintKeys();
 800a0d6:	f00c fba3 	bl	8016820 <SecureElementPrintKeys>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG( TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n" );
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800a0da:	230f      	movs	r3, #15
 800a0dc:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800a0de:	2301      	movs	r3, #1
 800a0e0:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800a0e2:	f107 0318 	add.w	r3, r7, #24
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f004 fcc2 	bl	800ea70 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800a0ec:	2310      	movs	r3, #16
 800a0ee:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800a0f4:	f107 0318 	add.w	r3, r7, #24
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f004 fcb9 	bl	800ea70 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800a0fe:	2304      	movs	r3, #4
 800a100:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800a102:	4b19      	ldr	r3, [pc, #100]	@ (800a168 <LmHandlerConfigure+0x220>)
 800a104:	789b      	ldrb	r3, [r3, #2]
 800a106:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800a108:	f107 0318 	add.w	r3, r7, #24
 800a10c:	4618      	mov	r0, r3
 800a10e:	f004 fcaf 	bl	800ea70 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800a112:	233a      	movs	r3, #58	@ 0x3a
 800a114:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800a116:	4b14      	ldr	r3, [pc, #80]	@ (800a168 <LmHandlerConfigure+0x220>)
 800a118:	695b      	ldr	r3, [r3, #20]
 800a11a:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800a11c:	f107 0318 	add.w	r3, r7, #24
 800a120:	4618      	mov	r0, r3
 800a122:	f004 fca5 	bl	800ea70 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800a126:	230f      	movs	r3, #15
 800a128:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800a12a:	4b0f      	ldr	r3, [pc, #60]	@ (800a168 <LmHandlerConfigure+0x220>)
 800a12c:	781b      	ldrb	r3, [r3, #0]
 800a12e:	f107 0210 	add.w	r2, r7, #16
 800a132:	4611      	mov	r1, r2
 800a134:	4618      	mov	r0, r3
 800a136:	f007 fbc2 	bl	80118be <RegionGetPhyParam>
 800a13a:	4603      	mov	r3, r0
 800a13c:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	2b00      	cmp	r3, #0
 800a142:	bf14      	ite	ne
 800a144:	2301      	movne	r3, #1
 800a146:	2300      	moveq	r3, #0
 800a148:	b2da      	uxtb	r2, r3
 800a14a:	4b07      	ldr	r3, [pc, #28]	@ (800a168 <LmHandlerConfigure+0x220>)
 800a14c:	71da      	strb	r2, [r3, #7]

    /* Set system maximum tolerated rx error in milliseconds */
    LmHandlerSetSystemMaxRxError( 20 );
 800a14e:	2014      	movs	r0, #20
 800a150:	f000 fa1e 	bl	800a590 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800a154:	4b04      	ldr	r3, [pc, #16]	@ (800a168 <LmHandlerConfigure+0x220>)
 800a156:	79db      	ldrb	r3, [r3, #7]
 800a158:	4618      	mov	r0, r3
 800a15a:	f005 fb03 	bl	800f764 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800a15e:	2300      	movs	r3, #0
}
 800a160:	4618      	mov	r0, r3
 800a162:	3748      	adds	r7, #72	@ 0x48
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}
 800a168:	200009dc 	.word	0x200009dc
 800a16c:	20000a24 	.word	0x20000a24
 800a170:	08020a38 	.word	0x08020a38
 800a174:	20000a08 	.word	0x20000a08
 800a178:	200009f8 	.word	0x200009f8
 800a17c:	20000a25 	.word	0x20000a25
 800a180:	200009f4 	.word	0x200009f4
 800a184:	200009b0 	.word	0x200009b0
 800a188:	200009b8 	.word	0x200009b8

0800a18c <LmHandlerJoin>:
    return DutyCycleWaitTime;
}
#if MY_TX
#if MY_TX_ABP
void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b08c      	sub	sp, #48	@ 0x30
 800a190:	af00      	add	r7, sp, #0
 800a192:	4603      	mov	r3, r0
 800a194:	460a      	mov	r2, r1
 800a196:	71fb      	strb	r3, [r7, #7]
 800a198:	4613      	mov	r3, r2
 800a19a:	71bb      	strb	r3, [r7, #6]

	if( mode == ACTIVATION_TYPE_ABP )
 800a19c:	79fb      	ldrb	r3, [r7, #7]
 800a19e:	2b01      	cmp	r3, #1
 800a1a0:	d10d      	bne.n	800a1be <LmHandlerJoin+0x32>
	{

		MibRequestConfirm_t mibReq;

		JoinParams.forceRejoin = forceRejoin;
 800a1a2:	4a09      	ldr	r2, [pc, #36]	@ (800a1c8 <LmHandlerJoin+0x3c>)
 800a1a4:	79bb      	ldrb	r3, [r7, #6]
 800a1a6:	7213      	strb	r3, [r2, #8]

		LoRaMacStart();
 800a1a8:	f004 f9ec 	bl	800e584 <LoRaMacStart>

		mibReq.Type = MIB_NETWORK_ACTIVATION;
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	723b      	strb	r3, [r7, #8]
		mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	733b      	strb	r3, [r7, #12]
		LoRaMacMibSetRequestConfirm( &mibReq );
 800a1b4:	f107 0308 	add.w	r3, r7, #8
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f004 fc59 	bl	800ea70 <LoRaMacMibSetRequestConfirm>
	}
}
 800a1be:	bf00      	nop
 800a1c0:	3730      	adds	r7, #48	@ 0x30
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}
 800a1c6:	bf00      	nop
 800a1c8:	20000078 	.word	0x20000078

0800a1cc <LmHandlerJoinStatus>:
#endif /* LORAMAC_VERSION */
}
#endif

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b08c      	sub	sp, #48	@ 0x30
 800a1d0:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	713b      	strb	r3, [r7, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800a1d6:	1d3b      	adds	r3, r7, #4
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f004 fa71 	bl	800e6c0 <LoRaMacMibGetRequestConfirm>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if( status == LORAMAC_STATUS_OK )
 800a1e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d106      	bne.n	800a1fa <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800a1ec:	7a3b      	ldrb	r3, [r7, #8]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d101      	bne.n	800a1f6 <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	e002      	b.n	800a1fc <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	e000      	b.n	800a1fc <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800a1fa:	2300      	movs	r3, #0
    }
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3730      	adds	r7, #48	@ 0x30
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}

0800a204 <LmHandlerSend>:
LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      bool allowDelayedTx )
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b08a      	sub	sp, #40	@ 0x28
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	460b      	mov	r3, r1
 800a20e:	70fb      	strb	r3, [r7, #3]
 800a210:	4613      	mov	r3, r2
 800a212:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800a214:	23ff      	movs	r3, #255	@ 0xff
 800a216:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LoRaMacIsBusy() == true )
 800a21a:	f001 fbbf 	bl	800b99c <LoRaMacIsBusy>
 800a21e:	4603      	mov	r3, r0
 800a220:	2b00      	cmp	r3, #0
 800a222:	d002      	beq.n	800a22a <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800a224:	f06f 0301 	mvn.w	r3, #1
 800a228:	e0ab      	b.n	800a382 <LmHandlerSend+0x17e>
    }

    if( LoRaMacIsStopped() == true )
 800a22a:	f001 fbdf 	bl	800b9ec <LoRaMacIsStopped>
 800a22e:	4603      	mov	r3, r0
 800a230:	2b00      	cmp	r3, #0
 800a232:	d002      	beq.n	800a23a <LmHandlerSend+0x36>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800a234:	f06f 0302 	mvn.w	r3, #2
 800a238:	e0a3      	b.n	800a382 <LmHandlerSend+0x17e>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800a23a:	f7ff ffc7 	bl	800a1cc <LmHandlerJoinStatus>
 800a23e:	4603      	mov	r3, r0
 800a240:	2b01      	cmp	r3, #1
 800a242:	d00a      	beq.n	800a25a <LmHandlerSend+0x56>
    {
        /* The network isn't joined, try again. */
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800a244:	4b51      	ldr	r3, [pc, #324]	@ (800a38c <LmHandlerSend+0x188>)
 800a246:	79db      	ldrb	r3, [r3, #7]
 800a248:	4a50      	ldr	r2, [pc, #320]	@ (800a38c <LmHandlerSend+0x188>)
 800a24a:	7a12      	ldrb	r2, [r2, #8]
 800a24c:	4611      	mov	r1, r2
 800a24e:	4618      	mov	r0, r3
 800a250:	f7ff ff9c 	bl	800a18c <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800a254:	f06f 0302 	mvn.w	r3, #2
 800a258:	e093      	b.n	800a382 <LmHandlerSend+0x17e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800a25a:	4a4d      	ldr	r2, [pc, #308]	@ (800a390 <LmHandlerSend+0x18c>)
 800a25c:	78fb      	ldrb	r3, [r7, #3]
 800a25e:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800a260:	78fb      	ldrb	r3, [r7, #3]
 800a262:	2b00      	cmp	r3, #0
 800a264:	bf14      	ite	ne
 800a266:	2301      	movne	r3, #1
 800a268:	2300      	moveq	r3, #0
 800a26a:	b2db      	uxtb	r3, r3
 800a26c:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800a26e:	4b49      	ldr	r3, [pc, #292]	@ (800a394 <LmHandlerSend+0x190>)
 800a270:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800a274:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	785b      	ldrb	r3, [r3, #1]
 800a27a:	f107 020c 	add.w	r2, r7, #12
 800a27e:	4611      	mov	r1, r2
 800a280:	4618      	mov	r0, r3
 800a282:	f004 f98d 	bl	800e5a0 <LoRaMacQueryTxPossible>
 800a286:	4603      	mov	r3, r0
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d009      	beq.n	800a2a0 <LmHandlerSend+0x9c>
    {
        /* Send empty frame in order to flush MAC commands */
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800a28c:	2300      	movs	r3, #0
 800a28e:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800a290:	2300      	movs	r3, #0
 800a292:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800a294:	2300      	movs	r3, #0
 800a296:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800a298:	23f9      	movs	r3, #249	@ 0xf9
 800a29a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a29e:	e008      	b.n	800a2b2 <LmHandlerSend+0xae>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	781b      	ldrb	r3, [r3, #0]
 800a2a4:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	785b      	ldrb	r3, [r3, #1]
 800a2aa:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	685b      	ldr	r3, [r3, #4]
 800a2b0:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800a2b2:	4b37      	ldr	r3, [pc, #220]	@ (800a390 <LmHandlerSend+0x18c>)
 800a2b4:	687a      	ldr	r2, [r7, #4]
 800a2b6:	3310      	adds	r3, #16
 800a2b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a2bc:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800a2c0:	4b34      	ldr	r3, [pc, #208]	@ (800a394 <LmHandlerSend+0x190>)
 800a2c2:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800a2c6:	4b32      	ldr	r3, [pc, #200]	@ (800a390 <LmHandlerSend+0x18c>)
 800a2c8:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 800a2ca:	78ba      	ldrb	r2, [r7, #2]
 800a2cc:	f107 0310 	add.w	r3, r7, #16
 800a2d0:	4611      	mov	r1, r2
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f005 f90e 	bl	800f4f4 <LoRaMacMcpsRequest>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800a2de:	6a3b      	ldr	r3, [r7, #32]
 800a2e0:	4a2d      	ldr	r2, [pc, #180]	@ (800a398 <LmHandlerSend+0x194>)
 800a2e2:	6013      	str	r3, [r2, #0]

    switch( status )
 800a2e4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a2e8:	2b11      	cmp	r3, #17
 800a2ea:	d843      	bhi.n	800a374 <LmHandlerSend+0x170>
 800a2ec:	a201      	add	r2, pc, #4	@ (adr r2, 800a2f4 <LmHandlerSend+0xf0>)
 800a2ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2f2:	bf00      	nop
 800a2f4:	0800a33d 	.word	0x0800a33d
 800a2f8:	0800a355 	.word	0x0800a355
 800a2fc:	0800a375 	.word	0x0800a375
 800a300:	0800a375 	.word	0x0800a375
 800a304:	0800a375 	.word	0x0800a375
 800a308:	0800a375 	.word	0x0800a375
 800a30c:	0800a375 	.word	0x0800a375
 800a310:	0800a35d 	.word	0x0800a35d
 800a314:	0800a375 	.word	0x0800a375
 800a318:	0800a375 	.word	0x0800a375
 800a31c:	0800a375 	.word	0x0800a375
 800a320:	0800a36d 	.word	0x0800a36d
 800a324:	0800a375 	.word	0x0800a375
 800a328:	0800a375 	.word	0x0800a375
 800a32c:	0800a355 	.word	0x0800a355
 800a330:	0800a355 	.word	0x0800a355
 800a334:	0800a355 	.word	0x0800a355
 800a338:	0800a365 	.word	0x0800a365
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            IsUplinkTxPending = false;
 800a33c:	4b17      	ldr	r3, [pc, #92]	@ (800a39c <LmHandlerSend+0x198>)
 800a33e:	2200      	movs	r2, #0
 800a340:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 800a342:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a346:	f113 0f07 	cmn.w	r3, #7
 800a34a:	d017      	beq.n	800a37c <LmHandlerSend+0x178>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800a34c:	2300      	movs	r3, #0
 800a34e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 800a352:	e013      	b.n	800a37c <LmHandlerSend+0x178>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800a354:	23fe      	movs	r3, #254	@ 0xfe
 800a356:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800a35a:	e010      	b.n	800a37e <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800a35c:	23fd      	movs	r3, #253	@ 0xfd
 800a35e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800a362:	e00c      	b.n	800a37e <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800a364:	23fb      	movs	r3, #251	@ 0xfb
 800a366:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800a36a:	e008      	b.n	800a37e <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800a36c:	23fa      	movs	r3, #250	@ 0xfa
 800a36e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800a372:	e004      	b.n	800a37e <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800a374:	23ff      	movs	r3, #255	@ 0xff
 800a376:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800a37a:	e000      	b.n	800a37e <LmHandlerSend+0x17a>
            break;
 800a37c:	bf00      	nop
    }

    return lmhStatus;
 800a37e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800a382:	4618      	mov	r0, r3
 800a384:	3728      	adds	r7, #40	@ 0x28
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}
 800a38a:	bf00      	nop
 800a38c:	20000078 	.word	0x20000078
 800a390:	20000084 	.word	0x20000084
 800a394:	200009dc 	.word	0x200009dc
 800a398:	20000a20 	.word	0x20000a20
 800a39c:	20000a24 	.word	0x20000a24

0800a3a0 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b086      	sub	sp, #24
 800a3a4:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800a3a6:	2309      	movs	r3, #9
 800a3a8:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800a3aa:	463b      	mov	r3, r7
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f004 ff09 	bl	800f1c4 <LoRaMacMlmeRequest>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800a3b6:	693b      	ldr	r3, [r7, #16]
 800a3b8:	4a06      	ldr	r2, [pc, #24]	@ (800a3d4 <LmHandlerDeviceTimeReq+0x34>)
 800a3ba:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800a3bc:	7dfb      	ldrb	r3, [r7, #23]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d101      	bne.n	800a3c6 <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	e001      	b.n	800a3ca <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800a3c6:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3718      	adds	r7, #24
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}
 800a3d2:	bf00      	nop
 800a3d4:	20000a20 	.word	0x20000a20

0800a3d8 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800a3d8:	b480      	push	{r7}
 800a3da:	b083      	sub	sp, #12
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	4603      	mov	r3, r0
 800a3e0:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800a3e2:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	370c      	adds	r7, #12
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bc80      	pop	{r7}
 800a3ee:	4770      	bx	lr

0800a3f0 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b08e      	sub	sp, #56	@ 0x38
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( LoRaMacIsBusy() == true )
 800a400:	f001 facc 	bl	800b99c <LoRaMacIsBusy>
 800a404:	4603      	mov	r3, r0
 800a406:	2b00      	cmp	r3, #0
 800a408:	d002      	beq.n	800a410 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800a40a:	f06f 0301 	mvn.w	r3, #1
 800a40e:	e071      	b.n	800a4f4 <LmHandlerRequestClass+0x104>
    }

    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 800a410:	f7ff fedc 	bl	800a1cc <LmHandlerJoinStatus>
 800a414:	4603      	mov	r3, r0
 800a416:	2b01      	cmp	r3, #1
 800a418:	d002      	beq.n	800a420 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800a41a:	f06f 0302 	mvn.w	r3, #2
 800a41e:	e069      	b.n	800a4f4 <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800a420:	2300      	movs	r3, #0
 800a422:	733b      	strb	r3, [r7, #12]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800a424:	f107 030c 	add.w	r3, r7, #12
 800a428:	4618      	mov	r0, r3
 800a42a:	f004 f949 	bl	800e6c0 <LoRaMacMibGetRequestConfirm>
 800a42e:	4603      	mov	r3, r0
 800a430:	2b00      	cmp	r3, #0
 800a432:	d002      	beq.n	800a43a <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800a434:	f04f 33ff 	mov.w	r3, #4294967295
 800a438:	e05c      	b.n	800a4f4 <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800a43a:	7c3b      	ldrb	r3, [r7, #16]
 800a43c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Attempt to switch only if class update */
    if( currentClass != newClass )
 800a440:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800a444:	79fb      	ldrb	r3, [r7, #7]
 800a446:	429a      	cmp	r2, r3
 800a448:	d052      	beq.n	800a4f0 <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800a44a:	79fb      	ldrb	r3, [r7, #7]
 800a44c:	2b02      	cmp	r3, #2
 800a44e:	d028      	beq.n	800a4a2 <LmHandlerRequestClass+0xb2>
 800a450:	2b02      	cmp	r3, #2
 800a452:	dc48      	bgt.n	800a4e6 <LmHandlerRequestClass+0xf6>
 800a454:	2b00      	cmp	r3, #0
 800a456:	d002      	beq.n	800a45e <LmHandlerRequestClass+0x6e>
 800a458:	2b01      	cmp	r3, #1
 800a45a:	d01e      	beq.n	800a49a <LmHandlerRequestClass+0xaa>
                        }
                    }
                }
                break;
            default:
                break;
 800a45c:	e043      	b.n	800a4e6 <LmHandlerRequestClass+0xf6>
                    if( currentClass != CLASS_A )
 800a45e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800a462:	2b00      	cmp	r3, #0
 800a464:	d041      	beq.n	800a4ea <LmHandlerRequestClass+0xfa>
                        mibReq.Param.Class = newClass;
 800a466:	79fb      	ldrb	r3, [r7, #7]
 800a468:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800a46a:	f107 030c 	add.w	r3, r7, #12
 800a46e:	4618      	mov	r0, r3
 800a470:	f004 fafe 	bl	800ea70 <LoRaMacMibSetRequestConfirm>
 800a474:	4603      	mov	r3, r0
 800a476:	2b00      	cmp	r3, #0
 800a478:	d10b      	bne.n	800a492 <LmHandlerRequestClass+0xa2>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800a47a:	4b20      	ldr	r3, [pc, #128]	@ (800a4fc <LmHandlerRequestClass+0x10c>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a480:	2b00      	cmp	r3, #0
 800a482:	d032      	beq.n	800a4ea <LmHandlerRequestClass+0xfa>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800a484:	4b1d      	ldr	r3, [pc, #116]	@ (800a4fc <LmHandlerRequestClass+0x10c>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a48a:	79fa      	ldrb	r2, [r7, #7]
 800a48c:	4610      	mov	r0, r2
 800a48e:	4798      	blx	r3
                break;
 800a490:	e02b      	b.n	800a4ea <LmHandlerRequestClass+0xfa>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800a492:	23ff      	movs	r3, #255	@ 0xff
 800a494:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800a498:	e027      	b.n	800a4ea <LmHandlerRequestClass+0xfa>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800a49a:	23ff      	movs	r3, #255	@ 0xff
 800a49c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800a4a0:	e026      	b.n	800a4f0 <LmHandlerRequestClass+0x100>
                    if( currentClass != CLASS_A )
 800a4a2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d003      	beq.n	800a4b2 <LmHandlerRequestClass+0xc2>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800a4aa:	23ff      	movs	r3, #255	@ 0xff
 800a4ac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800a4b0:	e01d      	b.n	800a4ee <LmHandlerRequestClass+0xfe>
                        mibReq.Param.Class = newClass;
 800a4b2:	79fb      	ldrb	r3, [r7, #7]
 800a4b4:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800a4b6:	f107 030c 	add.w	r3, r7, #12
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f004 fad8 	bl	800ea70 <LoRaMacMibSetRequestConfirm>
 800a4c0:	4603      	mov	r3, r0
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d10b      	bne.n	800a4de <LmHandlerRequestClass+0xee>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800a4c6:	4b0d      	ldr	r3, [pc, #52]	@ (800a4fc <LmHandlerRequestClass+0x10c>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d00e      	beq.n	800a4ee <LmHandlerRequestClass+0xfe>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800a4d0:	4b0a      	ldr	r3, [pc, #40]	@ (800a4fc <LmHandlerRequestClass+0x10c>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4d6:	79fa      	ldrb	r2, [r7, #7]
 800a4d8:	4610      	mov	r0, r2
 800a4da:	4798      	blx	r3
                break;
 800a4dc:	e007      	b.n	800a4ee <LmHandlerRequestClass+0xfe>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800a4de:	23ff      	movs	r3, #255	@ 0xff
 800a4e0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800a4e4:	e003      	b.n	800a4ee <LmHandlerRequestClass+0xfe>
                break;
 800a4e6:	bf00      	nop
 800a4e8:	e002      	b.n	800a4f0 <LmHandlerRequestClass+0x100>
                break;
 800a4ea:	bf00      	nop
 800a4ec:	e000      	b.n	800a4f0 <LmHandlerRequestClass+0x100>
                break;
 800a4ee:	bf00      	nop
        }
    }
    return errorStatus;
 800a4f0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	3738      	adds	r7, #56	@ 0x38
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}
 800a4fc:	200009f4 	.word	0x200009f4

0800a500 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b08c      	sub	sp, #48	@ 0x30
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( deviceClass == NULL )
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d102      	bne.n	800a514 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800a50e:	f04f 33ff 	mov.w	r3, #4294967295
 800a512:	e010      	b.n	800a536 <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800a514:	2300      	movs	r3, #0
 800a516:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800a518:	f107 0308 	add.w	r3, r7, #8
 800a51c:	4618      	mov	r0, r3
 800a51e:	f004 f8cf 	bl	800e6c0 <LoRaMacMibGetRequestConfirm>
 800a522:	4603      	mov	r3, r0
 800a524:	2b00      	cmp	r3, #0
 800a526:	d002      	beq.n	800a52e <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800a528:	f04f 33ff 	mov.w	r3, #4294967295
 800a52c:	e003      	b.n	800a536 <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800a52e:	7b3a      	ldrb	r2, [r7, #12]
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800a534:	2300      	movs	r3, #0
}
 800a536:	4618      	mov	r0, r3
 800a538:	3730      	adds	r7, #48	@ 0x30
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}
	...

0800a540 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b08c      	sub	sp, #48	@ 0x30
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if( txDatarate == NULL )
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d102      	bne.n	800a554 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800a54e:	f04f 33ff 	mov.w	r3, #4294967295
 800a552:	e016      	b.n	800a582 <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800a554:	2320      	movs	r3, #32
 800a556:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 800a558:	f107 0308 	add.w	r3, r7, #8
 800a55c:	4618      	mov	r0, r3
 800a55e:	f004 f8af 	bl	800e6c0 <LoRaMacMibGetRequestConfirm>
 800a562:	4603      	mov	r3, r0
 800a564:	2b00      	cmp	r3, #0
 800a566:	d002      	beq.n	800a56e <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800a568:	f04f 33ff 	mov.w	r3, #4294967295
 800a56c:	e009      	b.n	800a582 <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800a56e:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f993 2000 	ldrsb.w	r2, [r3]
 800a57c:	4b03      	ldr	r3, [pc, #12]	@ (800a58c <LmHandlerGetTxDatarate+0x4c>)
 800a57e:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800a580:	2300      	movs	r3, #0
}
 800a582:	4618      	mov	r0, r3
 800a584:	3730      	adds	r7, #48	@ 0x30
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}
 800a58a:	bf00      	nop
 800a58c:	200009dc 	.word	0x200009dc

0800a590 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b08c      	sub	sp, #48	@ 0x30
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800a598:	2323      	movs	r3, #35	@ 0x23
 800a59a:	723b      	strb	r3, [r7, #8]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	60fb      	str	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800a5a0:	f107 0308 	add.w	r3, r7, #8
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	f004 fa63 	bl	800ea70 <LoRaMacMibSetRequestConfirm>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d002      	beq.n	800a5b6 <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800a5b0:	f04f 33ff 	mov.w	r3, #4294967295
 800a5b4:	e000      	b.n	800a5b8 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800a5b6:	2300      	movs	r3, #0
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3730      	adds	r7, #48	@ 0x30
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}

0800a5c0 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b082      	sub	sp, #8
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800a5c8:	4b18      	ldr	r3, [pc, #96]	@ (800a62c <McpsConfirm+0x6c>)
 800a5ca:	2201      	movs	r2, #1
 800a5cc:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	785a      	ldrb	r2, [r3, #1]
 800a5d2:	4b16      	ldr	r3, [pc, #88]	@ (800a62c <McpsConfirm+0x6c>)
 800a5d4:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	789b      	ldrb	r3, [r3, #2]
 800a5da:	b25a      	sxtb	r2, r3
 800a5dc:	4b13      	ldr	r3, [pc, #76]	@ (800a62c <McpsConfirm+0x6c>)
 800a5de:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	68db      	ldr	r3, [r3, #12]
 800a5e4:	4a11      	ldr	r2, [pc, #68]	@ (800a62c <McpsConfirm+0x6c>)
 800a5e6:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800a5ee:	4b0f      	ldr	r3, [pc, #60]	@ (800a62c <McpsConfirm+0x6c>)
 800a5f0:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	691b      	ldr	r3, [r3, #16]
 800a5f6:	b2da      	uxtb	r2, r3
 800a5f8:	4b0c      	ldr	r3, [pc, #48]	@ (800a62c <McpsConfirm+0x6c>)
 800a5fa:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	791b      	ldrb	r3, [r3, #4]
 800a600:	461a      	mov	r2, r3
 800a602:	4b0a      	ldr	r3, [pc, #40]	@ (800a62c <McpsConfirm+0x6c>)
 800a604:	725a      	strb	r2, [r3, #9]

    if( LmHandlerCallbacks->OnTxData != NULL )
 800a606:	4b0a      	ldr	r3, [pc, #40]	@ (800a630 <McpsConfirm+0x70>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d004      	beq.n	800a61a <McpsConfirm+0x5a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800a610:	4b07      	ldr	r3, [pc, #28]	@ (800a630 <McpsConfirm+0x70>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a616:	4805      	ldr	r0, [pc, #20]	@ (800a62c <McpsConfirm+0x6c>)
 800a618:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800a61a:	6879      	ldr	r1, [r7, #4]
 800a61c:	2000      	movs	r0, #0
 800a61e:	f000 f963 	bl	800a8e8 <LmHandlerPackagesNotify>
}
 800a622:	bf00      	nop
 800a624:	3708      	adds	r7, #8
 800a626:	46bd      	mov	sp, r7
 800a628:	bd80      	pop	{r7, pc}
 800a62a:	bf00      	nop
 800a62c:	20000084 	.word	0x20000084
 800a630:	200009f4 	.word	0x200009f4

0800a634 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b086      	sub	sp, #24
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
 800a63c:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800a63e:	2300      	movs	r3, #0
 800a640:	73fb      	strb	r3, [r7, #15]
    RxParams.IsMcpsIndication = 1;
 800a642:	4b2d      	ldr	r3, [pc, #180]	@ (800a6f8 <McpsIndication+0xc4>)
 800a644:	2201      	movs	r2, #1
 800a646:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	785a      	ldrb	r2, [r3, #1]
 800a64c:	4b2a      	ldr	r3, [pc, #168]	@ (800a6f8 <McpsIndication+0xc4>)
 800a64e:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800a650:	4b29      	ldr	r3, [pc, #164]	@ (800a6f8 <McpsIndication+0xc4>)
 800a652:	785b      	ldrb	r3, [r3, #1]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d14b      	bne.n	800a6f0 <McpsIndication+0xbc>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	791b      	ldrb	r3, [r3, #4]
 800a65c:	b25a      	sxtb	r2, r3
 800a65e:	4b26      	ldr	r3, [pc, #152]	@ (800a6f8 <McpsIndication+0xc4>)
 800a660:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a668:	b25a      	sxtb	r2, r3
 800a66a:	4b23      	ldr	r3, [pc, #140]	@ (800a6f8 <McpsIndication+0xc4>)
 800a66c:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800a674:	4b20      	ldr	r3, [pc, #128]	@ (800a6f8 <McpsIndication+0xc4>)
 800a676:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	78da      	ldrb	r2, [r3, #3]
 800a67c:	4b1e      	ldr	r3, [pc, #120]	@ (800a6f8 <McpsIndication+0xc4>)
 800a67e:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	691b      	ldr	r3, [r3, #16]
 800a684:	4a1c      	ldr	r2, [pc, #112]	@ (800a6f8 <McpsIndication+0xc4>)
 800a686:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	78db      	ldrb	r3, [r3, #3]
 800a68c:	743b      	strb	r3, [r7, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	7b1b      	ldrb	r3, [r3, #12]
 800a692:	747b      	strb	r3, [r7, #17]
    appData.Buffer = mcpsIndication->Buffer;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	689b      	ldr	r3, [r3, #8]
 800a698:	617b      	str	r3, [r7, #20]

    if( LmHandlerCallbacks->OnRxData != NULL )
 800a69a:	4b18      	ldr	r3, [pc, #96]	@ (800a6fc <McpsIndication+0xc8>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d007      	beq.n	800a6b4 <McpsIndication+0x80>
    {
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800a6a4:	4b15      	ldr	r3, [pc, #84]	@ (800a6fc <McpsIndication+0xc8>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6aa:	f107 0210 	add.w	r2, r7, #16
 800a6ae:	4912      	ldr	r1, [pc, #72]	@ (800a6f8 <McpsIndication+0xc4>)
 800a6b0:	4610      	mov	r0, r2
 800a6b2:	4798      	blx	r3
    }

    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 800a6b4:	4b11      	ldr	r3, [pc, #68]	@ (800a6fc <McpsIndication+0xc8>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d007      	beq.n	800a6ce <McpsIndication+0x9a>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	7e1b      	ldrb	r3, [r3, #24]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d003      	beq.n	800a6ce <McpsIndication+0x9a>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800a6c6:	4b0d      	ldr	r3, [pc, #52]	@ (800a6fc <McpsIndication+0xc8>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6cc:	4798      	blx	r3
    }
    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800a6ce:	6879      	ldr	r1, [r7, #4]
 800a6d0:	2001      	movs	r0, #1
 800a6d2:	f000 f909 	bl	800a8e8 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800a6d6:	f107 030f 	add.w	r3, r7, #15
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f7ff ff10 	bl	800a500 <LmHandlerGetCurrentClass>
            .Port = 0
        };
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( mcpsIndication->IsUplinkTxPending != 0 )
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	795b      	ldrb	r3, [r3, #5]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d004      	beq.n	800a6f2 <McpsIndication+0xbe>
    {
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */
        IsUplinkTxPending = true;
 800a6e8:	4b05      	ldr	r3, [pc, #20]	@ (800a700 <McpsIndication+0xcc>)
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	701a      	strb	r2, [r3, #0]
 800a6ee:	e000      	b.n	800a6f2 <McpsIndication+0xbe>
        return;
 800a6f0:	bf00      	nop
    }
#endif /* LORAMAC_VERSION */
}
 800a6f2:	3718      	adds	r7, #24
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}
 800a6f8:	200000a0 	.word	0x200000a0
 800a6fc:	200009f4 	.word	0x200009f4
 800a700:	20000a24 	.word	0x20000a24

0800a704 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b08c      	sub	sp, #48	@ 0x30
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800a70c:	4b49      	ldr	r3, [pc, #292]	@ (800a834 <MlmeConfirm+0x130>)
 800a70e:	2200      	movs	r2, #0
 800a710:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	785a      	ldrb	r2, [r3, #1]
 800a716:	4b47      	ldr	r3, [pc, #284]	@ (800a834 <MlmeConfirm+0x130>)
 800a718:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 800a71a:	4b47      	ldr	r3, [pc, #284]	@ (800a838 <MlmeConfirm+0x134>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a720:	2b00      	cmp	r3, #0
 800a722:	d004      	beq.n	800a72e <MlmeConfirm+0x2a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800a724:	4b44      	ldr	r3, [pc, #272]	@ (800a838 <MlmeConfirm+0x134>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a72a:	4842      	ldr	r0, [pc, #264]	@ (800a834 <MlmeConfirm+0x130>)
 800a72c:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800a72e:	6879      	ldr	r1, [r7, #4]
 800a730:	2002      	movs	r0, #2
 800a732:	f000 f8d9 	bl	800a8e8 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	781b      	ldrb	r3, [r3, #0]
 800a73a:	3b01      	subs	r3, #1
 800a73c:	2b0b      	cmp	r3, #11
 800a73e:	d872      	bhi.n	800a826 <MlmeConfirm+0x122>
 800a740:	a201      	add	r2, pc, #4	@ (adr r2, 800a748 <MlmeConfirm+0x44>)
 800a742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a746:	bf00      	nop
 800a748:	0800a779 	.word	0x0800a779
 800a74c:	0800a827 	.word	0x0800a827
 800a750:	0800a827 	.word	0x0800a827
 800a754:	0800a827 	.word	0x0800a827
 800a758:	0800a7f5 	.word	0x0800a7f5
 800a75c:	0800a827 	.word	0x0800a827
 800a760:	0800a827 	.word	0x0800a827
 800a764:	0800a827 	.word	0x0800a827
 800a768:	0800a827 	.word	0x0800a827
 800a76c:	0800a827 	.word	0x0800a827
 800a770:	0800a80d 	.word	0x0800a80d
 800a774:	0800a827 	.word	0x0800a827
    {
        case MLME_JOIN:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type = MIB_DEV_ADDR;
 800a778:	2306      	movs	r3, #6
 800a77a:	723b      	strb	r3, [r7, #8]
                LoRaMacMibGetRequestConfirm( &mibReq );
 800a77c:	f107 0308 	add.w	r3, r7, #8
 800a780:	4618      	mov	r0, r3
 800a782:	f003 ff9d 	bl	800e6c0 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 800a786:	4b2d      	ldr	r3, [pc, #180]	@ (800a83c <MlmeConfirm+0x138>)
 800a788:	79db      	ldrb	r3, [r3, #7]
 800a78a:	68fa      	ldr	r2, [r7, #12]
 800a78c:	4611      	mov	r1, r2
 800a78e:	4618      	mov	r0, r3
 800a790:	f00c fa98 	bl	8016cc4 <SecureElementSetDevAddr>
 800a794:	4603      	mov	r3, r0
 800a796:	2b00      	cmp	r3, #0
 800a798:	d102      	bne.n	800a7a0 <MlmeConfirm+0x9c>
                {
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	4a28      	ldr	r2, [pc, #160]	@ (800a840 <MlmeConfirm+0x13c>)
 800a79e:	6153      	str	r3, [r2, #20]
                }
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800a7a0:	4828      	ldr	r0, [pc, #160]	@ (800a844 <MlmeConfirm+0x140>)
 800a7a2:	f7ff fecd 	bl	800a540 <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 800a7a6:	4828      	ldr	r0, [pc, #160]	@ (800a848 <MlmeConfirm+0x144>)
 800a7a8:	f000 f91a 	bl	800a9e0 <LmHandlerGetTxPower>

                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800a7ac:	4b21      	ldr	r3, [pc, #132]	@ (800a834 <MlmeConfirm+0x130>)
 800a7ae:	785b      	ldrb	r3, [r3, #1]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d108      	bne.n	800a7c6 <MlmeConfirm+0xc2>
                {
                    /* Status is OK, node has joined the network */
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800a7b4:	4b21      	ldr	r3, [pc, #132]	@ (800a83c <MlmeConfirm+0x138>)
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800a7ba:	4b24      	ldr	r3, [pc, #144]	@ (800a84c <MlmeConfirm+0x148>)
 800a7bc:	785b      	ldrb	r3, [r3, #1]
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f7ff fe16 	bl	800a3f0 <LmHandlerRequestClass>
 800a7c4:	e002      	b.n	800a7cc <MlmeConfirm+0xc8>
                }
                else
                {
                    /* Join was not successful. Try to join again */
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800a7c6:	4b1d      	ldr	r3, [pc, #116]	@ (800a83c <MlmeConfirm+0x138>)
 800a7c8:	22ff      	movs	r2, #255	@ 0xff
 800a7ca:	719a      	strb	r2, [r3, #6]
                }
                /* Notify upper layer */
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800a7cc:	4b1a      	ldr	r3, [pc, #104]	@ (800a838 <MlmeConfirm+0x134>)
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d004      	beq.n	800a7e0 <MlmeConfirm+0xdc>
                {
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800a7d6:	4b18      	ldr	r3, [pc, #96]	@ (800a838 <MlmeConfirm+0x134>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7dc:	4817      	ldr	r0, [pc, #92]	@ (800a83c <MlmeConfirm+0x138>)
 800a7de:	4798      	blx	r3
                }
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800a7e0:	4b14      	ldr	r3, [pc, #80]	@ (800a834 <MlmeConfirm+0x130>)
 800a7e2:	785b      	ldrb	r3, [r3, #1]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d120      	bne.n	800a82a <MlmeConfirm+0x126>
                {
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 800a7e8:	4b14      	ldr	r3, [pc, #80]	@ (800a83c <MlmeConfirm+0x138>)
 800a7ea:	79db      	ldrb	r3, [r3, #7]
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	f00c f82b 	bl	8016848 <SecureElementPrintSessionKeys>
                }
            }
            break;
 800a7f2:	e01a      	b.n	800a82a <MlmeConfirm+0x126>
        case MLME_LINK_CHECK:
            {
                RxParams.LinkCheck = true;
 800a7f4:	4b16      	ldr	r3, [pc, #88]	@ (800a850 <MlmeConfirm+0x14c>)
 800a7f6:	2201      	movs	r2, #1
 800a7f8:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	7a1a      	ldrb	r2, [r3, #8]
 800a7fe:	4b14      	ldr	r3, [pc, #80]	@ (800a850 <MlmeConfirm+0x14c>)
 800a800:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	7a5a      	ldrb	r2, [r3, #9]
 800a806:	4b12      	ldr	r3, [pc, #72]	@ (800a850 <MlmeConfirm+0x14c>)
 800a808:	74da      	strb	r2, [r3, #19]
            }
            break;
 800a80a:	e00f      	b.n	800a82c <MlmeConfirm+0x128>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        case MLME_BEACON_ACQUISITION:
            {
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	785b      	ldrb	r3, [r3, #1]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d105      	bne.n	800a820 <MlmeConfirm+0x11c>
                {
                    /* Beacon has been acquired */
                    /* Request server for ping slot */
                    LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800a814:	4b0d      	ldr	r3, [pc, #52]	@ (800a84c <MlmeConfirm+0x148>)
 800a816:	7c1b      	ldrb	r3, [r3, #16]
 800a818:	4618      	mov	r0, r3
 800a81a:	f7ff fddd 	bl	800a3d8 <LmHandlerPingSlotReq>
                    /* Beacon not acquired */
                    /* Request Device Time again. */
                    LmHandlerDeviceTimeReq( );
                }
            }
            break;
 800a81e:	e005      	b.n	800a82c <MlmeConfirm+0x128>
                    LmHandlerDeviceTimeReq( );
 800a820:	f7ff fdbe 	bl	800a3a0 <LmHandlerDeviceTimeReq>
            break;
 800a824:	e002      	b.n	800a82c <MlmeConfirm+0x128>
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800a826:	bf00      	nop
 800a828:	e000      	b.n	800a82c <MlmeConfirm+0x128>
            break;
 800a82a:	bf00      	nop
    }
}
 800a82c:	bf00      	nop
 800a82e:	3730      	adds	r7, #48	@ 0x30
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}
 800a834:	20000084 	.word	0x20000084
 800a838:	200009f4 	.word	0x200009f4
 800a83c:	20000078 	.word	0x20000078
 800a840:	200009b0 	.word	0x200009b0
 800a844:	2000007c 	.word	0x2000007c
 800a848:	2000007d 	.word	0x2000007d
 800a84c:	200009dc 	.word	0x200009dc
 800a850:	200000a0 	.word	0x200000a0

0800a854 <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b082      	sub	sp, #8
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
 800a85c:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800a85e:	4b20      	ldr	r3, [pc, #128]	@ (800a8e0 <MlmeIndication+0x8c>)
 800a860:	2200      	movs	r2, #0
 800a862:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	785a      	ldrb	r2, [r3, #1]
 800a868:	4b1d      	ldr	r3, [pc, #116]	@ (800a8e0 <MlmeIndication+0x8c>)
 800a86a:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	789b      	ldrb	r3, [r3, #2]
 800a870:	b25a      	sxtb	r2, r3
 800a872:	4b1b      	ldr	r3, [pc, #108]	@ (800a8e0 <MlmeIndication+0x8c>)
 800a874:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a87c:	b25a      	sxtb	r2, r3
 800a87e:	4b18      	ldr	r3, [pc, #96]	@ (800a8e0 <MlmeIndication+0x8c>)
 800a880:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800a888:	4b15      	ldr	r3, [pc, #84]	@ (800a8e0 <MlmeIndication+0x8c>)
 800a88a:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	78da      	ldrb	r2, [r3, #3]
 800a890:	4b13      	ldr	r3, [pc, #76]	@ (800a8e0 <MlmeIndication+0x8c>)
 800a892:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	685b      	ldr	r3, [r3, #4]
 800a898:	4a11      	ldr	r2, [pc, #68]	@ (800a8e0 <MlmeIndication+0x8c>)
 800a89a:	60d3      	str	r3, [r2, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 800a89c:	4b11      	ldr	r3, [pc, #68]	@ (800a8e4 <MlmeIndication+0x90>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d00d      	beq.n	800a8c2 <MlmeIndication+0x6e>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	781b      	ldrb	r3, [r3, #0]
 800a8aa:	2b0a      	cmp	r3, #10
 800a8ac:	d009      	beq.n	800a8c2 <MlmeIndication+0x6e>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	781b      	ldrb	r3, [r3, #0]
 800a8b2:	2b0e      	cmp	r3, #14
 800a8b4:	d005      	beq.n	800a8c2 <MlmeIndication+0x6e>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800a8b6:	4b0b      	ldr	r3, [pc, #44]	@ (800a8e4 <MlmeIndication+0x90>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8bc:	4908      	ldr	r1, [pc, #32]	@ (800a8e0 <MlmeIndication+0x8c>)
 800a8be:	2000      	movs	r0, #0
 800a8c0:	4798      	blx	r3
    }

    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800a8c2:	6879      	ldr	r1, [r7, #4]
 800a8c4:	2003      	movs	r0, #3
 800a8c6:	f000 f80f 	bl	800a8e8 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	781b      	ldrb	r3, [r3, #0]
 800a8ce:	2b0a      	cmp	r3, #10
 800a8d0:	d001      	beq.n	800a8d6 <MlmeIndication+0x82>
 800a8d2:	2b0e      	cmp	r3, #14
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800a8d4:	e000      	b.n	800a8d8 <MlmeIndication+0x84>
            break;
 800a8d6:	bf00      	nop
    }
}
 800a8d8:	bf00      	nop
 800a8da:	3708      	adds	r7, #8
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}
 800a8e0:	200000a0 	.word	0x200000a0
 800a8e4:	200009f4 	.word	0x200009f4

0800a8e8 <LmHandlerPackagesNotify>:
        return false;
    }
}

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b084      	sub	sp, #16
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	6039      	str	r1, [r7, #0]
 800a8f2:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	73fb      	strb	r3, [r7, #15]
 800a8f8:	e067      	b.n	800a9ca <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 800a8fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8fe:	4a37      	ldr	r2, [pc, #220]	@ (800a9dc <LmHandlerPackagesNotify+0xf4>)
 800a900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d05a      	beq.n	800a9be <LmHandlerPackagesNotify+0xd6>
        {
            switch( notifyType )
 800a908:	79fb      	ldrb	r3, [r7, #7]
 800a90a:	2b03      	cmp	r3, #3
 800a90c:	d84e      	bhi.n	800a9ac <LmHandlerPackagesNotify+0xc4>
 800a90e:	a201      	add	r2, pc, #4	@ (adr r2, 800a914 <LmHandlerPackagesNotify+0x2c>)
 800a910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a914:	0800a925 	.word	0x0800a925
 800a918:	0800a947 	.word	0x0800a947
 800a91c:	0800a969 	.word	0x0800a969
 800a920:	0800a98b 	.word	0x0800a98b
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800a924:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a928:	4a2c      	ldr	r2, [pc, #176]	@ (800a9dc <LmHandlerPackagesNotify+0xf4>)
 800a92a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a92e:	699b      	ldr	r3, [r3, #24]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d03d      	beq.n	800a9b0 <LmHandlerPackagesNotify+0xc8>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 800a934:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a938:	4a28      	ldr	r2, [pc, #160]	@ (800a9dc <LmHandlerPackagesNotify+0xf4>)
 800a93a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a93e:	699b      	ldr	r3, [r3, #24]
 800a940:	6838      	ldr	r0, [r7, #0]
 800a942:	4798      	blx	r3
                        }
                        break;
 800a944:	e034      	b.n	800a9b0 <LmHandlerPackagesNotify+0xc8>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 800a946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a94a:	4a24      	ldr	r2, [pc, #144]	@ (800a9dc <LmHandlerPackagesNotify+0xf4>)
 800a94c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a950:	69db      	ldr	r3, [r3, #28]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d02e      	beq.n	800a9b4 <LmHandlerPackagesNotify+0xcc>
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 800a956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a95a:	4a20      	ldr	r2, [pc, #128]	@ (800a9dc <LmHandlerPackagesNotify+0xf4>)
 800a95c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a960:	69db      	ldr	r3, [r3, #28]
 800a962:	6838      	ldr	r0, [r7, #0]
 800a964:	4798      	blx	r3
                        }
                        break;
 800a966:	e025      	b.n	800a9b4 <LmHandlerPackagesNotify+0xcc>
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800a968:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a96c:	4a1b      	ldr	r2, [pc, #108]	@ (800a9dc <LmHandlerPackagesNotify+0xf4>)
 800a96e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a972:	6a1b      	ldr	r3, [r3, #32]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d01f      	beq.n	800a9b8 <LmHandlerPackagesNotify+0xd0>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 800a978:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a97c:	4a17      	ldr	r2, [pc, #92]	@ (800a9dc <LmHandlerPackagesNotify+0xf4>)
 800a97e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a982:	6a1b      	ldr	r3, [r3, #32]
 800a984:	6838      	ldr	r0, [r7, #0]
 800a986:	4798      	blx	r3
                        }
                        break;
 800a988:	e016      	b.n	800a9b8 <LmHandlerPackagesNotify+0xd0>
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800a98a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a98e:	4a13      	ldr	r2, [pc, #76]	@ (800a9dc <LmHandlerPackagesNotify+0xf4>)
 800a990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a996:	2b00      	cmp	r3, #0
 800a998:	d010      	beq.n	800a9bc <LmHandlerPackagesNotify+0xd4>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800a99a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a99e:	4a0f      	ldr	r2, [pc, #60]	@ (800a9dc <LmHandlerPackagesNotify+0xf4>)
 800a9a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9a6:	6838      	ldr	r0, [r7, #0]
 800a9a8:	4798      	blx	r3
                        }
                        break;
 800a9aa:	e007      	b.n	800a9bc <LmHandlerPackagesNotify+0xd4>
                    }
                default:
                    {
                        break;
 800a9ac:	bf00      	nop
 800a9ae:	e006      	b.n	800a9be <LmHandlerPackagesNotify+0xd6>
                        break;
 800a9b0:	bf00      	nop
 800a9b2:	e004      	b.n	800a9be <LmHandlerPackagesNotify+0xd6>
                        break;
 800a9b4:	bf00      	nop
 800a9b6:	e002      	b.n	800a9be <LmHandlerPackagesNotify+0xd6>
                        break;
 800a9b8:	bf00      	nop
 800a9ba:	e000      	b.n	800a9be <LmHandlerPackagesNotify+0xd6>
                        break;
 800a9bc:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800a9be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9c2:	b2db      	uxtb	r3, r3
 800a9c4:	3301      	adds	r3, #1
 800a9c6:	b2db      	uxtb	r3, r3
 800a9c8:	73fb      	strb	r3, [r7, #15]
 800a9ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9ce:	2b04      	cmp	r3, #4
 800a9d0:	dd93      	ble.n	800a8fa <LmHandlerPackagesNotify+0x12>
                    }
            }
        }
    }
}
 800a9d2:	bf00      	nop
 800a9d4:	bf00      	nop
 800a9d6:	3710      	adds	r7, #16
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}
 800a9dc:	200009c8 	.word	0x200009c8

0800a9e0 <LmHandlerGetTxPower>:
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b08c      	sub	sp, #48	@ 0x30
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d102      	bne.n	800a9f4 <LmHandlerGetTxPower+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800a9ee:	f04f 33ff 	mov.w	r3, #4294967295
 800a9f2:	e016      	b.n	800aa22 <LmHandlerGetTxPower+0x42>
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 800a9f4:	2321      	movs	r3, #33	@ 0x21
 800a9f6:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800a9f8:	f107 0308 	add.w	r3, r7, #8
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f003 fe5f 	bl	800e6c0 <LoRaMacMibGetRequestConfirm>
 800aa02:	4603      	mov	r3, r0
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d002      	beq.n	800aa0e <LmHandlerGetTxPower+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800aa08:	f04f 33ff 	mov.w	r3, #4294967295
 800aa0c:	e009      	b.n	800aa22 <LmHandlerGetTxPower+0x42>
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 800aa0e:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxPower = *txPower;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	f993 2000 	ldrsb.w	r2, [r3]
 800aa1c:	4b03      	ldr	r3, [pc, #12]	@ (800aa2c <LmHandlerGetTxPower+0x4c>)
 800aa1e:	715a      	strb	r2, [r3, #5]
    return LORAMAC_HANDLER_SUCCESS;
 800aa20:	2300      	movs	r3, #0
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	3730      	adds	r7, #48	@ 0x30
 800aa26:	46bd      	mov	sp, r7
 800aa28:	bd80      	pop	{r7, pc}
 800aa2a:	bf00      	nop
 800aa2c:	200009dc 	.word	0x200009dc

0800aa30 <OnRadioTxDone>:
}RxDoneParams_t;

static RxDoneParams_t RxDoneParams;

static void OnRadioTxDone( void )
{
 800aa30:	b590      	push	{r4, r7, lr}
 800aa32:	b083      	sub	sp, #12
 800aa34:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800aa36:	f00f feb9 	bl	801a7ac <UTIL_TIMER_GetCurrentTime>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	4a0c      	ldr	r2, [pc, #48]	@ (800aa70 <OnRadioTxDone+0x40>)
 800aa3e:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800aa40:	4c0c      	ldr	r4, [pc, #48]	@ (800aa74 <OnRadioTxDone+0x44>)
 800aa42:	463b      	mov	r3, r7
 800aa44:	4618      	mov	r0, r3
 800aa46:	f00f fca5 	bl	801a394 <SysTimeGet>
 800aa4a:	f504 734e 	add.w	r3, r4, #824	@ 0x338
 800aa4e:	463a      	mov	r2, r7
 800aa50:	e892 0003 	ldmia.w	r2, {r0, r1}
 800aa54:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 800aa58:	4a07      	ldr	r2, [pc, #28]	@ (800aa78 <OnRadioTxDone+0x48>)
 800aa5a:	7813      	ldrb	r3, [r2, #0]
 800aa5c:	f043 0320 	orr.w	r3, r3, #32
 800aa60:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800aa62:	f003 fa89 	bl	800df78 <OnMacProcessNotify>
//    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );

}
 800aa66:	bf00      	nop
 800aa68:	370c      	adds	r7, #12
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	bd90      	pop	{r4, r7, pc}
 800aa6e:	bf00      	nop
 800aa70:	20000fd8 	.word	0x20000fd8
 800aa74:	20000a28 	.word	0x20000a28
 800aa78:	20000fd4 	.word	0x20000fd4

0800aa7c <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b084      	sub	sp, #16
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	60f8      	str	r0, [r7, #12]
 800aa84:	4608      	mov	r0, r1
 800aa86:	4611      	mov	r1, r2
 800aa88:	461a      	mov	r2, r3
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	817b      	strh	r3, [r7, #10]
 800aa8e:	460b      	mov	r3, r1
 800aa90:	813b      	strh	r3, [r7, #8]
 800aa92:	4613      	mov	r3, r2
 800aa94:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800aa96:	f00f fe89 	bl	801a7ac <UTIL_TIMER_GetCurrentTime>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	4a11      	ldr	r2, [pc, #68]	@ (800aae4 <OnRadioRxDone+0x68>)
 800aa9e:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800aaa0:	4a10      	ldr	r2, [pc, #64]	@ (800aae4 <OnRadioRxDone+0x68>)
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800aaa6:	4a0f      	ldr	r2, [pc, #60]	@ (800aae4 <OnRadioRxDone+0x68>)
 800aaa8:	897b      	ldrh	r3, [r7, #10]
 800aaaa:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800aaac:	4a0d      	ldr	r2, [pc, #52]	@ (800aae4 <OnRadioRxDone+0x68>)
 800aaae:	893b      	ldrh	r3, [r7, #8]
 800aab0:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800aab2:	4a0c      	ldr	r2, [pc, #48]	@ (800aae4 <OnRadioRxDone+0x68>)
 800aab4:	79fb      	ldrb	r3, [r7, #7]
 800aab6:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800aab8:	4a0b      	ldr	r2, [pc, #44]	@ (800aae8 <OnRadioRxDone+0x6c>)
 800aaba:	7813      	ldrb	r3, [r2, #0]
 800aabc:	f043 0310 	orr.w	r3, r3, #16
 800aac0:	7013      	strb	r3, [r2, #0]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800aac2:	4a09      	ldr	r2, [pc, #36]	@ (800aae8 <OnRadioRxDone+0x6c>)
 800aac4:	7813      	ldrb	r3, [r2, #0]
 800aac6:	f043 0301 	orr.w	r3, r3, #1
 800aaca:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    OnMacProcessNotify( );
 800aacc:	f003 fa54 	bl	800df78 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800aad0:	4b06      	ldr	r3, [pc, #24]	@ (800aaec <OnRadioRxDone+0x70>)
 800aad2:	2201      	movs	r2, #1
 800aad4:	2100      	movs	r1, #0
 800aad6:	2002      	movs	r0, #2
 800aad8:	f00e fef4 	bl	80198c4 <UTIL_ADV_TRACE_COND_FSend>
}
 800aadc:	bf00      	nop
 800aade:	3710      	adds	r7, #16
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd80      	pop	{r7, pc}
 800aae4:	20000fdc 	.word	0x20000fdc
 800aae8:	20000fd4 	.word	0x20000fd4
 800aaec:	08020a84 	.word	0x08020a84

0800aaf0 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800aaf4:	4a07      	ldr	r2, [pc, #28]	@ (800ab14 <OnRadioTxTimeout+0x24>)
 800aaf6:	7813      	ldrb	r3, [r2, #0]
 800aaf8:	f043 0308 	orr.w	r3, r3, #8
 800aafc:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800aafe:	f003 fa3b 	bl	800df78 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800ab02:	4b05      	ldr	r3, [pc, #20]	@ (800ab18 <OnRadioTxTimeout+0x28>)
 800ab04:	2201      	movs	r2, #1
 800ab06:	2100      	movs	r1, #0
 800ab08:	2002      	movs	r0, #2
 800ab0a:	f00e fedb 	bl	80198c4 <UTIL_ADV_TRACE_COND_FSend>

}
 800ab0e:	bf00      	nop
 800ab10:	bd80      	pop	{r7, pc}
 800ab12:	bf00      	nop
 800ab14:	20000fd4 	.word	0x20000fd4
 800ab18:	08020a94 	.word	0x08020a94

0800ab1c <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800ab20:	4a04      	ldr	r2, [pc, #16]	@ (800ab34 <OnRadioRxError+0x18>)
 800ab22:	7813      	ldrb	r3, [r2, #0]
 800ab24:	f043 0304 	orr.w	r3, r3, #4
 800ab28:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800ab2a:	f003 fa25 	bl	800df78 <OnMacProcessNotify>
}
 800ab2e:	bf00      	nop
 800ab30:	bd80      	pop	{r7, pc}
 800ab32:	bf00      	nop
 800ab34:	20000fd4 	.word	0x20000fd4

0800ab38 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800ab3c:	4a07      	ldr	r2, [pc, #28]	@ (800ab5c <OnRadioRxTimeout+0x24>)
 800ab3e:	7813      	ldrb	r3, [r2, #0]
 800ab40:	f043 0302 	orr.w	r3, r3, #2
 800ab44:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800ab46:	f003 fa17 	bl	800df78 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800ab4a:	4b05      	ldr	r3, [pc, #20]	@ (800ab60 <OnRadioRxTimeout+0x28>)
 800ab4c:	2201      	movs	r2, #1
 800ab4e:	2100      	movs	r1, #0
 800ab50:	2002      	movs	r0, #2
 800ab52:	f00e feb7 	bl	80198c4 <UTIL_ADV_TRACE_COND_FSend>
}
 800ab56:	bf00      	nop
 800ab58:	bd80      	pop	{r7, pc}
 800ab5a:	bf00      	nop
 800ab5c:	20000fd4 	.word	0x20000fd4
 800ab60:	08020aa4 	.word	0x08020aa4

0800ab64 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800ab64:	b480      	push	{r7}
 800ab66:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800ab68:	4b08      	ldr	r3, [pc, #32]	@ (800ab8c <UpdateRxSlotIdleState+0x28>)
 800ab6a:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800ab6e:	2b02      	cmp	r3, #2
 800ab70:	d004      	beq.n	800ab7c <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800ab72:	4b07      	ldr	r3, [pc, #28]	@ (800ab90 <UpdateRxSlotIdleState+0x2c>)
 800ab74:	2206      	movs	r2, #6
 800ab76:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800ab7a:	e003      	b.n	800ab84 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800ab7c:	4b04      	ldr	r3, [pc, #16]	@ (800ab90 <UpdateRxSlotIdleState+0x2c>)
 800ab7e:	2202      	movs	r2, #2
 800ab80:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
}
 800ab84:	bf00      	nop
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bc80      	pop	{r7}
 800ab8a:	4770      	bx	lr
 800ab8c:	20008000 	.word	0x20008000
 800ab90:	20000a28 	.word	0x20000a28

0800ab94 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b092      	sub	sp, #72	@ 0x48
 800ab98:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800ab9a:	4b54      	ldr	r3, [pc, #336]	@ (800acec <ProcessRadioTxDone+0x158>)
 800ab9c:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800aba0:	2b02      	cmp	r3, #2
 800aba2:	d002      	beq.n	800abaa <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800aba4:	4b52      	ldr	r3, [pc, #328]	@ (800acf0 <ProcessRadioTxDone+0x15c>)
 800aba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aba8:	4798      	blx	r3
    TimerStart( &MacCtx.RxWindowTimer1 );
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
    TimerStart( &MacCtx.RxWindowTimer2 );
    CRITICAL_SECTION_END( );
#else
    if (Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE)
 800abaa:	4b50      	ldr	r3, [pc, #320]	@ (800acec <ProcessRadioTxDone+0x158>)
 800abac:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d12b      	bne.n	800ac0c <ProcessRadioTxDone+0x78>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800abb4:	f3ef 8310 	mrs	r3, PRIMASK
 800abb8:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800abba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    {
        // Setup timers
        CRITICAL_SECTION_BEGIN( );
 800abbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
 800abbe:	b672      	cpsid	i
}
 800abc0:	bf00      	nop
        uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 800abc2:	f00f fdf3 	bl	801a7ac <UTIL_TIMER_GetCurrentTime>
 800abc6:	4602      	mov	r2, r0
 800abc8:	4b4a      	ldr	r3, [pc, #296]	@ (800acf4 <ProcessRadioTxDone+0x160>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	1ad3      	subs	r3, r2, r3
 800abce:	63bb      	str	r3, [r7, #56]	@ 0x38
        TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 800abd0:	4b49      	ldr	r3, [pc, #292]	@ (800acf8 <ProcessRadioTxDone+0x164>)
 800abd2:	f8d3 23b0 	ldr.w	r2, [r3, #944]	@ 0x3b0
 800abd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abd8:	1ad3      	subs	r3, r2, r3
 800abda:	4619      	mov	r1, r3
 800abdc:	4847      	ldr	r0, [pc, #284]	@ (800acfc <ProcessRadioTxDone+0x168>)
 800abde:	f00f fdbb 	bl	801a758 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RxWindowTimer1 );
 800abe2:	4846      	ldr	r0, [pc, #280]	@ (800acfc <ProcessRadioTxDone+0x168>)
 800abe4:	f00f fcda 	bl	801a59c <UTIL_TIMER_Start>
        TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 800abe8:	4b43      	ldr	r3, [pc, #268]	@ (800acf8 <ProcessRadioTxDone+0x164>)
 800abea:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 800abee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abf0:	1ad3      	subs	r3, r2, r3
 800abf2:	4619      	mov	r1, r3
 800abf4:	4842      	ldr	r0, [pc, #264]	@ (800ad00 <ProcessRadioTxDone+0x16c>)
 800abf6:	f00f fdaf 	bl	801a758 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RxWindowTimer2 );
 800abfa:	4841      	ldr	r0, [pc, #260]	@ (800ad00 <ProcessRadioTxDone+0x16c>)
 800abfc:	f00f fcce 	bl	801a59c <UTIL_TIMER_Start>
 800ac00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac02:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac06:	f383 8810 	msr	PRIMASK, r3
}
 800ac0a:	e00e      	b.n	800ac2a <ProcessRadioTxDone+0x96>
        CRITICAL_SECTION_END( );
    }
    else
    {
        MacCtx.MacState |= LORAMAC_RX_ABORT;
 800ac0c:	4b3a      	ldr	r3, [pc, #232]	@ (800acf8 <ProcessRadioTxDone+0x164>)
 800ac0e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800ac12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac16:	4a38      	ldr	r2, [pc, #224]	@ (800acf8 <ProcessRadioTxDone+0x164>)
 800ac18:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        MacCtx.MacFlags.Bits.MacDone = 1;
 800ac1c:	4a36      	ldr	r2, [pc, #216]	@ (800acf8 <ProcessRadioTxDone+0x164>)
 800ac1e:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800ac22:	f043 0310 	orr.w	r3, r3, #16
 800ac26:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
        TimerStart( &MacCtx.AckTimeoutTimer );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.NodeAckRequested == true )
 800ac2a:	4b33      	ldr	r3, [pc, #204]	@ (800acf8 <ProcessRadioTxDone+0x164>)
 800ac2c:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d01a      	beq.n	800ac6a <ProcessRadioTxDone+0xd6>
    {
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 800ac34:	2315      	movs	r3, #21
 800ac36:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ac3a:	4b2c      	ldr	r3, [pc, #176]	@ (800acec <ProcessRadioTxDone+0x158>)
 800ac3c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ac40:	f107 0220 	add.w	r2, r7, #32
 800ac44:	4611      	mov	r1, r2
 800ac46:	4618      	mov	r0, r3
 800ac48:	f006 fe39 	bl	80118be <RegionGetPhyParam>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800ac50:	4b29      	ldr	r3, [pc, #164]	@ (800acf8 <ProcessRadioTxDone+0x164>)
 800ac52:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 800ac56:	69fb      	ldr	r3, [r7, #28]
 800ac58:	4413      	add	r3, r2
 800ac5a:	4619      	mov	r1, r3
 800ac5c:	4829      	ldr	r0, [pc, #164]	@ (800ad04 <ProcessRadioTxDone+0x170>)
 800ac5e:	f00f fd7b 	bl	801a758 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 800ac62:	4828      	ldr	r0, [pc, #160]	@ (800ad04 <ProcessRadioTxDone+0x170>)
 800ac64:	f00f fc9a 	bl	801a59c <UTIL_TIMER_Start>
 800ac68:	e003      	b.n	800ac72 <ProcessRadioTxDone+0xde>
    }
    else
    {
        // Transmission successful, setup status directly
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800ac6a:	4b23      	ldr	r3, [pc, #140]	@ (800acf8 <ProcessRadioTxDone+0x164>)
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800ac72:	4b20      	ldr	r3, [pc, #128]	@ (800acf4 <ProcessRadioTxDone+0x160>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	4a1d      	ldr	r2, [pc, #116]	@ (800acec <ProcessRadioTxDone+0x158>)
 800ac78:	62d3      	str	r3, [r2, #44]	@ 0x2c

     //Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800ac7a:	4b1f      	ldr	r3, [pc, #124]	@ (800acf8 <ProcessRadioTxDone+0x164>)
 800ac7c:	f893 341b 	ldrb.w	r3, [r3, #1051]	@ 0x41b
 800ac80:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800ac82:	4b1c      	ldr	r3, [pc, #112]	@ (800acf4 <ProcessRadioTxDone+0x160>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800ac88:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f00f fbb9 	bl	801a404 <SysTimeGetMcuTime>
 800ac92:	4638      	mov	r0, r7
 800ac94:	4b15      	ldr	r3, [pc, #84]	@ (800acec <ProcessRadioTxDone+0x158>)
 800ac96:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
 800ac9a:	9200      	str	r2, [sp, #0]
 800ac9c:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800aca0:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800aca4:	ca06      	ldmia	r2, {r1, r2}
 800aca6:	f00f fb0e 	bl	801a2c6 <SysTimeSub>
 800acaa:	f107 0314 	add.w	r3, r7, #20
 800acae:	463a      	mov	r2, r7
 800acb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800acb4:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800acb8:	4b0f      	ldr	r3, [pc, #60]	@ (800acf8 <ProcessRadioTxDone+0x164>)
 800acba:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 800acbe:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800acc0:	2301      	movs	r3, #1
 800acc2:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800acc4:	4b09      	ldr	r3, [pc, #36]	@ (800acec <ProcessRadioTxDone+0x158>)
 800acc6:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800acca:	2b00      	cmp	r3, #0
 800accc:	d101      	bne.n	800acd2 <ProcessRadioTxDone+0x13e>
    {
        txDone.Joined  = false;
 800acce:	2300      	movs	r3, #0
 800acd0:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800acd2:	4b06      	ldr	r3, [pc, #24]	@ (800acec <ProcessRadioTxDone+0x158>)
 800acd4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800acd8:	f107 0208 	add.w	r2, r7, #8
 800acdc:	4611      	mov	r1, r2
 800acde:	4618      	mov	r0, r3
 800ace0:	f006 fe0e 	bl	8011900 <RegionSetBandTxDone>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */

}
 800ace4:	bf00      	nop
 800ace6:	3740      	adds	r7, #64	@ 0x40
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}
 800acec:	20008000 	.word	0x20008000
 800acf0:	0802146c 	.word	0x0802146c
 800acf4:	20000fd8 	.word	0x20000fd8
 800acf8:	20000a28 	.word	0x20000a28
 800acfc:	20000da8 	.word	0x20000da8
 800ad00:	20000dc0 	.word	0x20000dc0
 800ad04:	20000e28 	.word	0x20000e28

0800ad08 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800ad0c:	4b10      	ldr	r3, [pc, #64]	@ (800ad50 <PrepareRxDoneAbort+0x48>)
 800ad0e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800ad12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad16:	4a0e      	ldr	r2, [pc, #56]	@ (800ad50 <PrepareRxDoneAbort+0x48>)
 800ad18:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    if( MacCtx.NodeAckRequested == true )
 800ad1c:	4b0c      	ldr	r3, [pc, #48]	@ (800ad50 <PrepareRxDoneAbort+0x48>)
 800ad1e:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d002      	beq.n	800ad2c <PrepareRxDoneAbort+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        OnRetransmitTimeoutTimerEvent( NULL );
 800ad26:	2000      	movs	r0, #0
 800ad28:	f001 f9fa 	bl	800c120 <OnRetransmitTimeoutTimerEvent>
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800ad2c:	4a08      	ldr	r2, [pc, #32]	@ (800ad50 <PrepareRxDoneAbort+0x48>)
 800ad2e:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800ad32:	f043 0302 	orr.w	r3, r3, #2
 800ad36:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    MacCtx.MacFlags.Bits.MacDone = 1;
 800ad3a:	4a05      	ldr	r2, [pc, #20]	@ (800ad50 <PrepareRxDoneAbort+0x48>)
 800ad3c:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800ad40:	f043 0310 	orr.w	r3, r3, #16
 800ad44:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491

    UpdateRxSlotIdleState( );
 800ad48:	f7ff ff0c 	bl	800ab64 <UpdateRxSlotIdleState>
}
 800ad4c:	bf00      	nop
 800ad4e:	bd80      	pop	{r7, pc}
 800ad50:	20000a28 	.word	0x20000a28

0800ad54 <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800ad54:	b590      	push	{r4, r7, lr}
 800ad56:	b0ab      	sub	sp, #172	@ 0xac
 800ad58:	af02      	add	r7, sp, #8
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800ad5a:	2312      	movs	r3, #18
 800ad5c:	f887 3098 	strb.w	r3, [r7, #152]	@ 0x98

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800ad60:	4b81      	ldr	r3, [pc, #516]	@ (800af68 <ProcessRadioRxDone+0x214>)
 800ad62:	685b      	ldr	r3, [r3, #4]
 800ad64:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    uint16_t size = RxDoneParams.Size;
 800ad68:	4b7f      	ldr	r3, [pc, #508]	@ (800af68 <ProcessRadioRxDone+0x214>)
 800ad6a:	891b      	ldrh	r3, [r3, #8]
 800ad6c:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
    int16_t rssi = RxDoneParams.Rssi;
 800ad70:	4b7d      	ldr	r3, [pc, #500]	@ (800af68 <ProcessRadioRxDone+0x214>)
 800ad72:	895b      	ldrh	r3, [r3, #10]
 800ad74:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
    int8_t snr = RxDoneParams.Snr;
 800ad78:	4b7b      	ldr	r3, [pc, #492]	@ (800af68 <ProcessRadioRxDone+0x214>)
 800ad7a:	7b1b      	ldrb	r3, [r3, #12]
 800ad7c:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f

    uint8_t pktHeaderLen = 0;
 800ad80:	2300      	movs	r3, #0
 800ad82:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e

    uint32_t downLinkCounter = 0;
 800ad86:	2300      	movs	r3, #0
 800ad88:	617b      	str	r3, [r7, #20]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800ad8a:	4b78      	ldr	r3, [pc, #480]	@ (800af6c <ProcessRadioRxDone+0x218>)
 800ad8c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ad90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    uint8_t multicast = 0;
 800ad94:	2300      	movs	r3, #0
 800ad96:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800ad9a:	2301      	movs	r3, #1
 800ad9c:	f887 309a 	strb.w	r3, [r7, #154]	@ 0x9a
    FCntIdentifier_t fCntID;
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    uint8_t macCmdPayload[2] = { 0 };
#endif /* LORAMAC_VERSION */
    Mlme_t joinType = MLME_JOIN;
 800ada0:	2301      	movs	r3, #1
 800ada2:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 800ada6:	4a72      	ldr	r2, [pc, #456]	@ (800af70 <ProcessRadioRxDone+0x21c>)
 800ada8:	7813      	ldrb	r3, [r2, #0]
 800adaa:	f023 0301 	bic.w	r3, r3, #1
 800adae:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800adb0:	4b70      	ldr	r3, [pc, #448]	@ (800af74 <ProcessRadioRxDone+0x220>)
 800adb2:	2200      	movs	r2, #0
 800adb4:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444
    MacCtx.RxStatus.Rssi = rssi;
 800adb8:	4a6e      	ldr	r2, [pc, #440]	@ (800af74 <ProcessRadioRxDone+0x220>)
 800adba:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800adbe:	f8a2 348c 	strh.w	r3, [r2, #1164]	@ 0x48c
    MacCtx.RxStatus.Snr = snr;
 800adc2:	4a6c      	ldr	r2, [pc, #432]	@ (800af74 <ProcessRadioRxDone+0x220>)
 800adc4:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800adc8:	f882 348e 	strb.w	r3, [r2, #1166]	@ 0x48e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800adcc:	4b69      	ldr	r3, [pc, #420]	@ (800af74 <ProcessRadioRxDone+0x220>)
 800adce:	f893 2490 	ldrb.w	r2, [r3, #1168]	@ 0x490
 800add2:	4b68      	ldr	r3, [pc, #416]	@ (800af74 <ProcessRadioRxDone+0x220>)
 800add4:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
    MacCtx.McpsIndication.Port = 0;
 800add8:	4b66      	ldr	r3, [pc, #408]	@ (800af74 <ProcessRadioRxDone+0x220>)
 800adda:	2200      	movs	r2, #0
 800addc:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
    MacCtx.McpsIndication.Multicast = 0;
 800ade0:	4b64      	ldr	r3, [pc, #400]	@ (800af74 <ProcessRadioRxDone+0x220>)
 800ade2:	2200      	movs	r2, #0
 800ade4:	f883 2422 	strb.w	r2, [r3, #1058]	@ 0x422
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 800ade8:	4b62      	ldr	r3, [pc, #392]	@ (800af74 <ProcessRadioRxDone+0x220>)
 800adea:	2200      	movs	r2, #0
 800adec:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 800adf0:	4b60      	ldr	r3, [pc, #384]	@ (800af74 <ProcessRadioRxDone+0x220>)
 800adf2:	2200      	movs	r2, #0
 800adf4:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 800adf8:	4b5e      	ldr	r3, [pc, #376]	@ (800af74 <ProcessRadioRxDone+0x220>)
 800adfa:	2200      	movs	r2, #0
 800adfc:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
    MacCtx.McpsIndication.RxData = false;
 800ae00:	4b5c      	ldr	r3, [pc, #368]	@ (800af74 <ProcessRadioRxDone+0x220>)
 800ae02:	2200      	movs	r2, #0
 800ae04:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
    MacCtx.McpsIndication.AckReceived = false;
 800ae08:	4b5a      	ldr	r3, [pc, #360]	@ (800af74 <ProcessRadioRxDone+0x220>)
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	f883 242e 	strb.w	r2, [r3, #1070]	@ 0x42e
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800ae10:	4b58      	ldr	r3, [pc, #352]	@ (800af74 <ProcessRadioRxDone+0x220>)
 800ae12:	2200      	movs	r2, #0
 800ae14:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800ae18:	4b56      	ldr	r3, [pc, #344]	@ (800af74 <ProcessRadioRxDone+0x220>)
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 800ae20:	4b54      	ldr	r3, [pc, #336]	@ (800af74 <ProcessRadioRxDone+0x220>)
 800ae22:	2200      	movs	r2, #0
 800ae24:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800ae28:	4b52      	ldr	r3, [pc, #328]	@ (800af74 <ProcessRadioRxDone+0x220>)
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.McpsIndication.ResponseTimeout = 0;
 800ae30:	4b50      	ldr	r3, [pc, #320]	@ (800af74 <ProcessRadioRxDone+0x220>)
 800ae32:	2200      	movs	r2, #0
 800ae34:	f8c3 243c 	str.w	r2, [r3, #1084]	@ 0x43c
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800ae38:	4b4f      	ldr	r3, [pc, #316]	@ (800af78 <ProcessRadioRxDone+0x224>)
 800ae3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae3c:	4798      	blx	r3

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800ae3e:	4b4d      	ldr	r3, [pc, #308]	@ (800af74 <ProcessRadioRxDone+0x220>)
 800ae40:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d102      	bne.n	800ae4e <ProcessRadioRxDone+0xfa>
    {
        TimerStop( &MacCtx.RxWindowTimer2 );
 800ae48:	484c      	ldr	r0, [pc, #304]	@ (800af7c <ProcessRadioRxDone+0x228>)
 800ae4a:	f00f fc15 	bl	801a678 <UTIL_TIMER_Stop>
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800ae4e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800ae52:	4619      	mov	r1, r3
 800ae54:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800ae58:	f004 fdae 	bl	800f9b8 <LoRaMacClassBRxBeacon>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d00b      	beq.n	800ae7a <ProcessRadioRxDone+0x126>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800ae62:	4a44      	ldr	r2, [pc, #272]	@ (800af74 <ProcessRadioRxDone+0x220>)
 800ae64:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800ae68:	f8a2 347e 	strh.w	r3, [r2, #1150]	@ 0x47e
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800ae6c:	4a41      	ldr	r2, [pc, #260]	@ (800af74 <ProcessRadioRxDone+0x220>)
 800ae6e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800ae72:	f882 3480 	strb.w	r3, [r2, #1152]	@ 0x480
        return;
 800ae76:	f000 bc75 	b.w	800b764 <ProcessRadioRxDone+0xa10>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800ae7a:	4b3c      	ldr	r3, [pc, #240]	@ (800af6c <ProcessRadioRxDone+0x218>)
 800ae7c:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800ae80:	2b01      	cmp	r3, #1
 800ae82:	d11e      	bne.n	800aec2 <ProcessRadioRxDone+0x16e>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800ae84:	f004 fdab 	bl	800f9de <LoRaMacClassBIsPingExpected>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d00a      	beq.n	800aea4 <ProcessRadioRxDone+0x150>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ae8e:	2000      	movs	r0, #0
 800ae90:	f004 fd5c 	bl	800f94c <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800ae94:	2000      	movs	r0, #0
 800ae96:	f004 fd7d 	bl	800f994 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800ae9a:	4b36      	ldr	r3, [pc, #216]	@ (800af74 <ProcessRadioRxDone+0x220>)
 800ae9c:	2204      	movs	r2, #4
 800ae9e:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
 800aea2:	e00e      	b.n	800aec2 <ProcessRadioRxDone+0x16e>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800aea4:	f004 fda2 	bl	800f9ec <LoRaMacClassBIsMulticastExpected>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d009      	beq.n	800aec2 <ProcessRadioRxDone+0x16e>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800aeae:	2000      	movs	r0, #0
 800aeb0:	f004 fd56 	bl	800f960 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800aeb4:	2000      	movs	r0, #0
 800aeb6:	f004 fd76 	bl	800f9a6 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800aeba:	4b2e      	ldr	r3, [pc, #184]	@ (800af74 <ProcessRadioRxDone+0x220>)
 800aebc:	2205      	movs	r2, #5
 800aebe:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
        }
    }

    // Abort on empty radio frames
    if( size == 0 )
 800aec2:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d107      	bne.n	800aeda <ProcessRadioRxDone+0x186>
    {
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800aeca:	4b2a      	ldr	r3, [pc, #168]	@ (800af74 <ProcessRadioRxDone+0x220>)
 800aecc:	2201      	movs	r2, #1
 800aece:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
        PrepareRxDoneAbort( );
 800aed2:	f7ff ff19 	bl	800ad08 <PrepareRxDoneAbort>
        return;
 800aed6:	f000 bc45 	b.w	800b764 <ProcessRadioRxDone+0xa10>
    }

    macHdr.Value = payload[pktHeaderLen++];
 800aeda:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800aede:	1c5a      	adds	r2, r3, #1
 800aee0:	f887 208e 	strb.w	r2, [r7, #142]	@ 0x8e
 800aee4:	461a      	mov	r2, r3
 800aee6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800aeea:	4413      	add	r3, r2
 800aeec:	781b      	ldrb	r3, [r3, #0]
 800aeee:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
        PrepareRxDoneAbort( );
        return;
    }
#endif /* LORAMAC_VERSION */

    switch( macHdr.Bits.MType )
 800aef2:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800aef6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800aefa:	b2db      	uxtb	r3, r3
 800aefc:	3b01      	subs	r3, #1
 800aefe:	2b06      	cmp	r3, #6
 800af00:	f200 8403 	bhi.w	800b70a <ProcessRadioRxDone+0x9b6>
 800af04:	a201      	add	r2, pc, #4	@ (adr r2, 800af0c <ProcessRadioRxDone+0x1b8>)
 800af06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af0a:	bf00      	nop
 800af0c:	0800af29 	.word	0x0800af29
 800af10:	0800b70b 	.word	0x0800b70b
 800af14:	0800b127 	.word	0x0800b127
 800af18:	0800b70b 	.word	0x0800b70b
 800af1c:	0800b11f 	.word	0x0800b11f
 800af20:	0800b70b 	.word	0x0800b70b
 800af24:	0800b6af 	.word	0x0800b6af
    {
        case FRAME_TYPE_JOIN_ACCEPT:
        {
            uint8_t joinEui[SE_EUI_SIZE];
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800af28:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800af2c:	2b10      	cmp	r3, #16
 800af2e:	d807      	bhi.n	800af40 <ProcessRadioRxDone+0x1ec>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800af30:	4b10      	ldr	r3, [pc, #64]	@ (800af74 <ProcessRadioRxDone+0x220>)
 800af32:	2201      	movs	r2, #1
 800af34:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800af38:	f7ff fee6 	bl	800ad08 <PrepareRxDoneAbort>
                return;
 800af3c:	f000 bc12 	b.w	800b764 <ProcessRadioRxDone+0xa10>
            }
            macMsgJoinAccept.Buffer = payload;
 800af40:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800af44:	61bb      	str	r3, [r7, #24]
            macMsgJoinAccept.BufSize = size;
 800af46:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800af4a:	b2db      	uxtb	r3, r3
 800af4c:	773b      	strb	r3, [r7, #28]

            // Abort in case if the device is already joined and no rejoin request is ongoing.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
#else
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800af4e:	4b07      	ldr	r3, [pc, #28]	@ (800af6c <ProcessRadioRxDone+0x218>)
 800af50:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800af54:	2b00      	cmp	r3, #0
 800af56:	d013      	beq.n	800af80 <ProcessRadioRxDone+0x22c>
#endif /* LORAMAC_VERSION */
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800af58:	4b06      	ldr	r3, [pc, #24]	@ (800af74 <ProcessRadioRxDone+0x220>)
 800af5a:	2201      	movs	r2, #1
 800af5c:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800af60:	f7ff fed2 	bl	800ad08 <PrepareRxDoneAbort>
                return;
 800af64:	e3fe      	b.n	800b764 <ProcessRadioRxDone+0xa10>
 800af66:	bf00      	nop
 800af68:	20000fdc 	.word	0x20000fdc
 800af6c:	20008000 	.word	0x20008000
 800af70:	20000fd4 	.word	0x20000fd4
 800af74:	20000a28 	.word	0x20000a28
 800af78:	0802146c 	.word	0x0802146c
 800af7c:	20000dc0 	.word	0x20000dc0
            }

            SecureElementGetJoinEui( joinEui );
 800af80:	f107 0308 	add.w	r3, r7, #8
 800af84:	4618      	mov	r0, r3
 800af86:	f00b feb7 	bl	8016cf8 <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 800af8a:	f107 0218 	add.w	r2, r7, #24
 800af8e:	f107 0308 	add.w	r3, r7, #8
 800af92:	4619      	mov	r1, r3
 800af94:	20ff      	movs	r0, #255	@ 0xff
 800af96:	f005 ff17 	bl	8010dc8 <LoRaMacCryptoHandleJoinAccept>
 800af9a:	4603      	mov	r3, r0
 800af9c:	f887 3098 	strb.w	r3, [r7, #152]	@ 0x98
                joinType = MLME_REJOIN_2;
            }
#endif /* LORAMAC_VERSION */

            VerifyParams_t verifyRxDr;
            bool rxDrValid = false;
 800afa0:	2300      	movs	r3, #0
 800afa2:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800afa6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800afaa:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800afae:	b2db      	uxtb	r3, r3
 800afb0:	b25b      	sxtb	r3, r3
 800afb2:	713b      	strb	r3, [r7, #4]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800afb4:	4bb1      	ldr	r3, [pc, #708]	@ (800b27c <ProcessRadioRxDone+0x528>)
 800afb6:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800afba:	717b      	strb	r3, [r7, #5]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 800afbc:	4baf      	ldr	r3, [pc, #700]	@ (800b27c <ProcessRadioRxDone+0x528>)
 800afbe:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800afc2:	1d39      	adds	r1, r7, #4
 800afc4:	2207      	movs	r2, #7
 800afc6:	4618      	mov	r0, r3
 800afc8:	f006 fcc7 	bl	801195a <RegionVerify>
 800afcc:	4603      	mov	r3, r0
 800afce:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c

            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 800afd2:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	f040 8095 	bne.w	800b106 <ProcessRadioRxDone+0x3b2>
 800afdc:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	f000 8090 	beq.w	800b106 <ProcessRadioRxDone+0x3b2>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800afe6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800afea:	461a      	mov	r2, r3
 800afec:	4ba3      	ldr	r3, [pc, #652]	@ (800b27c <ProcessRadioRxDone+0x528>)
 800afee:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800aff2:	4ba2      	ldr	r3, [pc, #648]	@ (800b27c <ProcessRadioRxDone+0x528>)
 800aff4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800aff8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800affc:	021b      	lsls	r3, r3, #8
 800affe:	4313      	orrs	r3, r2
 800b000:	4a9e      	ldr	r2, [pc, #632]	@ (800b27c <ProcessRadioRxDone+0x528>)
 800b002:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800b006:	4b9d      	ldr	r3, [pc, #628]	@ (800b27c <ProcessRadioRxDone+0x528>)
 800b008:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800b00c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b010:	041b      	lsls	r3, r3, #16
 800b012:	4313      	orrs	r3, r2
 800b014:	4a99      	ldr	r2, [pc, #612]	@ (800b27c <ProcessRadioRxDone+0x528>)
 800b016:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800b01a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b01c:	4a97      	ldr	r2, [pc, #604]	@ (800b27c <ProcessRadioRxDone+0x528>)
 800b01e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                // Update NVM DevAddrOTAA with network value
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 800b022:	4b96      	ldr	r3, [pc, #600]	@ (800b27c <ProcessRadioRxDone+0x528>)
 800b024:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800b028:	4619      	mov	r1, r3
 800b02a:	2002      	movs	r0, #2
 800b02c:	f00b fe4a 	bl	8016cc4 <SecureElementSetDevAddr>

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800b030:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b034:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800b038:	b2db      	uxtb	r3, r3
 800b03a:	461a      	mov	r2, r3
 800b03c:	4b8f      	ldr	r3, [pc, #572]	@ (800b27c <ProcessRadioRxDone+0x528>)
 800b03e:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800b042:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b046:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800b04a:	b2db      	uxtb	r3, r3
 800b04c:	461a      	mov	r2, r3
 800b04e:	4b8b      	ldr	r3, [pc, #556]	@ (800b27c <ProcessRadioRxDone+0x528>)
 800b050:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800b054:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b058:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800b05c:	b2db      	uxtb	r3, r3
 800b05e:	461a      	mov	r2, r3
 800b060:	4b86      	ldr	r3, [pc, #536]	@ (800b27c <ProcessRadioRxDone+0x528>)
 800b062:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800b066:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800b06a:	461a      	mov	r2, r3
 800b06c:	4b83      	ldr	r3, [pc, #524]	@ (800b27c <ProcessRadioRxDone+0x528>)
 800b06e:	659a      	str	r2, [r3, #88]	@ 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800b070:	4b82      	ldr	r3, [pc, #520]	@ (800b27c <ProcessRadioRxDone+0x528>)
 800b072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b074:	2b00      	cmp	r3, #0
 800b076:	d102      	bne.n	800b07e <ProcessRadioRxDone+0x32a>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800b078:	4b80      	ldr	r3, [pc, #512]	@ (800b27c <ProcessRadioRxDone+0x528>)
 800b07a:	2201      	movs	r2, #1
 800b07c:	659a      	str	r2, [r3, #88]	@ 0x58
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800b07e:	4b7f      	ldr	r3, [pc, #508]	@ (800b27c <ProcessRadioRxDone+0x528>)
 800b080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b082:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800b086:	fb02 f303 	mul.w	r3, r2, r3
 800b08a:	4a7c      	ldr	r2, [pc, #496]	@ (800b27c <ProcessRadioRxDone+0x528>)
 800b08c:	6593      	str	r3, [r2, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800b08e:	4b7b      	ldr	r3, [pc, #492]	@ (800b27c <ProcessRadioRxDone+0x528>)
 800b090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b092:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800b096:	4a79      	ldr	r2, [pc, #484]	@ (800b27c <ProcessRadioRxDone+0x528>)
 800b098:	65d3      	str	r3, [r2, #92]	@ 0x5c

                // Reset NbTrans to default value
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 800b09a:	4b78      	ldr	r3, [pc, #480]	@ (800b27c <ProcessRadioRxDone+0x528>)
 800b09c:	2201      	movs	r2, #1
 800b09e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                else
                {
                    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
                }
#else
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800b0a2:	4b76      	ldr	r3, [pc, #472]	@ (800b27c <ProcessRadioRxDone+0x528>)
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	f883 212e 	strb.w	r2, [r3, #302]	@ 0x12e
#endif /* LORAMAC_VERSION */

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800b0aa:	f107 0318 	add.w	r3, r7, #24
 800b0ae:	3312      	adds	r3, #18
 800b0b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800b0b4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800b0b8:	b2db      	uxtb	r3, r3
 800b0ba:	3b11      	subs	r3, #17
 800b0bc:	b2db      	uxtb	r3, r3
 800b0be:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
 800b0c2:	4b6f      	ldr	r3, [pc, #444]	@ (800b280 <ProcessRadioRxDone+0x52c>)
 800b0c4:	f893 341b 	ldrb.w	r3, [r3, #1051]	@ 0x41b
 800b0c8:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800b0cc:	4b6b      	ldr	r3, [pc, #428]	@ (800b27c <ProcessRadioRxDone+0x528>)
 800b0ce:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800b0d2:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 800b0d6:	4611      	mov	r1, r2
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f006 fc5f 	bl	801199c <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800b0de:	4b67      	ldr	r3, [pc, #412]	@ (800b27c <ProcessRadioRxDone+0x528>)
 800b0e0:	2202      	movs	r2, #2
 800b0e2:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
                }
#endif /* LORAMAC_VERSION */

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800b0e6:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f005 f97a 	bl	80103e4 <LoRaMacConfirmQueueIsCmdActive>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	f000 8311 	beq.w	800b71a <ProcessRadioRxDone+0x9c6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 800b0f8:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800b0fc:	4619      	mov	r1, r3
 800b0fe:	2000      	movs	r0, #0
 800b100:	f005 f8e4 	bl	80102cc <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800b104:	e309      	b.n	800b71a <ProcessRadioRxDone+0x9c6>
#endif /* LORAMAC_VERSION */
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800b106:	2001      	movs	r0, #1
 800b108:	f005 f96c 	bl	80103e4 <LoRaMacConfirmQueueIsCmdActive>
 800b10c:	4603      	mov	r3, r0
 800b10e:	2b00      	cmp	r3, #0
 800b110:	f000 8302 	beq.w	800b718 <ProcessRadioRxDone+0x9c4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800b114:	2101      	movs	r1, #1
 800b116:	2007      	movs	r0, #7
 800b118:	f005 f8d8 	bl	80102cc <LoRaMacConfirmQueueSetStatus>
                }
            }

            break;
 800b11c:	e2fc      	b.n	800b718 <ProcessRadioRxDone+0x9c4>
        }
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800b11e:	4b58      	ldr	r3, [pc, #352]	@ (800b280 <ProcessRadioRxDone+0x52c>)
 800b120:	2201      	movs	r2, #1
 800b122:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b126:	4b55      	ldr	r3, [pc, #340]	@ (800b27c <ProcessRadioRxDone+0x528>)
 800b128:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800b12c:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800b130:	4b53      	ldr	r3, [pc, #332]	@ (800b280 <ProcessRadioRxDone+0x52c>)
 800b132:	f893 3424 	ldrb.w	r3, [r3, #1060]	@ 0x424
 800b136:	b25b      	sxtb	r3, r3
 800b138:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800b13c:	230d      	movs	r3, #13
 800b13e:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74

            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800b142:	4b4e      	ldr	r3, [pc, #312]	@ (800b27c <ProcessRadioRxDone+0x528>)
 800b144:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d002      	beq.n	800b152 <ProcessRadioRxDone+0x3fe>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800b14c:	230e      	movs	r3, #14
 800b14e:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
            }

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b152:	4b4a      	ldr	r3, [pc, #296]	@ (800b27c <ProcessRadioRxDone+0x528>)
 800b154:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800b158:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 800b15c:	4611      	mov	r1, r2
 800b15e:	4618      	mov	r0, r3
 800b160:	f006 fbad 	bl	80118be <RegionGetPhyParam>
 800b164:	4603      	mov	r3, r0
 800b166:	673b      	str	r3, [r7, #112]	@ 0x70
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800b168:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800b16c:	3b0d      	subs	r3, #13
 800b16e:	b29b      	uxth	r3, r3
 800b170:	b21b      	sxth	r3, r3
 800b172:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b176:	b21a      	sxth	r2, r3
 800b178:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b17a:	b21b      	sxth	r3, r3
 800b17c:	429a      	cmp	r2, r3
 800b17e:	dc03      	bgt.n	800b188 <ProcessRadioRxDone+0x434>
 800b180:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800b184:	2b0b      	cmp	r3, #11
 800b186:	d806      	bhi.n	800b196 <ProcessRadioRxDone+0x442>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b188:	4b3d      	ldr	r3, [pc, #244]	@ (800b280 <ProcessRadioRxDone+0x52c>)
 800b18a:	2201      	movs	r2, #1
 800b18c:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800b190:	f7ff fdba 	bl	800ad08 <PrepareRxDoneAbort>
                return;
 800b194:	e2e6      	b.n	800b764 <ProcessRadioRxDone+0xa10>
            }
            macMsgData.Buffer = payload;
 800b196:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800b19a:	643b      	str	r3, [r7, #64]	@ 0x40
            macMsgData.BufSize = size;
 800b19c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800b1a0:	b2db      	uxtb	r3, r3
 800b1a2:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800b1a6:	4b37      	ldr	r3, [pc, #220]	@ (800b284 <ProcessRadioRxDone+0x530>)
 800b1a8:	667b      	str	r3, [r7, #100]	@ 0x64
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800b1aa:	23ff      	movs	r3, #255	@ 0xff
 800b1ac:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800b1b0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	f006 f904 	bl	80113c2 <LoRaMacParserData>
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d006      	beq.n	800b1ce <ProcessRadioRxDone+0x47a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b1c0:	4b2f      	ldr	r3, [pc, #188]	@ (800b280 <ProcessRadioRxDone+0x52c>)
 800b1c2:	2201      	movs	r2, #1
 800b1c4:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800b1c8:	f7ff fd9e 	bl	800ad08 <PrepareRxDoneAbort>
                return;
 800b1cc:	e2ca      	b.n	800b764 <ProcessRadioRxDone+0xa10>
            }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Handle Class B
            // Check if we expect a ping or a multicast slot.
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800b1ce:	4b2b      	ldr	r3, [pc, #172]	@ (800b27c <ProcessRadioRxDone+0x528>)
 800b1d0:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800b1d4:	2b01      	cmp	r3, #1
 800b1d6:	d132      	bne.n	800b23e <ProcessRadioRxDone+0x4ea>
            {
                if( LoRaMacClassBIsPingExpected( ) == true )
 800b1d8:	f004 fc01 	bl	800f9de <LoRaMacClassBIsPingExpected>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d014      	beq.n	800b20c <ProcessRadioRxDone+0x4b8>
                {
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800b1e2:	2000      	movs	r0, #0
 800b1e4:	f004 fbb2 	bl	800f94c <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 800b1e8:	2000      	movs	r0, #0
 800b1ea:	f004 fbd3 	bl	800f994 <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800b1ee:	4b24      	ldr	r3, [pc, #144]	@ (800b280 <ProcessRadioRxDone+0x52c>)
 800b1f0:	2204      	movs	r2, #4
 800b1f2:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800b1f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b1f8:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800b1fc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800b200:	b2db      	uxtb	r3, r3
 800b202:	4619      	mov	r1, r3
 800b204:	4610      	mov	r0, r2
 800b206:	f004 fc73 	bl	800faf0 <LoRaMacClassBSetFPendingBit>
 800b20a:	e018      	b.n	800b23e <ProcessRadioRxDone+0x4ea>
                }
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800b20c:	f004 fbee 	bl	800f9ec <LoRaMacClassBIsMulticastExpected>
 800b210:	4603      	mov	r3, r0
 800b212:	2b00      	cmp	r3, #0
 800b214:	d013      	beq.n	800b23e <ProcessRadioRxDone+0x4ea>
                {
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800b216:	2000      	movs	r0, #0
 800b218:	f004 fba2 	bl	800f960 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800b21c:	2000      	movs	r0, #0
 800b21e:	f004 fbc2 	bl	800f9a6 <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800b222:	4b17      	ldr	r3, [pc, #92]	@ (800b280 <ProcessRadioRxDone+0x52c>)
 800b224:	2205      	movs	r2, #5
 800b226:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800b22a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b22c:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800b230:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800b234:	b2db      	uxtb	r3, r3
 800b236:	4619      	mov	r1, r3
 800b238:	4610      	mov	r0, r2
 800b23a:	f004 fc59 	bl	800faf0 <LoRaMacClassBSetFPendingBit>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800b23e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b240:	4a0f      	ldr	r2, [pc, #60]	@ (800b280 <ProcessRadioRxDone+0x52c>)
 800b242:	f8c2 3434 	str.w	r3, [r2, #1076]	@ 0x434

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800b246:	f107 0212 	add.w	r2, r7, #18
 800b24a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800b24e:	4611      	mov	r1, r2
 800b250:	4618      	mov	r0, r3
 800b252:	f002 fd8d 	bl	800dd70 <DetermineFrameType>
 800b256:	4603      	mov	r3, r0
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d006      	beq.n	800b26a <ProcessRadioRxDone+0x516>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b25c:	4b08      	ldr	r3, [pc, #32]	@ (800b280 <ProcessRadioRxDone+0x52c>)
 800b25e:	2201      	movs	r2, #1
 800b260:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800b264:	f7ff fd50 	bl	800ad08 <PrepareRxDoneAbort>
                return;
 800b268:	e27c      	b.n	800b764 <ProcessRadioRxDone+0xa10>
            }

            //Check if it is a multicast message
            multicast = 0;
 800b26a:	2300      	movs	r3, #0
 800b26c:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
            downLinkCounter = 0;
 800b270:	2300      	movs	r3, #0
 800b272:	617b      	str	r3, [r7, #20]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800b274:	2300      	movs	r3, #0
 800b276:	f887 3099 	strb.w	r3, [r7, #153]	@ 0x99
 800b27a:	e055      	b.n	800b328 <ProcessRadioRxDone+0x5d4>
 800b27c:	20008000 	.word	0x20008000
 800b280:	20000a28 	.word	0x20000a28
 800b284:	20000c60 	.word	0x20000c60
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800b288:	f897 2099 	ldrb.w	r2, [r7, #153]	@ 0x99
 800b28c:	499f      	ldr	r1, [pc, #636]	@ (800b50c <ProcessRadioRxDone+0x7b8>)
 800b28e:	4613      	mov	r3, r2
 800b290:	005b      	lsls	r3, r3, #1
 800b292:	4413      	add	r3, r2
 800b294:	011b      	lsls	r3, r3, #4
 800b296:	440b      	add	r3, r1
 800b298:	33ec      	adds	r3, #236	@ 0xec
 800b29a:	681a      	ldr	r2, [r3, #0]
 800b29c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b29e:	429a      	cmp	r2, r3
 800b2a0:	d13d      	bne.n	800b31e <ProcessRadioRxDone+0x5ca>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800b2a2:	f897 2099 	ldrb.w	r2, [r7, #153]	@ 0x99
 800b2a6:	4999      	ldr	r1, [pc, #612]	@ (800b50c <ProcessRadioRxDone+0x7b8>)
 800b2a8:	4613      	mov	r3, r2
 800b2aa:	005b      	lsls	r3, r3, #1
 800b2ac:	4413      	add	r3, r2
 800b2ae:	011b      	lsls	r3, r3, #4
 800b2b0:	440b      	add	r3, r1
 800b2b2:	33e9      	adds	r3, #233	@ 0xe9
 800b2b4:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d031      	beq.n	800b31e <ProcessRadioRxDone+0x5ca>
                {
                    multicast = 1;
 800b2ba:	2301      	movs	r3, #1
 800b2bc:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800b2c0:	f897 2099 	ldrb.w	r2, [r7, #153]	@ 0x99
 800b2c4:	4991      	ldr	r1, [pc, #580]	@ (800b50c <ProcessRadioRxDone+0x7b8>)
 800b2c6:	4613      	mov	r3, r2
 800b2c8:	005b      	lsls	r3, r3, #1
 800b2ca:	4413      	add	r3, r2
 800b2cc:	011b      	lsls	r3, r3, #4
 800b2ce:	440b      	add	r3, r1
 800b2d0:	33ea      	adds	r3, #234	@ 0xea
 800b2d2:	781b      	ldrb	r3, [r3, #0]
 800b2d4:	f887 309a 	strb.w	r3, [r7, #154]	@ 0x9a
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800b2d8:	f897 2099 	ldrb.w	r2, [r7, #153]	@ 0x99
 800b2dc:	498b      	ldr	r1, [pc, #556]	@ (800b50c <ProcessRadioRxDone+0x7b8>)
 800b2de:	4613      	mov	r3, r2
 800b2e0:	005b      	lsls	r3, r3, #1
 800b2e2:	4413      	add	r3, r2
 800b2e4:	011b      	lsls	r3, r3, #4
 800b2e6:	440b      	add	r3, r1
 800b2e8:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	617b      	str	r3, [r7, #20]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800b2f2:	f897 2099 	ldrb.w	r2, [r7, #153]	@ 0x99
 800b2f6:	4985      	ldr	r1, [pc, #532]	@ (800b50c <ProcessRadioRxDone+0x7b8>)
 800b2f8:	4613      	mov	r3, r2
 800b2fa:	005b      	lsls	r3, r3, #1
 800b2fc:	4413      	add	r3, r2
 800b2fe:	011b      	lsls	r3, r3, #4
 800b300:	440b      	add	r3, r1
 800b302:	33ec      	adds	r3, #236	@ 0xec
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800b30a:	4b80      	ldr	r3, [pc, #512]	@ (800b50c <ProcessRadioRxDone+0x7b8>)
 800b30c:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800b310:	2b02      	cmp	r3, #2
 800b312:	d10e      	bne.n	800b332 <ProcessRadioRxDone+0x5de>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800b314:	4b7e      	ldr	r3, [pc, #504]	@ (800b510 <ProcessRadioRxDone+0x7bc>)
 800b316:	2203      	movs	r2, #3
 800b318:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    }
                    break;
 800b31c:	e009      	b.n	800b332 <ProcessRadioRxDone+0x5de>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800b31e:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
 800b322:	3301      	adds	r3, #1
 800b324:	f887 3099 	strb.w	r3, [r7, #153]	@ 0x99
 800b328:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d0ab      	beq.n	800b288 <ProcessRadioRxDone+0x534>
 800b330:	e000      	b.n	800b334 <ProcessRadioRxDone+0x5e0>
                    break;
 800b332:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800b334:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 800b338:	2b01      	cmp	r3, #1
 800b33a:	d117      	bne.n	800b36c <ProcessRadioRxDone+0x618>
 800b33c:	7cbb      	ldrb	r3, [r7, #18]
 800b33e:	2b03      	cmp	r3, #3
 800b340:	d10d      	bne.n	800b35e <ProcessRadioRxDone+0x60a>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800b342:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800b346:	f003 0320 	and.w	r3, r3, #32
 800b34a:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d106      	bne.n	800b35e <ProcessRadioRxDone+0x60a>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800b350:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800b354:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b358:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d006      	beq.n	800b36c <ProcessRadioRxDone+0x618>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b35e:	4b6c      	ldr	r3, [pc, #432]	@ (800b510 <ProcessRadioRxDone+0x7bc>)
 800b360:	2201      	movs	r2, #1
 800b362:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800b366:	f7ff fccf 	bl	800ad08 <PrepareRxDoneAbort>
                return;
 800b36a:	e1fb      	b.n	800b764 <ProcessRadioRxDone+0xa10>
                PrepareRxDoneAbort( );
                return;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 800b36c:	7cb9      	ldrb	r1, [r7, #18]
 800b36e:	4c67      	ldr	r4, [pc, #412]	@ (800b50c <ProcessRadioRxDone+0x7b8>)
 800b370:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800b374:	f897 009a 	ldrb.w	r0, [r7, #154]	@ 0x9a
 800b378:	f107 0314 	add.w	r3, r7, #20
 800b37c:	9301      	str	r3, [sp, #4]
 800b37e:	f107 0313 	add.w	r3, r7, #19
 800b382:	9300      	str	r3, [sp, #0]
 800b384:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
 800b388:	f000 fee4 	bl	800c154 <GetFCntDown>
 800b38c:	4603      	mov	r3, r0
 800b38e:	f887 3098 	strb.w	r3, [r7, #152]	@ 0x98
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800b392:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800b396:	2b00      	cmp	r3, #0
 800b398:	d017      	beq.n	800b3ca <ProcessRadioRxDone+0x676>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800b39a:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800b39e:	2b07      	cmp	r3, #7
 800b3a0:	d104      	bne.n	800b3ac <ProcessRadioRxDone+0x658>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800b3a2:	4b5b      	ldr	r3, [pc, #364]	@ (800b510 <ProcessRadioRxDone+0x7bc>)
 800b3a4:	2208      	movs	r2, #8
 800b3a6:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
 800b3aa:	e003      	b.n	800b3b4 <ProcessRadioRxDone+0x660>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b3ac:	4b58      	ldr	r3, [pc, #352]	@ (800b510 <ProcessRadioRxDone+0x7bc>)
 800b3ae:	2201      	movs	r2, #1
 800b3b0:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800b3b4:	697b      	ldr	r3, [r7, #20]
 800b3b6:	4a56      	ldr	r2, [pc, #344]	@ (800b510 <ProcessRadioRxDone+0x7bc>)
 800b3b8:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800b3bc:	697b      	ldr	r3, [r7, #20]
 800b3be:	4a54      	ldr	r2, [pc, #336]	@ (800b510 <ProcessRadioRxDone+0x7bc>)
 800b3c0:	f8c2 346c 	str.w	r3, [r2, #1132]	@ 0x46c
                PrepareRxDoneAbort( );
 800b3c4:	f7ff fca0 	bl	800ad08 <PrepareRxDoneAbort>
                return;
 800b3c8:	e1cc      	b.n	800b764 <ProcessRadioRxDone+0xa10>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800b3ca:	7cfa      	ldrb	r2, [r7, #19]
 800b3cc:	6979      	ldr	r1, [r7, #20]
 800b3ce:	f897 009a 	ldrb.w	r0, [r7, #154]	@ 0x9a
 800b3d2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800b3d6:	9300      	str	r3, [sp, #0]
 800b3d8:	460b      	mov	r3, r1
 800b3da:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 800b3de:	f005 fe53 	bl	8011088 <LoRaMacCryptoUnsecureMessage>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	f887 3098 	strb.w	r3, [r7, #152]	@ 0x98
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800b3e8:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d00f      	beq.n	800b410 <ProcessRadioRxDone+0x6bc>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800b3f0:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800b3f4:	2b02      	cmp	r3, #2
 800b3f6:	d104      	bne.n	800b402 <ProcessRadioRxDone+0x6ae>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800b3f8:	4b45      	ldr	r3, [pc, #276]	@ (800b510 <ProcessRadioRxDone+0x7bc>)
 800b3fa:	220a      	movs	r2, #10
 800b3fc:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
 800b400:	e003      	b.n	800b40a <ProcessRadioRxDone+0x6b6>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800b402:	4b43      	ldr	r3, [pc, #268]	@ (800b510 <ProcessRadioRxDone+0x7bc>)
 800b404:	220b      	movs	r2, #11
 800b406:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                }
                PrepareRxDoneAbort( );
 800b40a:	f7ff fc7d 	bl	800ad08 <PrepareRxDoneAbort>
                return;
 800b40e:	e1a9      	b.n	800b764 <ProcessRadioRxDone+0xa10>
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800b410:	4b3f      	ldr	r3, [pc, #252]	@ (800b510 <ProcessRadioRxDone+0x7bc>)
 800b412:	2200      	movs	r2, #0
 800b414:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
            MacCtx.McpsIndication.Multicast = multicast;
 800b418:	4a3d      	ldr	r2, [pc, #244]	@ (800b510 <ProcessRadioRxDone+0x7bc>)
 800b41a:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 800b41e:	f882 3422 	strb.w	r3, [r2, #1058]	@ 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 800b422:	4b3b      	ldr	r3, [pc, #236]	@ (800b510 <ProcessRadioRxDone+0x7bc>)
 800b424:	2200      	movs	r2, #0
 800b426:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 800b42a:	4b39      	ldr	r3, [pc, #228]	@ (800b510 <ProcessRadioRxDone+0x7bc>)
 800b42c:	2200      	movs	r2, #0
 800b42e:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	4a36      	ldr	r2, [pc, #216]	@ (800b510 <ProcessRadioRxDone+0x7bc>)
 800b436:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800b43a:	697b      	ldr	r3, [r7, #20]
 800b43c:	4a34      	ldr	r2, [pc, #208]	@ (800b510 <ProcessRadioRxDone+0x7bc>)
 800b43e:	f8c2 346c 	str.w	r3, [r2, #1132]	@ 0x46c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800b442:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800b446:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b44a:	b2db      	uxtb	r3, r3
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	bf14      	ite	ne
 800b450:	2301      	movne	r3, #1
 800b452:	2300      	moveq	r3, #0
 800b454:	b2da      	uxtb	r2, r3
 800b456:	4b2e      	ldr	r3, [pc, #184]	@ (800b510 <ProcessRadioRxDone+0x7bc>)
 800b458:	f883 242e 	strb.w	r2, [r3, #1070]	@ 0x42e

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800b45c:	4b2c      	ldr	r3, [pc, #176]	@ (800b510 <ProcessRadioRxDone+0x7bc>)
 800b45e:	2200      	movs	r2, #0
 800b460:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800b464:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800b468:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b46c:	b2db      	uxtb	r3, r3
 800b46e:	2b00      	cmp	r3, #0
 800b470:	bf14      	ite	ne
 800b472:	2301      	movne	r3, #1
 800b474:	2300      	moveq	r3, #0
 800b476:	b2da      	uxtb	r2, r3
 800b478:	4b25      	ldr	r3, [pc, #148]	@ (800b510 <ProcessRadioRxDone+0x7bc>)
 800b47a:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800b47e:	4b24      	ldr	r3, [pc, #144]	@ (800b510 <ProcessRadioRxDone+0x7bc>)
 800b480:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800b484:	2b00      	cmp	r3, #0
 800b486:	d004      	beq.n	800b492 <ProcessRadioRxDone+0x73e>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800b488:	4b21      	ldr	r3, [pc, #132]	@ (800b510 <ProcessRadioRxDone+0x7bc>)
 800b48a:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800b48e:	2b01      	cmp	r3, #1
 800b490:	d106      	bne.n	800b4a0 <ProcessRadioRxDone+0x74c>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800b492:	4b1e      	ldr	r3, [pc, #120]	@ (800b50c <ProcessRadioRxDone+0x7b8>)
 800b494:	2200      	movs	r2, #0
 800b496:	629a      	str	r2, [r3, #40]	@ 0x28
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                Nvm.MacGroup2.DownlinkReceived = true;
 800b498:	4b1c      	ldr	r3, [pc, #112]	@ (800b50c <ProcessRadioRxDone+0x7b8>)
 800b49a:	2201      	movs	r2, #1
 800b49c:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800b4a0:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 800b4a4:	2b01      	cmp	r3, #1
 800b4a6:	d104      	bne.n	800b4b2 <ProcessRadioRxDone+0x75e>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800b4a8:	4b19      	ldr	r3, [pc, #100]	@ (800b510 <ProcessRadioRxDone+0x7bc>)
 800b4aa:	2202      	movs	r2, #2
 800b4ac:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
 800b4b0:	e03a      	b.n	800b528 <ProcessRadioRxDone+0x7d4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800b4b2:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800b4b6:	f023 031f 	bic.w	r3, r3, #31
 800b4ba:	b2db      	uxtb	r3, r3
 800b4bc:	2ba0      	cmp	r3, #160	@ 0xa0
 800b4be:	d12b      	bne.n	800b518 <ProcessRadioRxDone+0x7c4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800b4c0:	4b12      	ldr	r3, [pc, #72]	@ (800b50c <ProcessRadioRxDone+0x7b8>)
 800b4c2:	2201      	movs	r2, #1
 800b4c4:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800b4c8:	4b10      	ldr	r3, [pc, #64]	@ (800b50c <ProcessRadioRxDone+0x7b8>)
 800b4ca:	f893 312e 	ldrb.w	r3, [r3, #302]	@ 0x12e
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d102      	bne.n	800b4d8 <ProcessRadioRxDone+0x784>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800b4d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b4d4:	4a0d      	ldr	r2, [pc, #52]	@ (800b50c <ProcessRadioRxDone+0x7b8>)
 800b4d6:	6353      	str	r3, [r2, #52]	@ 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800b4d8:	4b0d      	ldr	r3, [pc, #52]	@ (800b510 <ProcessRadioRxDone+0x7bc>)
 800b4da:	2201      	movs	r2, #1
 800b4dc:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // Handle response timeout for class c and class b downlinks
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800b4e0:	4b0b      	ldr	r3, [pc, #44]	@ (800b510 <ProcessRadioRxDone+0x7bc>)
 800b4e2:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d01e      	beq.n	800b528 <ProcessRadioRxDone+0x7d4>
                        ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) )
 800b4ea:	4b09      	ldr	r3, [pc, #36]	@ (800b510 <ProcessRadioRxDone+0x7bc>)
 800b4ec:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800b4f0:	2b01      	cmp	r3, #1
 800b4f2:	d019      	beq.n	800b528 <ProcessRadioRxDone+0x7d4>
                    {
                        // Calculate timeout
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800b4f4:	4b05      	ldr	r3, [pc, #20]	@ (800b50c <ProcessRadioRxDone+0x7b8>)
 800b4f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b4fa:	4a05      	ldr	r2, [pc, #20]	@ (800b510 <ProcessRadioRxDone+0x7bc>)
 800b4fc:	f8c2 343c 	str.w	r3, [r2, #1084]	@ 0x43c
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 800b500:	4b04      	ldr	r3, [pc, #16]	@ (800b514 <ProcessRadioRxDone+0x7c0>)
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	4a02      	ldr	r2, [pc, #8]	@ (800b510 <ProcessRadioRxDone+0x7bc>)
 800b506:	f8c2 3498 	str.w	r3, [r2, #1176]	@ 0x498
 800b50a:	e00d      	b.n	800b528 <ProcessRadioRxDone+0x7d4>
 800b50c:	20008000 	.word	0x20008000
 800b510:	20000a28 	.word	0x20000a28
 800b514:	20000fdc 	.word	0x20000fdc
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800b518:	4b94      	ldr	r3, [pc, #592]	@ (800b76c <ProcessRadioRxDone+0xa18>)
 800b51a:	2200      	movs	r2, #0
 800b51c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800b520:	4b93      	ldr	r3, [pc, #588]	@ (800b770 <ProcessRadioRxDone+0xa1c>)
 800b522:	2200      	movs	r2, #0
 800b524:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
            }

            // Set the pending status
            /* if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
                ( MacCtx.McpsIndication.ResponseTimeout > 0 ) ) */
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 800b528:	4b90      	ldr	r3, [pc, #576]	@ (800b76c <ProcessRadioRxDone+0xa18>)
 800b52a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d106      	bne.n	800b540 <ProcessRadioRxDone+0x7ec>
 800b532:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800b536:	f003 0310 	and.w	r3, r3, #16
 800b53a:	b2db      	uxtb	r3, r3
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d008      	beq.n	800b552 <ProcessRadioRxDone+0x7fe>
 800b540:	4b8a      	ldr	r3, [pc, #552]	@ (800b76c <ProcessRadioRxDone+0xa18>)
 800b542:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800b546:	2b00      	cmp	r3, #0
 800b548:	d103      	bne.n	800b552 <ProcessRadioRxDone+0x7fe>
            {
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 800b54a:	4b89      	ldr	r3, [pc, #548]	@ (800b770 <ProcessRadioRxDone+0xa1c>)
 800b54c:	2201      	movs	r2, #1
 800b54e:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800b552:	4b87      	ldr	r3, [pc, #540]	@ (800b770 <ProcessRadioRxDone+0xa1c>)
 800b554:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800b558:	4a85      	ldr	r2, [pc, #532]	@ (800b770 <ProcessRadioRxDone+0xa1c>)
 800b55a:	f892 2440 	ldrb.w	r2, [r2, #1088]	@ 0x440
 800b55e:	f897 104c 	ldrb.w	r1, [r7, #76]	@ 0x4c
 800b562:	4618      	mov	r0, r3
 800b564:	f001 ff98 	bl	800d498 <RemoveMacCommands>

            switch( fType )
 800b568:	7cbb      	ldrb	r3, [r7, #18]
 800b56a:	2b03      	cmp	r3, #3
 800b56c:	d873      	bhi.n	800b656 <ProcessRadioRxDone+0x902>
 800b56e:	a201      	add	r2, pc, #4	@ (adr r2, 800b574 <ProcessRadioRxDone+0x820>)
 800b570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b574:	0800b585 	.word	0x0800b585
 800b578:	0800b5d5 	.word	0x0800b5d5
 800b57c:	0800b60b 	.word	0x0800b60b
 800b580:	0800b631 	.word	0x0800b631
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800b584:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800b588:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800b58c:	b2db      	uxtb	r3, r3
 800b58e:	461c      	mov	r4, r3
 800b590:	4b77      	ldr	r3, [pc, #476]	@ (800b770 <ProcessRadioRxDone+0xa1c>)
 800b592:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800b596:	f997 108f 	ldrsb.w	r1, [r7, #143]	@ 0x8f
 800b59a:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800b59e:	f102 0010 	add.w	r0, r2, #16
 800b5a2:	9300      	str	r3, [sp, #0]
 800b5a4:	460b      	mov	r3, r1
 800b5a6:	4622      	mov	r2, r4
 800b5a8:	2100      	movs	r1, #0
 800b5aa:	f000 ff4f 	bl	800c44c <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800b5ae:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 800b5b2:	4b6f      	ldr	r3, [pc, #444]	@ (800b770 <ProcessRadioRxDone+0xa1c>)
 800b5b4:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800b5b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b5ba:	4a6d      	ldr	r2, [pc, #436]	@ (800b770 <ProcessRadioRxDone+0xa1c>)
 800b5bc:	f8c2 3428 	str.w	r3, [r2, #1064]	@ 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800b5c0:	f897 2068 	ldrb.w	r2, [r7, #104]	@ 0x68
 800b5c4:	4b6a      	ldr	r3, [pc, #424]	@ (800b770 <ProcessRadioRxDone+0xa1c>)
 800b5c6:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
                    MacCtx.McpsIndication.RxData = true;
 800b5ca:	4b69      	ldr	r3, [pc, #420]	@ (800b770 <ProcessRadioRxDone+0xa1c>)
 800b5cc:	2201      	movs	r2, #1
 800b5ce:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
                    break;
 800b5d2:	e047      	b.n	800b664 <ProcessRadioRxDone+0x910>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800b5d4:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800b5d8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800b5dc:	b2db      	uxtb	r3, r3
 800b5de:	461c      	mov	r4, r3
 800b5e0:	4b63      	ldr	r3, [pc, #396]	@ (800b770 <ProcessRadioRxDone+0xa1c>)
 800b5e2:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800b5e6:	f997 108f 	ldrsb.w	r1, [r7, #143]	@ 0x8f
 800b5ea:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800b5ee:	f102 0010 	add.w	r0, r2, #16
 800b5f2:	9300      	str	r3, [sp, #0]
 800b5f4:	460b      	mov	r3, r1
 800b5f6:	4622      	mov	r2, r4
 800b5f8:	2100      	movs	r1, #0
 800b5fa:	f000 ff27 	bl	800c44c <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800b5fe:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 800b602:	4b5b      	ldr	r3, [pc, #364]	@ (800b770 <ProcessRadioRxDone+0xa1c>)
 800b604:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    break;
 800b608:	e02c      	b.n	800b664 <ProcessRadioRxDone+0x910>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800b60a:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800b60c:	f897 2068 	ldrb.w	r2, [r7, #104]	@ 0x68
 800b610:	4b57      	ldr	r3, [pc, #348]	@ (800b770 <ProcessRadioRxDone+0xa1c>)
 800b612:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800b616:	f997 108f 	ldrsb.w	r1, [r7, #143]	@ 0x8f
 800b61a:	9300      	str	r3, [sp, #0]
 800b61c:	460b      	mov	r3, r1
 800b61e:	2100      	movs	r1, #0
 800b620:	f000 ff14 	bl	800c44c <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800b624:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 800b628:	4b51      	ldr	r3, [pc, #324]	@ (800b770 <ProcessRadioRxDone+0xa1c>)
 800b62a:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    break;
 800b62e:	e019      	b.n	800b664 <ProcessRadioRxDone+0x910>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800b630:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 800b634:	4b4e      	ldr	r3, [pc, #312]	@ (800b770 <ProcessRadioRxDone+0xa1c>)
 800b636:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800b63a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b63c:	4a4c      	ldr	r2, [pc, #304]	@ (800b770 <ProcessRadioRxDone+0xa1c>)
 800b63e:	f8c2 3428 	str.w	r3, [r2, #1064]	@ 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800b642:	f897 2068 	ldrb.w	r2, [r7, #104]	@ 0x68
 800b646:	4b4a      	ldr	r3, [pc, #296]	@ (800b770 <ProcessRadioRxDone+0xa1c>)
 800b648:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
                    MacCtx.McpsIndication.RxData = true;
 800b64c:	4b48      	ldr	r3, [pc, #288]	@ (800b770 <ProcessRadioRxDone+0xa1c>)
 800b64e:	2201      	movs	r2, #1
 800b650:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
                    break;
 800b654:	e006      	b.n	800b664 <ProcessRadioRxDone+0x910>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b656:	4b46      	ldr	r3, [pc, #280]	@ (800b770 <ProcessRadioRxDone+0xa1c>)
 800b658:	2201      	movs	r2, #1
 800b65a:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                    PrepareRxDoneAbort( );
 800b65e:	f7ff fb53 	bl	800ad08 <PrepareRxDoneAbort>
                    break;
 800b662:	bf00      	nop
                }
            }
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800b664:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 800b668:	2be0      	cmp	r3, #224	@ 0xe0
 800b66a:	d118      	bne.n	800b69e <ProcessRadioRxDone+0x94a>
 800b66c:	4b3f      	ldr	r3, [pc, #252]	@ (800b76c <ProcessRadioRxDone+0xa18>)
 800b66e:	f893 311f 	ldrb.w	r3, [r3, #287]	@ 0x11f
 800b672:	f083 0301 	eor.w	r3, r3, #1
 800b676:	b2db      	uxtb	r3, r3
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d010      	beq.n	800b69e <ProcessRadioRxDone+0x94a>
            { // Do not notify the upper layer of data reception on FPort LORAMAC_CERT_FPORT if the port
              // handling is disabled.
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 800b67c:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 800b680:	4b3b      	ldr	r3, [pc, #236]	@ (800b770 <ProcessRadioRxDone+0xa1c>)
 800b682:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                MacCtx.McpsIndication.Buffer = NULL;
 800b686:	4b3a      	ldr	r3, [pc, #232]	@ (800b770 <ProcessRadioRxDone+0xa1c>)
 800b688:	2200      	movs	r2, #0
 800b68a:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
                MacCtx.McpsIndication.BufferSize = 0;
 800b68e:	4b38      	ldr	r3, [pc, #224]	@ (800b770 <ProcessRadioRxDone+0xa1c>)
 800b690:	2200      	movs	r2, #0
 800b692:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
                MacCtx.McpsIndication.RxData = false;
 800b696:	4b36      	ldr	r3, [pc, #216]	@ (800b770 <ProcessRadioRxDone+0xa1c>)
 800b698:	2200      	movs	r2, #0
 800b69a:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800b69e:	4a34      	ldr	r2, [pc, #208]	@ (800b770 <ProcessRadioRxDone+0xa1c>)
 800b6a0:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800b6a4:	f043 0302 	orr.w	r3, r3, #2
 800b6a8:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491

            break;
 800b6ac:	e035      	b.n	800b71a <ProcessRadioRxDone+0x9c6>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800b6ae:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800b6b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b6b6:	18d1      	adds	r1, r2, r3
 800b6b8:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800b6bc:	b29b      	uxth	r3, r3
 800b6be:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800b6c2:	1ad3      	subs	r3, r2, r3
 800b6c4:	b29b      	uxth	r3, r3
 800b6c6:	461a      	mov	r2, r3
 800b6c8:	482a      	ldr	r0, [pc, #168]	@ (800b774 <ProcessRadioRxDone+0xa20>)
 800b6ca:	f00b fb96 	bl	8016dfa <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800b6ce:	4b28      	ldr	r3, [pc, #160]	@ (800b770 <ProcessRadioRxDone+0xa1c>)
 800b6d0:	2203      	movs	r2, #3
 800b6d2:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800b6d6:	4b26      	ldr	r3, [pc, #152]	@ (800b770 <ProcessRadioRxDone+0xa1c>)
 800b6d8:	2200      	movs	r2, #0
 800b6da:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800b6de:	4b24      	ldr	r3, [pc, #144]	@ (800b770 <ProcessRadioRxDone+0xa1c>)
 800b6e0:	4a24      	ldr	r2, [pc, #144]	@ (800b774 <ProcessRadioRxDone+0xa20>)
 800b6e2:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800b6e6:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800b6ea:	b2da      	uxtb	r2, r3
 800b6ec:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800b6f0:	1ad3      	subs	r3, r2, r3
 800b6f2:	b2da      	uxtb	r2, r3
 800b6f4:	4b1e      	ldr	r3, [pc, #120]	@ (800b770 <ProcessRadioRxDone+0xa1c>)
 800b6f6:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800b6fa:	4a1d      	ldr	r2, [pc, #116]	@ (800b770 <ProcessRadioRxDone+0xa1c>)
 800b6fc:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800b700:	f043 0302 	orr.w	r3, r3, #2
 800b704:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
            break;
 800b708:	e007      	b.n	800b71a <ProcessRadioRxDone+0x9c6>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b70a:	4b19      	ldr	r3, [pc, #100]	@ (800b770 <ProcessRadioRxDone+0xa1c>)
 800b70c:	2201      	movs	r2, #1
 800b70e:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
            PrepareRxDoneAbort( );
 800b712:	f7ff faf9 	bl	800ad08 <PrepareRxDoneAbort>
            break;
 800b716:	e000      	b.n	800b71a <ProcessRadioRxDone+0x9c6>
            break;
 800b718:	bf00      	nop
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Verify if we need to disable the RetransmitTimeoutTimer
    // Only applies if downlink is received on Rx1 or Rx2 windows.
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800b71a:	4b15      	ldr	r3, [pc, #84]	@ (800b770 <ProcessRadioRxDone+0xa1c>)
 800b71c:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800b720:	2b00      	cmp	r3, #0
 800b722:	d004      	beq.n	800b72e <ProcessRadioRxDone+0x9da>
        ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800b724:	4b12      	ldr	r3, [pc, #72]	@ (800b770 <ProcessRadioRxDone+0xa1c>)
 800b726:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800b72a:	2b01      	cmp	r3, #1
 800b72c:	d10c      	bne.n	800b748 <ProcessRadioRxDone+0x9f4>
    {
        if( MacCtx.NodeAckRequested == true )
 800b72e:	4b10      	ldr	r3, [pc, #64]	@ (800b770 <ProcessRadioRxDone+0xa1c>)
 800b730:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800b734:	2b00      	cmp	r3, #0
 800b736:	d007      	beq.n	800b748 <ProcessRadioRxDone+0x9f4>
        {
            if( MacCtx.McpsConfirm.AckReceived == true )
 800b738:	4b0d      	ldr	r3, [pc, #52]	@ (800b770 <ProcessRadioRxDone+0xa1c>)
 800b73a:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d002      	beq.n	800b748 <ProcessRadioRxDone+0x9f4>
            {
                OnRetransmitTimeoutTimerEvent( NULL );
 800b742:	2000      	movs	r0, #0
 800b744:	f000 fcec 	bl	800c120 <OnRetransmitTimeoutTimerEvent>
            }
        }
    }

    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 800b748:	4b09      	ldr	r3, [pc, #36]	@ (800b770 <ProcessRadioRxDone+0xa1c>)
 800b74a:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800b74e:	2b02      	cmp	r3, #2
 800b750:	d006      	beq.n	800b760 <ProcessRadioRxDone+0xa0c>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800b752:	4a07      	ldr	r2, [pc, #28]	@ (800b770 <ProcessRadioRxDone+0xa1c>)
 800b754:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800b758:	f043 0310 	orr.w	r3, r3, #16
 800b75c:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 800b760:	f7ff fa00 	bl	800ab64 <UpdateRxSlotIdleState>
}
 800b764:	37a4      	adds	r7, #164	@ 0xa4
 800b766:	46bd      	mov	sp, r7
 800b768:	bd90      	pop	{r4, r7, pc}
 800b76a:	bf00      	nop
 800b76c:	20008000 	.word	0x20008000
 800b770:	20000a28 	.word	0x20000a28
 800b774:	20000c60 	.word	0x20000c60

0800b778 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800b77c:	4b11      	ldr	r3, [pc, #68]	@ (800b7c4 <ProcessRadioTxTimeout+0x4c>)
 800b77e:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800b782:	2b02      	cmp	r3, #2
 800b784:	d002      	beq.n	800b78c <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800b786:	4b10      	ldr	r3, [pc, #64]	@ (800b7c8 <ProcessRadioTxTimeout+0x50>)
 800b788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b78a:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800b78c:	f7ff f9ea 	bl	800ab64 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800b790:	4b0e      	ldr	r3, [pc, #56]	@ (800b7cc <ProcessRadioTxTimeout+0x54>)
 800b792:	2202      	movs	r2, #2
 800b794:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800b798:	2002      	movs	r0, #2
 800b79a:	f004 fdef 	bl	801037c <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800b79e:	4b0b      	ldr	r3, [pc, #44]	@ (800b7cc <ProcessRadioTxTimeout+0x54>)
 800b7a0:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d003      	beq.n	800b7b0 <ProcessRadioTxTimeout+0x38>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        MacCtx.RetransmitTimeoutRetry = true;
 800b7a8:	4b08      	ldr	r3, [pc, #32]	@ (800b7cc <ProcessRadioTxTimeout+0x54>)
 800b7aa:	2201      	movs	r2, #1
 800b7ac:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800b7b0:	4a06      	ldr	r2, [pc, #24]	@ (800b7cc <ProcessRadioTxTimeout+0x54>)
 800b7b2:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800b7b6:	f043 0310 	orr.w	r3, r3, #16
 800b7ba:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
}
 800b7be:	bf00      	nop
 800b7c0:	bd80      	pop	{r7, pc}
 800b7c2:	bf00      	nop
 800b7c4:	20008000 	.word	0x20008000
 800b7c8:	0802146c 	.word	0x0802146c
 800b7cc:	20000a28 	.word	0x20000a28

0800b7d0 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b084      	sub	sp, #16
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	460a      	mov	r2, r1
 800b7da:	71fb      	strb	r3, [r7, #7]
 800b7dc:	4613      	mov	r3, r2
 800b7de:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800b7e4:	4b3d      	ldr	r3, [pc, #244]	@ (800b8dc <HandleRadioRxErrorTimeout+0x10c>)
 800b7e6:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800b7ea:	2b02      	cmp	r3, #2
 800b7ec:	d002      	beq.n	800b7f4 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800b7ee:	4b3c      	ldr	r3, [pc, #240]	@ (800b8e0 <HandleRadioRxErrorTimeout+0x110>)
 800b7f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7f2:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800b7f4:	f004 f8ec 	bl	800f9d0 <LoRaMacClassBIsBeaconExpected>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d007      	beq.n	800b80e <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800b7fe:	2002      	movs	r0, #2
 800b800:	f004 f89a 	bl	800f938 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800b804:	2000      	movs	r0, #0
 800b806:	f004 f8bc 	bl	800f982 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800b80a:	2301      	movs	r3, #1
 800b80c:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800b80e:	4b33      	ldr	r3, [pc, #204]	@ (800b8dc <HandleRadioRxErrorTimeout+0x10c>)
 800b810:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800b814:	2b01      	cmp	r3, #1
 800b816:	d119      	bne.n	800b84c <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800b818:	f004 f8e1 	bl	800f9de <LoRaMacClassBIsPingExpected>
 800b81c:	4603      	mov	r3, r0
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d007      	beq.n	800b832 <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800b822:	2000      	movs	r0, #0
 800b824:	f004 f892 	bl	800f94c <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800b828:	2000      	movs	r0, #0
 800b82a:	f004 f8b3 	bl	800f994 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800b82e:	2301      	movs	r3, #1
 800b830:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800b832:	f004 f8db 	bl	800f9ec <LoRaMacClassBIsMulticastExpected>
 800b836:	4603      	mov	r3, r0
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d007      	beq.n	800b84c <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800b83c:	2000      	movs	r0, #0
 800b83e:	f004 f88f 	bl	800f960 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800b842:	2000      	movs	r0, #0
 800b844:	f004 f8af 	bl	800f9a6 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800b848:	2301      	movs	r3, #1
 800b84a:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800b84c:	7bfb      	ldrb	r3, [r7, #15]
 800b84e:	f083 0301 	eor.w	r3, r3, #1
 800b852:	b2db      	uxtb	r3, r3
 800b854:	2b00      	cmp	r3, #0
 800b856:	d03b      	beq.n	800b8d0 <HandleRadioRxErrorTimeout+0x100>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800b858:	4b22      	ldr	r3, [pc, #136]	@ (800b8e4 <HandleRadioRxErrorTimeout+0x114>)
 800b85a:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d122      	bne.n	800b8a8 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800b862:	4b20      	ldr	r3, [pc, #128]	@ (800b8e4 <HandleRadioRxErrorTimeout+0x114>)
 800b864:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d003      	beq.n	800b874 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800b86c:	4a1d      	ldr	r2, [pc, #116]	@ (800b8e4 <HandleRadioRxErrorTimeout+0x114>)
 800b86e:	79fb      	ldrb	r3, [r7, #7]
 800b870:	f882 3441 	strb.w	r3, [r2, #1089]	@ 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800b874:	79fb      	ldrb	r3, [r7, #7]
 800b876:	4618      	mov	r0, r3
 800b878:	f004 fd80 	bl	801037c <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800b87c:	4b17      	ldr	r3, [pc, #92]	@ (800b8dc <HandleRadioRxErrorTimeout+0x10c>)
 800b87e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b880:	4618      	mov	r0, r3
 800b882:	f00e ffa5 	bl	801a7d0 <UTIL_TIMER_GetElapsedTime>
 800b886:	4602      	mov	r2, r0
 800b888:	4b16      	ldr	r3, [pc, #88]	@ (800b8e4 <HandleRadioRxErrorTimeout+0x114>)
 800b88a:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 800b88e:	429a      	cmp	r2, r3
 800b890:	d31e      	bcc.n	800b8d0 <HandleRadioRxErrorTimeout+0x100>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800b892:	4815      	ldr	r0, [pc, #84]	@ (800b8e8 <HandleRadioRxErrorTimeout+0x118>)
 800b894:	f00e fef0 	bl	801a678 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800b898:	4a12      	ldr	r2, [pc, #72]	@ (800b8e4 <HandleRadioRxErrorTimeout+0x114>)
 800b89a:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800b89e:	f043 0310 	orr.w	r3, r3, #16
 800b8a2:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 800b8a6:	e013      	b.n	800b8d0 <HandleRadioRxErrorTimeout+0x100>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800b8a8:	4b0e      	ldr	r3, [pc, #56]	@ (800b8e4 <HandleRadioRxErrorTimeout+0x114>)
 800b8aa:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d003      	beq.n	800b8ba <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800b8b2:	4a0c      	ldr	r2, [pc, #48]	@ (800b8e4 <HandleRadioRxErrorTimeout+0x114>)
 800b8b4:	79bb      	ldrb	r3, [r7, #6]
 800b8b6:	f882 3441 	strb.w	r3, [r2, #1089]	@ 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800b8ba:	79bb      	ldrb	r3, [r7, #6]
 800b8bc:	4618      	mov	r0, r3
 800b8be:	f004 fd5d 	bl	801037c <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.MacFlags.Bits.MacDone = 1;
 800b8c2:	4a08      	ldr	r2, [pc, #32]	@ (800b8e4 <HandleRadioRxErrorTimeout+0x114>)
 800b8c4:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800b8c8:	f043 0310 	orr.w	r3, r3, #16
 800b8cc:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 800b8d0:	f7ff f948 	bl	800ab64 <UpdateRxSlotIdleState>
}
 800b8d4:	bf00      	nop
 800b8d6:	3710      	adds	r7, #16
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}
 800b8dc:	20008000 	.word	0x20008000
 800b8e0:	0802146c 	.word	0x0802146c
 800b8e4:	20000a28 	.word	0x20000a28
 800b8e8:	20000dc0 	.word	0x20000dc0

0800b8ec <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800b8f0:	2106      	movs	r1, #6
 800b8f2:	2005      	movs	r0, #5
 800b8f4:	f7ff ff6c 	bl	800b7d0 <HandleRadioRxErrorTimeout>
}
 800b8f8:	bf00      	nop
 800b8fa:	bd80      	pop	{r7, pc}

0800b8fc <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800b900:	2104      	movs	r1, #4
 800b902:	2003      	movs	r0, #3
 800b904:	f7ff ff64 	bl	800b7d0 <HandleRadioRxErrorTimeout>
}
 800b908:	bf00      	nop
 800b90a:	bd80      	pop	{r7, pc}

0800b90c <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b084      	sub	sp, #16
 800b910:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b912:	f3ef 8310 	mrs	r3, PRIMASK
 800b916:	607b      	str	r3, [r7, #4]
  return(result);
 800b918:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800b91a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800b91c:	b672      	cpsid	i
}
 800b91e:	bf00      	nop
    events = LoRaMacRadioEvents;
 800b920:	4b1d      	ldr	r3, [pc, #116]	@ (800b998 <LoRaMacHandleIrqEvents+0x8c>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800b926:	4b1c      	ldr	r3, [pc, #112]	@ (800b998 <LoRaMacHandleIrqEvents+0x8c>)
 800b928:	2200      	movs	r2, #0
 800b92a:	601a      	str	r2, [r3, #0]
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	f383 8810 	msr	PRIMASK, r3
}
 800b936:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d027      	beq.n	800b98e <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800b93e:	783b      	ldrb	r3, [r7, #0]
 800b940:	f003 0320 	and.w	r3, r3, #32
 800b944:	b2db      	uxtb	r3, r3
 800b946:	2b00      	cmp	r3, #0
 800b948:	d001      	beq.n	800b94e <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800b94a:	f7ff f923 	bl	800ab94 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800b94e:	783b      	ldrb	r3, [r7, #0]
 800b950:	f003 0310 	and.w	r3, r3, #16
 800b954:	b2db      	uxtb	r3, r3
 800b956:	2b00      	cmp	r3, #0
 800b958:	d001      	beq.n	800b95e <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800b95a:	f7ff f9fb 	bl	800ad54 <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800b95e:	783b      	ldrb	r3, [r7, #0]
 800b960:	f003 0308 	and.w	r3, r3, #8
 800b964:	b2db      	uxtb	r3, r3
 800b966:	2b00      	cmp	r3, #0
 800b968:	d001      	beq.n	800b96e <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800b96a:	f7ff ff05 	bl	800b778 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800b96e:	783b      	ldrb	r3, [r7, #0]
 800b970:	f003 0304 	and.w	r3, r3, #4
 800b974:	b2db      	uxtb	r3, r3
 800b976:	2b00      	cmp	r3, #0
 800b978:	d001      	beq.n	800b97e <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800b97a:	f7ff ffb7 	bl	800b8ec <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800b97e:	783b      	ldrb	r3, [r7, #0]
 800b980:	f003 0302 	and.w	r3, r3, #2
 800b984:	b2db      	uxtb	r3, r3
 800b986:	2b00      	cmp	r3, #0
 800b988:	d001      	beq.n	800b98e <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800b98a:	f7ff ffb7 	bl	800b8fc <ProcessRadioRxTimeout>
        }
    }
}
 800b98e:	bf00      	nop
 800b990:	3710      	adds	r7, #16
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}
 800b996:	bf00      	nop
 800b998:	20000fd4 	.word	0x20000fd4

0800b99c <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800b99c:	b480      	push	{r7}
 800b99e:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800b9a0:	4b10      	ldr	r3, [pc, #64]	@ (800b9e4 <LoRaMacIsBusy+0x48>)
 800b9a2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800b9a6:	2b01      	cmp	r3, #1
 800b9a8:	d101      	bne.n	800b9ae <LoRaMacIsBusy+0x12>
    {
        return false;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	e015      	b.n	800b9da <LoRaMacIsBusy+0x3e>
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 800b9ae:	4b0e      	ldr	r3, [pc, #56]	@ (800b9e8 <LoRaMacIsBusy+0x4c>)
 800b9b0:	781b      	ldrb	r3, [r3, #0]
 800b9b2:	f003 0301 	and.w	r3, r3, #1
 800b9b6:	b2db      	uxtb	r3, r3
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d001      	beq.n	800b9c0 <LoRaMacIsBusy+0x24>
    {
        return true;
 800b9bc:	2301      	movs	r3, #1
 800b9be:	e00c      	b.n	800b9da <LoRaMacIsBusy+0x3e>
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800b9c0:	4b08      	ldr	r3, [pc, #32]	@ (800b9e4 <LoRaMacIsBusy+0x48>)
 800b9c2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d106      	bne.n	800b9d8 <LoRaMacIsBusy+0x3c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800b9ca:	4b06      	ldr	r3, [pc, #24]	@ (800b9e4 <LoRaMacIsBusy+0x48>)
 800b9cc:	f893 3492 	ldrb.w	r3, [r3, #1170]	@ 0x492
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800b9d0:	2b01      	cmp	r3, #1
 800b9d2:	d101      	bne.n	800b9d8 <LoRaMacIsBusy+0x3c>
    {
        return false;
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	e000      	b.n	800b9da <LoRaMacIsBusy+0x3e>
    }
    return true;
 800b9d8:	2301      	movs	r3, #1
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bc80      	pop	{r7}
 800b9e0:	4770      	bx	lr
 800b9e2:	bf00      	nop
 800b9e4:	20000a28 	.word	0x20000a28
 800b9e8:	20000fd4 	.word	0x20000fd4

0800b9ec <LoRaMacIsStopped>:

bool LoRaMacIsStopped( void )
{
 800b9ec:	b480      	push	{r7}
 800b9ee:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800b9f0:	4b05      	ldr	r3, [pc, #20]	@ (800ba08 <LoRaMacIsStopped+0x1c>)
 800b9f2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800b9f6:	2b01      	cmp	r3, #1
 800b9f8:	d101      	bne.n	800b9fe <LoRaMacIsStopped+0x12>
    {
        return true;
 800b9fa:	2301      	movs	r3, #1
 800b9fc:	e000      	b.n	800ba00 <LoRaMacIsStopped+0x14>
    }
    return false;
 800b9fe:	2300      	movs	r3, #0
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bc80      	pop	{r7}
 800ba06:	4770      	bx	lr
 800ba08:	20000a28 	.word	0x20000a28

0800ba0c <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b083      	sub	sp, #12
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	4603      	mov	r3, r0
 800ba14:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800ba16:	4a04      	ldr	r2, [pc, #16]	@ (800ba28 <LoRaMacEnableRequests+0x1c>)
 800ba18:	79fb      	ldrb	r3, [r7, #7]
 800ba1a:	f882 3492 	strb.w	r3, [r2, #1170]	@ 0x492
}
 800ba1e:	bf00      	nop
 800ba20:	370c      	adds	r7, #12
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bc80      	pop	{r7}
 800ba26:	4770      	bx	lr
 800ba28:	20000a28 	.word	0x20000a28

0800ba2c <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b082      	sub	sp, #8
 800ba30:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800ba32:	4b2c      	ldr	r3, [pc, #176]	@ (800bae4 <LoRaMacHandleRequestEvents+0xb8>)
 800ba34:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800ba38:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800ba3a:	4b2a      	ldr	r3, [pc, #168]	@ (800bae4 <LoRaMacHandleRequestEvents+0xb8>)
 800ba3c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d14a      	bne.n	800bada <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800ba44:	4b27      	ldr	r3, [pc, #156]	@ (800bae4 <LoRaMacHandleRequestEvents+0xb8>)
 800ba46:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800ba4a:	f003 0301 	and.w	r3, r3, #1
 800ba4e:	b2db      	uxtb	r3, r3
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d006      	beq.n	800ba62 <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800ba54:	4a23      	ldr	r2, [pc, #140]	@ (800bae4 <LoRaMacHandleRequestEvents+0xb8>)
 800ba56:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800ba5a:	f023 0301 	bic.w	r3, r3, #1
 800ba5e:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800ba62:	4b20      	ldr	r3, [pc, #128]	@ (800bae4 <LoRaMacHandleRequestEvents+0xb8>)
 800ba64:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800ba68:	f003 0304 	and.w	r3, r3, #4
 800ba6c:	b2db      	uxtb	r3, r3
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d006      	beq.n	800ba80 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800ba72:	4a1c      	ldr	r2, [pc, #112]	@ (800bae4 <LoRaMacHandleRequestEvents+0xb8>)
 800ba74:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800ba78:	f023 0304 	bic.w	r3, r3, #4
 800ba7c:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800ba80:	2001      	movs	r0, #1
 800ba82:	f7ff ffc3 	bl	800ba0c <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800ba86:	793b      	ldrb	r3, [r7, #4]
 800ba88:	f003 0301 	and.w	r3, r3, #1
 800ba8c:	b2db      	uxtb	r3, r3
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d005      	beq.n	800ba9e <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800ba92:	4b14      	ldr	r3, [pc, #80]	@ (800bae4 <LoRaMacHandleRequestEvents+0xb8>)
 800ba94:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	4813      	ldr	r0, [pc, #76]	@ (800bae8 <LoRaMacHandleRequestEvents+0xbc>)
 800ba9c:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800ba9e:	793b      	ldrb	r3, [r7, #4]
 800baa0:	f003 0304 	and.w	r3, r3, #4
 800baa4:	b2db      	uxtb	r3, r3
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d00e      	beq.n	800bac8 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800baaa:	4810      	ldr	r0, [pc, #64]	@ (800baec <LoRaMacHandleRequestEvents+0xc0>)
 800baac:	f004 fcb4 	bl	8010418 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800bab0:	f004 fd04 	bl	80104bc <LoRaMacConfirmQueueGetCnt>
 800bab4:	4603      	mov	r3, r0
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d006      	beq.n	800bac8 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800baba:	4a0a      	ldr	r2, [pc, #40]	@ (800bae4 <LoRaMacHandleRequestEvents+0xb8>)
 800babc:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800bac0:	f043 0304 	orr.w	r3, r3, #4
 800bac4:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800bac8:	f003 ffae 	bl	800fa28 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800bacc:	4a05      	ldr	r2, [pc, #20]	@ (800bae4 <LoRaMacHandleRequestEvents+0xb8>)
 800bace:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800bad2:	f023 0310 	bic.w	r3, r3, #16
 800bad6:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
}
 800bada:	bf00      	nop
 800badc:	3708      	adds	r7, #8
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}
 800bae2:	bf00      	nop
 800bae4:	20000a28 	.word	0x20000a28
 800bae8:	20000e68 	.word	0x20000e68
 800baec:	20000e7c 	.word	0x20000e7c

0800baf0 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800baf4:	4b16      	ldr	r3, [pc, #88]	@ (800bb50 <LoRaMacHandleIndicationEvents+0x60>)
 800baf6:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800bafa:	f003 0308 	and.w	r3, r3, #8
 800bafe:	b2db      	uxtb	r3, r3
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d00d      	beq.n	800bb20 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800bb04:	4a12      	ldr	r2, [pc, #72]	@ (800bb50 <LoRaMacHandleIndicationEvents+0x60>)
 800bb06:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800bb0a:	f023 0308 	bic.w	r3, r3, #8
 800bb0e:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800bb12:	4b0f      	ldr	r3, [pc, #60]	@ (800bb50 <LoRaMacHandleIndicationEvents+0x60>)
 800bb14:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800bb18:	68db      	ldr	r3, [r3, #12]
 800bb1a:	490e      	ldr	r1, [pc, #56]	@ (800bb54 <LoRaMacHandleIndicationEvents+0x64>)
 800bb1c:	480e      	ldr	r0, [pc, #56]	@ (800bb58 <LoRaMacHandleIndicationEvents+0x68>)
 800bb1e:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800bb20:	4b0b      	ldr	r3, [pc, #44]	@ (800bb50 <LoRaMacHandleIndicationEvents+0x60>)
 800bb22:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800bb26:	f003 0302 	and.w	r3, r3, #2
 800bb2a:	b2db      	uxtb	r3, r3
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d00d      	beq.n	800bb4c <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800bb30:	4a07      	ldr	r2, [pc, #28]	@ (800bb50 <LoRaMacHandleIndicationEvents+0x60>)
 800bb32:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800bb36:	f023 0302 	bic.w	r3, r3, #2
 800bb3a:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800bb3e:	4b04      	ldr	r3, [pc, #16]	@ (800bb50 <LoRaMacHandleIndicationEvents+0x60>)
 800bb40:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800bb44:	685b      	ldr	r3, [r3, #4]
 800bb46:	4903      	ldr	r1, [pc, #12]	@ (800bb54 <LoRaMacHandleIndicationEvents+0x64>)
 800bb48:	4804      	ldr	r0, [pc, #16]	@ (800bb5c <LoRaMacHandleIndicationEvents+0x6c>)
 800bb4a:	4798      	blx	r3
    }
}
 800bb4c:	bf00      	nop
 800bb4e:	bd80      	pop	{r7, pc}
 800bb50:	20000a28 	.word	0x20000a28
 800bb54:	20000eb4 	.word	0x20000eb4
 800bb58:	20000e90 	.word	0x20000e90
 800bb5c:	20000e48 	.word	0x20000e48

0800bb60 <LoRaMacHandleMcpsRequest>:
    }
}
#endif /* LORAMAC_VERSION */

static void LoRaMacHandleMcpsRequest( void )
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b082      	sub	sp, #8
 800bb64:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800bb66:	4b2a      	ldr	r3, [pc, #168]	@ (800bc10 <LoRaMacHandleMcpsRequest+0xb0>)
 800bb68:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800bb6c:	f003 0301 	and.w	r3, r3, #1
 800bb70:	b2db      	uxtb	r3, r3
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d048      	beq.n	800bc08 <LoRaMacHandleMcpsRequest+0xa8>
    {
        bool stopRetransmission = false;
 800bb76:	2300      	movs	r3, #0
 800bb78:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800bb7e:	4b24      	ldr	r3, [pc, #144]	@ (800bc10 <LoRaMacHandleMcpsRequest+0xb0>)
 800bb80:	f893 3440 	ldrb.w	r3, [r3, #1088]	@ 0x440
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d004      	beq.n	800bb92 <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800bb88:	4b21      	ldr	r3, [pc, #132]	@ (800bc10 <LoRaMacHandleMcpsRequest+0xb0>)
 800bb8a:	f893 3440 	ldrb.w	r3, [r3, #1088]	@ 0x440
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800bb8e:	2b03      	cmp	r3, #3
 800bb90:	d104      	bne.n	800bb9c <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800bb92:	f002 f94f 	bl	800de34 <CheckRetransUnconfirmedUplink>
 800bb96:	4603      	mov	r3, r0
 800bb98:	71fb      	strb	r3, [r7, #7]
 800bb9a:	e010      	b.n	800bbbe <LoRaMacHandleMcpsRequest+0x5e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800bb9c:	4b1c      	ldr	r3, [pc, #112]	@ (800bc10 <LoRaMacHandleMcpsRequest+0xb0>)
 800bb9e:	f893 3440 	ldrb.w	r3, [r3, #1088]	@ 0x440
 800bba2:	2b01      	cmp	r3, #1
 800bba4:	d10b      	bne.n	800bbbe <LoRaMacHandleMcpsRequest+0x5e>
            else
            {
                waitForRetransmission = true;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.RetransmitTimeoutRetry == true )
 800bba6:	4b1a      	ldr	r3, [pc, #104]	@ (800bc10 <LoRaMacHandleMcpsRequest+0xb0>)
 800bba8:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d004      	beq.n	800bbba <LoRaMacHandleMcpsRequest+0x5a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800bbb0:	f002 f96c 	bl	800de8c <CheckRetransConfirmedUplink>
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	71fb      	strb	r3, [r7, #7]
 800bbb8:	e001      	b.n	800bbbe <LoRaMacHandleMcpsRequest+0x5e>
            }
            else
            {
                waitForRetransmission = true;
 800bbba:	2301      	movs	r3, #1
 800bbbc:	71bb      	strb	r3, [r7, #6]
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 800bbbe:	79fb      	ldrb	r3, [r7, #7]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d00d      	beq.n	800bbe0 <LoRaMacHandleMcpsRequest+0x80>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800bbc4:	4813      	ldr	r0, [pc, #76]	@ (800bc14 <LoRaMacHandleMcpsRequest+0xb4>)
 800bbc6:	f00e fd57 	bl	801a678 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800bbca:	4b11      	ldr	r3, [pc, #68]	@ (800bc10 <LoRaMacHandleMcpsRequest+0xb0>)
 800bbcc:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800bbd0:	f023 0320 	bic.w	r3, r3, #32
 800bbd4:	4a0e      	ldr	r2, [pc, #56]	@ (800bc10 <LoRaMacHandleMcpsRequest+0xb0>)
 800bbd6:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            StopRetransmission( );
 800bbda:	f002 f991 	bl	800df00 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800bbde:	e013      	b.n	800bc08 <LoRaMacHandleMcpsRequest+0xa8>
        else if( waitForRetransmission == false )
 800bbe0:	79bb      	ldrb	r3, [r7, #6]
 800bbe2:	f083 0301 	eor.w	r3, r3, #1
 800bbe6:	b2db      	uxtb	r3, r3
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d00d      	beq.n	800bc08 <LoRaMacHandleMcpsRequest+0xa8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800bbec:	4a08      	ldr	r2, [pc, #32]	@ (800bc10 <LoRaMacHandleMcpsRequest+0xb0>)
 800bbee:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800bbf2:	f023 0310 	bic.w	r3, r3, #16
 800bbf6:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
            MacCtx.RetransmitTimeoutRetry = false;
 800bbfa:	4b05      	ldr	r3, [pc, #20]	@ (800bc10 <LoRaMacHandleMcpsRequest+0xb0>)
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
            OnTxDelayedTimerEvent( NULL );
 800bc02:	2000      	movs	r0, #0
 800bc04:	f000 f9c8 	bl	800bf98 <OnTxDelayedTimerEvent>
}
 800bc08:	bf00      	nop
 800bc0a:	3708      	adds	r7, #8
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd80      	pop	{r7, pc}
 800bc10:	20000a28 	.word	0x20000a28
 800bc14:	20000d90 	.word	0x20000d90

0800bc18 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800bc1c:	4b18      	ldr	r3, [pc, #96]	@ (800bc80 <LoRaMacHandleMlmeRequest+0x68>)
 800bc1e:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800bc22:	f003 0304 	and.w	r3, r3, #4
 800bc26:	b2db      	uxtb	r3, r3
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d026      	beq.n	800bc7a <LoRaMacHandleMlmeRequest+0x62>
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_1 ) == true ) ||
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_2 ) == true ) )
        {
            MacCtx.ChannelsNbTransCounter = 0;
#else
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800bc2c:	2001      	movs	r0, #1
 800bc2e:	f004 fbd9 	bl	80103e4 <LoRaMacConfirmQueueIsCmdActive>
 800bc32:	4603      	mov	r3, r0
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d012      	beq.n	800bc5e <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800bc38:	2001      	movs	r0, #1
 800bc3a:	f004 fb75 	bl	8010328 <LoRaMacConfirmQueueGetStatus>
 800bc3e:	4603      	mov	r3, r0
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d103      	bne.n	800bc4c <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800bc44:	4b0e      	ldr	r3, [pc, #56]	@ (800bc80 <LoRaMacHandleMlmeRequest+0x68>)
 800bc46:	2200      	movs	r2, #0
 800bc48:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
            }
#endif /* LORAMAC_VERSION */
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800bc4c:	4b0c      	ldr	r3, [pc, #48]	@ (800bc80 <LoRaMacHandleMlmeRequest+0x68>)
 800bc4e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800bc52:	f023 0302 	bic.w	r3, r3, #2
 800bc56:	4a0a      	ldr	r2, [pc, #40]	@ (800bc80 <LoRaMacHandleMlmeRequest+0x68>)
 800bc58:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 800bc5c:	e00d      	b.n	800bc7a <LoRaMacHandleMlmeRequest+0x62>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 800bc5e:	2006      	movs	r0, #6
 800bc60:	f004 fbc0 	bl	80103e4 <LoRaMacConfirmQueueIsCmdActive>
 800bc64:	4603      	mov	r3, r0
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d007      	beq.n	800bc7a <LoRaMacHandleMlmeRequest+0x62>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800bc6a:	4b05      	ldr	r3, [pc, #20]	@ (800bc80 <LoRaMacHandleMlmeRequest+0x68>)
 800bc6c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800bc70:	f023 0302 	bic.w	r3, r3, #2
 800bc74:	4a02      	ldr	r2, [pc, #8]	@ (800bc80 <LoRaMacHandleMlmeRequest+0x68>)
 800bc76:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
}
 800bc7a:	bf00      	nop
 800bc7c:	bd80      	pop	{r7, pc}
 800bc7e:	bf00      	nop
 800bc80:	20000a28 	.word	0x20000a28

0800bc84 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800bc88:	200b      	movs	r0, #11
 800bc8a:	f004 fbab 	bl	80103e4 <LoRaMacConfirmQueueIsCmdActive>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d019      	beq.n	800bcc8 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800bc94:	4b0e      	ldr	r3, [pc, #56]	@ (800bcd0 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800bc96:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800bc9a:	f003 0301 	and.w	r3, r3, #1
 800bc9e:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d111      	bne.n	800bcc8 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800bca4:	4b0a      	ldr	r3, [pc, #40]	@ (800bcd0 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800bca6:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800bcaa:	f003 0304 	and.w	r3, r3, #4
 800bcae:	b2db      	uxtb	r3, r3
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d009      	beq.n	800bcc8 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800bcb4:	4b06      	ldr	r3, [pc, #24]	@ (800bcd0 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800bcb6:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800bcba:	f023 0302 	bic.w	r3, r3, #2
 800bcbe:	4a04      	ldr	r2, [pc, #16]	@ (800bcd0 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800bcc0:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            return 0x01;
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	e000      	b.n	800bcca <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800bcc8:	2300      	movs	r3, #0
}
 800bcca:	4618      	mov	r0, r3
 800bccc:	bd80      	pop	{r7, pc}
 800bcce:	bf00      	nop
 800bcd0:	20000a28 	.word	0x20000a28

0800bcd4 <CheckForMinimumAbpDatarate>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
 800bcd4:	b480      	push	{r7}
 800bcd6:	b083      	sub	sp, #12
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	4603      	mov	r3, r0
 800bcdc:	71fb      	strb	r3, [r7, #7]
 800bcde:	460b      	mov	r3, r1
 800bce0:	71bb      	strb	r3, [r7, #6]
 800bce2:	4613      	mov	r3, r2
 800bce4:	717b      	strb	r3, [r7, #5]
    if( ( adr == true ) &&
 800bce6:	79fb      	ldrb	r3, [r7, #7]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d00a      	beq.n	800bd02 <CheckForMinimumAbpDatarate+0x2e>
 800bcec:	79bb      	ldrb	r3, [r7, #6]
 800bcee:	2b01      	cmp	r3, #1
 800bcf0:	d107      	bne.n	800bd02 <CheckForMinimumAbpDatarate+0x2e>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
 800bcf2:	797b      	ldrb	r3, [r7, #5]
 800bcf4:	f083 0301 	eor.w	r3, r3, #1
 800bcf8:	b2db      	uxtb	r3, r3
        ( activation == ACTIVATION_TYPE_ABP ) &&
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d001      	beq.n	800bd02 <CheckForMinimumAbpDatarate+0x2e>
    {
        return true;
 800bcfe:	2301      	movs	r3, #1
 800bd00:	e000      	b.n	800bd04 <CheckForMinimumAbpDatarate+0x30>
    }
    return false;
 800bd02:	2300      	movs	r3, #0
}
 800bd04:	4618      	mov	r0, r3
 800bd06:	370c      	adds	r7, #12
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	bc80      	pop	{r7}
 800bd0c:	4770      	bx	lr
	...

0800bd10 <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 800bd10:	b480      	push	{r7}
 800bd12:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800bd14:	4b0d      	ldr	r3, [pc, #52]	@ (800bd4c <LoRaMacCheckForRxAbort+0x3c>)
 800bd16:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800bd1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d00f      	beq.n	800bd42 <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800bd22:	4b0a      	ldr	r3, [pc, #40]	@ (800bd4c <LoRaMacCheckForRxAbort+0x3c>)
 800bd24:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800bd28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bd2c:	4a07      	ldr	r2, [pc, #28]	@ (800bd4c <LoRaMacCheckForRxAbort+0x3c>)
 800bd2e:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800bd32:	4b06      	ldr	r3, [pc, #24]	@ (800bd4c <LoRaMacCheckForRxAbort+0x3c>)
 800bd34:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800bd38:	f023 0302 	bic.w	r3, r3, #2
 800bd3c:	4a03      	ldr	r2, [pc, #12]	@ (800bd4c <LoRaMacCheckForRxAbort+0x3c>)
 800bd3e:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    }
}
 800bd42:	bf00      	nop
 800bd44:	46bd      	mov	sp, r7
 800bd46:	bc80      	pop	{r7}
 800bd48:	4770      	bx	lr
 800bd4a:	bf00      	nop
 800bd4c:	20000a28 	.word	0x20000a28

0800bd50 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b084      	sub	sp, #16
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800bd60:	4b51      	ldr	r3, [pc, #324]	@ (800bea8 <LoRaMacHandleNvm+0x158>)
 800bd62:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	f040 8099 	bne.w	800be9e <LoRaMacHandleNvm+0x14e>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2124      	movs	r1, #36	@ 0x24
 800bd70:	4618      	mov	r0, r3
 800bd72:	f00b f897 	bl	8016ea4 <Crc32>
 800bd76:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd7c:	68ba      	ldr	r2, [r7, #8]
 800bd7e:	429a      	cmp	r2, r3
 800bd80:	d006      	beq.n	800bd90 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	68ba      	ldr	r2, [r7, #8]
 800bd86:	625a      	str	r2, [r3, #36]	@ 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800bd88:	89fb      	ldrh	r3, [r7, #14]
 800bd8a:	f043 0301 	orr.w	r3, r3, #1
 800bd8e:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	3328      	adds	r3, #40	@ 0x28
 800bd94:	211c      	movs	r1, #28
 800bd96:	4618      	mov	r0, r3
 800bd98:	f00b f884 	bl	8016ea4 <Crc32>
 800bd9c:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bda2:	68ba      	ldr	r2, [r7, #8]
 800bda4:	429a      	cmp	r2, r3
 800bda6:	d006      	beq.n	800bdb6 <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	68ba      	ldr	r2, [r7, #8]
 800bdac:	645a      	str	r2, [r3, #68]	@ 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800bdae:	89fb      	ldrh	r3, [r7, #14]
 800bdb0:	f043 0302 	orr.w	r3, r3, #2
 800bdb4:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	3348      	adds	r3, #72	@ 0x48
 800bdba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f00b f870 	bl	8016ea4 <Crc32>
 800bdc4:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800bdcc:	68ba      	ldr	r2, [r7, #8]
 800bdce:	429a      	cmp	r2, r3
 800bdd0:	d007      	beq.n	800bde2 <LoRaMacHandleNvm+0x92>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	68ba      	ldr	r2, [r7, #8]
 800bdd6:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800bdda:	89fb      	ldrh	r3, [r7, #14]
 800bddc:	f043 0304 	orr.w	r3, r3, #4
 800bde0:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800bde8:	21d4      	movs	r1, #212	@ 0xd4
 800bdea:	4618      	mov	r0, r3
 800bdec:	f00b f85a 	bl	8016ea4 <Crc32>
 800bdf0:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800bdf8:	68ba      	ldr	r2, [r7, #8]
 800bdfa:	429a      	cmp	r2, r3
 800bdfc:	d007      	beq.n	800be0e <LoRaMacHandleNvm+0xbe>
    {
        nvmData->SecureElement.Crc32 = crc;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	68ba      	ldr	r2, [r7, #8]
 800be02:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800be06:	89fb      	ldrh	r3, [r7, #14]
 800be08:	f043 0308 	orr.w	r3, r3, #8
 800be0c:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 800be14:	2110      	movs	r1, #16
 800be16:	4618      	mov	r0, r3
 800be18:	f00b f844 	bl	8016ea4 <Crc32>
 800be1c:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 800be24:	68ba      	ldr	r2, [r7, #8]
 800be26:	429a      	cmp	r2, r3
 800be28:	d007      	beq.n	800be3a <LoRaMacHandleNvm+0xea>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	68ba      	ldr	r2, [r7, #8]
 800be2e:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800be32:	89fb      	ldrh	r3, [r7, #14]
 800be34:	f043 0310 	orr.w	r3, r3, #16
 800be38:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 800be40:	f44f 715e 	mov.w	r1, #888	@ 0x378
 800be44:	4618      	mov	r0, r3
 800be46:	f00b f82d 	bl	8016ea4 <Crc32>
 800be4a:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	@ 0x5b0
 800be52:	68ba      	ldr	r2, [r7, #8]
 800be54:	429a      	cmp	r2, r3
 800be56:	d007      	beq.n	800be68 <LoRaMacHandleNvm+0x118>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	68ba      	ldr	r2, [r7, #8]
 800be5c:	f8c3 25b0 	str.w	r2, [r3, #1456]	@ 0x5b0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800be60:	89fb      	ldrh	r3, [r7, #14]
 800be62:	f043 0320 	orr.w	r3, r3, #32
 800be66:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	f203 53b4 	addw	r3, r3, #1460	@ 0x5b4
 800be6e:	2114      	movs	r1, #20
 800be70:	4618      	mov	r0, r3
 800be72:	f00b f817 	bl	8016ea4 <Crc32>
 800be76:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	f8d3 35c8 	ldr.w	r3, [r3, #1480]	@ 0x5c8
 800be7e:	68ba      	ldr	r2, [r7, #8]
 800be80:	429a      	cmp	r2, r3
 800be82:	d007      	beq.n	800be94 <LoRaMacHandleNvm+0x144>
    {
        nvmData->ClassB.Crc32 = crc;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	68ba      	ldr	r2, [r7, #8]
 800be88:	f8c3 25c8 	str.w	r2, [r3, #1480]	@ 0x5c8
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800be8c:	89fb      	ldrh	r3, [r7, #14]
 800be8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be92:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800be94:	89fb      	ldrh	r3, [r7, #14]
 800be96:	4618      	mov	r0, r3
 800be98:	f002 f884 	bl	800dfa4 <CallNvmDataChangeCallback>
 800be9c:	e000      	b.n	800bea0 <LoRaMacHandleNvm+0x150>
        return;
 800be9e:	bf00      	nop
}
 800bea0:	3710      	adds	r7, #16
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}
 800bea6:	bf00      	nop
 800bea8:	20000a28 	.word	0x20000a28

0800beac <LoRaMacHandleResponseTimeout>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool LoRaMacHandleResponseTimeout( TimerTime_t timeoutInMs, TimerTime_t startTimeInMs )
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b084      	sub	sp, #16
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
 800beb4:	6039      	str	r1, [r7, #0]
    if( startTimeInMs != 0 )
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d00d      	beq.n	800bed8 <LoRaMacHandleResponseTimeout+0x2c>
    {
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 800bebc:	6838      	ldr	r0, [r7, #0]
 800bebe:	f00e fc87 	bl	801a7d0 <UTIL_TIMER_GetElapsedTime>
 800bec2:	60f8      	str	r0, [r7, #12]
        if( elapsedTime > timeoutInMs )
 800bec4:	68fa      	ldr	r2, [r7, #12]
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	429a      	cmp	r2, r3
 800beca:	d905      	bls.n	800bed8 <LoRaMacHandleResponseTimeout+0x2c>
        {
            Nvm.MacGroup1.SrvAckRequested = false;
 800becc:	4b05      	ldr	r3, [pc, #20]	@ (800bee4 <LoRaMacHandleResponseTimeout+0x38>)
 800bece:	2200      	movs	r2, #0
 800bed0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            return true;
 800bed4:	2301      	movs	r3, #1
 800bed6:	e000      	b.n	800beda <LoRaMacHandleResponseTimeout+0x2e>
        }
    }
    return false;
 800bed8:	2300      	movs	r3, #0
}
 800beda:	4618      	mov	r0, r3
 800bedc:	3710      	adds	r7, #16
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}
 800bee2:	bf00      	nop
 800bee4:	20008000 	.word	0x20008000

0800bee8 <LoRaMacProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b082      	sub	sp, #8
 800beec:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800beee:	2300      	movs	r3, #0
 800bef0:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800bef2:	f7ff fd0b 	bl	800b90c <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800bef6:	f003 fe06 	bl	800fb06 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800befa:	4b25      	ldr	r3, [pc, #148]	@ (800bf90 <LoRaMacProcess+0xa8>)
 800befc:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800bf00:	f003 0310 	and.w	r3, r3, #16
 800bf04:	b2db      	uxtb	r3, r3
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d023      	beq.n	800bf52 <LoRaMacProcess+0x6a>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800bf0a:	2000      	movs	r0, #0
 800bf0c:	f7ff fd7e 	bl	800ba0c <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800bf10:	f7ff fefe 	bl	800bd10 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800bf14:	f002 f864 	bl	800dfe0 <IsRequestPending>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d006      	beq.n	800bf2c <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800bf1e:	f7ff feb1 	bl	800bc84 <LoRaMacCheckForBeaconAcquisition>
 800bf22:	4603      	mov	r3, r0
 800bf24:	461a      	mov	r2, r3
 800bf26:	79fb      	ldrb	r3, [r7, #7]
 800bf28:	4313      	orrs	r3, r2
 800bf2a:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800bf2c:	79fb      	ldrb	r3, [r7, #7]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d103      	bne.n	800bf3a <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800bf32:	f7ff fe71 	bl	800bc18 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800bf36:	f7ff fe13 	bl	800bb60 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800bf3a:	f7ff fd77 	bl	800ba2c <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800bf3e:	2001      	movs	r0, #1
 800bf40:	f7ff fd64 	bl	800ba0c <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800bf44:	4a12      	ldr	r2, [pc, #72]	@ (800bf90 <LoRaMacProcess+0xa8>)
 800bf46:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800bf4a:	f043 0320 	orr.w	r3, r3, #32
 800bf4e:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
    LoRaMacHandleIndicationEvents( );
 800bf52:	f7ff fdcd 	bl	800baf0 <LoRaMacHandleIndicationEvents>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    LoRaMacHandleRejoinEvents( );
#endif /* LORAMAC_VERSION */

    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800bf56:	4b0e      	ldr	r3, [pc, #56]	@ (800bf90 <LoRaMacProcess+0xa8>)
 800bf58:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800bf5c:	2b02      	cmp	r3, #2
 800bf5e:	d101      	bne.n	800bf64 <LoRaMacProcess+0x7c>
    {
        OpenContinuousRxCWindow( );
 800bf60:	f001 fc28 	bl	800d7b4 <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800bf64:	4b0a      	ldr	r3, [pc, #40]	@ (800bf90 <LoRaMacProcess+0xa8>)
 800bf66:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800bf6a:	f003 0320 	and.w	r3, r3, #32
 800bf6e:	b2db      	uxtb	r3, r3
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d009      	beq.n	800bf88 <LoRaMacProcess+0xa0>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800bf74:	4a06      	ldr	r2, [pc, #24]	@ (800bf90 <LoRaMacProcess+0xa8>)
 800bf76:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800bf7a:	f023 0320 	bic.w	r3, r3, #32
 800bf7e:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        LoRaMacHandleNvm( &Nvm );
 800bf82:	4804      	ldr	r0, [pc, #16]	@ (800bf94 <LoRaMacProcess+0xac>)
 800bf84:	f7ff fee4 	bl	800bd50 <LoRaMacHandleNvm>
    }
}
 800bf88:	bf00      	nop
 800bf8a:	3708      	adds	r7, #8
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bd80      	pop	{r7, pc}
 800bf90:	20000a28 	.word	0x20000a28
 800bf94:	20008000 	.word	0x20008000

0800bf98 <OnTxDelayedTimerEvent>:


static void OnTxDelayedTimerEvent( void* context )
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b082      	sub	sp, #8
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800bfa0:	481e      	ldr	r0, [pc, #120]	@ (800c01c <OnTxDelayedTimerEvent+0x84>)
 800bfa2:	f00e fb69 	bl	801a678 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800bfa6:	4b1e      	ldr	r3, [pc, #120]	@ (800c020 <OnTxDelayedTimerEvent+0x88>)
 800bfa8:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800bfac:	f023 0320 	bic.w	r3, r3, #32
 800bfb0:	4a1b      	ldr	r2, [pc, #108]	@ (800c020 <OnTxDelayedTimerEvent+0x88>)
 800bfb2:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800bfb6:	4b1b      	ldr	r3, [pc, #108]	@ (800c024 <OnTxDelayedTimerEvent+0x8c>)
 800bfb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bfbc:	4a18      	ldr	r2, [pc, #96]	@ (800c020 <OnTxDelayedTimerEvent+0x88>)
 800bfbe:	f8d2 2498 	ldr.w	r2, [r2, #1176]	@ 0x498
 800bfc2:	4611      	mov	r1, r2
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	f7ff ff71 	bl	800beac <LoRaMacHandleResponseTimeout>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d11e      	bne.n	800c00e <OnTxDelayedTimerEvent+0x76>
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800bfd0:	2001      	movs	r0, #1
 800bfd2:	f001 f939 	bl	800d248 <ScheduleTx>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d01a      	beq.n	800c012 <OnTxDelayedTimerEvent+0x7a>
 800bfdc:	2b0b      	cmp	r3, #11
 800bfde:	d018      	beq.n	800c012 <OnTxDelayedTimerEvent+0x7a>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800bfe0:	4b10      	ldr	r3, [pc, #64]	@ (800c024 <OnTxDelayedTimerEvent+0x8c>)
 800bfe2:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800bfe6:	b2da      	uxtb	r2, r3
 800bfe8:	4b0d      	ldr	r3, [pc, #52]	@ (800c020 <OnTxDelayedTimerEvent+0x88>)
 800bfea:	f883 2442 	strb.w	r2, [r3, #1090]	@ 0x442
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800bfee:	4b0c      	ldr	r3, [pc, #48]	@ (800c020 <OnTxDelayedTimerEvent+0x88>)
 800bff0:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800bff4:	4b0a      	ldr	r3, [pc, #40]	@ (800c020 <OnTxDelayedTimerEvent+0x88>)
 800bff6:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800bffa:	4b09      	ldr	r3, [pc, #36]	@ (800c020 <OnTxDelayedTimerEvent+0x88>)
 800bffc:	2209      	movs	r2, #9
 800bffe:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800c002:	2009      	movs	r0, #9
 800c004:	f004 f9ba 	bl	801037c <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800c008:	f001 ff7a 	bl	800df00 <StopRetransmission>
            break;
 800c00c:	e002      	b.n	800c014 <OnTxDelayedTimerEvent+0x7c>
        return;
 800c00e:	bf00      	nop
 800c010:	e000      	b.n	800c014 <OnTxDelayedTimerEvent+0x7c>
            break;
 800c012:	bf00      	nop
        }
    }
}
 800c014:	3708      	adds	r7, #8
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}
 800c01a:	bf00      	nop
 800c01c:	20000d90 	.word	0x20000d90
 800c020:	20000a28 	.word	0x20000a28
 800c024:	20008000 	.word	0x20008000

0800c028 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b082      	sub	sp, #8
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800c030:	4b17      	ldr	r3, [pc, #92]	@ (800c090 <OnRxWindow1TimerEvent+0x68>)
 800c032:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 800c036:	4b16      	ldr	r3, [pc, #88]	@ (800c090 <OnRxWindow1TimerEvent+0x68>)
 800c038:	f883 23b8 	strb.w	r2, [r3, #952]	@ 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800c03c:	4b15      	ldr	r3, [pc, #84]	@ (800c094 <OnRxWindow1TimerEvent+0x6c>)
 800c03e:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 800c042:	b25a      	sxtb	r2, r3
 800c044:	4b12      	ldr	r3, [pc, #72]	@ (800c090 <OnRxWindow1TimerEvent+0x68>)
 800c046:	f883 23bb 	strb.w	r2, [r3, #955]	@ 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800c04a:	4b12      	ldr	r3, [pc, #72]	@ (800c094 <OnRxWindow1TimerEvent+0x6c>)
 800c04c:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800c050:	4b0f      	ldr	r3, [pc, #60]	@ (800c090 <OnRxWindow1TimerEvent+0x68>)
 800c052:	f883 23c8 	strb.w	r2, [r3, #968]	@ 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800c056:	4b0f      	ldr	r3, [pc, #60]	@ (800c094 <OnRxWindow1TimerEvent+0x6c>)
 800c058:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800c05c:	4b0c      	ldr	r3, [pc, #48]	@ (800c090 <OnRxWindow1TimerEvent+0x68>)
 800c05e:	f883 23c9 	strb.w	r2, [r3, #969]	@ 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800c062:	4b0b      	ldr	r3, [pc, #44]	@ (800c090 <OnRxWindow1TimerEvent+0x68>)
 800c064:	2200      	movs	r2, #0
 800c066:	f883 23ca 	strb.w	r2, [r3, #970]	@ 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800c06a:	4b09      	ldr	r3, [pc, #36]	@ (800c090 <OnRxWindow1TimerEvent+0x68>)
 800c06c:	2200      	movs	r2, #0
 800c06e:	f883 23cb 	strb.w	r2, [r3, #971]	@ 0x3cb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800c072:	4b08      	ldr	r3, [pc, #32]	@ (800c094 <OnRxWindow1TimerEvent+0x6c>)
 800c074:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 800c078:	4b05      	ldr	r3, [pc, #20]	@ (800c090 <OnRxWindow1TimerEvent+0x68>)
 800c07a:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800c07e:	4906      	ldr	r1, [pc, #24]	@ (800c098 <OnRxWindow1TimerEvent+0x70>)
 800c080:	4806      	ldr	r0, [pc, #24]	@ (800c09c <OnRxWindow1TimerEvent+0x74>)
 800c082:	f001 fb63 	bl	800d74c <RxWindowSetup>
}
 800c086:	bf00      	nop
 800c088:	3708      	adds	r7, #8
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}
 800c08e:	bf00      	nop
 800c090:	20000a28 	.word	0x20000a28
 800c094:	20008000 	.word	0x20008000
 800c098:	20000de0 	.word	0x20000de0
 800c09c:	20000da8 	.word	0x20000da8

0800c0a0 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800c0a0:	b580      	push	{r7, lr}
 800c0a2:	b082      	sub	sp, #8
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800c0a8:	4b19      	ldr	r3, [pc, #100]	@ (800c110 <OnRxWindow2TimerEvent+0x70>)
 800c0aa:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d029      	beq.n	800c106 <OnRxWindow2TimerEvent+0x66>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800c0b2:	4b17      	ldr	r3, [pc, #92]	@ (800c110 <OnRxWindow2TimerEvent+0x70>)
 800c0b4:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 800c0b8:	4b15      	ldr	r3, [pc, #84]	@ (800c110 <OnRxWindow2TimerEvent+0x70>)
 800c0ba:	f883 23d0 	strb.w	r2, [r3, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800c0be:	4b15      	ldr	r3, [pc, #84]	@ (800c114 <OnRxWindow2TimerEvent+0x74>)
 800c0c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c0c2:	4a13      	ldr	r2, [pc, #76]	@ (800c110 <OnRxWindow2TimerEvent+0x70>)
 800c0c4:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800c0c8:	4b12      	ldr	r3, [pc, #72]	@ (800c114 <OnRxWindow2TimerEvent+0x74>)
 800c0ca:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800c0ce:	4b10      	ldr	r3, [pc, #64]	@ (800c110 <OnRxWindow2TimerEvent+0x70>)
 800c0d0:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800c0d4:	4b0f      	ldr	r3, [pc, #60]	@ (800c114 <OnRxWindow2TimerEvent+0x74>)
 800c0d6:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800c0da:	4b0d      	ldr	r3, [pc, #52]	@ (800c110 <OnRxWindow2TimerEvent+0x70>)
 800c0dc:	f883 23e1 	strb.w	r2, [r3, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800c0e0:	4b0b      	ldr	r3, [pc, #44]	@ (800c110 <OnRxWindow2TimerEvent+0x70>)
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	f883 23e2 	strb.w	r2, [r3, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800c0e8:	4b09      	ldr	r3, [pc, #36]	@ (800c110 <OnRxWindow2TimerEvent+0x70>)
 800c0ea:	2201      	movs	r2, #1
 800c0ec:	f883 23e3 	strb.w	r2, [r3, #995]	@ 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800c0f0:	4b08      	ldr	r3, [pc, #32]	@ (800c114 <OnRxWindow2TimerEvent+0x74>)
 800c0f2:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 800c0f6:	4b06      	ldr	r3, [pc, #24]	@ (800c110 <OnRxWindow2TimerEvent+0x70>)
 800c0f8:	f883 23e4 	strb.w	r2, [r3, #996]	@ 0x3e4
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800c0fc:	4906      	ldr	r1, [pc, #24]	@ (800c118 <OnRxWindow2TimerEvent+0x78>)
 800c0fe:	4807      	ldr	r0, [pc, #28]	@ (800c11c <OnRxWindow2TimerEvent+0x7c>)
 800c100:	f001 fb24 	bl	800d74c <RxWindowSetup>
 800c104:	e000      	b.n	800c108 <OnRxWindow2TimerEvent+0x68>
        return;
 800c106:	bf00      	nop
}
 800c108:	3708      	adds	r7, #8
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}
 800c10e:	bf00      	nop
 800c110:	20000a28 	.word	0x20000a28
 800c114:	20008000 	.word	0x20008000
 800c118:	20000df8 	.word	0x20000df8
 800c11c:	20000dc0 	.word	0x20000dc0

0800c120 <OnRetransmitTimeoutTimerEvent>:

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void OnRetransmitTimeoutTimerEvent( void* context )
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b082      	sub	sp, #8
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800c128:	4808      	ldr	r0, [pc, #32]	@ (800c14c <OnRetransmitTimeoutTimerEvent+0x2c>)
 800c12a:	f00e faa5 	bl	801a678 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800c12e:	4b08      	ldr	r3, [pc, #32]	@ (800c150 <OnRetransmitTimeoutTimerEvent+0x30>)
 800c130:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800c134:	2b00      	cmp	r3, #0
 800c136:	d003      	beq.n	800c140 <OnRetransmitTimeoutTimerEvent+0x20>
    {
        MacCtx.RetransmitTimeoutRetry = true;
 800c138:	4b05      	ldr	r3, [pc, #20]	@ (800c150 <OnRetransmitTimeoutTimerEvent+0x30>)
 800c13a:	2201      	movs	r2, #1
 800c13c:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
    }
    OnMacProcessNotify( );
 800c140:	f001 ff1a 	bl	800df78 <OnMacProcessNotify>
}
 800c144:	bf00      	nop
 800c146:	3708      	adds	r7, #8
 800c148:	46bd      	mov	sp, r7
 800c14a:	bd80      	pop	{r7, pc}
 800c14c:	20000e28 	.word	0x20000e28
 800c150:	20000a28 	.word	0x20000a28

0800c154 <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b084      	sub	sp, #16
 800c158:	af00      	add	r7, sp, #0
 800c15a:	60ba      	str	r2, [r7, #8]
 800c15c:	607b      	str	r3, [r7, #4]
 800c15e:	4603      	mov	r3, r0
 800c160:	73fb      	strb	r3, [r7, #15]
 800c162:	460b      	mov	r3, r1
 800c164:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800c166:	68bb      	ldr	r3, [r7, #8]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d005      	beq.n	800c178 <GetFCntDown+0x24>
 800c16c:	69bb      	ldr	r3, [r7, #24]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d002      	beq.n	800c178 <GetFCntDown+0x24>
 800c172:	69fb      	ldr	r3, [r7, #28]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d101      	bne.n	800c17c <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c178:	2309      	movs	r3, #9
 800c17a:	e028      	b.n	800c1ce <GetFCntDown+0x7a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800c17c:	7bfb      	ldrb	r3, [r7, #15]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d016      	beq.n	800c1b0 <GetFCntDown+0x5c>
 800c182:	2b01      	cmp	r3, #1
 800c184:	d118      	bne.n	800c1b8 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800c186:	79bb      	ldrb	r3, [r7, #6]
 800c188:	2b01      	cmp	r3, #1
 800c18a:	d10d      	bne.n	800c1a8 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800c18c:	7bbb      	ldrb	r3, [r7, #14]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d002      	beq.n	800c198 <GetFCntDown+0x44>
 800c192:	7bbb      	ldrb	r3, [r7, #14]
 800c194:	2b03      	cmp	r3, #3
 800c196:	d103      	bne.n	800c1a0 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800c198:	69bb      	ldr	r3, [r7, #24]
 800c19a:	2202      	movs	r2, #2
 800c19c:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800c19e:	e00d      	b.n	800c1bc <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800c1a0:	69bb      	ldr	r3, [r7, #24]
 800c1a2:	2201      	movs	r2, #1
 800c1a4:	701a      	strb	r2, [r3, #0]
            break;
 800c1a6:	e009      	b.n	800c1bc <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800c1a8:	69bb      	ldr	r3, [r7, #24]
 800c1aa:	2203      	movs	r2, #3
 800c1ac:	701a      	strb	r2, [r3, #0]
            break;
 800c1ae:	e005      	b.n	800c1bc <GetFCntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800c1b0:	69bb      	ldr	r3, [r7, #24]
 800c1b2:	2204      	movs	r2, #4
 800c1b4:	701a      	strb	r2, [r3, #0]
            break;
 800c1b6:	e001      	b.n	800c1bc <GetFCntDown+0x68>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800c1b8:	2305      	movs	r3, #5
 800c1ba:	e008      	b.n	800c1ce <GetFCntDown+0x7a>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 800c1bc:	69bb      	ldr	r3, [r7, #24]
 800c1be:	7818      	ldrb	r0, [r3, #0]
 800c1c0:	68bb      	ldr	r3, [r7, #8]
 800c1c2:	89db      	ldrh	r3, [r3, #14]
 800c1c4:	69fa      	ldr	r2, [r7, #28]
 800c1c6:	4619      	mov	r1, r3
 800c1c8:	f004 fd12 	bl	8010bf0 <LoRaMacCryptoGetFCntDown>
 800c1cc:	4603      	mov	r3, r0
}
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	3710      	adds	r7, #16
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}
	...

0800c1d8 <SwitchClass>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800c1d8:	b5b0      	push	{r4, r5, r7, lr}
 800c1da:	b084      	sub	sp, #16
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	4603      	mov	r3, r0
 800c1e0:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c1e2:	2303      	movs	r3, #3
 800c1e4:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800c1e6:	4b6e      	ldr	r3, [pc, #440]	@ (800c3a0 <SwitchClass+0x1c8>)
 800c1e8:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800c1ec:	2b02      	cmp	r3, #2
 800c1ee:	f000 80bb 	beq.w	800c368 <SwitchClass+0x190>
 800c1f2:	2b02      	cmp	r3, #2
 800c1f4:	f300 80ce 	bgt.w	800c394 <SwitchClass+0x1bc>
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d003      	beq.n	800c204 <SwitchClass+0x2c>
 800c1fc:	2b01      	cmp	r3, #1
 800c1fe:	f000 80a5 	beq.w	800c34c <SwitchClass+0x174>
 800c202:	e0c7      	b.n	800c394 <SwitchClass+0x1bc>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800c204:	79fb      	ldrb	r3, [r7, #7]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d109      	bne.n	800c21e <SwitchClass+0x46>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800c20a:	4b65      	ldr	r3, [pc, #404]	@ (800c3a0 <SwitchClass+0x1c8>)
 800c20c:	4a64      	ldr	r2, [pc, #400]	@ (800c3a0 <SwitchClass+0x1c8>)
 800c20e:	3374      	adds	r3, #116	@ 0x74
 800c210:	326c      	adds	r2, #108	@ 0x6c
 800c212:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c216:	e883 0003 	stmia.w	r3, {r0, r1}

                status = LORAMAC_STATUS_OK;
 800c21a:	2300      	movs	r3, #0
 800c21c:	73fb      	strb	r3, [r7, #15]
            }
            if( deviceClass == CLASS_B )
 800c21e:	79fb      	ldrb	r3, [r7, #7]
 800c220:	2b01      	cmp	r3, #1
 800c222:	d10c      	bne.n	800c23e <SwitchClass+0x66>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800c224:	79fb      	ldrb	r3, [r7, #7]
 800c226:	4618      	mov	r0, r3
 800c228:	f003 fc04 	bl	800fa34 <LoRaMacClassBSwitchClass>
 800c22c:	4603      	mov	r3, r0
 800c22e:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800c230:	7bfb      	ldrb	r3, [r7, #15]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d103      	bne.n	800c23e <SwitchClass+0x66>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800c236:	4a5a      	ldr	r2, [pc, #360]	@ (800c3a0 <SwitchClass+0x1c8>)
 800c238:	79fb      	ldrb	r3, [r7, #7]
 800c23a:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118
                }
            }

            if( deviceClass == CLASS_C )
 800c23e:	79fb      	ldrb	r3, [r7, #7]
 800c240:	2b02      	cmp	r3, #2
 800c242:	f040 80a2 	bne.w	800c38a <SwitchClass+0x1b2>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800c246:	4a56      	ldr	r2, [pc, #344]	@ (800c3a0 <SwitchClass+0x1c8>)
 800c248:	79fb      	ldrb	r3, [r7, #7]
 800c24a:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800c24e:	4a55      	ldr	r2, [pc, #340]	@ (800c3a4 <SwitchClass+0x1cc>)
 800c250:	4b54      	ldr	r3, [pc, #336]	@ (800c3a4 <SwitchClass+0x1cc>)
 800c252:	f502 747a 	add.w	r4, r2, #1000	@ 0x3e8
 800c256:	f503 7574 	add.w	r5, r3, #976	@ 0x3d0
 800c25a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c25c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c25e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c262:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800c266:	4b4f      	ldr	r3, [pc, #316]	@ (800c3a4 <SwitchClass+0x1cc>)
 800c268:	2202      	movs	r2, #2
 800c26a:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800c26e:	2300      	movs	r3, #0
 800c270:	73bb      	strb	r3, [r7, #14]
 800c272:	e05b      	b.n	800c32c <SwitchClass+0x154>
                {
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800c274:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800c278:	4949      	ldr	r1, [pc, #292]	@ (800c3a0 <SwitchClass+0x1c8>)
 800c27a:	4613      	mov	r3, r2
 800c27c:	005b      	lsls	r3, r3, #1
 800c27e:	4413      	add	r3, r2
 800c280:	011b      	lsls	r3, r3, #4
 800c282:	440b      	add	r3, r1
 800c284:	33e9      	adds	r3, #233	@ 0xe9
 800c286:	781b      	ldrb	r3, [r3, #0]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d049      	beq.n	800c320 <SwitchClass+0x148>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 800c28c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800c290:	4943      	ldr	r1, [pc, #268]	@ (800c3a0 <SwitchClass+0x1c8>)
 800c292:	4613      	mov	r3, r2
 800c294:	005b      	lsls	r3, r3, #1
 800c296:	4413      	add	r3, r2
 800c298:	011b      	lsls	r3, r3, #4
 800c29a:	440b      	add	r3, r1
 800c29c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800c2a0:	781b      	ldrb	r3, [r3, #0]
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800c2a2:	2b02      	cmp	r3, #2
 800c2a4:	d13c      	bne.n	800c320 <SwitchClass+0x148>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 800c2a6:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800c2aa:	493d      	ldr	r1, [pc, #244]	@ (800c3a0 <SwitchClass+0x1c8>)
 800c2ac:	4613      	mov	r3, r2
 800c2ae:	005b      	lsls	r3, r3, #1
 800c2b0:	4413      	add	r3, r2
 800c2b2:	011b      	lsls	r3, r3, #4
 800c2b4:	440b      	add	r3, r1
 800c2b6:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	4a38      	ldr	r2, [pc, #224]	@ (800c3a0 <SwitchClass+0x1c8>)
 800c2be:	6753      	str	r3, [r2, #116]	@ 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 800c2c0:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800c2c4:	4936      	ldr	r1, [pc, #216]	@ (800c3a0 <SwitchClass+0x1c8>)
 800c2c6:	4613      	mov	r3, r2
 800c2c8:	005b      	lsls	r3, r3, #1
 800c2ca:	4413      	add	r3, r2
 800c2cc:	011b      	lsls	r3, r3, #4
 800c2ce:	440b      	add	r3, r1
 800c2d0:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800c2d4:	f993 3000 	ldrsb.w	r3, [r3]
 800c2d8:	b2da      	uxtb	r2, r3
 800c2da:	4b31      	ldr	r3, [pc, #196]	@ (800c3a0 <SwitchClass+0x1c8>)
 800c2dc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800c2e0:	4b30      	ldr	r3, [pc, #192]	@ (800c3a4 <SwitchClass+0x1cc>)
 800c2e2:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 800c2e6:	4b2f      	ldr	r3, [pc, #188]	@ (800c3a4 <SwitchClass+0x1cc>)
 800c2e8:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800c2ec:	4b2c      	ldr	r3, [pc, #176]	@ (800c3a0 <SwitchClass+0x1c8>)
 800c2ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c2f0:	4a2c      	ldr	r2, [pc, #176]	@ (800c3a4 <SwitchClass+0x1cc>)
 800c2f2:	f8c2 33ec 	str.w	r3, [r2, #1004]	@ 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800c2f6:	4b2a      	ldr	r3, [pc, #168]	@ (800c3a0 <SwitchClass+0x1c8>)
 800c2f8:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800c2fc:	4b29      	ldr	r3, [pc, #164]	@ (800c3a4 <SwitchClass+0x1cc>)
 800c2fe:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800c302:	4b27      	ldr	r3, [pc, #156]	@ (800c3a0 <SwitchClass+0x1c8>)
 800c304:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800c308:	4b26      	ldr	r3, [pc, #152]	@ (800c3a4 <SwitchClass+0x1cc>)
 800c30a:	f883 23f9 	strb.w	r2, [r3, #1017]	@ 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800c30e:	4b25      	ldr	r3, [pc, #148]	@ (800c3a4 <SwitchClass+0x1cc>)
 800c310:	2203      	movs	r2, #3
 800c312:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800c316:	4b23      	ldr	r3, [pc, #140]	@ (800c3a4 <SwitchClass+0x1cc>)
 800c318:	2201      	movs	r2, #1
 800c31a:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
                        break;
 800c31e:	e009      	b.n	800c334 <SwitchClass+0x15c>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800c320:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c324:	b2db      	uxtb	r3, r3
 800c326:	3301      	adds	r3, #1
 800c328:	b2db      	uxtb	r3, r3
 800c32a:	73bb      	strb	r3, [r7, #14]
 800c32c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c330:	2b00      	cmp	r3, #0
 800c332:	dd9f      	ble.n	800c274 <SwitchClass+0x9c>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800c334:	4b1b      	ldr	r3, [pc, #108]	@ (800c3a4 <SwitchClass+0x1cc>)
 800c336:	2200      	movs	r2, #0
 800c338:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800c33c:	4b1a      	ldr	r3, [pc, #104]	@ (800c3a8 <SwitchClass+0x1d0>)
 800c33e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c340:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800c342:	f001 fa37 	bl	800d7b4 <OpenContinuousRxCWindow>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */

                status = LORAMAC_STATUS_OK;
 800c346:	2300      	movs	r3, #0
 800c348:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800c34a:	e01e      	b.n	800c38a <SwitchClass+0x1b2>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800c34c:	79fb      	ldrb	r3, [r7, #7]
 800c34e:	4618      	mov	r0, r3
 800c350:	f003 fb70 	bl	800fa34 <LoRaMacClassBSwitchClass>
 800c354:	4603      	mov	r3, r0
 800c356:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800c358:	7bfb      	ldrb	r3, [r7, #15]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d117      	bne.n	800c38e <SwitchClass+0x1b6>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800c35e:	4a10      	ldr	r2, [pc, #64]	@ (800c3a0 <SwitchClass+0x1c8>)
 800c360:	79fb      	ldrb	r3, [r7, #7]
 800c362:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118
            }
            break;
 800c366:	e012      	b.n	800c38e <SwitchClass+0x1b6>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800c368:	79fb      	ldrb	r3, [r7, #7]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d111      	bne.n	800c392 <SwitchClass+0x1ba>
            {
                // Reset RxSlot to NONE
                MacCtx.RxSlot = RX_SLOT_NONE;
 800c36e:	4b0d      	ldr	r3, [pc, #52]	@ (800c3a4 <SwitchClass+0x1cc>)
 800c370:	2206      	movs	r2, #6
 800c372:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490

                Nvm.MacGroup2.DeviceClass = deviceClass;
 800c376:	4a0a      	ldr	r2, [pc, #40]	@ (800c3a0 <SwitchClass+0x1c8>)
 800c378:	79fb      	ldrb	r3, [r7, #7]
 800c37a:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800c37e:	4b0a      	ldr	r3, [pc, #40]	@ (800c3a8 <SwitchClass+0x1d0>)
 800c380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c382:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800c384:	2300      	movs	r3, #0
 800c386:	73fb      	strb	r3, [r7, #15]
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */
            }
            break;
 800c388:	e003      	b.n	800c392 <SwitchClass+0x1ba>
            break;
 800c38a:	bf00      	nop
 800c38c:	e002      	b.n	800c394 <SwitchClass+0x1bc>
            break;
 800c38e:	bf00      	nop
 800c390:	e000      	b.n	800c394 <SwitchClass+0x1bc>
            break;
 800c392:	bf00      	nop
        }
    }

    return status;
 800c394:	7bfb      	ldrb	r3, [r7, #15]
}
 800c396:	4618      	mov	r0, r3
 800c398:	3710      	adds	r7, #16
 800c39a:	46bd      	mov	sp, r7
 800c39c:	bdb0      	pop	{r4, r5, r7, pc}
 800c39e:	bf00      	nop
 800c3a0:	20008000 	.word	0x20008000
 800c3a4:	20000a28 	.word	0x20000a28
 800c3a8:	0802146c 	.word	0x0802146c

0800c3ac <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b086      	sub	sp, #24
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	4603      	mov	r3, r0
 800c3b4:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800c3b6:	4b10      	ldr	r3, [pc, #64]	@ (800c3f8 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800c3b8:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800c3bc:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800c3be:	79fb      	ldrb	r3, [r7, #7]
 800c3c0:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800c3c2:	230d      	movs	r3, #13
 800c3c4:	743b      	strb	r3, [r7, #16]

    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800c3c6:	4b0c      	ldr	r3, [pc, #48]	@ (800c3f8 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800c3c8:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d001      	beq.n	800c3d4 <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800c3d0:	230e      	movs	r3, #14
 800c3d2:	743b      	strb	r3, [r7, #16]
    }
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c3d4:	4b08      	ldr	r3, [pc, #32]	@ (800c3f8 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800c3d6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800c3da:	f107 0210 	add.w	r2, r7, #16
 800c3de:	4611      	mov	r1, r2
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	f005 fa6c 	bl	80118be <RegionGetPhyParam>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	b2db      	uxtb	r3, r3
}
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	3718      	adds	r7, #24
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	bd80      	pop	{r7, pc}
 800c3f6:	bf00      	nop
 800c3f8:	20008000 	.word	0x20008000

0800c3fc <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b084      	sub	sp, #16
 800c400:	af00      	add	r7, sp, #0
 800c402:	4603      	mov	r3, r0
 800c404:	71fb      	strb	r3, [r7, #7]
 800c406:	460b      	mov	r3, r1
 800c408:	71bb      	strb	r3, [r7, #6]
 800c40a:	4613      	mov	r3, r2
 800c40c:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800c40e:	2300      	movs	r3, #0
 800c410:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800c412:	2300      	movs	r3, #0
 800c414:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800c416:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800c41a:	4618      	mov	r0, r3
 800c41c:	f7ff ffc6 	bl	800c3ac <GetMaxAppPayloadWithoutFOptsLength>
 800c420:	4603      	mov	r3, r0
 800c422:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800c424:	79fb      	ldrb	r3, [r7, #7]
 800c426:	b29a      	uxth	r2, r3
 800c428:	797b      	ldrb	r3, [r7, #5]
 800c42a:	b29b      	uxth	r3, r3
 800c42c:	4413      	add	r3, r2
 800c42e:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800c430:	89ba      	ldrh	r2, [r7, #12]
 800c432:	89fb      	ldrh	r3, [r7, #14]
 800c434:	429a      	cmp	r2, r3
 800c436:	d804      	bhi.n	800c442 <ValidatePayloadLength+0x46>
 800c438:	89bb      	ldrh	r3, [r7, #12]
 800c43a:	2bff      	cmp	r3, #255	@ 0xff
 800c43c:	d801      	bhi.n	800c442 <ValidatePayloadLength+0x46>
    {
        return true;
 800c43e:	2301      	movs	r3, #1
 800c440:	e000      	b.n	800c444 <ValidatePayloadLength+0x48>
    }
    return false;
 800c442:	2300      	movs	r3, #0
}
 800c444:	4618      	mov	r0, r3
 800c446:	3710      	adds	r7, #16
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}

0800c44c <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800c44c:	b590      	push	{r4, r7, lr}
 800c44e:	b0a5      	sub	sp, #148	@ 0x94
 800c450:	af02      	add	r7, sp, #8
 800c452:	6078      	str	r0, [r7, #4]
 800c454:	4608      	mov	r0, r1
 800c456:	4611      	mov	r1, r2
 800c458:	461a      	mov	r2, r3
 800c45a:	4603      	mov	r3, r0
 800c45c:	70fb      	strb	r3, [r7, #3]
 800c45e:	460b      	mov	r3, r1
 800c460:	70bb      	strb	r3, [r7, #2]
 800c462:	4613      	mov	r3, r2
 800c464:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 800c466:	2300      	movs	r3, #0
 800c468:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    bool adrBlockFound = false;
 800c46c:	2300      	movs	r3, #0
 800c46e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800c472:	2300      	movs	r3, #0
 800c474:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    MacCommand_t* macCmd;
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 800c478:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	f000 84b9 	beq.w	800cdf4 <ProcessMacCommands+0x9a8>
 800c482:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800c486:	2b01      	cmp	r3, #1
 800c488:	f040 84ba 	bne.w	800ce00 <ProcessMacCommands+0x9b4>
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 800c48c:	f000 bcb2 	b.w	800cdf4 <ProcessMacCommands+0x9a8>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800c490:	78fb      	ldrb	r3, [r7, #3]
 800c492:	687a      	ldr	r2, [r7, #4]
 800c494:	4413      	add	r3, r2
 800c496:	781b      	ldrb	r3, [r3, #0]
 800c498:	4618      	mov	r0, r3
 800c49a:	f003 fdcb 	bl	8010034 <LoRaMacCommandsGetCmdSize>
 800c49e:	4603      	mov	r3, r0
 800c4a0:	461a      	mov	r2, r3
 800c4a2:	78fb      	ldrb	r3, [r7, #3]
 800c4a4:	441a      	add	r2, r3
 800c4a6:	78bb      	ldrb	r3, [r7, #2]
 800c4a8:	429a      	cmp	r2, r3
 800c4aa:	f300 84ab 	bgt.w	800ce04 <ProcessMacCommands+0x9b8>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800c4ae:	78fb      	ldrb	r3, [r7, #3]
 800c4b0:	1c5a      	adds	r2, r3, #1
 800c4b2:	70fa      	strb	r2, [r7, #3]
 800c4b4:	461a      	mov	r2, r3
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	4413      	add	r3, r2
 800c4ba:	781b      	ldrb	r3, [r3, #0]
 800c4bc:	3b02      	subs	r3, #2
 800c4be:	2b11      	cmp	r3, #17
 800c4c0:	f200 84a2 	bhi.w	800ce08 <ProcessMacCommands+0x9bc>
 800c4c4:	a201      	add	r2, pc, #4	@ (adr r2, 800c4cc <ProcessMacCommands+0x80>)
 800c4c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4ca:	bf00      	nop
 800c4cc:	0800c515 	.word	0x0800c515
 800c4d0:	0800c557 	.word	0x0800c557
 800c4d4:	0800c6d3 	.word	0x0800c6d3
 800c4d8:	0800c711 	.word	0x0800c711
 800c4dc:	0800c809 	.word	0x0800c809
 800c4e0:	0800c859 	.word	0x0800c859
 800c4e4:	0800c915 	.word	0x0800c915
 800c4e8:	0800c96b 	.word	0x0800c96b
 800c4ec:	0800ca51 	.word	0x0800ca51
 800c4f0:	0800ce09 	.word	0x0800ce09
 800c4f4:	0800ce09 	.word	0x0800ce09
 800c4f8:	0800caf9 	.word	0x0800caf9
 800c4fc:	0800ce09 	.word	0x0800ce09
 800c500:	0800ce09 	.word	0x0800ce09
 800c504:	0800cc19 	.word	0x0800cc19
 800c508:	0800cc4d 	.word	0x0800cc4d
 800c50c:	0800ccdd 	.word	0x0800ccdd
 800c510:	0800cd55 	.word	0x0800cd55
                break;
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800c514:	2005      	movs	r0, #5
 800c516:	f003 ff65 	bl	80103e4 <LoRaMacConfirmQueueIsCmdActive>
 800c51a:	4603      	mov	r3, r0
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	f000 845c 	beq.w	800cdda <ProcessMacCommands+0x98e>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800c522:	2105      	movs	r1, #5
 800c524:	2000      	movs	r0, #0
 800c526:	f003 fed1 	bl	80102cc <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800c52a:	78fb      	ldrb	r3, [r7, #3]
 800c52c:	1c5a      	adds	r2, r3, #1
 800c52e:	70fa      	strb	r2, [r7, #3]
 800c530:	461a      	mov	r2, r3
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	4413      	add	r3, r2
 800c536:	781a      	ldrb	r2, [r3, #0]
 800c538:	4bb0      	ldr	r3, [pc, #704]	@ (800c7fc <ProcessMacCommands+0x3b0>)
 800c53a:	f883 245c 	strb.w	r2, [r3, #1116]	@ 0x45c
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800c53e:	78fb      	ldrb	r3, [r7, #3]
 800c540:	1c5a      	adds	r2, r3, #1
 800c542:	70fa      	strb	r2, [r7, #3]
 800c544:	461a      	mov	r2, r3
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	4413      	add	r3, r2
 800c54a:	781a      	ldrb	r2, [r3, #0]
 800c54c:	4bab      	ldr	r3, [pc, #684]	@ (800c7fc <ProcessMacCommands+0x3b0>)
 800c54e:	f883 245d 	strb.w	r2, [r3, #1117]	@ 0x45d
                }
                break;
 800c552:	f000 bc42 	b.w	800cdda <ProcessMacCommands+0x98e>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800c556:	2300      	movs	r3, #0
 800c558:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 800c55c:	2300      	movs	r3, #0
 800c55e:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
                uint8_t linkAdrNbRep = 0;
 800c562:	2300      	movs	r3, #0
 800c564:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 800c568:	2300      	movs	r3, #0
 800c56a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
                }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                if( adrBlockFound == false )
 800c56e:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800c572:	f083 0301 	eor.w	r3, r3, #1
 800c576:	b2db      	uxtb	r3, r3
 800c578:	2b00      	cmp	r3, #0
 800c57a:	f000 80a6 	beq.w	800c6ca <ProcessMacCommands+0x27e>
                {
                    adrBlockFound = true;
 800c57e:	2301      	movs	r3, #1
 800c580:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

                    do
                    {
                        // Fill parameter structure
                        linkAdrReq.Payload = &payload[macIndex - 1];
 800c584:	78fb      	ldrb	r3, [r7, #3]
 800c586:	3b01      	subs	r3, #1
 800c588:	687a      	ldr	r2, [r7, #4]
 800c58a:	4413      	add	r3, r2
 800c58c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800c58e:	4b9c      	ldr	r3, [pc, #624]	@ (800c800 <ProcessMacCommands+0x3b4>)
 800c590:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800c594:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800c598:	4b99      	ldr	r3, [pc, #612]	@ (800c800 <ProcessMacCommands+0x3b4>)
 800c59a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800c59e:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800c5a2:	4b97      	ldr	r3, [pc, #604]	@ (800c800 <ProcessMacCommands+0x3b4>)
 800c5a4:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800c5a8:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800c5ac:	4b94      	ldr	r3, [pc, #592]	@ (800c800 <ProcessMacCommands+0x3b4>)
 800c5ae:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800c5b2:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800c5b6:	4b92      	ldr	r3, [pc, #584]	@ (800c800 <ProcessMacCommands+0x3b4>)
 800c5b8:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800c5bc:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 800c5c0:	4b8f      	ldr	r3, [pc, #572]	@ (800c800 <ProcessMacCommands+0x3b4>)
 800c5c2:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 800c5c6:	65bb      	str	r3, [r7, #88]	@ 0x58

                        // There is a fundamental difference in reporting the status
                        // of the LinkAdrRequests when ADR is on or off. When ADR is on, every
                        // LinkAdrAns contains the same value. This does not hold when ADR is off,
                        // where every LinkAdrAns requires an individual status.
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800c5c8:	4b8d      	ldr	r3, [pc, #564]	@ (800c800 <ProcessMacCommands+0x3b4>)
 800c5ca:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d008      	beq.n	800c5e4 <ProcessMacCommands+0x198>
                        {
                            // When ADR is on, the function RegionLinkAdrReq will take care
                            // about the parsing and interpretation of the LinkAdrRequest block and
                            // it provides one status which shall be applied to every LinkAdrAns
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800c5d2:	78ba      	ldrb	r2, [r7, #2]
 800c5d4:	78fb      	ldrb	r3, [r7, #3]
 800c5d6:	1ad3      	subs	r3, r2, r3
 800c5d8:	b2db      	uxtb	r3, r3
 800c5da:	3301      	adds	r3, #1
 800c5dc:	b2db      	uxtb	r3, r3
 800c5de:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
 800c5e2:	e002      	b.n	800c5ea <ProcessMacCommands+0x19e>
                            // When ADR is off, this function will loop over the individual LinkAdrRequests
                            // and will call RegionLinkAdrReq for each individually, as every request
                            // requires an individual answer.
                            // When ADR is off, the function RegionLinkAdrReq ignores the new values for
                            // ChannelsDatarate, ChannelsTxPower and ChannelsNbTrans.
                            linkAdrReq.PayloadSize = 5;
 800c5e4:	2305      	movs	r3, #5
 800c5e6:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
                        }

                        // Process the ADR requests
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800c5ea:	4b85      	ldr	r3, [pc, #532]	@ (800c800 <ProcessMacCommands+0x3b4>)
 800c5ec:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800c5f0:	f107 0456 	add.w	r4, r7, #86	@ 0x56
 800c5f4:	f107 0257 	add.w	r2, r7, #87	@ 0x57
 800c5f8:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800c5fc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800c600:	9301      	str	r3, [sp, #4]
 800c602:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 800c606:	9300      	str	r3, [sp, #0]
 800c608:	4623      	mov	r3, r4
 800c60a:	f005 fa5b 	bl	8011ac4 <RegionLinkAdrReq>
 800c60e:	4603      	mov	r3, r0
 800c610:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                                                &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                        if( ( status & 0x07 ) == 0x07 )
 800c614:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800c618:	f003 0307 	and.w	r3, r3, #7
 800c61c:	2b07      	cmp	r3, #7
 800c61e:	d119      	bne.n	800c654 <ProcessMacCommands+0x208>
                        {
                            // Set the status that the datarate has been increased
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 800c620:	4b77      	ldr	r3, [pc, #476]	@ (800c800 <ProcessMacCommands+0x3b4>)
 800c622:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 800c626:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800c62a:	429a      	cmp	r2, r3
 800c62c:	da03      	bge.n	800c636 <ProcessMacCommands+0x1ea>
                            {
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 800c62e:	4b74      	ldr	r3, [pc, #464]	@ (800c800 <ProcessMacCommands+0x3b4>)
 800c630:	2201      	movs	r2, #1
 800c632:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
                            }
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800c636:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 800c63a:	4b71      	ldr	r3, [pc, #452]	@ (800c800 <ProcessMacCommands+0x3b4>)
 800c63c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800c640:	f997 2056 	ldrsb.w	r2, [r7, #86]	@ 0x56
 800c644:	4b6e      	ldr	r3, [pc, #440]	@ (800c800 <ProcessMacCommands+0x3b4>)
 800c646:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800c64a:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800c64e:	4b6c      	ldr	r3, [pc, #432]	@ (800c800 <ProcessMacCommands+0x3b4>)
 800c650:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                        }

                        // Add the answers to the buffer
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800c654:	2300      	movs	r3, #0
 800c656:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 800c65a:	e00b      	b.n	800c674 <ProcessMacCommands+0x228>
                        {
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800c65c:	f107 036b 	add.w	r3, r7, #107	@ 0x6b
 800c660:	2201      	movs	r2, #1
 800c662:	4619      	mov	r1, r3
 800c664:	2003      	movs	r0, #3
 800c666:	f003 fb85 	bl	800fd74 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800c66a:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800c66e:	3301      	adds	r3, #1
 800c670:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 800c674:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800c678:	4a62      	ldr	r2, [pc, #392]	@ (800c804 <ProcessMacCommands+0x3b8>)
 800c67a:	fba2 2303 	umull	r2, r3, r2, r3
 800c67e:	089b      	lsrs	r3, r3, #2
 800c680:	b2db      	uxtb	r3, r3
 800c682:	f897 2086 	ldrb.w	r2, [r7, #134]	@ 0x86
 800c686:	429a      	cmp	r2, r3
 800c688:	d3e8      	bcc.n	800c65c <ProcessMacCommands+0x210>
                        }
                        // Update MAC index
                        macIndex += linkAdrNbBytesParsed - 1;
 800c68a:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800c68e:	78fb      	ldrb	r3, [r7, #3]
 800c690:	4413      	add	r3, r2
 800c692:	b2db      	uxtb	r3, r3
 800c694:	3b01      	subs	r3, #1
 800c696:	70fb      	strb	r3, [r7, #3]

                        // Check to prevent invalid access
                        if( macIndex >= commandsSize )
 800c698:	78fa      	ldrb	r2, [r7, #3]
 800c69a:	78bb      	ldrb	r3, [r7, #2]
 800c69c:	429a      	cmp	r2, r3
 800c69e:	d20a      	bcs.n	800c6b6 <ProcessMacCommands+0x26a>
                            break;

                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 800c6a0:	78fb      	ldrb	r3, [r7, #3]
 800c6a2:	1c5a      	adds	r2, r3, #1
 800c6a4:	70fa      	strb	r2, [r7, #3]
 800c6a6:	461a      	mov	r2, r3
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	4413      	add	r3, r2
 800c6ac:	781b      	ldrb	r3, [r3, #0]
 800c6ae:	2b03      	cmp	r3, #3
 800c6b0:	f43f af68 	beq.w	800c584 <ProcessMacCommands+0x138>
 800c6b4:	e000      	b.n	800c6b8 <ProcessMacCommands+0x26c>
                            break;
 800c6b6:	bf00      	nop

                    if( macIndex < commandsSize )
 800c6b8:	78fa      	ldrb	r2, [r7, #3]
 800c6ba:	78bb      	ldrb	r3, [r7, #2]
 800c6bc:	429a      	cmp	r2, r3
 800c6be:	f080 838e 	bcs.w	800cdde <ProcessMacCommands+0x992>
                    {
                        // Decrease the index such that it points to the next MAC command
                        macIndex--;
 800c6c2:	78fb      	ldrb	r3, [r7, #3]
 800c6c4:	3b01      	subs	r3, #1
 800c6c6:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 800c6c8:	e389      	b.n	800cdde <ProcessMacCommands+0x992>
                    macIndex += 4;
 800c6ca:	78fb      	ldrb	r3, [r7, #3]
 800c6cc:	3304      	adds	r3, #4
 800c6ce:	70fb      	strb	r3, [r7, #3]
                break;
 800c6d0:	e385      	b.n	800cdde <ProcessMacCommands+0x992>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800c6d2:	78fb      	ldrb	r3, [r7, #3]
 800c6d4:	1c5a      	adds	r2, r3, #1
 800c6d6:	70fa      	strb	r2, [r7, #3]
 800c6d8:	461a      	mov	r2, r3
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	4413      	add	r3, r2
 800c6de:	781b      	ldrb	r3, [r3, #0]
 800c6e0:	f003 030f 	and.w	r3, r3, #15
 800c6e4:	b2da      	uxtb	r2, r3
 800c6e6:	4b46      	ldr	r3, [pc, #280]	@ (800c800 <ProcessMacCommands+0x3b4>)
 800c6e8:	f883 211b 	strb.w	r2, [r3, #283]	@ 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800c6ec:	4b44      	ldr	r3, [pc, #272]	@ (800c800 <ProcessMacCommands+0x3b4>)
 800c6ee:	f893 311b 	ldrb.w	r3, [r3, #283]	@ 0x11b
 800c6f2:	461a      	mov	r2, r3
 800c6f4:	2301      	movs	r3, #1
 800c6f6:	4093      	lsls	r3, r2
 800c6f8:	b29a      	uxth	r2, r3
 800c6fa:	4b41      	ldr	r3, [pc, #260]	@ (800c800 <ProcessMacCommands+0x3b4>)
 800c6fc:	f8a3 2120 	strh.w	r2, [r3, #288]	@ 0x120
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800c700:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800c704:	2200      	movs	r2, #0
 800c706:	4619      	mov	r1, r3
 800c708:	2004      	movs	r0, #4
 800c70a:	f003 fb33 	bl	800fd74 <LoRaMacCommandsAddCmd>
                break;
 800c70e:	e371      	b.n	800cdf4 <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800c710:	2307      	movs	r3, #7
 800c712:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800c716:	78fb      	ldrb	r3, [r7, #3]
 800c718:	687a      	ldr	r2, [r7, #4]
 800c71a:	4413      	add	r3, r2
 800c71c:	781b      	ldrb	r3, [r3, #0]
 800c71e:	091b      	lsrs	r3, r3, #4
 800c720:	b2db      	uxtb	r3, r3
 800c722:	b25b      	sxtb	r3, r3
 800c724:	f003 0307 	and.w	r3, r3, #7
 800c728:	b25b      	sxtb	r3, r3
 800c72a:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800c72e:	78fb      	ldrb	r3, [r7, #3]
 800c730:	687a      	ldr	r2, [r7, #4]
 800c732:	4413      	add	r3, r2
 800c734:	781b      	ldrb	r3, [r3, #0]
 800c736:	b25b      	sxtb	r3, r3
 800c738:	f003 030f 	and.w	r3, r3, #15
 800c73c:	b25b      	sxtb	r3, r3
 800c73e:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
                macIndex++;
 800c742:	78fb      	ldrb	r3, [r7, #3]
 800c744:	3301      	adds	r3, #1
 800c746:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800c748:	78fb      	ldrb	r3, [r7, #3]
 800c74a:	1c5a      	adds	r2, r3, #1
 800c74c:	70fa      	strb	r2, [r7, #3]
 800c74e:	461a      	mov	r2, r3
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	4413      	add	r3, r2
 800c754:	781b      	ldrb	r3, [r3, #0]
 800c756:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800c758:	78fb      	ldrb	r3, [r7, #3]
 800c75a:	1c5a      	adds	r2, r3, #1
 800c75c:	70fa      	strb	r2, [r7, #3]
 800c75e:	461a      	mov	r2, r3
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	4413      	add	r3, r2
 800c764:	781b      	ldrb	r3, [r3, #0]
 800c766:	021a      	lsls	r2, r3, #8
 800c768:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c76a:	4313      	orrs	r3, r2
 800c76c:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800c76e:	78fb      	ldrb	r3, [r7, #3]
 800c770:	1c5a      	adds	r2, r3, #1
 800c772:	70fa      	strb	r2, [r7, #3]
 800c774:	461a      	mov	r2, r3
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	4413      	add	r3, r2
 800c77a:	781b      	ldrb	r3, [r3, #0]
 800c77c:	041a      	lsls	r2, r3, #16
 800c77e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c780:	4313      	orrs	r3, r2
 800c782:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency *= 100;
 800c784:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c786:	2264      	movs	r2, #100	@ 0x64
 800c788:	fb02 f303 	mul.w	r3, r2, r3
 800c78c:	653b      	str	r3, [r7, #80]	@ 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800c78e:	4b1c      	ldr	r3, [pc, #112]	@ (800c800 <ProcessMacCommands+0x3b4>)
 800c790:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800c794:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800c798:	4611      	mov	r1, r2
 800c79a:	4618      	mov	r0, r3
 800c79c:	f005 f9b9 	bl	8011b12 <RegionRxParamSetupReq>
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( status & 0x07 ) == 0x07 )
 800c7a6:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800c7aa:	f003 0307 	and.w	r3, r3, #7
 800c7ae:	2b07      	cmp	r3, #7
 800c7b0:	d117      	bne.n	800c7e2 <ProcessMacCommands+0x396>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800c7b2:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 800c7b6:	b2da      	uxtb	r2, r3
 800c7b8:	4b11      	ldr	r3, [pc, #68]	@ (800c800 <ProcessMacCommands+0x3b4>)
 800c7ba:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800c7be:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 800c7c2:	b2da      	uxtb	r2, r3
 800c7c4:	4b0e      	ldr	r3, [pc, #56]	@ (800c800 <ProcessMacCommands+0x3b4>)
 800c7c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800c7ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c7cc:	4a0c      	ldr	r2, [pc, #48]	@ (800c800 <ProcessMacCommands+0x3b4>)
 800c7ce:	66d3      	str	r3, [r2, #108]	@ 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800c7d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c7d2:	4a0b      	ldr	r2, [pc, #44]	@ (800c800 <ProcessMacCommands+0x3b4>)
 800c7d4:	6753      	str	r3, [r2, #116]	@ 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800c7d6:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 800c7da:	b2da      	uxtb	r2, r3
 800c7dc:	4b08      	ldr	r3, [pc, #32]	@ (800c800 <ProcessMacCommands+0x3b4>)
 800c7de:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
                }
                macCmdPayload[0] = status;
 800c7e2:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800c7e6:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800c7ea:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800c7ee:	2201      	movs	r2, #1
 800c7f0:	4619      	mov	r1, r3
 800c7f2:	2005      	movs	r0, #5
 800c7f4:	f003 fabe 	bl	800fd74 <LoRaMacCommandsAddCmd>
                break;
 800c7f8:	e2fc      	b.n	800cdf4 <ProcessMacCommands+0x9a8>
 800c7fa:	bf00      	nop
 800c7fc:	20000a28 	.word	0x20000a28
 800c800:	20008000 	.word	0x20008000
 800c804:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800c808:	23ff      	movs	r3, #255	@ 0xff
 800c80a:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800c80e:	4bb7      	ldr	r3, [pc, #732]	@ (800caec <ProcessMacCommands+0x6a0>)
 800c810:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800c814:	2b00      	cmp	r3, #0
 800c816:	d00d      	beq.n	800c834 <ProcessMacCommands+0x3e8>
 800c818:	4bb4      	ldr	r3, [pc, #720]	@ (800caec <ProcessMacCommands+0x6a0>)
 800c81a:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d007      	beq.n	800c834 <ProcessMacCommands+0x3e8>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800c824:	4bb1      	ldr	r3, [pc, #708]	@ (800caec <ProcessMacCommands+0x6a0>)
 800c826:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	4798      	blx	r3
 800c82e:	4603      	mov	r3, r0
 800c830:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                }
                macCmdPayload[0] = batteryLevel;
 800c834:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800c838:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800c83c:	787b      	ldrb	r3, [r7, #1]
 800c83e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c842:	b2db      	uxtb	r3, r3
 800c844:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800c848:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800c84c:	2202      	movs	r2, #2
 800c84e:	4619      	mov	r1, r3
 800c850:	2006      	movs	r0, #6
 800c852:	f003 fa8f 	bl	800fd74 <LoRaMacCommandsAddCmd>
                break;
 800c856:	e2cd      	b.n	800cdf4 <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800c858:	2303      	movs	r3, #3
 800c85a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 800c85e:	78fb      	ldrb	r3, [r7, #3]
 800c860:	1c5a      	adds	r2, r3, #1
 800c862:	70fa      	strb	r2, [r7, #3]
 800c864:	461a      	mov	r2, r3
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	4413      	add	r3, r2
 800c86a:	781b      	ldrb	r3, [r3, #0]
 800c86c:	b25b      	sxtb	r3, r3
 800c86e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
                newChannelReq.NewChannel = &chParam;
 800c872:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800c876:	647b      	str	r3, [r7, #68]	@ 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800c878:	78fb      	ldrb	r3, [r7, #3]
 800c87a:	1c5a      	adds	r2, r3, #1
 800c87c:	70fa      	strb	r2, [r7, #3]
 800c87e:	461a      	mov	r2, r3
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	4413      	add	r3, r2
 800c884:	781b      	ldrb	r3, [r3, #0]
 800c886:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800c888:	78fb      	ldrb	r3, [r7, #3]
 800c88a:	1c5a      	adds	r2, r3, #1
 800c88c:	70fa      	strb	r2, [r7, #3]
 800c88e:	461a      	mov	r2, r3
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	4413      	add	r3, r2
 800c894:	781b      	ldrb	r3, [r3, #0]
 800c896:	021a      	lsls	r2, r3, #8
 800c898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c89a:	4313      	orrs	r3, r2
 800c89c:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800c89e:	78fb      	ldrb	r3, [r7, #3]
 800c8a0:	1c5a      	adds	r2, r3, #1
 800c8a2:	70fa      	strb	r2, [r7, #3]
 800c8a4:	461a      	mov	r2, r3
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	4413      	add	r3, r2
 800c8aa:	781b      	ldrb	r3, [r3, #0]
 800c8ac:	041a      	lsls	r2, r3, #16
 800c8ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8b0:	4313      	orrs	r3, r2
 800c8b2:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency *= 100;
 800c8b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8b6:	2264      	movs	r2, #100	@ 0x64
 800c8b8:	fb02 f303 	mul.w	r3, r2, r3
 800c8bc:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Rx1Frequency = 0;
 800c8be:	2300      	movs	r3, #0
 800c8c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 800c8c2:	78fb      	ldrb	r3, [r7, #3]
 800c8c4:	1c5a      	adds	r2, r3, #1
 800c8c6:	70fa      	strb	r2, [r7, #3]
 800c8c8:	461a      	mov	r2, r3
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	4413      	add	r3, r2
 800c8ce:	781b      	ldrb	r3, [r3, #0]
 800c8d0:	b25b      	sxtb	r3, r3
 800c8d2:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800c8d6:	4b86      	ldr	r3, [pc, #536]	@ (800caf0 <ProcessMacCommands+0x6a4>)
 800c8d8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800c8dc:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800c8e0:	4611      	mov	r1, r2
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	f005 f930 	bl	8011b48 <RegionNewChannelReq>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	b2db      	uxtb	r3, r3
 800c8ec:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 800c8f0:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800c8f4:	b25b      	sxtb	r3, r3
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	f2c0 8273 	blt.w	800cde2 <ProcessMacCommands+0x996>
                {
                    macCmdPayload[0] = status;
 800c8fc:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800c900:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800c904:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800c908:	2201      	movs	r2, #1
 800c90a:	4619      	mov	r1, r3
 800c90c:	2007      	movs	r0, #7
 800c90e:	f003 fa31 	bl	800fd74 <LoRaMacCommandsAddCmd>
                }
                break;
 800c912:	e266      	b.n	800cde2 <ProcessMacCommands+0x996>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800c914:	78fb      	ldrb	r3, [r7, #3]
 800c916:	1c5a      	adds	r2, r3, #1
 800c918:	70fa      	strb	r2, [r7, #3]
 800c91a:	461a      	mov	r2, r3
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	4413      	add	r3, r2
 800c920:	781b      	ldrb	r3, [r3, #0]
 800c922:	f003 030f 	and.w	r3, r3, #15
 800c926:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84

                if( delay == 0 )
 800c92a:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d104      	bne.n	800c93c <ProcessMacCommands+0x4f0>
                {
                    delay++;
 800c932:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800c936:	3301      	adds	r3, #1
 800c938:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800c93c:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800c940:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c944:	fb02 f303 	mul.w	r3, r2, r3
 800c948:	461a      	mov	r2, r3
 800c94a:	4b69      	ldr	r3, [pc, #420]	@ (800caf0 <ProcessMacCommands+0x6a4>)
 800c94c:	659a      	str	r2, [r3, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800c94e:	4b68      	ldr	r3, [pc, #416]	@ (800caf0 <ProcessMacCommands+0x6a4>)
 800c950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c952:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800c956:	4a66      	ldr	r2, [pc, #408]	@ (800caf0 <ProcessMacCommands+0x6a4>)
 800c958:	65d3      	str	r3, [r2, #92]	@ 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800c95a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800c95e:	2200      	movs	r2, #0
 800c960:	4619      	mov	r1, r3
 800c962:	2008      	movs	r0, #8
 800c964:	f003 fa06 	bl	800fd74 <LoRaMacCommandsAddCmd>
                break;
 800c968:	e244      	b.n	800cdf4 <ProcessMacCommands+0x9a8>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800c96a:	78fb      	ldrb	r3, [r7, #3]
 800c96c:	1c5a      	adds	r2, r3, #1
 800c96e:	70fa      	strb	r2, [r7, #3]
 800c970:	461a      	mov	r2, r3
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	4413      	add	r3, r2
 800c976:	781b      	ldrb	r3, [r3, #0]
 800c978:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 800c97c:	2300      	movs	r3, #0
 800c97e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 800c982:	2300      	movs	r3, #0
 800c984:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800c988:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800c98c:	f003 0320 	and.w	r3, r3, #32
 800c990:	2b00      	cmp	r3, #0
 800c992:	d002      	beq.n	800c99a <ProcessMacCommands+0x54e>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800c994:	2301      	movs	r3, #1
 800c996:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800c99a:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800c99e:	f003 0310 	and.w	r3, r3, #16
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d002      	beq.n	800c9ac <ProcessMacCommands+0x560>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800c9a6:	2301      	movs	r3, #1
 800c9a8:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800c9ac:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800c9b0:	f003 030f 	and.w	r3, r3, #15
 800c9b4:	b2db      	uxtb	r3, r3
 800c9b6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800c9ba:	4b4d      	ldr	r3, [pc, #308]	@ (800caf0 <ProcessMacCommands+0x6a4>)
 800c9bc:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800c9c0:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800c9c4:	4611      	mov	r1, r2
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	f005 f8d9 	bl	8011b7e <RegionTxParamSetupReq>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9d2:	f000 8208 	beq.w	800cde6 <ProcessMacCommands+0x99a>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800c9d6:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 800c9da:	4b45      	ldr	r3, [pc, #276]	@ (800caf0 <ProcessMacCommands+0x6a4>)
 800c9dc:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800c9e0:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 800c9e4:	4b42      	ldr	r3, [pc, #264]	@ (800caf0 <ProcessMacCommands+0x6a4>)
 800c9e6:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800c9ea:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800c9ee:	461a      	mov	r2, r3
 800c9f0:	4b40      	ldr	r3, [pc, #256]	@ (800caf4 <ProcessMacCommands+0x6a8>)
 800c9f2:	5c9b      	ldrb	r3, [r3, r2]
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	f7f3 ff3d 	bl	8000874 <__aeabi_ui2f>
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	4a3c      	ldr	r2, [pc, #240]	@ (800caf0 <ProcessMacCommands+0x6a4>)
 800c9fe:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800ca02:	2302      	movs	r3, #2
 800ca04:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ca08:	4b39      	ldr	r3, [pc, #228]	@ (800caf0 <ProcessMacCommands+0x6a4>)
 800ca0a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800ca0e:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ca12:	4b37      	ldr	r3, [pc, #220]	@ (800caf0 <ProcessMacCommands+0x6a4>)
 800ca14:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ca18:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800ca1c:	4611      	mov	r1, r2
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f004 ff4d 	bl	80118be <RegionGetPhyParam>
 800ca24:	4603      	mov	r3, r0
 800ca26:	62bb      	str	r3, [r7, #40]	@ 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800ca28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca2a:	b25a      	sxtb	r2, r3
 800ca2c:	4b30      	ldr	r3, [pc, #192]	@ (800caf0 <ProcessMacCommands+0x6a4>)
 800ca2e:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800ca32:	4293      	cmp	r3, r2
 800ca34:	bfb8      	it	lt
 800ca36:	4613      	movlt	r3, r2
 800ca38:	b25a      	sxtb	r2, r3
 800ca3a:	4b2d      	ldr	r3, [pc, #180]	@ (800caf0 <ProcessMacCommands+0x6a4>)
 800ca3c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800ca40:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800ca44:	2200      	movs	r2, #0
 800ca46:	4619      	mov	r1, r3
 800ca48:	2009      	movs	r0, #9
 800ca4a:	f003 f993 	bl	800fd74 <LoRaMacCommandsAddCmd>
                }
                break;
 800ca4e:	e1ca      	b.n	800cde6 <ProcessMacCommands+0x99a>
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 800ca50:	2303      	movs	r3, #3
 800ca52:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 800ca56:	78fb      	ldrb	r3, [r7, #3]
 800ca58:	1c5a      	adds	r2, r3, #1
 800ca5a:	70fa      	strb	r2, [r7, #3]
 800ca5c:	461a      	mov	r2, r3
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	4413      	add	r3, r2
 800ca62:	781b      	ldrb	r3, [r3, #0]
 800ca64:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800ca68:	78fb      	ldrb	r3, [r7, #3]
 800ca6a:	1c5a      	adds	r2, r3, #1
 800ca6c:	70fa      	strb	r2, [r7, #3]
 800ca6e:	461a      	mov	r2, r3
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	4413      	add	r3, r2
 800ca74:	781b      	ldrb	r3, [r3, #0]
 800ca76:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800ca78:	78fb      	ldrb	r3, [r7, #3]
 800ca7a:	1c5a      	adds	r2, r3, #1
 800ca7c:	70fa      	strb	r2, [r7, #3]
 800ca7e:	461a      	mov	r2, r3
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	4413      	add	r3, r2
 800ca84:	781b      	ldrb	r3, [r3, #0]
 800ca86:	021a      	lsls	r2, r3, #8
 800ca88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca8a:	4313      	orrs	r3, r2
 800ca8c:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800ca8e:	78fb      	ldrb	r3, [r7, #3]
 800ca90:	1c5a      	adds	r2, r3, #1
 800ca92:	70fa      	strb	r2, [r7, #3]
 800ca94:	461a      	mov	r2, r3
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	4413      	add	r3, r2
 800ca9a:	781b      	ldrb	r3, [r3, #0]
 800ca9c:	041a      	lsls	r2, r3, #16
 800ca9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caa0:	4313      	orrs	r3, r2
 800caa2:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency *= 100;
 800caa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caa6:	2264      	movs	r2, #100	@ 0x64
 800caa8:	fb02 f303 	mul.w	r3, r2, r3
 800caac:	627b      	str	r3, [r7, #36]	@ 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800caae:	4b10      	ldr	r3, [pc, #64]	@ (800caf0 <ProcessMacCommands+0x6a4>)
 800cab0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800cab4:	f107 0220 	add.w	r2, r7, #32
 800cab8:	4611      	mov	r1, r2
 800caba:	4618      	mov	r0, r3
 800cabc:	f005 f87a 	bl	8011bb4 <RegionDlChannelReq>
 800cac0:	4603      	mov	r3, r0
 800cac2:	b2db      	uxtb	r3, r3
 800cac4:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 800cac8:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800cacc:	b25b      	sxtb	r3, r3
 800cace:	2b00      	cmp	r3, #0
 800cad0:	f2c0 818b 	blt.w	800cdea <ProcessMacCommands+0x99e>
                {
                    macCmdPayload[0] = status;
 800cad4:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800cad8:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800cadc:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800cae0:	2201      	movs	r2, #1
 800cae2:	4619      	mov	r1, r3
 800cae4:	200a      	movs	r0, #10
 800cae6:	f003 f945 	bl	800fd74 <LoRaMacCommandsAddCmd>
                }
                break;
 800caea:	e17e      	b.n	800cdea <ProcessMacCommands+0x99e>
 800caec:	20000a28 	.word	0x20000a28
 800caf0:	20008000 	.word	0x20008000
 800caf4:	0802101c 	.word	0x0802101c
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800caf8:	2009      	movs	r0, #9
 800cafa:	f003 fc73 	bl	80103e4 <LoRaMacConfirmQueueIsCmdActive>
 800cafe:	4603      	mov	r3, r0
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	f000 8084 	beq.w	800cc0e <ProcessMacCommands+0x7c2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800cb06:	2109      	movs	r1, #9
 800cb08:	2000      	movs	r0, #0
 800cb0a:	f003 fbdf 	bl	80102cc <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 800cb0e:	f107 0318 	add.w	r3, r7, #24
 800cb12:	2200      	movs	r2, #0
 800cb14:	601a      	str	r2, [r3, #0]
 800cb16:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 800cb18:	f107 0310 	add.w	r3, r7, #16
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	601a      	str	r2, [r3, #0]
 800cb20:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 800cb22:	f107 0308 	add.w	r3, r7, #8
 800cb26:	2200      	movs	r2, #0
 800cb28:	601a      	str	r2, [r3, #0]
 800cb2a:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800cb2c:	78fb      	ldrb	r3, [r7, #3]
 800cb2e:	1c5a      	adds	r2, r3, #1
 800cb30:	70fa      	strb	r2, [r7, #3]
 800cb32:	461a      	mov	r2, r3
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	4413      	add	r3, r2
 800cb38:	781b      	ldrb	r3, [r3, #0]
 800cb3a:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800cb3c:	78fb      	ldrb	r3, [r7, #3]
 800cb3e:	1c5a      	adds	r2, r3, #1
 800cb40:	70fa      	strb	r2, [r7, #3]
 800cb42:	461a      	mov	r2, r3
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	4413      	add	r3, r2
 800cb48:	781b      	ldrb	r3, [r3, #0]
 800cb4a:	021a      	lsls	r2, r3, #8
 800cb4c:	69bb      	ldr	r3, [r7, #24]
 800cb4e:	4313      	orrs	r3, r2
 800cb50:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800cb52:	78fb      	ldrb	r3, [r7, #3]
 800cb54:	1c5a      	adds	r2, r3, #1
 800cb56:	70fa      	strb	r2, [r7, #3]
 800cb58:	461a      	mov	r2, r3
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	4413      	add	r3, r2
 800cb5e:	781b      	ldrb	r3, [r3, #0]
 800cb60:	041a      	lsls	r2, r3, #16
 800cb62:	69bb      	ldr	r3, [r7, #24]
 800cb64:	4313      	orrs	r3, r2
 800cb66:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800cb68:	78fb      	ldrb	r3, [r7, #3]
 800cb6a:	1c5a      	adds	r2, r3, #1
 800cb6c:	70fa      	strb	r2, [r7, #3]
 800cb6e:	461a      	mov	r2, r3
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	4413      	add	r3, r2
 800cb74:	781b      	ldrb	r3, [r3, #0]
 800cb76:	061a      	lsls	r2, r3, #24
 800cb78:	69bb      	ldr	r3, [r7, #24]
 800cb7a:	4313      	orrs	r3, r2
 800cb7c:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800cb7e:	78fb      	ldrb	r3, [r7, #3]
 800cb80:	1c5a      	adds	r2, r3, #1
 800cb82:	70fa      	strb	r2, [r7, #3]
 800cb84:	461a      	mov	r2, r3
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	4413      	add	r3, r2
 800cb8a:	781b      	ldrb	r3, [r3, #0]
 800cb8c:	b21b      	sxth	r3, r3
 800cb8e:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800cb90:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800cb94:	461a      	mov	r2, r3
 800cb96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800cb9a:	fb02 f303 	mul.w	r3, r2, r3
 800cb9e:	121b      	asrs	r3, r3, #8
 800cba0:	b21b      	sxth	r3, r3
 800cba2:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 800cba4:	f107 0310 	add.w	r3, r7, #16
 800cba8:	f107 0218 	add.w	r2, r7, #24
 800cbac:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cbb0:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800cbb4:	693a      	ldr	r2, [r7, #16]
 800cbb6:	4b96      	ldr	r3, [pc, #600]	@ (800ce10 <ProcessMacCommands+0x9c4>)
 800cbb8:	4413      	add	r3, r2
 800cbba:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 800cbbc:	f107 0308 	add.w	r3, r7, #8
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f00d fbe7 	bl	801a394 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800cbc6:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 800cbca:	4b92      	ldr	r3, [pc, #584]	@ (800ce14 <ProcessMacCommands+0x9c8>)
 800cbcc:	f8d3 233c 	ldr.w	r2, [r3, #828]	@ 0x33c
 800cbd0:	9200      	str	r2, [sp, #0]
 800cbd2:	f8d3 3338 	ldr.w	r3, [r3, #824]	@ 0x338
 800cbd6:	f107 0210 	add.w	r2, r7, #16
 800cbda:	ca06      	ldmia	r2, {r1, r2}
 800cbdc:	f00d fb73 	bl	801a2c6 <SysTimeSub>
 800cbe0:	f107 0010 	add.w	r0, r7, #16
 800cbe4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cbe6:	9300      	str	r3, [sp, #0]
 800cbe8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cbea:	f107 0208 	add.w	r2, r7, #8
 800cbee:	ca06      	ldmia	r2, {r1, r2}
 800cbf0:	f00d fb30 	bl	801a254 <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 800cbf4:	f107 0310 	add.w	r3, r7, #16
 800cbf8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800cbfc:	f00d fb9c 	bl	801a338 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800cc00:	f002 ff56 	bl	800fab0 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800cc04:	4b83      	ldr	r3, [pc, #524]	@ (800ce14 <ProcessMacCommands+0x9c8>)
 800cc06:	2201      	movs	r2, #1
 800cc08:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 800cc0c:	e0f2      	b.n	800cdf4 <ProcessMacCommands+0x9a8>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800cc0e:	4b81      	ldr	r3, [pc, #516]	@ (800ce14 <ProcessMacCommands+0x9c8>)
 800cc10:	2200      	movs	r2, #0
 800cc12:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
                break;
 800cc16:	e0ed      	b.n	800cdf4 <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800cc18:	200c      	movs	r0, #12
 800cc1a:	f003 fbe3 	bl	80103e4 <LoRaMacConfirmQueueIsCmdActive>
 800cc1e:	4603      	mov	r3, r0
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	f000 80e4 	beq.w	800cdee <ProcessMacCommands+0x9a2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800cc26:	210c      	movs	r1, #12
 800cc28:	2000      	movs	r0, #0
 800cc2a:	f003 fb4f 	bl	80102cc <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800cc2e:	4b79      	ldr	r3, [pc, #484]	@ (800ce14 <ProcessMacCommands+0x9c8>)
 800cc30:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800cc34:	2b04      	cmp	r3, #4
 800cc36:	f000 80da 	beq.w	800cdee <ProcessMacCommands+0x9a2>
 800cc3a:	4b76      	ldr	r3, [pc, #472]	@ (800ce14 <ProcessMacCommands+0x9c8>)
 800cc3c:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800cc40:	2b05      	cmp	r3, #5
 800cc42:	f000 80d4 	beq.w	800cdee <ProcessMacCommands+0x9a2>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 800cc46:	f002 ff14 	bl	800fa72 <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 800cc4a:	e0d0      	b.n	800cdee <ProcessMacCommands+0x9a2>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 800cc4c:	2303      	movs	r3, #3
 800cc4e:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                uint32_t frequency = 0;
 800cc52:	2300      	movs	r3, #0
 800cc54:	67bb      	str	r3, [r7, #120]	@ 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 800cc56:	78fb      	ldrb	r3, [r7, #3]
 800cc58:	1c5a      	adds	r2, r3, #1
 800cc5a:	70fa      	strb	r2, [r7, #3]
 800cc5c:	461a      	mov	r2, r3
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	4413      	add	r3, r2
 800cc62:	781b      	ldrb	r3, [r3, #0]
 800cc64:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800cc66:	78fb      	ldrb	r3, [r7, #3]
 800cc68:	1c5a      	adds	r2, r3, #1
 800cc6a:	70fa      	strb	r2, [r7, #3]
 800cc6c:	461a      	mov	r2, r3
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	4413      	add	r3, r2
 800cc72:	781b      	ldrb	r3, [r3, #0]
 800cc74:	021b      	lsls	r3, r3, #8
 800cc76:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800cc78:	4313      	orrs	r3, r2
 800cc7a:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800cc7c:	78fb      	ldrb	r3, [r7, #3]
 800cc7e:	1c5a      	adds	r2, r3, #1
 800cc80:	70fa      	strb	r2, [r7, #3]
 800cc82:	461a      	mov	r2, r3
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	4413      	add	r3, r2
 800cc88:	781b      	ldrb	r3, [r3, #0]
 800cc8a:	041b      	lsls	r3, r3, #16
 800cc8c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800cc8e:	4313      	orrs	r3, r2
 800cc90:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency *= 100;
 800cc92:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cc94:	2264      	movs	r2, #100	@ 0x64
 800cc96:	fb02 f303 	mul.w	r3, r2, r3
 800cc9a:	67bb      	str	r3, [r7, #120]	@ 0x78
                datarate = payload[macIndex++] & 0x0F;
 800cc9c:	78fb      	ldrb	r3, [r7, #3]
 800cc9e:	1c5a      	adds	r2, r3, #1
 800cca0:	70fa      	strb	r2, [r7, #3]
 800cca2:	461a      	mov	r2, r3
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	4413      	add	r3, r2
 800cca8:	781b      	ldrb	r3, [r3, #0]
 800ccaa:	f003 030f 	and.w	r3, r3, #15
 800ccae:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800ccb2:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800ccb6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800ccb8:	4618      	mov	r0, r3
 800ccba:	f002 fee0 	bl	800fa7e <LoRaMacClassBPingSlotChannelReq>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                macCmdPayload[0] = status;
 800ccc4:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 800ccc8:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 800cccc:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800ccd0:	2201      	movs	r2, #1
 800ccd2:	4619      	mov	r1, r3
 800ccd4:	2011      	movs	r0, #17
 800ccd6:	f003 f84d 	bl	800fd74 <LoRaMacCommandsAddCmd>
#endif /* LORAMAC_VERSION */
                break;
 800ccda:	e08b      	b.n	800cdf4 <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800ccdc:	200d      	movs	r0, #13
 800ccde:	f003 fb81 	bl	80103e4 <LoRaMacConfirmQueueIsCmdActive>
 800cce2:	4603      	mov	r3, r0
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	f000 8084 	beq.w	800cdf2 <ProcessMacCommands+0x9a6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800ccea:	210d      	movs	r1, #13
 800ccec:	2000      	movs	r0, #0
 800ccee:	f003 faed 	bl	80102cc <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    uint8_t beaconTimingChannel = 0;
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800ccfe:	78fb      	ldrb	r3, [r7, #3]
 800cd00:	1c5a      	adds	r2, r3, #1
 800cd02:	70fa      	strb	r2, [r7, #3]
 800cd04:	461a      	mov	r2, r3
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	4413      	add	r3, r2
 800cd0a:	781b      	ldrb	r3, [r3, #0]
 800cd0c:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800cd10:	78fb      	ldrb	r3, [r7, #3]
 800cd12:	1c5a      	adds	r2, r3, #1
 800cd14:	70fa      	strb	r2, [r7, #3]
 800cd16:	461a      	mov	r2, r3
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	4413      	add	r3, r2
 800cd1c:	781b      	ldrb	r3, [r3, #0]
 800cd1e:	021b      	lsls	r3, r3, #8
 800cd20:	b21a      	sxth	r2, r3
 800cd22:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 800cd26:	4313      	orrs	r3, r2
 800cd28:	b21b      	sxth	r3, r3
 800cd2a:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingChannel = payload[macIndex++];
 800cd2e:	78fb      	ldrb	r3, [r7, #3]
 800cd30:	1c5a      	adds	r2, r3, #1
 800cd32:	70fa      	strb	r2, [r7, #3]
 800cd34:	461a      	mov	r2, r3
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	4413      	add	r3, r2
 800cd3a:	781b      	ldrb	r3, [r3, #0]
 800cd3c:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800cd40:	4b35      	ldr	r3, [pc, #212]	@ (800ce18 <ProcessMacCommands+0x9cc>)
 800cd42:	681a      	ldr	r2, [r3, #0]
 800cd44:	f897 107d 	ldrb.w	r1, [r7, #125]	@ 0x7d
 800cd48:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	f002 fea2 	bl	800fa96 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 800cd52:	e04e      	b.n	800cdf2 <ProcessMacCommands+0x9a6>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 800cd54:	2300      	movs	r3, #0
 800cd56:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 800cd5a:	78fb      	ldrb	r3, [r7, #3]
 800cd5c:	1c5a      	adds	r2, r3, #1
 800cd5e:	70fa      	strb	r2, [r7, #3]
 800cd60:	461a      	mov	r2, r3
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	4413      	add	r3, r2
 800cd66:	781b      	ldrb	r3, [r3, #0]
 800cd68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800cd6c:	78fb      	ldrb	r3, [r7, #3]
 800cd6e:	1c5a      	adds	r2, r3, #1
 800cd70:	70fa      	strb	r2, [r7, #3]
 800cd72:	461a      	mov	r2, r3
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	4413      	add	r3, r2
 800cd78:	781b      	ldrb	r3, [r3, #0]
 800cd7a:	021b      	lsls	r3, r3, #8
 800cd7c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800cd80:	4313      	orrs	r3, r2
 800cd82:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800cd86:	78fb      	ldrb	r3, [r7, #3]
 800cd88:	1c5a      	adds	r2, r3, #1
 800cd8a:	70fa      	strb	r2, [r7, #3]
 800cd8c:	461a      	mov	r2, r3
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	4413      	add	r3, r2
 800cd92:	781b      	ldrb	r3, [r3, #0]
 800cd94:	041b      	lsls	r3, r3, #16
 800cd96:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800cd9a:	4313      	orrs	r3, r2
 800cd9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency *= 100;
 800cda0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800cda4:	2264      	movs	r2, #100	@ 0x64
 800cda6:	fb02 f303 	mul.w	r3, r2, r3
 800cdaa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800cdae:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800cdb2:	f002 fe83 	bl	800fabc <LoRaMacClassBBeaconFreqReq>
 800cdb6:	4603      	mov	r3, r0
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d003      	beq.n	800cdc4 <ProcessMacCommands+0x978>
                    {
                        macCmdPayload[0] = 1;
 800cdbc:	2301      	movs	r3, #1
 800cdbe:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
 800cdc2:	e002      	b.n	800cdca <ProcessMacCommands+0x97e>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800cdca:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800cdce:	2201      	movs	r2, #1
 800cdd0:	4619      	mov	r1, r3
 800cdd2:	2013      	movs	r0, #19
 800cdd4:	f002 ffce 	bl	800fd74 <LoRaMacCommandsAddCmd>
                }
                break;
 800cdd8:	e00c      	b.n	800cdf4 <ProcessMacCommands+0x9a8>
                break;
 800cdda:	bf00      	nop
 800cddc:	e00a      	b.n	800cdf4 <ProcessMacCommands+0x9a8>
                break;
 800cdde:	bf00      	nop
 800cde0:	e008      	b.n	800cdf4 <ProcessMacCommands+0x9a8>
                break;
 800cde2:	bf00      	nop
 800cde4:	e006      	b.n	800cdf4 <ProcessMacCommands+0x9a8>
                break;
 800cde6:	bf00      	nop
 800cde8:	e004      	b.n	800cdf4 <ProcessMacCommands+0x9a8>
                break;
 800cdea:	bf00      	nop
 800cdec:	e002      	b.n	800cdf4 <ProcessMacCommands+0x9a8>
                break;
 800cdee:	bf00      	nop
 800cdf0:	e000      	b.n	800cdf4 <ProcessMacCommands+0x9a8>
                break;
 800cdf2:	bf00      	nop
    while( macIndex < commandsSize )
 800cdf4:	78fa      	ldrb	r2, [r7, #3]
 800cdf6:	78bb      	ldrb	r3, [r7, #2]
 800cdf8:	429a      	cmp	r2, r3
 800cdfa:	f4ff ab49 	bcc.w	800c490 <ProcessMacCommands+0x44>
 800cdfe:	e004      	b.n	800ce0a <ProcessMacCommands+0x9be>
        return;
 800ce00:	bf00      	nop
 800ce02:	e002      	b.n	800ce0a <ProcessMacCommands+0x9be>
            return;
 800ce04:	bf00      	nop
 800ce06:	e000      	b.n	800ce0a <ProcessMacCommands+0x9be>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 800ce08:	bf00      	nop
        }
    }
}
 800ce0a:	378c      	adds	r7, #140	@ 0x8c
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bd90      	pop	{r4, r7, pc}
 800ce10:	12d53d80 	.word	0x12d53d80
 800ce14:	20000a28 	.word	0x20000a28
 800ce18:	20000fdc 	.word	0x20000fdc

0800ce1c <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b08e      	sub	sp, #56	@ 0x38
 800ce20:	af02      	add	r7, sp, #8
 800ce22:	60f8      	str	r0, [r7, #12]
 800ce24:	607a      	str	r2, [r7, #4]
 800ce26:	461a      	mov	r2, r3
 800ce28:	460b      	mov	r3, r1
 800ce2a:	72fb      	strb	r3, [r7, #11]
 800ce2c:	4613      	mov	r3, r2
 800ce2e:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ce30:	2303      	movs	r3, #3
 800ce32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800ce36:	4b66      	ldr	r3, [pc, #408]	@ (800cfd0 <Send+0x1b4>)
 800ce38:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800ce3c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800ce40:	4b63      	ldr	r3, [pc, #396]	@ (800cfd0 <Send+0x1b4>)
 800ce42:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ce46:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800ce4a:	4b61      	ldr	r3, [pc, #388]	@ (800cfd0 <Send+0x1b4>)
 800ce4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800ce50:	4b5f      	ldr	r3, [pc, #380]	@ (800cfd0 <Send+0x1b4>)
 800ce52:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d101      	bne.n	800ce5e <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800ce5a:	2307      	movs	r3, #7
 800ce5c:	e0b4      	b.n	800cfc8 <Send+0x1ac>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800ce5e:	4b5c      	ldr	r3, [pc, #368]	@ (800cfd0 <Send+0x1b4>)
 800ce60:	f893 311b 	ldrb.w	r3, [r3, #283]	@ 0x11b
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d102      	bne.n	800ce6e <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800ce68:	4b59      	ldr	r3, [pc, #356]	@ (800cfd0 <Send+0x1b4>)
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    fCtrl.Value = 0;
 800ce6e:	2300      	movs	r3, #0
 800ce70:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 800ce74:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800ce78:	f023 030f 	bic.w	r3, r3, #15
 800ce7c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800ce80:	4b53      	ldr	r3, [pc, #332]	@ (800cfd0 <Send+0x1b4>)
 800ce82:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 800ce86:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800ce8a:	f362 13c7 	bfi	r3, r2, #7, #1
 800ce8e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800ce92:	4b4f      	ldr	r3, [pc, #316]	@ (800cfd0 <Send+0x1b4>)
 800ce94:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800ce98:	2b01      	cmp	r3, #1
 800ce9a:	d106      	bne.n	800ceaa <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 800ce9c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800cea0:	f043 0310 	orr.w	r3, r3, #16
 800cea4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 800cea8:	e005      	b.n	800ceb6 <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 800ceaa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800ceae:	f023 0310 	bic.w	r3, r3, #16
 800ceb2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800ceb6:	4b46      	ldr	r3, [pc, #280]	@ (800cfd0 <Send+0x1b4>)
 800ceb8:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d005      	beq.n	800cecc <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 800cec0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800cec4:	f043 0320 	orr.w	r3, r3, #32
 800cec8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // ADR next request
    adrNext.UpdateChanMask = true;
 800cecc:	2301      	movs	r3, #1
 800cece:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800ced0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800ced4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800ced8:	b2db      	uxtb	r3, r3
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	bf14      	ite	ne
 800cede:	2301      	movne	r3, #1
 800cee0:	2300      	moveq	r3, #0
 800cee2:	b2db      	uxtb	r3, r3
 800cee4:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800cee6:	4b3a      	ldr	r3, [pc, #232]	@ (800cfd0 <Send+0x1b4>)
 800cee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ceea:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800ceec:	4b38      	ldr	r3, [pc, #224]	@ (800cfd0 <Send+0x1b4>)
 800ceee:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 800cef2:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800cef4:	4b36      	ldr	r3, [pc, #216]	@ (800cfd0 <Send+0x1b4>)
 800cef6:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 800cefa:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800cefc:	4b34      	ldr	r3, [pc, #208]	@ (800cfd0 <Send+0x1b4>)
 800cefe:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800cf02:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800cf06:	4b32      	ldr	r3, [pc, #200]	@ (800cfd0 <Send+0x1b4>)
 800cf08:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800cf0c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800cf10:	4b2f      	ldr	r3, [pc, #188]	@ (800cfd0 <Send+0x1b4>)
 800cf12:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800cf16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 800cf1a:	4b2d      	ldr	r3, [pc, #180]	@ (800cfd0 <Send+0x1b4>)
 800cf1c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800cf20:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800cf24:	4b2a      	ldr	r3, [pc, #168]	@ (800cfd0 <Send+0x1b4>)
 800cf26:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800cf2a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800cf2e:	f107 0014 	add.w	r0, r7, #20
 800cf32:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800cf36:	9300      	str	r3, [sp, #0]
 800cf38:	4b26      	ldr	r3, [pc, #152]	@ (800cfd4 <Send+0x1b8>)
 800cf3a:	4a27      	ldr	r2, [pc, #156]	@ (800cfd8 <Send+0x1bc>)
 800cf3c:	4927      	ldr	r1, [pc, #156]	@ (800cfdc <Send+0x1c0>)
 800cf3e:	f002 fc37 	bl	800f7b0 <LoRaMacAdrCalcNext>
 800cf42:	4603      	mov	r3, r0
 800cf44:	461a      	mov	r2, r3
 800cf46:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800cf4a:	f362 1386 	bfi	r3, r2, #6, #1
 800cf4e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800cf52:	7afa      	ldrb	r2, [r7, #11]
 800cf54:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800cf58:	893b      	ldrh	r3, [r7, #8]
 800cf5a:	9300      	str	r3, [sp, #0]
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	68f8      	ldr	r0, [r7, #12]
 800cf60:	f000 fc72 	bl	800d848 <PrepareFrame>
 800cf64:	4603      	mov	r3, r0
 800cf66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800cf6a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d003      	beq.n	800cf7a <Send+0x15e>
 800cf72:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cf76:	2b0a      	cmp	r3, #10
 800cf78:	d107      	bne.n	800cf8a <Send+0x16e>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 800cf7a:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800cf7e:	4618      	mov	r0, r3
 800cf80:	f000 f962 	bl	800d248 <ScheduleTx>
 800cf84:	4603      	mov	r3, r0
 800cf86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 800cf8a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d00a      	beq.n	800cfa8 <Send+0x18c>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800cf92:	4a0f      	ldr	r2, [pc, #60]	@ (800cfd0 <Send+0x1b4>)
 800cf94:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800cf98:	f882 3039 	strb.w	r3, [r2, #57]	@ 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800cf9c:	4a0c      	ldr	r2, [pc, #48]	@ (800cfd0 <Send+0x1b4>)
 800cf9e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800cfa2:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
 800cfa6:	e00d      	b.n	800cfc4 <Send+0x1a8>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 800cfa8:	4b09      	ldr	r3, [pc, #36]	@ (800cfd0 <Send+0x1b4>)
 800cfaa:	2200      	movs	r2, #0
 800cfac:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800cfb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfb2:	4a07      	ldr	r2, [pc, #28]	@ (800cfd0 <Send+0x1b4>)
 800cfb4:	6293      	str	r3, [r2, #40]	@ 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800cfb6:	f002 ff83 	bl	800fec0 <LoRaMacCommandsRemoveNoneStickyCmds>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d001      	beq.n	800cfc4 <Send+0x1a8>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800cfc0:	2313      	movs	r3, #19
 800cfc2:	e001      	b.n	800cfc8 <Send+0x1ac>
        }
    }
    return status;
 800cfc4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800cfc8:	4618      	mov	r0, r3
 800cfca:	3730      	adds	r7, #48	@ 0x30
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	bd80      	pop	{r7, pc}
 800cfd0:	20008000 	.word	0x20008000
 800cfd4:	20008068 	.word	0x20008068
 800cfd8:	20008038 	.word	0x20008038
 800cfdc:	20008039 	.word	0x20008039

0800cfe0 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b084      	sub	sp, #16
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	4603      	mov	r3, r0
 800cfe8:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800cfea:	2300      	movs	r3, #0
 800cfec:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 800cfee:	2300      	movs	r3, #0
 800cff0:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 800cff2:	2301      	movs	r3, #1
 800cff4:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 800cff6:	79fb      	ldrb	r3, [r7, #7]
 800cff8:	2bff      	cmp	r3, #255	@ 0xff
 800cffa:	d11f      	bne.n	800d03c <SendReJoinReq+0x5c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 800cffc:	2000      	movs	r0, #0
 800cffe:	f7ff f8eb 	bl	800c1d8 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800d002:	4b15      	ldr	r3, [pc, #84]	@ (800d058 <SendReJoinReq+0x78>)
 800d004:	2200      	movs	r2, #0
 800d006:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800d00a:	4b13      	ldr	r3, [pc, #76]	@ (800d058 <SendReJoinReq+0x78>)
 800d00c:	4a13      	ldr	r2, [pc, #76]	@ (800d05c <SendReJoinReq+0x7c>)
 800d00e:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800d012:	4b11      	ldr	r3, [pc, #68]	@ (800d058 <SendReJoinReq+0x78>)
 800d014:	22ff      	movs	r2, #255	@ 0xff
 800d016:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 800d01a:	7b3b      	ldrb	r3, [r7, #12]
 800d01c:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 800d020:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800d022:	7b3a      	ldrb	r2, [r7, #12]
 800d024:	4b0c      	ldr	r3, [pc, #48]	@ (800d058 <SendReJoinReq+0x78>)
 800d026:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d

            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 800d02a:	480d      	ldr	r0, [pc, #52]	@ (800d060 <SendReJoinReq+0x80>)
 800d02c:	f009 fe64 	bl	8016cf8 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 800d030:	480c      	ldr	r0, [pc, #48]	@ (800d064 <SendReJoinReq+0x84>)
 800d032:	f009 fe17 	bl	8016c64 <SecureElementGetDevEui>

            allowDelayedTx = false;
 800d036:	2300      	movs	r3, #0
 800d038:	73fb      	strb	r3, [r7, #15]

            break;
 800d03a:	e002      	b.n	800d042 <SendReJoinReq+0x62>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800d03c:	2302      	movs	r3, #2
 800d03e:	73bb      	strb	r3, [r7, #14]
            break;
 800d040:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 800d042:	7bfb      	ldrb	r3, [r7, #15]
 800d044:	4618      	mov	r0, r3
 800d046:	f000 f8ff 	bl	800d248 <ScheduleTx>
 800d04a:	4603      	mov	r3, r0
 800d04c:	73bb      	strb	r3, [r7, #14]
    return status;
 800d04e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d050:	4618      	mov	r0, r3
 800d052:	3710      	adds	r7, #16
 800d054:	46bd      	mov	sp, r7
 800d056:	bd80      	pop	{r7, pc}
 800d058:	20000a28 	.word	0x20000a28
 800d05c:	20000a2a 	.word	0x20000a2a
 800d060:	20000b36 	.word	0x20000b36
 800d064:	20000b3e 	.word	0x20000b3e

0800d068 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800d06c:	f002 fcb0 	bl	800f9d0 <LoRaMacClassBIsBeaconExpected>
 800d070:	4603      	mov	r3, r0
 800d072:	2b00      	cmp	r3, #0
 800d074:	d001      	beq.n	800d07a <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800d076:	230e      	movs	r3, #14
 800d078:	e013      	b.n	800d0a2 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800d07a:	4b0b      	ldr	r3, [pc, #44]	@ (800d0a8 <CheckForClassBCollision+0x40>)
 800d07c:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800d080:	2b01      	cmp	r3, #1
 800d082:	d10d      	bne.n	800d0a0 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800d084:	f002 fcab 	bl	800f9de <LoRaMacClassBIsPingExpected>
 800d088:	4603      	mov	r3, r0
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d001      	beq.n	800d092 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800d08e:	230f      	movs	r3, #15
 800d090:	e007      	b.n	800d0a2 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800d092:	f002 fcab 	bl	800f9ec <LoRaMacClassBIsMulticastExpected>
 800d096:	4603      	mov	r3, r0
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d001      	beq.n	800d0a0 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800d09c:	230f      	movs	r3, #15
 800d09e:	e000      	b.n	800d0a2 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 800d0a0:	2300      	movs	r3, #0
}
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	bd80      	pop	{r7, pc}
 800d0a6:	bf00      	nop
 800d0a8:	20008000 	.word	0x20008000

0800d0ac <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 800d0ac:	b590      	push	{r4, r7, lr}
 800d0ae:	b083      	sub	sp, #12
 800d0b0:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800d0b2:	4b2d      	ldr	r3, [pc, #180]	@ (800d168 <ComputeRxWindowParameters+0xbc>)
 800d0b4:	f893 4048 	ldrb.w	r4, [r3, #72]	@ 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800d0b8:	4b2b      	ldr	r3, [pc, #172]	@ (800d168 <ComputeRxWindowParameters+0xbc>)
 800d0ba:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800d0be:	4b2a      	ldr	r3, [pc, #168]	@ (800d168 <ComputeRxWindowParameters+0xbc>)
 800d0c0:	f893 107d 	ldrb.w	r1, [r3, #125]	@ 0x7d
 800d0c4:	4b28      	ldr	r3, [pc, #160]	@ (800d168 <ComputeRxWindowParameters+0xbc>)
 800d0c6:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 800d0ca:	4b27      	ldr	r3, [pc, #156]	@ (800d168 <ComputeRxWindowParameters+0xbc>)
 800d0cc:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800d0d0:	b25b      	sxtb	r3, r3
 800d0d2:	f004 fdd3 	bl	8011c7c <RegionApplyDrOffset>
 800d0d6:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800d0d8:	b259      	sxtb	r1, r3
 800d0da:	4b23      	ldr	r3, [pc, #140]	@ (800d168 <ComputeRxWindowParameters+0xbc>)
 800d0dc:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 800d0e0:	4b21      	ldr	r3, [pc, #132]	@ (800d168 <ComputeRxWindowParameters+0xbc>)
 800d0e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d0e4:	4821      	ldr	r0, [pc, #132]	@ (800d16c <ComputeRxWindowParameters+0xc0>)
 800d0e6:	9000      	str	r0, [sp, #0]
 800d0e8:	4620      	mov	r0, r4
 800d0ea:	f004 fc89 	bl	8011a00 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800d0ee:	4b1e      	ldr	r3, [pc, #120]	@ (800d168 <ComputeRxWindowParameters+0xbc>)
 800d0f0:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 800d0f4:	4b1c      	ldr	r3, [pc, #112]	@ (800d168 <ComputeRxWindowParameters+0xbc>)
 800d0f6:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800d0fa:	b259      	sxtb	r1, r3
 800d0fc:	4b1a      	ldr	r3, [pc, #104]	@ (800d168 <ComputeRxWindowParameters+0xbc>)
 800d0fe:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 800d102:	4b19      	ldr	r3, [pc, #100]	@ (800d168 <ComputeRxWindowParameters+0xbc>)
 800d104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d106:	4c1a      	ldr	r4, [pc, #104]	@ (800d170 <ComputeRxWindowParameters+0xc4>)
 800d108:	9400      	str	r4, [sp, #0]
 800d10a:	f004 fc79 	bl	8011a00 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800d10e:	4b16      	ldr	r3, [pc, #88]	@ (800d168 <ComputeRxWindowParameters+0xbc>)
 800d110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d112:	4a18      	ldr	r2, [pc, #96]	@ (800d174 <ComputeRxWindowParameters+0xc8>)
 800d114:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 800d118:	4413      	add	r3, r2
 800d11a:	4a16      	ldr	r2, [pc, #88]	@ (800d174 <ComputeRxWindowParameters+0xc8>)
 800d11c:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800d120:	4b11      	ldr	r3, [pc, #68]	@ (800d168 <ComputeRxWindowParameters+0xbc>)
 800d122:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800d124:	4a13      	ldr	r2, [pc, #76]	@ (800d174 <ComputeRxWindowParameters+0xc8>)
 800d126:	f8d2 23dc 	ldr.w	r2, [r2, #988]	@ 0x3dc
 800d12a:	4413      	add	r3, r2
 800d12c:	4a11      	ldr	r2, [pc, #68]	@ (800d174 <ComputeRxWindowParameters+0xc8>)
 800d12e:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4

    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 800d132:	4b10      	ldr	r3, [pc, #64]	@ (800d174 <ComputeRxWindowParameters+0xc8>)
 800d134:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800d138:	2b04      	cmp	r3, #4
 800d13a:	d011      	beq.n	800d160 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800d13c:	4b0a      	ldr	r3, [pc, #40]	@ (800d168 <ComputeRxWindowParameters+0xbc>)
 800d13e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d140:	4a0c      	ldr	r2, [pc, #48]	@ (800d174 <ComputeRxWindowParameters+0xc8>)
 800d142:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 800d146:	4413      	add	r3, r2
 800d148:	4a0a      	ldr	r2, [pc, #40]	@ (800d174 <ComputeRxWindowParameters+0xc8>)
 800d14a:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800d14e:	4b06      	ldr	r3, [pc, #24]	@ (800d168 <ComputeRxWindowParameters+0xbc>)
 800d150:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d152:	4a08      	ldr	r2, [pc, #32]	@ (800d174 <ComputeRxWindowParameters+0xc8>)
 800d154:	f8d2 23dc 	ldr.w	r2, [r2, #988]	@ 0x3dc
 800d158:	4413      	add	r3, r2
 800d15a:	4a06      	ldr	r2, [pc, #24]	@ (800d174 <ComputeRxWindowParameters+0xc8>)
 800d15c:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4
    }
}
 800d160:	bf00      	nop
 800d162:	3704      	adds	r7, #4
 800d164:	46bd      	mov	sp, r7
 800d166:	bd90      	pop	{r4, r7, pc}
 800d168:	20008000 	.word	0x20008000
 800d16c:	20000de0 	.word	0x20000de0
 800d170:	20000df8 	.word	0x20000df8
 800d174:	20000a28 	.word	0x20000a28

0800d178 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b082      	sub	sp, #8
 800d17c:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 800d17e:	2300      	movs	r3, #0
 800d180:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800d182:	4b13      	ldr	r3, [pc, #76]	@ (800d1d0 <VerifyTxFrame+0x58>)
 800d184:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d01b      	beq.n	800d1c4 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800d18c:	1d3b      	adds	r3, r7, #4
 800d18e:	4618      	mov	r0, r3
 800d190:	f002 fee6 	bl	800ff60 <LoRaMacCommandsGetSizeSerializedCmds>
 800d194:	4603      	mov	r3, r0
 800d196:	2b00      	cmp	r3, #0
 800d198:	d001      	beq.n	800d19e <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d19a:	2313      	movs	r3, #19
 800d19c:	e013      	b.n	800d1c6 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800d19e:	4b0d      	ldr	r3, [pc, #52]	@ (800d1d4 <VerifyTxFrame+0x5c>)
 800d1a0:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800d1a4:	4a0a      	ldr	r2, [pc, #40]	@ (800d1d0 <VerifyTxFrame+0x58>)
 800d1a6:	f992 1039 	ldrsb.w	r1, [r2, #57]	@ 0x39
 800d1aa:	687a      	ldr	r2, [r7, #4]
 800d1ac:	b2d2      	uxtb	r2, r2
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	f7ff f924 	bl	800c3fc <ValidatePayloadLength>
 800d1b4:	4603      	mov	r3, r0
 800d1b6:	f083 0301 	eor.w	r3, r3, #1
 800d1ba:	b2db      	uxtb	r3, r3
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d001      	beq.n	800d1c4 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 800d1c0:	2308      	movs	r3, #8
 800d1c2:	e000      	b.n	800d1c6 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 800d1c4:	2300      	movs	r3, #0
}
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	3708      	adds	r7, #8
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}
 800d1ce:	bf00      	nop
 800d1d0:	20008000 	.word	0x20008000
 800d1d4:	20000a28 	.word	0x20000a28

0800d1d8 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b082      	sub	sp, #8
 800d1dc:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 800d1de:	4b18      	ldr	r3, [pc, #96]	@ (800d240 <SerializeTxFrame+0x68>)
 800d1e0:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d002      	beq.n	800d1ee <SerializeTxFrame+0x16>
 800d1e8:	2b04      	cmp	r3, #4
 800d1ea:	d011      	beq.n	800d210 <SerializeTxFrame+0x38>
 800d1ec:	e021      	b.n	800d232 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800d1ee:	4815      	ldr	r0, [pc, #84]	@ (800d244 <SerializeTxFrame+0x6c>)
 800d1f0:	f004 f9d9 	bl	80115a6 <LoRaMacSerializerJoinRequest>
 800d1f4:	4603      	mov	r3, r0
 800d1f6:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800d1f8:	79fb      	ldrb	r3, [r7, #7]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d001      	beq.n	800d202 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800d1fe:	2311      	movs	r3, #17
 800d200:	e01a      	b.n	800d238 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800d202:	4b0f      	ldr	r3, [pc, #60]	@ (800d240 <SerializeTxFrame+0x68>)
 800d204:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800d208:	461a      	mov	r2, r3
 800d20a:	4b0d      	ldr	r3, [pc, #52]	@ (800d240 <SerializeTxFrame+0x68>)
 800d20c:	801a      	strh	r2, [r3, #0]
            break;
 800d20e:	e012      	b.n	800d236 <SerializeTxFrame+0x5e>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800d210:	480c      	ldr	r0, [pc, #48]	@ (800d244 <SerializeTxFrame+0x6c>)
 800d212:	f004 fa4a 	bl	80116aa <LoRaMacSerializerData>
 800d216:	4603      	mov	r3, r0
 800d218:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800d21a:	79fb      	ldrb	r3, [r7, #7]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d001      	beq.n	800d224 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800d220:	2311      	movs	r3, #17
 800d222:	e009      	b.n	800d238 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800d224:	4b06      	ldr	r3, [pc, #24]	@ (800d240 <SerializeTxFrame+0x68>)
 800d226:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800d22a:	461a      	mov	r2, r3
 800d22c:	4b04      	ldr	r3, [pc, #16]	@ (800d240 <SerializeTxFrame+0x68>)
 800d22e:	801a      	strh	r2, [r3, #0]
            break;
 800d230:	e001      	b.n	800d236 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800d232:	2303      	movs	r3, #3
 800d234:	e000      	b.n	800d238 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 800d236:	2300      	movs	r3, #0
}
 800d238:	4618      	mov	r0, r3
 800d23a:	3708      	adds	r7, #8
 800d23c:	46bd      	mov	sp, r7
 800d23e:	bd80      	pop	{r7, pc}
 800d240:	20000a28 	.word	0x20000a28
 800d244:	20000b30 	.word	0x20000b30

0800d248 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b090      	sub	sp, #64	@ 0x40
 800d24c:	af02      	add	r7, sp, #8
 800d24e:	4603      	mov	r3, r0
 800d250:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800d252:	2303      	movs	r3, #3
 800d254:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 800d258:	f7ff ff06 	bl	800d068 <CheckForClassBCollision>
 800d25c:	4603      	mov	r3, r0
 800d25e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 800d262:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d266:	2b00      	cmp	r3, #0
 800d268:	d002      	beq.n	800d270 <ScheduleTx+0x28>
    {
        return status;
 800d26a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d26e:	e092      	b.n	800d396 <ScheduleTx+0x14e>
    }

    // Update back-off
    CalculateBackOff( );
 800d270:	f000 f8f8 	bl	800d464 <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 800d274:	f7ff ffb0 	bl	800d1d8 <SerializeTxFrame>
 800d278:	4603      	mov	r3, r0
 800d27a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 800d27e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d282:	2b00      	cmp	r3, #0
 800d284:	d002      	beq.n	800d28c <ScheduleTx+0x44>
    {
        return status;
 800d286:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d28a:	e084      	b.n	800d396 <ScheduleTx+0x14e>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800d28c:	4b44      	ldr	r3, [pc, #272]	@ (800d3a0 <ScheduleTx+0x158>)
 800d28e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d290:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800d292:	4b43      	ldr	r3, [pc, #268]	@ (800d3a0 <ScheduleTx+0x158>)
 800d294:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800d298:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800d29a:	4b41      	ldr	r3, [pc, #260]	@ (800d3a0 <ScheduleTx+0x158>)
 800d29c:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800d2a0:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800d2a2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	f00d f8ac 	bl	801a404 <SysTimeGetMcuTime>
 800d2ac:	4638      	mov	r0, r7
 800d2ae:	4b3c      	ldr	r3, [pc, #240]	@ (800d3a0 <ScheduleTx+0x158>)
 800d2b0:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
 800d2b4:	9200      	str	r2, [sp, #0]
 800d2b6:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800d2ba:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800d2be:	ca06      	ldmia	r2, {r1, r2}
 800d2c0:	f00d f801 	bl	801a2c6 <SysTimeSub>
 800d2c4:	f107 0320 	add.w	r3, r7, #32
 800d2c8:	463a      	mov	r2, r7
 800d2ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d2ce:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800d2d2:	4b33      	ldr	r3, [pc, #204]	@ (800d3a0 <ScheduleTx+0x158>)
 800d2d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2d6:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 800d2d8:	2300      	movs	r3, #0
 800d2da:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    nextChan.Joined = true;
 800d2de:	2301      	movs	r3, #1
 800d2e0:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800d2e2:	4b30      	ldr	r3, [pc, #192]	@ (800d3a4 <ScheduleTx+0x15c>)
 800d2e4:	881b      	ldrh	r3, [r3, #0]
 800d2e6:	857b      	strh	r3, [r7, #42]	@ 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800d2e8:	4b2d      	ldr	r3, [pc, #180]	@ (800d3a0 <ScheduleTx+0x158>)
 800d2ea:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d104      	bne.n	800d2fc <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 800d2f2:	2301      	movs	r3, #1
 800d2f4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        nextChan.Joined = false;
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800d2fc:	4b28      	ldr	r3, [pc, #160]	@ (800d3a0 <ScheduleTx+0x158>)
 800d2fe:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800d302:	f107 0114 	add.w	r1, r7, #20
 800d306:	4b28      	ldr	r3, [pc, #160]	@ (800d3a8 <ScheduleTx+0x160>)
 800d308:	9300      	str	r3, [sp, #0]
 800d30a:	4b28      	ldr	r3, [pc, #160]	@ (800d3ac <ScheduleTx+0x164>)
 800d30c:	4a28      	ldr	r2, [pc, #160]	@ (800d3b0 <ScheduleTx+0x168>)
 800d30e:	f004 fc92 	bl	8011c36 <RegionNextChannel>
 800d312:	4603      	mov	r3, r0
 800d314:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( status != LORAMAC_STATUS_OK )
 800d318:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d025      	beq.n	800d36c <ScheduleTx+0x124>
    {
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 800d320:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d324:	2b0b      	cmp	r3, #11
 800d326:	d11e      	bne.n	800d366 <ScheduleTx+0x11e>
        {
            if( MacCtx.DutyCycleWaitTime != 0 )
 800d328:	4b1e      	ldr	r3, [pc, #120]	@ (800d3a4 <ScheduleTx+0x15c>)
 800d32a:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d01c      	beq.n	800d36c <ScheduleTx+0x124>
            {
                if( allowDelayedTx == true )
 800d332:	7bfb      	ldrb	r3, [r7, #15]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d013      	beq.n	800d360 <ScheduleTx+0x118>
                {
                    // Allow delayed transmissions. We have to allow it in case
                    // the MAC must retransmit a frame with the frame repetitions
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800d338:	4b1a      	ldr	r3, [pc, #104]	@ (800d3a4 <ScheduleTx+0x15c>)
 800d33a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800d33e:	f043 0320 	orr.w	r3, r3, #32
 800d342:	4a18      	ldr	r2, [pc, #96]	@ (800d3a4 <ScheduleTx+0x15c>)
 800d344:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800d348:	4b16      	ldr	r3, [pc, #88]	@ (800d3a4 <ScheduleTx+0x15c>)
 800d34a:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 800d34e:	4619      	mov	r1, r3
 800d350:	4818      	ldr	r0, [pc, #96]	@ (800d3b4 <ScheduleTx+0x16c>)
 800d352:	f00d fa01 	bl	801a758 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 800d356:	4817      	ldr	r0, [pc, #92]	@ (800d3b4 <ScheduleTx+0x16c>)
 800d358:	f00d f920 	bl	801a59c <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 800d35c:	2300      	movs	r3, #0
 800d35e:	e01a      	b.n	800d396 <ScheduleTx+0x14e>
                }
                // Need to delay, but allowDelayedTx does not allow it
                return status;
 800d360:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d364:	e017      	b.n	800d396 <ScheduleTx+0x14e>
            }
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 800d366:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d36a:	e014      	b.n	800d396 <ScheduleTx+0x14e>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 800d36c:	f7ff fe9e 	bl	800d0ac <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 800d370:	f7ff ff02 	bl	800d178 <VerifyTxFrame>
 800d374:	4603      	mov	r3, r0
 800d376:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 800d37a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d002      	beq.n	800d388 <ScheduleTx+0x140>
    {
        return status;
 800d382:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d386:	e006      	b.n	800d396 <ScheduleTx+0x14e>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 800d388:	4b06      	ldr	r3, [pc, #24]	@ (800d3a4 <ScheduleTx+0x15c>)
 800d38a:	f893 341b 	ldrb.w	r3, [r3, #1051]	@ 0x41b
 800d38e:	4618      	mov	r0, r3
 800d390:	f000 fb74 	bl	800da7c <SendFrameOnChannel>
 800d394:	4603      	mov	r3, r0
}
 800d396:	4618      	mov	r0, r3
 800d398:	3738      	adds	r7, #56	@ 0x38
 800d39a:	46bd      	mov	sp, r7
 800d39c:	bd80      	pop	{r7, pc}
 800d39e:	bf00      	nop
 800d3a0:	20008000 	.word	0x20008000
 800d3a4:	20000a28 	.word	0x20000a28
 800d3a8:	20008030 	.word	0x20008030
 800d3ac:	20000ebc 	.word	0x20000ebc
 800d3b0:	20000e43 	.word	0x20000e43
 800d3b4:	20000d90 	.word	0x20000d90

0800d3b8 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b084      	sub	sp, #16
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	4603      	mov	r3, r0
 800d3c0:	460a      	mov	r2, r1
 800d3c2:	71fb      	strb	r3, [r7, #7]
 800d3c4:	4613      	mov	r3, r2
 800d3c6:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800d3c8:	2312      	movs	r3, #18
 800d3ca:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 800d3d0:	4b22      	ldr	r3, [pc, #136]	@ (800d45c <SecureFrame+0xa4>)
 800d3d2:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d002      	beq.n	800d3e0 <SecureFrame+0x28>
 800d3da:	2b04      	cmp	r3, #4
 800d3dc:	d011      	beq.n	800d402 <SecureFrame+0x4a>
 800d3de:	e036      	b.n	800d44e <SecureFrame+0x96>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800d3e0:	481f      	ldr	r0, [pc, #124]	@ (800d460 <SecureFrame+0xa8>)
 800d3e2:	f003 fcb3 	bl	8010d4c <LoRaMacCryptoPrepareJoinRequest>
 800d3e6:	4603      	mov	r3, r0
 800d3e8:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800d3ea:	7bfb      	ldrb	r3, [r7, #15]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d001      	beq.n	800d3f4 <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800d3f0:	2311      	movs	r3, #17
 800d3f2:	e02f      	b.n	800d454 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800d3f4:	4b19      	ldr	r3, [pc, #100]	@ (800d45c <SecureFrame+0xa4>)
 800d3f6:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800d3fa:	461a      	mov	r2, r3
 800d3fc:	4b17      	ldr	r3, [pc, #92]	@ (800d45c <SecureFrame+0xa4>)
 800d3fe:	801a      	strh	r2, [r3, #0]
            break;
 800d400:	e027      	b.n	800d452 <SecureFrame+0x9a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800d402:	f107 0308 	add.w	r3, r7, #8
 800d406:	4618      	mov	r0, r3
 800d408:	f003 fbda 	bl	8010bc0 <LoRaMacCryptoGetFCntUp>
 800d40c:	4603      	mov	r3, r0
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d001      	beq.n	800d416 <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800d412:	2312      	movs	r3, #18
 800d414:	e01e      	b.n	800d454 <SecureFrame+0x9c>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 800d416:	4b11      	ldr	r3, [pc, #68]	@ (800d45c <SecureFrame+0xa4>)
 800d418:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d002      	beq.n	800d426 <SecureFrame+0x6e>
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 800d420:	68bb      	ldr	r3, [r7, #8]
 800d422:	3b01      	subs	r3, #1
 800d424:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800d426:	68b8      	ldr	r0, [r7, #8]
 800d428:	79ba      	ldrb	r2, [r7, #6]
 800d42a:	79f9      	ldrb	r1, [r7, #7]
 800d42c:	4b0c      	ldr	r3, [pc, #48]	@ (800d460 <SecureFrame+0xa8>)
 800d42e:	f003 fdb3 	bl	8010f98 <LoRaMacCryptoSecureMessage>
 800d432:	4603      	mov	r3, r0
 800d434:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800d436:	7bfb      	ldrb	r3, [r7, #15]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d001      	beq.n	800d440 <SecureFrame+0x88>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800d43c:	2311      	movs	r3, #17
 800d43e:	e009      	b.n	800d454 <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800d440:	4b06      	ldr	r3, [pc, #24]	@ (800d45c <SecureFrame+0xa4>)
 800d442:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800d446:	461a      	mov	r2, r3
 800d448:	4b04      	ldr	r3, [pc, #16]	@ (800d45c <SecureFrame+0xa4>)
 800d44a:	801a      	strh	r2, [r3, #0]
            break;
 800d44c:	e001      	b.n	800d452 <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800d44e:	2303      	movs	r3, #3
 800d450:	e000      	b.n	800d454 <SecureFrame+0x9c>
    }
    return LORAMAC_STATUS_OK;
 800d452:	2300      	movs	r3, #0
}
 800d454:	4618      	mov	r0, r3
 800d456:	3710      	adds	r7, #16
 800d458:	46bd      	mov	sp, r7
 800d45a:	bd80      	pop	{r7, pc}
 800d45c:	20000a28 	.word	0x20000a28
 800d460:	20000b30 	.word	0x20000b30

0800d464 <CalculateBackOff>:

static void CalculateBackOff( void )
{
 800d464:	b480      	push	{r7}
 800d466:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 800d468:	4b09      	ldr	r3, [pc, #36]	@ (800d490 <CalculateBackOff+0x2c>)
 800d46a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d10a      	bne.n	800d486 <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 800d470:	4b07      	ldr	r3, [pc, #28]	@ (800d490 <CalculateBackOff+0x2c>)
 800d472:	f8b3 3120 	ldrh.w	r3, [r3, #288]	@ 0x120
 800d476:	3b01      	subs	r3, #1
 800d478:	4a06      	ldr	r2, [pc, #24]	@ (800d494 <CalculateBackOff+0x30>)
 800d47a:	f8d2 241c 	ldr.w	r2, [r2, #1052]	@ 0x41c
 800d47e:	fb02 f303 	mul.w	r3, r2, r3
 800d482:	4a03      	ldr	r2, [pc, #12]	@ (800d490 <CalculateBackOff+0x2c>)
 800d484:	6313      	str	r3, [r2, #48]	@ 0x30
    }
}
 800d486:	bf00      	nop
 800d488:	46bd      	mov	sp, r7
 800d48a:	bc80      	pop	{r7}
 800d48c:	4770      	bx	lr
 800d48e:	bf00      	nop
 800d490:	20008000 	.word	0x20008000
 800d494:	20000a28 	.word	0x20000a28

0800d498 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b082      	sub	sp, #8
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	4603      	mov	r3, r0
 800d4a0:	7139      	strb	r1, [r7, #4]
 800d4a2:	71fb      	strb	r3, [r7, #7]
 800d4a4:	4613      	mov	r3, r2
 800d4a6:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800d4a8:	79fb      	ldrb	r3, [r7, #7]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d002      	beq.n	800d4b4 <RemoveMacCommands+0x1c>
 800d4ae:	79fb      	ldrb	r3, [r7, #7]
 800d4b0:	2b01      	cmp	r3, #1
 800d4b2:	d10d      	bne.n	800d4d0 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 800d4b4:	79bb      	ldrb	r3, [r7, #6]
 800d4b6:	2b01      	cmp	r3, #1
 800d4b8:	d108      	bne.n	800d4cc <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 800d4ba:	793b      	ldrb	r3, [r7, #4]
 800d4bc:	f003 0320 	and.w	r3, r3, #32
 800d4c0:	b2db      	uxtb	r3, r3
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d004      	beq.n	800d4d0 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800d4c6:	f002 fd1f 	bl	800ff08 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 800d4ca:	e001      	b.n	800d4d0 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 800d4cc:	f002 fd1c 	bl	800ff08 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 800d4d0:	bf00      	nop
 800d4d2:	3708      	adds	r7, #8
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	bd80      	pop	{r7, pc}

0800d4d8 <ResetMacParameters>:

static void ResetMacParameters( bool isRejoin )
{
 800d4d8:	b5b0      	push	{r4, r5, r7, lr}
 800d4da:	b092      	sub	sp, #72	@ 0x48
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	4603      	mov	r3, r0
 800d4e0:	71fb      	strb	r3, [r7, #7]
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( isRejoin == false )
 800d4e2:	79fb      	ldrb	r3, [r7, #7]
 800d4e4:	f083 0301 	eor.w	r3, r3, #1
 800d4e8:	b2db      	uxtb	r3, r3
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d003      	beq.n	800d4f6 <ResetMacParameters+0x1e>
    {
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800d4ee:	4b88      	ldr	r3, [pc, #544]	@ (800d710 <ResetMacParameters+0x238>)
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    }

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 800d4f6:	4b86      	ldr	r3, [pc, #536]	@ (800d710 <ResetMacParameters+0x238>)
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	629a      	str	r2, [r3, #40]	@ 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 800d4fc:	4b85      	ldr	r3, [pc, #532]	@ (800d714 <ResetMacParameters+0x23c>)
 800d4fe:	2200      	movs	r2, #0
 800d500:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 800d504:	4b83      	ldr	r3, [pc, #524]	@ (800d714 <ResetMacParameters+0x23c>)
 800d506:	2200      	movs	r2, #0
 800d508:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
    MacCtx.ResponseTimeoutStartTime = 0;
 800d50c:	4b81      	ldr	r3, [pc, #516]	@ (800d714 <ResetMacParameters+0x23c>)
 800d50e:	2200      	movs	r2, #0
 800d510:	f8c3 2498 	str.w	r2, [r3, #1176]	@ 0x498
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 800d514:	4b7e      	ldr	r3, [pc, #504]	@ (800d710 <ResetMacParameters+0x238>)
 800d516:	2200      	movs	r2, #0
 800d518:	f883 211b 	strb.w	r2, [r3, #283]	@ 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 800d51c:	4b7c      	ldr	r3, [pc, #496]	@ (800d710 <ResetMacParameters+0x238>)
 800d51e:	2201      	movs	r2, #1
 800d520:	f8a3 2120 	strh.w	r2, [r3, #288]	@ 0x120

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800d524:	4b7a      	ldr	r3, [pc, #488]	@ (800d710 <ResetMacParameters+0x238>)
 800d526:	f993 20dc 	ldrsb.w	r2, [r3, #220]	@ 0xdc
 800d52a:	4b79      	ldr	r3, [pc, #484]	@ (800d710 <ResetMacParameters+0x238>)
 800d52c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800d530:	4b77      	ldr	r3, [pc, #476]	@ (800d710 <ResetMacParameters+0x238>)
 800d532:	f993 20dd 	ldrsb.w	r2, [r3, #221]	@ 0xdd
 800d536:	4b76      	ldr	r3, [pc, #472]	@ (800d710 <ResetMacParameters+0x238>)
 800d538:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 800d53c:	4b74      	ldr	r3, [pc, #464]	@ (800d710 <ResetMacParameters+0x238>)
 800d53e:	f893 20b1 	ldrb.w	r2, [r3, #177]	@ 0xb1
 800d542:	4b73      	ldr	r3, [pc, #460]	@ (800d710 <ResetMacParameters+0x238>)
 800d544:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800d548:	4b71      	ldr	r3, [pc, #452]	@ (800d710 <ResetMacParameters+0x238>)
 800d54a:	4a71      	ldr	r2, [pc, #452]	@ (800d710 <ResetMacParameters+0x238>)
 800d54c:	336c      	adds	r3, #108	@ 0x6c
 800d54e:	32b4      	adds	r2, #180	@ 0xb4
 800d550:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d554:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800d558:	4b6d      	ldr	r3, [pc, #436]	@ (800d710 <ResetMacParameters+0x238>)
 800d55a:	4a6d      	ldr	r2, [pc, #436]	@ (800d710 <ResetMacParameters+0x238>)
 800d55c:	3374      	adds	r3, #116	@ 0x74
 800d55e:	32bc      	adds	r2, #188	@ 0xbc
 800d560:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d564:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800d568:	4b69      	ldr	r3, [pc, #420]	@ (800d710 <ResetMacParameters+0x238>)
 800d56a:	f893 20c4 	ldrb.w	r2, [r3, #196]	@ 0xc4
 800d56e:	4b68      	ldr	r3, [pc, #416]	@ (800d710 <ResetMacParameters+0x238>)
 800d570:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 800d574:	4b66      	ldr	r3, [pc, #408]	@ (800d710 <ResetMacParameters+0x238>)
 800d576:	f893 20c5 	ldrb.w	r2, [r3, #197]	@ 0xc5
 800d57a:	4b65      	ldr	r3, [pc, #404]	@ (800d710 <ResetMacParameters+0x238>)
 800d57c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 800d580:	4b63      	ldr	r3, [pc, #396]	@ (800d710 <ResetMacParameters+0x238>)
 800d582:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800d586:	4a62      	ldr	r2, [pc, #392]	@ (800d710 <ResetMacParameters+0x238>)
 800d588:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800d58c:	4b60      	ldr	r3, [pc, #384]	@ (800d710 <ResetMacParameters+0x238>)
 800d58e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800d592:	4a5f      	ldr	r2, [pc, #380]	@ (800d710 <ResetMacParameters+0x238>)
 800d594:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 800d598:	4b5d      	ldr	r3, [pc, #372]	@ (800d710 <ResetMacParameters+0x238>)
 800d59a:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	@ 0xd0
 800d59e:	4b5c      	ldr	r3, [pc, #368]	@ (800d710 <ResetMacParameters+0x238>)
 800d5a0:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 800d5a4:	4b5a      	ldr	r3, [pc, #360]	@ (800d710 <ResetMacParameters+0x238>)
 800d5a6:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	@ 0xd2
 800d5aa:	4b59      	ldr	r3, [pc, #356]	@ (800d710 <ResetMacParameters+0x238>)
 800d5ac:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a

    MacCtx.NodeAckRequested = false;
 800d5b0:	4b58      	ldr	r3, [pc, #352]	@ (800d714 <ResetMacParameters+0x23c>)
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
    Nvm.MacGroup1.SrvAckRequested = false;
 800d5b8:	4b55      	ldr	r3, [pc, #340]	@ (800d710 <ResetMacParameters+0x238>)
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800d5c0:	4b53      	ldr	r3, [pc, #332]	@ (800d710 <ResetMacParameters+0x238>)
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
    Nvm.MacGroup2.DownlinkReceived = false;
 800d5c8:	4b51      	ldr	r3, [pc, #324]	@ (800d710 <ResetMacParameters+0x238>)
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 800d5d0:	4b4f      	ldr	r3, [pc, #316]	@ (800d710 <ResetMacParameters+0x238>)
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 800d5d8:	4b4d      	ldr	r3, [pc, #308]	@ (800d710 <ResetMacParameters+0x238>)
 800d5da:	2200      	movs	r2, #0
 800d5dc:	f883 2138 	strb.w	r2, [r3, #312]	@ 0x138
    Nvm.MacGroup2.ForceRejoinType = 0;
 800d5e0:	4b4b      	ldr	r3, [pc, #300]	@ (800d710 <ResetMacParameters+0x238>)
 800d5e2:	2200      	movs	r2, #0
 800d5e4:	f883 2139 	strb.w	r2, [r3, #313]	@ 0x139
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 800d5e8:	4b49      	ldr	r3, [pc, #292]	@ (800d710 <ResetMacParameters+0x238>)
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 800d5f0:	4b47      	ldr	r3, [pc, #284]	@ (800d710 <ResetMacParameters+0x238>)
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 800d5f8:	4b45      	ldr	r3, [pc, #276]	@ (800d710 <ResetMacParameters+0x238>)
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 800d600:	4b43      	ldr	r3, [pc, #268]	@ (800d710 <ResetMacParameters+0x238>)
 800d602:	2200      	movs	r2, #0
 800d604:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 800d608:	4b41      	ldr	r3, [pc, #260]	@ (800d710 <ResetMacParameters+0x238>)
 800d60a:	2200      	movs	r2, #0
 800d60c:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 800d610:	2301      	movs	r3, #1
 800d612:	763b      	strb	r3, [r7, #24]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800d614:	4b40      	ldr	r3, [pc, #256]	@ (800d718 <ResetMacParameters+0x240>)
 800d616:	60fb      	str	r3, [r7, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800d618:	4b40      	ldr	r3, [pc, #256]	@ (800d71c <ResetMacParameters+0x244>)
 800d61a:	613b      	str	r3, [r7, #16]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    params.Bands = &RegionBands;
 800d61c:	4b40      	ldr	r3, [pc, #256]	@ (800d720 <ResetMacParameters+0x248>)
 800d61e:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800d620:	4b3b      	ldr	r3, [pc, #236]	@ (800d710 <ResetMacParameters+0x238>)
 800d622:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800d626:	f107 020c 	add.w	r2, r7, #12
 800d62a:	4611      	mov	r1, r2
 800d62c:	4618      	mov	r0, r3
 800d62e:	f004 f97d 	bl	801192c <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 800d632:	4b38      	ldr	r3, [pc, #224]	@ (800d714 <ResetMacParameters+0x23c>)
 800d634:	2200      	movs	r2, #0
 800d636:	f883 241b 	strb.w	r2, [r3, #1051]	@ 0x41b

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800d63a:	4b36      	ldr	r3, [pc, #216]	@ (800d714 <ResetMacParameters+0x23c>)
 800d63c:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 800d640:	4b34      	ldr	r3, [pc, #208]	@ (800d714 <ResetMacParameters+0x23c>)
 800d642:	f883 23d0 	strb.w	r2, [r3, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800d646:	4b32      	ldr	r3, [pc, #200]	@ (800d710 <ResetMacParameters+0x238>)
 800d648:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d64a:	4a32      	ldr	r2, [pc, #200]	@ (800d714 <ResetMacParameters+0x23c>)
 800d64c:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800d650:	4b2f      	ldr	r3, [pc, #188]	@ (800d710 <ResetMacParameters+0x238>)
 800d652:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800d656:	4b2f      	ldr	r3, [pc, #188]	@ (800d714 <ResetMacParameters+0x23c>)
 800d658:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800d65c:	4b2c      	ldr	r3, [pc, #176]	@ (800d710 <ResetMacParameters+0x238>)
 800d65e:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800d662:	4b2c      	ldr	r3, [pc, #176]	@ (800d714 <ResetMacParameters+0x23c>)
 800d664:	f883 23e1 	strb.w	r2, [r3, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800d668:	4b2a      	ldr	r3, [pc, #168]	@ (800d714 <ResetMacParameters+0x23c>)
 800d66a:	2200      	movs	r2, #0
 800d66c:	f883 23e2 	strb.w	r2, [r3, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800d670:	4b28      	ldr	r3, [pc, #160]	@ (800d714 <ResetMacParameters+0x23c>)
 800d672:	2201      	movs	r2, #1
 800d674:	f883 23e3 	strb.w	r2, [r3, #995]	@ 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800d678:	4b25      	ldr	r3, [pc, #148]	@ (800d710 <ResetMacParameters+0x238>)
 800d67a:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 800d67e:	4b25      	ldr	r3, [pc, #148]	@ (800d714 <ResetMacParameters+0x23c>)
 800d680:	f883 23e4 	strb.w	r2, [r3, #996]	@ 0x3e4
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800d684:	4a23      	ldr	r2, [pc, #140]	@ (800d714 <ResetMacParameters+0x23c>)
 800d686:	4b23      	ldr	r3, [pc, #140]	@ (800d714 <ResetMacParameters+0x23c>)
 800d688:	f502 747a 	add.w	r4, r2, #1000	@ 0x3e8
 800d68c:	f503 7574 	add.w	r5, r3, #976	@ 0x3d0
 800d690:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d692:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d694:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d698:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800d69c:	4b1d      	ldr	r3, [pc, #116]	@ (800d714 <ResetMacParameters+0x23c>)
 800d69e:	2201      	movs	r2, #1
 800d6a0:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800d6a4:	4b1b      	ldr	r3, [pc, #108]	@ (800d714 <ResetMacParameters+0x23c>)
 800d6a6:	2202      	movs	r2, #2
 800d6a8:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	643b      	str	r3, [r7, #64]	@ 0x40
    classBCallbacks.MacProcessNotify = NULL;
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	647b      	str	r3, [r7, #68]	@ 0x44

    if( MacCtx.MacCallbacks != NULL )
 800d6b4:	4b17      	ldr	r3, [pc, #92]	@ (800d714 <ResetMacParameters+0x23c>)
 800d6b6:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d009      	beq.n	800d6d2 <ResetMacParameters+0x1fa>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 800d6be:	4b15      	ldr	r3, [pc, #84]	@ (800d714 <ResetMacParameters+0x23c>)
 800d6c0:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d6c4:	685b      	ldr	r3, [r3, #4]
 800d6c6:	643b      	str	r3, [r7, #64]	@ 0x40
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800d6c8:	4b12      	ldr	r3, [pc, #72]	@ (800d714 <ResetMacParameters+0x23c>)
 800d6ca:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d6ce:	695b      	ldr	r3, [r3, #20]
 800d6d0:	647b      	str	r3, [r7, #68]	@ 0x44
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800d6d2:	4b14      	ldr	r3, [pc, #80]	@ (800d724 <ResetMacParameters+0x24c>)
 800d6d4:	61fb      	str	r3, [r7, #28]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800d6d6:	4b14      	ldr	r3, [pc, #80]	@ (800d728 <ResetMacParameters+0x250>)
 800d6d8:	623b      	str	r3, [r7, #32]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800d6da:	4b14      	ldr	r3, [pc, #80]	@ (800d72c <ResetMacParameters+0x254>)
 800d6dc:	627b      	str	r3, [r7, #36]	@ 0x24
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800d6de:	4b14      	ldr	r3, [pc, #80]	@ (800d730 <ResetMacParameters+0x258>)
 800d6e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 800d6e2:	4b14      	ldr	r3, [pc, #80]	@ (800d734 <ResetMacParameters+0x25c>)
 800d6e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800d6e6:	4b14      	ldr	r3, [pc, #80]	@ (800d738 <ResetMacParameters+0x260>)
 800d6e8:	633b      	str	r3, [r7, #48]	@ 0x30
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 800d6ea:	4b14      	ldr	r3, [pc, #80]	@ (800d73c <ResetMacParameters+0x264>)
 800d6ec:	637b      	str	r3, [r7, #52]	@ 0x34
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800d6ee:	4b14      	ldr	r3, [pc, #80]	@ (800d740 <ResetMacParameters+0x268>)
 800d6f0:	63bb      	str	r3, [r7, #56]	@ 0x38
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 800d6f2:	4b14      	ldr	r3, [pc, #80]	@ (800d744 <ResetMacParameters+0x26c>)
 800d6f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800d6f6:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800d6fa:	f107 031c 	add.w	r3, r7, #28
 800d6fe:	4a12      	ldr	r2, [pc, #72]	@ (800d748 <ResetMacParameters+0x270>)
 800d700:	4618      	mov	r0, r3
 800d702:	f002 f90e 	bl	800f922 <LoRaMacClassBInit>
}
 800d706:	bf00      	nop
 800d708:	3748      	adds	r7, #72	@ 0x48
 800d70a:	46bd      	mov	sp, r7
 800d70c:	bdb0      	pop	{r4, r5, r7, pc}
 800d70e:	bf00      	nop
 800d710:	20008000 	.word	0x20008000
 800d714:	20000a28 	.word	0x20000a28
 800d718:	20008224 	.word	0x20008224
 800d71c:	20008238 	.word	0x20008238
 800d720:	20000f44 	.word	0x20000f44
 800d724:	20000e90 	.word	0x20000e90
 800d728:	20000e48 	.word	0x20000e48
 800d72c:	20000e7c 	.word	0x20000e7c
 800d730:	20000eb9 	.word	0x20000eb9
 800d734:	200080e4 	.word	0x200080e4
 800d738:	20008048 	.word	0x20008048
 800d73c:	2000804c 	.word	0x2000804c
 800d740:	200080e8 	.word	0x200080e8
 800d744:	20008130 	.word	0x20008130
 800d748:	200085b4 	.word	0x200085b4

0800d74c <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b082      	sub	sp, #8
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
 800d754:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 800d756:	6878      	ldr	r0, [r7, #4]
 800d758:	f00c ff8e 	bl	801a678 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 800d75c:	4b11      	ldr	r3, [pc, #68]	@ (800d7a4 <RxWindowSetup+0x58>)
 800d75e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d760:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800d762:	4b11      	ldr	r3, [pc, #68]	@ (800d7a8 <RxWindowSetup+0x5c>)
 800d764:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800d768:	4a10      	ldr	r2, [pc, #64]	@ (800d7ac <RxWindowSetup+0x60>)
 800d76a:	6839      	ldr	r1, [r7, #0]
 800d76c:	4618      	mov	r0, r3
 800d76e:	f004 f96a 	bl	8011a46 <RegionRxConfig>
 800d772:	4603      	mov	r3, r0
 800d774:	2b00      	cmp	r3, #0
 800d776:	d010      	beq.n	800d79a <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800d778:	4b0d      	ldr	r3, [pc, #52]	@ (800d7b0 <RxWindowSetup+0x64>)
 800d77a:	f893 2424 	ldrb.w	r2, [r3, #1060]	@ 0x424
 800d77e:	4b0c      	ldr	r3, [pc, #48]	@ (800d7b0 <RxWindowSetup+0x64>)
 800d780:	f883 246a 	strb.w	r2, [r3, #1130]	@ 0x46a
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 800d784:	4b07      	ldr	r3, [pc, #28]	@ (800d7a4 <RxWindowSetup+0x58>)
 800d786:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d788:	4a07      	ldr	r2, [pc, #28]	@ (800d7a8 <RxWindowSetup+0x5c>)
 800d78a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800d78c:	4610      	mov	r0, r2
 800d78e:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	7cda      	ldrb	r2, [r3, #19]
 800d794:	4b06      	ldr	r3, [pc, #24]	@ (800d7b0 <RxWindowSetup+0x64>)
 800d796:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
    }
}
 800d79a:	bf00      	nop
 800d79c:	3708      	adds	r7, #8
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	bd80      	pop	{r7, pc}
 800d7a2:	bf00      	nop
 800d7a4:	0802146c 	.word	0x0802146c
 800d7a8:	20008000 	.word	0x20008000
 800d7ac:	20000e4c 	.word	0x20000e4c
 800d7b0:	20000a28 	.word	0x20000a28

0800d7b4 <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 800d7b4:	b590      	push	{r4, r7, lr}
 800d7b6:	b083      	sub	sp, #12
 800d7b8:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800d7ba:	4b1e      	ldr	r3, [pc, #120]	@ (800d834 <OpenContinuousRxCWindow+0x80>)
 800d7bc:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 800d7c0:	4b1c      	ldr	r3, [pc, #112]	@ (800d834 <OpenContinuousRxCWindow+0x80>)
 800d7c2:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800d7c6:	b259      	sxtb	r1, r3
 800d7c8:	4b1a      	ldr	r3, [pc, #104]	@ (800d834 <OpenContinuousRxCWindow+0x80>)
 800d7ca:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 800d7ce:	4b19      	ldr	r3, [pc, #100]	@ (800d834 <OpenContinuousRxCWindow+0x80>)
 800d7d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d7d2:	4c19      	ldr	r4, [pc, #100]	@ (800d838 <OpenContinuousRxCWindow+0x84>)
 800d7d4:	9400      	str	r4, [sp, #0]
 800d7d6:	f004 f913 	bl	8011a00 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800d7da:	4b18      	ldr	r3, [pc, #96]	@ (800d83c <OpenContinuousRxCWindow+0x88>)
 800d7dc:	2202      	movs	r2, #2
 800d7de:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800d7e2:	4b14      	ldr	r3, [pc, #80]	@ (800d834 <OpenContinuousRxCWindow+0x80>)
 800d7e4:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 800d7e8:	4b14      	ldr	r3, [pc, #80]	@ (800d83c <OpenContinuousRxCWindow+0x88>)
 800d7ea:	f883 23fc 	strb.w	r2, [r3, #1020]	@ 0x3fc
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800d7ee:	4b13      	ldr	r3, [pc, #76]	@ (800d83c <OpenContinuousRxCWindow+0x88>)
 800d7f0:	2201      	movs	r2, #1
 800d7f2:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800d7f6:	4b0f      	ldr	r3, [pc, #60]	@ (800d834 <OpenContinuousRxCWindow+0x80>)
 800d7f8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800d7fc:	4a10      	ldr	r2, [pc, #64]	@ (800d840 <OpenContinuousRxCWindow+0x8c>)
 800d7fe:	490e      	ldr	r1, [pc, #56]	@ (800d838 <OpenContinuousRxCWindow+0x84>)
 800d800:	4618      	mov	r0, r3
 800d802:	f004 f920 	bl	8011a46 <RegionRxConfig>
 800d806:	4603      	mov	r3, r0
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d00f      	beq.n	800d82c <OpenContinuousRxCWindow+0x78>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800d80c:	4b0b      	ldr	r3, [pc, #44]	@ (800d83c <OpenContinuousRxCWindow+0x88>)
 800d80e:	f893 2424 	ldrb.w	r2, [r3, #1060]	@ 0x424
 800d812:	4b0a      	ldr	r3, [pc, #40]	@ (800d83c <OpenContinuousRxCWindow+0x88>)
 800d814:	f883 246a 	strb.w	r2, [r3, #1130]	@ 0x46a
        Radio.Rx( 0 ); // Continuous mode
 800d818:	4b0a      	ldr	r3, [pc, #40]	@ (800d844 <OpenContinuousRxCWindow+0x90>)
 800d81a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d81c:	2000      	movs	r0, #0
 800d81e:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800d820:	4b06      	ldr	r3, [pc, #24]	@ (800d83c <OpenContinuousRxCWindow+0x88>)
 800d822:	f893 23fb 	ldrb.w	r2, [r3, #1019]	@ 0x3fb
 800d826:	4b05      	ldr	r3, [pc, #20]	@ (800d83c <OpenContinuousRxCWindow+0x88>)
 800d828:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
    }
}
 800d82c:	bf00      	nop
 800d82e:	3704      	adds	r7, #4
 800d830:	46bd      	mov	sp, r7
 800d832:	bd90      	pop	{r4, r7, pc}
 800d834:	20008000 	.word	0x20008000
 800d838:	20000e10 	.word	0x20000e10
 800d83c:	20000a28 	.word	0x20000a28
 800d840:	20000e4c 	.word	0x20000e4c
 800d844:	0802146c 	.word	0x0802146c

0800d848 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b088      	sub	sp, #32
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	60f8      	str	r0, [r7, #12]
 800d850:	60b9      	str	r1, [r7, #8]
 800d852:	603b      	str	r3, [r7, #0]
 800d854:	4613      	mov	r3, r2
 800d856:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 800d858:	4b81      	ldr	r3, [pc, #516]	@ (800da60 <PrepareFrame+0x218>)
 800d85a:	2200      	movs	r2, #0
 800d85c:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 800d85e:	4b80      	ldr	r3, [pc, #512]	@ (800da60 <PrepareFrame+0x218>)
 800d860:	2200      	movs	r2, #0
 800d862:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
    uint32_t fCntUp = 0;
 800d866:	2300      	movs	r3, #0
 800d868:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 800d86a:	2300      	movs	r3, #0
 800d86c:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 800d86e:	2300      	movs	r3, #0
 800d870:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 800d872:	683b      	ldr	r3, [r7, #0]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d101      	bne.n	800d87c <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 800d878:	2300      	movs	r3, #0
 800d87a:	853b      	strh	r3, [r7, #40]	@ 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800d87c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d87e:	461a      	mov	r2, r3
 800d880:	6839      	ldr	r1, [r7, #0]
 800d882:	4878      	ldr	r0, [pc, #480]	@ (800da64 <PrepareFrame+0x21c>)
 800d884:	f009 fab9 	bl	8016dfa <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800d888:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d88a:	b2da      	uxtb	r2, r3
 800d88c:	4b74      	ldr	r3, [pc, #464]	@ (800da60 <PrepareFrame+0x218>)
 800d88e:	f883 2237 	strb.w	r2, [r3, #567]	@ 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	781a      	ldrb	r2, [r3, #0]
 800d896:	4b72      	ldr	r3, [pc, #456]	@ (800da60 <PrepareFrame+0x218>)
 800d898:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	781b      	ldrb	r3, [r3, #0]
 800d89e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800d8a2:	b2db      	uxtb	r3, r3
 800d8a4:	2b07      	cmp	r3, #7
 800d8a6:	f000 80b9 	beq.w	800da1c <PrepareFrame+0x1d4>
 800d8aa:	2b07      	cmp	r3, #7
 800d8ac:	f300 80ce 	bgt.w	800da4c <PrepareFrame+0x204>
 800d8b0:	2b02      	cmp	r3, #2
 800d8b2:	d006      	beq.n	800d8c2 <PrepareFrame+0x7a>
 800d8b4:	2b04      	cmp	r3, #4
 800d8b6:	f040 80c9 	bne.w	800da4c <PrepareFrame+0x204>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 800d8ba:	4b69      	ldr	r3, [pc, #420]	@ (800da60 <PrepareFrame+0x218>)
 800d8bc:	2201      	movs	r2, #1
 800d8be:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800d8c2:	4b67      	ldr	r3, [pc, #412]	@ (800da60 <PrepareFrame+0x218>)
 800d8c4:	2204      	movs	r2, #4
 800d8c6:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800d8ca:	4b65      	ldr	r3, [pc, #404]	@ (800da60 <PrepareFrame+0x218>)
 800d8cc:	4a66      	ldr	r2, [pc, #408]	@ (800da68 <PrepareFrame+0x220>)
 800d8ce:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800d8d2:	4b63      	ldr	r3, [pc, #396]	@ (800da60 <PrepareFrame+0x218>)
 800d8d4:	22ff      	movs	r2, #255	@ 0xff
 800d8d6:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	781a      	ldrb	r2, [r3, #0]
 800d8de:	4b60      	ldr	r3, [pc, #384]	@ (800da60 <PrepareFrame+0x218>)
 800d8e0:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800d8e4:	4a5e      	ldr	r2, [pc, #376]	@ (800da60 <PrepareFrame+0x218>)
 800d8e6:	79fb      	ldrb	r3, [r7, #7]
 800d8e8:	f882 3128 	strb.w	r3, [r2, #296]	@ 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800d8ec:	4b5f      	ldr	r3, [pc, #380]	@ (800da6c <PrepareFrame+0x224>)
 800d8ee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d8f2:	4a5b      	ldr	r2, [pc, #364]	@ (800da60 <PrepareFrame+0x218>)
 800d8f4:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800d8f8:	68bb      	ldr	r3, [r7, #8]
 800d8fa:	781a      	ldrb	r2, [r3, #0]
 800d8fc:	4b58      	ldr	r3, [pc, #352]	@ (800da60 <PrepareFrame+0x218>)
 800d8fe:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800d902:	4b57      	ldr	r3, [pc, #348]	@ (800da60 <PrepareFrame+0x218>)
 800d904:	f893 2237 	ldrb.w	r2, [r3, #567]	@ 0x237
 800d908:	4b55      	ldr	r3, [pc, #340]	@ (800da60 <PrepareFrame+0x218>)
 800d90a:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800d90e:	4b54      	ldr	r3, [pc, #336]	@ (800da60 <PrepareFrame+0x218>)
 800d910:	4a54      	ldr	r2, [pc, #336]	@ (800da64 <PrepareFrame+0x21c>)
 800d912:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800d916:	f107 0318 	add.w	r3, r7, #24
 800d91a:	4618      	mov	r0, r3
 800d91c:	f003 f950 	bl	8010bc0 <LoRaMacCryptoGetFCntUp>
 800d920:	4603      	mov	r3, r0
 800d922:	2b00      	cmp	r3, #0
 800d924:	d001      	beq.n	800d92a <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800d926:	2312      	movs	r3, #18
 800d928:	e096      	b.n	800da58 <PrepareFrame+0x210>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800d92a:	69bb      	ldr	r3, [r7, #24]
 800d92c:	b29a      	uxth	r2, r3
 800d92e:	4b4c      	ldr	r3, [pc, #304]	@ (800da60 <PrepareFrame+0x218>)
 800d930:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116

            // Reset confirm parameters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = 0;
 800d934:	4b4a      	ldr	r3, [pc, #296]	@ (800da60 <PrepareFrame+0x218>)
 800d936:	2200      	movs	r2, #0
 800d938:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 800d93c:	4b48      	ldr	r3, [pc, #288]	@ (800da60 <PrepareFrame+0x218>)
 800d93e:	2200      	movs	r2, #0
 800d940:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800d944:	69bb      	ldr	r3, [r7, #24]
 800d946:	4a46      	ldr	r2, [pc, #280]	@ (800da60 <PrepareFrame+0x218>)
 800d948:	f8c2 344c 	str.w	r3, [r2, #1100]	@ 0x44c

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800d94c:	f107 0314 	add.w	r3, r7, #20
 800d950:	4618      	mov	r0, r3
 800d952:	f002 fb05 	bl	800ff60 <LoRaMacCommandsGetSizeSerializedCmds>
 800d956:	4603      	mov	r3, r0
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d001      	beq.n	800d960 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d95c:	2313      	movs	r3, #19
 800d95e:	e07b      	b.n	800da58 <PrepareFrame+0x210>
            }

            if( macCmdsSize > 0 )
 800d960:	697b      	ldr	r3, [r7, #20]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d074      	beq.n	800da50 <PrepareFrame+0x208>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 800d966:	4b41      	ldr	r3, [pc, #260]	@ (800da6c <PrepareFrame+0x224>)
 800d968:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800d96c:	4618      	mov	r0, r3
 800d96e:	f7fe fd1d 	bl	800c3ac <GetMaxAppPayloadWithoutFOptsLength>
 800d972:	4603      	mov	r3, r0
 800d974:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800d976:	4b3a      	ldr	r3, [pc, #232]	@ (800da60 <PrepareFrame+0x218>)
 800d978:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d01d      	beq.n	800d9bc <PrepareFrame+0x174>
 800d980:	697b      	ldr	r3, [r7, #20]
 800d982:	2b0f      	cmp	r3, #15
 800d984:	d81a      	bhi.n	800d9bc <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800d986:	f107 0314 	add.w	r3, r7, #20
 800d98a:	4a39      	ldr	r2, [pc, #228]	@ (800da70 <PrepareFrame+0x228>)
 800d98c:	4619      	mov	r1, r3
 800d98e:	200f      	movs	r0, #15
 800d990:	f002 fafc 	bl	800ff8c <LoRaMacCommandsSerializeCmds>
 800d994:	4603      	mov	r3, r0
 800d996:	2b00      	cmp	r3, #0
 800d998:	d001      	beq.n	800d99e <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d99a:	2313      	movs	r3, #19
 800d99c:	e05c      	b.n	800da58 <PrepareFrame+0x210>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800d99e:	697b      	ldr	r3, [r7, #20]
 800d9a0:	f003 030f 	and.w	r3, r3, #15
 800d9a4:	b2d9      	uxtb	r1, r3
 800d9a6:	68ba      	ldr	r2, [r7, #8]
 800d9a8:	7813      	ldrb	r3, [r2, #0]
 800d9aa:	f361 0303 	bfi	r3, r1, #0, #4
 800d9ae:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800d9b0:	68bb      	ldr	r3, [r7, #8]
 800d9b2:	781a      	ldrb	r2, [r3, #0]
 800d9b4:	4b2a      	ldr	r3, [pc, #168]	@ (800da60 <PrepareFrame+0x218>)
 800d9b6:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 800d9ba:	e049      	b.n	800da50 <PrepareFrame+0x208>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800d9bc:	4b28      	ldr	r3, [pc, #160]	@ (800da60 <PrepareFrame+0x218>)
 800d9be:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d010      	beq.n	800d9e8 <PrepareFrame+0x1a0>
 800d9c6:	697b      	ldr	r3, [r7, #20]
 800d9c8:	2b0f      	cmp	r3, #15
 800d9ca:	d90d      	bls.n	800d9e8 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800d9cc:	7ffb      	ldrb	r3, [r7, #31]
 800d9ce:	f107 0114 	add.w	r1, r7, #20
 800d9d2:	4a28      	ldr	r2, [pc, #160]	@ (800da74 <PrepareFrame+0x22c>)
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	f002 fad9 	bl	800ff8c <LoRaMacCommandsSerializeCmds>
 800d9da:	4603      	mov	r3, r0
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d001      	beq.n	800d9e4 <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d9e0:	2313      	movs	r3, #19
 800d9e2:	e039      	b.n	800da58 <PrepareFrame+0x210>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 800d9e4:	230a      	movs	r3, #10
 800d9e6:	e037      	b.n	800da58 <PrepareFrame+0x210>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800d9e8:	7ffb      	ldrb	r3, [r7, #31]
 800d9ea:	f107 0114 	add.w	r1, r7, #20
 800d9ee:	4a21      	ldr	r2, [pc, #132]	@ (800da74 <PrepareFrame+0x22c>)
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	f002 facb 	bl	800ff8c <LoRaMacCommandsSerializeCmds>
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d001      	beq.n	800da00 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d9fc:	2313      	movs	r3, #19
 800d9fe:	e02b      	b.n	800da58 <PrepareFrame+0x210>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800da00:	4b17      	ldr	r3, [pc, #92]	@ (800da60 <PrepareFrame+0x218>)
 800da02:	2200      	movs	r2, #0
 800da04:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 800da08:	4b15      	ldr	r3, [pc, #84]	@ (800da60 <PrepareFrame+0x218>)
 800da0a:	4a1a      	ldr	r2, [pc, #104]	@ (800da74 <PrepareFrame+0x22c>)
 800da0c:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800da10:	697b      	ldr	r3, [r7, #20]
 800da12:	b2da      	uxtb	r2, r3
 800da14:	4b12      	ldr	r3, [pc, #72]	@ (800da60 <PrepareFrame+0x218>)
 800da16:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            break;
 800da1a:	e019      	b.n	800da50 <PrepareFrame+0x208>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800da1c:	683b      	ldr	r3, [r7, #0]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d018      	beq.n	800da54 <PrepareFrame+0x20c>
 800da22:	4b0f      	ldr	r3, [pc, #60]	@ (800da60 <PrepareFrame+0x218>)
 800da24:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d013      	beq.n	800da54 <PrepareFrame+0x20c>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800da2c:	4812      	ldr	r0, [pc, #72]	@ (800da78 <PrepareFrame+0x230>)
 800da2e:	4b0c      	ldr	r3, [pc, #48]	@ (800da60 <PrepareFrame+0x218>)
 800da30:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800da34:	461a      	mov	r2, r3
 800da36:	6839      	ldr	r1, [r7, #0]
 800da38:	f009 f9df 	bl	8016dfa <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800da3c:	4b08      	ldr	r3, [pc, #32]	@ (800da60 <PrepareFrame+0x218>)
 800da3e:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800da42:	3301      	adds	r3, #1
 800da44:	b29a      	uxth	r2, r3
 800da46:	4b06      	ldr	r3, [pc, #24]	@ (800da60 <PrepareFrame+0x218>)
 800da48:	801a      	strh	r2, [r3, #0]
            }
            break;
 800da4a:	e003      	b.n	800da54 <PrepareFrame+0x20c>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800da4c:	2302      	movs	r3, #2
 800da4e:	e003      	b.n	800da58 <PrepareFrame+0x210>
            break;
 800da50:	bf00      	nop
 800da52:	e000      	b.n	800da56 <PrepareFrame+0x20e>
            break;
 800da54:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 800da56:	2300      	movs	r3, #0
}
 800da58:	4618      	mov	r0, r3
 800da5a:	3720      	adds	r7, #32
 800da5c:	46bd      	mov	sp, r7
 800da5e:	bd80      	pop	{r7, pc}
 800da60:	20000a28 	.word	0x20000a28
 800da64:	20000b60 	.word	0x20000b60
 800da68:	20000a2a 	.word	0x20000a2a
 800da6c:	20008000 	.word	0x20008000
 800da70:	20000b40 	.word	0x20000b40
 800da74:	20000ec4 	.word	0x20000ec4
 800da78:	20000a2b 	.word	0x20000a2b

0800da7c <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b08a      	sub	sp, #40	@ 0x28
 800da80:	af00      	add	r7, sp, #0
 800da82:	4603      	mov	r3, r0
 800da84:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800da86:	2303      	movs	r3, #3
 800da88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 800da8c:	2300      	movs	r3, #0
 800da8e:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 800da90:	79fb      	ldrb	r3, [r7, #7]
 800da92:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800da94:	4b4b      	ldr	r3, [pc, #300]	@ (800dbc4 <SendFrameOnChannel+0x148>)
 800da96:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800da9a:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800da9c:	4b49      	ldr	r3, [pc, #292]	@ (800dbc4 <SendFrameOnChannel+0x148>)
 800da9e:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800daa2:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800daa4:	4b47      	ldr	r3, [pc, #284]	@ (800dbc4 <SendFrameOnChannel+0x148>)
 800daa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800daaa:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800daac:	4b45      	ldr	r3, [pc, #276]	@ (800dbc4 <SendFrameOnChannel+0x148>)
 800daae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dab2:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800dab4:	4b44      	ldr	r3, [pc, #272]	@ (800dbc8 <SendFrameOnChannel+0x14c>)
 800dab6:	881b      	ldrh	r3, [r3, #0]
 800dab8:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800daba:	4b42      	ldr	r3, [pc, #264]	@ (800dbc4 <SendFrameOnChannel+0x148>)
 800dabc:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800dac0:	77bb      	strb	r3, [r7, #30]
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800dac2:	4b40      	ldr	r3, [pc, #256]	@ (800dbc4 <SendFrameOnChannel+0x148>)
 800dac4:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800dac8:	f107 020f 	add.w	r2, r7, #15
 800dacc:	f107 0110 	add.w	r1, r7, #16
 800dad0:	4b3e      	ldr	r3, [pc, #248]	@ (800dbcc <SendFrameOnChannel+0x150>)
 800dad2:	f003 ffd6 	bl	8011a82 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dad6:	4b3c      	ldr	r3, [pc, #240]	@ (800dbc8 <SendFrameOnChannel+0x14c>)
 800dad8:	2201      	movs	r2, #1
 800dada:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800dade:	4b39      	ldr	r3, [pc, #228]	@ (800dbc4 <SendFrameOnChannel+0x148>)
 800dae0:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800dae4:	b2da      	uxtb	r2, r3
 800dae6:	4b38      	ldr	r3, [pc, #224]	@ (800dbc8 <SendFrameOnChannel+0x14c>)
 800dae8:	f883 2442 	strb.w	r2, [r3, #1090]	@ 0x442
    MacCtx.McpsConfirm.TxPower = txPower;
 800daec:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800daf0:	4b35      	ldr	r3, [pc, #212]	@ (800dbc8 <SendFrameOnChannel+0x14c>)
 800daf2:	f883 2443 	strb.w	r2, [r3, #1091]	@ 0x443
    MacCtx.McpsConfirm.Channel = channel;
 800daf6:	79fb      	ldrb	r3, [r7, #7]
 800daf8:	4a33      	ldr	r2, [pc, #204]	@ (800dbc8 <SendFrameOnChannel+0x14c>)
 800dafa:	f8c2 3450 	str.w	r3, [r2, #1104]	@ 0x450

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800dafe:	4b32      	ldr	r3, [pc, #200]	@ (800dbc8 <SendFrameOnChannel+0x14c>)
 800db00:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 800db04:	4a30      	ldr	r2, [pc, #192]	@ (800dbc8 <SendFrameOnChannel+0x14c>)
 800db06:	f8c2 3448 	str.w	r3, [r2, #1096]	@ 0x448
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800db0a:	4b2f      	ldr	r3, [pc, #188]	@ (800dbc8 <SendFrameOnChannel+0x14c>)
 800db0c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 800db10:	4a2d      	ldr	r2, [pc, #180]	@ (800dbc8 <SendFrameOnChannel+0x14c>)
 800db12:	f8c2 3458 	str.w	r3, [r2, #1112]	@ 0x458

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800db16:	f001 ff70 	bl	800f9fa <LoRaMacClassBIsBeaconModeActive>
 800db1a:	4603      	mov	r3, r0
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d00b      	beq.n	800db38 <SendFrameOnChannel+0xbc>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800db20:	4b29      	ldr	r3, [pc, #164]	@ (800dbc8 <SendFrameOnChannel+0x14c>)
 800db22:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 800db26:	4618      	mov	r0, r3
 800db28:	f001 ffd2 	bl	800fad0 <LoRaMacClassBIsUplinkCollision>
 800db2c:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 800db2e:	6a3b      	ldr	r3, [r7, #32]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d001      	beq.n	800db38 <SendFrameOnChannel+0xbc>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800db34:	2310      	movs	r3, #16
 800db36:	e040      	b.n	800dbba <SendFrameOnChannel+0x13e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800db38:	4b22      	ldr	r3, [pc, #136]	@ (800dbc4 <SendFrameOnChannel+0x148>)
 800db3a:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800db3e:	2b01      	cmp	r3, #1
 800db40:	d101      	bne.n	800db46 <SendFrameOnChannel+0xca>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 800db42:	f001 ffcf 	bl	800fae4 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 800db46:	f001 ff69 	bl	800fa1c <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 800db4a:	4b1e      	ldr	r3, [pc, #120]	@ (800dbc4 <SendFrameOnChannel+0x148>)
 800db4c:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800db50:	b2db      	uxtb	r3, r3
 800db52:	4a1d      	ldr	r2, [pc, #116]	@ (800dbc8 <SendFrameOnChannel+0x14c>)
 800db54:	f892 241b 	ldrb.w	r2, [r2, #1051]	@ 0x41b
 800db58:	4611      	mov	r1, r2
 800db5a:	4618      	mov	r0, r3
 800db5c:	f7ff fc2c 	bl	800d3b8 <SecureFrame>
 800db60:	4603      	mov	r3, r0
 800db62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if( status != LORAMAC_STATUS_OK )
 800db66:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d002      	beq.n	800db74 <SendFrameOnChannel+0xf8>
    {
        return status;
 800db6e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800db72:	e022      	b.n	800dbba <SendFrameOnChannel+0x13e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800db74:	4b14      	ldr	r3, [pc, #80]	@ (800dbc8 <SendFrameOnChannel+0x14c>)
 800db76:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800db7a:	f043 0302 	orr.w	r3, r3, #2
 800db7e:	4a12      	ldr	r2, [pc, #72]	@ (800dbc8 <SendFrameOnChannel+0x14c>)
 800db80:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.ChannelsNbTransCounter++;
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.ChannelsNbTransCounter++;
 800db84:	4b10      	ldr	r3, [pc, #64]	@ (800dbc8 <SendFrameOnChannel+0x14c>)
 800db86:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800db8a:	3301      	adds	r3, #1
 800db8c:	b2da      	uxtb	r2, r3
 800db8e:	4b0e      	ldr	r3, [pc, #56]	@ (800dbc8 <SendFrameOnChannel+0x14c>)
 800db90:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800db94:	4b0c      	ldr	r3, [pc, #48]	@ (800dbc8 <SendFrameOnChannel+0x14c>)
 800db96:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800db9a:	4b0b      	ldr	r3, [pc, #44]	@ (800dbc8 <SendFrameOnChannel+0x14c>)
 800db9c:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
    MacCtx.ResponseTimeoutStartTime = 0;
 800dba0:	4b09      	ldr	r3, [pc, #36]	@ (800dbc8 <SendFrameOnChannel+0x14c>)
 800dba2:	2200      	movs	r2, #0
 800dba4:	f8c3 2498 	str.w	r2, [r3, #1176]	@ 0x498
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800dba8:	4b09      	ldr	r3, [pc, #36]	@ (800dbd0 <SendFrameOnChannel+0x154>)
 800dbaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbac:	4a06      	ldr	r2, [pc, #24]	@ (800dbc8 <SendFrameOnChannel+0x14c>)
 800dbae:	8812      	ldrh	r2, [r2, #0]
 800dbb0:	b2d2      	uxtb	r2, r2
 800dbb2:	4611      	mov	r1, r2
 800dbb4:	4807      	ldr	r0, [pc, #28]	@ (800dbd4 <SendFrameOnChannel+0x158>)
 800dbb6:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 800dbb8:	2300      	movs	r3, #0
}
 800dbba:	4618      	mov	r0, r3
 800dbbc:	3728      	adds	r7, #40	@ 0x28
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	bd80      	pop	{r7, pc}
 800dbc2:	bf00      	nop
 800dbc4:	20008000 	.word	0x20008000
 800dbc8:	20000a28 	.word	0x20000a28
 800dbcc:	20000e44 	.word	0x20000e44
 800dbd0:	0802146c 	.word	0x0802146c
 800dbd4:	20000a2a 	.word	0x20000a2a

0800dbd8 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b082      	sub	sp, #8
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	4603      	mov	r3, r0
 800dbe0:	6039      	str	r1, [r7, #0]
 800dbe2:	80fb      	strh	r3, [r7, #6]
 800dbe4:	4613      	mov	r3, r2
 800dbe6:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 800dbe8:	4b09      	ldr	r3, [pc, #36]	@ (800dc10 <SetTxContinuousWave+0x38>)
 800dbea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800dbec:	f997 1005 	ldrsb.w	r1, [r7, #5]
 800dbf0:	88fa      	ldrh	r2, [r7, #6]
 800dbf2:	6838      	ldr	r0, [r7, #0]
 800dbf4:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800dbf6:	4b07      	ldr	r3, [pc, #28]	@ (800dc14 <SetTxContinuousWave+0x3c>)
 800dbf8:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800dbfc:	f043 0302 	orr.w	r3, r3, #2
 800dc00:	4a04      	ldr	r2, [pc, #16]	@ (800dc14 <SetTxContinuousWave+0x3c>)
 800dc02:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 800dc06:	2300      	movs	r3, #0
}
 800dc08:	4618      	mov	r0, r3
 800dc0a:	3708      	adds	r7, #8
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd80      	pop	{r7, pc}
 800dc10:	0802146c 	.word	0x0802146c
 800dc14:	20000a28 	.word	0x20000a28

0800dc18 <RestoreNvmData>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b082      	sub	sp, #8
 800dc1c:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    uint32_t crc = 0;
 800dc1e:	2300      	movs	r3, #0
 800dc20:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 800dc22:	4b49      	ldr	r3, [pc, #292]	@ (800dd48 <RestoreNvmData+0x130>)
 800dc24:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800dc28:	2b01      	cmp	r3, #1
 800dc2a:	d001      	beq.n	800dc30 <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 800dc2c:	2301      	movs	r3, #1
 800dc2e:	e087      	b.n	800dd40 <RestoreNvmData+0x128>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 800dc30:	2124      	movs	r1, #36	@ 0x24
 800dc32:	4846      	ldr	r0, [pc, #280]	@ (800dd4c <RestoreNvmData+0x134>)
 800dc34:	f009 f936 	bl	8016ea4 <Crc32>
 800dc38:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 800dc3a:	4b44      	ldr	r3, [pc, #272]	@ (800dd4c <RestoreNvmData+0x134>)
 800dc3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc3e:	687a      	ldr	r2, [r7, #4]
 800dc40:	429a      	cmp	r2, r3
 800dc42:	d001      	beq.n	800dc48 <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800dc44:	2317      	movs	r3, #23
 800dc46:	e07b      	b.n	800dd40 <RestoreNvmData+0x128>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 800dc48:	211c      	movs	r1, #28
 800dc4a:	4841      	ldr	r0, [pc, #260]	@ (800dd50 <RestoreNvmData+0x138>)
 800dc4c:	f009 f92a 	bl	8016ea4 <Crc32>
 800dc50:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 800dc52:	4b3e      	ldr	r3, [pc, #248]	@ (800dd4c <RestoreNvmData+0x134>)
 800dc54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dc56:	687a      	ldr	r2, [r7, #4]
 800dc58:	429a      	cmp	r2, r3
 800dc5a:	d001      	beq.n	800dc60 <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800dc5c:	2317      	movs	r3, #23
 800dc5e:	e06f      	b.n	800dd40 <RestoreNvmData+0x128>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 800dc60:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800dc64:	483b      	ldr	r0, [pc, #236]	@ (800dd54 <RestoreNvmData+0x13c>)
 800dc66:	f009 f91d 	bl	8016ea4 <Crc32>
 800dc6a:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 800dc6c:	4b37      	ldr	r3, [pc, #220]	@ (800dd4c <RestoreNvmData+0x134>)
 800dc6e:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800dc72:	687a      	ldr	r2, [r7, #4]
 800dc74:	429a      	cmp	r2, r3
 800dc76:	d001      	beq.n	800dc7c <RestoreNvmData+0x64>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800dc78:	2317      	movs	r3, #23
 800dc7a:	e061      	b.n	800dd40 <RestoreNvmData+0x128>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 800dc7c:	21d4      	movs	r1, #212	@ 0xd4
 800dc7e:	4836      	ldr	r0, [pc, #216]	@ (800dd58 <RestoreNvmData+0x140>)
 800dc80:	f009 f910 	bl	8016ea4 <Crc32>
 800dc84:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 800dc86:	4b31      	ldr	r3, [pc, #196]	@ (800dd4c <RestoreNvmData+0x134>)
 800dc88:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800dc8c:	687a      	ldr	r2, [r7, #4]
 800dc8e:	429a      	cmp	r2, r3
 800dc90:	d001      	beq.n	800dc96 <RestoreNvmData+0x7e>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800dc92:	2317      	movs	r3, #23
 800dc94:	e054      	b.n	800dd40 <RestoreNvmData+0x128>
    }

    // RegionGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 800dc96:	2110      	movs	r1, #16
 800dc98:	4830      	ldr	r0, [pc, #192]	@ (800dd5c <RestoreNvmData+0x144>)
 800dc9a:	f009 f903 	bl	8016ea4 <Crc32>
 800dc9e:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 800dca0:	4b2a      	ldr	r3, [pc, #168]	@ (800dd4c <RestoreNvmData+0x134>)
 800dca2:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 800dca6:	687a      	ldr	r2, [r7, #4]
 800dca8:	429a      	cmp	r2, r3
 800dcaa:	d001      	beq.n	800dcb0 <RestoreNvmData+0x98>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800dcac:	2317      	movs	r3, #23
 800dcae:	e047      	b.n	800dd40 <RestoreNvmData+0x128>
    }

    // RegionGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup2), sizeof( NvmBackup.RegionGroup2 ) -
 800dcb0:	f44f 715e 	mov.w	r1, #888	@ 0x378
 800dcb4:	482a      	ldr	r0, [pc, #168]	@ (800dd60 <RestoreNvmData+0x148>)
 800dcb6:	f009 f8f5 	bl	8016ea4 <Crc32>
 800dcba:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup2.Crc32 ) );
    if( crc != NvmBackup.RegionGroup2.Crc32 )
 800dcbc:	4b23      	ldr	r3, [pc, #140]	@ (800dd4c <RestoreNvmData+0x134>)
 800dcbe:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	@ 0x5b0
 800dcc2:	687a      	ldr	r2, [r7, #4]
 800dcc4:	429a      	cmp	r2, r3
 800dcc6:	d001      	beq.n	800dccc <RestoreNvmData+0xb4>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800dcc8:	2317      	movs	r3, #23
 800dcca:	e039      	b.n	800dd40 <RestoreNvmData+0x128>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 800dccc:	2114      	movs	r1, #20
 800dcce:	4825      	ldr	r0, [pc, #148]	@ (800dd64 <RestoreNvmData+0x14c>)
 800dcd0:	f009 f8e8 	bl	8016ea4 <Crc32>
 800dcd4:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 800dcd6:	4b1d      	ldr	r3, [pc, #116]	@ (800dd4c <RestoreNvmData+0x134>)
 800dcd8:	f8d3 35c8 	ldr.w	r3, [r3, #1480]	@ 0x5c8
 800dcdc:	687a      	ldr	r2, [r7, #4]
 800dcde:	429a      	cmp	r2, r3
 800dce0:	d001      	beq.n	800dce6 <RestoreNvmData+0xce>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800dce2:	2317      	movs	r3, #23
 800dce4:	e02c      	b.n	800dd40 <RestoreNvmData+0x128>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 800dce6:	f240 52cc 	movw	r2, #1484	@ 0x5cc
 800dcea:	4918      	ldr	r1, [pc, #96]	@ (800dd4c <RestoreNvmData+0x134>)
 800dcec:	481e      	ldr	r0, [pc, #120]	@ (800dd68 <RestoreNvmData+0x150>)
 800dcee:	f009 f884 	bl	8016dfa <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 800dcf2:	f240 52cc 	movw	r2, #1484	@ 0x5cc
 800dcf6:	2100      	movs	r1, #0
 800dcf8:	4814      	ldr	r0, [pc, #80]	@ (800dd4c <RestoreNvmData+0x134>)
 800dcfa:	f009 f8b9 	bl	8016e70 <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800dcfe:	4b12      	ldr	r3, [pc, #72]	@ (800dd48 <RestoreNvmData+0x130>)
 800dd00:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 800dd04:	4b10      	ldr	r3, [pc, #64]	@ (800dd48 <RestoreNvmData+0x130>)
 800dd06:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800dd0a:	4b17      	ldr	r3, [pc, #92]	@ (800dd68 <RestoreNvmData+0x150>)
 800dd0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dd0e:	4a0e      	ldr	r2, [pc, #56]	@ (800dd48 <RestoreNvmData+0x130>)
 800dd10:	f8c2 33ec 	str.w	r3, [r2, #1004]	@ 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800dd14:	4b14      	ldr	r3, [pc, #80]	@ (800dd68 <RestoreNvmData+0x150>)
 800dd16:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800dd1a:	4b0b      	ldr	r3, [pc, #44]	@ (800dd48 <RestoreNvmData+0x130>)
 800dd1c:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800dd20:	4b09      	ldr	r3, [pc, #36]	@ (800dd48 <RestoreNvmData+0x130>)
 800dd22:	2201      	movs	r2, #1
 800dd24:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800dd28:	4b07      	ldr	r3, [pc, #28]	@ (800dd48 <RestoreNvmData+0x130>)
 800dd2a:	2202      	movs	r2, #2
 800dd2c:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

    // The public/private network flag may change upon reloading MacGroup2
    // from NVM and we thus need to synchronize the radio. The same function
    // is invoked in LoRaMacInitialization.
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800dd30:	4b0e      	ldr	r3, [pc, #56]	@ (800dd6c <RestoreNvmData+0x154>)
 800dd32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dd34:	4a0c      	ldr	r2, [pc, #48]	@ (800dd68 <RestoreNvmData+0x150>)
 800dd36:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 800dd3a:	4610      	mov	r0, r2
 800dd3c:	4798      	blx	r3
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

    return LORAMAC_STATUS_OK;
 800dd3e:	2300      	movs	r3, #0
}
 800dd40:	4618      	mov	r0, r3
 800dd42:	3708      	adds	r7, #8
 800dd44:	46bd      	mov	sp, r7
 800dd46:	bd80      	pop	{r7, pc}
 800dd48:	20000a28 	.word	0x20000a28
 800dd4c:	200085cc 	.word	0x200085cc
 800dd50:	200085f4 	.word	0x200085f4
 800dd54:	20008614 	.word	0x20008614
 800dd58:	20008718 	.word	0x20008718
 800dd5c:	200087f0 	.word	0x200087f0
 800dd60:	20008804 	.word	0x20008804
 800dd64:	20008b80 	.word	0x20008b80
 800dd68:	20008000 	.word	0x20008000
 800dd6c:	0802146c 	.word	0x0802146c

0800dd70 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 800dd70:	b480      	push	{r7}
 800dd72:	b083      	sub	sp, #12
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
 800dd78:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d002      	beq.n	800dd86 <DetermineFrameType+0x16>
 800dd80:	683b      	ldr	r3, [r7, #0]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d101      	bne.n	800dd8a <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800dd86:	2303      	movs	r3, #3
 800dd88:	e03b      	b.n	800de02 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	7b1b      	ldrb	r3, [r3, #12]
 800dd8e:	f003 030f 	and.w	r3, r3, #15
 800dd92:	b2db      	uxtb	r3, r3
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d008      	beq.n	800ddaa <DetermineFrameType+0x3a>
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d003      	beq.n	800ddaa <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 800dda2:	683b      	ldr	r3, [r7, #0]
 800dda4:	2200      	movs	r2, #0
 800dda6:	701a      	strb	r2, [r3, #0]
 800dda8:	e02a      	b.n	800de00 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d103      	bne.n	800ddbc <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	2201      	movs	r2, #1
 800ddb8:	701a      	strb	r2, [r3, #0]
 800ddba:	e021      	b.n	800de00 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	7b1b      	ldrb	r3, [r3, #12]
 800ddc0:	f003 030f 	and.w	r3, r3, #15
 800ddc4:	b2db      	uxtb	r3, r3
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d108      	bne.n	800dddc <DetermineFrameType+0x6c>
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d103      	bne.n	800dddc <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 800ddd4:	683b      	ldr	r3, [r7, #0]
 800ddd6:	2202      	movs	r2, #2
 800ddd8:	701a      	strb	r2, [r3, #0]
 800ddda:	e011      	b.n	800de00 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	7b1b      	ldrb	r3, [r3, #12]
 800dde0:	f003 030f 	and.w	r3, r3, #15
 800dde4:	b2db      	uxtb	r3, r3
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d108      	bne.n	800ddfc <DetermineFrameType+0x8c>
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d003      	beq.n	800ddfc <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 800ddf4:	683b      	ldr	r3, [r7, #0]
 800ddf6:	2203      	movs	r2, #3
 800ddf8:	701a      	strb	r2, [r3, #0]
 800ddfa:	e001      	b.n	800de00 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 800ddfc:	2318      	movs	r3, #24
 800ddfe:	e000      	b.n	800de02 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 800de00:	2300      	movs	r3, #0
}
 800de02:	4618      	mov	r0, r3
 800de04:	370c      	adds	r7, #12
 800de06:	46bd      	mov	sp, r7
 800de08:	bc80      	pop	{r7}
 800de0a:	4770      	bx	lr

0800de0c <CheckRetrans>:
    }
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
 800de0c:	b480      	push	{r7}
 800de0e:	b083      	sub	sp, #12
 800de10:	af00      	add	r7, sp, #0
 800de12:	4603      	mov	r3, r0
 800de14:	460a      	mov	r2, r1
 800de16:	71fb      	strb	r3, [r7, #7]
 800de18:	4613      	mov	r3, r2
 800de1a:	71bb      	strb	r3, [r7, #6]
    if( counter >= limit )
 800de1c:	79fa      	ldrb	r2, [r7, #7]
 800de1e:	79bb      	ldrb	r3, [r7, #6]
 800de20:	429a      	cmp	r2, r3
 800de22:	d301      	bcc.n	800de28 <CheckRetrans+0x1c>
    {
        return true;
 800de24:	2301      	movs	r3, #1
 800de26:	e000      	b.n	800de2a <CheckRetrans+0x1e>
    }
    return false;
 800de28:	2300      	movs	r3, #0
}
 800de2a:	4618      	mov	r0, r3
 800de2c:	370c      	adds	r7, #12
 800de2e:	46bd      	mov	sp, r7
 800de30:	bc80      	pop	{r7}
 800de32:	4770      	bx	lr

0800de34 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 800de34:	b580      	push	{r7, lr}
 800de36:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 800de38:	4b12      	ldr	r3, [pc, #72]	@ (800de84 <CheckRetransUnconfirmedUplink+0x50>)
 800de3a:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800de3e:	4a12      	ldr	r2, [pc, #72]	@ (800de88 <CheckRetransUnconfirmedUplink+0x54>)
 800de40:	f892 2068 	ldrb.w	r2, [r2, #104]	@ 0x68
 800de44:	4611      	mov	r1, r2
 800de46:	4618      	mov	r0, r3
 800de48:	f7ff ffe0 	bl	800de0c <CheckRetrans>
 800de4c:	4603      	mov	r3, r0
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d001      	beq.n	800de56 <CheckRetransUnconfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 800de52:	2301      	movs	r3, #1
 800de54:	e014      	b.n	800de80 <CheckRetransUnconfirmedUplink+0x4c>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800de56:	4b0b      	ldr	r3, [pc, #44]	@ (800de84 <CheckRetransUnconfirmedUplink+0x50>)
 800de58:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800de5c:	f003 0302 	and.w	r3, r3, #2
 800de60:	b2db      	uxtb	r3, r3
 800de62:	2b00      	cmp	r3, #0
 800de64:	d00b      	beq.n	800de7e <CheckRetransUnconfirmedUplink+0x4a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800de66:	4b07      	ldr	r3, [pc, #28]	@ (800de84 <CheckRetransUnconfirmedUplink+0x50>)
 800de68:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d004      	beq.n	800de7a <CheckRetransUnconfirmedUplink+0x46>
            ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800de70:	4b04      	ldr	r3, [pc, #16]	@ (800de84 <CheckRetransUnconfirmedUplink+0x50>)
 800de72:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800de76:	2b01      	cmp	r3, #1
 800de78:	d101      	bne.n	800de7e <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 800de7a:	2301      	movs	r3, #1
 800de7c:	e000      	b.n	800de80 <CheckRetransUnconfirmedUplink+0x4c>
        }
    }
    return false;
 800de7e:	2300      	movs	r3, #0
}
 800de80:	4618      	mov	r0, r3
 800de82:	bd80      	pop	{r7, pc}
 800de84:	20000a28 	.word	0x20000a28
 800de88:	20008000 	.word	0x20008000

0800de8c <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 800de8c:	b580      	push	{r7, lr}
 800de8e:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 800de90:	4b10      	ldr	r3, [pc, #64]	@ (800ded4 <CheckRetransConfirmedUplink+0x48>)
 800de92:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800de96:	4a10      	ldr	r2, [pc, #64]	@ (800ded8 <CheckRetransConfirmedUplink+0x4c>)
 800de98:	f892 2068 	ldrb.w	r2, [r2, #104]	@ 0x68
 800de9c:	4611      	mov	r1, r2
 800de9e:	4618      	mov	r0, r3
 800dea0:	f7ff ffb4 	bl	800de0c <CheckRetrans>
 800dea4:	4603      	mov	r3, r0
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d001      	beq.n	800deae <CheckRetransConfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 800deaa:	2301      	movs	r3, #1
 800deac:	e00f      	b.n	800dece <CheckRetransConfirmedUplink+0x42>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800deae:	4b09      	ldr	r3, [pc, #36]	@ (800ded4 <CheckRetransConfirmedUplink+0x48>)
 800deb0:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800deb4:	f003 0302 	and.w	r3, r3, #2
 800deb8:	b2db      	uxtb	r3, r3
 800deba:	2b00      	cmp	r3, #0
 800debc:	d006      	beq.n	800decc <CheckRetransConfirmedUplink+0x40>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800debe:	4b05      	ldr	r3, [pc, #20]	@ (800ded4 <CheckRetransConfirmedUplink+0x48>)
 800dec0:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d001      	beq.n	800decc <CheckRetransConfirmedUplink+0x40>
        {
            return true;
 800dec8:	2301      	movs	r3, #1
 800deca:	e000      	b.n	800dece <CheckRetransConfirmedUplink+0x42>
        }
    }
    return false;
 800decc:	2300      	movs	r3, #0
}
 800dece:	4618      	mov	r0, r3
 800ded0:	bd80      	pop	{r7, pc}
 800ded2:	bf00      	nop
 800ded4:	20000a28 	.word	0x20000a28
 800ded8:	20008000 	.word	0x20008000

0800dedc <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
 800dedc:	b480      	push	{r7}
 800dede:	b083      	sub	sp, #12
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]
    if( counter < ADR_ACK_COUNTER_MAX )
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800deea:	d002      	beq.n	800def2 <IncreaseAdrAckCounter+0x16>
    {
        counter++;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	3301      	adds	r3, #1
 800def0:	607b      	str	r3, [r7, #4]
    }
    return counter;
 800def2:	687b      	ldr	r3, [r7, #4]
}
 800def4:	4618      	mov	r0, r3
 800def6:	370c      	adds	r7, #12
 800def8:	46bd      	mov	sp, r7
 800defa:	bc80      	pop	{r7}
 800defc:	4770      	bx	lr
	...

0800df00 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 800df00:	b580      	push	{r7, lr}
 800df02:	af00      	add	r7, sp, #0
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800df04:	4b1a      	ldr	r3, [pc, #104]	@ (800df70 <StopRetransmission+0x70>)
 800df06:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800df0a:	f003 0302 	and.w	r3, r3, #2
 800df0e:	b2db      	uxtb	r3, r3
 800df10:	2b00      	cmp	r3, #0
 800df12:	d009      	beq.n	800df28 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800df14:	4b16      	ldr	r3, [pc, #88]	@ (800df70 <StopRetransmission+0x70>)
 800df16:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d011      	beq.n	800df42 <StopRetransmission+0x42>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 800df1e:	4b14      	ldr	r3, [pc, #80]	@ (800df70 <StopRetransmission+0x70>)
 800df20:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800df24:	2b01      	cmp	r3, #1
 800df26:	d00c      	beq.n	800df42 <StopRetransmission+0x42>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800df28:	4b12      	ldr	r3, [pc, #72]	@ (800df74 <StopRetransmission+0x74>)
 800df2a:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d007      	beq.n	800df42 <StopRetransmission+0x42>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 800df32:	4b10      	ldr	r3, [pc, #64]	@ (800df74 <StopRetransmission+0x74>)
 800df34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df36:	4618      	mov	r0, r3
 800df38:	f7ff ffd0 	bl	800dedc <IncreaseAdrAckCounter>
 800df3c:	4603      	mov	r3, r0
 800df3e:	4a0d      	ldr	r2, [pc, #52]	@ (800df74 <StopRetransmission+0x74>)
 800df40:	6293      	str	r3, [r2, #40]	@ 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 800df42:	4b0b      	ldr	r3, [pc, #44]	@ (800df70 <StopRetransmission+0x70>)
 800df44:	2200      	movs	r2, #0
 800df46:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    MacCtx.NodeAckRequested = false;
 800df4a:	4b09      	ldr	r3, [pc, #36]	@ (800df70 <StopRetransmission+0x70>)
 800df4c:	2200      	movs	r2, #0
 800df4e:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 800df52:	4b07      	ldr	r3, [pc, #28]	@ (800df70 <StopRetransmission+0x70>)
 800df54:	2200      	movs	r2, #0
 800df56:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800df5a:	4b05      	ldr	r3, [pc, #20]	@ (800df70 <StopRetransmission+0x70>)
 800df5c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800df60:	f023 0302 	bic.w	r3, r3, #2
 800df64:	4a02      	ldr	r2, [pc, #8]	@ (800df70 <StopRetransmission+0x70>)
 800df66:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return true;
 800df6a:	2301      	movs	r3, #1
}
 800df6c:	4618      	mov	r0, r3
 800df6e:	bd80      	pop	{r7, pc}
 800df70:	20000a28 	.word	0x20000a28
 800df74:	20008000 	.word	0x20008000

0800df78 <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800df7c:	4b08      	ldr	r3, [pc, #32]	@ (800dfa0 <OnMacProcessNotify+0x28>)
 800df7e:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800df82:	2b00      	cmp	r3, #0
 800df84:	d00a      	beq.n	800df9c <OnMacProcessNotify+0x24>
 800df86:	4b06      	ldr	r3, [pc, #24]	@ (800dfa0 <OnMacProcessNotify+0x28>)
 800df88:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800df8c:	695b      	ldr	r3, [r3, #20]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d004      	beq.n	800df9c <OnMacProcessNotify+0x24>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800df92:	4b03      	ldr	r3, [pc, #12]	@ (800dfa0 <OnMacProcessNotify+0x28>)
 800df94:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800df98:	695b      	ldr	r3, [r3, #20]
 800df9a:	4798      	blx	r3
    }
}
 800df9c:	bf00      	nop
 800df9e:	bd80      	pop	{r7, pc}
 800dfa0:	20000a28 	.word	0x20000a28

0800dfa4 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b082      	sub	sp, #8
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	4603      	mov	r3, r0
 800dfac:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 800dfae:	4b0b      	ldr	r3, [pc, #44]	@ (800dfdc <CallNvmDataChangeCallback+0x38>)
 800dfb0:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d00c      	beq.n	800dfd2 <CallNvmDataChangeCallback+0x2e>
 800dfb8:	4b08      	ldr	r3, [pc, #32]	@ (800dfdc <CallNvmDataChangeCallback+0x38>)
 800dfba:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800dfbe:	691b      	ldr	r3, [r3, #16]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d006      	beq.n	800dfd2 <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 800dfc4:	4b05      	ldr	r3, [pc, #20]	@ (800dfdc <CallNvmDataChangeCallback+0x38>)
 800dfc6:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800dfca:	691b      	ldr	r3, [r3, #16]
 800dfcc:	88fa      	ldrh	r2, [r7, #6]
 800dfce:	4610      	mov	r0, r2
 800dfd0:	4798      	blx	r3
    }
}
 800dfd2:	bf00      	nop
 800dfd4:	3708      	adds	r7, #8
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	bd80      	pop	{r7, pc}
 800dfda:	bf00      	nop
 800dfdc:	20000a28 	.word	0x20000a28

0800dfe0 <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 800dfe0:	b480      	push	{r7}
 800dfe2:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800dfe4:	4b0b      	ldr	r3, [pc, #44]	@ (800e014 <IsRequestPending+0x34>)
 800dfe6:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800dfea:	f003 0304 	and.w	r3, r3, #4
 800dfee:	b2db      	uxtb	r3, r3
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d107      	bne.n	800e004 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 800dff4:	4b07      	ldr	r3, [pc, #28]	@ (800e014 <IsRequestPending+0x34>)
 800dff6:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800dffa:	f003 0301 	and.w	r3, r3, #1
 800dffe:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800e000:	2b00      	cmp	r3, #0
 800e002:	d001      	beq.n	800e008 <IsRequestPending+0x28>
    {
        return 1;
 800e004:	2301      	movs	r3, #1
 800e006:	e000      	b.n	800e00a <IsRequestPending+0x2a>
    }
    return 0;
 800e008:	2300      	movs	r3, #0
}
 800e00a:	4618      	mov	r0, r3
 800e00c:	46bd      	mov	sp, r7
 800e00e:	bc80      	pop	{r7}
 800e010:	4770      	bx	lr
 800e012:	bf00      	nop
 800e014:	20000a28 	.word	0x20000a28

0800e018 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800e018:	b590      	push	{r4, r7, lr}
 800e01a:	b091      	sub	sp, #68	@ 0x44
 800e01c:	af02      	add	r7, sp, #8
 800e01e:	6178      	str	r0, [r7, #20]
 800e020:	6139      	str	r1, [r7, #16]
 800e022:	4613      	mov	r3, r2
 800e024:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 800e026:	697b      	ldr	r3, [r7, #20]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d002      	beq.n	800e032 <LoRaMacInitialization+0x1a>
 800e02c:	693b      	ldr	r3, [r7, #16]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d101      	bne.n	800e036 <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e032:	2303      	movs	r3, #3
 800e034:	e27a      	b.n	800e52c <LoRaMacInitialization+0x514>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800e036:	697b      	ldr	r3, [r7, #20]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d00b      	beq.n	800e056 <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 800e03e:	697b      	ldr	r3, [r7, #20]
 800e040:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800e042:	2b00      	cmp	r3, #0
 800e044:	d007      	beq.n	800e056 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800e046:	697b      	ldr	r3, [r7, #20]
 800e048:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d003      	beq.n	800e056 <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 800e04e:	697b      	ldr	r3, [r7, #20]
 800e050:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 800e052:	2b00      	cmp	r3, #0
 800e054:	d101      	bne.n	800e05a <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e056:	2303      	movs	r3, #3
 800e058:	e268      	b.n	800e52c <LoRaMacInitialization+0x514>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800e05a:	7bfb      	ldrb	r3, [r7, #15]
 800e05c:	4618      	mov	r0, r3
 800e05e:	f003 fc19 	bl	8011894 <RegionIsActive>
 800e062:	4603      	mov	r3, r0
 800e064:	f083 0301 	eor.w	r3, r3, #1
 800e068:	b2db      	uxtb	r3, r3
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d001      	beq.n	800e072 <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800e06e:	2309      	movs	r3, #9
 800e070:	e25c      	b.n	800e52c <LoRaMacInitialization+0x514>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 800e072:	6978      	ldr	r0, [r7, #20]
 800e074:	f002 f8ac 	bl	80101d0 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 800e078:	f240 52cc 	movw	r2, #1484	@ 0x5cc
 800e07c:	2100      	movs	r1, #0
 800e07e:	48c7      	ldr	r0, [pc, #796]	@ (800e39c <LoRaMacInitialization+0x384>)
 800e080:	f008 fef6 	bl	8016e70 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800e084:	f240 521c 	movw	r2, #1308	@ 0x51c
 800e088:	2100      	movs	r1, #0
 800e08a:	48c5      	ldr	r0, [pc, #788]	@ (800e3a0 <LoRaMacInitialization+0x388>)
 800e08c:	f008 fef0 	bl	8016e70 <memset1>
    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 800e090:	4ac2      	ldr	r2, [pc, #776]	@ (800e39c <LoRaMacInitialization+0x384>)
 800e092:	7bfb      	ldrb	r3, [r7, #15]
 800e094:	f882 3048 	strb.w	r3, [r2, #72]	@ 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800e098:	4bc0      	ldr	r3, [pc, #768]	@ (800e39c <LoRaMacInitialization+0x384>)
 800e09a:	2200      	movs	r2, #0
 800e09c:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 800e0a0:	4bbe      	ldr	r3, [pc, #760]	@ (800e39c <LoRaMacInitialization+0x384>)
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 800e0a8:	4bbc      	ldr	r3, [pc, #752]	@ (800e39c <LoRaMacInitialization+0x384>)
 800e0aa:	4abe      	ldr	r2, [pc, #760]	@ (800e3a4 <LoRaMacInitialization+0x38c>)
 800e0ac:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800e0b6:	4bbc      	ldr	r3, [pc, #752]	@ (800e3a8 <LoRaMacInitialization+0x390>)
 800e0b8:	61fb      	str	r3, [r7, #28]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800e0ba:	4bbc      	ldr	r3, [pc, #752]	@ (800e3ac <LoRaMacInitialization+0x394>)
 800e0bc:	623b      	str	r3, [r7, #32]
    params.Bands = &RegionBands;
 800e0be:	4bbc      	ldr	r3, [pc, #752]	@ (800e3b0 <LoRaMacInitialization+0x398>)
 800e0c0:	627b      	str	r3, [r7, #36]	@ 0x24
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800e0c2:	4bb6      	ldr	r3, [pc, #728]	@ (800e39c <LoRaMacInitialization+0x384>)
 800e0c4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e0c8:	f107 021c 	add.w	r2, r7, #28
 800e0cc:	4611      	mov	r1, r2
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	f003 fc2c 	bl	801192c <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800e0d4:	230f      	movs	r3, #15
 800e0d6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e0da:	4bb0      	ldr	r3, [pc, #704]	@ (800e39c <LoRaMacInitialization+0x384>)
 800e0dc:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e0e0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800e0e4:	4611      	mov	r1, r2
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	f003 fbe9 	bl	80118be <RegionGetPhyParam>
 800e0ec:	4603      	mov	r3, r0
 800e0ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800e0f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	bf14      	ite	ne
 800e0f6:	2301      	movne	r3, #1
 800e0f8:	2300      	moveq	r3, #0
 800e0fa:	b2da      	uxtb	r2, r3
 800e0fc:	4ba7      	ldr	r3, [pc, #668]	@ (800e39c <LoRaMacInitialization+0x384>)
 800e0fe:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800e102:	230a      	movs	r3, #10
 800e104:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e108:	4ba4      	ldr	r3, [pc, #656]	@ (800e39c <LoRaMacInitialization+0x384>)
 800e10a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e10e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800e112:	4611      	mov	r1, r2
 800e114:	4618      	mov	r0, r3
 800e116:	f003 fbd2 	bl	80118be <RegionGetPhyParam>
 800e11a:	4603      	mov	r3, r0
 800e11c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 800e11e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e120:	b25a      	sxtb	r2, r3
 800e122:	4b9e      	ldr	r3, [pc, #632]	@ (800e39c <LoRaMacInitialization+0x384>)
 800e124:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 800e128:	2306      	movs	r3, #6
 800e12a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e12e:	4b9b      	ldr	r3, [pc, #620]	@ (800e39c <LoRaMacInitialization+0x384>)
 800e130:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e134:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800e138:	4611      	mov	r1, r2
 800e13a:	4618      	mov	r0, r3
 800e13c:	f003 fbbf 	bl	80118be <RegionGetPhyParam>
 800e140:	4603      	mov	r3, r0
 800e142:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 800e144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e146:	b25a      	sxtb	r2, r3
 800e148:	4b94      	ldr	r3, [pc, #592]	@ (800e39c <LoRaMacInitialization+0x384>)
 800e14a:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800e14e:	2310      	movs	r3, #16
 800e150:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e154:	4b91      	ldr	r3, [pc, #580]	@ (800e39c <LoRaMacInitialization+0x384>)
 800e156:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e15a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800e15e:	4611      	mov	r1, r2
 800e160:	4618      	mov	r0, r3
 800e162:	f003 fbac 	bl	80118be <RegionGetPhyParam>
 800e166:	4603      	mov	r3, r0
 800e168:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800e16a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e16c:	4a8b      	ldr	r2, [pc, #556]	@ (800e39c <LoRaMacInitialization+0x384>)
 800e16e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800e172:	2311      	movs	r3, #17
 800e174:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e178:	4b88      	ldr	r3, [pc, #544]	@ (800e39c <LoRaMacInitialization+0x384>)
 800e17a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e17e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800e182:	4611      	mov	r1, r2
 800e184:	4618      	mov	r0, r3
 800e186:	f003 fb9a 	bl	80118be <RegionGetPhyParam>
 800e18a:	4603      	mov	r3, r0
 800e18c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800e18e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e190:	4a82      	ldr	r2, [pc, #520]	@ (800e39c <LoRaMacInitialization+0x384>)
 800e192:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800e196:	2312      	movs	r3, #18
 800e198:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e19c:	4b7f      	ldr	r3, [pc, #508]	@ (800e39c <LoRaMacInitialization+0x384>)
 800e19e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e1a2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800e1a6:	4611      	mov	r1, r2
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	f003 fb88 	bl	80118be <RegionGetPhyParam>
 800e1ae:	4603      	mov	r3, r0
 800e1b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800e1b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1b4:	4a79      	ldr	r2, [pc, #484]	@ (800e39c <LoRaMacInitialization+0x384>)
 800e1b6:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800e1ba:	2313      	movs	r3, #19
 800e1bc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e1c0:	4b76      	ldr	r3, [pc, #472]	@ (800e39c <LoRaMacInitialization+0x384>)
 800e1c2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e1c6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800e1ca:	4611      	mov	r1, r2
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	f003 fb76 	bl	80118be <RegionGetPhyParam>
 800e1d2:	4603      	mov	r3, r0
 800e1d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800e1d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1d8:	4a70      	ldr	r2, [pc, #448]	@ (800e39c <LoRaMacInitialization+0x384>)
 800e1da:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800e1de:	2314      	movs	r3, #20
 800e1e0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e1e4:	4b6d      	ldr	r3, [pc, #436]	@ (800e39c <LoRaMacInitialization+0x384>)
 800e1e6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e1ea:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800e1ee:	4611      	mov	r1, r2
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	f003 fb64 	bl	80118be <RegionGetPhyParam>
 800e1f6:	4603      	mov	r3, r0
 800e1f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800e1fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1fc:	4a67      	ldr	r2, [pc, #412]	@ (800e39c <LoRaMacInitialization+0x384>)
 800e1fe:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800e202:	2316      	movs	r3, #22
 800e204:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e208:	4b64      	ldr	r3, [pc, #400]	@ (800e39c <LoRaMacInitialization+0x384>)
 800e20a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e20e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800e212:	4611      	mov	r1, r2
 800e214:	4618      	mov	r0, r3
 800e216:	f003 fb52 	bl	80118be <RegionGetPhyParam>
 800e21a:	4603      	mov	r3, r0
 800e21c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800e21e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e220:	b2da      	uxtb	r2, r3
 800e222:	4b5e      	ldr	r3, [pc, #376]	@ (800e39c <LoRaMacInitialization+0x384>)
 800e224:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800e228:	2317      	movs	r3, #23
 800e22a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e22e:	4b5b      	ldr	r3, [pc, #364]	@ (800e39c <LoRaMacInitialization+0x384>)
 800e230:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e234:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800e238:	4611      	mov	r1, r2
 800e23a:	4618      	mov	r0, r3
 800e23c:	f003 fb3f 	bl	80118be <RegionGetPhyParam>
 800e240:	4603      	mov	r3, r0
 800e242:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800e244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e246:	4a55      	ldr	r2, [pc, #340]	@ (800e39c <LoRaMacInitialization+0x384>)
 800e248:	f8c2 30b4 	str.w	r3, [r2, #180]	@ 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800e24c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e24e:	4a53      	ldr	r2, [pc, #332]	@ (800e39c <LoRaMacInitialization+0x384>)
 800e250:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800e254:	2318      	movs	r3, #24
 800e256:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e25a:	4b50      	ldr	r3, [pc, #320]	@ (800e39c <LoRaMacInitialization+0x384>)
 800e25c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e260:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800e264:	4611      	mov	r1, r2
 800e266:	4618      	mov	r0, r3
 800e268:	f003 fb29 	bl	80118be <RegionGetPhyParam>
 800e26c:	4603      	mov	r3, r0
 800e26e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800e270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e272:	b2da      	uxtb	r2, r3
 800e274:	4b49      	ldr	r3, [pc, #292]	@ (800e39c <LoRaMacInitialization+0x384>)
 800e276:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800e27a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e27c:	b2da      	uxtb	r2, r3
 800e27e:	4b47      	ldr	r3, [pc, #284]	@ (800e39c <LoRaMacInitialization+0x384>)
 800e280:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800e284:	231d      	movs	r3, #29
 800e286:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e28a:	4b44      	ldr	r3, [pc, #272]	@ (800e39c <LoRaMacInitialization+0x384>)
 800e28c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e290:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800e294:	4611      	mov	r1, r2
 800e296:	4618      	mov	r0, r3
 800e298:	f003 fb11 	bl	80118be <RegionGetPhyParam>
 800e29c:	4603      	mov	r3, r0
 800e29e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800e2a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2a2:	b2da      	uxtb	r2, r3
 800e2a4:	4b3d      	ldr	r3, [pc, #244]	@ (800e39c <LoRaMacInitialization+0x384>)
 800e2a6:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800e2aa:	231e      	movs	r3, #30
 800e2ac:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e2b0:	4b3a      	ldr	r3, [pc, #232]	@ (800e39c <LoRaMacInitialization+0x384>)
 800e2b2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e2b6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800e2ba:	4611      	mov	r1, r2
 800e2bc:	4618      	mov	r0, r3
 800e2be:	f003 fafe 	bl	80118be <RegionGetPhyParam>
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800e2c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2c8:	b2da      	uxtb	r2, r3
 800e2ca:	4b34      	ldr	r3, [pc, #208]	@ (800e39c <LoRaMacInitialization+0x384>)
 800e2cc:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800e2d0:	231f      	movs	r3, #31
 800e2d2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e2d6:	4b31      	ldr	r3, [pc, #196]	@ (800e39c <LoRaMacInitialization+0x384>)
 800e2d8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e2dc:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800e2e0:	4611      	mov	r1, r2
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	f003 faeb 	bl	80118be <RegionGetPhyParam>
 800e2e8:	4603      	mov	r3, r0
 800e2ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 800e2ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2ee:	4a2b      	ldr	r2, [pc, #172]	@ (800e39c <LoRaMacInitialization+0x384>)
 800e2f0:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800e2f4:	2320      	movs	r3, #32
 800e2f6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e2fa:	4b28      	ldr	r3, [pc, #160]	@ (800e39c <LoRaMacInitialization+0x384>)
 800e2fc:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e300:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800e304:	4611      	mov	r1, r2
 800e306:	4618      	mov	r0, r3
 800e308:	f003 fad9 	bl	80118be <RegionGetPhyParam>
 800e30c:	4603      	mov	r3, r0
 800e30e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 800e310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e312:	4a22      	ldr	r2, [pc, #136]	@ (800e39c <LoRaMacInitialization+0x384>)
 800e314:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800e318:	230b      	movs	r3, #11
 800e31a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e31e:	4b1f      	ldr	r3, [pc, #124]	@ (800e39c <LoRaMacInitialization+0x384>)
 800e320:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e324:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800e328:	4611      	mov	r1, r2
 800e32a:	4618      	mov	r0, r3
 800e32c:	f003 fac7 	bl	80118be <RegionGetPhyParam>
 800e330:	4603      	mov	r3, r0
 800e332:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 800e334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e336:	b29a      	uxth	r2, r3
 800e338:	4b18      	ldr	r3, [pc, #96]	@ (800e39c <LoRaMacInitialization+0x384>)
 800e33a:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800e33e:	230c      	movs	r3, #12
 800e340:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e344:	4b15      	ldr	r3, [pc, #84]	@ (800e39c <LoRaMacInitialization+0x384>)
 800e346:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e34a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800e34e:	4611      	mov	r1, r2
 800e350:	4618      	mov	r0, r3
 800e352:	f003 fab4 	bl	80118be <RegionGetPhyParam>
 800e356:	4603      	mov	r3, r0
 800e358:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 800e35a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e35c:	b29a      	uxth	r2, r3
 800e35e:	4b0f      	ldr	r3, [pc, #60]	@ (800e39c <LoRaMacInitialization+0x384>)
 800e360:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800e364:	4b0d      	ldr	r3, [pc, #52]	@ (800e39c <LoRaMacInitialization+0x384>)
 800e366:	2201      	movs	r2, #1
 800e368:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 800e36c:	4b0b      	ldr	r3, [pc, #44]	@ (800e39c <LoRaMacInitialization+0x384>)
 800e36e:	220a      	movs	r2, #10
 800e370:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 800e374:	4b09      	ldr	r3, [pc, #36]	@ (800e39c <LoRaMacInitialization+0x384>)
 800e376:	2206      	movs	r2, #6
 800e378:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 800e37c:	4b07      	ldr	r3, [pc, #28]	@ (800e39c <LoRaMacInitialization+0x384>)
 800e37e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e382:	4a06      	ldr	r2, [pc, #24]	@ (800e39c <LoRaMacInitialization+0x384>)
 800e384:	64d3      	str	r3, [r2, #76]	@ 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 800e386:	4b05      	ldr	r3, [pc, #20]	@ (800e39c <LoRaMacInitialization+0x384>)
 800e388:	f893 2098 	ldrb.w	r2, [r3, #152]	@ 0x98
 800e38c:	4b03      	ldr	r3, [pc, #12]	@ (800e39c <LoRaMacInitialization+0x384>)
 800e38e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 800e392:	4b02      	ldr	r3, [pc, #8]	@ (800e39c <LoRaMacInitialization+0x384>)
 800e394:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e398:	e00c      	b.n	800e3b4 <LoRaMacInitialization+0x39c>
 800e39a:	bf00      	nop
 800e39c:	20008000 	.word	0x20008000
 800e3a0:	20000a28 	.word	0x20000a28
 800e3a4:	01000400 	.word	0x01000400
 800e3a8:	20008224 	.word	0x20008224
 800e3ac:	20008238 	.word	0x20008238
 800e3b0:	20000f44 	.word	0x20000f44
 800e3b4:	4a5f      	ldr	r2, [pc, #380]	@ (800e534 <LoRaMacInitialization+0x51c>)
 800e3b6:	6553      	str	r3, [r2, #84]	@ 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 800e3b8:	4b5e      	ldr	r3, [pc, #376]	@ (800e534 <LoRaMacInitialization+0x51c>)
 800e3ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e3be:	4a5d      	ldr	r2, [pc, #372]	@ (800e534 <LoRaMacInitialization+0x51c>)
 800e3c0:	6593      	str	r3, [r2, #88]	@ 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 800e3c2:	4b5c      	ldr	r3, [pc, #368]	@ (800e534 <LoRaMacInitialization+0x51c>)
 800e3c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e3c8:	4a5a      	ldr	r2, [pc, #360]	@ (800e534 <LoRaMacInitialization+0x51c>)
 800e3ca:	65d3      	str	r3, [r2, #92]	@ 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 800e3cc:	4b59      	ldr	r3, [pc, #356]	@ (800e534 <LoRaMacInitialization+0x51c>)
 800e3ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800e3d2:	4a58      	ldr	r2, [pc, #352]	@ (800e534 <LoRaMacInitialization+0x51c>)
 800e3d4:	6613      	str	r3, [r2, #96]	@ 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 800e3d6:	4b57      	ldr	r3, [pc, #348]	@ (800e534 <LoRaMacInitialization+0x51c>)
 800e3d8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800e3dc:	4a55      	ldr	r2, [pc, #340]	@ (800e534 <LoRaMacInitialization+0x51c>)
 800e3de:	6653      	str	r3, [r2, #100]	@ 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 800e3e0:	4b54      	ldr	r3, [pc, #336]	@ (800e534 <LoRaMacInitialization+0x51c>)
 800e3e2:	f893 20b0 	ldrb.w	r2, [r3, #176]	@ 0xb0
 800e3e6:	4b53      	ldr	r3, [pc, #332]	@ (800e534 <LoRaMacInitialization+0x51c>)
 800e3e8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 800e3ec:	4b51      	ldr	r3, [pc, #324]	@ (800e534 <LoRaMacInitialization+0x51c>)
 800e3ee:	2201      	movs	r2, #1
 800e3f0:	f883 211f 	strb.w	r2, [r3, #287]	@ 0x11f
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 800e3f4:	4a50      	ldr	r2, [pc, #320]	@ (800e538 <LoRaMacInitialization+0x520>)
 800e3f6:	693b      	ldr	r3, [r7, #16]
 800e3f8:	f8c2 3348 	str.w	r3, [r2, #840]	@ 0x348
    ResetMacParameters( false );
 800e3fc:	2000      	movs	r0, #0
 800e3fe:	f7ff f86b 	bl	800d4d8 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 800e402:	4b4c      	ldr	r3, [pc, #304]	@ (800e534 <LoRaMacInitialization+0x51c>)
 800e404:	2201      	movs	r2, #1
 800e406:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119

    MacCtx.MacPrimitives = primitives;
 800e40a:	4a4b      	ldr	r2, [pc, #300]	@ (800e538 <LoRaMacInitialization+0x520>)
 800e40c:	697b      	ldr	r3, [r7, #20]
 800e40e:	f8c2 3344 	str.w	r3, [r2, #836]	@ 0x344
    MacCtx.MacFlags.Value = 0;
 800e412:	4b49      	ldr	r3, [pc, #292]	@ (800e538 <LoRaMacInitialization+0x520>)
 800e414:	2200      	movs	r2, #0
 800e416:	f883 2491 	strb.w	r2, [r3, #1169]	@ 0x491
    MacCtx.MacState = LORAMAC_STOPPED;
 800e41a:	4b47      	ldr	r3, [pc, #284]	@ (800e538 <LoRaMacInitialization+0x520>)
 800e41c:	2201      	movs	r2, #1
 800e41e:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 800e422:	4b44      	ldr	r3, [pc, #272]	@ (800e534 <LoRaMacInitialization+0x51c>)
 800e424:	2200      	movs	r2, #0
 800e426:	62da      	str	r2, [r3, #44]	@ 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 800e428:	4b42      	ldr	r3, [pc, #264]	@ (800e534 <LoRaMacInitialization+0x51c>)
 800e42a:	2200      	movs	r2, #0
 800e42c:	631a      	str	r2, [r3, #48]	@ 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800e42e:	2300      	movs	r3, #0
 800e430:	9300      	str	r3, [sp, #0]
 800e432:	4b42      	ldr	r3, [pc, #264]	@ (800e53c <LoRaMacInitialization+0x524>)
 800e434:	2200      	movs	r2, #0
 800e436:	f04f 31ff 	mov.w	r1, #4294967295
 800e43a:	4841      	ldr	r0, [pc, #260]	@ (800e540 <LoRaMacInitialization+0x528>)
 800e43c:	f00c f878 	bl	801a530 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800e440:	2300      	movs	r3, #0
 800e442:	9300      	str	r3, [sp, #0]
 800e444:	4b3f      	ldr	r3, [pc, #252]	@ (800e544 <LoRaMacInitialization+0x52c>)
 800e446:	2200      	movs	r2, #0
 800e448:	f04f 31ff 	mov.w	r1, #4294967295
 800e44c:	483e      	ldr	r0, [pc, #248]	@ (800e548 <LoRaMacInitialization+0x530>)
 800e44e:	f00c f86f 	bl	801a530 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800e452:	2300      	movs	r3, #0
 800e454:	9300      	str	r3, [sp, #0]
 800e456:	4b3d      	ldr	r3, [pc, #244]	@ (800e54c <LoRaMacInitialization+0x534>)
 800e458:	2200      	movs	r2, #0
 800e45a:	f04f 31ff 	mov.w	r1, #4294967295
 800e45e:	483c      	ldr	r0, [pc, #240]	@ (800e550 <LoRaMacInitialization+0x538>)
 800e460:	f00c f866 	bl	801a530 <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 800e464:	2300      	movs	r3, #0
 800e466:	9300      	str	r3, [sp, #0]
 800e468:	4b3a      	ldr	r3, [pc, #232]	@ (800e554 <LoRaMacInitialization+0x53c>)
 800e46a:	2200      	movs	r2, #0
 800e46c:	f04f 31ff 	mov.w	r1, #4294967295
 800e470:	4839      	ldr	r0, [pc, #228]	@ (800e558 <LoRaMacInitialization+0x540>)
 800e472:	f00c f85d 	bl	801a530 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800e476:	4c2f      	ldr	r4, [pc, #188]	@ (800e534 <LoRaMacInitialization+0x51c>)
 800e478:	463b      	mov	r3, r7
 800e47a:	4618      	mov	r0, r3
 800e47c:	f00b ffc2 	bl	801a404 <SysTimeGetMcuTime>
 800e480:	f504 7392 	add.w	r3, r4, #292	@ 0x124
 800e484:	463a      	mov	r2, r7
 800e486:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e48a:	e883 0003 	stmia.w	r3, {r0, r1}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 800e48e:	4b33      	ldr	r3, [pc, #204]	@ (800e55c <LoRaMacInitialization+0x544>)
 800e490:	2200      	movs	r2, #0
 800e492:	601a      	str	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800e494:	4b28      	ldr	r3, [pc, #160]	@ (800e538 <LoRaMacInitialization+0x520>)
 800e496:	4a32      	ldr	r2, [pc, #200]	@ (800e560 <LoRaMacInitialization+0x548>)
 800e498:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800e49c:	4b26      	ldr	r3, [pc, #152]	@ (800e538 <LoRaMacInitialization+0x520>)
 800e49e:	4a31      	ldr	r2, [pc, #196]	@ (800e564 <LoRaMacInitialization+0x54c>)
 800e4a0:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800e4a4:	4b24      	ldr	r3, [pc, #144]	@ (800e538 <LoRaMacInitialization+0x520>)
 800e4a6:	4a30      	ldr	r2, [pc, #192]	@ (800e568 <LoRaMacInitialization+0x550>)
 800e4a8:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800e4ac:	4b22      	ldr	r3, [pc, #136]	@ (800e538 <LoRaMacInitialization+0x520>)
 800e4ae:	4a2f      	ldr	r2, [pc, #188]	@ (800e56c <LoRaMacInitialization+0x554>)
 800e4b0:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800e4b4:	4b20      	ldr	r3, [pc, #128]	@ (800e538 <LoRaMacInitialization+0x520>)
 800e4b6:	4a2e      	ldr	r2, [pc, #184]	@ (800e570 <LoRaMacInitialization+0x558>)
 800e4b8:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358
    Radio.Init( &MacCtx.RadioEvents );
 800e4bc:	4b2d      	ldr	r3, [pc, #180]	@ (800e574 <LoRaMacInitialization+0x55c>)
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	482d      	ldr	r0, [pc, #180]	@ (800e578 <LoRaMacInitialization+0x560>)
 800e4c2:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 800e4c4:	482d      	ldr	r0, [pc, #180]	@ (800e57c <LoRaMacInitialization+0x564>)
 800e4c6:	f008 f90f 	bl	80166e8 <SecureElementInit>
 800e4ca:	4603      	mov	r3, r0
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d001      	beq.n	800e4d4 <LoRaMacInitialization+0x4bc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800e4d0:	2311      	movs	r3, #17
 800e4d2:	e02b      	b.n	800e52c <LoRaMacInitialization+0x514>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 800e4d4:	4817      	ldr	r0, [pc, #92]	@ (800e534 <LoRaMacInitialization+0x51c>)
 800e4d6:	f002 fb37 	bl	8010b48 <LoRaMacCryptoInit>
 800e4da:	4603      	mov	r3, r0
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d001      	beq.n	800e4e4 <LoRaMacInitialization+0x4cc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800e4e0:	2311      	movs	r3, #17
 800e4e2:	e023      	b.n	800e52c <LoRaMacInitialization+0x514>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 800e4e4:	f001 fc36 	bl	800fd54 <LoRaMacCommandsInit>
 800e4e8:	4603      	mov	r3, r0
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d001      	beq.n	800e4f2 <LoRaMacInitialization+0x4da>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e4ee:	2313      	movs	r3, #19
 800e4f0:	e01c      	b.n	800e52c <LoRaMacInitialization+0x514>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800e4f2:	4823      	ldr	r0, [pc, #140]	@ (800e580 <LoRaMacInitialization+0x568>)
 800e4f4:	f002 fbc8 	bl	8010c88 <LoRaMacCryptoSetMulticastReference>
 800e4f8:	4603      	mov	r3, r0
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d001      	beq.n	800e502 <LoRaMacInitialization+0x4ea>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800e4fe:	2311      	movs	r3, #17
 800e500:	e014      	b.n	800e52c <LoRaMacInitialization+0x514>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 800e502:	4b1c      	ldr	r3, [pc, #112]	@ (800e574 <LoRaMacInitialization+0x55c>)
 800e504:	695b      	ldr	r3, [r3, #20]
 800e506:	4798      	blx	r3
 800e508:	4603      	mov	r3, r0
 800e50a:	4618      	mov	r0, r3
 800e50c:	f008 fc50 	bl	8016db0 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800e510:	4b18      	ldr	r3, [pc, #96]	@ (800e574 <LoRaMacInitialization+0x55c>)
 800e512:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e514:	4a07      	ldr	r2, [pc, #28]	@ (800e534 <LoRaMacInitialization+0x51c>)
 800e516:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 800e51a:	4610      	mov	r0, r2
 800e51c:	4798      	blx	r3
    Radio.Sleep( );
 800e51e:	4b15      	ldr	r3, [pc, #84]	@ (800e574 <LoRaMacInitialization+0x55c>)
 800e520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e522:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800e524:	2001      	movs	r0, #1
 800e526:	f7fd fa71 	bl	800ba0c <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 800e52a:	2300      	movs	r3, #0
}
 800e52c:	4618      	mov	r0, r3
 800e52e:	373c      	adds	r7, #60	@ 0x3c
 800e530:	46bd      	mov	sp, r7
 800e532:	bd90      	pop	{r4, r7, pc}
 800e534:	20008000 	.word	0x20008000
 800e538:	20000a28 	.word	0x20000a28
 800e53c:	0800bf99 	.word	0x0800bf99
 800e540:	20000d90 	.word	0x20000d90
 800e544:	0800c029 	.word	0x0800c029
 800e548:	20000da8 	.word	0x20000da8
 800e54c:	0800c0a1 	.word	0x0800c0a1
 800e550:	20000dc0 	.word	0x20000dc0
 800e554:	0800c121 	.word	0x0800c121
 800e558:	20000e28 	.word	0x20000e28
 800e55c:	20000fd4 	.word	0x20000fd4
 800e560:	0800aa31 	.word	0x0800aa31
 800e564:	0800aa7d 	.word	0x0800aa7d
 800e568:	0800ab1d 	.word	0x0800ab1d
 800e56c:	0800aaf1 	.word	0x0800aaf1
 800e570:	0800ab39 	.word	0x0800ab39
 800e574:	0802146c 	.word	0x0802146c
 800e578:	20000d74 	.word	0x20000d74
 800e57c:	2000814c 	.word	0x2000814c
 800e580:	200080e8 	.word	0x200080e8

0800e584 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 800e584:	b580      	push	{r7, lr}
 800e586:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 800e588:	4b04      	ldr	r3, [pc, #16]	@ (800e59c <LoRaMacStart+0x18>)
 800e58a:	2200      	movs	r2, #0
 800e58c:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    UpdateRxSlotIdleState();
 800e590:	f7fc fae8 	bl	800ab64 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
 800e594:	2300      	movs	r3, #0
}
 800e596:	4618      	mov	r0, r3
 800e598:	bd80      	pop	{r7, pc}
 800e59a:	bf00      	nop
 800e59c:	20000a28 	.word	0x20000a28

0800e5a0 <LoRaMacQueryTxPossible>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800e5a0:	b590      	push	{r4, r7, lr}
 800e5a2:	b08d      	sub	sp, #52	@ 0x34
 800e5a4:	af02      	add	r7, sp, #8
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	6039      	str	r1, [r7, #0]
 800e5aa:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800e5ac:	4b42      	ldr	r3, [pc, #264]	@ (800e6b8 <LoRaMacQueryTxPossible+0x118>)
 800e5ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5b0:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800e5b2:	4b41      	ldr	r3, [pc, #260]	@ (800e6b8 <LoRaMacQueryTxPossible+0x118>)
 800e5b4:	f993 30dd 	ldrsb.w	r3, [r3, #221]	@ 0xdd
 800e5b8:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800e5ba:	4b3f      	ldr	r3, [pc, #252]	@ (800e6b8 <LoRaMacQueryTxPossible+0x118>)
 800e5bc:	f993 30dc 	ldrsb.w	r3, [r3, #220]	@ 0xdc
 800e5c0:	73bb      	strb	r3, [r7, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 800e5c2:	4b3e      	ldr	r3, [pc, #248]	@ (800e6bc <LoRaMacQueryTxPossible+0x11c>)
 800e5c4:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800e5c8:	737b      	strb	r3, [r7, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 800e5ce:	683b      	ldr	r3, [r7, #0]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d101      	bne.n	800e5d8 <LoRaMacQueryTxPossible+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e5d4:	2303      	movs	r3, #3
 800e5d6:	e06b      	b.n	800e6b0 <LoRaMacQueryTxPossible+0x110>

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 800e5d8:	2300      	movs	r3, #0
 800e5da:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800e5dc:	4b36      	ldr	r3, [pc, #216]	@ (800e6b8 <LoRaMacQueryTxPossible+0x118>)
 800e5de:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800e5e2:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800e5e4:	4b34      	ldr	r3, [pc, #208]	@ (800e6b8 <LoRaMacQueryTxPossible+0x118>)
 800e5e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e5e8:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800e5ea:	4b33      	ldr	r3, [pc, #204]	@ (800e6b8 <LoRaMacQueryTxPossible+0x118>)
 800e5ec:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 800e5f0:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800e5f2:	4b31      	ldr	r3, [pc, #196]	@ (800e6b8 <LoRaMacQueryTxPossible+0x118>)
 800e5f4:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 800e5f8:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800e5fa:	4b2f      	ldr	r3, [pc, #188]	@ (800e6b8 <LoRaMacQueryTxPossible+0x118>)
 800e5fc:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800e600:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800e604:	4b2c      	ldr	r3, [pc, #176]	@ (800e6b8 <LoRaMacQueryTxPossible+0x118>)
 800e606:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800e60a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 800e60e:	4b2b      	ldr	r3, [pc, #172]	@ (800e6bc <LoRaMacQueryTxPossible+0x11c>)
 800e610:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800e614:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800e618:	4b27      	ldr	r3, [pc, #156]	@ (800e6b8 <LoRaMacQueryTxPossible+0x118>)
 800e61a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800e61e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 800e622:	4b25      	ldr	r3, [pc, #148]	@ (800e6b8 <LoRaMacQueryTxPossible+0x118>)
 800e624:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e628:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 800e62c:	f107 040d 	add.w	r4, r7, #13
 800e630:	f107 020e 	add.w	r2, r7, #14
 800e634:	f107 010f 	add.w	r1, r7, #15
 800e638:	f107 0014 	add.w	r0, r7, #20
 800e63c:	f107 0310 	add.w	r3, r7, #16
 800e640:	9300      	str	r3, [sp, #0]
 800e642:	4623      	mov	r3, r4
 800e644:	f001 f8b4 	bl	800f7b0 <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800e648:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e64c:	4618      	mov	r0, r3
 800e64e:	f7fd fead 	bl	800c3ac <GetMaxAppPayloadWithoutFOptsLength>
 800e652:	4603      	mov	r3, r0
 800e654:	461a      	mov	r2, r3
 800e656:	683b      	ldr	r3, [r7, #0]
 800e658:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800e65a:	f107 0308 	add.w	r3, r7, #8
 800e65e:	4618      	mov	r0, r3
 800e660:	f001 fc7e 	bl	800ff60 <LoRaMacCommandsGetSizeSerializedCmds>
 800e664:	4603      	mov	r3, r0
 800e666:	2b00      	cmp	r3, #0
 800e668:	d001      	beq.n	800e66e <LoRaMacQueryTxPossible+0xce>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e66a:	2313      	movs	r3, #19
 800e66c:	e020      	b.n	800e6b0 <LoRaMacQueryTxPossible+0x110>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800e66e:	68bb      	ldr	r3, [r7, #8]
 800e670:	2b0f      	cmp	r3, #15
 800e672:	d819      	bhi.n	800e6a8 <LoRaMacQueryTxPossible+0x108>
 800e674:	683b      	ldr	r3, [r7, #0]
 800e676:	785b      	ldrb	r3, [r3, #1]
 800e678:	461a      	mov	r2, r3
 800e67a:	68bb      	ldr	r3, [r7, #8]
 800e67c:	429a      	cmp	r2, r3
 800e67e:	d313      	bcc.n	800e6a8 <LoRaMacQueryTxPossible+0x108>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800e680:	683b      	ldr	r3, [r7, #0]
 800e682:	785a      	ldrb	r2, [r3, #1]
 800e684:	68bb      	ldr	r3, [r7, #8]
 800e686:	b2db      	uxtb	r3, r3
 800e688:	1ad3      	subs	r3, r2, r3
 800e68a:	b2da      	uxtb	r2, r3
 800e68c:	683b      	ldr	r3, [r7, #0]
 800e68e:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800e690:	683b      	ldr	r3, [r7, #0]
 800e692:	785b      	ldrb	r3, [r3, #1]
 800e694:	4619      	mov	r1, r3
 800e696:	79fa      	ldrb	r2, [r7, #7]
 800e698:	68bb      	ldr	r3, [r7, #8]
 800e69a:	4413      	add	r3, r2
 800e69c:	4299      	cmp	r1, r3
 800e69e:	d301      	bcc.n	800e6a4 <LoRaMacQueryTxPossible+0x104>
        {
            return LORAMAC_STATUS_OK;
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	e005      	b.n	800e6b0 <LoRaMacQueryTxPossible+0x110>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 800e6a4:	2308      	movs	r3, #8
 800e6a6:	e003      	b.n	800e6b0 <LoRaMacQueryTxPossible+0x110>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800e6ae:	2308      	movs	r3, #8
    }
}
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	372c      	adds	r7, #44	@ 0x2c
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	bd90      	pop	{r4, r7, pc}
 800e6b8:	20008000 	.word	0x20008000
 800e6bc:	20000a28 	.word	0x20000a28

0800e6c0 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 800e6c0:	b590      	push	{r4, r7, lr}
 800e6c2:	b087      	sub	sp, #28
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d101      	bne.n	800e6d6 <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e6d2:	2303      	movs	r3, #3
 800e6d4:	e1c4      	b.n	800ea60 <LoRaMacMibGetRequestConfirm+0x3a0>
    }

    switch( mibGet->Type )
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	781b      	ldrb	r3, [r3, #0]
 800e6da:	2b41      	cmp	r3, #65	@ 0x41
 800e6dc:	f200 81b9 	bhi.w	800ea52 <LoRaMacMibGetRequestConfirm+0x392>
 800e6e0:	a201      	add	r2, pc, #4	@ (adr r2, 800e6e8 <LoRaMacMibGetRequestConfirm+0x28>)
 800e6e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6e6:	bf00      	nop
 800e6e8:	0800e7f1 	.word	0x0800e7f1
 800e6ec:	0800e7fd 	.word	0x0800e7fd
 800e6f0:	0800e809 	.word	0x0800e809
 800e6f4:	0800e815 	.word	0x0800e815
 800e6f8:	0800e821 	.word	0x0800e821
 800e6fc:	0800e82d 	.word	0x0800e82d
 800e700:	0800e839 	.word	0x0800e839
 800e704:	0800ea53 	.word	0x0800ea53
 800e708:	0800ea53 	.word	0x0800ea53
 800e70c:	0800ea53 	.word	0x0800ea53
 800e710:	0800ea53 	.word	0x0800ea53
 800e714:	0800ea53 	.word	0x0800ea53
 800e718:	0800ea53 	.word	0x0800ea53
 800e71c:	0800ea53 	.word	0x0800ea53
 800e720:	0800ea53 	.word	0x0800ea53
 800e724:	0800e84d 	.word	0x0800e84d
 800e728:	0800e859 	.word	0x0800e859
 800e72c:	0800e865 	.word	0x0800e865
 800e730:	0800e887 	.word	0x0800e887
 800e734:	0800e899 	.word	0x0800e899
 800e738:	0800e8ab 	.word	0x0800e8ab
 800e73c:	0800e8bd 	.word	0x0800e8bd
 800e740:	0800e8f1 	.word	0x0800e8f1
 800e744:	0800e8cf 	.word	0x0800e8cf
 800e748:	0800e913 	.word	0x0800e913
 800e74c:	0800e91f 	.word	0x0800e91f
 800e750:	0800e929 	.word	0x0800e929
 800e754:	0800e933 	.word	0x0800e933
 800e758:	0800e93d 	.word	0x0800e93d
 800e75c:	0800e947 	.word	0x0800e947
 800e760:	0800e951 	.word	0x0800e951
 800e764:	0800e97d 	.word	0x0800e97d
 800e768:	0800e989 	.word	0x0800e989
 800e76c:	0800e9a1 	.word	0x0800e9a1
 800e770:	0800e995 	.word	0x0800e995
 800e774:	0800e9ad 	.word	0x0800e9ad
 800e778:	0800e9b7 	.word	0x0800e9b7
 800e77c:	0800e9c3 	.word	0x0800e9c3
 800e780:	0800e9df 	.word	0x0800e9df
 800e784:	0800e9cf 	.word	0x0800e9cf
 800e788:	0800e9d7 	.word	0x0800e9d7
 800e78c:	0800ea53 	.word	0x0800ea53
 800e790:	0800e9eb 	.word	0x0800e9eb
 800e794:	0800ea53 	.word	0x0800ea53
 800e798:	0800ea53 	.word	0x0800ea53
 800e79c:	0800ea53 	.word	0x0800ea53
 800e7a0:	0800ea53 	.word	0x0800ea53
 800e7a4:	0800ea53 	.word	0x0800ea53
 800e7a8:	0800ea53 	.word	0x0800ea53
 800e7ac:	0800ea53 	.word	0x0800ea53
 800e7b0:	0800ea53 	.word	0x0800ea53
 800e7b4:	0800ea53 	.word	0x0800ea53
 800e7b8:	0800ea53 	.word	0x0800ea53
 800e7bc:	0800ea53 	.word	0x0800ea53
 800e7c0:	0800ea53 	.word	0x0800ea53
 800e7c4:	0800ea53 	.word	0x0800ea53
 800e7c8:	0800ea53 	.word	0x0800ea53
 800e7cc:	0800ea53 	.word	0x0800ea53
 800e7d0:	0800e9ff 	.word	0x0800e9ff
 800e7d4:	0800ea0b 	.word	0x0800ea0b
 800e7d8:	0800ea17 	.word	0x0800ea17
 800e7dc:	0800ea23 	.word	0x0800ea23
 800e7e0:	0800ea2f 	.word	0x0800ea2f
 800e7e4:	0800ea3b 	.word	0x0800ea3b
 800e7e8:	0800ea47 	.word	0x0800ea47
 800e7ec:	0800ea4d 	.word	0x0800ea4d
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 800e7f0:	4b9d      	ldr	r3, [pc, #628]	@ (800ea68 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e7f2:	f893 2118 	ldrb.w	r2, [r3, #280]	@ 0x118
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	711a      	strb	r2, [r3, #4]
            break;
 800e7fa:	e130      	b.n	800ea5e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800e7fc:	4b9a      	ldr	r3, [pc, #616]	@ (800ea68 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e7fe:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	711a      	strb	r2, [r3, #4]
            break;
 800e806:	e12a      	b.n	800ea5e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	685b      	ldr	r3, [r3, #4]
 800e80c:	4618      	mov	r0, r3
 800e80e:	f008 fa29 	bl	8016c64 <SecureElementGetDevEui>
            break;
 800e812:	e124      	b.n	800ea5e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	685b      	ldr	r3, [r3, #4]
 800e818:	4618      	mov	r0, r3
 800e81a:	f008 fa6d 	bl	8016cf8 <SecureElementGetJoinEui>
            break;
 800e81e:	e11e      	b.n	800ea5e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 800e820:	4b91      	ldr	r3, [pc, #580]	@ (800ea68 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e822:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	711a      	strb	r2, [r3, #4]
            break;
 800e82a:	e118      	b.n	800ea5e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 800e82c:	4b8e      	ldr	r3, [pc, #568]	@ (800ea68 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e82e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	605a      	str	r2, [r3, #4]
            break;
 800e836:	e112      	b.n	800ea5e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 800e838:	4b8b      	ldr	r3, [pc, #556]	@ (800ea68 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e83a:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	3304      	adds	r3, #4
 800e842:	4619      	mov	r1, r3
 800e844:	4610      	mov	r0, r2
 800e846:	f008 fa6f 	bl	8016d28 <SecureElementGetDevAddr>
            break;
 800e84a:	e108      	b.n	800ea5e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 800e84c:	4b86      	ldr	r3, [pc, #536]	@ (800ea68 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e84e:	f893 2119 	ldrb.w	r2, [r3, #281]	@ 0x119
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	711a      	strb	r2, [r3, #4]
            break;
 800e856:	e102      	b.n	800ea5e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800e858:	4b83      	ldr	r3, [pc, #524]	@ (800ea68 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e85a:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	711a      	strb	r2, [r3, #4]
            break;
 800e862:	e0fc      	b.n	800ea5e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 800e864:	231c      	movs	r3, #28
 800e866:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e868:	4b7f      	ldr	r3, [pc, #508]	@ (800ea68 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e86a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e86e:	f107 0210 	add.w	r2, r7, #16
 800e872:	4611      	mov	r1, r2
 800e874:	4618      	mov	r0, r3
 800e876:	f003 f822 	bl	80118be <RegionGetPhyParam>
 800e87a:	4603      	mov	r3, r0
 800e87c:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 800e87e:	68fa      	ldr	r2, [r7, #12]
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	605a      	str	r2, [r3, #4]
            break;
 800e884:	e0eb      	b.n	800ea5e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	4a77      	ldr	r2, [pc, #476]	@ (800ea68 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e88a:	3304      	adds	r3, #4
 800e88c:	326c      	adds	r2, #108	@ 0x6c
 800e88e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e892:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 800e896:	e0e2      	b.n	800ea5e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	4a73      	ldr	r2, [pc, #460]	@ (800ea68 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e89c:	3304      	adds	r3, #4
 800e89e:	32b4      	adds	r2, #180	@ 0xb4
 800e8a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e8a4:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 800e8a8:	e0d9      	b.n	800ea5e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	4a6e      	ldr	r2, [pc, #440]	@ (800ea68 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e8ae:	3304      	adds	r3, #4
 800e8b0:	3274      	adds	r2, #116	@ 0x74
 800e8b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e8b6:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 800e8ba:	e0d0      	b.n	800ea5e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	4a6a      	ldr	r2, [pc, #424]	@ (800ea68 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e8c0:	3304      	adds	r3, #4
 800e8c2:	32bc      	adds	r2, #188	@ 0xbc
 800e8c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e8c8:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 800e8cc:	e0c7      	b.n	800ea5e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800e8ce:	231a      	movs	r3, #26
 800e8d0:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e8d2:	4b65      	ldr	r3, [pc, #404]	@ (800ea68 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e8d4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e8d8:	f107 0210 	add.w	r2, r7, #16
 800e8dc:	4611      	mov	r1, r2
 800e8de:	4618      	mov	r0, r3
 800e8e0:	f002 ffed 	bl	80118be <RegionGetPhyParam>
 800e8e4:	4603      	mov	r3, r0
 800e8e6:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800e8e8:	68fa      	ldr	r2, [r7, #12]
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	605a      	str	r2, [r3, #4]
            break;
 800e8ee:	e0b6      	b.n	800ea5e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800e8f0:	2319      	movs	r3, #25
 800e8f2:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e8f4:	4b5c      	ldr	r3, [pc, #368]	@ (800ea68 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e8f6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e8fa:	f107 0210 	add.w	r2, r7, #16
 800e8fe:	4611      	mov	r1, r2
 800e900:	4618      	mov	r0, r3
 800e902:	f002 ffdc 	bl	80118be <RegionGetPhyParam>
 800e906:	4603      	mov	r3, r0
 800e908:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800e90a:	68fa      	ldr	r2, [r7, #12]
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	605a      	str	r2, [r3, #4]
            break;
 800e910:	e0a5      	b.n	800ea5e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800e912:	4b55      	ldr	r3, [pc, #340]	@ (800ea68 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e914:	f893 2068 	ldrb.w	r2, [r3, #104]	@ 0x68
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	711a      	strb	r2, [r3, #4]
            break;
 800e91c:	e09f      	b.n	800ea5e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 800e91e:	4b52      	ldr	r3, [pc, #328]	@ (800ea68 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e920:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	605a      	str	r2, [r3, #4]
            break;
 800e926:	e09a      	b.n	800ea5e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 800e928:	4b4f      	ldr	r3, [pc, #316]	@ (800ea68 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e92a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	605a      	str	r2, [r3, #4]
            break;
 800e930:	e095      	b.n	800ea5e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 800e932:	4b4d      	ldr	r3, [pc, #308]	@ (800ea68 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e934:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	605a      	str	r2, [r3, #4]
            break;
 800e93a:	e090      	b.n	800ea5e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 800e93c:	4b4a      	ldr	r3, [pc, #296]	@ (800ea68 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e93e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	605a      	str	r2, [r3, #4]
            break;
 800e944:	e08b      	b.n	800ea5e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 800e946:	4b48      	ldr	r3, [pc, #288]	@ (800ea68 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e948:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	605a      	str	r2, [r3, #4]
            break;
 800e94e:	e086      	b.n	800ea5e <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 800e950:	2302      	movs	r3, #2
 800e952:	743b      	strb	r3, [r7, #16]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800e954:	4b44      	ldr	r3, [pc, #272]	@ (800ea68 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e956:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800e95a:	74bb      	strb	r3, [r7, #18]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e95c:	4b42      	ldr	r3, [pc, #264]	@ (800ea68 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e95e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e962:	f107 0210 	add.w	r2, r7, #16
 800e966:	4611      	mov	r1, r2
 800e968:	4618      	mov	r0, r3
 800e96a:	f002 ffa8 	bl	80118be <RegionGetPhyParam>
 800e96e:	4603      	mov	r3, r0
 800e970:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	b25a      	sxtb	r2, r3
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	711a      	strb	r2, [r3, #4]
            break;
 800e97a:	e070      	b.n	800ea5e <LoRaMacMibGetRequestConfirm+0x39e>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800e97c:	4b3a      	ldr	r3, [pc, #232]	@ (800ea68 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e97e:	f993 20dd 	ldrsb.w	r2, [r3, #221]	@ 0xdd
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	711a      	strb	r2, [r3, #4]
            break;
 800e986:	e06a      	b.n	800ea5e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800e988:	4b37      	ldr	r3, [pc, #220]	@ (800ea68 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e98a:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	711a      	strb	r2, [r3, #4]
            break;
 800e992:	e064      	b.n	800ea5e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800e994:	4b34      	ldr	r3, [pc, #208]	@ (800ea68 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e996:	f993 20dc 	ldrsb.w	r2, [r3, #220]	@ 0xdc
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	711a      	strb	r2, [r3, #4]
            break;
 800e99e:	e05e      	b.n	800ea5e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800e9a0:	4b31      	ldr	r3, [pc, #196]	@ (800ea68 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e9a2:	f993 2038 	ldrsb.w	r2, [r3, #56]	@ 0x38
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	711a      	strb	r2, [r3, #4]
            break;
 800e9aa:	e058      	b.n	800ea5e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 800e9ac:	4b2e      	ldr	r3, [pc, #184]	@ (800ea68 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e9ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	605a      	str	r2, [r3, #4]
            break;
 800e9b4:	e053      	b.n	800ea5e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 800e9b6:	4b2c      	ldr	r3, [pc, #176]	@ (800ea68 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e9b8:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	711a      	strb	r2, [r3, #4]
            break;
 800e9c0:	e04d      	b.n	800ea5e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800e9c2:	4b29      	ldr	r3, [pc, #164]	@ (800ea68 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e9c4:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	605a      	str	r2, [r3, #4]
            break;
 800e9cc:	e047      	b.n	800ea5e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	4a25      	ldr	r2, [pc, #148]	@ (800ea68 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e9d2:	605a      	str	r2, [r3, #4]
            break;
 800e9d4:	e043      	b.n	800ea5e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	4a24      	ldr	r2, [pc, #144]	@ (800ea6c <LoRaMacMibGetRequestConfirm+0x3ac>)
 800e9da:	605a      	str	r2, [r3, #4]
#else
            mibGet->Param.BackupContexts = NULL;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 800e9dc:	e03f      	b.n	800ea5e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800e9de:	4b22      	ldr	r3, [pc, #136]	@ (800ea68 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e9e0:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	605a      	str	r2, [r3, #4]
            break;
 800e9e8:	e039      	b.n	800ea5e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	4a1e      	ldr	r2, [pc, #120]	@ (800ea68 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e9ee:	f8d2 212c 	ldr.w	r2, [r2, #300]	@ 0x12c
 800e9f2:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800e9f4:	687c      	ldr	r4, [r7, #4]
 800e9f6:	f003 f96f 	bl	8011cd8 <RegionGetVersion>
 800e9fa:	60a0      	str	r0, [r4, #8]
            break;
 800e9fc:	e02f      	b.n	800ea5e <LoRaMacMibGetRequestConfirm+0x39e>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800e9fe:	4b1a      	ldr	r3, [pc, #104]	@ (800ea68 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800ea00:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	605a      	str	r2, [r3, #4]
            break;
 800ea08:	e029      	b.n	800ea5e <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 800ea0a:	4b17      	ldr	r3, [pc, #92]	@ (800ea68 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800ea0c:	f893 211f 	ldrb.w	r2, [r3, #287]	@ 0x11f
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	711a      	strb	r2, [r3, #4]
            break;
 800ea14:	e023      	b.n	800ea5e <LoRaMacMibGetRequestConfirm+0x39e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800ea16:	4b14      	ldr	r3, [pc, #80]	@ (800ea68 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800ea18:	f8b3 2088 	ldrh.w	r2, [r3, #136]	@ 0x88
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	809a      	strh	r2, [r3, #4]
            break;
 800ea20:	e01d      	b.n	800ea5e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800ea22:	4b11      	ldr	r3, [pc, #68]	@ (800ea68 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800ea24:	f8b3 208a 	ldrh.w	r2, [r3, #138]	@ 0x8a
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	809a      	strh	r2, [r3, #4]
            break;
 800ea2c:	e017      	b.n	800ea5e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 800ea2e:	4b0e      	ldr	r3, [pc, #56]	@ (800ea68 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800ea30:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	@ 0xd0
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	809a      	strh	r2, [r3, #4]
            break;
 800ea38:	e011      	b.n	800ea5e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 800ea3a:	4b0b      	ldr	r3, [pc, #44]	@ (800ea68 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800ea3c:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	@ 0xd2
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	809a      	strh	r2, [r3, #4]
            break;
 800ea44:	e00b      	b.n	800ea5e <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 800ea46:	2318      	movs	r3, #24
 800ea48:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 800ea4a:	e008      	b.n	800ea5e <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 800ea4c:	2318      	movs	r3, #24
 800ea4e:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 800ea50:	e005      	b.n	800ea5e <LoRaMacMibGetRequestConfirm+0x39e>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800ea52:	6878      	ldr	r0, [r7, #4]
 800ea54:	f000 fff9 	bl	800fa4a <LoRaMacClassBMibGetRequestConfirm>
 800ea58:	4603      	mov	r3, r0
 800ea5a:	75fb      	strb	r3, [r7, #23]
            break;
 800ea5c:	bf00      	nop
        }
    }
    return status;
 800ea5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea60:	4618      	mov	r0, r3
 800ea62:	371c      	adds	r7, #28
 800ea64:	46bd      	mov	sp, r7
 800ea66:	bd90      	pop	{r4, r7, pc}
 800ea68:	20008000 	.word	0x20008000
 800ea6c:	200085cc 	.word	0x200085cc

0800ea70 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b086      	sub	sp, #24
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ea78:	2300      	movs	r3, #0
 800ea7a:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d101      	bne.n	800ea86 <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ea82:	2303      	movs	r3, #3
 800ea84:	e396      	b.n	800f1b4 <LoRaMacMibSetRequestConfirm+0x744>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800ea86:	4bbd      	ldr	r3, [pc, #756]	@ (800ed7c <LoRaMacMibSetRequestConfirm+0x30c>)
 800ea88:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800ea8c:	f003 0302 	and.w	r3, r3, #2
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d001      	beq.n	800ea98 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 800ea94:	2301      	movs	r3, #1
 800ea96:	e38d      	b.n	800f1b4 <LoRaMacMibSetRequestConfirm+0x744>
    }

    switch( mibSet->Type )
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	781b      	ldrb	r3, [r3, #0]
 800ea9c:	2b41      	cmp	r3, #65	@ 0x41
 800ea9e:	f200 835d 	bhi.w	800f15c <LoRaMacMibSetRequestConfirm+0x6ec>
 800eaa2:	a201      	add	r2, pc, #4	@ (adr r2, 800eaa8 <LoRaMacMibSetRequestConfirm+0x38>)
 800eaa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eaa8:	0800ebb1 	.word	0x0800ebb1
 800eaac:	0800ebc1 	.word	0x0800ebc1
 800eab0:	0800ebdb 	.word	0x0800ebdb
 800eab4:	0800ebf3 	.word	0x0800ebf3
 800eab8:	0800ec0b 	.word	0x0800ec0b
 800eabc:	0800ec17 	.word	0x0800ec17
 800eac0:	0800ec23 	.word	0x0800ec23
 800eac4:	0800ec4d 	.word	0x0800ec4d
 800eac8:	0800ec73 	.word	0x0800ec73
 800eacc:	0800ec99 	.word	0x0800ec99
 800ead0:	0800ecbf 	.word	0x0800ecbf
 800ead4:	0800ece5 	.word	0x0800ece5
 800ead8:	0800ed0b 	.word	0x0800ed0b
 800eadc:	0800ed31 	.word	0x0800ed31
 800eae0:	0800ed57 	.word	0x0800ed57
 800eae4:	0800ed85 	.word	0x0800ed85
 800eae8:	0800eda5 	.word	0x0800eda5
 800eaec:	0800f15d 	.word	0x0800f15d
 800eaf0:	0800edb1 	.word	0x0800edb1
 800eaf4:	0800ee21 	.word	0x0800ee21
 800eaf8:	0800ee61 	.word	0x0800ee61
 800eafc:	0800eec3 	.word	0x0800eec3
 800eb00:	0800ef33 	.word	0x0800ef33
 800eb04:	0800ef03 	.word	0x0800ef03
 800eb08:	0800ef63 	.word	0x0800ef63
 800eb0c:	0800ef85 	.word	0x0800ef85
 800eb10:	0800ef8f 	.word	0x0800ef8f
 800eb14:	0800ef99 	.word	0x0800ef99
 800eb18:	0800efa3 	.word	0x0800efa3
 800eb1c:	0800efad 	.word	0x0800efad
 800eb20:	0800f15d 	.word	0x0800f15d
 800eb24:	0800efb7 	.word	0x0800efb7
 800eb28:	0800efe9 	.word	0x0800efe9
 800eb2c:	0800f05d 	.word	0x0800f05d
 800eb30:	0800f023 	.word	0x0800f023
 800eb34:	0800f08f 	.word	0x0800f08f
 800eb38:	0800f0a5 	.word	0x0800f0a5
 800eb3c:	0800f0bd 	.word	0x0800f0bd
 800eb40:	0800f0c9 	.word	0x0800f0c9
 800eb44:	0800f0d5 	.word	0x0800f0d5
 800eb48:	0800f15d 	.word	0x0800f15d
 800eb4c:	0800f0df 	.word	0x0800f0df
 800eb50:	0800f15d 	.word	0x0800f15d
 800eb54:	0800f15d 	.word	0x0800f15d
 800eb58:	0800f15d 	.word	0x0800f15d
 800eb5c:	0800f15d 	.word	0x0800f15d
 800eb60:	0800f15d 	.word	0x0800f15d
 800eb64:	0800f15d 	.word	0x0800f15d
 800eb68:	0800f15d 	.word	0x0800f15d
 800eb6c:	0800f15d 	.word	0x0800f15d
 800eb70:	0800f15d 	.word	0x0800f15d
 800eb74:	0800f15d 	.word	0x0800f15d
 800eb78:	0800f15d 	.word	0x0800f15d
 800eb7c:	0800f15d 	.word	0x0800f15d
 800eb80:	0800f15d 	.word	0x0800f15d
 800eb84:	0800f15d 	.word	0x0800f15d
 800eb88:	0800f15d 	.word	0x0800f15d
 800eb8c:	0800f15d 	.word	0x0800f15d
 800eb90:	0800f109 	.word	0x0800f109
 800eb94:	0800f115 	.word	0x0800f115
 800eb98:	0800f121 	.word	0x0800f121
 800eb9c:	0800f12d 	.word	0x0800f12d
 800eba0:	0800f139 	.word	0x0800f139
 800eba4:	0800f145 	.word	0x0800f145
 800eba8:	0800f151 	.word	0x0800f151
 800ebac:	0800f157 	.word	0x0800f157
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	791b      	ldrb	r3, [r3, #4]
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	f7fd fb0f 	bl	800c1d8 <SwitchClass>
 800ebba:	4603      	mov	r3, r0
 800ebbc:	75fb      	strb	r3, [r7, #23]
            break;
 800ebbe:	e2ee      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	791b      	ldrb	r3, [r3, #4]
 800ebc4:	2b02      	cmp	r3, #2
 800ebc6:	d005      	beq.n	800ebd4 <LoRaMacMibSetRequestConfirm+0x164>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	791a      	ldrb	r2, [r3, #4]
 800ebcc:	4b6c      	ldr	r3, [pc, #432]	@ (800ed80 <LoRaMacMibSetRequestConfirm+0x310>)
 800ebce:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800ebd2:	e2e4      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ebd4:	2303      	movs	r3, #3
 800ebd6:	75fb      	strb	r3, [r7, #23]
            break;
 800ebd8:	e2e1      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	685b      	ldr	r3, [r3, #4]
 800ebde:	4618      	mov	r0, r3
 800ebe0:	f008 f828 	bl	8016c34 <SecureElementSetDevEui>
 800ebe4:	4603      	mov	r3, r0
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	f000 82be 	beq.w	800f168 <LoRaMacMibSetRequestConfirm+0x6f8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ebec:	2303      	movs	r3, #3
 800ebee:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800ebf0:	e2ba      	b.n	800f168 <LoRaMacMibSetRequestConfirm+0x6f8>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	685b      	ldr	r3, [r3, #4]
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	f008 f84c 	bl	8016c94 <SecureElementSetJoinEui>
 800ebfc:	4603      	mov	r3, r0
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	f000 82b4 	beq.w	800f16c <LoRaMacMibSetRequestConfirm+0x6fc>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ec04:	2303      	movs	r3, #3
 800ec06:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800ec08:	e2b0      	b.n	800f16c <LoRaMacMibSetRequestConfirm+0x6fc>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	791a      	ldrb	r2, [r3, #4]
 800ec0e:	4b5c      	ldr	r3, [pc, #368]	@ (800ed80 <LoRaMacMibSetRequestConfirm+0x310>)
 800ec10:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
            break;
 800ec14:	e2c3      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	685b      	ldr	r3, [r3, #4]
 800ec1a:	4a59      	ldr	r2, [pc, #356]	@ (800ed80 <LoRaMacMibSetRequestConfirm+0x310>)
 800ec1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
            break;
 800ec20:	e2bd      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 800ec22:	4b57      	ldr	r3, [pc, #348]	@ (800ed80 <LoRaMacMibSetRequestConfirm+0x310>)
 800ec24:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	685b      	ldr	r3, [r3, #4]
 800ec2c:	4619      	mov	r1, r3
 800ec2e:	4610      	mov	r0, r2
 800ec30:	f008 f848 	bl	8016cc4 <SecureElementSetDevAddr>
 800ec34:	4603      	mov	r3, r0
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d002      	beq.n	800ec40 <LoRaMacMibSetRequestConfirm+0x1d0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ec3a:	2303      	movs	r3, #3
 800ec3c:	75fb      	strb	r3, [r7, #23]
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
            }
            break;
 800ec3e:	e2ae      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	685b      	ldr	r3, [r3, #4]
 800ec44:	4a4e      	ldr	r2, [pc, #312]	@ (800ed80 <LoRaMacMibSetRequestConfirm+0x310>)
 800ec46:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
            break;
 800ec4a:	e2a8      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	685b      	ldr	r3, [r3, #4]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d00b      	beq.n	800ec6c <LoRaMacMibSetRequestConfirm+0x1fc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	685b      	ldr	r3, [r3, #4]
 800ec58:	4619      	mov	r1, r3
 800ec5a:	2000      	movs	r0, #0
 800ec5c:	f002 f83e 	bl	8010cdc <LoRaMacCryptoSetKey>
 800ec60:	4603      	mov	r3, r0
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	f000 8284 	beq.w	800f170 <LoRaMacMibSetRequestConfirm+0x700>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ec68:	2311      	movs	r3, #17
 800ec6a:	e2a3      	b.n	800f1b4 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ec6c:	2303      	movs	r3, #3
 800ec6e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800ec70:	e27e      	b.n	800f170 <LoRaMacMibSetRequestConfirm+0x700>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	685b      	ldr	r3, [r3, #4]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d00b      	beq.n	800ec92 <LoRaMacMibSetRequestConfirm+0x222>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	685b      	ldr	r3, [r3, #4]
 800ec7e:	4619      	mov	r1, r3
 800ec80:	2001      	movs	r0, #1
 800ec82:	f002 f82b 	bl	8010cdc <LoRaMacCryptoSetKey>
 800ec86:	4603      	mov	r3, r0
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	f000 8273 	beq.w	800f174 <LoRaMacMibSetRequestConfirm+0x704>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ec8e:	2311      	movs	r3, #17
 800ec90:	e290      	b.n	800f1b4 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ec92:	2303      	movs	r3, #3
 800ec94:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800ec96:	e26d      	b.n	800f174 <LoRaMacMibSetRequestConfirm+0x704>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	685b      	ldr	r3, [r3, #4]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d00b      	beq.n	800ecb8 <LoRaMacMibSetRequestConfirm+0x248>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	685b      	ldr	r3, [r3, #4]
 800eca4:	4619      	mov	r1, r3
 800eca6:	2008      	movs	r0, #8
 800eca8:	f002 f818 	bl	8010cdc <LoRaMacCryptoSetKey>
 800ecac:	4603      	mov	r3, r0
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	f000 8262 	beq.w	800f178 <LoRaMacMibSetRequestConfirm+0x708>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ecb4:	2311      	movs	r3, #17
 800ecb6:	e27d      	b.n	800f1b4 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ecb8:	2303      	movs	r3, #3
 800ecba:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800ecbc:	e25c      	b.n	800f178 <LoRaMacMibSetRequestConfirm+0x708>
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	685b      	ldr	r3, [r3, #4]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d00b      	beq.n	800ecde <LoRaMacMibSetRequestConfirm+0x26e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	685b      	ldr	r3, [r3, #4]
 800ecca:	4619      	mov	r1, r3
 800eccc:	2009      	movs	r0, #9
 800ecce:	f002 f805 	bl	8010cdc <LoRaMacCryptoSetKey>
 800ecd2:	4603      	mov	r3, r0
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	f000 8251 	beq.w	800f17c <LoRaMacMibSetRequestConfirm+0x70c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ecda:	2311      	movs	r3, #17
 800ecdc:	e26a      	b.n	800f1b4 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ecde:	2303      	movs	r3, #3
 800ece0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800ece2:	e24b      	b.n	800f17c <LoRaMacMibSetRequestConfirm+0x70c>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	685b      	ldr	r3, [r3, #4]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d00b      	beq.n	800ed04 <LoRaMacMibSetRequestConfirm+0x294>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	685b      	ldr	r3, [r3, #4]
 800ecf0:	4619      	mov	r1, r3
 800ecf2:	200c      	movs	r0, #12
 800ecf4:	f001 fff2 	bl	8010cdc <LoRaMacCryptoSetKey>
 800ecf8:	4603      	mov	r3, r0
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	f000 8240 	beq.w	800f180 <LoRaMacMibSetRequestConfirm+0x710>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ed00:	2311      	movs	r3, #17
 800ed02:	e257      	b.n	800f1b4 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ed04:	2303      	movs	r3, #3
 800ed06:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800ed08:	e23a      	b.n	800f180 <LoRaMacMibSetRequestConfirm+0x710>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	685b      	ldr	r3, [r3, #4]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d00b      	beq.n	800ed2a <LoRaMacMibSetRequestConfirm+0x2ba>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	685b      	ldr	r3, [r3, #4]
 800ed16:	4619      	mov	r1, r3
 800ed18:	200d      	movs	r0, #13
 800ed1a:	f001 ffdf 	bl	8010cdc <LoRaMacCryptoSetKey>
 800ed1e:	4603      	mov	r3, r0
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	f000 822f 	beq.w	800f184 <LoRaMacMibSetRequestConfirm+0x714>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ed26:	2311      	movs	r3, #17
 800ed28:	e244      	b.n	800f1b4 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ed2a:	2303      	movs	r3, #3
 800ed2c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800ed2e:	e229      	b.n	800f184 <LoRaMacMibSetRequestConfirm+0x714>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	685b      	ldr	r3, [r3, #4]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d00b      	beq.n	800ed50 <LoRaMacMibSetRequestConfirm+0x2e0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	685b      	ldr	r3, [r3, #4]
 800ed3c:	4619      	mov	r1, r3
 800ed3e:	200e      	movs	r0, #14
 800ed40:	f001 ffcc 	bl	8010cdc <LoRaMacCryptoSetKey>
 800ed44:	4603      	mov	r3, r0
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	f000 821e 	beq.w	800f188 <LoRaMacMibSetRequestConfirm+0x718>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ed4c:	2311      	movs	r3, #17
 800ed4e:	e231      	b.n	800f1b4 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ed50:	2303      	movs	r3, #3
 800ed52:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800ed54:	e218      	b.n	800f188 <LoRaMacMibSetRequestConfirm+0x718>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	685b      	ldr	r3, [r3, #4]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d00b      	beq.n	800ed76 <LoRaMacMibSetRequestConfirm+0x306>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	685b      	ldr	r3, [r3, #4]
 800ed62:	4619      	mov	r1, r3
 800ed64:	200f      	movs	r0, #15
 800ed66:	f001 ffb9 	bl	8010cdc <LoRaMacCryptoSetKey>
 800ed6a:	4603      	mov	r3, r0
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	f000 820d 	beq.w	800f18c <LoRaMacMibSetRequestConfirm+0x71c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ed72:	2311      	movs	r3, #17
 800ed74:	e21e      	b.n	800f1b4 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ed76:	2303      	movs	r3, #3
 800ed78:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800ed7a:	e207      	b.n	800f18c <LoRaMacMibSetRequestConfirm+0x71c>
 800ed7c:	20000a28 	.word	0x20000a28
 800ed80:	20008000 	.word	0x20008000
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	791a      	ldrb	r2, [r3, #4]
 800ed88:	4bb2      	ldr	r3, [pc, #712]	@ (800f054 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800ed8a:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800ed8e:	4bb2      	ldr	r3, [pc, #712]	@ (800f058 <LoRaMacMibSetRequestConfirm+0x5e8>)
 800ed90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ed92:	4ab0      	ldr	r2, [pc, #704]	@ (800f054 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800ed94:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 800ed98:	4610      	mov	r0, r2
 800ed9a:	4798      	blx	r3
            Radio.Sleep( );
 800ed9c:	4bae      	ldr	r3, [pc, #696]	@ (800f058 <LoRaMacMibSetRequestConfirm+0x5e8>)
 800ed9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eda0:	4798      	blx	r3
            break;
 800eda2:	e1fc      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	791a      	ldrb	r2, [r3, #4]
 800eda8:	4baa      	ldr	r3, [pc, #680]	@ (800f054 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800edaa:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
            break;
 800edae:	e1f6      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	7a1b      	ldrb	r3, [r3, #8]
 800edb4:	b25b      	sxtb	r3, r3
 800edb6:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800edb8:	4ba6      	ldr	r3, [pc, #664]	@ (800f054 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800edba:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800edbe:	727b      	strb	r3, [r7, #9]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 800edc0:	4ba4      	ldr	r3, [pc, #656]	@ (800f054 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800edc2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800edc6:	f107 0108 	add.w	r1, r7, #8
 800edca:	2207      	movs	r2, #7
 800edcc:	4618      	mov	r0, r3
 800edce:	f002 fdc4 	bl	801195a <RegionVerify>
 800edd2:	4603      	mov	r3, r0
 800edd4:	f083 0301 	eor.w	r3, r3, #1
 800edd8:	b2db      	uxtb	r3, r3
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d002      	beq.n	800ede4 <LoRaMacMibSetRequestConfirm+0x374>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800edde:	2303      	movs	r3, #3
 800ede0:	75fb      	strb	r3, [r7, #23]
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            break;
 800ede2:	e1dc      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	685b      	ldr	r3, [r3, #4]
 800ede8:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 800edea:	4b9a      	ldr	r3, [pc, #616]	@ (800f054 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800edec:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800edf0:	f107 0108 	add.w	r1, r7, #8
 800edf4:	2200      	movs	r2, #0
 800edf6:	4618      	mov	r0, r3
 800edf8:	f002 fdaf 	bl	801195a <RegionVerify>
 800edfc:	4603      	mov	r3, r0
 800edfe:	f083 0301 	eor.w	r3, r3, #1
 800ee02:	b2db      	uxtb	r3, r3
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d002      	beq.n	800ee0e <LoRaMacMibSetRequestConfirm+0x39e>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ee08:	2303      	movs	r3, #3
 800ee0a:	75fb      	strb	r3, [r7, #23]
            break;
 800ee0c:	e1c7      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800ee0e:	4b91      	ldr	r3, [pc, #580]	@ (800f054 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800ee10:	687a      	ldr	r2, [r7, #4]
 800ee12:	336c      	adds	r3, #108	@ 0x6c
 800ee14:	3204      	adds	r2, #4
 800ee16:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ee1a:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 800ee1e:	e1be      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	7a1b      	ldrb	r3, [r3, #8]
 800ee24:	b25b      	sxtb	r3, r3
 800ee26:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ee28:	4b8a      	ldr	r3, [pc, #552]	@ (800f054 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800ee2a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800ee2e:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800ee30:	4b88      	ldr	r3, [pc, #544]	@ (800f054 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800ee32:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ee36:	f107 0108 	add.w	r1, r7, #8
 800ee3a:	2207      	movs	r2, #7
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	f002 fd8c 	bl	801195a <RegionVerify>
 800ee42:	4603      	mov	r3, r0
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d008      	beq.n	800ee5a <LoRaMacMibSetRequestConfirm+0x3ea>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800ee48:	4b82      	ldr	r3, [pc, #520]	@ (800f054 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800ee4a:	687a      	ldr	r2, [r7, #4]
 800ee4c:	33b4      	adds	r3, #180	@ 0xb4
 800ee4e:	3204      	adds	r2, #4
 800ee50:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ee54:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800ee58:	e1a1      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ee5a:	2303      	movs	r3, #3
 800ee5c:	75fb      	strb	r3, [r7, #23]
            break;
 800ee5e:	e19e      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	7a1b      	ldrb	r3, [r3, #8]
 800ee64:	b25b      	sxtb	r3, r3
 800ee66:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ee68:	4b7a      	ldr	r3, [pc, #488]	@ (800f054 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800ee6a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800ee6e:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800ee70:	4b78      	ldr	r3, [pc, #480]	@ (800f054 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800ee72:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ee76:	f107 0108 	add.w	r1, r7, #8
 800ee7a:	2207      	movs	r2, #7
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	f002 fd6c 	bl	801195a <RegionVerify>
 800ee82:	4603      	mov	r3, r0
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d019      	beq.n	800eebc <LoRaMacMibSetRequestConfirm+0x44c>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800ee88:	4b72      	ldr	r3, [pc, #456]	@ (800f054 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800ee8a:	687a      	ldr	r2, [r7, #4]
 800ee8c:	3374      	adds	r3, #116	@ 0x74
 800ee8e:	3204      	adds	r2, #4
 800ee90:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ee94:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800ee98:	4b6e      	ldr	r3, [pc, #440]	@ (800f054 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800ee9a:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800ee9e:	2b02      	cmp	r3, #2
 800eea0:	f040 8176 	bne.w	800f190 <LoRaMacMibSetRequestConfirm+0x720>
 800eea4:	4b6b      	ldr	r3, [pc, #428]	@ (800f054 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800eea6:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	f000 8170 	beq.w	800f190 <LoRaMacMibSetRequestConfirm+0x720>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 800eeb0:	4b69      	ldr	r3, [pc, #420]	@ (800f058 <LoRaMacMibSetRequestConfirm+0x5e8>)
 800eeb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eeb4:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 800eeb6:	f7fe fc7d 	bl	800d7b4 <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800eeba:	e169      	b.n	800f190 <LoRaMacMibSetRequestConfirm+0x720>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800eebc:	2303      	movs	r3, #3
 800eebe:	75fb      	strb	r3, [r7, #23]
            break;
 800eec0:	e166      	b.n	800f190 <LoRaMacMibSetRequestConfirm+0x720>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	7a1b      	ldrb	r3, [r3, #8]
 800eec6:	b25b      	sxtb	r3, r3
 800eec8:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800eeca:	4b62      	ldr	r3, [pc, #392]	@ (800f054 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800eecc:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800eed0:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800eed2:	4b60      	ldr	r3, [pc, #384]	@ (800f054 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800eed4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800eed8:	f107 0108 	add.w	r1, r7, #8
 800eedc:	2207      	movs	r2, #7
 800eede:	4618      	mov	r0, r3
 800eee0:	f002 fd3b 	bl	801195a <RegionVerify>
 800eee4:	4603      	mov	r3, r0
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d008      	beq.n	800eefc <LoRaMacMibSetRequestConfirm+0x48c>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800eeea:	4b5a      	ldr	r3, [pc, #360]	@ (800f054 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800eeec:	687a      	ldr	r2, [r7, #4]
 800eeee:	33bc      	adds	r3, #188	@ 0xbc
 800eef0:	3204      	adds	r2, #4
 800eef2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800eef6:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800eefa:	e150      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800eefc:	2303      	movs	r3, #3
 800eefe:	75fb      	strb	r3, [r7, #23]
            break;
 800ef00:	e14d      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	685b      	ldr	r3, [r3, #4]
 800ef06:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800ef08:	2301      	movs	r3, #1
 800ef0a:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800ef0c:	4b51      	ldr	r3, [pc, #324]	@ (800f054 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800ef0e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ef12:	f107 020c 	add.w	r2, r7, #12
 800ef16:	4611      	mov	r1, r2
 800ef18:	4618      	mov	r0, r3
 800ef1a:	f002 fd56 	bl	80119ca <RegionChanMaskSet>
 800ef1e:	4603      	mov	r3, r0
 800ef20:	f083 0301 	eor.w	r3, r3, #1
 800ef24:	b2db      	uxtb	r3, r3
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	f000 8134 	beq.w	800f194 <LoRaMacMibSetRequestConfirm+0x724>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ef2c:	2303      	movs	r3, #3
 800ef2e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800ef30:	e130      	b.n	800f194 <LoRaMacMibSetRequestConfirm+0x724>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	685b      	ldr	r3, [r3, #4]
 800ef36:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800ef38:	2300      	movs	r3, #0
 800ef3a:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800ef3c:	4b45      	ldr	r3, [pc, #276]	@ (800f054 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800ef3e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ef42:	f107 020c 	add.w	r2, r7, #12
 800ef46:	4611      	mov	r1, r2
 800ef48:	4618      	mov	r0, r3
 800ef4a:	f002 fd3e 	bl	80119ca <RegionChanMaskSet>
 800ef4e:	4603      	mov	r3, r0
 800ef50:	f083 0301 	eor.w	r3, r3, #1
 800ef54:	b2db      	uxtb	r3, r3
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	f000 811e 	beq.w	800f198 <LoRaMacMibSetRequestConfirm+0x728>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ef5c:	2303      	movs	r3, #3
 800ef5e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800ef60:	e11a      	b.n	800f198 <LoRaMacMibSetRequestConfirm+0x728>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	791b      	ldrb	r3, [r3, #4]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d009      	beq.n	800ef7e <LoRaMacMibSetRequestConfirm+0x50e>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800ef6e:	2b0f      	cmp	r3, #15
 800ef70:	d805      	bhi.n	800ef7e <LoRaMacMibSetRequestConfirm+0x50e>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	791a      	ldrb	r2, [r3, #4]
 800ef76:	4b37      	ldr	r3, [pc, #220]	@ (800f054 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800ef78:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800ef7c:	e10f      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ef7e:	2303      	movs	r3, #3
 800ef80:	75fb      	strb	r3, [r7, #23]
            break;
 800ef82:	e10c      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	685b      	ldr	r3, [r3, #4]
 800ef88:	4a32      	ldr	r2, [pc, #200]	@ (800f054 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800ef8a:	6553      	str	r3, [r2, #84]	@ 0x54
            break;
 800ef8c:	e107      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	685b      	ldr	r3, [r3, #4]
 800ef92:	4a30      	ldr	r2, [pc, #192]	@ (800f054 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800ef94:	6593      	str	r3, [r2, #88]	@ 0x58
            break;
 800ef96:	e102      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	685b      	ldr	r3, [r3, #4]
 800ef9c:	4a2d      	ldr	r2, [pc, #180]	@ (800f054 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800ef9e:	65d3      	str	r3, [r2, #92]	@ 0x5c
            break;
 800efa0:	e0fd      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	685b      	ldr	r3, [r3, #4]
 800efa6:	4a2b      	ldr	r2, [pc, #172]	@ (800f054 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800efa8:	6613      	str	r3, [r2, #96]	@ 0x60
            break;
 800efaa:	e0f8      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	685b      	ldr	r3, [r3, #4]
 800efb0:	4a28      	ldr	r2, [pc, #160]	@ (800f054 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800efb2:	6653      	str	r3, [r2, #100]	@ 0x64
            break;
 800efb4:	e0f3      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800efbc:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800efbe:	4b25      	ldr	r3, [pc, #148]	@ (800f054 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800efc0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800efc4:	f107 0108 	add.w	r1, r7, #8
 800efc8:	2206      	movs	r2, #6
 800efca:	4618      	mov	r0, r3
 800efcc:	f002 fcc5 	bl	801195a <RegionVerify>
 800efd0:	4603      	mov	r3, r0
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d005      	beq.n	800efe2 <LoRaMacMibSetRequestConfirm+0x572>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 800efd6:	f997 2008 	ldrsb.w	r2, [r7, #8]
 800efda:	4b1e      	ldr	r3, [pc, #120]	@ (800f054 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800efdc:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800efe0:	e0dd      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800efe2:	2303      	movs	r3, #3
 800efe4:	75fb      	strb	r3, [r7, #23]
            break;
 800efe6:	e0da      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800efee:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800eff0:	4b18      	ldr	r3, [pc, #96]	@ (800f054 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800eff2:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800eff6:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800eff8:	4b16      	ldr	r3, [pc, #88]	@ (800f054 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800effa:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800effe:	f107 0108 	add.w	r1, r7, #8
 800f002:	2205      	movs	r2, #5
 800f004:	4618      	mov	r0, r3
 800f006:	f002 fca8 	bl	801195a <RegionVerify>
 800f00a:	4603      	mov	r3, r0
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d005      	beq.n	800f01c <LoRaMacMibSetRequestConfirm+0x5ac>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800f010:	f997 2008 	ldrsb.w	r2, [r7, #8]
 800f014:	4b0f      	ldr	r3, [pc, #60]	@ (800f054 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800f016:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800f01a:	e0c0      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f01c:	2303      	movs	r3, #3
 800f01e:	75fb      	strb	r3, [r7, #23]
            break;
 800f020:	e0bd      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f028:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 800f02a:	4b0a      	ldr	r3, [pc, #40]	@ (800f054 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800f02c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f030:	f107 0108 	add.w	r1, r7, #8
 800f034:	220a      	movs	r2, #10
 800f036:	4618      	mov	r0, r3
 800f038:	f002 fc8f 	bl	801195a <RegionVerify>
 800f03c:	4603      	mov	r3, r0
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d005      	beq.n	800f04e <LoRaMacMibSetRequestConfirm+0x5de>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 800f042:	f997 2008 	ldrsb.w	r2, [r7, #8]
 800f046:	4b03      	ldr	r3, [pc, #12]	@ (800f054 <LoRaMacMibSetRequestConfirm+0x5e4>)
 800f048:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800f04c:	e0a7      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f04e:	2303      	movs	r3, #3
 800f050:	75fb      	strb	r3, [r7, #23]
            break;
 800f052:	e0a4      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
 800f054:	20008000 	.word	0x20008000
 800f058:	0802146c 	.word	0x0802146c
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800f062:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 800f064:	4b55      	ldr	r3, [pc, #340]	@ (800f1bc <LoRaMacMibSetRequestConfirm+0x74c>)
 800f066:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f06a:	f107 0108 	add.w	r1, r7, #8
 800f06e:	2209      	movs	r2, #9
 800f070:	4618      	mov	r0, r3
 800f072:	f002 fc72 	bl	801195a <RegionVerify>
 800f076:	4603      	mov	r3, r0
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d005      	beq.n	800f088 <LoRaMacMibSetRequestConfirm+0x618>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 800f07c:	f997 2008 	ldrsb.w	r2, [r7, #8]
 800f080:	4b4e      	ldr	r3, [pc, #312]	@ (800f1bc <LoRaMacMibSetRequestConfirm+0x74c>)
 800f082:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800f086:	e08a      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f088:	2303      	movs	r3, #3
 800f08a:	75fb      	strb	r3, [r7, #23]
            break;
 800f08c:	e087      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	685b      	ldr	r3, [r3, #4]
 800f092:	4a4a      	ldr	r2, [pc, #296]	@ (800f1bc <LoRaMacMibSetRequestConfirm+0x74c>)
 800f094:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800f098:	4b48      	ldr	r3, [pc, #288]	@ (800f1bc <LoRaMacMibSetRequestConfirm+0x74c>)
 800f09a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f09e:	4a47      	ldr	r2, [pc, #284]	@ (800f1bc <LoRaMacMibSetRequestConfirm+0x74c>)
 800f0a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
            break;
 800f0a2:	e07c      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	791a      	ldrb	r2, [r3, #4]
 800f0a8:	4b44      	ldr	r3, [pc, #272]	@ (800f1bc <LoRaMacMibSetRequestConfirm+0x74c>)
 800f0aa:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
 800f0ae:	4b43      	ldr	r3, [pc, #268]	@ (800f1bc <LoRaMacMibSetRequestConfirm+0x74c>)
 800f0b0:	f893 2098 	ldrb.w	r2, [r3, #152]	@ 0x98
 800f0b4:	4b41      	ldr	r3, [pc, #260]	@ (800f1bc <LoRaMacMibSetRequestConfirm+0x74c>)
 800f0b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            break;
 800f0ba:	e070      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	685b      	ldr	r3, [r3, #4]
 800f0c0:	4a3e      	ldr	r2, [pc, #248]	@ (800f1bc <LoRaMacMibSetRequestConfirm+0x74c>)
 800f0c2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
            break;
 800f0c6:	e06a      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	685b      	ldr	r3, [r3, #4]
 800f0cc:	4a3b      	ldr	r2, [pc, #236]	@ (800f1bc <LoRaMacMibSetRequestConfirm+0x74c>)
 800f0ce:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
            break;
 800f0d2:	e064      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 800f0d4:	f7fe fda0 	bl	800dc18 <RestoreNvmData>
 800f0d8:	4603      	mov	r3, r0
 800f0da:	75fb      	strb	r3, [r7, #23]
            break;
 800f0dc:	e05f      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	799b      	ldrb	r3, [r3, #6]
 800f0e2:	2b01      	cmp	r3, #1
 800f0e4:	d80d      	bhi.n	800f102 <LoRaMacMibSetRequestConfirm+0x692>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 800f0e6:	4a35      	ldr	r2, [pc, #212]	@ (800f1bc <LoRaMacMibSetRequestConfirm+0x74c>)
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	685b      	ldr	r3, [r3, #4]
 800f0ec:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	6858      	ldr	r0, [r3, #4]
 800f0f4:	f001 fd54 	bl	8010ba0 <LoRaMacCryptoSetLrWanVersion>
 800f0f8:	4603      	mov	r3, r0
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d04e      	beq.n	800f19c <LoRaMacMibSetRequestConfirm+0x72c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800f0fe:	2311      	movs	r3, #17
 800f100:	e058      	b.n	800f1b4 <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f102:	2303      	movs	r3, #3
 800f104:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800f106:	e049      	b.n	800f19c <LoRaMacMibSetRequestConfirm+0x72c>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	685b      	ldr	r3, [r3, #4]
 800f10c:	4a2b      	ldr	r2, [pc, #172]	@ (800f1bc <LoRaMacMibSetRequestConfirm+0x74c>)
 800f10e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
            break;
 800f112:	e044      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	791a      	ldrb	r2, [r3, #4]
 800f118:	4b28      	ldr	r3, [pc, #160]	@ (800f1bc <LoRaMacMibSetRequestConfirm+0x74c>)
 800f11a:	f883 211f 	strb.w	r2, [r3, #287]	@ 0x11f
            break;
 800f11e:	e03e      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	889a      	ldrh	r2, [r3, #4]
 800f124:	4b25      	ldr	r3, [pc, #148]	@ (800f1bc <LoRaMacMibSetRequestConfirm+0x74c>)
 800f126:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
            break;
 800f12a:	e038      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	889a      	ldrh	r2, [r3, #4]
 800f130:	4b22      	ldr	r3, [pc, #136]	@ (800f1bc <LoRaMacMibSetRequestConfirm+0x74c>)
 800f132:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
            break;
 800f136:	e032      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	889a      	ldrh	r2, [r3, #4]
 800f13c:	4b1f      	ldr	r3, [pc, #124]	@ (800f1bc <LoRaMacMibSetRequestConfirm+0x74c>)
 800f13e:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
            break;
 800f142:	e02c      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	889a      	ldrh	r2, [r3, #4]
 800f148:	4b1c      	ldr	r3, [pc, #112]	@ (800f1bc <LoRaMacMibSetRequestConfirm+0x74c>)
 800f14a:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2
            break;
 800f14e:	e026      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
            else
            {
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 800f150:	2318      	movs	r3, #24
 800f152:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 800f154:	e023      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
            else
            {
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 800f156:	2318      	movs	r3, #24
 800f158:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 800f15a:	e020      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800f15c:	6878      	ldr	r0, [r7, #4]
 800f15e:	f000 fc7e 	bl	800fa5e <LoRaMacMibClassBSetRequestConfirm>
 800f162:	4603      	mov	r3, r0
 800f164:	75fb      	strb	r3, [r7, #23]
            break;
 800f166:	e01a      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800f168:	bf00      	nop
 800f16a:	e018      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800f16c:	bf00      	nop
 800f16e:	e016      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800f170:	bf00      	nop
 800f172:	e014      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800f174:	bf00      	nop
 800f176:	e012      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800f178:	bf00      	nop
 800f17a:	e010      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800f17c:	bf00      	nop
 800f17e:	e00e      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800f180:	bf00      	nop
 800f182:	e00c      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800f184:	bf00      	nop
 800f186:	e00a      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800f188:	bf00      	nop
 800f18a:	e008      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800f18c:	bf00      	nop
 800f18e:	e006      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800f190:	bf00      	nop
 800f192:	e004      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800f194:	bf00      	nop
 800f196:	e002      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800f198:	bf00      	nop
 800f19a:	e000      	b.n	800f19e <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800f19c:	bf00      	nop
        }
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( status == LORAMAC_STATUS_OK )
 800f19e:	7dfb      	ldrb	r3, [r7, #23]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d106      	bne.n	800f1b2 <LoRaMacMibSetRequestConfirm+0x742>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800f1a4:	4a06      	ldr	r2, [pc, #24]	@ (800f1c0 <LoRaMacMibSetRequestConfirm+0x750>)
 800f1a6:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800f1aa:	f043 0320 	orr.w	r3, r3, #32
 800f1ae:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
#endif /* LORAMAC_VERSION */
    return status;
 800f1b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	3718      	adds	r7, #24
 800f1b8:	46bd      	mov	sp, r7
 800f1ba:	bd80      	pop	{r7, pc}
 800f1bc:	20008000 	.word	0x20008000
 800f1c0:	20000a28 	.word	0x20000a28

0800f1c4 <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 800f1c4:	b580      	push	{r7, lr}
 800f1c6:	b08a      	sub	sp, #40	@ 0x28
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800f1cc:	2302      	movs	r3, #2
 800f1ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	83bb      	strh	r3, [r7, #28]

    if( mlmeRequest == NULL )
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d101      	bne.n	800f1e0 <LoRaMacMlmeRequest+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f1dc:	2303      	movs	r3, #3
 800f1de:	e17e      	b.n	800f4de <LoRaMacMlmeRequest+0x31a>
    }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	2200      	movs	r2, #0
 800f1e4:	611a      	str	r2, [r3, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 800f1e6:	f7fc fbd9 	bl	800b99c <LoRaMacIsBusy>
 800f1ea:	4603      	mov	r3, r0
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d001      	beq.n	800f1f4 <LoRaMacMlmeRequest+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 800f1f0:	2301      	movs	r3, #1
 800f1f2:	e174      	b.n	800f4de <LoRaMacMlmeRequest+0x31a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800f1f4:	f001 f96e 	bl	80104d4 <LoRaMacConfirmQueueIsFull>
 800f1f8:	4603      	mov	r3, r0
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d001      	beq.n	800f202 <LoRaMacMlmeRequest+0x3e>
    {
        return LORAMAC_STATUS_BUSY;
 800f1fe:	2301      	movs	r3, #1
 800f200:	e16d      	b.n	800f4de <LoRaMacMlmeRequest+0x31a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800f202:	f001 f95b 	bl	80104bc <LoRaMacConfirmQueueGetCnt>
 800f206:	4603      	mov	r3, r0
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d104      	bne.n	800f216 <LoRaMacMlmeRequest+0x52>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800f20c:	2214      	movs	r2, #20
 800f20e:	2100      	movs	r1, #0
 800f210:	48b5      	ldr	r0, [pc, #724]	@ (800f4e8 <LoRaMacMlmeRequest+0x324>)
 800f212:	f007 fe2d 	bl	8016e70 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f216:	4bb5      	ldr	r3, [pc, #724]	@ (800f4ec <LoRaMacMlmeRequest+0x328>)
 800f218:	2201      	movs	r2, #1
 800f21a:	f883 2455 	strb.w	r2, [r3, #1109]	@ 0x455

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800f21e:	4ab3      	ldr	r2, [pc, #716]	@ (800f4ec <LoRaMacMlmeRequest+0x328>)
 800f220:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800f224:	f043 0304 	orr.w	r3, r3, #4
 800f228:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    queueElement.Request = mlmeRequest->Type;
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	781b      	ldrb	r3, [r3, #0]
 800f230:	f887 3020 	strb.w	r3, [r7, #32]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f234:	2301      	movs	r3, #1
 800f236:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    queueElement.RestrictCommonReadyToHandle = false;
 800f23a:	2300      	movs	r3, #0
 800f23c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    queueElement.ReadyToHandle = false;
 800f240:	2300      	movs	r3, #0
 800f242:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	781b      	ldrb	r3, [r3, #0]
 800f24a:	3b01      	subs	r3, #1
 800f24c:	2b0c      	cmp	r3, #12
 800f24e:	f200 811a 	bhi.w	800f486 <LoRaMacMlmeRequest+0x2c2>
 800f252:	a201      	add	r2, pc, #4	@ (adr r2, 800f258 <LoRaMacMlmeRequest+0x94>)
 800f254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f258:	0800f28d 	.word	0x0800f28d
 800f25c:	0800f487 	.word	0x0800f487
 800f260:	0800f487 	.word	0x0800f487
 800f264:	0800f487 	.word	0x0800f487
 800f268:	0800f36b 	.word	0x0800f36b
 800f26c:	0800f38f 	.word	0x0800f38f
 800f270:	0800f487 	.word	0x0800f487
 800f274:	0800f487 	.word	0x0800f487
 800f278:	0800f3ad 	.word	0x0800f3ad
 800f27c:	0800f487 	.word	0x0800f487
 800f280:	0800f455 	.word	0x0800f455
 800f284:	0800f3e9 	.word	0x0800f3e9
 800f288:	0800f433 	.word	0x0800f433
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800f28c:	4b97      	ldr	r3, [pc, #604]	@ (800f4ec <LoRaMacMlmeRequest+0x328>)
 800f28e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800f292:	f003 0320 	and.w	r3, r3, #32
 800f296:	2b00      	cmp	r3, #0
 800f298:	d001      	beq.n	800f29e <LoRaMacMlmeRequest+0xda>
            {
                return LORAMAC_STATUS_BUSY;
 800f29a:	2301      	movs	r3, #1
 800f29c:	e11f      	b.n	800f4de <LoRaMacMlmeRequest+0x31a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	791b      	ldrb	r3, [r3, #4]
 800f2a2:	2b02      	cmp	r3, #2
 800f2a4:	d135      	bne.n	800f312 <LoRaMacMlmeRequest+0x14e>
            {
                ResetMacParameters( false );
 800f2a6:	2000      	movs	r0, #0
 800f2a8:	f7fe f916 	bl	800d4d8 <ResetMacParameters>

                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800f2ac:	4b90      	ldr	r3, [pc, #576]	@ (800f4f0 <LoRaMacMlmeRequest+0x32c>)
 800f2ae:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	795b      	ldrb	r3, [r3, #5]
 800f2b6:	b25b      	sxtb	r3, r3
 800f2b8:	2200      	movs	r2, #0
 800f2ba:	4619      	mov	r1, r3
 800f2bc:	f002 fc95 	bl	8011bea <RegionAlternateDr>
 800f2c0:	4603      	mov	r3, r0
 800f2c2:	461a      	mov	r2, r3
 800f2c4:	4b8a      	ldr	r3, [pc, #552]	@ (800f4f0 <LoRaMacMlmeRequest+0x32c>)
 800f2c6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	f993 2006 	ldrsb.w	r2, [r3, #6]
 800f2d0:	4b87      	ldr	r3, [pc, #540]	@ (800f4f0 <LoRaMacMlmeRequest+0x32c>)
 800f2d2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800f2d6:	2307      	movs	r3, #7
 800f2d8:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

                status = SendReJoinReq( JOIN_REQ );
 800f2dc:	20ff      	movs	r0, #255	@ 0xff
 800f2de:	f7fd fe7f 	bl	800cfe0 <SendReJoinReq>
 800f2e2:	4603      	mov	r3, r0
 800f2e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                if( status != LORAMAC_STATUS_OK )
 800f2e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	f000 80cc 	beq.w	800f48a <LoRaMacMlmeRequest+0x2c6>
                {
                    // Revert back the previous datarate ( mainly used for US915 like regions )
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800f2f2:	4b7f      	ldr	r3, [pc, #508]	@ (800f4f0 <LoRaMacMlmeRequest+0x32c>)
 800f2f4:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	795b      	ldrb	r3, [r3, #5]
 800f2fc:	b25b      	sxtb	r3, r3
 800f2fe:	2201      	movs	r2, #1
 800f300:	4619      	mov	r1, r3
 800f302:	f002 fc72 	bl	8011bea <RegionAlternateDr>
 800f306:	4603      	mov	r3, r0
 800f308:	461a      	mov	r2, r3
 800f30a:	4b79      	ldr	r3, [pc, #484]	@ (800f4f0 <LoRaMacMlmeRequest+0x32c>)
 800f30c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                OnMacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 800f310:	e0bb      	b.n	800f48a <LoRaMacMlmeRequest+0x2c6>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	791b      	ldrb	r3, [r3, #4]
 800f316:	2b01      	cmp	r3, #1
 800f318:	f040 80b7 	bne.w	800f48a <LoRaMacMlmeRequest+0x2c6>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800f31c:	4b74      	ldr	r3, [pc, #464]	@ (800f4f0 <LoRaMacMlmeRequest+0x32c>)
 800f31e:	2200      	movs	r2, #0
 800f320:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800f324:	2302      	movs	r3, #2
 800f326:	763b      	strb	r3, [r7, #24]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800f328:	4b71      	ldr	r3, [pc, #452]	@ (800f4f0 <LoRaMacMlmeRequest+0x32c>)
 800f32a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f32e:	f107 020c 	add.w	r2, r7, #12
 800f332:	4611      	mov	r1, r2
 800f334:	4618      	mov	r0, r3
 800f336:	f002 faf9 	bl	801192c <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	791a      	ldrb	r2, [r3, #4]
 800f33e:	4b6c      	ldr	r3, [pc, #432]	@ (800f4f0 <LoRaMacMlmeRequest+0x32c>)
 800f340:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800f344:	2300      	movs	r3, #0
 800f346:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
                queueElement.ReadyToHandle = true;
 800f34a:	2301      	movs	r3, #1
 800f34c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
                OnMacProcessNotify( );
 800f350:	f7fe fe12 	bl	800df78 <OnMacProcessNotify>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800f354:	4a65      	ldr	r2, [pc, #404]	@ (800f4ec <LoRaMacMlmeRequest+0x328>)
 800f356:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800f35a:	f043 0310 	orr.w	r3, r3, #16
 800f35e:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
                status = LORAMAC_STATUS_OK;
 800f362:	2300      	movs	r3, #0
 800f364:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800f368:	e08f      	b.n	800f48a <LoRaMacMlmeRequest+0x2c6>
        }
#endif /* LORAMAC_VERSION */
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 800f36a:	2300      	movs	r3, #0
 800f36c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800f370:	f107 031c 	add.w	r3, r7, #28
 800f374:	2200      	movs	r2, #0
 800f376:	4619      	mov	r1, r3
 800f378:	2002      	movs	r0, #2
 800f37a:	f000 fcfb 	bl	800fd74 <LoRaMacCommandsAddCmd>
 800f37e:	4603      	mov	r3, r0
 800f380:	2b00      	cmp	r3, #0
 800f382:	f000 8084 	beq.w	800f48e <LoRaMacMlmeRequest+0x2ca>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f386:	2313      	movs	r3, #19
 800f388:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 800f38c:	e07f      	b.n	800f48e <LoRaMacMlmeRequest+0x2ca>
            break;
        }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	8898      	ldrh	r0, [r3, #4]
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	6899      	ldr	r1, [r3, #8]
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800f39c:	b2db      	uxtb	r3, r3
 800f39e:	461a      	mov	r2, r3
 800f3a0:	f7fe fc1a 	bl	800dbd8 <SetTxContinuousWave>
 800f3a4:	4603      	mov	r3, r0
 800f3a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800f3aa:	e077      	b.n	800f49c <LoRaMacMlmeRequest+0x2d8>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 800f3ac:	2300      	movs	r3, #0
 800f3ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            MacCommand_t* newCmd;
            /* ST_CODE Begin: Add MAC command condition to prevent some duplicated request */
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 800f3b2:	f107 0308 	add.w	r3, r7, #8
 800f3b6:	4619      	mov	r1, r3
 800f3b8:	200d      	movs	r0, #13
 800f3ba:	f000 fd5b 	bl	800fe74 <LoRaMacCommandsGetCmd>
 800f3be:	4603      	mov	r3, r0
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d103      	bne.n	800f3cc <LoRaMacMlmeRequest+0x208>
            {
                status = LORAMAC_STATUS_OK;
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            /* ST_CODE End */
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
            }
            break;
 800f3ca:	e062      	b.n	800f492 <LoRaMacMlmeRequest+0x2ce>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800f3cc:	f107 031c 	add.w	r3, r7, #28
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	4619      	mov	r1, r3
 800f3d4:	200d      	movs	r0, #13
 800f3d6:	f000 fccd 	bl	800fd74 <LoRaMacCommandsAddCmd>
 800f3da:	4603      	mov	r3, r0
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d058      	beq.n	800f492 <LoRaMacMlmeRequest+0x2ce>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f3e0:	2313      	movs	r3, #19
 800f3e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800f3e6:	e054      	b.n	800f492 <LoRaMacMlmeRequest+0x2ce>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800f3e8:	4b41      	ldr	r3, [pc, #260]	@ (800f4f0 <LoRaMacMlmeRequest+0x32c>)
 800f3ea:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d151      	bne.n	800f496 <LoRaMacMlmeRequest+0x2d2>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	791b      	ldrb	r3, [r3, #4]
 800f3f6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	791b      	ldrb	r3, [r3, #4]
 800f3fe:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800f402:	b2db      	uxtb	r3, r3
 800f404:	4618      	mov	r0, r3
 800f406:	f000 faff 	bl	800fa08 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800f40a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f40e:	773b      	strb	r3, [r7, #28]
                status = LORAMAC_STATUS_OK;
 800f410:	2300      	movs	r3, #0
 800f412:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800f416:	f107 031c 	add.w	r3, r7, #28
 800f41a:	2201      	movs	r2, #1
 800f41c:	4619      	mov	r1, r3
 800f41e:	2010      	movs	r0, #16
 800f420:	f000 fca8 	bl	800fd74 <LoRaMacCommandsAddCmd>
 800f424:	4603      	mov	r3, r0
 800f426:	2b00      	cmp	r3, #0
 800f428:	d035      	beq.n	800f496 <LoRaMacMlmeRequest+0x2d2>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f42a:	2313      	movs	r3, #19
 800f42c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                }
            }
            break;
 800f430:	e031      	b.n	800f496 <LoRaMacMlmeRequest+0x2d2>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 800f432:	2300      	movs	r3, #0
 800f434:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800f438:	f107 031c 	add.w	r3, r7, #28
 800f43c:	2200      	movs	r2, #0
 800f43e:	4619      	mov	r1, r3
 800f440:	2012      	movs	r0, #18
 800f442:	f000 fc97 	bl	800fd74 <LoRaMacCommandsAddCmd>
 800f446:	4603      	mov	r3, r0
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d026      	beq.n	800f49a <LoRaMacMlmeRequest+0x2d6>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f44c:	2313      	movs	r3, #19
 800f44e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 800f452:	e022      	b.n	800f49a <LoRaMacMlmeRequest+0x2d6>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 800f454:	2301      	movs	r3, #1
 800f456:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800f45a:	f000 fa8b 	bl	800f974 <LoRaMacClassBIsAcquisitionInProgress>
 800f45e:	4603      	mov	r3, r0
 800f460:	f083 0301 	eor.w	r3, r3, #1
 800f464:	b2db      	uxtb	r3, r3
 800f466:	2b00      	cmp	r3, #0
 800f468:	d009      	beq.n	800f47e <LoRaMacMlmeRequest+0x2ba>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800f46a:	2000      	movs	r0, #0
 800f46c:	f000 fa64 	bl	800f938 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800f470:	2000      	movs	r0, #0
 800f472:	f000 fa86 	bl	800f982 <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 800f476:	2300      	movs	r3, #0
 800f478:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 800f47c:	e00e      	b.n	800f49c <LoRaMacMlmeRequest+0x2d8>
                status = LORAMAC_STATUS_BUSY;
 800f47e:	2301      	movs	r3, #1
 800f480:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800f484:	e00a      	b.n	800f49c <LoRaMacMlmeRequest+0x2d8>
        }
        default:
            break;
 800f486:	bf00      	nop
 800f488:	e008      	b.n	800f49c <LoRaMacMlmeRequest+0x2d8>
            break;
 800f48a:	bf00      	nop
 800f48c:	e006      	b.n	800f49c <LoRaMacMlmeRequest+0x2d8>
            break;
 800f48e:	bf00      	nop
 800f490:	e004      	b.n	800f49c <LoRaMacMlmeRequest+0x2d8>
            break;
 800f492:	bf00      	nop
 800f494:	e002      	b.n	800f49c <LoRaMacMlmeRequest+0x2d8>
            break;
 800f496:	bf00      	nop
 800f498:	e000      	b.n	800f49c <LoRaMacMlmeRequest+0x2d8>
            break;
 800f49a:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800f49c:	4b13      	ldr	r3, [pc, #76]	@ (800f4ec <LoRaMacMlmeRequest+0x328>)
 800f49e:	f8d3 2494 	ldr.w	r2, [r3, #1172]	@ 0x494
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 800f4a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d010      	beq.n	800f4d0 <LoRaMacMlmeRequest+0x30c>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800f4ae:	f001 f805 	bl	80104bc <LoRaMacConfirmQueueGetCnt>
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d110      	bne.n	800f4da <LoRaMacMlmeRequest+0x316>
        {
            MacCtx.NodeAckRequested = false;
 800f4b8:	4b0c      	ldr	r3, [pc, #48]	@ (800f4ec <LoRaMacMlmeRequest+0x328>)
 800f4ba:	2200      	movs	r2, #0
 800f4bc:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800f4c0:	4a0a      	ldr	r2, [pc, #40]	@ (800f4ec <LoRaMacMlmeRequest+0x328>)
 800f4c2:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800f4c6:	f023 0304 	bic.w	r3, r3, #4
 800f4ca:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 800f4ce:	e004      	b.n	800f4da <LoRaMacMlmeRequest+0x316>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 800f4d0:	f107 0320 	add.w	r3, r7, #32
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	f000 fe9d 	bl	8010214 <LoRaMacConfirmQueueAdd>
    }
    return status;
 800f4da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800f4de:	4618      	mov	r0, r3
 800f4e0:	3728      	adds	r7, #40	@ 0x28
 800f4e2:	46bd      	mov	sp, r7
 800f4e4:	bd80      	pop	{r7, pc}
 800f4e6:	bf00      	nop
 800f4e8:	20000e7c 	.word	0x20000e7c
 800f4ec:	20000a28 	.word	0x20000a28
 800f4f0:	20008000 	.word	0x20008000

0800f4f4 <LoRaMacMcpsRequest>:
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 800f4f4:	b5b0      	push	{r4, r5, r7, lr}
 800f4f6:	b092      	sub	sp, #72	@ 0x48
 800f4f8:	af02      	add	r7, sp, #8
 800f4fa:	6078      	str	r0, [r7, #4]
 800f4fc:	460b      	mov	r3, r1
 800f4fe:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800f500:	2302      	movs	r3, #2
 800f502:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 800f506:	2300      	movs	r3, #0
 800f508:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    void* fBuffer = NULL;
 800f50c:	2300      	movs	r3, #0
 800f50e:	63bb      	str	r3, [r7, #56]	@ 0x38
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 800f510:	2300      	movs	r3, #0
 800f512:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    bool readyToSend = false;
 800f516:	2300      	movs	r3, #0
 800f518:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    if( mcpsRequest == NULL )
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d101      	bne.n	800f526 <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f522:	2303      	movs	r3, #3
 800f524:	e113      	b.n	800f74e <LoRaMacMcpsRequest+0x25a>
        }
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	2200      	movs	r2, #0
 800f52a:	611a      	str	r2, [r3, #16]

    if( LoRaMacIsBusy( ) == true )
 800f52c:	f7fc fa36 	bl	800b99c <LoRaMacIsBusy>
 800f530:	4603      	mov	r3, r0
 800f532:	2b00      	cmp	r3, #0
 800f534:	d001      	beq.n	800f53a <LoRaMacMcpsRequest+0x46>
    {
        return LORAMAC_STATUS_BUSY;
 800f536:	2301      	movs	r3, #1
 800f538:	e109      	b.n	800f74e <LoRaMacMcpsRequest+0x25a>
    }

    McpsReq_t request = *mcpsRequest;
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	f107 040c 	add.w	r4, r7, #12
 800f540:	461d      	mov	r5, r3
 800f542:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f544:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f546:	682b      	ldr	r3, [r5, #0]
 800f548:	6023      	str	r3, [r4, #0]

    macHdr.Value = 0;
 800f54a:	2300      	movs	r3, #0
 800f54c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800f550:	2214      	movs	r2, #20
 800f552:	2100      	movs	r1, #0
 800f554:	4880      	ldr	r0, [pc, #512]	@ (800f758 <LoRaMacMcpsRequest+0x264>)
 800f556:	f007 fc8b 	bl	8016e70 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f55a:	4b80      	ldr	r3, [pc, #512]	@ (800f75c <LoRaMacMcpsRequest+0x268>)
 800f55c:	2201      	movs	r2, #1
 800f55e:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441

    // Apply confirmed downlinks, if the device has not received a valid
    // downlink after a join accept.
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800f562:	4b7f      	ldr	r3, [pc, #508]	@ (800f760 <LoRaMacMcpsRequest+0x26c>)
 800f564:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800f568:	2b02      	cmp	r3, #2
 800f56a:	d111      	bne.n	800f590 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800f56c:	4b7c      	ldr	r3, [pc, #496]	@ (800f760 <LoRaMacMcpsRequest+0x26c>)
 800f56e:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800f572:	2b02      	cmp	r3, #2
 800f574:	d10c      	bne.n	800f590 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 800f576:	4b7a      	ldr	r3, [pc, #488]	@ (800f760 <LoRaMacMcpsRequest+0x26c>)
 800f578:	f893 311e 	ldrb.w	r3, [r3, #286]	@ 0x11e
 800f57c:	f083 0301 	eor.w	r3, r3, #1
 800f580:	b2db      	uxtb	r3, r3
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800f582:	2b00      	cmp	r3, #0
 800f584:	d004      	beq.n	800f590 <LoRaMacMcpsRequest+0x9c>
        ( request.Type == MCPS_UNCONFIRMED ) )
 800f586:	7b3b      	ldrb	r3, [r7, #12]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 800f588:	2b00      	cmp	r3, #0
 800f58a:	d101      	bne.n	800f590 <LoRaMacMcpsRequest+0x9c>
    {
        request.Type = MCPS_CONFIRMED;
 800f58c:	2301      	movs	r3, #1
 800f58e:	733b      	strb	r3, [r7, #12]
    }

    switch( request.Type )
 800f590:	7b3b      	ldrb	r3, [r7, #12]
 800f592:	2b03      	cmp	r3, #3
 800f594:	d030      	beq.n	800f5f8 <LoRaMacMcpsRequest+0x104>
 800f596:	2b03      	cmp	r3, #3
 800f598:	dc3f      	bgt.n	800f61a <LoRaMacMcpsRequest+0x126>
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d002      	beq.n	800f5a4 <LoRaMacMcpsRequest+0xb0>
 800f59e:	2b01      	cmp	r3, #1
 800f5a0:	d015      	beq.n	800f5ce <LoRaMacMcpsRequest+0xda>
            fBufferSize = request.Req.Proprietary.fBufferSize;
            datarate = request.Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 800f5a2:	e03a      	b.n	800f61a <LoRaMacMcpsRequest+0x126>
            readyToSend = true;
 800f5a4:	2301      	movs	r3, #1
 800f5a6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800f5aa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f5ae:	2202      	movs	r2, #2
 800f5b0:	f362 1347 	bfi	r3, r2, #5, #3
 800f5b4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fPort = request.Req.Unconfirmed.fPort;
 800f5b8:	7c3b      	ldrb	r3, [r7, #16]
 800f5ba:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            fBuffer = request.Req.Unconfirmed.fBuffer;
 800f5be:	697b      	ldr	r3, [r7, #20]
 800f5c0:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 800f5c2:	8b3b      	ldrh	r3, [r7, #24]
 800f5c4:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Unconfirmed.Datarate;
 800f5c6:	7ebb      	ldrb	r3, [r7, #26]
 800f5c8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 800f5cc:	e026      	b.n	800f61c <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 800f5ce:	2301      	movs	r3, #1
 800f5d0:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800f5d4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f5d8:	2204      	movs	r2, #4
 800f5da:	f362 1347 	bfi	r3, r2, #5, #3
 800f5de:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fPort = request.Req.Confirmed.fPort;
 800f5e2:	7c3b      	ldrb	r3, [r7, #16]
 800f5e4:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            fBuffer = request.Req.Confirmed.fBuffer;
 800f5e8:	697b      	ldr	r3, [r7, #20]
 800f5ea:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Confirmed.fBufferSize;
 800f5ec:	8b3b      	ldrh	r3, [r7, #24]
 800f5ee:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Confirmed.Datarate;
 800f5f0:	7ebb      	ldrb	r3, [r7, #26]
 800f5f2:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 800f5f6:	e011      	b.n	800f61c <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 800f5f8:	2301      	movs	r3, #1
 800f5fa:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800f5fe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f602:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 800f606:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fBuffer = request.Req.Proprietary.fBuffer;
 800f60a:	693b      	ldr	r3, [r7, #16]
 800f60c:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Proprietary.fBufferSize;
 800f60e:	8abb      	ldrh	r3, [r7, #20]
 800f610:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Proprietary.Datarate;
 800f612:	7dbb      	ldrb	r3, [r7, #22]
 800f614:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 800f618:	e000      	b.n	800f61c <LoRaMacMcpsRequest+0x128>
            break;
 800f61a:	bf00      	nop
    }

    // Make sure that the input datarate is compliant
    // to the regional specification.
    getPhy.Attribute = PHY_MIN_TX_DR;
 800f61c:	2302      	movs	r3, #2
 800f61e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f622:	4b4f      	ldr	r3, [pc, #316]	@ (800f760 <LoRaMacMcpsRequest+0x26c>)
 800f624:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800f628:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f62c:	4b4c      	ldr	r3, [pc, #304]	@ (800f760 <LoRaMacMcpsRequest+0x26c>)
 800f62e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f632:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800f636:	4611      	mov	r1, r2
 800f638:	4618      	mov	r0, r3
 800f63a:	f002 f940 	bl	80118be <RegionGetPhyParam>
 800f63e:	4603      	mov	r3, r0
 800f640:	62bb      	str	r3, [r7, #40]	@ 0x28
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800f642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f644:	b25b      	sxtb	r3, r3
 800f646:	f997 2035 	ldrsb.w	r2, [r7, #53]	@ 0x35
 800f64a:	4293      	cmp	r3, r2
 800f64c:	bfb8      	it	lt
 800f64e:	4613      	movlt	r3, r2
 800f650:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    // Apply minimum datarate in this special case.
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 800f654:	4b42      	ldr	r3, [pc, #264]	@ (800f760 <LoRaMacMcpsRequest+0x26c>)
 800f656:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800f65a:	4a41      	ldr	r2, [pc, #260]	@ (800f760 <LoRaMacMcpsRequest+0x26c>)
 800f65c:	f892 1130 	ldrb.w	r1, [r2, #304]	@ 0x130
 800f660:	4a3f      	ldr	r2, [pc, #252]	@ (800f760 <LoRaMacMcpsRequest+0x26c>)
 800f662:	f892 211d 	ldrb.w	r2, [r2, #285]	@ 0x11d
 800f666:	4618      	mov	r0, r3
 800f668:	f7fc fb34 	bl	800bcd4 <CheckForMinimumAbpDatarate>
 800f66c:	4603      	mov	r3, r0
 800f66e:	2b00      	cmp	r3, #0
 800f670:	d002      	beq.n	800f678 <LoRaMacMcpsRequest+0x184>
                                    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true )
    {
        datarate = ( int8_t )phyParam.Value;
 800f672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f674:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if( readyToSend == true )
 800f678:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d05f      	beq.n	800f740 <LoRaMacMcpsRequest+0x24c>
    {
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 800f680:	4b37      	ldr	r3, [pc, #220]	@ (800f760 <LoRaMacMcpsRequest+0x26c>)
 800f682:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800f686:	f083 0301 	eor.w	r3, r3, #1
 800f68a:	b2db      	uxtb	r3, r3
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d10e      	bne.n	800f6ae <LoRaMacMcpsRequest+0x1ba>
            ( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 800f690:	4b33      	ldr	r3, [pc, #204]	@ (800f760 <LoRaMacMcpsRequest+0x26c>)
 800f692:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800f696:	4a32      	ldr	r2, [pc, #200]	@ (800f760 <LoRaMacMcpsRequest+0x26c>)
 800f698:	f892 1130 	ldrb.w	r1, [r2, #304]	@ 0x130
 800f69c:	4a30      	ldr	r2, [pc, #192]	@ (800f760 <LoRaMacMcpsRequest+0x26c>)
 800f69e:	f892 211d 	ldrb.w	r2, [r2, #285]	@ 0x11d
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	f7fc fb16 	bl	800bcd4 <CheckForMinimumAbpDatarate>
 800f6a8:	4603      	mov	r3, r0
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d01c      	beq.n	800f6e8 <LoRaMacMcpsRequest+0x1f4>
                                          Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true ) )
        {
            verify.DatarateParams.Datarate = datarate;
 800f6ae:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800f6b2:	f887 3020 	strb.w	r3, [r7, #32]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f6b6:	4b2a      	ldr	r3, [pc, #168]	@ (800f760 <LoRaMacMcpsRequest+0x26c>)
 800f6b8:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800f6bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800f6c0:	4b27      	ldr	r3, [pc, #156]	@ (800f760 <LoRaMacMcpsRequest+0x26c>)
 800f6c2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f6c6:	f107 0120 	add.w	r1, r7, #32
 800f6ca:	2205      	movs	r2, #5
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	f002 f944 	bl	801195a <RegionVerify>
 800f6d2:	4603      	mov	r3, r0
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d005      	beq.n	800f6e4 <LoRaMacMcpsRequest+0x1f0>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800f6d8:	f997 2020 	ldrsb.w	r2, [r7, #32]
 800f6dc:	4b20      	ldr	r3, [pc, #128]	@ (800f760 <LoRaMacMcpsRequest+0x26c>)
 800f6de:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800f6e2:	e001      	b.n	800f6e8 <LoRaMacMcpsRequest+0x1f4>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800f6e4:	2303      	movs	r3, #3
 800f6e6:	e032      	b.n	800f74e <LoRaMacMcpsRequest+0x25a>
            }
        }

        // Verification of response timeout for class b and class c
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800f6e8:	4b1d      	ldr	r3, [pc, #116]	@ (800f760 <LoRaMacMcpsRequest+0x26c>)
 800f6ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f6ee:	4a1b      	ldr	r2, [pc, #108]	@ (800f75c <LoRaMacMcpsRequest+0x268>)
 800f6f0:	f8d2 2498 	ldr.w	r2, [r2, #1176]	@ 0x498
 800f6f4:	4611      	mov	r1, r2
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	f7fc fbd8 	bl	800beac <LoRaMacHandleResponseTimeout>
                                      MacCtx.ResponseTimeoutStartTime );

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 800f6fc:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800f6fe:	f897 103e 	ldrb.w	r1, [r7, #62]	@ 0x3e
 800f702:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800f706:	78fb      	ldrb	r3, [r7, #3]
 800f708:	9300      	str	r3, [sp, #0]
 800f70a:	4613      	mov	r3, r2
 800f70c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f70e:	f7fd fb85 	bl	800ce1c <Send>
 800f712:	4603      	mov	r3, r0
 800f714:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

        if( status == LORAMAC_STATUS_OK )
 800f718:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d10b      	bne.n	800f738 <LoRaMacMcpsRequest+0x244>
        {
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 800f720:	7b3a      	ldrb	r2, [r7, #12]
 800f722:	4b0e      	ldr	r3, [pc, #56]	@ (800f75c <LoRaMacMcpsRequest+0x268>)
 800f724:	f883 2440 	strb.w	r2, [r3, #1088]	@ 0x440
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800f728:	4a0c      	ldr	r2, [pc, #48]	@ (800f75c <LoRaMacMcpsRequest+0x268>)
 800f72a:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800f72e:	f043 0301 	orr.w	r3, r3, #1
 800f732:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 800f736:	e003      	b.n	800f740 <LoRaMacMcpsRequest+0x24c>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 800f738:	4b08      	ldr	r3, [pc, #32]	@ (800f75c <LoRaMacMcpsRequest+0x268>)
 800f73a:	2200      	movs	r2, #0
 800f73c:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
        }
    }
#endif /* LORAMAC_VERSION */

     // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800f740:	4b06      	ldr	r3, [pc, #24]	@ (800f75c <LoRaMacMcpsRequest+0x268>)
 800f742:	f8d3 2494 	ldr.w	r2, [r3, #1172]	@ 0x494
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	611a      	str	r2, [r3, #16]

    return status;
 800f74a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800f74e:	4618      	mov	r0, r3
 800f750:	3740      	adds	r7, #64	@ 0x40
 800f752:	46bd      	mov	sp, r7
 800f754:	bdb0      	pop	{r4, r5, r7, pc}
 800f756:	bf00      	nop
 800f758:	20000e68 	.word	0x20000e68
 800f75c:	20000a28 	.word	0x20000a28
 800f760:	20008000 	.word	0x20008000

0800f764 <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800f764:	b580      	push	{r7, lr}
 800f766:	b084      	sub	sp, #16
 800f768:	af00      	add	r7, sp, #0
 800f76a:	4603      	mov	r3, r0
 800f76c:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 800f76e:	79fb      	ldrb	r3, [r7, #7]
 800f770:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800f772:	4b0d      	ldr	r3, [pc, #52]	@ (800f7a8 <LoRaMacTestSetDutyCycleOn+0x44>)
 800f774:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f778:	f107 010c 	add.w	r1, r7, #12
 800f77c:	220f      	movs	r2, #15
 800f77e:	4618      	mov	r0, r3
 800f780:	f002 f8eb 	bl	801195a <RegionVerify>
 800f784:	4603      	mov	r3, r0
 800f786:	2b00      	cmp	r3, #0
 800f788:	d00a      	beq.n	800f7a0 <LoRaMacTestSetDutyCycleOn+0x3c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 800f78a:	4a07      	ldr	r2, [pc, #28]	@ (800f7a8 <LoRaMacTestSetDutyCycleOn+0x44>)
 800f78c:	79fb      	ldrb	r3, [r7, #7]
 800f78e:	f882 311c 	strb.w	r3, [r2, #284]	@ 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800f792:	4a06      	ldr	r2, [pc, #24]	@ (800f7ac <LoRaMacTestSetDutyCycleOn+0x48>)
 800f794:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800f798:	f043 0320 	orr.w	r3, r3, #32
 800f79c:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
}
 800f7a0:	bf00      	nop
 800f7a2:	3710      	adds	r7, #16
 800f7a4:	46bd      	mov	sp, r7
 800f7a6:	bd80      	pop	{r7, pc}
 800f7a8:	20008000 	.word	0x20008000
 800f7ac:	20000a28 	.word	0x20000a28

0800f7b0 <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b08c      	sub	sp, #48	@ 0x30
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	60f8      	str	r0, [r7, #12]
 800f7b8:	60b9      	str	r1, [r7, #8]
 800f7ba:	607a      	str	r2, [r7, #4]
 800f7bc:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 800f7be:	2300      	movs	r3, #0
 800f7c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = adrNext->Datarate;
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	7b1b      	ldrb	r3, [r3, #12]
 800f7c8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = adrNext->TxPower;
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	7b5b      	ldrb	r3, [r3, #13]
 800f7d0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint8_t nbTrans = adrNext->NbTrans;
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	7b9b      	ldrb	r3, [r3, #14]
 800f7d8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	685a      	ldr	r2, [r3, #4]
 800f7e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7e2:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	785b      	ldrb	r3, [r3, #1]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	f000 8088 	beq.w	800f8fe <LoRaMacAdrCalcNext+0x14e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 800f7ee:	2302      	movs	r3, #2
 800f7f0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	7bdb      	ldrb	r3, [r3, #15]
 800f7f8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	7c1b      	ldrb	r3, [r3, #16]
 800f800:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800f804:	4611      	mov	r1, r2
 800f806:	4618      	mov	r0, r3
 800f808:	f002 f859 	bl	80118be <RegionGetPhyParam>
 800f80c:	4603      	mov	r3, r0
 800f80e:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 800f810:	6a3b      	ldr	r3, [r7, #32]
 800f812:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        datarate = MAX( datarate, minTxDatarate );
 800f816:	f997 202b 	ldrsb.w	r2, [r7, #43]	@ 0x2b
 800f81a:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 800f81e:	4293      	cmp	r3, r2
 800f820:	bfb8      	it	lt
 800f822:	4613      	movlt	r3, r2
 800f824:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	685b      	ldr	r3, [r3, #4]
 800f82c:	68fa      	ldr	r2, [r7, #12]
 800f82e:	8912      	ldrh	r2, [r2, #8]
 800f830:	4293      	cmp	r3, r2
 800f832:	d302      	bcc.n	800f83a <LoRaMacAdrCalcNext+0x8a>
        {
            adrAckReq = true;
 800f834:	2301      	movs	r3, #1
 800f836:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	685b      	ldr	r3, [r3, #4]
 800f83e:	68fa      	ldr	r2, [r7, #12]
 800f840:	8912      	ldrh	r2, [r2, #8]
 800f842:	4611      	mov	r1, r2
 800f844:	68fa      	ldr	r2, [r7, #12]
 800f846:	8952      	ldrh	r2, [r2, #10]
 800f848:	440a      	add	r2, r1
 800f84a:	4293      	cmp	r3, r2
 800f84c:	d30f      	bcc.n	800f86e <LoRaMacAdrCalcNext+0xbe>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
 800f84e:	230a      	movs	r3, #10
 800f850:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	7c1b      	ldrb	r3, [r3, #16]
 800f858:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800f85c:	4611      	mov	r1, r2
 800f85e:	4618      	mov	r0, r3
 800f860:	f002 f82d 	bl	80118be <RegionGetPhyParam>
 800f864:	4603      	mov	r3, r0
 800f866:	623b      	str	r3, [r7, #32]
            txPower = phyParam.Value;
 800f868:	6a3b      	ldr	r3, [r7, #32]
 800f86a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	685b      	ldr	r3, [r3, #4]
 800f872:	68fa      	ldr	r2, [r7, #12]
 800f874:	8912      	ldrh	r2, [r2, #8]
 800f876:	4611      	mov	r1, r2
 800f878:	68fa      	ldr	r2, [r7, #12]
 800f87a:	8952      	ldrh	r2, [r2, #10]
 800f87c:	0052      	lsls	r2, r2, #1
 800f87e:	440a      	add	r2, r1
 800f880:	4293      	cmp	r3, r2
 800f882:	d33c      	bcc.n	800f8fe <LoRaMacAdrCalcNext+0x14e>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	685b      	ldr	r3, [r3, #4]
 800f888:	68fa      	ldr	r2, [r7, #12]
 800f88a:	8912      	ldrh	r2, [r2, #8]
 800f88c:	1a9b      	subs	r3, r3, r2
 800f88e:	68fa      	ldr	r2, [r7, #12]
 800f890:	8952      	ldrh	r2, [r2, #10]
 800f892:	fbb3 f1f2 	udiv	r1, r3, r2
 800f896:	fb01 f202 	mul.w	r2, r1, r2
 800f89a:	1a9b      	subs	r3, r3, r2
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d12e      	bne.n	800f8fe <LoRaMacAdrCalcNext+0x14e>
            {
                if( datarate == minTxDatarate )
 800f8a0:	f997 202e 	ldrsb.w	r2, [r7, #46]	@ 0x2e
 800f8a4:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800f8a8:	429a      	cmp	r2, r3
 800f8aa:	d110      	bne.n	800f8ce <LoRaMacAdrCalcNext+0x11e>
                {
                    // Restore the channel mask
                    if( adrNext->UpdateChanMask == true )
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	781b      	ldrb	r3, [r3, #0]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d009      	beq.n	800f8c8 <LoRaMacAdrCalcNext+0x118>
                    {
                        InitDefaultsParams_t params;
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800f8b4:	2302      	movs	r3, #2
 800f8b6:	773b      	strb	r3, [r7, #28]
                        RegionInitDefaults( adrNext->Region, &params );
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	7c1b      	ldrb	r3, [r3, #16]
 800f8bc:	f107 0210 	add.w	r2, r7, #16
 800f8c0:	4611      	mov	r1, r2
 800f8c2:	4618      	mov	r0, r3
 800f8c4:	f002 f832 	bl	801192c <RegionInitDefaults>
                    }

                    // Restore NbTrans
                    nbTrans = 1;
 800f8c8:	2301      	movs	r3, #1
 800f8ca:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800f8ce:	2321      	movs	r3, #33	@ 0x21
 800f8d0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
                getPhy.Datarate = datarate;
 800f8d4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800f8d8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	7bdb      	ldrb	r3, [r3, #15]
 800f8e0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	7c1b      	ldrb	r3, [r3, #16]
 800f8e8:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800f8ec:	4611      	mov	r1, r2
 800f8ee:	4618      	mov	r0, r3
 800f8f0:	f001 ffe5 	bl	80118be <RegionGetPhyParam>
 800f8f4:	4603      	mov	r3, r0
 800f8f6:	623b      	str	r3, [r7, #32]
                datarate = phyParam.Value;
 800f8f8:	6a3b      	ldr	r3, [r7, #32]
 800f8fa:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            }
        }
    }

    *drOut = datarate;
 800f8fe:	68bb      	ldr	r3, [r7, #8]
 800f900:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 800f904:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 800f90c:	701a      	strb	r2, [r3, #0]
    *nbTransOut = nbTrans;
 800f90e:	683b      	ldr	r3, [r7, #0]
 800f910:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800f914:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 800f916:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800f91a:	4618      	mov	r0, r3
 800f91c:	3730      	adds	r7, #48	@ 0x30
 800f91e:	46bd      	mov	sp, r7
 800f920:	bd80      	pop	{r7, pc}

0800f922 <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 800f922:	b480      	push	{r7}
 800f924:	b085      	sub	sp, #20
 800f926:	af00      	add	r7, sp, #0
 800f928:	60f8      	str	r0, [r7, #12]
 800f92a:	60b9      	str	r1, [r7, #8]
 800f92c:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f92e:	bf00      	nop
 800f930:	3714      	adds	r7, #20
 800f932:	46bd      	mov	sp, r7
 800f934:	bc80      	pop	{r7}
 800f936:	4770      	bx	lr

0800f938 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 800f938:	b480      	push	{r7}
 800f93a:	b083      	sub	sp, #12
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	4603      	mov	r3, r0
 800f940:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f942:	bf00      	nop
 800f944:	370c      	adds	r7, #12
 800f946:	46bd      	mov	sp, r7
 800f948:	bc80      	pop	{r7}
 800f94a:	4770      	bx	lr

0800f94c <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 800f94c:	b480      	push	{r7}
 800f94e:	b083      	sub	sp, #12
 800f950:	af00      	add	r7, sp, #0
 800f952:	4603      	mov	r3, r0
 800f954:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f956:	bf00      	nop
 800f958:	370c      	adds	r7, #12
 800f95a:	46bd      	mov	sp, r7
 800f95c:	bc80      	pop	{r7}
 800f95e:	4770      	bx	lr

0800f960 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 800f960:	b480      	push	{r7}
 800f962:	b083      	sub	sp, #12
 800f964:	af00      	add	r7, sp, #0
 800f966:	4603      	mov	r3, r0
 800f968:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f96a:	bf00      	nop
 800f96c:	370c      	adds	r7, #12
 800f96e:	46bd      	mov	sp, r7
 800f970:	bc80      	pop	{r7}
 800f972:	4770      	bx	lr

0800f974 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 800f974:	b480      	push	{r7}
 800f976:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 800f978:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f97a:	4618      	mov	r0, r3
 800f97c:	46bd      	mov	sp, r7
 800f97e:	bc80      	pop	{r7}
 800f980:	4770      	bx	lr

0800f982 <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 800f982:	b480      	push	{r7}
 800f984:	b083      	sub	sp, #12
 800f986:	af00      	add	r7, sp, #0
 800f988:	6078      	str	r0, [r7, #4]
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f98a:	bf00      	nop
 800f98c:	370c      	adds	r7, #12
 800f98e:	46bd      	mov	sp, r7
 800f990:	bc80      	pop	{r7}
 800f992:	4770      	bx	lr

0800f994 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 800f994:	b480      	push	{r7}
 800f996:	b083      	sub	sp, #12
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f99c:	bf00      	nop
 800f99e:	370c      	adds	r7, #12
 800f9a0:	46bd      	mov	sp, r7
 800f9a2:	bc80      	pop	{r7}
 800f9a4:	4770      	bx	lr

0800f9a6 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 800f9a6:	b480      	push	{r7}
 800f9a8:	b083      	sub	sp, #12
 800f9aa:	af00      	add	r7, sp, #0
 800f9ac:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f9ae:	bf00      	nop
 800f9b0:	370c      	adds	r7, #12
 800f9b2:	46bd      	mov	sp, r7
 800f9b4:	bc80      	pop	{r7}
 800f9b6:	4770      	bx	lr

0800f9b8 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 800f9b8:	b480      	push	{r7}
 800f9ba:	b083      	sub	sp, #12
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	6078      	str	r0, [r7, #4]
 800f9c0:	460b      	mov	r3, r1
 800f9c2:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 800f9c4:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	370c      	adds	r7, #12
 800f9ca:	46bd      	mov	sp, r7
 800f9cc:	bc80      	pop	{r7}
 800f9ce:	4770      	bx	lr

0800f9d0 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 800f9d0:	b480      	push	{r7}
 800f9d2:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 800f9d4:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	46bd      	mov	sp, r7
 800f9da:	bc80      	pop	{r7}
 800f9dc:	4770      	bx	lr

0800f9de <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 800f9de:	b480      	push	{r7}
 800f9e0:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 800f9e2:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	46bd      	mov	sp, r7
 800f9e8:	bc80      	pop	{r7}
 800f9ea:	4770      	bx	lr

0800f9ec <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 800f9ec:	b480      	push	{r7}
 800f9ee:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 800f9f0:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	46bd      	mov	sp, r7
 800f9f6:	bc80      	pop	{r7}
 800f9f8:	4770      	bx	lr

0800f9fa <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 800f9fa:	b480      	push	{r7}
 800f9fc:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 800f9fe:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800fa00:	4618      	mov	r0, r3
 800fa02:	46bd      	mov	sp, r7
 800fa04:	bc80      	pop	{r7}
 800fa06:	4770      	bx	lr

0800fa08 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 800fa08:	b480      	push	{r7}
 800fa0a:	b083      	sub	sp, #12
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	4603      	mov	r3, r0
 800fa10:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800fa12:	bf00      	nop
 800fa14:	370c      	adds	r7, #12
 800fa16:	46bd      	mov	sp, r7
 800fa18:	bc80      	pop	{r7}
 800fa1a:	4770      	bx	lr

0800fa1c <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 800fa1c:	b480      	push	{r7}
 800fa1e:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800fa20:	bf00      	nop
 800fa22:	46bd      	mov	sp, r7
 800fa24:	bc80      	pop	{r7}
 800fa26:	4770      	bx	lr

0800fa28 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 800fa28:	b480      	push	{r7}
 800fa2a:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800fa2c:	bf00      	nop
 800fa2e:	46bd      	mov	sp, r7
 800fa30:	bc80      	pop	{r7}
 800fa32:	4770      	bx	lr

0800fa34 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 800fa34:	b480      	push	{r7}
 800fa36:	b083      	sub	sp, #12
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	4603      	mov	r3, r0
 800fa3c:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800fa3e:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800fa40:	4618      	mov	r0, r3
 800fa42:	370c      	adds	r7, #12
 800fa44:	46bd      	mov	sp, r7
 800fa46:	bc80      	pop	{r7}
 800fa48:	4770      	bx	lr

0800fa4a <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 800fa4a:	b480      	push	{r7}
 800fa4c:	b083      	sub	sp, #12
 800fa4e:	af00      	add	r7, sp, #0
 800fa50:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800fa52:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800fa54:	4618      	mov	r0, r3
 800fa56:	370c      	adds	r7, #12
 800fa58:	46bd      	mov	sp, r7
 800fa5a:	bc80      	pop	{r7}
 800fa5c:	4770      	bx	lr

0800fa5e <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 800fa5e:	b480      	push	{r7}
 800fa60:	b083      	sub	sp, #12
 800fa62:	af00      	add	r7, sp, #0
 800fa64:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800fa66:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800fa68:	4618      	mov	r0, r3
 800fa6a:	370c      	adds	r7, #12
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	bc80      	pop	{r7}
 800fa70:	4770      	bx	lr

0800fa72 <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 800fa72:	b480      	push	{r7}
 800fa74:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800fa76:	bf00      	nop
 800fa78:	46bd      	mov	sp, r7
 800fa7a:	bc80      	pop	{r7}
 800fa7c:	4770      	bx	lr

0800fa7e <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 800fa7e:	b480      	push	{r7}
 800fa80:	b083      	sub	sp, #12
 800fa82:	af00      	add	r7, sp, #0
 800fa84:	4603      	mov	r3, r0
 800fa86:	6039      	str	r1, [r7, #0]
 800fa88:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 800fa8a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	370c      	adds	r7, #12
 800fa90:	46bd      	mov	sp, r7
 800fa92:	bc80      	pop	{r7}
 800fa94:	4770      	bx	lr

0800fa96 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 800fa96:	b480      	push	{r7}
 800fa98:	b083      	sub	sp, #12
 800fa9a:	af00      	add	r7, sp, #0
 800fa9c:	4603      	mov	r3, r0
 800fa9e:	603a      	str	r2, [r7, #0]
 800faa0:	80fb      	strh	r3, [r7, #6]
 800faa2:	460b      	mov	r3, r1
 800faa4:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800faa6:	bf00      	nop
 800faa8:	370c      	adds	r7, #12
 800faaa:	46bd      	mov	sp, r7
 800faac:	bc80      	pop	{r7}
 800faae:	4770      	bx	lr

0800fab0 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 800fab0:	b480      	push	{r7}
 800fab2:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800fab4:	bf00      	nop
 800fab6:	46bd      	mov	sp, r7
 800fab8:	bc80      	pop	{r7}
 800faba:	4770      	bx	lr

0800fabc <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 800fabc:	b480      	push	{r7}
 800fabe:	b083      	sub	sp, #12
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 800fac4:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800fac6:	4618      	mov	r0, r3
 800fac8:	370c      	adds	r7, #12
 800faca:	46bd      	mov	sp, r7
 800facc:	bc80      	pop	{r7}
 800face:	4770      	bx	lr

0800fad0 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 800fad0:	b480      	push	{r7}
 800fad2:	b083      	sub	sp, #12
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 800fad8:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800fada:	4618      	mov	r0, r3
 800fadc:	370c      	adds	r7, #12
 800fade:	46bd      	mov	sp, r7
 800fae0:	bc80      	pop	{r7}
 800fae2:	4770      	bx	lr

0800fae4 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 800fae4:	b480      	push	{r7}
 800fae6:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800fae8:	bf00      	nop
 800faea:	46bd      	mov	sp, r7
 800faec:	bc80      	pop	{r7}
 800faee:	4770      	bx	lr

0800faf0 <LoRaMacClassBSetFPendingBit>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
void LoRaMacClassBSetFPendingBit( uint32_t address, uint8_t fPendingSet )
{
 800faf0:	b480      	push	{r7}
 800faf2:	b083      	sub	sp, #12
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	6078      	str	r0, [r7, #4]
 800faf8:	460b      	mov	r3, r1
 800fafa:	70fb      	strb	r3, [r7, #3]
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800fafc:	bf00      	nop
 800fafe:	370c      	adds	r7, #12
 800fb00:	46bd      	mov	sp, r7
 800fb02:	bc80      	pop	{r7}
 800fb04:	4770      	bx	lr

0800fb06 <LoRaMacClassBProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 800fb06:	b480      	push	{r7}
 800fb08:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800fb0a:	bf00      	nop
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	bc80      	pop	{r7}
 800fb10:	4770      	bx	lr

0800fb12 <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 800fb12:	b480      	push	{r7}
 800fb14:	b085      	sub	sp, #20
 800fb16:	af00      	add	r7, sp, #0
 800fb18:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800fb1e:	2300      	movs	r3, #0
 800fb20:	81fb      	strh	r3, [r7, #14]
 800fb22:	e00a      	b.n	800fb3a <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 800fb24:	89fb      	ldrh	r3, [r7, #14]
 800fb26:	68ba      	ldr	r2, [r7, #8]
 800fb28:	4413      	add	r3, r2
 800fb2a:	781b      	ldrb	r3, [r3, #0]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d001      	beq.n	800fb34 <IsSlotFree+0x22>
        {
            return false;
 800fb30:	2300      	movs	r3, #0
 800fb32:	e006      	b.n	800fb42 <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800fb34:	89fb      	ldrh	r3, [r7, #14]
 800fb36:	3301      	adds	r3, #1
 800fb38:	81fb      	strh	r3, [r7, #14]
 800fb3a:	89fb      	ldrh	r3, [r7, #14]
 800fb3c:	2b0f      	cmp	r3, #15
 800fb3e:	d9f1      	bls.n	800fb24 <IsSlotFree+0x12>
        }
    }
    return true;
 800fb40:	2301      	movs	r3, #1
}
 800fb42:	4618      	mov	r0, r3
 800fb44:	3714      	adds	r7, #20
 800fb46:	46bd      	mov	sp, r7
 800fb48:	bc80      	pop	{r7}
 800fb4a:	4770      	bx	lr

0800fb4c <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b082      	sub	sp, #8
 800fb50:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 800fb52:	2300      	movs	r3, #0
 800fb54:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800fb56:	e007      	b.n	800fb68 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 800fb58:	79fb      	ldrb	r3, [r7, #7]
 800fb5a:	3301      	adds	r3, #1
 800fb5c:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 800fb5e:	79fb      	ldrb	r3, [r7, #7]
 800fb60:	2b20      	cmp	r3, #32
 800fb62:	d101      	bne.n	800fb68 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 800fb64:	2300      	movs	r3, #0
 800fb66:	e012      	b.n	800fb8e <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800fb68:	79fb      	ldrb	r3, [r7, #7]
 800fb6a:	011b      	lsls	r3, r3, #4
 800fb6c:	3308      	adds	r3, #8
 800fb6e:	4a0a      	ldr	r2, [pc, #40]	@ (800fb98 <MallocNewMacCommandSlot+0x4c>)
 800fb70:	4413      	add	r3, r2
 800fb72:	4618      	mov	r0, r3
 800fb74:	f7ff ffcd 	bl	800fb12 <IsSlotFree>
 800fb78:	4603      	mov	r3, r0
 800fb7a:	f083 0301 	eor.w	r3, r3, #1
 800fb7e:	b2db      	uxtb	r3, r3
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d1e9      	bne.n	800fb58 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 800fb84:	79fb      	ldrb	r3, [r7, #7]
 800fb86:	011b      	lsls	r3, r3, #4
 800fb88:	3308      	adds	r3, #8
 800fb8a:	4a03      	ldr	r2, [pc, #12]	@ (800fb98 <MallocNewMacCommandSlot+0x4c>)
 800fb8c:	4413      	add	r3, r2
}
 800fb8e:	4618      	mov	r0, r3
 800fb90:	3708      	adds	r7, #8
 800fb92:	46bd      	mov	sp, r7
 800fb94:	bd80      	pop	{r7, pc}
 800fb96:	bf00      	nop
 800fb98:	20000fec 	.word	0x20000fec

0800fb9c <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 800fb9c:	b580      	push	{r7, lr}
 800fb9e:	b082      	sub	sp, #8
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d101      	bne.n	800fbae <FreeMacCommandSlot+0x12>
    {
        return false;
 800fbaa:	2300      	movs	r3, #0
 800fbac:	e005      	b.n	800fbba <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800fbae:	2210      	movs	r2, #16
 800fbb0:	2100      	movs	r1, #0
 800fbb2:	6878      	ldr	r0, [r7, #4]
 800fbb4:	f007 f95c 	bl	8016e70 <memset1>

    return true;
 800fbb8:	2301      	movs	r3, #1
}
 800fbba:	4618      	mov	r0, r3
 800fbbc:	3708      	adds	r7, #8
 800fbbe:	46bd      	mov	sp, r7
 800fbc0:	bd80      	pop	{r7, pc}

0800fbc2 <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 800fbc2:	b480      	push	{r7}
 800fbc4:	b083      	sub	sp, #12
 800fbc6:	af00      	add	r7, sp, #0
 800fbc8:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d101      	bne.n	800fbd4 <LinkedListInit+0x12>
    {
        return false;
 800fbd0:	2300      	movs	r3, #0
 800fbd2:	e006      	b.n	800fbe2 <LinkedListInit+0x20>
    }

    list->First = NULL;
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	2200      	movs	r2, #0
 800fbd8:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	2200      	movs	r2, #0
 800fbde:	605a      	str	r2, [r3, #4]

    return true;
 800fbe0:	2301      	movs	r3, #1
}
 800fbe2:	4618      	mov	r0, r3
 800fbe4:	370c      	adds	r7, #12
 800fbe6:	46bd      	mov	sp, r7
 800fbe8:	bc80      	pop	{r7}
 800fbea:	4770      	bx	lr

0800fbec <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 800fbec:	b480      	push	{r7}
 800fbee:	b083      	sub	sp, #12
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	6078      	str	r0, [r7, #4]
 800fbf4:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d002      	beq.n	800fc02 <LinkedListAdd+0x16>
 800fbfc:	683b      	ldr	r3, [r7, #0]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d101      	bne.n	800fc06 <LinkedListAdd+0x1a>
    {
        return false;
 800fc02:	2300      	movs	r3, #0
 800fc04:	e015      	b.n	800fc32 <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d102      	bne.n	800fc14 <LinkedListAdd+0x28>
    {
        list->First = element;
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	683a      	ldr	r2, [r7, #0]
 800fc12:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	685b      	ldr	r3, [r3, #4]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d003      	beq.n	800fc24 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	685b      	ldr	r3, [r3, #4]
 800fc20:	683a      	ldr	r2, [r7, #0]
 800fc22:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 800fc24:	683b      	ldr	r3, [r7, #0]
 800fc26:	2200      	movs	r2, #0
 800fc28:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	683a      	ldr	r2, [r7, #0]
 800fc2e:	605a      	str	r2, [r3, #4]

    return true;
 800fc30:	2301      	movs	r3, #1
}
 800fc32:	4618      	mov	r0, r3
 800fc34:	370c      	adds	r7, #12
 800fc36:	46bd      	mov	sp, r7
 800fc38:	bc80      	pop	{r7}
 800fc3a:	4770      	bx	lr

0800fc3c <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 800fc3c:	b480      	push	{r7}
 800fc3e:	b085      	sub	sp, #20
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	6078      	str	r0, [r7, #4]
 800fc44:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d002      	beq.n	800fc52 <LinkedListGetPrevious+0x16>
 800fc4c:	683b      	ldr	r3, [r7, #0]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d101      	bne.n	800fc56 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 800fc52:	2300      	movs	r3, #0
 800fc54:	e016      	b.n	800fc84 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 800fc5c:	683a      	ldr	r2, [r7, #0]
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	429a      	cmp	r2, r3
 800fc62:	d00c      	beq.n	800fc7e <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800fc64:	e002      	b.n	800fc6c <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d007      	beq.n	800fc82 <LinkedListGetPrevious+0x46>
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	683a      	ldr	r2, [r7, #0]
 800fc78:	429a      	cmp	r2, r3
 800fc7a:	d1f4      	bne.n	800fc66 <LinkedListGetPrevious+0x2a>
 800fc7c:	e001      	b.n	800fc82 <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 800fc7e:	2300      	movs	r3, #0
 800fc80:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 800fc82:	68fb      	ldr	r3, [r7, #12]
}
 800fc84:	4618      	mov	r0, r3
 800fc86:	3714      	adds	r7, #20
 800fc88:	46bd      	mov	sp, r7
 800fc8a:	bc80      	pop	{r7}
 800fc8c:	4770      	bx	lr

0800fc8e <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 800fc8e:	b580      	push	{r7, lr}
 800fc90:	b084      	sub	sp, #16
 800fc92:	af00      	add	r7, sp, #0
 800fc94:	6078      	str	r0, [r7, #4]
 800fc96:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d002      	beq.n	800fca4 <LinkedListRemove+0x16>
 800fc9e:	683b      	ldr	r3, [r7, #0]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d101      	bne.n	800fca8 <LinkedListRemove+0x1a>
    {
        return false;
 800fca4:	2300      	movs	r3, #0
 800fca6:	e020      	b.n	800fcea <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 800fca8:	6839      	ldr	r1, [r7, #0]
 800fcaa:	6878      	ldr	r0, [r7, #4]
 800fcac:	f7ff ffc6 	bl	800fc3c <LinkedListGetPrevious>
 800fcb0:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	683a      	ldr	r2, [r7, #0]
 800fcb8:	429a      	cmp	r2, r3
 800fcba:	d103      	bne.n	800fcc4 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 800fcbc:	683b      	ldr	r3, [r7, #0]
 800fcbe:	681a      	ldr	r2, [r3, #0]
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	685b      	ldr	r3, [r3, #4]
 800fcc8:	683a      	ldr	r2, [r7, #0]
 800fcca:	429a      	cmp	r2, r3
 800fccc:	d102      	bne.n	800fcd4 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	68fa      	ldr	r2, [r7, #12]
 800fcd2:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d003      	beq.n	800fce2 <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 800fcda:	683b      	ldr	r3, [r7, #0]
 800fcdc:	681a      	ldr	r2, [r3, #0]
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 800fce2:	683b      	ldr	r3, [r7, #0]
 800fce4:	2200      	movs	r2, #0
 800fce6:	601a      	str	r2, [r3, #0]

    return true;
 800fce8:	2301      	movs	r3, #1
}
 800fcea:	4618      	mov	r0, r3
 800fcec:	3710      	adds	r7, #16
 800fcee:	46bd      	mov	sp, r7
 800fcf0:	bd80      	pop	{r7, pc}
	...

0800fcf4 <IsSticky>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 800fcf4:	b480      	push	{r7}
 800fcf6:	b083      	sub	sp, #12
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	4603      	mov	r3, r0
 800fcfc:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 800fcfe:	79fb      	ldrb	r3, [r7, #7]
 800fd00:	2b11      	cmp	r3, #17
 800fd02:	bf8c      	ite	hi
 800fd04:	2201      	movhi	r2, #1
 800fd06:	2200      	movls	r2, #0
 800fd08:	b2d2      	uxtb	r2, r2
 800fd0a:	2a00      	cmp	r2, #0
 800fd0c:	d10d      	bne.n	800fd2a <IsSticky+0x36>
 800fd0e:	4a0a      	ldr	r2, [pc, #40]	@ (800fd38 <IsSticky+0x44>)
 800fd10:	fa22 f303 	lsr.w	r3, r2, r3
 800fd14:	f003 0301 	and.w	r3, r3, #1
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	bf14      	ite	ne
 800fd1c:	2301      	movne	r3, #1
 800fd1e:	2300      	moveq	r3, #0
 800fd20:	b2db      	uxtb	r3, r3
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d001      	beq.n	800fd2a <IsSticky+0x36>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 800fd26:	2301      	movs	r3, #1
 800fd28:	e000      	b.n	800fd2c <IsSticky+0x38>
        default:
            return false;
 800fd2a:	2300      	movs	r3, #0
    }
}
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	370c      	adds	r7, #12
 800fd30:	46bd      	mov	sp, r7
 800fd32:	bc80      	pop	{r7}
 800fd34:	4770      	bx	lr
 800fd36:	bf00      	nop
 800fd38:	00020720 	.word	0x00020720

0800fd3c <IsConfirmationRequired>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsConfirmationRequired( uint8_t cid )
{
 800fd3c:	b480      	push	{r7}
 800fd3e:	b083      	sub	sp, #12
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	4603      	mov	r3, r0
 800fd44:	71fb      	strb	r3, [r7, #7]
        case MOTE_MAC_REKEY_IND:
        case MOTE_MAC_DEVICE_MODE_IND:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
 800fd46:	2300      	movs	r3, #0
    }
}
 800fd48:	4618      	mov	r0, r3
 800fd4a:	370c      	adds	r7, #12
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	bc80      	pop	{r7}
 800fd50:	4770      	bx	lr
	...

0800fd54 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 800fd54:	b580      	push	{r7, lr}
 800fd56:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 800fd58:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 800fd5c:	2100      	movs	r1, #0
 800fd5e:	4804      	ldr	r0, [pc, #16]	@ (800fd70 <LoRaMacCommandsInit+0x1c>)
 800fd60:	f007 f886 	bl	8016e70 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 800fd64:	4802      	ldr	r0, [pc, #8]	@ (800fd70 <LoRaMacCommandsInit+0x1c>)
 800fd66:	f7ff ff2c 	bl	800fbc2 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 800fd6a:	2300      	movs	r3, #0
}
 800fd6c:	4618      	mov	r0, r3
 800fd6e:	bd80      	pop	{r7, pc}
 800fd70:	20000fec 	.word	0x20000fec

0800fd74 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 800fd74:	b580      	push	{r7, lr}
 800fd76:	b086      	sub	sp, #24
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	60b9      	str	r1, [r7, #8]
 800fd7e:	607a      	str	r2, [r7, #4]
 800fd80:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 800fd82:	68bb      	ldr	r3, [r7, #8]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d101      	bne.n	800fd8c <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800fd88:	2301      	movs	r3, #1
 800fd8a:	e03b      	b.n	800fe04 <LoRaMacCommandsAddCmd+0x90>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 800fd8c:	f7ff fede 	bl	800fb4c <MallocNewMacCommandSlot>
 800fd90:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 800fd92:	697b      	ldr	r3, [r7, #20]
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d101      	bne.n	800fd9c <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800fd98:	2302      	movs	r3, #2
 800fd9a:	e033      	b.n	800fe04 <LoRaMacCommandsAddCmd+0x90>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 800fd9c:	6979      	ldr	r1, [r7, #20]
 800fd9e:	481b      	ldr	r0, [pc, #108]	@ (800fe0c <LoRaMacCommandsAddCmd+0x98>)
 800fda0:	f7ff ff24 	bl	800fbec <LinkedListAdd>
 800fda4:	4603      	mov	r3, r0
 800fda6:	f083 0301 	eor.w	r3, r3, #1
 800fdaa:	b2db      	uxtb	r3, r3
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d001      	beq.n	800fdb4 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 800fdb0:	2305      	movs	r3, #5
 800fdb2:	e027      	b.n	800fe04 <LoRaMacCommandsAddCmd+0x90>
    }

    // Set Values
    newCmd->CID = cid;
 800fdb4:	697b      	ldr	r3, [r7, #20]
 800fdb6:	7bfa      	ldrb	r2, [r7, #15]
 800fdb8:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 800fdba:	697b      	ldr	r3, [r7, #20]
 800fdbc:	687a      	ldr	r2, [r7, #4]
 800fdbe:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800fdc0:	697b      	ldr	r3, [r7, #20]
 800fdc2:	3305      	adds	r3, #5
 800fdc4:	687a      	ldr	r2, [r7, #4]
 800fdc6:	b292      	uxth	r2, r2
 800fdc8:	68b9      	ldr	r1, [r7, #8]
 800fdca:	4618      	mov	r0, r3
 800fdcc:	f007 f815 	bl	8016dfa <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 800fdd0:	7bfb      	ldrb	r3, [r7, #15]
 800fdd2:	4618      	mov	r0, r3
 800fdd4:	f7ff ff8e 	bl	800fcf4 <IsSticky>
 800fdd8:	4603      	mov	r3, r0
 800fdda:	461a      	mov	r2, r3
 800fddc:	697b      	ldr	r3, [r7, #20]
 800fdde:	731a      	strb	r2, [r3, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 800fde0:	7bfb      	ldrb	r3, [r7, #15]
 800fde2:	4618      	mov	r0, r3
 800fde4:	f7ff ffaa 	bl	800fd3c <IsConfirmationRequired>
 800fde8:	4603      	mov	r3, r0
 800fdea:	461a      	mov	r2, r3
 800fdec:	697b      	ldr	r3, [r7, #20]
 800fdee:	735a      	strb	r2, [r3, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800fdf0:	4b06      	ldr	r3, [pc, #24]	@ (800fe0c <LoRaMacCommandsAddCmd+0x98>)
 800fdf2:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	4413      	add	r3, r2
 800fdfa:	3301      	adds	r3, #1
 800fdfc:	4a03      	ldr	r2, [pc, #12]	@ (800fe0c <LoRaMacCommandsAddCmd+0x98>)
 800fdfe:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 800fe02:	2300      	movs	r3, #0
}
 800fe04:	4618      	mov	r0, r3
 800fe06:	3718      	adds	r7, #24
 800fe08:	46bd      	mov	sp, r7
 800fe0a:	bd80      	pop	{r7, pc}
 800fe0c:	20000fec 	.word	0x20000fec

0800fe10 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 800fe10:	b580      	push	{r7, lr}
 800fe12:	b082      	sub	sp, #8
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d101      	bne.n	800fe22 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800fe1e:	2301      	movs	r3, #1
 800fe20:	e021      	b.n	800fe66 <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 800fe22:	6879      	ldr	r1, [r7, #4]
 800fe24:	4812      	ldr	r0, [pc, #72]	@ (800fe70 <LoRaMacCommandsRemoveCmd+0x60>)
 800fe26:	f7ff ff32 	bl	800fc8e <LinkedListRemove>
 800fe2a:	4603      	mov	r3, r0
 800fe2c:	f083 0301 	eor.w	r3, r3, #1
 800fe30:	b2db      	uxtb	r3, r3
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d001      	beq.n	800fe3a <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800fe36:	2303      	movs	r3, #3
 800fe38:	e015      	b.n	800fe66 <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800fe3a:	4b0d      	ldr	r3, [pc, #52]	@ (800fe70 <LoRaMacCommandsRemoveCmd+0x60>)
 800fe3c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	689b      	ldr	r3, [r3, #8]
 800fe44:	1ad3      	subs	r3, r2, r3
 800fe46:	3b01      	subs	r3, #1
 800fe48:	4a09      	ldr	r2, [pc, #36]	@ (800fe70 <LoRaMacCommandsRemoveCmd+0x60>)
 800fe4a:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 800fe4e:	6878      	ldr	r0, [r7, #4]
 800fe50:	f7ff fea4 	bl	800fb9c <FreeMacCommandSlot>
 800fe54:	4603      	mov	r3, r0
 800fe56:	f083 0301 	eor.w	r3, r3, #1
 800fe5a:	b2db      	uxtb	r3, r3
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d001      	beq.n	800fe64 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 800fe60:	2305      	movs	r3, #5
 800fe62:	e000      	b.n	800fe66 <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800fe64:	2300      	movs	r3, #0
}
 800fe66:	4618      	mov	r0, r3
 800fe68:	3708      	adds	r7, #8
 800fe6a:	46bd      	mov	sp, r7
 800fe6c:	bd80      	pop	{r7, pc}
 800fe6e:	bf00      	nop
 800fe70:	20000fec 	.word	0x20000fec

0800fe74 <LoRaMacCommandsGetCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
 800fe74:	b480      	push	{r7}
 800fe76:	b085      	sub	sp, #20
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	4603      	mov	r3, r0
 800fe7c:	6039      	str	r1, [r7, #0]
 800fe7e:	71fb      	strb	r3, [r7, #7]
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800fe80:	4b0e      	ldr	r3, [pc, #56]	@ (800febc <LoRaMacCommandsGetCmd+0x48>)
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	60fb      	str	r3, [r7, #12]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 800fe86:	e002      	b.n	800fe8e <LoRaMacCommandsGetCmd+0x1a>
    {
        curElement = curElement->Next;
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	60fb      	str	r3, [r7, #12]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d004      	beq.n	800fe9e <LoRaMacCommandsGetCmd+0x2a>
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	791b      	ldrb	r3, [r3, #4]
 800fe98:	79fa      	ldrb	r2, [r7, #7]
 800fe9a:	429a      	cmp	r2, r3
 800fe9c:	d1f4      	bne.n	800fe88 <LoRaMacCommandsGetCmd+0x14>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 800fe9e:	683b      	ldr	r3, [r7, #0]
 800fea0:	68fa      	ldr	r2, [r7, #12]
 800fea2:	601a      	str	r2, [r3, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d101      	bne.n	800feae <LoRaMacCommandsGetCmd+0x3a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800feaa:	2303      	movs	r3, #3
 800feac:	e000      	b.n	800feb0 <LoRaMacCommandsGetCmd+0x3c>
    }
    return LORAMAC_COMMANDS_SUCCESS;
 800feae:	2300      	movs	r3, #0
}
 800feb0:	4618      	mov	r0, r3
 800feb2:	3714      	adds	r7, #20
 800feb4:	46bd      	mov	sp, r7
 800feb6:	bc80      	pop	{r7}
 800feb8:	4770      	bx	lr
 800feba:	bf00      	nop
 800febc:	20000fec 	.word	0x20000fec

0800fec0 <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 800fec0:	b580      	push	{r7, lr}
 800fec2:	b082      	sub	sp, #8
 800fec4:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800fec6:	4b0f      	ldr	r3, [pc, #60]	@ (800ff04 <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 800fecc:	e012      	b.n	800fef4 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	7b1b      	ldrb	r3, [r3, #12]
 800fed2:	f083 0301 	eor.w	r3, r3, #1
 800fed6:	b2db      	uxtb	r3, r3
 800fed8:	2b00      	cmp	r3, #0
 800feda:	d008      	beq.n	800feee <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 800fee2:	6878      	ldr	r0, [r7, #4]
 800fee4:	f7ff ff94 	bl	800fe10 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 800fee8:	683b      	ldr	r3, [r7, #0]
 800feea:	607b      	str	r3, [r7, #4]
 800feec:	e002      	b.n	800fef4 <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d1e9      	bne.n	800fece <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800fefa:	2300      	movs	r3, #0
}
 800fefc:	4618      	mov	r0, r3
 800fefe:	3708      	adds	r7, #8
 800ff00:	46bd      	mov	sp, r7
 800ff02:	bd80      	pop	{r7, pc}
 800ff04:	20000fec 	.word	0x20000fec

0800ff08 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	b082      	sub	sp, #8
 800ff0c:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800ff0e:	4b13      	ldr	r3, [pc, #76]	@ (800ff5c <LoRaMacCommandsRemoveStickyAnsCmds+0x54>)
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 800ff14:	e01a      	b.n	800ff4c <LoRaMacCommandsRemoveStickyAnsCmds+0x44>
    {
        nexElement = curElement->Next;
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	603b      	str	r3, [r7, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	791b      	ldrb	r3, [r3, #4]
 800ff20:	4618      	mov	r0, r3
 800ff22:	f7ff fee7 	bl	800fcf4 <IsSticky>
 800ff26:	4603      	mov	r3, r0
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d00d      	beq.n	800ff48 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	791b      	ldrb	r3, [r3, #4]
 800ff30:	4618      	mov	r0, r3
 800ff32:	f7ff ff03 	bl	800fd3c <IsConfirmationRequired>
 800ff36:	4603      	mov	r3, r0
 800ff38:	f083 0301 	eor.w	r3, r3, #1
 800ff3c:	b2db      	uxtb	r3, r3
        if( ( IsSticky( curElement->CID ) == true ) &&
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d002      	beq.n	800ff48 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 800ff42:	6878      	ldr	r0, [r7, #4]
 800ff44:	f7ff ff64 	bl	800fe10 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 800ff48:	683b      	ldr	r3, [r7, #0]
 800ff4a:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d1e1      	bne.n	800ff16 <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800ff52:	2300      	movs	r3, #0
}
 800ff54:	4618      	mov	r0, r3
 800ff56:	3708      	adds	r7, #8
 800ff58:	46bd      	mov	sp, r7
 800ff5a:	bd80      	pop	{r7, pc}
 800ff5c:	20000fec 	.word	0x20000fec

0800ff60 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 800ff60:	b480      	push	{r7}
 800ff62:	b083      	sub	sp, #12
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d101      	bne.n	800ff72 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800ff6e:	2301      	movs	r3, #1
 800ff70:	e005      	b.n	800ff7e <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 800ff72:	4b05      	ldr	r3, [pc, #20]	@ (800ff88 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 800ff74:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800ff7c:	2300      	movs	r3, #0
}
 800ff7e:	4618      	mov	r0, r3
 800ff80:	370c      	adds	r7, #12
 800ff82:	46bd      	mov	sp, r7
 800ff84:	bc80      	pop	{r7}
 800ff86:	4770      	bx	lr
 800ff88:	20000fec 	.word	0x20000fec

0800ff8c <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800ff8c:	b580      	push	{r7, lr}
 800ff8e:	b088      	sub	sp, #32
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	60f8      	str	r0, [r7, #12]
 800ff94:	60b9      	str	r1, [r7, #8]
 800ff96:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800ff98:	4b25      	ldr	r3, [pc, #148]	@ (8010030 <LoRaMacCommandsSerializeCmds+0xa4>)
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 800ff9e:	2300      	movs	r3, #0
 800ffa0:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d002      	beq.n	800ffae <LoRaMacCommandsSerializeCmds+0x22>
 800ffa8:	68bb      	ldr	r3, [r7, #8]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d126      	bne.n	800fffc <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800ffae:	2301      	movs	r3, #1
 800ffb0:	e039      	b.n	8010026 <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800ffb2:	7efb      	ldrb	r3, [r7, #27]
 800ffb4:	68fa      	ldr	r2, [r7, #12]
 800ffb6:	1ad2      	subs	r2, r2, r3
 800ffb8:	69fb      	ldr	r3, [r7, #28]
 800ffba:	689b      	ldr	r3, [r3, #8]
 800ffbc:	3301      	adds	r3, #1
 800ffbe:	429a      	cmp	r2, r3
 800ffc0:	d320      	bcc.n	8010004 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 800ffc2:	7efb      	ldrb	r3, [r7, #27]
 800ffc4:	1c5a      	adds	r2, r3, #1
 800ffc6:	76fa      	strb	r2, [r7, #27]
 800ffc8:	461a      	mov	r2, r3
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	4413      	add	r3, r2
 800ffce:	69fa      	ldr	r2, [r7, #28]
 800ffd0:	7912      	ldrb	r2, [r2, #4]
 800ffd2:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800ffd4:	7efb      	ldrb	r3, [r7, #27]
 800ffd6:	687a      	ldr	r2, [r7, #4]
 800ffd8:	18d0      	adds	r0, r2, r3
 800ffda:	69fb      	ldr	r3, [r7, #28]
 800ffdc:	1d59      	adds	r1, r3, #5
 800ffde:	69fb      	ldr	r3, [r7, #28]
 800ffe0:	689b      	ldr	r3, [r3, #8]
 800ffe2:	b29b      	uxth	r3, r3
 800ffe4:	461a      	mov	r2, r3
 800ffe6:	f006 ff08 	bl	8016dfa <memcpy1>
            itr += curElement->PayloadSize;
 800ffea:	69fb      	ldr	r3, [r7, #28]
 800ffec:	689b      	ldr	r3, [r3, #8]
 800ffee:	b2da      	uxtb	r2, r3
 800fff0:	7efb      	ldrb	r3, [r7, #27]
 800fff2:	4413      	add	r3, r2
 800fff4:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 800fff6:	69fb      	ldr	r3, [r7, #28]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 800fffc:	69fb      	ldr	r3, [r7, #28]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d1d7      	bne.n	800ffb2 <LoRaMacCommandsSerializeCmds+0x26>
 8010002:	e009      	b.n	8010018 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8010004:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8010006:	e007      	b.n	8010018 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8010008:	69fb      	ldr	r3, [r7, #28]
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 801000e:	69f8      	ldr	r0, [r7, #28]
 8010010:	f7ff fefe 	bl	800fe10 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8010014:	697b      	ldr	r3, [r7, #20]
 8010016:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8010018:	69fb      	ldr	r3, [r7, #28]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d1f4      	bne.n	8010008 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 801001e:	68b8      	ldr	r0, [r7, #8]
 8010020:	f7ff ff9e 	bl	800ff60 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8010024:	2300      	movs	r3, #0
}
 8010026:	4618      	mov	r0, r3
 8010028:	3720      	adds	r7, #32
 801002a:	46bd      	mov	sp, r7
 801002c:	bd80      	pop	{r7, pc}
 801002e:	bf00      	nop
 8010030:	20000fec 	.word	0x20000fec

08010034 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8010034:	b480      	push	{r7}
 8010036:	b085      	sub	sp, #20
 8010038:	af00      	add	r7, sp, #0
 801003a:	4603      	mov	r3, r0
 801003c:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 801003e:	2300      	movs	r3, #0
 8010040:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8010042:	79fb      	ldrb	r3, [r7, #7]
 8010044:	3b02      	subs	r3, #2
 8010046:	2b11      	cmp	r3, #17
 8010048:	d850      	bhi.n	80100ec <LoRaMacCommandsGetCmdSize+0xb8>
 801004a:	a201      	add	r2, pc, #4	@ (adr r2, 8010050 <LoRaMacCommandsGetCmdSize+0x1c>)
 801004c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010050:	08010099 	.word	0x08010099
 8010054:	0801009f 	.word	0x0801009f
 8010058:	080100a5 	.word	0x080100a5
 801005c:	080100ab 	.word	0x080100ab
 8010060:	080100b1 	.word	0x080100b1
 8010064:	080100b7 	.word	0x080100b7
 8010068:	080100bd 	.word	0x080100bd
 801006c:	080100c3 	.word	0x080100c3
 8010070:	080100c9 	.word	0x080100c9
 8010074:	080100ed 	.word	0x080100ed
 8010078:	080100ed 	.word	0x080100ed
 801007c:	080100cf 	.word	0x080100cf
 8010080:	080100ed 	.word	0x080100ed
 8010084:	080100ed 	.word	0x080100ed
 8010088:	080100d5 	.word	0x080100d5
 801008c:	080100db 	.word	0x080100db
 8010090:	080100e1 	.word	0x080100e1
 8010094:	080100e7 	.word	0x080100e7
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8010098:	2303      	movs	r3, #3
 801009a:	73fb      	strb	r3, [r7, #15]
            break;
 801009c:	e027      	b.n	80100ee <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 801009e:	2305      	movs	r3, #5
 80100a0:	73fb      	strb	r3, [r7, #15]
            break;
 80100a2:	e024      	b.n	80100ee <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 80100a4:	2302      	movs	r3, #2
 80100a6:	73fb      	strb	r3, [r7, #15]
            break;
 80100a8:	e021      	b.n	80100ee <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 80100aa:	2305      	movs	r3, #5
 80100ac:	73fb      	strb	r3, [r7, #15]
            break;
 80100ae:	e01e      	b.n	80100ee <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 80100b0:	2301      	movs	r3, #1
 80100b2:	73fb      	strb	r3, [r7, #15]
            break;
 80100b4:	e01b      	b.n	80100ee <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 80100b6:	2306      	movs	r3, #6
 80100b8:	73fb      	strb	r3, [r7, #15]
            break;
 80100ba:	e018      	b.n	80100ee <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 80100bc:	2302      	movs	r3, #2
 80100be:	73fb      	strb	r3, [r7, #15]
            break;
 80100c0:	e015      	b.n	80100ee <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 80100c2:	2302      	movs	r3, #2
 80100c4:	73fb      	strb	r3, [r7, #15]
            break;
 80100c6:	e012      	b.n	80100ee <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 80100c8:	2305      	movs	r3, #5
 80100ca:	73fb      	strb	r3, [r7, #15]
            break;
 80100cc:	e00f      	b.n	80100ee <LoRaMacCommandsGetCmdSize+0xba>
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 80100ce:	2306      	movs	r3, #6
 80100d0:	73fb      	strb	r3, [r7, #15]
            break;
 80100d2:	e00c      	b.n	80100ee <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 80100d4:	2301      	movs	r3, #1
 80100d6:	73fb      	strb	r3, [r7, #15]
            break;
 80100d8:	e009      	b.n	80100ee <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 80100da:	2305      	movs	r3, #5
 80100dc:	73fb      	strb	r3, [r7, #15]
            break;
 80100de:	e006      	b.n	80100ee <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 80100e0:	2304      	movs	r3, #4
 80100e2:	73fb      	strb	r3, [r7, #15]
            break;
 80100e4:	e003      	b.n	80100ee <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 80100e6:	2304      	movs	r3, #4
 80100e8:	73fb      	strb	r3, [r7, #15]
            break;
 80100ea:	e000      	b.n	80100ee <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 80100ec:	bf00      	nop
        }
    }
    return cidSize;
 80100ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80100f0:	4618      	mov	r0, r3
 80100f2:	3714      	adds	r7, #20
 80100f4:	46bd      	mov	sp, r7
 80100f6:	bc80      	pop	{r7}
 80100f8:	4770      	bx	lr
 80100fa:	bf00      	nop

080100fc <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 80100fc:	b480      	push	{r7}
 80100fe:	b083      	sub	sp, #12
 8010100:	af00      	add	r7, sp, #0
 8010102:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	4a07      	ldr	r2, [pc, #28]	@ (8010124 <IncreaseBufferPointer+0x28>)
 8010108:	4293      	cmp	r3, r2
 801010a:	d102      	bne.n	8010112 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 801010c:	4b06      	ldr	r3, [pc, #24]	@ (8010128 <IncreaseBufferPointer+0x2c>)
 801010e:	607b      	str	r3, [r7, #4]
 8010110:	e002      	b.n	8010118 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	3304      	adds	r3, #4
 8010116:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8010118:	687b      	ldr	r3, [r7, #4]
}
 801011a:	4618      	mov	r0, r3
 801011c:	370c      	adds	r7, #12
 801011e:	46bd      	mov	sp, r7
 8010120:	bc80      	pop	{r7}
 8010122:	4770      	bx	lr
 8010124:	20001214 	.word	0x20001214
 8010128:	20001204 	.word	0x20001204

0801012c <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 801012c:	b480      	push	{r7}
 801012e:	b083      	sub	sp, #12
 8010130:	af00      	add	r7, sp, #0
 8010132:	4603      	mov	r3, r0
 8010134:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8010136:	79fb      	ldrb	r3, [r7, #7]
 8010138:	2b00      	cmp	r3, #0
 801013a:	d101      	bne.n	8010140 <IsListEmpty+0x14>
    {
        return true;
 801013c:	2301      	movs	r3, #1
 801013e:	e000      	b.n	8010142 <IsListEmpty+0x16>
    }
    return false;
 8010140:	2300      	movs	r3, #0
}
 8010142:	4618      	mov	r0, r3
 8010144:	370c      	adds	r7, #12
 8010146:	46bd      	mov	sp, r7
 8010148:	bc80      	pop	{r7}
 801014a:	4770      	bx	lr

0801014c <IsListFull>:

static bool IsListFull( uint8_t count )
{
 801014c:	b480      	push	{r7}
 801014e:	b083      	sub	sp, #12
 8010150:	af00      	add	r7, sp, #0
 8010152:	4603      	mov	r3, r0
 8010154:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8010156:	79fb      	ldrb	r3, [r7, #7]
 8010158:	2b04      	cmp	r3, #4
 801015a:	d901      	bls.n	8010160 <IsListFull+0x14>
    {
        return true;
 801015c:	2301      	movs	r3, #1
 801015e:	e000      	b.n	8010162 <IsListFull+0x16>
    }
    return false;
 8010160:	2300      	movs	r3, #0
}
 8010162:	4618      	mov	r0, r3
 8010164:	370c      	adds	r7, #12
 8010166:	46bd      	mov	sp, r7
 8010168:	bc80      	pop	{r7}
 801016a:	4770      	bx	lr

0801016c <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 801016c:	b580      	push	{r7, lr}
 801016e:	b086      	sub	sp, #24
 8010170:	af00      	add	r7, sp, #0
 8010172:	4603      	mov	r3, r0
 8010174:	60b9      	str	r1, [r7, #8]
 8010176:	607a      	str	r2, [r7, #4]
 8010178:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 801017a:	68bb      	ldr	r3, [r7, #8]
 801017c:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801017e:	4b13      	ldr	r3, [pc, #76]	@ (80101cc <GetElement+0x60>)
 8010180:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010184:	4618      	mov	r0, r3
 8010186:	f7ff ffd1 	bl	801012c <IsListEmpty>
 801018a:	4603      	mov	r3, r0
 801018c:	2b00      	cmp	r3, #0
 801018e:	d001      	beq.n	8010194 <GetElement+0x28>
    {
        return NULL;
 8010190:	2300      	movs	r3, #0
 8010192:	e017      	b.n	80101c4 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8010194:	2300      	movs	r3, #0
 8010196:	74fb      	strb	r3, [r7, #19]
 8010198:	e00d      	b.n	80101b6 <GetElement+0x4a>
    {
        if( element->Request == request )
 801019a:	697b      	ldr	r3, [r7, #20]
 801019c:	781b      	ldrb	r3, [r3, #0]
 801019e:	7bfa      	ldrb	r2, [r7, #15]
 80101a0:	429a      	cmp	r2, r3
 80101a2:	d101      	bne.n	80101a8 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 80101a4:	697b      	ldr	r3, [r7, #20]
 80101a6:	e00d      	b.n	80101c4 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 80101a8:	6978      	ldr	r0, [r7, #20]
 80101aa:	f7ff ffa7 	bl	80100fc <IncreaseBufferPointer>
 80101ae:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 80101b0:	7cfb      	ldrb	r3, [r7, #19]
 80101b2:	3301      	adds	r3, #1
 80101b4:	74fb      	strb	r3, [r7, #19]
 80101b6:	4b05      	ldr	r3, [pc, #20]	@ (80101cc <GetElement+0x60>)
 80101b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80101bc:	7cfa      	ldrb	r2, [r7, #19]
 80101be:	429a      	cmp	r2, r3
 80101c0:	d3eb      	bcc.n	801019a <GetElement+0x2e>
    }

    return NULL;
 80101c2:	2300      	movs	r3, #0
}
 80101c4:	4618      	mov	r0, r3
 80101c6:	3718      	adds	r7, #24
 80101c8:	46bd      	mov	sp, r7
 80101ca:	bd80      	pop	{r7, pc}
 80101cc:	200011f8 	.word	0x200011f8

080101d0 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 80101d0:	b580      	push	{r7, lr}
 80101d2:	b082      	sub	sp, #8
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 80101d8:	4a0c      	ldr	r2, [pc, #48]	@ (801020c <LoRaMacConfirmQueueInit+0x3c>)
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 80101de:	4b0b      	ldr	r3, [pc, #44]	@ (801020c <LoRaMacConfirmQueueInit+0x3c>)
 80101e0:	2200      	movs	r2, #0
 80101e2:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80101e6:	4b09      	ldr	r3, [pc, #36]	@ (801020c <LoRaMacConfirmQueueInit+0x3c>)
 80101e8:	4a09      	ldr	r2, [pc, #36]	@ (8010210 <LoRaMacConfirmQueueInit+0x40>)
 80101ea:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 80101ec:	4b07      	ldr	r3, [pc, #28]	@ (801020c <LoRaMacConfirmQueueInit+0x3c>)
 80101ee:	4a08      	ldr	r2, [pc, #32]	@ (8010210 <LoRaMacConfirmQueueInit+0x40>)
 80101f0:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 80101f2:	2214      	movs	r2, #20
 80101f4:	21ff      	movs	r1, #255	@ 0xff
 80101f6:	4806      	ldr	r0, [pc, #24]	@ (8010210 <LoRaMacConfirmQueueInit+0x40>)
 80101f8:	f006 fe3a 	bl	8016e70 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80101fc:	4b03      	ldr	r3, [pc, #12]	@ (801020c <LoRaMacConfirmQueueInit+0x3c>)
 80101fe:	2201      	movs	r2, #1
 8010200:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 8010204:	bf00      	nop
 8010206:	3708      	adds	r7, #8
 8010208:	46bd      	mov	sp, r7
 801020a:	bd80      	pop	{r7, pc}
 801020c:	200011f8 	.word	0x200011f8
 8010210:	20001204 	.word	0x20001204

08010214 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8010214:	b580      	push	{r7, lr}
 8010216:	b082      	sub	sp, #8
 8010218:	af00      	add	r7, sp, #0
 801021a:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801021c:	4b19      	ldr	r3, [pc, #100]	@ (8010284 <LoRaMacConfirmQueueAdd+0x70>)
 801021e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010222:	4618      	mov	r0, r3
 8010224:	f7ff ff92 	bl	801014c <IsListFull>
 8010228:	4603      	mov	r3, r0
 801022a:	2b00      	cmp	r3, #0
 801022c:	d001      	beq.n	8010232 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 801022e:	2300      	movs	r3, #0
 8010230:	e024      	b.n	801027c <LoRaMacConfirmQueueAdd+0x68>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8010232:	4b14      	ldr	r3, [pc, #80]	@ (8010284 <LoRaMacConfirmQueueAdd+0x70>)
 8010234:	689b      	ldr	r3, [r3, #8]
 8010236:	687a      	ldr	r2, [r7, #4]
 8010238:	7812      	ldrb	r2, [r2, #0]
 801023a:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 801023c:	4b11      	ldr	r3, [pc, #68]	@ (8010284 <LoRaMacConfirmQueueAdd+0x70>)
 801023e:	689b      	ldr	r3, [r3, #8]
 8010240:	687a      	ldr	r2, [r7, #4]
 8010242:	7852      	ldrb	r2, [r2, #1]
 8010244:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8010246:	4b0f      	ldr	r3, [pc, #60]	@ (8010284 <LoRaMacConfirmQueueAdd+0x70>)
 8010248:	689b      	ldr	r3, [r3, #8]
 801024a:	687a      	ldr	r2, [r7, #4]
 801024c:	78d2      	ldrb	r2, [r2, #3]
 801024e:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 8010250:	4b0c      	ldr	r3, [pc, #48]	@ (8010284 <LoRaMacConfirmQueueAdd+0x70>)
 8010252:	689b      	ldr	r3, [r3, #8]
 8010254:	687a      	ldr	r2, [r7, #4]
 8010256:	7892      	ldrb	r2, [r2, #2]
 8010258:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 801025a:	4b0a      	ldr	r3, [pc, #40]	@ (8010284 <LoRaMacConfirmQueueAdd+0x70>)
 801025c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010260:	3301      	adds	r3, #1
 8010262:	b2da      	uxtb	r2, r3
 8010264:	4b07      	ldr	r3, [pc, #28]	@ (8010284 <LoRaMacConfirmQueueAdd+0x70>)
 8010266:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 801026a:	4b06      	ldr	r3, [pc, #24]	@ (8010284 <LoRaMacConfirmQueueAdd+0x70>)
 801026c:	689b      	ldr	r3, [r3, #8]
 801026e:	4618      	mov	r0, r3
 8010270:	f7ff ff44 	bl	80100fc <IncreaseBufferPointer>
 8010274:	4603      	mov	r3, r0
 8010276:	4a03      	ldr	r2, [pc, #12]	@ (8010284 <LoRaMacConfirmQueueAdd+0x70>)
 8010278:	6093      	str	r3, [r2, #8]

    return true;
 801027a:	2301      	movs	r3, #1
}
 801027c:	4618      	mov	r0, r3
 801027e:	3708      	adds	r7, #8
 8010280:	46bd      	mov	sp, r7
 8010282:	bd80      	pop	{r7, pc}
 8010284:	200011f8 	.word	0x200011f8

08010288 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8010288:	b580      	push	{r7, lr}
 801028a:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801028c:	4b0e      	ldr	r3, [pc, #56]	@ (80102c8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 801028e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010292:	4618      	mov	r0, r3
 8010294:	f7ff ff4a 	bl	801012c <IsListEmpty>
 8010298:	4603      	mov	r3, r0
 801029a:	2b00      	cmp	r3, #0
 801029c:	d001      	beq.n	80102a2 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 801029e:	2300      	movs	r3, #0
 80102a0:	e010      	b.n	80102c4 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 80102a2:	4b09      	ldr	r3, [pc, #36]	@ (80102c8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80102a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80102a8:	3b01      	subs	r3, #1
 80102aa:	b2da      	uxtb	r2, r3
 80102ac:	4b06      	ldr	r3, [pc, #24]	@ (80102c8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80102ae:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 80102b2:	4b05      	ldr	r3, [pc, #20]	@ (80102c8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80102b4:	685b      	ldr	r3, [r3, #4]
 80102b6:	4618      	mov	r0, r3
 80102b8:	f7ff ff20 	bl	80100fc <IncreaseBufferPointer>
 80102bc:	4603      	mov	r3, r0
 80102be:	4a02      	ldr	r2, [pc, #8]	@ (80102c8 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 80102c0:	6053      	str	r3, [r2, #4]

    return true;
 80102c2:	2301      	movs	r3, #1
}
 80102c4:	4618      	mov	r0, r3
 80102c6:	bd80      	pop	{r7, pc}
 80102c8:	200011f8 	.word	0x200011f8

080102cc <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 80102cc:	b580      	push	{r7, lr}
 80102ce:	b084      	sub	sp, #16
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	4603      	mov	r3, r0
 80102d4:	460a      	mov	r2, r1
 80102d6:	71fb      	strb	r3, [r7, #7]
 80102d8:	4613      	mov	r3, r2
 80102da:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 80102dc:	2300      	movs	r3, #0
 80102de:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80102e0:	4b10      	ldr	r3, [pc, #64]	@ (8010324 <LoRaMacConfirmQueueSetStatus+0x58>)
 80102e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80102e6:	4618      	mov	r0, r3
 80102e8:	f7ff ff20 	bl	801012c <IsListEmpty>
 80102ec:	4603      	mov	r3, r0
 80102ee:	f083 0301 	eor.w	r3, r3, #1
 80102f2:	b2db      	uxtb	r3, r3
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d011      	beq.n	801031c <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80102f8:	4b0a      	ldr	r3, [pc, #40]	@ (8010324 <LoRaMacConfirmQueueSetStatus+0x58>)
 80102fa:	6859      	ldr	r1, [r3, #4]
 80102fc:	4b09      	ldr	r3, [pc, #36]	@ (8010324 <LoRaMacConfirmQueueSetStatus+0x58>)
 80102fe:	689a      	ldr	r2, [r3, #8]
 8010300:	79bb      	ldrb	r3, [r7, #6]
 8010302:	4618      	mov	r0, r3
 8010304:	f7ff ff32 	bl	801016c <GetElement>
 8010308:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	2b00      	cmp	r3, #0
 801030e:	d005      	beq.n	801031c <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	79fa      	ldrb	r2, [r7, #7]
 8010314:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	2201      	movs	r2, #1
 801031a:	709a      	strb	r2, [r3, #2]
        }
    }
}
 801031c:	bf00      	nop
 801031e:	3710      	adds	r7, #16
 8010320:	46bd      	mov	sp, r7
 8010322:	bd80      	pop	{r7, pc}
 8010324:	200011f8 	.word	0x200011f8

08010328 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8010328:	b580      	push	{r7, lr}
 801032a:	b084      	sub	sp, #16
 801032c:	af00      	add	r7, sp, #0
 801032e:	4603      	mov	r3, r0
 8010330:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8010332:	2300      	movs	r3, #0
 8010334:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8010336:	4b10      	ldr	r3, [pc, #64]	@ (8010378 <LoRaMacConfirmQueueGetStatus+0x50>)
 8010338:	f893 3020 	ldrb.w	r3, [r3, #32]
 801033c:	4618      	mov	r0, r3
 801033e:	f7ff fef5 	bl	801012c <IsListEmpty>
 8010342:	4603      	mov	r3, r0
 8010344:	f083 0301 	eor.w	r3, r3, #1
 8010348:	b2db      	uxtb	r3, r3
 801034a:	2b00      	cmp	r3, #0
 801034c:	d00e      	beq.n	801036c <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 801034e:	4b0a      	ldr	r3, [pc, #40]	@ (8010378 <LoRaMacConfirmQueueGetStatus+0x50>)
 8010350:	6859      	ldr	r1, [r3, #4]
 8010352:	4b09      	ldr	r3, [pc, #36]	@ (8010378 <LoRaMacConfirmQueueGetStatus+0x50>)
 8010354:	689a      	ldr	r2, [r3, #8]
 8010356:	79fb      	ldrb	r3, [r7, #7]
 8010358:	4618      	mov	r0, r3
 801035a:	f7ff ff07 	bl	801016c <GetElement>
 801035e:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d002      	beq.n	801036c <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	785b      	ldrb	r3, [r3, #1]
 801036a:	e000      	b.n	801036e <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 801036c:	2301      	movs	r3, #1
}
 801036e:	4618      	mov	r0, r3
 8010370:	3710      	adds	r7, #16
 8010372:	46bd      	mov	sp, r7
 8010374:	bd80      	pop	{r7, pc}
 8010376:	bf00      	nop
 8010378:	200011f8 	.word	0x200011f8

0801037c <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 801037c:	b580      	push	{r7, lr}
 801037e:	b084      	sub	sp, #16
 8010380:	af00      	add	r7, sp, #0
 8010382:	4603      	mov	r3, r0
 8010384:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 8010386:	4b16      	ldr	r3, [pc, #88]	@ (80103e0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8010388:	685b      	ldr	r3, [r3, #4]
 801038a:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 801038c:	4a14      	ldr	r2, [pc, #80]	@ (80103e0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801038e:	79fb      	ldrb	r3, [r7, #7]
 8010390:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8010394:	4b12      	ldr	r3, [pc, #72]	@ (80103e0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8010396:	f893 3020 	ldrb.w	r3, [r3, #32]
 801039a:	4618      	mov	r0, r3
 801039c:	f7ff fec6 	bl	801012c <IsListEmpty>
 80103a0:	4603      	mov	r3, r0
 80103a2:	f083 0301 	eor.w	r3, r3, #1
 80103a6:	b2db      	uxtb	r3, r3
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d015      	beq.n	80103d8 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	79fa      	ldrb	r2, [r7, #7]
 80103b0:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	78db      	ldrb	r3, [r3, #3]
 80103b6:	f083 0301 	eor.w	r3, r3, #1
 80103ba:	b2db      	uxtb	r3, r3
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d002      	beq.n	80103c6 <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	2201      	movs	r2, #1
 80103c4:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 80103c6:	68f8      	ldr	r0, [r7, #12]
 80103c8:	f7ff fe98 	bl	80100fc <IncreaseBufferPointer>
 80103cc:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 80103ce:	4b04      	ldr	r3, [pc, #16]	@ (80103e0 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 80103d0:	689b      	ldr	r3, [r3, #8]
 80103d2:	68fa      	ldr	r2, [r7, #12]
 80103d4:	429a      	cmp	r2, r3
 80103d6:	d1e9      	bne.n	80103ac <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 80103d8:	bf00      	nop
 80103da:	3710      	adds	r7, #16
 80103dc:	46bd      	mov	sp, r7
 80103de:	bd80      	pop	{r7, pc}
 80103e0:	200011f8 	.word	0x200011f8

080103e4 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 80103e4:	b580      	push	{r7, lr}
 80103e6:	b082      	sub	sp, #8
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	4603      	mov	r3, r0
 80103ec:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 80103ee:	4b09      	ldr	r3, [pc, #36]	@ (8010414 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80103f0:	6859      	ldr	r1, [r3, #4]
 80103f2:	4b08      	ldr	r3, [pc, #32]	@ (8010414 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 80103f4:	689a      	ldr	r2, [r3, #8]
 80103f6:	79fb      	ldrb	r3, [r7, #7]
 80103f8:	4618      	mov	r0, r3
 80103fa:	f7ff feb7 	bl	801016c <GetElement>
 80103fe:	4603      	mov	r3, r0
 8010400:	2b00      	cmp	r3, #0
 8010402:	d001      	beq.n	8010408 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8010404:	2301      	movs	r3, #1
 8010406:	e000      	b.n	801040a <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8010408:	2300      	movs	r3, #0
}
 801040a:	4618      	mov	r0, r3
 801040c:	3708      	adds	r7, #8
 801040e:	46bd      	mov	sp, r7
 8010410:	bd80      	pop	{r7, pc}
 8010412:	bf00      	nop
 8010414:	200011f8 	.word	0x200011f8

08010418 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8010418:	b580      	push	{r7, lr}
 801041a:	b084      	sub	sp, #16
 801041c:	af00      	add	r7, sp, #0
 801041e:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8010420:	4b25      	ldr	r3, [pc, #148]	@ (80104b8 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8010422:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010426:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8010428:	2300      	movs	r3, #0
 801042a:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 801042c:	f107 0308 	add.w	r3, r7, #8
 8010430:	2204      	movs	r2, #4
 8010432:	2100      	movs	r1, #0
 8010434:	4618      	mov	r0, r3
 8010436:	f006 fd1b 	bl	8016e70 <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 801043a:	2300      	movs	r3, #0
 801043c:	73fb      	strb	r3, [r7, #15]
 801043e:	e032      	b.n	80104a6 <LoRaMacConfirmQueueHandleCb+0x8e>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8010440:	4b1d      	ldr	r3, [pc, #116]	@ (80104b8 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8010442:	685b      	ldr	r3, [r3, #4]
 8010444:	781a      	ldrb	r2, [r3, #0]
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 801044a:	4b1b      	ldr	r3, [pc, #108]	@ (80104b8 <LoRaMacConfirmQueueHandleCb+0xa0>)
 801044c:	685b      	ldr	r3, [r3, #4]
 801044e:	785a      	ldrb	r2, [r3, #1]
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8010454:	4b18      	ldr	r3, [pc, #96]	@ (80104b8 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8010456:	685b      	ldr	r3, [r3, #4]
 8010458:	789b      	ldrb	r3, [r3, #2]
 801045a:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 801045c:	7b7b      	ldrb	r3, [r7, #13]
 801045e:	2b00      	cmp	r3, #0
 8010460:	d005      	beq.n	801046e <LoRaMacConfirmQueueHandleCb+0x56>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 8010462:	4b15      	ldr	r3, [pc, #84]	@ (80104b8 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	689b      	ldr	r3, [r3, #8]
 8010468:	6878      	ldr	r0, [r7, #4]
 801046a:	4798      	blx	r3
 801046c:	e00b      	b.n	8010486 <LoRaMacConfirmQueueHandleCb+0x6e>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 801046e:	4b12      	ldr	r3, [pc, #72]	@ (80104b8 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8010470:	685b      	ldr	r3, [r3, #4]
 8010472:	781b      	ldrb	r3, [r3, #0]
 8010474:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 8010476:	4b10      	ldr	r3, [pc, #64]	@ (80104b8 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8010478:	685b      	ldr	r3, [r3, #4]
 801047a:	785b      	ldrb	r3, [r3, #1]
 801047c:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 801047e:	4b0e      	ldr	r3, [pc, #56]	@ (80104b8 <LoRaMacConfirmQueueHandleCb+0xa0>)
 8010480:	685b      	ldr	r3, [r3, #4]
 8010482:	78db      	ldrb	r3, [r3, #3]
 8010484:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 8010486:	f7ff feff 	bl	8010288 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 801048a:	7b7b      	ldrb	r3, [r7, #13]
 801048c:	f083 0301 	eor.w	r3, r3, #1
 8010490:	b2db      	uxtb	r3, r3
 8010492:	2b00      	cmp	r3, #0
 8010494:	d004      	beq.n	80104a0 <LoRaMacConfirmQueueHandleCb+0x88>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 8010496:	f107 0308 	add.w	r3, r7, #8
 801049a:	4618      	mov	r0, r3
 801049c:	f7ff feba 	bl	8010214 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 80104a0:	7bfb      	ldrb	r3, [r7, #15]
 80104a2:	3301      	adds	r3, #1
 80104a4:	73fb      	strb	r3, [r7, #15]
 80104a6:	7bfa      	ldrb	r2, [r7, #15]
 80104a8:	7bbb      	ldrb	r3, [r7, #14]
 80104aa:	429a      	cmp	r2, r3
 80104ac:	d3c8      	bcc.n	8010440 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 80104ae:	bf00      	nop
 80104b0:	bf00      	nop
 80104b2:	3710      	adds	r7, #16
 80104b4:	46bd      	mov	sp, r7
 80104b6:	bd80      	pop	{r7, pc}
 80104b8:	200011f8 	.word	0x200011f8

080104bc <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 80104bc:	b480      	push	{r7}
 80104be:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 80104c0:	4b03      	ldr	r3, [pc, #12]	@ (80104d0 <LoRaMacConfirmQueueGetCnt+0x14>)
 80104c2:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 80104c6:	4618      	mov	r0, r3
 80104c8:	46bd      	mov	sp, r7
 80104ca:	bc80      	pop	{r7}
 80104cc:	4770      	bx	lr
 80104ce:	bf00      	nop
 80104d0:	200011f8 	.word	0x200011f8

080104d4 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 80104d4:	b580      	push	{r7, lr}
 80104d6:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80104d8:	4b06      	ldr	r3, [pc, #24]	@ (80104f4 <LoRaMacConfirmQueueIsFull+0x20>)
 80104da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80104de:	4618      	mov	r0, r3
 80104e0:	f7ff fe34 	bl	801014c <IsListFull>
 80104e4:	4603      	mov	r3, r0
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d001      	beq.n	80104ee <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 80104ea:	2301      	movs	r3, #1
 80104ec:	e000      	b.n	80104f0 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 80104ee:	2300      	movs	r3, #0
    }
}
 80104f0:	4618      	mov	r0, r3
 80104f2:	bd80      	pop	{r7, pc}
 80104f4:	200011f8 	.word	0x200011f8

080104f8 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 80104f8:	b580      	push	{r7, lr}
 80104fa:	b08e      	sub	sp, #56	@ 0x38
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	60f8      	str	r0, [r7, #12]
 8010500:	607b      	str	r3, [r7, #4]
 8010502:	460b      	mov	r3, r1
 8010504:	817b      	strh	r3, [r7, #10]
 8010506:	4613      	mov	r3, r2
 8010508:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	2b00      	cmp	r3, #0
 801050e:	d101      	bne.n	8010514 <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010510:	2309      	movs	r3, #9
 8010512:	e084      	b.n	801061e <PayloadEncrypt+0x126>
    }

    uint8_t bufferIndex = 0;
 8010514:	2300      	movs	r3, #0
 8010516:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint16_t ctr = 1;
 801051a:	2301      	movs	r3, #1
 801051c:	86bb      	strh	r3, [r7, #52]	@ 0x34
    uint8_t sBlock[16] = { 0 };
 801051e:	f107 0320 	add.w	r3, r7, #32
 8010522:	2200      	movs	r2, #0
 8010524:	601a      	str	r2, [r3, #0]
 8010526:	605a      	str	r2, [r3, #4]
 8010528:	609a      	str	r2, [r3, #8]
 801052a:	60da      	str	r2, [r3, #12]
    uint8_t aBlock[16] = { 0 };
 801052c:	f107 0310 	add.w	r3, r7, #16
 8010530:	2200      	movs	r2, #0
 8010532:	601a      	str	r2, [r3, #0]
 8010534:	605a      	str	r2, [r3, #4]
 8010536:	609a      	str	r2, [r3, #8]
 8010538:	60da      	str	r2, [r3, #12]

    aBlock[0] = 0x01;
 801053a:	2301      	movs	r3, #1
 801053c:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 801053e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8010542:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	b2db      	uxtb	r3, r3
 8010548:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	0a1b      	lsrs	r3, r3, #8
 801054e:	b2db      	uxtb	r3, r3
 8010550:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	0c1b      	lsrs	r3, r3, #16
 8010556:	b2db      	uxtb	r3, r3
 8010558:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	0e1b      	lsrs	r3, r3, #24
 801055e:	b2db      	uxtb	r3, r3
 8010560:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 8010562:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010564:	b2db      	uxtb	r3, r3
 8010566:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 8010568:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801056a:	0a1b      	lsrs	r3, r3, #8
 801056c:	b2db      	uxtb	r3, r3
 801056e:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8010570:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010572:	0c1b      	lsrs	r3, r3, #16
 8010574:	b2db      	uxtb	r3, r3
 8010576:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8010578:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801057a:	0e1b      	lsrs	r3, r3, #24
 801057c:	b2db      	uxtb	r3, r3
 801057e:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 8010580:	e048      	b.n	8010614 <PayloadEncrypt+0x11c>
    {
        aBlock[15] = ctr & 0xFF;
 8010582:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8010584:	b2db      	uxtb	r3, r3
 8010586:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8010588:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801058a:	3301      	adds	r3, #1
 801058c:	86bb      	strh	r3, [r7, #52]	@ 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 801058e:	f107 0320 	add.w	r3, r7, #32
 8010592:	7a7a      	ldrb	r2, [r7, #9]
 8010594:	f107 0010 	add.w	r0, r7, #16
 8010598:	2110      	movs	r1, #16
 801059a:	f006 fa17 	bl	80169cc <SecureElementAesEncrypt>
 801059e:	4603      	mov	r3, r0
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d001      	beq.n	80105a8 <PayloadEncrypt+0xb0>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80105a4:	230e      	movs	r3, #14
 80105a6:	e03a      	b.n	801061e <PayloadEncrypt+0x126>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 80105a8:	2300      	movs	r3, #0
 80105aa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80105ae:	e01e      	b.n	80105ee <PayloadEncrypt+0xf6>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 80105b0:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80105b4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80105b8:	4413      	add	r3, r2
 80105ba:	461a      	mov	r2, r3
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	4413      	add	r3, r2
 80105c0:	7819      	ldrb	r1, [r3, #0]
 80105c2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80105c6:	3338      	adds	r3, #56	@ 0x38
 80105c8:	443b      	add	r3, r7
 80105ca:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 80105ce:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 80105d2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80105d6:	4403      	add	r3, r0
 80105d8:	4618      	mov	r0, r3
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	4403      	add	r3, r0
 80105de:	404a      	eors	r2, r1
 80105e0:	b2d2      	uxtb	r2, r2
 80105e2:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 80105e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80105e8:	3301      	adds	r3, #1
 80105ea:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80105ee:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80105f2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80105f6:	2a10      	cmp	r2, #16
 80105f8:	bfa8      	it	ge
 80105fa:	2210      	movge	r2, #16
 80105fc:	b212      	sxth	r2, r2
 80105fe:	4293      	cmp	r3, r2
 8010600:	dbd6      	blt.n	80105b0 <PayloadEncrypt+0xb8>
        }
        size -= 16;
 8010602:	897b      	ldrh	r3, [r7, #10]
 8010604:	3b10      	subs	r3, #16
 8010606:	b29b      	uxth	r3, r3
 8010608:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 801060a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801060e:	3310      	adds	r3, #16
 8010610:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    while( size > 0 )
 8010614:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8010618:	2b00      	cmp	r3, #0
 801061a:	dcb2      	bgt.n	8010582 <PayloadEncrypt+0x8a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801061c:	2300      	movs	r3, #0
}
 801061e:	4618      	mov	r0, r3
 8010620:	3738      	adds	r7, #56	@ 0x38
 8010622:	46bd      	mov	sp, r7
 8010624:	bd80      	pop	{r7, pc}

08010626 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 8010626:	b490      	push	{r4, r7}
 8010628:	b082      	sub	sp, #8
 801062a:	af00      	add	r7, sp, #0
 801062c:	4604      	mov	r4, r0
 801062e:	4608      	mov	r0, r1
 8010630:	4611      	mov	r1, r2
 8010632:	461a      	mov	r2, r3
 8010634:	4623      	mov	r3, r4
 8010636:	80fb      	strh	r3, [r7, #6]
 8010638:	4603      	mov	r3, r0
 801063a:	717b      	strb	r3, [r7, #5]
 801063c:	460b      	mov	r3, r1
 801063e:	713b      	strb	r3, [r7, #4]
 8010640:	4613      	mov	r3, r2
 8010642:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 8010644:	69bb      	ldr	r3, [r7, #24]
 8010646:	2b00      	cmp	r3, #0
 8010648:	d101      	bne.n	801064e <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801064a:	2309      	movs	r3, #9
 801064c:	e04e      	b.n	80106ec <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 801064e:	69bb      	ldr	r3, [r7, #24]
 8010650:	2249      	movs	r2, #73	@ 0x49
 8010652:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 8010654:	69bb      	ldr	r3, [r7, #24]
 8010656:	3301      	adds	r3, #1
 8010658:	2200      	movs	r2, #0
 801065a:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 801065c:	69bb      	ldr	r3, [r7, #24]
 801065e:	3302      	adds	r3, #2
 8010660:	2200      	movs	r2, #0
 8010662:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 8010664:	69bb      	ldr	r3, [r7, #24]
 8010666:	3303      	adds	r3, #3
 8010668:	2200      	movs	r2, #0
 801066a:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 801066c:	69bb      	ldr	r3, [r7, #24]
 801066e:	3304      	adds	r3, #4
 8010670:	2200      	movs	r2, #0
 8010672:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 8010674:	69bb      	ldr	r3, [r7, #24]
 8010676:	3305      	adds	r3, #5
 8010678:	78fa      	ldrb	r2, [r7, #3]
 801067a:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 801067c:	69bb      	ldr	r3, [r7, #24]
 801067e:	3306      	adds	r3, #6
 8010680:	693a      	ldr	r2, [r7, #16]
 8010682:	b2d2      	uxtb	r2, r2
 8010684:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8010686:	693b      	ldr	r3, [r7, #16]
 8010688:	0a1a      	lsrs	r2, r3, #8
 801068a:	69bb      	ldr	r3, [r7, #24]
 801068c:	3307      	adds	r3, #7
 801068e:	b2d2      	uxtb	r2, r2
 8010690:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 8010692:	693b      	ldr	r3, [r7, #16]
 8010694:	0c1a      	lsrs	r2, r3, #16
 8010696:	69bb      	ldr	r3, [r7, #24]
 8010698:	3308      	adds	r3, #8
 801069a:	b2d2      	uxtb	r2, r2
 801069c:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 801069e:	693b      	ldr	r3, [r7, #16]
 80106a0:	0e1a      	lsrs	r2, r3, #24
 80106a2:	69bb      	ldr	r3, [r7, #24]
 80106a4:	3309      	adds	r3, #9
 80106a6:	b2d2      	uxtb	r2, r2
 80106a8:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 80106aa:	69bb      	ldr	r3, [r7, #24]
 80106ac:	330a      	adds	r3, #10
 80106ae:	697a      	ldr	r2, [r7, #20]
 80106b0:	b2d2      	uxtb	r2, r2
 80106b2:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 80106b4:	697b      	ldr	r3, [r7, #20]
 80106b6:	0a1a      	lsrs	r2, r3, #8
 80106b8:	69bb      	ldr	r3, [r7, #24]
 80106ba:	330b      	adds	r3, #11
 80106bc:	b2d2      	uxtb	r2, r2
 80106be:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 80106c0:	697b      	ldr	r3, [r7, #20]
 80106c2:	0c1a      	lsrs	r2, r3, #16
 80106c4:	69bb      	ldr	r3, [r7, #24]
 80106c6:	330c      	adds	r3, #12
 80106c8:	b2d2      	uxtb	r2, r2
 80106ca:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 80106cc:	697b      	ldr	r3, [r7, #20]
 80106ce:	0e1a      	lsrs	r2, r3, #24
 80106d0:	69bb      	ldr	r3, [r7, #24]
 80106d2:	330d      	adds	r3, #13
 80106d4:	b2d2      	uxtb	r2, r2
 80106d6:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 80106d8:	69bb      	ldr	r3, [r7, #24]
 80106da:	330e      	adds	r3, #14
 80106dc:	2200      	movs	r2, #0
 80106de:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 80106e0:	69bb      	ldr	r3, [r7, #24]
 80106e2:	330f      	adds	r3, #15
 80106e4:	88fa      	ldrh	r2, [r7, #6]
 80106e6:	b2d2      	uxtb	r2, r2
 80106e8:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 80106ea:	2300      	movs	r3, #0
}
 80106ec:	4618      	mov	r0, r3
 80106ee:	3708      	adds	r7, #8
 80106f0:	46bd      	mov	sp, r7
 80106f2:	bc90      	pop	{r4, r7}
 80106f4:	4770      	bx	lr

080106f6 <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 80106f6:	b590      	push	{r4, r7, lr}
 80106f8:	b08b      	sub	sp, #44	@ 0x2c
 80106fa:	af04      	add	r7, sp, #16
 80106fc:	6078      	str	r0, [r7, #4]
 80106fe:	4608      	mov	r0, r1
 8010700:	4611      	mov	r1, r2
 8010702:	461a      	mov	r2, r3
 8010704:	4603      	mov	r3, r0
 8010706:	807b      	strh	r3, [r7, #2]
 8010708:	460b      	mov	r3, r1
 801070a:	707b      	strb	r3, [r7, #1]
 801070c:	4613      	mov	r3, r2
 801070e:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	2b00      	cmp	r3, #0
 8010714:	d002      	beq.n	801071c <ComputeCmacB0+0x26>
 8010716:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010718:	2b00      	cmp	r3, #0
 801071a:	d101      	bne.n	8010720 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801071c:	2309      	movs	r3, #9
 801071e:	e024      	b.n	801076a <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8010720:	887b      	ldrh	r3, [r7, #2]
 8010722:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010726:	d901      	bls.n	801072c <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8010728:	230d      	movs	r3, #13
 801072a:	e01e      	b.n	801076a <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE] ALIGN(4);

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 801072c:	f897 4028 	ldrb.w	r4, [r7, #40]	@ 0x28
 8010730:	783a      	ldrb	r2, [r7, #0]
 8010732:	7879      	ldrb	r1, [r7, #1]
 8010734:	8878      	ldrh	r0, [r7, #2]
 8010736:	f107 0308 	add.w	r3, r7, #8
 801073a:	9302      	str	r3, [sp, #8]
 801073c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801073e:	9301      	str	r3, [sp, #4]
 8010740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010742:	9300      	str	r3, [sp, #0]
 8010744:	4623      	mov	r3, r4
 8010746:	f7ff ff6e 	bl	8010626 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 801074a:	887a      	ldrh	r2, [r7, #2]
 801074c:	7879      	ldrb	r1, [r7, #1]
 801074e:	f107 0008 	add.w	r0, r7, #8
 8010752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010754:	9300      	str	r3, [sp, #0]
 8010756:	460b      	mov	r3, r1
 8010758:	6879      	ldr	r1, [r7, #4]
 801075a:	f006 f8f1 	bl	8016940 <SecureElementComputeAesCmac>
 801075e:	4603      	mov	r3, r0
 8010760:	2b00      	cmp	r3, #0
 8010762:	d001      	beq.n	8010768 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010764:	230e      	movs	r3, #14
 8010766:	e000      	b.n	801076a <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8010768:	2300      	movs	r3, #0
}
 801076a:	4618      	mov	r0, r3
 801076c:	371c      	adds	r7, #28
 801076e:	46bd      	mov	sp, r7
 8010770:	bd90      	pop	{r4, r7, pc}

08010772 <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 8010772:	b590      	push	{r4, r7, lr}
 8010774:	b0cd      	sub	sp, #308	@ 0x134
 8010776:	af04      	add	r7, sp, #16
 8010778:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 801077c:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 8010780:	6020      	str	r0, [r4, #0]
 8010782:	460c      	mov	r4, r1
 8010784:	4610      	mov	r0, r2
 8010786:	4619      	mov	r1, r3
 8010788:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801078c:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8010790:	4622      	mov	r2, r4
 8010792:	801a      	strh	r2, [r3, #0]
 8010794:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010798:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 801079c:	4602      	mov	r2, r0
 801079e:	701a      	strb	r2, [r3, #0]
 80107a0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80107a4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80107a8:	460a      	mov	r2, r1
 80107aa:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 80107ac:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80107b0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d101      	bne.n	80107be <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80107ba:	2309      	movs	r3, #9
 80107bc:	e063      	b.n	8010886 <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80107be:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80107c2:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 80107c6:	881b      	ldrh	r3, [r3, #0]
 80107c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80107cc:	d901      	bls.n	80107d2 <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80107ce:	230d      	movs	r3, #13
 80107d0:	e059      	b.n	8010886 <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 80107d2:	f107 030c 	add.w	r3, r7, #12
 80107d6:	f44f 7288 	mov.w	r2, #272	@ 0x110
 80107da:	2100      	movs	r1, #0
 80107dc:	4618      	mov	r0, r3
 80107de:	f006 fb47 	bl	8016e70 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80107e2:	f897 4130 	ldrb.w	r4, [r7, #304]	@ 0x130
 80107e6:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80107ea:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80107ee:	781a      	ldrb	r2, [r3, #0]
 80107f0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80107f4:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 80107f8:	7819      	ldrb	r1, [r3, #0]
 80107fa:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80107fe:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8010802:	8818      	ldrh	r0, [r3, #0]
 8010804:	f107 030c 	add.w	r3, r7, #12
 8010808:	9302      	str	r3, [sp, #8]
 801080a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 801080e:	9301      	str	r3, [sp, #4]
 8010810:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010814:	9300      	str	r3, [sp, #0]
 8010816:	4623      	mov	r3, r4
 8010818:	f7ff ff05 	bl	8010626 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 801081c:	f107 030c 	add.w	r3, r7, #12
 8010820:	3310      	adds	r3, #16
 8010822:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8010826:	f5a2 728f 	sub.w	r2, r2, #286	@ 0x11e
 801082a:	8812      	ldrh	r2, [r2, #0]
 801082c:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8010830:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 8010834:	6809      	ldr	r1, [r1, #0]
 8010836:	4618      	mov	r0, r3
 8010838:	f006 fadf 	bl	8016dfa <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 801083c:	2306      	movs	r3, #6
 801083e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8010842:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010846:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 801084a:	881b      	ldrh	r3, [r3, #0]
 801084c:	3310      	adds	r3, #16
 801084e:	4619      	mov	r1, r3
 8010850:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010854:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8010858:	781b      	ldrb	r3, [r3, #0]
 801085a:	f107 000c 	add.w	r0, r7, #12
 801085e:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8010862:	f006 f887 	bl	8016974 <SecureElementVerifyAesCmac>
 8010866:	4603      	mov	r3, r0
 8010868:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 801086c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8010870:	2b00      	cmp	r3, #0
 8010872:	d101      	bne.n	8010878 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 8010874:	2300      	movs	r3, #0
 8010876:	e006      	b.n	8010886 <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8010878:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 801087c:	2b01      	cmp	r3, #1
 801087e:	d101      	bne.n	8010884 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 8010880:	2301      	movs	r3, #1
 8010882:	e000      	b.n	8010886 <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010884:	230e      	movs	r3, #14
}
 8010886:	4618      	mov	r0, r3
 8010888:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 801088c:	46bd      	mov	sp, r7
 801088e:	bd90      	pop	{r4, r7, pc}

08010890 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 8010890:	b480      	push	{r7}
 8010892:	b085      	sub	sp, #20
 8010894:	af00      	add	r7, sp, #0
 8010896:	4603      	mov	r3, r0
 8010898:	6039      	str	r1, [r7, #0]
 801089a:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 801089c:	2300      	movs	r3, #0
 801089e:	73fb      	strb	r3, [r7, #15]
 80108a0:	e011      	b.n	80108c6 <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 80108a2:	7bfb      	ldrb	r3, [r7, #15]
 80108a4:	4a0c      	ldr	r2, [pc, #48]	@ (80108d8 <GetKeyAddrItem+0x48>)
 80108a6:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80108aa:	79fa      	ldrb	r2, [r7, #7]
 80108ac:	429a      	cmp	r2, r3
 80108ae:	d107      	bne.n	80108c0 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 80108b0:	7bfb      	ldrb	r3, [r7, #15]
 80108b2:	009b      	lsls	r3, r3, #2
 80108b4:	4a08      	ldr	r2, [pc, #32]	@ (80108d8 <GetKeyAddrItem+0x48>)
 80108b6:	441a      	add	r2, r3
 80108b8:	683b      	ldr	r3, [r7, #0]
 80108ba:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 80108bc:	2300      	movs	r3, #0
 80108be:	e006      	b.n	80108ce <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80108c0:	7bfb      	ldrb	r3, [r7, #15]
 80108c2:	3301      	adds	r3, #1
 80108c4:	73fb      	strb	r3, [r7, #15]
 80108c6:	7bfb      	ldrb	r3, [r7, #15]
 80108c8:	2b01      	cmp	r3, #1
 80108ca:	d9ea      	bls.n	80108a2 <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 80108cc:	230b      	movs	r3, #11
}
 80108ce:	4618      	mov	r0, r3
 80108d0:	3714      	adds	r7, #20
 80108d2:	46bd      	mov	sp, r7
 80108d4:	bc80      	pop	{r7}
 80108d6:	4770      	bx	lr
 80108d8:	200000b4 	.word	0x200000b4

080108dc <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 80108dc:	b580      	push	{r7, lr}
 80108de:	b088      	sub	sp, #32
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	60b9      	str	r1, [r7, #8]
 80108e4:	607a      	str	r2, [r7, #4]
 80108e6:	461a      	mov	r2, r3
 80108e8:	4603      	mov	r3, r0
 80108ea:	73fb      	strb	r3, [r7, #15]
 80108ec:	4613      	mov	r3, r2
 80108ee:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 80108f0:	f107 0310 	add.w	r3, r7, #16
 80108f4:	2200      	movs	r2, #0
 80108f6:	601a      	str	r2, [r3, #0]
 80108f8:	605a      	str	r2, [r3, #4]
 80108fa:	609a      	str	r2, [r3, #8]
 80108fc:	60da      	str	r2, [r3, #12]

    switch( keyID )
 80108fe:	7bfb      	ldrb	r3, [r7, #15]
 8010900:	2b08      	cmp	r3, #8
 8010902:	d002      	beq.n	801090a <DeriveSessionKey10x+0x2e>
 8010904:	2b09      	cmp	r3, #9
 8010906:	d003      	beq.n	8010910 <DeriveSessionKey10x+0x34>
 8010908:	e005      	b.n	8010916 <DeriveSessionKey10x+0x3a>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else
        case NWK_S_KEY:
#endif /* LORAMAC_VERSION */
            compBase[0] = 0x01;
 801090a:	2301      	movs	r3, #1
 801090c:	743b      	strb	r3, [r7, #16]
            break;
 801090e:	e004      	b.n	801091a <DeriveSessionKey10x+0x3e>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8010910:	2302      	movs	r3, #2
 8010912:	743b      	strb	r3, [r7, #16]
            break;
 8010914:	e001      	b.n	801091a <DeriveSessionKey10x+0x3e>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8010916:	230a      	movs	r3, #10
 8010918:	e02a      	b.n	8010970 <DeriveSessionKey10x+0x94>
    }

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 801091a:	68bb      	ldr	r3, [r7, #8]
 801091c:	b2db      	uxtb	r3, r3
 801091e:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8010920:	68bb      	ldr	r3, [r7, #8]
 8010922:	0a1b      	lsrs	r3, r3, #8
 8010924:	b2db      	uxtb	r3, r3
 8010926:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8010928:	68bb      	ldr	r3, [r7, #8]
 801092a:	0c1b      	lsrs	r3, r3, #16
 801092c:	b2db      	uxtb	r3, r3
 801092e:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	b2db      	uxtb	r3, r3
 8010934:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	0a1b      	lsrs	r3, r3, #8
 801093a:	b2db      	uxtb	r3, r3
 801093c:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	0c1b      	lsrs	r3, r3, #16
 8010942:	b2db      	uxtb	r3, r3
 8010944:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 8010946:	89bb      	ldrh	r3, [r7, #12]
 8010948:	b2db      	uxtb	r3, r3
 801094a:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 801094c:	89bb      	ldrh	r3, [r7, #12]
 801094e:	0a1b      	lsrs	r3, r3, #8
 8010950:	b29b      	uxth	r3, r3
 8010952:	b2db      	uxtb	r3, r3
 8010954:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 8010956:	7bfa      	ldrb	r2, [r7, #15]
 8010958:	f107 0310 	add.w	r3, r7, #16
 801095c:	2101      	movs	r1, #1
 801095e:	4618      	mov	r0, r3
 8010960:	f006 f8b4 	bl	8016acc <SecureElementDeriveAndStoreKey>
 8010964:	4603      	mov	r3, r0
 8010966:	2b00      	cmp	r3, #0
 8010968:	d001      	beq.n	801096e <DeriveSessionKey10x+0x92>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801096a:	230e      	movs	r3, #14
 801096c:	e000      	b.n	8010970 <DeriveSessionKey10x+0x94>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801096e:	2300      	movs	r3, #0
}
 8010970:	4618      	mov	r0, r3
 8010972:	3720      	adds	r7, #32
 8010974:	46bd      	mov	sp, r7
 8010976:	bd80      	pop	{r7, pc}

08010978 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 8010978:	b480      	push	{r7}
 801097a:	b083      	sub	sp, #12
 801097c:	af00      	add	r7, sp, #0
 801097e:	4603      	mov	r3, r0
 8010980:	6039      	str	r1, [r7, #0]
 8010982:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8010984:	683b      	ldr	r3, [r7, #0]
 8010986:	2b00      	cmp	r3, #0
 8010988:	d101      	bne.n	801098e <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801098a:	2309      	movs	r3, #9
 801098c:	e029      	b.n	80109e2 <GetLastFcntDown+0x6a>
    }
    switch( fCntID )
 801098e:	79fb      	ldrb	r3, [r7, #7]
 8010990:	3b01      	subs	r3, #1
 8010992:	2b03      	cmp	r3, #3
 8010994:	d822      	bhi.n	80109dc <GetLastFcntDown+0x64>
 8010996:	a201      	add	r2, pc, #4	@ (adr r2, 801099c <GetLastFcntDown+0x24>)
 8010998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801099c:	080109ad 	.word	0x080109ad
 80109a0:	080109b9 	.word	0x080109b9
 80109a4:	080109c5 	.word	0x080109c5
 80109a8:	080109d1 	.word	0x080109d1
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 80109ac:	4b0f      	ldr	r3, [pc, #60]	@ (80109ec <GetLastFcntDown+0x74>)
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	691a      	ldr	r2, [r3, #16]
 80109b2:	683b      	ldr	r3, [r7, #0]
 80109b4:	601a      	str	r2, [r3, #0]
            break;
 80109b6:	e013      	b.n	80109e0 <GetLastFcntDown+0x68>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 80109b8:	4b0c      	ldr	r3, [pc, #48]	@ (80109ec <GetLastFcntDown+0x74>)
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	695a      	ldr	r2, [r3, #20]
 80109be:	683b      	ldr	r3, [r7, #0]
 80109c0:	601a      	str	r2, [r3, #0]
            break;
 80109c2:	e00d      	b.n	80109e0 <GetLastFcntDown+0x68>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 80109c4:	4b09      	ldr	r3, [pc, #36]	@ (80109ec <GetLastFcntDown+0x74>)
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	699a      	ldr	r2, [r3, #24]
 80109ca:	683b      	ldr	r3, [r7, #0]
 80109cc:	601a      	str	r2, [r3, #0]
            break;
 80109ce:	e007      	b.n	80109e0 <GetLastFcntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 80109d0:	4b06      	ldr	r3, [pc, #24]	@ (80109ec <GetLastFcntDown+0x74>)
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	69da      	ldr	r2, [r3, #28]
 80109d6:	683b      	ldr	r3, [r7, #0]
 80109d8:	601a      	str	r2, [r3, #0]
            break;
 80109da:	e001      	b.n	80109e0 <GetLastFcntDown+0x68>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 80109dc:	2305      	movs	r3, #5
 80109de:	e000      	b.n	80109e2 <GetLastFcntDown+0x6a>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80109e0:	2300      	movs	r3, #0
}
 80109e2:	4618      	mov	r0, r3
 80109e4:	370c      	adds	r7, #12
 80109e6:	46bd      	mov	sp, r7
 80109e8:	bc80      	pop	{r7}
 80109ea:	4770      	bx	lr
 80109ec:	2000121c 	.word	0x2000121c

080109f0 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80109f0:	b580      	push	{r7, lr}
 80109f2:	b084      	sub	sp, #16
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	4603      	mov	r3, r0
 80109f8:	6039      	str	r1, [r7, #0]
 80109fa:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 80109fc:	2300      	movs	r3, #0
 80109fe:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8010a00:	f107 020c 	add.w	r2, r7, #12
 8010a04:	79fb      	ldrb	r3, [r7, #7]
 8010a06:	4611      	mov	r1, r2
 8010a08:	4618      	mov	r0, r3
 8010a0a:	f7ff ffb5 	bl	8010978 <GetLastFcntDown>
 8010a0e:	4603      	mov	r3, r0
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d001      	beq.n	8010a18 <CheckFCntDown+0x28>
    {
        return false;
 8010a14:	2300      	movs	r3, #0
 8010a16:	e00a      	b.n	8010a2e <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	683a      	ldr	r2, [r7, #0]
 8010a1c:	429a      	cmp	r2, r3
 8010a1e:	d803      	bhi.n	8010a28 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITIAL_VALUE ) )
 8010a20:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 8010a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a26:	d101      	bne.n	8010a2c <CheckFCntDown+0x3c>
    {
        return true;
 8010a28:	2301      	movs	r3, #1
 8010a2a:	e000      	b.n	8010a2e <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8010a2c:	2300      	movs	r3, #0
    }
}
 8010a2e:	4618      	mov	r0, r3
 8010a30:	3710      	adds	r7, #16
 8010a32:	46bd      	mov	sp, r7
 8010a34:	bd80      	pop	{r7, pc}
	...

08010a38 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8010a38:	b480      	push	{r7}
 8010a3a:	b083      	sub	sp, #12
 8010a3c:	af00      	add	r7, sp, #0
 8010a3e:	4603      	mov	r3, r0
 8010a40:	6039      	str	r1, [r7, #0]
 8010a42:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 8010a44:	79fb      	ldrb	r3, [r7, #7]
 8010a46:	3b01      	subs	r3, #1
 8010a48:	2b03      	cmp	r3, #3
 8010a4a:	d82b      	bhi.n	8010aa4 <UpdateFCntDown+0x6c>
 8010a4c:	a201      	add	r2, pc, #4	@ (adr r2, 8010a54 <UpdateFCntDown+0x1c>)
 8010a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a52:	bf00      	nop
 8010a54:	08010a65 	.word	0x08010a65
 8010a58:	08010a77 	.word	0x08010a77
 8010a5c:	08010a89 	.word	0x08010a89
 8010a60:	08010a9b 	.word	0x08010a9b
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8010a64:	4b12      	ldr	r3, [pc, #72]	@ (8010ab0 <UpdateFCntDown+0x78>)
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	683a      	ldr	r2, [r7, #0]
 8010a6a:	611a      	str	r2, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 8010a6c:	4b10      	ldr	r3, [pc, #64]	@ (8010ab0 <UpdateFCntDown+0x78>)
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	683a      	ldr	r2, [r7, #0]
 8010a72:	621a      	str	r2, [r3, #32]
            break;
 8010a74:	e017      	b.n	8010aa6 <UpdateFCntDown+0x6e>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8010a76:	4b0e      	ldr	r3, [pc, #56]	@ (8010ab0 <UpdateFCntDown+0x78>)
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	683a      	ldr	r2, [r7, #0]
 8010a7c:	615a      	str	r2, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 8010a7e:	4b0c      	ldr	r3, [pc, #48]	@ (8010ab0 <UpdateFCntDown+0x78>)
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	683a      	ldr	r2, [r7, #0]
 8010a84:	621a      	str	r2, [r3, #32]
            break;
 8010a86:	e00e      	b.n	8010aa6 <UpdateFCntDown+0x6e>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 8010a88:	4b09      	ldr	r3, [pc, #36]	@ (8010ab0 <UpdateFCntDown+0x78>)
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	683a      	ldr	r2, [r7, #0]
 8010a8e:	619a      	str	r2, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 8010a90:	4b07      	ldr	r3, [pc, #28]	@ (8010ab0 <UpdateFCntDown+0x78>)
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	683a      	ldr	r2, [r7, #0]
 8010a96:	621a      	str	r2, [r3, #32]
            break;
 8010a98:	e005      	b.n	8010aa6 <UpdateFCntDown+0x6e>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8010a9a:	4b05      	ldr	r3, [pc, #20]	@ (8010ab0 <UpdateFCntDown+0x78>)
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	683a      	ldr	r2, [r7, #0]
 8010aa0:	61da      	str	r2, [r3, #28]
            break;
 8010aa2:	e000      	b.n	8010aa6 <UpdateFCntDown+0x6e>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8010aa4:	bf00      	nop
    }
}
 8010aa6:	bf00      	nop
 8010aa8:	370c      	adds	r7, #12
 8010aaa:	46bd      	mov	sp, r7
 8010aac:	bc80      	pop	{r7}
 8010aae:	4770      	bx	lr
 8010ab0:	2000121c 	.word	0x2000121c

08010ab4 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8010ab4:	b480      	push	{r7}
 8010ab6:	b083      	sub	sp, #12
 8010ab8:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 8010aba:	4b18      	ldr	r3, [pc, #96]	@ (8010b1c <ResetFCnts+0x68>)
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	2200      	movs	r2, #0
 8010ac0:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8010ac2:	4b16      	ldr	r3, [pc, #88]	@ (8010b1c <ResetFCnts+0x68>)
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8010aca:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8010acc:	4b13      	ldr	r3, [pc, #76]	@ (8010b1c <ResetFCnts+0x68>)
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8010ad4:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 8010ad6:	4b11      	ldr	r3, [pc, #68]	@ (8010b1c <ResetFCnts+0x68>)
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	f04f 32ff 	mov.w	r2, #4294967295
 8010ade:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8010ae0:	4b0e      	ldr	r3, [pc, #56]	@ (8010b1c <ResetFCnts+0x68>)
 8010ae2:	681a      	ldr	r2, [r3, #0]
 8010ae4:	4b0d      	ldr	r3, [pc, #52]	@ (8010b1c <ResetFCnts+0x68>)
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	6992      	ldr	r2, [r2, #24]
 8010aea:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010aec:	2300      	movs	r3, #0
 8010aee:	607b      	str	r3, [r7, #4]
 8010af0:	e00b      	b.n	8010b0a <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 8010af2:	4b0a      	ldr	r3, [pc, #40]	@ (8010b1c <ResetFCnts+0x68>)
 8010af4:	681a      	ldr	r2, [r3, #0]
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	3306      	adds	r3, #6
 8010afa:	009b      	lsls	r3, r3, #2
 8010afc:	4413      	add	r3, r2
 8010afe:	f04f 32ff 	mov.w	r2, #4294967295
 8010b02:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	3301      	adds	r3, #1
 8010b08:	607b      	str	r3, [r7, #4]
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	ddf0      	ble.n	8010af2 <ResetFCnts+0x3e>
    }
}
 8010b10:	bf00      	nop
 8010b12:	bf00      	nop
 8010b14:	370c      	adds	r7, #12
 8010b16:	46bd      	mov	sp, r7
 8010b18:	bc80      	pop	{r7}
 8010b1a:	4770      	bx	lr
 8010b1c:	2000121c 	.word	0x2000121c

08010b20 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
 8010b20:	b480      	push	{r7}
 8010b22:	b083      	sub	sp, #12
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	6078      	str	r0, [r7, #4]
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 8010b28:	4b06      	ldr	r3, [pc, #24]	@ (8010b44 <IsJoinNonce10xOk+0x24>)
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	689b      	ldr	r3, [r3, #8]
 8010b2e:	687a      	ldr	r2, [r7, #4]
 8010b30:	429a      	cmp	r2, r3
 8010b32:	bf8c      	ite	hi
 8010b34:	2301      	movhi	r3, #1
 8010b36:	2300      	movls	r3, #0
 8010b38:	b2db      	uxtb	r3, r3
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	370c      	adds	r7, #12
 8010b3e:	46bd      	mov	sp, r7
 8010b40:	bc80      	pop	{r7}
 8010b42:	4770      	bx	lr
 8010b44:	2000121c 	.word	0x2000121c

08010b48 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 8010b48:	b580      	push	{r7, lr}
 8010b4a:	b082      	sub	sp, #8
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d101      	bne.n	8010b5a <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8010b56:	2308      	movs	r3, #8
 8010b58:	e01c      	b.n	8010b94 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8010b5a:	4a10      	ldr	r2, [pc, #64]	@ (8010b9c <LoRaMacCryptoInit+0x54>)
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8010b60:	4b0e      	ldr	r3, [pc, #56]	@ (8010b9c <LoRaMacCryptoInit+0x54>)
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	2228      	movs	r2, #40	@ 0x28
 8010b66:	2100      	movs	r1, #0
 8010b68:	4618      	mov	r0, r3
 8010b6a:	f006 f981 	bl	8016e70 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8010b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8010b9c <LoRaMacCryptoInit+0x54>)
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	2201      	movs	r2, #1
 8010b74:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8010b76:	4b09      	ldr	r3, [pc, #36]	@ (8010b9c <LoRaMacCryptoInit+0x54>)
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	2201      	movs	r2, #1
 8010b7c:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8010b7e:	4b07      	ldr	r3, [pc, #28]	@ (8010b9c <LoRaMacCryptoInit+0x54>)
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	2201      	movs	r2, #1
 8010b84:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8010b86:	4b05      	ldr	r3, [pc, #20]	@ (8010b9c <LoRaMacCryptoInit+0x54>)
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	2200      	movs	r2, #0
 8010b8c:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 8010b8e:	f7ff ff91 	bl	8010ab4 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8010b92:	2300      	movs	r3, #0
}
 8010b94:	4618      	mov	r0, r3
 8010b96:	3708      	adds	r7, #8
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	bd80      	pop	{r7, pc}
 8010b9c:	2000121c 	.word	0x2000121c

08010ba0 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8010ba0:	b480      	push	{r7}
 8010ba2:	b083      	sub	sp, #12
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8010ba8:	4b04      	ldr	r3, [pc, #16]	@ (8010bbc <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	687a      	ldr	r2, [r7, #4]
 8010bae:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8010bb0:	2300      	movs	r3, #0
}
 8010bb2:	4618      	mov	r0, r3
 8010bb4:	370c      	adds	r7, #12
 8010bb6:	46bd      	mov	sp, r7
 8010bb8:	bc80      	pop	{r7}
 8010bba:	4770      	bx	lr
 8010bbc:	2000121c 	.word	0x2000121c

08010bc0 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8010bc0:	b480      	push	{r7}
 8010bc2:	b083      	sub	sp, #12
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d101      	bne.n	8010bd2 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010bce:	2309      	movs	r3, #9
 8010bd0:	e006      	b.n	8010be0 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8010bd2:	4b06      	ldr	r3, [pc, #24]	@ (8010bec <LoRaMacCryptoGetFCntUp+0x2c>)
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	68db      	ldr	r3, [r3, #12]
 8010bd8:	1c5a      	adds	r2, r3, #1
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8010bde:	2300      	movs	r3, #0
}
 8010be0:	4618      	mov	r0, r3
 8010be2:	370c      	adds	r7, #12
 8010be4:	46bd      	mov	sp, r7
 8010be6:	bc80      	pop	{r7}
 8010be8:	4770      	bx	lr
 8010bea:	bf00      	nop
 8010bec:	2000121c 	.word	0x2000121c

08010bf0 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 8010bf0:	b580      	push	{r7, lr}
 8010bf2:	b088      	sub	sp, #32
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	4603      	mov	r3, r0
 8010bf8:	60b9      	str	r1, [r7, #8]
 8010bfa:	607a      	str	r2, [r7, #4]
 8010bfc:	73fb      	strb	r3, [r7, #15]
    uint32_t lastDown = 0;
 8010bfe:	2300      	movs	r3, #0
 8010c00:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 8010c02:	2300      	movs	r3, #0
 8010c04:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 8010c06:	2312      	movs	r3, #18
 8010c08:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d101      	bne.n	8010c14 <LoRaMacCryptoGetFCntDown+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010c10:	2309      	movs	r3, #9
 8010c12:	e035      	b.n	8010c80 <LoRaMacCryptoGetFCntDown+0x90>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8010c14:	f107 0214 	add.w	r2, r7, #20
 8010c18:	7bfb      	ldrb	r3, [r7, #15]
 8010c1a:	4611      	mov	r1, r2
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	f7ff feab 	bl	8010978 <GetLastFcntDown>
 8010c22:	4603      	mov	r3, r0
 8010c24:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8010c26:	7efb      	ldrb	r3, [r7, #27]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d001      	beq.n	8010c30 <LoRaMacCryptoGetFCntDown+0x40>
    {
        return cryptoStatus;
 8010c2c:	7efb      	ldrb	r3, [r7, #27]
 8010c2e:	e027      	b.n	8010c80 <LoRaMacCryptoGetFCntDown+0x90>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 8010c30:	697b      	ldr	r3, [r7, #20]
 8010c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c36:	d103      	bne.n	8010c40 <LoRaMacCryptoGetFCntDown+0x50>
    {
        *currentDown = frameFcnt;
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	68ba      	ldr	r2, [r7, #8]
 8010c3c:	601a      	str	r2, [r3, #0]
 8010c3e:	e01e      	b.n	8010c7e <LoRaMacCryptoGetFCntDown+0x8e>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8010c40:	697b      	ldr	r3, [r7, #20]
 8010c42:	b29b      	uxth	r3, r3
 8010c44:	68ba      	ldr	r2, [r7, #8]
 8010c46:	1ad3      	subs	r3, r2, r3
 8010c48:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 8010c4a:	69fb      	ldr	r3, [r7, #28]
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	dd05      	ble.n	8010c5c <LoRaMacCryptoGetFCntDown+0x6c>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8010c50:	697a      	ldr	r2, [r7, #20]
 8010c52:	69fb      	ldr	r3, [r7, #28]
 8010c54:	441a      	add	r2, r3
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	601a      	str	r2, [r3, #0]
 8010c5a:	e010      	b.n	8010c7e <LoRaMacCryptoGetFCntDown+0x8e>
        }
        else if( fCntDiff == 0 )
 8010c5c:	69fb      	ldr	r3, [r7, #28]
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d104      	bne.n	8010c6c <LoRaMacCryptoGetFCntDown+0x7c>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 8010c62:	697a      	ldr	r2, [r7, #20]
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8010c68:	2307      	movs	r3, #7
 8010c6a:	e009      	b.n	8010c80 <LoRaMacCryptoGetFCntDown+0x90>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8010c6c:	697b      	ldr	r3, [r7, #20]
 8010c6e:	0c1b      	lsrs	r3, r3, #16
 8010c70:	041b      	lsls	r3, r3, #16
 8010c72:	68ba      	ldr	r2, [r7, #8]
 8010c74:	4413      	add	r3, r2
 8010c76:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	601a      	str	r2, [r3, #0]
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8010c7e:	2300      	movs	r3, #0
}
 8010c80:	4618      	mov	r0, r3
 8010c82:	3720      	adds	r7, #32
 8010c84:	46bd      	mov	sp, r7
 8010c86:	bd80      	pop	{r7, pc}

08010c88 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 8010c88:	b480      	push	{r7}
 8010c8a:	b085      	sub	sp, #20
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d101      	bne.n	8010c9a <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010c96:	2309      	movs	r3, #9
 8010c98:	e019      	b.n	8010cce <LoRaMacCryptoSetMulticastReference+0x46>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010c9a:	2300      	movs	r3, #0
 8010c9c:	60fb      	str	r3, [r7, #12]
 8010c9e:	e012      	b.n	8010cc6 <LoRaMacCryptoSetMulticastReference+0x3e>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8010ca0:	4b0d      	ldr	r3, [pc, #52]	@ (8010cd8 <LoRaMacCryptoSetMulticastReference+0x50>)
 8010ca2:	6819      	ldr	r1, [r3, #0]
 8010ca4:	68fa      	ldr	r2, [r7, #12]
 8010ca6:	4613      	mov	r3, r2
 8010ca8:	005b      	lsls	r3, r3, #1
 8010caa:	4413      	add	r3, r2
 8010cac:	011b      	lsls	r3, r3, #4
 8010cae:	461a      	mov	r2, r3
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	4413      	add	r3, r2
 8010cb4:	68fa      	ldr	r2, [r7, #12]
 8010cb6:	3206      	adds	r2, #6
 8010cb8:	0092      	lsls	r2, r2, #2
 8010cba:	440a      	add	r2, r1
 8010cbc:	3204      	adds	r2, #4
 8010cbe:	625a      	str	r2, [r3, #36]	@ 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	3301      	adds	r3, #1
 8010cc4:	60fb      	str	r3, [r7, #12]
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	dde9      	ble.n	8010ca0 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8010ccc:	2300      	movs	r3, #0
}
 8010cce:	4618      	mov	r0, r3
 8010cd0:	3714      	adds	r7, #20
 8010cd2:	46bd      	mov	sp, r7
 8010cd4:	bc80      	pop	{r7}
 8010cd6:	4770      	bx	lr
 8010cd8:	2000121c 	.word	0x2000121c

08010cdc <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	b082      	sub	sp, #8
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	4603      	mov	r3, r0
 8010ce4:	6039      	str	r1, [r7, #0]
 8010ce6:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8010ce8:	79fb      	ldrb	r3, [r7, #7]
 8010cea:	6839      	ldr	r1, [r7, #0]
 8010cec:	4618      	mov	r0, r3
 8010cee:	f005 fdc9 	bl	8016884 <SecureElementSetKey>
 8010cf2:	4603      	mov	r3, r0
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d001      	beq.n	8010cfc <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010cf8:	230e      	movs	r3, #14
 8010cfa:	e021      	b.n	8010d40 <LoRaMacCryptoSetKey+0x64>
    }
    if( keyID == APP_KEY )
 8010cfc:	79fb      	ldrb	r3, [r7, #7]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d11d      	bne.n	8010d3e <LoRaMacCryptoSetKey+0x62>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8010d02:	4b11      	ldr	r3, [pc, #68]	@ (8010d48 <LoRaMacCryptoSetKey+0x6c>)
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	789b      	ldrb	r3, [r3, #2]
 8010d08:	210b      	movs	r1, #11
 8010d0a:	4618      	mov	r0, r3
 8010d0c:	f000 fa54 	bl	80111b8 <LoRaMacCryptoDeriveLifeTimeKey>
 8010d10:	4603      	mov	r3, r0
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d001      	beq.n	8010d1a <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010d16:	230e      	movs	r3, #14
 8010d18:	e012      	b.n	8010d40 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8010d1a:	210c      	movs	r1, #12
 8010d1c:	2000      	movs	r0, #0
 8010d1e:	f000 fa4b 	bl	80111b8 <LoRaMacCryptoDeriveLifeTimeKey>
 8010d22:	4603      	mov	r3, r0
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d001      	beq.n	8010d2c <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010d28:	230e      	movs	r3, #14
 8010d2a:	e009      	b.n	8010d40 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8010d2c:	210a      	movs	r1, #10
 8010d2e:	2000      	movs	r0, #0
 8010d30:	f000 fa42 	bl	80111b8 <LoRaMacCryptoDeriveLifeTimeKey>
 8010d34:	4603      	mov	r3, r0
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d001      	beq.n	8010d3e <LoRaMacCryptoSetKey+0x62>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010d3a:	230e      	movs	r3, #14
 8010d3c:	e000      	b.n	8010d40 <LoRaMacCryptoSetKey+0x64>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8010d3e:	2300      	movs	r3, #0
}
 8010d40:	4618      	mov	r0, r3
 8010d42:	3708      	adds	r7, #8
 8010d44:	46bd      	mov	sp, r7
 8010d46:	bd80      	pop	{r7, pc}
 8010d48:	2000121c 	.word	0x2000121c

08010d4c <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 8010d4c:	b580      	push	{r7, lr}
 8010d4e:	b086      	sub	sp, #24
 8010d50:	af02      	add	r7, sp, #8
 8010d52:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d101      	bne.n	8010d5e <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010d5a:	2309      	movs	r3, #9
 8010d5c:	e02d      	b.n	8010dba <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 8010d5e:	2301      	movs	r3, #1
 8010d60:	73fb      	strb	r3, [r7, #15]
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 8010d62:	4b18      	ldr	r3, [pc, #96]	@ (8010dc4 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8010d64:	681b      	ldr	r3, [r3, #0]
 8010d66:	889a      	ldrh	r2, [r3, #4]
 8010d68:	3201      	adds	r2, #1
 8010d6a:	b292      	uxth	r2, r2
 8010d6c:	809a      	strh	r2, [r3, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8010d6e:	4b15      	ldr	r3, [pc, #84]	@ (8010dc4 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	889a      	ldrh	r2, [r3, #4]
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8010d78:	6878      	ldr	r0, [r7, #4]
 8010d7a:	f000 fc14 	bl	80115a6 <LoRaMacSerializerJoinRequest>
 8010d7e:	4603      	mov	r3, r0
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d001      	beq.n	8010d88 <LoRaMacCryptoPrepareJoinRequest+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8010d84:	2310      	movs	r3, #16
 8010d86:	e018      	b.n	8010dba <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	6819      	ldr	r1, [r3, #0]
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	3318      	adds	r3, #24
 8010d90:	7bfa      	ldrb	r2, [r7, #15]
 8010d92:	9300      	str	r3, [sp, #0]
 8010d94:	4613      	mov	r3, r2
 8010d96:	2213      	movs	r2, #19
 8010d98:	2000      	movs	r0, #0
 8010d9a:	f005 fdd1 	bl	8016940 <SecureElementComputeAesCmac>
 8010d9e:	4603      	mov	r3, r0
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d001      	beq.n	8010da8 <LoRaMacCryptoPrepareJoinRequest+0x5c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010da4:	230e      	movs	r3, #14
 8010da6:	e008      	b.n	8010dba <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8010da8:	6878      	ldr	r0, [r7, #4]
 8010daa:	f000 fbfc 	bl	80115a6 <LoRaMacSerializerJoinRequest>
 8010dae:	4603      	mov	r3, r0
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d001      	beq.n	8010db8 <LoRaMacCryptoPrepareJoinRequest+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8010db4:	2310      	movs	r3, #16
 8010db6:	e000      	b.n	8010dba <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8010db8:	2300      	movs	r3, #0
}
 8010dba:	4618      	mov	r0, r3
 8010dbc:	3710      	adds	r7, #16
 8010dbe:	46bd      	mov	sp, r7
 8010dc0:	bd80      	pop	{r7, pc}
 8010dc2:	bf00      	nop
 8010dc4:	2000121c 	.word	0x2000121c

08010dc8 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8010dc8:	b590      	push	{r4, r7, lr}
 8010dca:	b097      	sub	sp, #92	@ 0x5c
 8010dcc:	af04      	add	r7, sp, #16
 8010dce:	4603      	mov	r3, r0
 8010dd0:	60b9      	str	r1, [r7, #8]
 8010dd2:	607a      	str	r2, [r7, #4]
 8010dd4:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d002      	beq.n	8010de2 <LoRaMacCryptoHandleJoinAccept+0x1a>
 8010ddc:	68bb      	ldr	r3, [r7, #8]
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d101      	bne.n	8010de6 <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010de2:	2309      	movs	r3, #9
 8010de4:	e0d1      	b.n	8010f8a <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8010de6:	2312      	movs	r3, #18
 8010de8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8010dec:	f107 0314 	add.w	r3, r7, #20
 8010df0:	2221      	movs	r2, #33	@ 0x21
 8010df2:	2100      	movs	r1, #0
 8010df4:	4618      	mov	r0, r3
 8010df6:	f00e ff43 	bl	801fc80 <memset>
    uint8_t versionMinor         = 0;
 8010dfa:	2300      	movs	r3, #0
 8010dfc:	74fb      	strb	r3, [r7, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8010dfe:	4b65      	ldr	r3, [pc, #404]	@ (8010f94 <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	889b      	ldrh	r3, [r3, #4]
 8010e04:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* LORAMAC_VERSION */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	681c      	ldr	r4, [r3, #0]
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	791b      	ldrb	r3, [r3, #4]
 8010e10:	f8b7 1044 	ldrh.w	r1, [r7, #68]	@ 0x44
 8010e14:	7bf8      	ldrb	r0, [r7, #15]
 8010e16:	f107 0213 	add.w	r2, r7, #19
 8010e1a:	9202      	str	r2, [sp, #8]
 8010e1c:	f107 0214 	add.w	r2, r7, #20
 8010e20:	9201      	str	r2, [sp, #4]
 8010e22:	9300      	str	r3, [sp, #0]
 8010e24:	4623      	mov	r3, r4
 8010e26:	460a      	mov	r2, r1
 8010e28:	68b9      	ldr	r1, [r7, #8]
 8010e2a:	f005 fe8e 	bl	8016b4a <SecureElementProcessJoinAccept>
 8010e2e:	4603      	mov	r3, r0
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d001      	beq.n	8010e38 <LoRaMacCryptoHandleJoinAccept+0x70>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010e34:	230e      	movs	r3, #14
 8010e36:	e0a8      	b.n	8010f8a <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	6818      	ldr	r0, [r3, #0]
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	791b      	ldrb	r3, [r3, #4]
 8010e40:	461a      	mov	r2, r3
 8010e42:	f107 0314 	add.w	r3, r7, #20
 8010e46:	4619      	mov	r1, r3
 8010e48:	f005 ffd7 	bl	8016dfa <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8010e4c:	6878      	ldr	r0, [r7, #4]
 8010e4e:	f000 f9ed 	bl	801122c <LoRaMacParserJoinAccept>
 8010e52:	4603      	mov	r3, r0
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d001      	beq.n	8010e5c <LoRaMacCryptoHandleJoinAccept+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8010e58:	230f      	movs	r3, #15
 8010e5a:	e096      	b.n	8010f8a <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    uint32_t currentJoinNonce;
    bool isJoinNonceOk = false;
 8010e5c:	2300      	movs	r3, #0
 8010e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	799b      	ldrb	r3, [r3, #6]
 8010e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	79db      	ldrb	r3, [r3, #7]
 8010e6c:	021b      	lsls	r3, r3, #8
 8010e6e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010e70:	4313      	orrs	r3, r2
 8010e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	7a1b      	ldrb	r3, [r3, #8]
 8010e78:	041b      	lsls	r3, r3, #16
 8010e7a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010e7c:	4313      	orrs	r3, r2
 8010e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        isJoinNonceOk = IsJoinNonce11xOk( currentJoinNonce );
    }
    else
#endif /* LORAMAC_VERSION */
    {
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 8010e80:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8010e82:	f7ff fe4d 	bl	8010b20 <IsJoinNonce10xOk>
 8010e86:	4603      	mov	r3, r0
 8010e88:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    }

    if( isJoinNonceOk == true )
 8010e8c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d010      	beq.n	8010eb6 <LoRaMacCryptoHandleJoinAccept+0xee>
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8010e94:	4b3f      	ldr	r3, [pc, #252]	@ (8010f94 <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8010e96:	681b      	ldr	r3, [r3, #0]
 8010e98:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010e9a:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 8010e9c:	7cfb      	ldrb	r3, [r7, #19]
 8010e9e:	210b      	movs	r1, #11
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	f000 f989 	bl	80111b8 <LoRaMacCryptoDeriveLifeTimeKey>
 8010ea6:	4603      	mov	r3, r0
 8010ea8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010eac:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d005      	beq.n	8010ec0 <LoRaMacCryptoHandleJoinAccept+0xf8>
 8010eb4:	e001      	b.n	8010eba <LoRaMacCryptoHandleJoinAccept+0xf2>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8010eb6:	2303      	movs	r3, #3
 8010eb8:	e067      	b.n	8010f8a <LoRaMacCryptoHandleJoinAccept+0x1c2>
    {
        return retval;
 8010eba:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8010ebe:	e064      	b.n	8010f8a <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 8010ec0:	210c      	movs	r1, #12
 8010ec2:	2000      	movs	r0, #0
 8010ec4:	f000 f978 	bl	80111b8 <LoRaMacCryptoDeriveLifeTimeKey>
 8010ec8:	4603      	mov	r3, r0
 8010eca:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010ece:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d002      	beq.n	8010edc <LoRaMacCryptoHandleJoinAccept+0x114>
    {
        return retval;
 8010ed6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8010eda:	e056      	b.n	8010f8a <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 8010edc:	210a      	movs	r1, #10
 8010ede:	2000      	movs	r0, #0
 8010ee0:	f000 f96a 	bl	80111b8 <LoRaMacCryptoDeriveLifeTimeKey>
 8010ee4:	4603      	mov	r3, r0
 8010ee6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010eea:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d002      	beq.n	8010ef8 <LoRaMacCryptoHandleJoinAccept+0x130>
    {
        return retval;
 8010ef2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8010ef6:	e048      	b.n	8010f8a <LoRaMacCryptoHandleJoinAccept+0x1c2>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	7a5b      	ldrb	r3, [r3, #9]
 8010efc:	63bb      	str	r3, [r7, #56]	@ 0x38
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	7a9b      	ldrb	r3, [r3, #10]
 8010f02:	021b      	lsls	r3, r3, #8
 8010f04:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010f06:	4313      	orrs	r3, r2
 8010f08:	63bb      	str	r3, [r7, #56]	@ 0x38
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	7adb      	ldrb	r3, [r3, #11]
 8010f0e:	041b      	lsls	r3, r3, #16
 8010f10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010f12:	4313      	orrs	r3, r2
 8010f14:	63bb      	str	r3, [r7, #56]	@ 0x38

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8010f16:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8010f1a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010f1c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010f1e:	2009      	movs	r0, #9
 8010f20:	f7ff fcdc 	bl	80108dc <DeriveSessionKey10x>
 8010f24:	4603      	mov	r3, r0
 8010f26:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010f2a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d002      	beq.n	8010f38 <LoRaMacCryptoHandleJoinAccept+0x170>
        {
            return retval;
 8010f32:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8010f36:	e028      	b.n	8010f8a <LoRaMacCryptoHandleJoinAccept+0x1c2>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8010f38:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8010f3c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010f3e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010f40:	2008      	movs	r0, #8
 8010f42:	f7ff fccb 	bl	80108dc <DeriveSessionKey10x>
 8010f46:	4603      	mov	r3, r0
 8010f48:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#endif /* LORAMAC_VERSION */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010f4c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d002      	beq.n	8010f5a <LoRaMacCryptoHandleJoinAccept+0x192>
        {
            return retval;
 8010f54:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8010f58:	e017      	b.n	8010f8a <LoRaMacCryptoHandleJoinAccept+0x1c2>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8010f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8010f94 <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	7cfa      	ldrb	r2, [r7, #19]
 8010f60:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    RJcount0 = 0;
#endif /* LORAMAC_VERSION */
    CryptoNvm->FCntList.FCntUp = 0;
 8010f62:	4b0c      	ldr	r3, [pc, #48]	@ (8010f94 <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	2200      	movs	r2, #0
 8010f68:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 8010f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8010f94 <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8010f72:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8010f74:	4b07      	ldr	r3, [pc, #28]	@ (8010f94 <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	f04f 32ff 	mov.w	r2, #4294967295
 8010f7c:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8010f7e:	4b05      	ldr	r3, [pc, #20]	@ (8010f94 <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	f04f 32ff 	mov.w	r2, #4294967295
 8010f86:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8010f88:	2300      	movs	r3, #0
}
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	374c      	adds	r7, #76	@ 0x4c
 8010f8e:	46bd      	mov	sp, r7
 8010f90:	bd90      	pop	{r4, r7, pc}
 8010f92:	bf00      	nop
 8010f94:	2000121c 	.word	0x2000121c

08010f98 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8010f98:	b590      	push	{r4, r7, lr}
 8010f9a:	b08b      	sub	sp, #44	@ 0x2c
 8010f9c:	af04      	add	r7, sp, #16
 8010f9e:	60f8      	str	r0, [r7, #12]
 8010fa0:	607b      	str	r3, [r7, #4]
 8010fa2:	460b      	mov	r3, r1
 8010fa4:	72fb      	strb	r3, [r7, #11]
 8010fa6:	4613      	mov	r3, r2
 8010fa8:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8010faa:	2312      	movs	r3, #18
 8010fac:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8010fae:	2309      	movs	r3, #9
 8010fb0:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d101      	bne.n	8010fbc <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010fb8:	2309      	movs	r3, #9
 8010fba:	e05e      	b.n	801107a <LoRaMacCryptoSecureMessage+0xe2>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8010fbc:	4b31      	ldr	r3, [pc, #196]	@ (8011084 <LoRaMacCryptoSecureMessage+0xec>)
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	68db      	ldr	r3, [r3, #12]
 8010fc2:	68fa      	ldr	r2, [r7, #12]
 8010fc4:	429a      	cmp	r2, r3
 8010fc6:	d201      	bcs.n	8010fcc <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8010fc8:	2306      	movs	r3, #6
 8010fca:	e056      	b.n	801107a <LoRaMacCryptoSecureMessage+0xe2>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d101      	bne.n	8010fda <LoRaMacCryptoSecureMessage+0x42>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8010fd6:	2308      	movs	r3, #8
 8010fd8:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8010fda:	4b2a      	ldr	r3, [pc, #168]	@ (8011084 <LoRaMacCryptoSecureMessage+0xec>)
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	68db      	ldr	r3, [r3, #12]
 8010fe0:	68fa      	ldr	r2, [r7, #12]
 8010fe2:	429a      	cmp	r2, r3
 8010fe4:	d916      	bls.n	8011014 <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010ff0:	b219      	sxth	r1, r3
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	689c      	ldr	r4, [r3, #8]
 8010ff6:	7dfa      	ldrb	r2, [r7, #23]
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	9301      	str	r3, [sp, #4]
 8010ffc:	2300      	movs	r3, #0
 8010ffe:	9300      	str	r3, [sp, #0]
 8011000:	4623      	mov	r3, r4
 8011002:	f7ff fa79 	bl	80104f8 <PayloadEncrypt>
 8011006:	4603      	mov	r3, r0
 8011008:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 801100a:	7dbb      	ldrb	r3, [r7, #22]
 801100c:	2b00      	cmp	r3, #0
 801100e:	d001      	beq.n	8011014 <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8011010:	7dbb      	ldrb	r3, [r7, #22]
 8011012:	e032      	b.n	801107a <LoRaMacCryptoSecureMessage+0xe2>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8011014:	6878      	ldr	r0, [r7, #4]
 8011016:	f000 fb48 	bl	80116aa <LoRaMacSerializerData>
 801101a:	4603      	mov	r3, r0
 801101c:	2b00      	cmp	r3, #0
 801101e:	d001      	beq.n	8011024 <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8011020:	2310      	movs	r3, #16
 8011022:	e02a      	b.n	801107a <LoRaMacCryptoSecureMessage+0xe2>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8011024:	2308      	movs	r3, #8
 8011026:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	6818      	ldr	r0, [r3, #0]
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	791b      	ldrb	r3, [r3, #4]
 8011030:	3b04      	subs	r3, #4
 8011032:	b299      	uxth	r1, r3
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	689b      	ldr	r3, [r3, #8]
 8011038:	687a      	ldr	r2, [r7, #4]
 801103a:	322c      	adds	r2, #44	@ 0x2c
 801103c:	7dfc      	ldrb	r4, [r7, #23]
 801103e:	9203      	str	r2, [sp, #12]
 8011040:	68fa      	ldr	r2, [r7, #12]
 8011042:	9202      	str	r2, [sp, #8]
 8011044:	9301      	str	r3, [sp, #4]
 8011046:	2300      	movs	r3, #0
 8011048:	9300      	str	r3, [sp, #0]
 801104a:	2300      	movs	r3, #0
 801104c:	4622      	mov	r2, r4
 801104e:	f7ff fb52 	bl	80106f6 <ComputeCmacB0>
 8011052:	4603      	mov	r3, r0
 8011054:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011056:	7dbb      	ldrb	r3, [r7, #22]
 8011058:	2b00      	cmp	r3, #0
 801105a:	d001      	beq.n	8011060 <LoRaMacCryptoSecureMessage+0xc8>
        {
            return retval;
 801105c:	7dbb      	ldrb	r3, [r7, #22]
 801105e:	e00c      	b.n	801107a <LoRaMacCryptoSecureMessage+0xe2>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8011060:	6878      	ldr	r0, [r7, #4]
 8011062:	f000 fb22 	bl	80116aa <LoRaMacSerializerData>
 8011066:	4603      	mov	r3, r0
 8011068:	2b00      	cmp	r3, #0
 801106a:	d001      	beq.n	8011070 <LoRaMacCryptoSecureMessage+0xd8>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 801106c:	2310      	movs	r3, #16
 801106e:	e004      	b.n	801107a <LoRaMacCryptoSecureMessage+0xe2>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8011070:	4b04      	ldr	r3, [pc, #16]	@ (8011084 <LoRaMacCryptoSecureMessage+0xec>)
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	68fa      	ldr	r2, [r7, #12]
 8011076:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8011078:	2300      	movs	r3, #0
}
 801107a:	4618      	mov	r0, r3
 801107c:	371c      	adds	r7, #28
 801107e:	46bd      	mov	sp, r7
 8011080:	bd90      	pop	{r4, r7, pc}
 8011082:	bf00      	nop
 8011084:	2000121c 	.word	0x2000121c

08011088 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8011088:	b590      	push	{r4, r7, lr}
 801108a:	b08b      	sub	sp, #44	@ 0x2c
 801108c:	af04      	add	r7, sp, #16
 801108e:	60b9      	str	r1, [r7, #8]
 8011090:	607b      	str	r3, [r7, #4]
 8011092:	4603      	mov	r3, r0
 8011094:	73fb      	strb	r3, [r7, #15]
 8011096:	4613      	mov	r3, r2
 8011098:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 801109a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801109c:	2b00      	cmp	r3, #0
 801109e:	d101      	bne.n	80110a4 <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80110a0:	2309      	movs	r3, #9
 80110a2:	e083      	b.n	80111ac <LoRaMacCryptoUnsecureMessage+0x124>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 80110a4:	7bbb      	ldrb	r3, [r7, #14]
 80110a6:	6879      	ldr	r1, [r7, #4]
 80110a8:	4618      	mov	r0, r3
 80110aa:	f7ff fca1 	bl	80109f0 <CheckFCntDown>
 80110ae:	4603      	mov	r3, r0
 80110b0:	f083 0301 	eor.w	r3, r3, #1
 80110b4:	b2db      	uxtb	r3, r3
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d001      	beq.n	80110be <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 80110ba:	2306      	movs	r3, #6
 80110bc:	e076      	b.n	80111ac <LoRaMacCryptoUnsecureMessage+0x124>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 80110be:	2312      	movs	r3, #18
 80110c0:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 80110c2:	2309      	movs	r3, #9
 80110c4:	75fb      	strb	r3, [r7, #23]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 80110c6:	2308      	movs	r3, #8
 80110c8:	753b      	strb	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 80110ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80110cc:	f000 f979 	bl	80113c2 <LoRaMacParserData>
 80110d0:	4603      	mov	r3, r0
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d001      	beq.n	80110da <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 80110d6:	230f      	movs	r3, #15
 80110d8:	e068      	b.n	80111ac <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 80110da:	f107 0210 	add.w	r2, r7, #16
 80110de:	7bfb      	ldrb	r3, [r7, #15]
 80110e0:	4611      	mov	r1, r2
 80110e2:	4618      	mov	r0, r3
 80110e4:	f7ff fbd4 	bl	8010890 <GetKeyAddrItem>
 80110e8:	4603      	mov	r3, r0
 80110ea:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 80110ec:	7d7b      	ldrb	r3, [r7, #21]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d001      	beq.n	80110f6 <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 80110f2:	7d7b      	ldrb	r3, [r7, #21]
 80110f4:	e05a      	b.n	80111ac <LoRaMacCryptoUnsecureMessage+0x124>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 80110f6:	693b      	ldr	r3, [r7, #16]
 80110f8:	785b      	ldrb	r3, [r3, #1]
 80110fa:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 80110fc:	693b      	ldr	r3, [r7, #16]
 80110fe:	789b      	ldrb	r3, [r3, #2]
 8011100:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8011102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011104:	689b      	ldr	r3, [r3, #8]
 8011106:	68ba      	ldr	r2, [r7, #8]
 8011108:	429a      	cmp	r2, r3
 801110a:	d001      	beq.n	8011110 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 801110c:	2302      	movs	r3, #2
 801110e:	e04d      	b.n	80111ac <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8011110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011112:	7b1b      	ldrb	r3, [r3, #12]
 8011114:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8011118:	b2db      	uxtb	r3, r3
 801111a:	2b00      	cmp	r3, #0
 801111c:	bf14      	ite	ne
 801111e:	2301      	movne	r3, #1
 8011120:	2300      	moveq	r3, #0
 8011122:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8011124:	4b23      	ldr	r3, [pc, #140]	@ (80111b4 <LoRaMacCryptoUnsecureMessage+0x12c>)
 8011126:	681b      	ldr	r3, [r3, #0]
 8011128:	789b      	ldrb	r3, [r3, #2]
 801112a:	2b00      	cmp	r3, #0
 801112c:	d101      	bne.n	8011132 <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 801112e:	2300      	movs	r3, #0
 8011130:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8011132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011134:	6818      	ldr	r0, [r3, #0]
 8011136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011138:	791b      	ldrb	r3, [r3, #4]
 801113a:	3b04      	subs	r3, #4
 801113c:	b299      	uxth	r1, r3
 801113e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011142:	7dbc      	ldrb	r4, [r7, #22]
 8011144:	7d3a      	ldrb	r2, [r7, #20]
 8011146:	9303      	str	r3, [sp, #12]
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	9302      	str	r3, [sp, #8]
 801114c:	68bb      	ldr	r3, [r7, #8]
 801114e:	9301      	str	r3, [sp, #4]
 8011150:	2301      	movs	r3, #1
 8011152:	9300      	str	r3, [sp, #0]
 8011154:	4623      	mov	r3, r4
 8011156:	f7ff fb0c 	bl	8010772 <VerifyCmacB0>
 801115a:	4603      	mov	r3, r0
 801115c:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 801115e:	7d7b      	ldrb	r3, [r7, #21]
 8011160:	2b00      	cmp	r3, #0
 8011162:	d001      	beq.n	8011168 <LoRaMacCryptoUnsecureMessage+0xe0>
    {
        return retval;
 8011164:	7d7b      	ldrb	r3, [r7, #21]
 8011166:	e021      	b.n	80111ac <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8011168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801116a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d101      	bne.n	8011176 <LoRaMacCryptoUnsecureMessage+0xee>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8011172:	2308      	movs	r3, #8
 8011174:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8011176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011178:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801117a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801117c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011180:	b219      	sxth	r1, r3
 8011182:	7dfa      	ldrb	r2, [r7, #23]
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	9301      	str	r3, [sp, #4]
 8011188:	2301      	movs	r3, #1
 801118a:	9300      	str	r3, [sp, #0]
 801118c:	68bb      	ldr	r3, [r7, #8]
 801118e:	f7ff f9b3 	bl	80104f8 <PayloadEncrypt>
 8011192:	4603      	mov	r3, r0
 8011194:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011196:	7d7b      	ldrb	r3, [r7, #21]
 8011198:	2b00      	cmp	r3, #0
 801119a:	d001      	beq.n	80111a0 <LoRaMacCryptoUnsecureMessage+0x118>
    {
        return retval;
 801119c:	7d7b      	ldrb	r3, [r7, #21]
 801119e:	e005      	b.n	80111ac <LoRaMacCryptoUnsecureMessage+0x124>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 80111a0:	7bbb      	ldrb	r3, [r7, #14]
 80111a2:	6879      	ldr	r1, [r7, #4]
 80111a4:	4618      	mov	r0, r3
 80111a6:	f7ff fc47 	bl	8010a38 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 80111aa:	2300      	movs	r3, #0
}
 80111ac:	4618      	mov	r0, r3
 80111ae:	371c      	adds	r7, #28
 80111b0:	46bd      	mov	sp, r7
 80111b2:	bd90      	pop	{r4, r7, pc}
 80111b4:	2000121c 	.word	0x2000121c

080111b8 <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 80111b8:	b580      	push	{r7, lr}
 80111ba:	b088      	sub	sp, #32
 80111bc:	af00      	add	r7, sp, #0
 80111be:	4603      	mov	r3, r0
 80111c0:	460a      	mov	r2, r1
 80111c2:	71fb      	strb	r3, [r7, #7]
 80111c4:	4613      	mov	r3, r2
 80111c6:	71bb      	strb	r3, [r7, #6]
    uint8_t compBase[16] = { 0 };
 80111c8:	f107 030c 	add.w	r3, r7, #12
 80111cc:	2200      	movs	r2, #0
 80111ce:	601a      	str	r2, [r3, #0]
 80111d0:	605a      	str	r2, [r3, #4]
 80111d2:	609a      	str	r2, [r3, #8]
 80111d4:	60da      	str	r2, [r3, #12]
    KeyIdentifier_t rootKeyId = APP_KEY;
 80111d6:	2300      	movs	r3, #0
 80111d8:	77fb      	strb	r3, [r7, #31]
    switch( keyID )
 80111da:	79bb      	ldrb	r3, [r7, #6]
 80111dc:	2b0c      	cmp	r3, #12
 80111de:	d00b      	beq.n	80111f8 <LoRaMacCryptoDeriveLifeTimeKey+0x40>
 80111e0:	2b0c      	cmp	r3, #12
 80111e2:	dc0f      	bgt.n	8011204 <LoRaMacCryptoDeriveLifeTimeKey+0x4c>
 80111e4:	2b0a      	cmp	r3, #10
 80111e6:	d00a      	beq.n	80111fe <LoRaMacCryptoDeriveLifeTimeKey+0x46>
 80111e8:	2b0b      	cmp	r3, #11
 80111ea:	d10b      	bne.n	8011204 <LoRaMacCryptoDeriveLifeTimeKey+0x4c>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 80111ec:	79fb      	ldrb	r3, [r7, #7]
 80111ee:	2b01      	cmp	r3, #1
 80111f0:	d10a      	bne.n	8011208 <LoRaMacCryptoDeriveLifeTimeKey+0x50>
            {
                compBase[0] = 0x20;
 80111f2:	2320      	movs	r3, #32
 80111f4:	733b      	strb	r3, [r7, #12]
            }
            break;
 80111f6:	e007      	b.n	8011208 <LoRaMacCryptoDeriveLifeTimeKey+0x50>
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
 80111f8:	230b      	movs	r3, #11
 80111fa:	77fb      	strb	r3, [r7, #31]
            break;
 80111fc:	e005      	b.n	801120a <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 80111fe:	2330      	movs	r3, #48	@ 0x30
 8011200:	733b      	strb	r3, [r7, #12]
            break;
 8011202:	e002      	b.n	801120a <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8011204:	230a      	movs	r3, #10
 8011206:	e00d      	b.n	8011224 <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
            break;
 8011208:	bf00      	nop
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 801120a:	79ba      	ldrb	r2, [r7, #6]
 801120c:	7ff9      	ldrb	r1, [r7, #31]
 801120e:	f107 030c 	add.w	r3, r7, #12
 8011212:	4618      	mov	r0, r3
 8011214:	f005 fc5a 	bl	8016acc <SecureElementDeriveAndStoreKey>
 8011218:	4603      	mov	r3, r0
 801121a:	2b00      	cmp	r3, #0
 801121c:	d001      	beq.n	8011222 <LoRaMacCryptoDeriveLifeTimeKey+0x6a>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801121e:	230e      	movs	r3, #14
 8011220:	e000      	b.n	8011224 <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8011222:	2300      	movs	r3, #0
}
 8011224:	4618      	mov	r0, r3
 8011226:	3720      	adds	r7, #32
 8011228:	46bd      	mov	sp, r7
 801122a:	bd80      	pop	{r7, pc}

0801122c <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 801122c:	b580      	push	{r7, lr}
 801122e:	b084      	sub	sp, #16
 8011230:	af00      	add	r7, sp, #0
 8011232:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	2b00      	cmp	r3, #0
 8011238:	d003      	beq.n	8011242 <LoRaMacParserJoinAccept+0x16>
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	2b00      	cmp	r3, #0
 8011240:	d101      	bne.n	8011246 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8011242:	2302      	movs	r3, #2
 8011244:	e0b9      	b.n	80113ba <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8011246:	2300      	movs	r3, #0
 8011248:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	681a      	ldr	r2, [r3, #0]
 801124e:	89fb      	ldrh	r3, [r7, #14]
 8011250:	1c59      	adds	r1, r3, #1
 8011252:	81f9      	strh	r1, [r7, #14]
 8011254:	4413      	add	r3, r2
 8011256:	781a      	ldrb	r2, [r3, #0]
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	1d98      	adds	r0, r3, #6
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	681a      	ldr	r2, [r3, #0]
 8011264:	89fb      	ldrh	r3, [r7, #14]
 8011266:	4413      	add	r3, r2
 8011268:	2203      	movs	r2, #3
 801126a:	4619      	mov	r1, r3
 801126c:	f005 fdc5 	bl	8016dfa <memcpy1>
    bufItr = bufItr + 3;
 8011270:	89fb      	ldrh	r3, [r7, #14]
 8011272:	3303      	adds	r3, #3
 8011274:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	f103 0009 	add.w	r0, r3, #9
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	681a      	ldr	r2, [r3, #0]
 8011280:	89fb      	ldrh	r3, [r7, #14]
 8011282:	4413      	add	r3, r2
 8011284:	2203      	movs	r2, #3
 8011286:	4619      	mov	r1, r3
 8011288:	f005 fdb7 	bl	8016dfa <memcpy1>
    bufItr = bufItr + 3;
 801128c:	89fb      	ldrh	r3, [r7, #14]
 801128e:	3303      	adds	r3, #3
 8011290:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	681a      	ldr	r2, [r3, #0]
 8011296:	89fb      	ldrh	r3, [r7, #14]
 8011298:	1c59      	adds	r1, r3, #1
 801129a:	81f9      	strh	r1, [r7, #14]
 801129c:	4413      	add	r3, r2
 801129e:	781b      	ldrb	r3, [r3, #0]
 80112a0:	461a      	mov	r2, r3
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	681a      	ldr	r2, [r3, #0]
 80112aa:	89fb      	ldrh	r3, [r7, #14]
 80112ac:	1c59      	adds	r1, r3, #1
 80112ae:	81f9      	strh	r1, [r7, #14]
 80112b0:	4413      	add	r3, r2
 80112b2:	781b      	ldrb	r3, [r3, #0]
 80112b4:	021a      	lsls	r2, r3, #8
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	68db      	ldr	r3, [r3, #12]
 80112ba:	431a      	orrs	r2, r3
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	681a      	ldr	r2, [r3, #0]
 80112c4:	89fb      	ldrh	r3, [r7, #14]
 80112c6:	1c59      	adds	r1, r3, #1
 80112c8:	81f9      	strh	r1, [r7, #14]
 80112ca:	4413      	add	r3, r2
 80112cc:	781b      	ldrb	r3, [r3, #0]
 80112ce:	041a      	lsls	r2, r3, #16
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	68db      	ldr	r3, [r3, #12]
 80112d4:	431a      	orrs	r2, r3
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	681a      	ldr	r2, [r3, #0]
 80112de:	89fb      	ldrh	r3, [r7, #14]
 80112e0:	1c59      	adds	r1, r3, #1
 80112e2:	81f9      	strh	r1, [r7, #14]
 80112e4:	4413      	add	r3, r2
 80112e6:	781b      	ldrb	r3, [r3, #0]
 80112e8:	061a      	lsls	r2, r3, #24
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	68db      	ldr	r3, [r3, #12]
 80112ee:	431a      	orrs	r2, r3
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	681a      	ldr	r2, [r3, #0]
 80112f8:	89fb      	ldrh	r3, [r7, #14]
 80112fa:	1c59      	adds	r1, r3, #1
 80112fc:	81f9      	strh	r1, [r7, #14]
 80112fe:	4413      	add	r3, r2
 8011300:	781a      	ldrb	r2, [r3, #0]
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	681a      	ldr	r2, [r3, #0]
 801130a:	89fb      	ldrh	r3, [r7, #14]
 801130c:	1c59      	adds	r1, r3, #1
 801130e:	81f9      	strh	r1, [r7, #14]
 8011310:	4413      	add	r3, r2
 8011312:	781a      	ldrb	r2, [r3, #0]
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	791b      	ldrb	r3, [r3, #4]
 801131c:	1f1a      	subs	r2, r3, #4
 801131e:	89fb      	ldrh	r3, [r7, #14]
 8011320:	1ad3      	subs	r3, r2, r3
 8011322:	2b10      	cmp	r3, #16
 8011324:	d10e      	bne.n	8011344 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	f103 0012 	add.w	r0, r3, #18
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	681a      	ldr	r2, [r3, #0]
 8011330:	89fb      	ldrh	r3, [r7, #14]
 8011332:	4413      	add	r3, r2
 8011334:	2210      	movs	r2, #16
 8011336:	4619      	mov	r1, r3
 8011338:	f005 fd5f 	bl	8016dfa <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 801133c:	89fb      	ldrh	r3, [r7, #14]
 801133e:	3310      	adds	r3, #16
 8011340:	81fb      	strh	r3, [r7, #14]
 8011342:	e008      	b.n	8011356 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	791b      	ldrb	r3, [r3, #4]
 8011348:	1f1a      	subs	r2, r3, #4
 801134a:	89fb      	ldrh	r3, [r7, #14]
 801134c:	1ad3      	subs	r3, r2, r3
 801134e:	2b00      	cmp	r3, #0
 8011350:	dd01      	ble.n	8011356 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8011352:	2301      	movs	r3, #1
 8011354:	e031      	b.n	80113ba <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	681a      	ldr	r2, [r3, #0]
 801135a:	89fb      	ldrh	r3, [r7, #14]
 801135c:	1c59      	adds	r1, r3, #1
 801135e:	81f9      	strh	r1, [r7, #14]
 8011360:	4413      	add	r3, r2
 8011362:	781b      	ldrb	r3, [r3, #0]
 8011364:	461a      	mov	r2, r3
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	681a      	ldr	r2, [r3, #0]
 801136e:	89fb      	ldrh	r3, [r7, #14]
 8011370:	1c59      	adds	r1, r3, #1
 8011372:	81f9      	strh	r1, [r7, #14]
 8011374:	4413      	add	r3, r2
 8011376:	781b      	ldrb	r3, [r3, #0]
 8011378:	021a      	lsls	r2, r3, #8
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801137e:	431a      	orrs	r2, r3
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	681a      	ldr	r2, [r3, #0]
 8011388:	89fb      	ldrh	r3, [r7, #14]
 801138a:	1c59      	adds	r1, r3, #1
 801138c:	81f9      	strh	r1, [r7, #14]
 801138e:	4413      	add	r3, r2
 8011390:	781b      	ldrb	r3, [r3, #0]
 8011392:	041a      	lsls	r2, r3, #16
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011398:	431a      	orrs	r2, r3
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	681a      	ldr	r2, [r3, #0]
 80113a2:	89fb      	ldrh	r3, [r7, #14]
 80113a4:	1c59      	adds	r1, r3, #1
 80113a6:	81f9      	strh	r1, [r7, #14]
 80113a8:	4413      	add	r3, r2
 80113aa:	781b      	ldrb	r3, [r3, #0]
 80113ac:	061a      	lsls	r2, r3, #24
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80113b2:	431a      	orrs	r2, r3
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	625a      	str	r2, [r3, #36]	@ 0x24

    return LORAMAC_PARSER_SUCCESS;
 80113b8:	2300      	movs	r3, #0
}
 80113ba:	4618      	mov	r0, r3
 80113bc:	3710      	adds	r7, #16
 80113be:	46bd      	mov	sp, r7
 80113c0:	bd80      	pop	{r7, pc}

080113c2 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 80113c2:	b580      	push	{r7, lr}
 80113c4:	b084      	sub	sp, #16
 80113c6:	af00      	add	r7, sp, #0
 80113c8:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d003      	beq.n	80113d8 <LoRaMacParserData+0x16>
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d101      	bne.n	80113dc <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 80113d8:	2302      	movs	r3, #2
 80113da:	e0e0      	b.n	801159e <LoRaMacParserData+0x1dc>
    }

    uint16_t bufItr = 0;
 80113dc:	2300      	movs	r3, #0
 80113de:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	681a      	ldr	r2, [r3, #0]
 80113e4:	89fb      	ldrh	r3, [r7, #14]
 80113e6:	1c59      	adds	r1, r3, #1
 80113e8:	81f9      	strh	r1, [r7, #14]
 80113ea:	4413      	add	r3, r2
 80113ec:	781a      	ldrb	r2, [r3, #0]
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	681a      	ldr	r2, [r3, #0]
 80113f6:	89fb      	ldrh	r3, [r7, #14]
 80113f8:	1c59      	adds	r1, r3, #1
 80113fa:	81f9      	strh	r1, [r7, #14]
 80113fc:	4413      	add	r3, r2
 80113fe:	781b      	ldrb	r3, [r3, #0]
 8011400:	461a      	mov	r2, r3
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	681a      	ldr	r2, [r3, #0]
 801140a:	89fb      	ldrh	r3, [r7, #14]
 801140c:	1c59      	adds	r1, r3, #1
 801140e:	81f9      	strh	r1, [r7, #14]
 8011410:	4413      	add	r3, r2
 8011412:	781b      	ldrb	r3, [r3, #0]
 8011414:	021a      	lsls	r2, r3, #8
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	689b      	ldr	r3, [r3, #8]
 801141a:	431a      	orrs	r2, r3
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	681a      	ldr	r2, [r3, #0]
 8011424:	89fb      	ldrh	r3, [r7, #14]
 8011426:	1c59      	adds	r1, r3, #1
 8011428:	81f9      	strh	r1, [r7, #14]
 801142a:	4413      	add	r3, r2
 801142c:	781b      	ldrb	r3, [r3, #0]
 801142e:	041a      	lsls	r2, r3, #16
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	689b      	ldr	r3, [r3, #8]
 8011434:	431a      	orrs	r2, r3
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	681a      	ldr	r2, [r3, #0]
 801143e:	89fb      	ldrh	r3, [r7, #14]
 8011440:	1c59      	adds	r1, r3, #1
 8011442:	81f9      	strh	r1, [r7, #14]
 8011444:	4413      	add	r3, r2
 8011446:	781b      	ldrb	r3, [r3, #0]
 8011448:	061a      	lsls	r2, r3, #24
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	689b      	ldr	r3, [r3, #8]
 801144e:	431a      	orrs	r2, r3
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	681a      	ldr	r2, [r3, #0]
 8011458:	89fb      	ldrh	r3, [r7, #14]
 801145a:	1c59      	adds	r1, r3, #1
 801145c:	81f9      	strh	r1, [r7, #14]
 801145e:	4413      	add	r3, r2
 8011460:	781a      	ldrb	r2, [r3, #0]
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	681a      	ldr	r2, [r3, #0]
 801146a:	89fb      	ldrh	r3, [r7, #14]
 801146c:	1c59      	adds	r1, r3, #1
 801146e:	81f9      	strh	r1, [r7, #14]
 8011470:	4413      	add	r3, r2
 8011472:	781b      	ldrb	r3, [r3, #0]
 8011474:	461a      	mov	r2, r3
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	681a      	ldr	r2, [r3, #0]
 801147e:	89fb      	ldrh	r3, [r7, #14]
 8011480:	1c59      	adds	r1, r3, #1
 8011482:	81f9      	strh	r1, [r7, #14]
 8011484:	4413      	add	r3, r2
 8011486:	781b      	ldrb	r3, [r3, #0]
 8011488:	0219      	lsls	r1, r3, #8
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	89db      	ldrh	r3, [r3, #14]
 801148e:	b21a      	sxth	r2, r3
 8011490:	b20b      	sxth	r3, r1
 8011492:	4313      	orrs	r3, r2
 8011494:	b21b      	sxth	r3, r3
 8011496:	b29a      	uxth	r2, r3
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	81da      	strh	r2, [r3, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	f103 0010 	add.w	r0, r3, #16
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	681a      	ldr	r2, [r3, #0]
 80114a6:	89fb      	ldrh	r3, [r7, #14]
 80114a8:	18d1      	adds	r1, r2, r3
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	7b1b      	ldrb	r3, [r3, #12]
 80114ae:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80114b2:	b2db      	uxtb	r3, r3
 80114b4:	461a      	mov	r2, r3
 80114b6:	f005 fca0 	bl	8016dfa <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	7b1b      	ldrb	r3, [r3, #12]
 80114be:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80114c2:	b2db      	uxtb	r3, r3
 80114c4:	461a      	mov	r2, r3
 80114c6:	89fb      	ldrh	r3, [r7, #14]
 80114c8:	4413      	add	r3, r2
 80114ca:	81fb      	strh	r3, [r7, #14]

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	2200      	movs	r2, #0
 80114d0:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	2200      	movs	r2, #0
 80114d8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	791b      	ldrb	r3, [r3, #4]
 80114e0:	461a      	mov	r2, r3
 80114e2:	89fb      	ldrh	r3, [r7, #14]
 80114e4:	1ad3      	subs	r3, r2, r3
 80114e6:	2b04      	cmp	r3, #4
 80114e8:	dd27      	ble.n	801153a <LoRaMacParserData+0x178>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	681a      	ldr	r2, [r3, #0]
 80114ee:	89fb      	ldrh	r3, [r7, #14]
 80114f0:	1c59      	adds	r1, r3, #1
 80114f2:	81f9      	strh	r1, [r7, #14]
 80114f4:	4413      	add	r3, r2
 80114f6:	781a      	ldrb	r2, [r3, #0]
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	791a      	ldrb	r2, [r3, #4]
 8011502:	89fb      	ldrh	r3, [r7, #14]
 8011504:	b2db      	uxtb	r3, r3
 8011506:	1ad3      	subs	r3, r2, r3
 8011508:	b2db      	uxtb	r3, r3
 801150a:	3b04      	subs	r3, #4
 801150c:	b2da      	uxtb	r2, r3
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	681a      	ldr	r2, [r3, #0]
 801151c:	89fb      	ldrh	r3, [r7, #14]
 801151e:	18d1      	adds	r1, r2, r3
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011526:	461a      	mov	r2, r3
 8011528:	f005 fc67 	bl	8016dfa <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011532:	461a      	mov	r2, r3
 8011534:	89fb      	ldrh	r3, [r7, #14]
 8011536:	4413      	add	r3, r2
 8011538:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	681a      	ldr	r2, [r3, #0]
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	791b      	ldrb	r3, [r3, #4]
 8011542:	3b04      	subs	r3, #4
 8011544:	4413      	add	r3, r2
 8011546:	781b      	ldrb	r3, [r3, #0]
 8011548:	461a      	mov	r2, r3
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	6819      	ldr	r1, [r3, #0]
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	791b      	ldrb	r3, [r3, #4]
 801155a:	3b03      	subs	r3, #3
 801155c:	440b      	add	r3, r1
 801155e:	781b      	ldrb	r3, [r3, #0]
 8011560:	021b      	lsls	r3, r3, #8
 8011562:	431a      	orrs	r2, r3
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	6819      	ldr	r1, [r3, #0]
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	791b      	ldrb	r3, [r3, #4]
 8011574:	3b02      	subs	r3, #2
 8011576:	440b      	add	r3, r1
 8011578:	781b      	ldrb	r3, [r3, #0]
 801157a:	041b      	lsls	r3, r3, #16
 801157c:	431a      	orrs	r2, r3
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	6819      	ldr	r1, [r3, #0]
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	791b      	ldrb	r3, [r3, #4]
 801158e:	3b01      	subs	r3, #1
 8011590:	440b      	add	r3, r1
 8011592:	781b      	ldrb	r3, [r3, #0]
 8011594:	061b      	lsls	r3, r3, #24
 8011596:	431a      	orrs	r2, r3
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	62da      	str	r2, [r3, #44]	@ 0x2c

    return LORAMAC_PARSER_SUCCESS;
 801159c:	2300      	movs	r3, #0
}
 801159e:	4618      	mov	r0, r3
 80115a0:	3710      	adds	r7, #16
 80115a2:	46bd      	mov	sp, r7
 80115a4:	bd80      	pop	{r7, pc}

080115a6 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80115a6:	b580      	push	{r7, lr}
 80115a8:	b084      	sub	sp, #16
 80115aa:	af00      	add	r7, sp, #0
 80115ac:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d003      	beq.n	80115bc <LoRaMacSerializerJoinRequest+0x16>
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d101      	bne.n	80115c0 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80115bc:	2301      	movs	r3, #1
 80115be:	e070      	b.n	80116a2 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 80115c0:	2300      	movs	r3, #0
 80115c2:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	791b      	ldrb	r3, [r3, #4]
 80115c8:	2b16      	cmp	r3, #22
 80115ca:	d801      	bhi.n	80115d0 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80115cc:	2302      	movs	r3, #2
 80115ce:	e068      	b.n	80116a2 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	681a      	ldr	r2, [r3, #0]
 80115d4:	89fb      	ldrh	r3, [r7, #14]
 80115d6:	1c59      	adds	r1, r3, #1
 80115d8:	81f9      	strh	r1, [r7, #14]
 80115da:	4413      	add	r3, r2
 80115dc:	687a      	ldr	r2, [r7, #4]
 80115de:	7952      	ldrb	r2, [r2, #5]
 80115e0:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	681a      	ldr	r2, [r3, #0]
 80115e6:	89fb      	ldrh	r3, [r7, #14]
 80115e8:	18d0      	adds	r0, r2, r3
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	3306      	adds	r3, #6
 80115ee:	2208      	movs	r2, #8
 80115f0:	4619      	mov	r1, r3
 80115f2:	f005 fc1d 	bl	8016e30 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 80115f6:	89fb      	ldrh	r3, [r7, #14]
 80115f8:	3308      	adds	r3, #8
 80115fa:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	681a      	ldr	r2, [r3, #0]
 8011600:	89fb      	ldrh	r3, [r7, #14]
 8011602:	18d0      	adds	r0, r2, r3
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	330e      	adds	r3, #14
 8011608:	2208      	movs	r2, #8
 801160a:	4619      	mov	r1, r3
 801160c:	f005 fc10 	bl	8016e30 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8011610:	89fb      	ldrh	r3, [r7, #14]
 8011612:	3308      	adds	r3, #8
 8011614:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	8ad9      	ldrh	r1, [r3, #22]
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	681a      	ldr	r2, [r3, #0]
 801161e:	89fb      	ldrh	r3, [r7, #14]
 8011620:	1c58      	adds	r0, r3, #1
 8011622:	81f8      	strh	r0, [r7, #14]
 8011624:	4413      	add	r3, r2
 8011626:	b2ca      	uxtb	r2, r1
 8011628:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	8adb      	ldrh	r3, [r3, #22]
 801162e:	0a1b      	lsrs	r3, r3, #8
 8011630:	b299      	uxth	r1, r3
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	681a      	ldr	r2, [r3, #0]
 8011636:	89fb      	ldrh	r3, [r7, #14]
 8011638:	1c58      	adds	r0, r3, #1
 801163a:	81f8      	strh	r0, [r7, #14]
 801163c:	4413      	add	r3, r2
 801163e:	b2ca      	uxtb	r2, r1
 8011640:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	6999      	ldr	r1, [r3, #24]
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	681a      	ldr	r2, [r3, #0]
 801164a:	89fb      	ldrh	r3, [r7, #14]
 801164c:	1c58      	adds	r0, r3, #1
 801164e:	81f8      	strh	r0, [r7, #14]
 8011650:	4413      	add	r3, r2
 8011652:	b2ca      	uxtb	r2, r1
 8011654:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	699b      	ldr	r3, [r3, #24]
 801165a:	0a19      	lsrs	r1, r3, #8
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	681a      	ldr	r2, [r3, #0]
 8011660:	89fb      	ldrh	r3, [r7, #14]
 8011662:	1c58      	adds	r0, r3, #1
 8011664:	81f8      	strh	r0, [r7, #14]
 8011666:	4413      	add	r3, r2
 8011668:	b2ca      	uxtb	r2, r1
 801166a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	699b      	ldr	r3, [r3, #24]
 8011670:	0c19      	lsrs	r1, r3, #16
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	681a      	ldr	r2, [r3, #0]
 8011676:	89fb      	ldrh	r3, [r7, #14]
 8011678:	1c58      	adds	r0, r3, #1
 801167a:	81f8      	strh	r0, [r7, #14]
 801167c:	4413      	add	r3, r2
 801167e:	b2ca      	uxtb	r2, r1
 8011680:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	699b      	ldr	r3, [r3, #24]
 8011686:	0e19      	lsrs	r1, r3, #24
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	681a      	ldr	r2, [r3, #0]
 801168c:	89fb      	ldrh	r3, [r7, #14]
 801168e:	1c58      	adds	r0, r3, #1
 8011690:	81f8      	strh	r0, [r7, #14]
 8011692:	4413      	add	r3, r2
 8011694:	b2ca      	uxtb	r2, r1
 8011696:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8011698:	89fb      	ldrh	r3, [r7, #14]
 801169a:	b2da      	uxtb	r2, r3
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80116a0:	2300      	movs	r3, #0
}
 80116a2:	4618      	mov	r0, r3
 80116a4:	3710      	adds	r7, #16
 80116a6:	46bd      	mov	sp, r7
 80116a8:	bd80      	pop	{r7, pc}

080116aa <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 80116aa:	b580      	push	{r7, lr}
 80116ac:	b084      	sub	sp, #16
 80116ae:	af00      	add	r7, sp, #0
 80116b0:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d003      	beq.n	80116c0 <LoRaMacSerializerData+0x16>
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d101      	bne.n	80116c4 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80116c0:	2301      	movs	r3, #1
 80116c2:	e0e3      	b.n	801188c <LoRaMacSerializerData+0x1e2>
    }

    uint16_t bufItr = 0;
 80116c4:	2300      	movs	r3, #0
 80116c6:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 80116c8:	2308      	movs	r3, #8
 80116ca:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	7b1b      	ldrb	r3, [r3, #12]
 80116d0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80116d4:	b2db      	uxtb	r3, r3
 80116d6:	461a      	mov	r2, r3
 80116d8:	89bb      	ldrh	r3, [r7, #12]
 80116da:	4413      	add	r3, r2
 80116dc:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d002      	beq.n	80116ee <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 80116e8:	89bb      	ldrh	r3, [r7, #12]
 80116ea:	3301      	adds	r3, #1
 80116ec:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80116f4:	461a      	mov	r2, r3
 80116f6:	89bb      	ldrh	r3, [r7, #12]
 80116f8:	4413      	add	r3, r2
 80116fa:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 80116fc:	89bb      	ldrh	r3, [r7, #12]
 80116fe:	3304      	adds	r3, #4
 8011700:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	791b      	ldrb	r3, [r3, #4]
 8011706:	461a      	mov	r2, r3
 8011708:	89bb      	ldrh	r3, [r7, #12]
 801170a:	4293      	cmp	r3, r2
 801170c:	d901      	bls.n	8011712 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 801170e:	2302      	movs	r3, #2
 8011710:	e0bc      	b.n	801188c <LoRaMacSerializerData+0x1e2>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	681a      	ldr	r2, [r3, #0]
 8011716:	89fb      	ldrh	r3, [r7, #14]
 8011718:	1c59      	adds	r1, r3, #1
 801171a:	81f9      	strh	r1, [r7, #14]
 801171c:	4413      	add	r3, r2
 801171e:	687a      	ldr	r2, [r7, #4]
 8011720:	7952      	ldrb	r2, [r2, #5]
 8011722:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	6899      	ldr	r1, [r3, #8]
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	681a      	ldr	r2, [r3, #0]
 801172c:	89fb      	ldrh	r3, [r7, #14]
 801172e:	1c58      	adds	r0, r3, #1
 8011730:	81f8      	strh	r0, [r7, #14]
 8011732:	4413      	add	r3, r2
 8011734:	b2ca      	uxtb	r2, r1
 8011736:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	689b      	ldr	r3, [r3, #8]
 801173c:	0a19      	lsrs	r1, r3, #8
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	681a      	ldr	r2, [r3, #0]
 8011742:	89fb      	ldrh	r3, [r7, #14]
 8011744:	1c58      	adds	r0, r3, #1
 8011746:	81f8      	strh	r0, [r7, #14]
 8011748:	4413      	add	r3, r2
 801174a:	b2ca      	uxtb	r2, r1
 801174c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	689b      	ldr	r3, [r3, #8]
 8011752:	0c19      	lsrs	r1, r3, #16
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	681a      	ldr	r2, [r3, #0]
 8011758:	89fb      	ldrh	r3, [r7, #14]
 801175a:	1c58      	adds	r0, r3, #1
 801175c:	81f8      	strh	r0, [r7, #14]
 801175e:	4413      	add	r3, r2
 8011760:	b2ca      	uxtb	r2, r1
 8011762:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	689b      	ldr	r3, [r3, #8]
 8011768:	0e19      	lsrs	r1, r3, #24
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	681a      	ldr	r2, [r3, #0]
 801176e:	89fb      	ldrh	r3, [r7, #14]
 8011770:	1c58      	adds	r0, r3, #1
 8011772:	81f8      	strh	r0, [r7, #14]
 8011774:	4413      	add	r3, r2
 8011776:	b2ca      	uxtb	r2, r1
 8011778:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	681a      	ldr	r2, [r3, #0]
 801177e:	89fb      	ldrh	r3, [r7, #14]
 8011780:	1c59      	adds	r1, r3, #1
 8011782:	81f9      	strh	r1, [r7, #14]
 8011784:	4413      	add	r3, r2
 8011786:	687a      	ldr	r2, [r7, #4]
 8011788:	7b12      	ldrb	r2, [r2, #12]
 801178a:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	89d9      	ldrh	r1, [r3, #14]
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	681a      	ldr	r2, [r3, #0]
 8011794:	89fb      	ldrh	r3, [r7, #14]
 8011796:	1c58      	adds	r0, r3, #1
 8011798:	81f8      	strh	r0, [r7, #14]
 801179a:	4413      	add	r3, r2
 801179c:	b2ca      	uxtb	r2, r1
 801179e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	89db      	ldrh	r3, [r3, #14]
 80117a4:	0a1b      	lsrs	r3, r3, #8
 80117a6:	b299      	uxth	r1, r3
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	681a      	ldr	r2, [r3, #0]
 80117ac:	89fb      	ldrh	r3, [r7, #14]
 80117ae:	1c58      	adds	r0, r3, #1
 80117b0:	81f8      	strh	r0, [r7, #14]
 80117b2:	4413      	add	r3, r2
 80117b4:	b2ca      	uxtb	r2, r1
 80117b6:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	681a      	ldr	r2, [r3, #0]
 80117bc:	89fb      	ldrh	r3, [r7, #14]
 80117be:	18d0      	adds	r0, r2, r3
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	f103 0110 	add.w	r1, r3, #16
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	7b1b      	ldrb	r3, [r3, #12]
 80117ca:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80117ce:	b2db      	uxtb	r3, r3
 80117d0:	461a      	mov	r2, r3
 80117d2:	f005 fb12 	bl	8016dfa <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	7b1b      	ldrb	r3, [r3, #12]
 80117da:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80117de:	b2db      	uxtb	r3, r3
 80117e0:	461a      	mov	r2, r3
 80117e2:	89fb      	ldrh	r3, [r7, #14]
 80117e4:	4413      	add	r3, r2
 80117e6:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d009      	beq.n	8011806 <LoRaMacSerializerData+0x15c>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	681a      	ldr	r2, [r3, #0]
 80117f6:	89fb      	ldrh	r3, [r7, #14]
 80117f8:	1c59      	adds	r1, r3, #1
 80117fa:	81f9      	strh	r1, [r7, #14]
 80117fc:	4413      	add	r3, r2
 80117fe:	687a      	ldr	r2, [r7, #4]
 8011800:	f892 2020 	ldrb.w	r2, [r2, #32]
 8011804:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	681a      	ldr	r2, [r3, #0]
 801180a:	89fb      	ldrh	r3, [r7, #14]
 801180c:	18d0      	adds	r0, r2, r3
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011818:	461a      	mov	r2, r3
 801181a:	f005 faee 	bl	8016dfa <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011824:	461a      	mov	r2, r3
 8011826:	89fb      	ldrh	r3, [r7, #14]
 8011828:	4413      	add	r3, r2
 801182a:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	681a      	ldr	r2, [r3, #0]
 8011834:	89fb      	ldrh	r3, [r7, #14]
 8011836:	1c58      	adds	r0, r3, #1
 8011838:	81f8      	strh	r0, [r7, #14]
 801183a:	4413      	add	r3, r2
 801183c:	b2ca      	uxtb	r2, r1
 801183e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011844:	0a19      	lsrs	r1, r3, #8
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	681a      	ldr	r2, [r3, #0]
 801184a:	89fb      	ldrh	r3, [r7, #14]
 801184c:	1c58      	adds	r0, r3, #1
 801184e:	81f8      	strh	r0, [r7, #14]
 8011850:	4413      	add	r3, r2
 8011852:	b2ca      	uxtb	r2, r1
 8011854:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801185a:	0c19      	lsrs	r1, r3, #16
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	681a      	ldr	r2, [r3, #0]
 8011860:	89fb      	ldrh	r3, [r7, #14]
 8011862:	1c58      	adds	r0, r3, #1
 8011864:	81f8      	strh	r0, [r7, #14]
 8011866:	4413      	add	r3, r2
 8011868:	b2ca      	uxtb	r2, r1
 801186a:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011870:	0e19      	lsrs	r1, r3, #24
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	681a      	ldr	r2, [r3, #0]
 8011876:	89fb      	ldrh	r3, [r7, #14]
 8011878:	1c58      	adds	r0, r3, #1
 801187a:	81f8      	strh	r0, [r7, #14]
 801187c:	4413      	add	r3, r2
 801187e:	b2ca      	uxtb	r2, r1
 8011880:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 8011882:	89fb      	ldrh	r3, [r7, #14]
 8011884:	b2da      	uxtb	r2, r3
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 801188a:	2300      	movs	r3, #0
}
 801188c:	4618      	mov	r0, r3
 801188e:	3710      	adds	r7, #16
 8011890:	46bd      	mov	sp, r7
 8011892:	bd80      	pop	{r7, pc}

08011894 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 8011894:	b480      	push	{r7}
 8011896:	b083      	sub	sp, #12
 8011898:	af00      	add	r7, sp, #0
 801189a:	4603      	mov	r3, r0
 801189c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801189e:	79fb      	ldrb	r3, [r7, #7]
 80118a0:	2b05      	cmp	r3, #5
 80118a2:	d002      	beq.n	80118aa <RegionIsActive+0x16>
 80118a4:	2b08      	cmp	r3, #8
 80118a6:	d002      	beq.n	80118ae <RegionIsActive+0x1a>
 80118a8:	e003      	b.n	80118b2 <RegionIsActive+0x1e>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 80118aa:	2301      	movs	r3, #1
 80118ac:	e002      	b.n	80118b4 <RegionIsActive+0x20>
        KR920_IS_ACTIVE( );
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
 80118ae:	2301      	movs	r3, #1
 80118b0:	e000      	b.n	80118b4 <RegionIsActive+0x20>
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 80118b2:	2300      	movs	r3, #0
        }
    }
}
 80118b4:	4618      	mov	r0, r3
 80118b6:	370c      	adds	r7, #12
 80118b8:	46bd      	mov	sp, r7
 80118ba:	bc80      	pop	{r7}
 80118bc:	4770      	bx	lr

080118be <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 80118be:	b580      	push	{r7, lr}
 80118c0:	b084      	sub	sp, #16
 80118c2:	af00      	add	r7, sp, #0
 80118c4:	4603      	mov	r3, r0
 80118c6:	6039      	str	r1, [r7, #0]
 80118c8:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 80118ca:	2300      	movs	r3, #0
 80118cc:	60bb      	str	r3, [r7, #8]
    switch( region )
 80118ce:	79fb      	ldrb	r3, [r7, #7]
 80118d0:	2b05      	cmp	r3, #5
 80118d2:	d002      	beq.n	80118da <RegionGetPhyParam+0x1c>
 80118d4:	2b08      	cmp	r3, #8
 80118d6:	d006      	beq.n	80118e6 <RegionGetPhyParam+0x28>
 80118d8:	e00b      	b.n	80118f2 <RegionGetPhyParam+0x34>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 80118da:	6838      	ldr	r0, [r7, #0]
 80118dc:	f001 fad0 	bl	8012e80 <RegionEU868GetPhyParam>
 80118e0:	4603      	mov	r3, r0
 80118e2:	60fb      	str	r3, [r7, #12]
 80118e4:	e007      	b.n	80118f6 <RegionGetPhyParam+0x38>
        KR920_GET_PHY_PARAM( );
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
 80118e6:	6838      	ldr	r0, [r7, #0]
 80118e8:	f002 fc50 	bl	801418c <RegionUS915GetPhyParam>
 80118ec:	4603      	mov	r3, r0
 80118ee:	60fb      	str	r3, [r7, #12]
 80118f0:	e001      	b.n	80118f6 <RegionGetPhyParam+0x38>
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 80118f2:	68bb      	ldr	r3, [r7, #8]
 80118f4:	60fb      	str	r3, [r7, #12]
        }
    }
}
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	4618      	mov	r0, r3
 80118fa:	3710      	adds	r7, #16
 80118fc:	46bd      	mov	sp, r7
 80118fe:	bd80      	pop	{r7, pc}

08011900 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8011900:	b580      	push	{r7, lr}
 8011902:	b082      	sub	sp, #8
 8011904:	af00      	add	r7, sp, #0
 8011906:	4603      	mov	r3, r0
 8011908:	6039      	str	r1, [r7, #0]
 801190a:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801190c:	79fb      	ldrb	r3, [r7, #7]
 801190e:	2b05      	cmp	r3, #5
 8011910:	d002      	beq.n	8011918 <RegionSetBandTxDone+0x18>
 8011912:	2b08      	cmp	r3, #8
 8011914:	d004      	beq.n	8011920 <RegionSetBandTxDone+0x20>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 8011916:	e006      	b.n	8011926 <RegionSetBandTxDone+0x26>
        EU868_SET_BAND_TX_DONE( );
 8011918:	6838      	ldr	r0, [r7, #0]
 801191a:	f001 fbf7 	bl	801310c <RegionEU868SetBandTxDone>
 801191e:	e002      	b.n	8011926 <RegionSetBandTxDone+0x26>
        US915_SET_BAND_TX_DONE( );
 8011920:	6838      	ldr	r0, [r7, #0]
 8011922:	f002 fd8f 	bl	8014444 <RegionUS915SetBandTxDone>
        }
    }
}
 8011926:	3708      	adds	r7, #8
 8011928:	46bd      	mov	sp, r7
 801192a:	bd80      	pop	{r7, pc}

0801192c <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 801192c:	b580      	push	{r7, lr}
 801192e:	b082      	sub	sp, #8
 8011930:	af00      	add	r7, sp, #0
 8011932:	4603      	mov	r3, r0
 8011934:	6039      	str	r1, [r7, #0]
 8011936:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8011938:	79fb      	ldrb	r3, [r7, #7]
 801193a:	2b05      	cmp	r3, #5
 801193c:	d002      	beq.n	8011944 <RegionInitDefaults+0x18>
 801193e:	2b08      	cmp	r3, #8
 8011940:	d004      	beq.n	801194c <RegionInitDefaults+0x20>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8011942:	e006      	b.n	8011952 <RegionInitDefaults+0x26>
        EU868_INIT_DEFAULTS( );
 8011944:	6838      	ldr	r0, [r7, #0]
 8011946:	f001 fc0d 	bl	8013164 <RegionEU868InitDefaults>
 801194a:	e002      	b.n	8011952 <RegionInitDefaults+0x26>
        US915_INIT_DEFAULTS( );
 801194c:	6838      	ldr	r0, [r7, #0]
 801194e:	f002 fda5 	bl	801449c <RegionUS915InitDefaults>
        }
    }
}
 8011952:	bf00      	nop
 8011954:	3708      	adds	r7, #8
 8011956:	46bd      	mov	sp, r7
 8011958:	bd80      	pop	{r7, pc}

0801195a <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 801195a:	b580      	push	{r7, lr}
 801195c:	b082      	sub	sp, #8
 801195e:	af00      	add	r7, sp, #0
 8011960:	4603      	mov	r3, r0
 8011962:	6039      	str	r1, [r7, #0]
 8011964:	71fb      	strb	r3, [r7, #7]
 8011966:	4613      	mov	r3, r2
 8011968:	71bb      	strb	r3, [r7, #6]
    switch( region )
 801196a:	79fb      	ldrb	r3, [r7, #7]
 801196c:	2b05      	cmp	r3, #5
 801196e:	d002      	beq.n	8011976 <RegionVerify+0x1c>
 8011970:	2b08      	cmp	r3, #8
 8011972:	d007      	beq.n	8011984 <RegionVerify+0x2a>
 8011974:	e00d      	b.n	8011992 <RegionVerify+0x38>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8011976:	79bb      	ldrb	r3, [r7, #6]
 8011978:	4619      	mov	r1, r3
 801197a:	6838      	ldr	r0, [r7, #0]
 801197c:	f001 fc90 	bl	80132a0 <RegionEU868Verify>
 8011980:	4603      	mov	r3, r0
 8011982:	e007      	b.n	8011994 <RegionVerify+0x3a>
        KR920_VERIFY( );
        IN865_VERIFY( );
        US915_VERIFY( );
 8011984:	79bb      	ldrb	r3, [r7, #6]
 8011986:	4619      	mov	r1, r3
 8011988:	6838      	ldr	r0, [r7, #0]
 801198a:	f002 feb9 	bl	8014700 <RegionUS915Verify>
 801198e:	4603      	mov	r3, r0
 8011990:	e000      	b.n	8011994 <RegionVerify+0x3a>
        RU864_VERIFY( );
        default:
        {
            return false;
 8011992:	2300      	movs	r3, #0
        }
    }
}
 8011994:	4618      	mov	r0, r3
 8011996:	3708      	adds	r7, #8
 8011998:	46bd      	mov	sp, r7
 801199a:	bd80      	pop	{r7, pc}

0801199c <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 801199c:	b580      	push	{r7, lr}
 801199e:	b082      	sub	sp, #8
 80119a0:	af00      	add	r7, sp, #0
 80119a2:	4603      	mov	r3, r0
 80119a4:	6039      	str	r1, [r7, #0]
 80119a6:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80119a8:	79fb      	ldrb	r3, [r7, #7]
 80119aa:	2b05      	cmp	r3, #5
 80119ac:	d002      	beq.n	80119b4 <RegionApplyCFList+0x18>
 80119ae:	2b08      	cmp	r3, #8
 80119b0:	d004      	beq.n	80119bc <RegionApplyCFList+0x20>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 80119b2:	e006      	b.n	80119c2 <RegionApplyCFList+0x26>
        EU868_APPLY_CF_LIST( );
 80119b4:	6838      	ldr	r0, [r7, #0]
 80119b6:	f001 fcef 	bl	8013398 <RegionEU868ApplyCFList>
 80119ba:	e002      	b.n	80119c2 <RegionApplyCFList+0x26>
        US915_APPLY_CF_LIST( );
 80119bc:	6838      	ldr	r0, [r7, #0]
 80119be:	f002 ff15 	bl	80147ec <RegionUS915ApplyCFList>
        }
    }
}
 80119c2:	bf00      	nop
 80119c4:	3708      	adds	r7, #8
 80119c6:	46bd      	mov	sp, r7
 80119c8:	bd80      	pop	{r7, pc}

080119ca <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 80119ca:	b580      	push	{r7, lr}
 80119cc:	b082      	sub	sp, #8
 80119ce:	af00      	add	r7, sp, #0
 80119d0:	4603      	mov	r3, r0
 80119d2:	6039      	str	r1, [r7, #0]
 80119d4:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80119d6:	79fb      	ldrb	r3, [r7, #7]
 80119d8:	2b05      	cmp	r3, #5
 80119da:	d002      	beq.n	80119e2 <RegionChanMaskSet+0x18>
 80119dc:	2b08      	cmp	r3, #8
 80119de:	d005      	beq.n	80119ec <RegionChanMaskSet+0x22>
 80119e0:	e009      	b.n	80119f6 <RegionChanMaskSet+0x2c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 80119e2:	6838      	ldr	r0, [r7, #0]
 80119e4:	f001 fd4c 	bl	8013480 <RegionEU868ChanMaskSet>
 80119e8:	4603      	mov	r3, r0
 80119ea:	e005      	b.n	80119f8 <RegionChanMaskSet+0x2e>
        KR920_CHAN_MASK_SET( );
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
 80119ec:	6838      	ldr	r0, [r7, #0]
 80119ee:	f002 ff6f 	bl	80148d0 <RegionUS915ChanMaskSet>
 80119f2:	4603      	mov	r3, r0
 80119f4:	e000      	b.n	80119f8 <RegionChanMaskSet+0x2e>
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 80119f6:	2300      	movs	r3, #0
        }
    }
}
 80119f8:	4618      	mov	r0, r3
 80119fa:	3708      	adds	r7, #8
 80119fc:	46bd      	mov	sp, r7
 80119fe:	bd80      	pop	{r7, pc}

08011a00 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8011a00:	b580      	push	{r7, lr}
 8011a02:	b082      	sub	sp, #8
 8011a04:	af00      	add	r7, sp, #0
 8011a06:	603b      	str	r3, [r7, #0]
 8011a08:	4603      	mov	r3, r0
 8011a0a:	71fb      	strb	r3, [r7, #7]
 8011a0c:	460b      	mov	r3, r1
 8011a0e:	71bb      	strb	r3, [r7, #6]
 8011a10:	4613      	mov	r3, r2
 8011a12:	717b      	strb	r3, [r7, #5]
    switch( region )
 8011a14:	79fb      	ldrb	r3, [r7, #7]
 8011a16:	2b05      	cmp	r3, #5
 8011a18:	d002      	beq.n	8011a20 <RegionComputeRxWindowParameters+0x20>
 8011a1a:	2b08      	cmp	r3, #8
 8011a1c:	d008      	beq.n	8011a30 <RegionComputeRxWindowParameters+0x30>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8011a1e:	e00e      	b.n	8011a3e <RegionComputeRxWindowParameters+0x3e>
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8011a20:	7979      	ldrb	r1, [r7, #5]
 8011a22:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8011a26:	693b      	ldr	r3, [r7, #16]
 8011a28:	683a      	ldr	r2, [r7, #0]
 8011a2a:	f001 fd53 	bl	80134d4 <RegionEU868ComputeRxWindowParameters>
 8011a2e:	e006      	b.n	8011a3e <RegionComputeRxWindowParameters+0x3e>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 8011a30:	7979      	ldrb	r1, [r7, #5]
 8011a32:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8011a36:	693b      	ldr	r3, [r7, #16]
 8011a38:	683a      	ldr	r2, [r7, #0]
 8011a3a:	f002 ffb1 	bl	80149a0 <RegionUS915ComputeRxWindowParameters>
        }
    }
}
 8011a3e:	bf00      	nop
 8011a40:	3708      	adds	r7, #8
 8011a42:	46bd      	mov	sp, r7
 8011a44:	bd80      	pop	{r7, pc}

08011a46 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8011a46:	b580      	push	{r7, lr}
 8011a48:	b084      	sub	sp, #16
 8011a4a:	af00      	add	r7, sp, #0
 8011a4c:	4603      	mov	r3, r0
 8011a4e:	60b9      	str	r1, [r7, #8]
 8011a50:	607a      	str	r2, [r7, #4]
 8011a52:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8011a54:	7bfb      	ldrb	r3, [r7, #15]
 8011a56:	2b05      	cmp	r3, #5
 8011a58:	d002      	beq.n	8011a60 <RegionRxConfig+0x1a>
 8011a5a:	2b08      	cmp	r3, #8
 8011a5c:	d006      	beq.n	8011a6c <RegionRxConfig+0x26>
 8011a5e:	e00b      	b.n	8011a78 <RegionRxConfig+0x32>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 8011a60:	6879      	ldr	r1, [r7, #4]
 8011a62:	68b8      	ldr	r0, [r7, #8]
 8011a64:	f001 fd90 	bl	8013588 <RegionEU868RxConfig>
 8011a68:	4603      	mov	r3, r0
 8011a6a:	e006      	b.n	8011a7a <RegionRxConfig+0x34>
        KR920_RX_CONFIG( );
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
 8011a6c:	6879      	ldr	r1, [r7, #4]
 8011a6e:	68b8      	ldr	r0, [r7, #8]
 8011a70:	f002 ffe0 	bl	8014a34 <RegionUS915RxConfig>
 8011a74:	4603      	mov	r3, r0
 8011a76:	e000      	b.n	8011a7a <RegionRxConfig+0x34>
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8011a78:	2300      	movs	r3, #0
        }
    }
}
 8011a7a:	4618      	mov	r0, r3
 8011a7c:	3710      	adds	r7, #16
 8011a7e:	46bd      	mov	sp, r7
 8011a80:	bd80      	pop	{r7, pc}

08011a82 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8011a82:	b580      	push	{r7, lr}
 8011a84:	b084      	sub	sp, #16
 8011a86:	af00      	add	r7, sp, #0
 8011a88:	60b9      	str	r1, [r7, #8]
 8011a8a:	607a      	str	r2, [r7, #4]
 8011a8c:	603b      	str	r3, [r7, #0]
 8011a8e:	4603      	mov	r3, r0
 8011a90:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8011a92:	7bfb      	ldrb	r3, [r7, #15]
 8011a94:	2b05      	cmp	r3, #5
 8011a96:	d002      	beq.n	8011a9e <RegionTxConfig+0x1c>
 8011a98:	2b08      	cmp	r3, #8
 8011a9a:	d007      	beq.n	8011aac <RegionTxConfig+0x2a>
 8011a9c:	e00d      	b.n	8011aba <RegionTxConfig+0x38>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8011a9e:	683a      	ldr	r2, [r7, #0]
 8011aa0:	6879      	ldr	r1, [r7, #4]
 8011aa2:	68b8      	ldr	r0, [r7, #8]
 8011aa4:	f001 fe40 	bl	8013728 <RegionEU868TxConfig>
 8011aa8:	4603      	mov	r3, r0
 8011aaa:	e007      	b.n	8011abc <RegionTxConfig+0x3a>
        KR920_TX_CONFIG( );
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
 8011aac:	683a      	ldr	r2, [r7, #0]
 8011aae:	6879      	ldr	r1, [r7, #4]
 8011ab0:	68b8      	ldr	r0, [r7, #8]
 8011ab2:	f003 f843 	bl	8014b3c <RegionUS915TxConfig>
 8011ab6:	4603      	mov	r3, r0
 8011ab8:	e000      	b.n	8011abc <RegionTxConfig+0x3a>
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8011aba:	2300      	movs	r3, #0
        }
    }
}
 8011abc:	4618      	mov	r0, r3
 8011abe:	3710      	adds	r7, #16
 8011ac0:	46bd      	mov	sp, r7
 8011ac2:	bd80      	pop	{r7, pc}

08011ac4 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8011ac4:	b580      	push	{r7, lr}
 8011ac6:	b086      	sub	sp, #24
 8011ac8:	af02      	add	r7, sp, #8
 8011aca:	60b9      	str	r1, [r7, #8]
 8011acc:	607a      	str	r2, [r7, #4]
 8011ace:	603b      	str	r3, [r7, #0]
 8011ad0:	4603      	mov	r3, r0
 8011ad2:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8011ad4:	7bfb      	ldrb	r3, [r7, #15]
 8011ad6:	2b05      	cmp	r3, #5
 8011ad8:	d002      	beq.n	8011ae0 <RegionLinkAdrReq+0x1c>
 8011ada:	2b08      	cmp	r3, #8
 8011adc:	d00a      	beq.n	8011af4 <RegionLinkAdrReq+0x30>
 8011ade:	e013      	b.n	8011b08 <RegionLinkAdrReq+0x44>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8011ae0:	69fb      	ldr	r3, [r7, #28]
 8011ae2:	9300      	str	r3, [sp, #0]
 8011ae4:	69bb      	ldr	r3, [r7, #24]
 8011ae6:	683a      	ldr	r2, [r7, #0]
 8011ae8:	6879      	ldr	r1, [r7, #4]
 8011aea:	68b8      	ldr	r0, [r7, #8]
 8011aec:	f001 feec 	bl	80138c8 <RegionEU868LinkAdrReq>
 8011af0:	4603      	mov	r3, r0
 8011af2:	e00a      	b.n	8011b0a <RegionLinkAdrReq+0x46>
        KR920_LINK_ADR_REQ( );
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
 8011af4:	69fb      	ldr	r3, [r7, #28]
 8011af6:	9300      	str	r3, [sp, #0]
 8011af8:	69bb      	ldr	r3, [r7, #24]
 8011afa:	683a      	ldr	r2, [r7, #0]
 8011afc:	6879      	ldr	r1, [r7, #4]
 8011afe:	68b8      	ldr	r0, [r7, #8]
 8011b00:	f003 f8c6 	bl	8014c90 <RegionUS915LinkAdrReq>
 8011b04:	4603      	mov	r3, r0
 8011b06:	e000      	b.n	8011b0a <RegionLinkAdrReq+0x46>
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8011b08:	2300      	movs	r3, #0
        }
    }
}
 8011b0a:	4618      	mov	r0, r3
 8011b0c:	3710      	adds	r7, #16
 8011b0e:	46bd      	mov	sp, r7
 8011b10:	bd80      	pop	{r7, pc}

08011b12 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 8011b12:	b580      	push	{r7, lr}
 8011b14:	b082      	sub	sp, #8
 8011b16:	af00      	add	r7, sp, #0
 8011b18:	4603      	mov	r3, r0
 8011b1a:	6039      	str	r1, [r7, #0]
 8011b1c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8011b1e:	79fb      	ldrb	r3, [r7, #7]
 8011b20:	2b05      	cmp	r3, #5
 8011b22:	d002      	beq.n	8011b2a <RegionRxParamSetupReq+0x18>
 8011b24:	2b08      	cmp	r3, #8
 8011b26:	d005      	beq.n	8011b34 <RegionRxParamSetupReq+0x22>
 8011b28:	e009      	b.n	8011b3e <RegionRxParamSetupReq+0x2c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8011b2a:	6838      	ldr	r0, [r7, #0]
 8011b2c:	f001 ffee 	bl	8013b0c <RegionEU868RxParamSetupReq>
 8011b30:	4603      	mov	r3, r0
 8011b32:	e005      	b.n	8011b40 <RegionRxParamSetupReq+0x2e>
        KR920_RX_PARAM_SETUP_REQ( );
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
 8011b34:	6838      	ldr	r0, [r7, #0]
 8011b36:	f003 fac5 	bl	80150c4 <RegionUS915RxParamSetupReq>
 8011b3a:	4603      	mov	r3, r0
 8011b3c:	e000      	b.n	8011b40 <RegionRxParamSetupReq+0x2e>
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8011b3e:	2300      	movs	r3, #0
        }
    }
}
 8011b40:	4618      	mov	r0, r3
 8011b42:	3708      	adds	r7, #8
 8011b44:	46bd      	mov	sp, r7
 8011b46:	bd80      	pop	{r7, pc}

08011b48 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 8011b48:	b580      	push	{r7, lr}
 8011b4a:	b082      	sub	sp, #8
 8011b4c:	af00      	add	r7, sp, #0
 8011b4e:	4603      	mov	r3, r0
 8011b50:	6039      	str	r1, [r7, #0]
 8011b52:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8011b54:	79fb      	ldrb	r3, [r7, #7]
 8011b56:	2b05      	cmp	r3, #5
 8011b58:	d002      	beq.n	8011b60 <RegionNewChannelReq+0x18>
 8011b5a:	2b08      	cmp	r3, #8
 8011b5c:	d005      	beq.n	8011b6a <RegionNewChannelReq+0x22>
 8011b5e:	e009      	b.n	8011b74 <RegionNewChannelReq+0x2c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 8011b60:	6838      	ldr	r0, [r7, #0]
 8011b62:	f002 f811 	bl	8013b88 <RegionEU868NewChannelReq>
 8011b66:	4603      	mov	r3, r0
 8011b68:	e005      	b.n	8011b76 <RegionNewChannelReq+0x2e>
        KR920_NEW_CHANNEL_REQ( );
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
 8011b6a:	6838      	ldr	r0, [r7, #0]
 8011b6c:	f003 faf6 	bl	801515c <RegionUS915NewChannelReq>
 8011b70:	4603      	mov	r3, r0
 8011b72:	e000      	b.n	8011b76 <RegionNewChannelReq+0x2e>
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8011b74:	2300      	movs	r3, #0
        }
    }
}
 8011b76:	4618      	mov	r0, r3
 8011b78:	3708      	adds	r7, #8
 8011b7a:	46bd      	mov	sp, r7
 8011b7c:	bd80      	pop	{r7, pc}

08011b7e <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 8011b7e:	b580      	push	{r7, lr}
 8011b80:	b082      	sub	sp, #8
 8011b82:	af00      	add	r7, sp, #0
 8011b84:	4603      	mov	r3, r0
 8011b86:	6039      	str	r1, [r7, #0]
 8011b88:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8011b8a:	79fb      	ldrb	r3, [r7, #7]
 8011b8c:	2b05      	cmp	r3, #5
 8011b8e:	d002      	beq.n	8011b96 <RegionTxParamSetupReq+0x18>
 8011b90:	2b08      	cmp	r3, #8
 8011b92:	d005      	beq.n	8011ba0 <RegionTxParamSetupReq+0x22>
 8011b94:	e009      	b.n	8011baa <RegionTxParamSetupReq+0x2c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 8011b96:	6838      	ldr	r0, [r7, #0]
 8011b98:	f002 f854 	bl	8013c44 <RegionEU868TxParamSetupReq>
 8011b9c:	4603      	mov	r3, r0
 8011b9e:	e005      	b.n	8011bac <RegionTxParamSetupReq+0x2e>
        KR920_TX_PARAM_SETUP_REQ( );
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
 8011ba0:	6838      	ldr	r0, [r7, #0]
 8011ba2:	f003 fae6 	bl	8015172 <RegionUS915TxParamSetupReq>
 8011ba6:	4603      	mov	r3, r0
 8011ba8:	e000      	b.n	8011bac <RegionTxParamSetupReq+0x2e>
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8011baa:	2300      	movs	r3, #0
        }
    }
}
 8011bac:	4618      	mov	r0, r3
 8011bae:	3708      	adds	r7, #8
 8011bb0:	46bd      	mov	sp, r7
 8011bb2:	bd80      	pop	{r7, pc}

08011bb4 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8011bb4:	b580      	push	{r7, lr}
 8011bb6:	b082      	sub	sp, #8
 8011bb8:	af00      	add	r7, sp, #0
 8011bba:	4603      	mov	r3, r0
 8011bbc:	6039      	str	r1, [r7, #0]
 8011bbe:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8011bc0:	79fb      	ldrb	r3, [r7, #7]
 8011bc2:	2b05      	cmp	r3, #5
 8011bc4:	d002      	beq.n	8011bcc <RegionDlChannelReq+0x18>
 8011bc6:	2b08      	cmp	r3, #8
 8011bc8:	d005      	beq.n	8011bd6 <RegionDlChannelReq+0x22>
 8011bca:	e009      	b.n	8011be0 <RegionDlChannelReq+0x2c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8011bcc:	6838      	ldr	r0, [r7, #0]
 8011bce:	f002 f845 	bl	8013c5c <RegionEU868DlChannelReq>
 8011bd2:	4603      	mov	r3, r0
 8011bd4:	e005      	b.n	8011be2 <RegionDlChannelReq+0x2e>
        KR920_DL_CHANNEL_REQ( );
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
 8011bd6:	6838      	ldr	r0, [r7, #0]
 8011bd8:	f003 fad6 	bl	8015188 <RegionUS915DlChannelReq>
 8011bdc:	4603      	mov	r3, r0
 8011bde:	e000      	b.n	8011be2 <RegionDlChannelReq+0x2e>
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8011be0:	2300      	movs	r3, #0
        }
    }
}
 8011be2:	4618      	mov	r0, r3
 8011be4:	3708      	adds	r7, #8
 8011be6:	46bd      	mov	sp, r7
 8011be8:	bd80      	pop	{r7, pc}

08011bea <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8011bea:	b580      	push	{r7, lr}
 8011bec:	b082      	sub	sp, #8
 8011bee:	af00      	add	r7, sp, #0
 8011bf0:	4603      	mov	r3, r0
 8011bf2:	71fb      	strb	r3, [r7, #7]
 8011bf4:	460b      	mov	r3, r1
 8011bf6:	71bb      	strb	r3, [r7, #6]
 8011bf8:	4613      	mov	r3, r2
 8011bfa:	717b      	strb	r3, [r7, #5]
    switch( region )
 8011bfc:	79fb      	ldrb	r3, [r7, #7]
 8011bfe:	2b05      	cmp	r3, #5
 8011c00:	d002      	beq.n	8011c08 <RegionAlternateDr+0x1e>
 8011c02:	2b08      	cmp	r3, #8
 8011c04:	d009      	beq.n	8011c1a <RegionAlternateDr+0x30>
 8011c06:	e011      	b.n	8011c2c <RegionAlternateDr+0x42>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8011c08:	797a      	ldrb	r2, [r7, #5]
 8011c0a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8011c0e:	4611      	mov	r1, r2
 8011c10:	4618      	mov	r0, r3
 8011c12:	f002 f86d 	bl	8013cf0 <RegionEU868AlternateDr>
 8011c16:	4603      	mov	r3, r0
 8011c18:	e009      	b.n	8011c2e <RegionAlternateDr+0x44>
        KR920_ALTERNATE_DR( );
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
 8011c1a:	797a      	ldrb	r2, [r7, #5]
 8011c1c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8011c20:	4611      	mov	r1, r2
 8011c22:	4618      	mov	r0, r3
 8011c24:	f003 fabc 	bl	80151a0 <RegionUS915AlternateDr>
 8011c28:	4603      	mov	r3, r0
 8011c2a:	e000      	b.n	8011c2e <RegionAlternateDr+0x44>
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8011c2c:	2300      	movs	r3, #0
        }
    }
}
 8011c2e:	4618      	mov	r0, r3
 8011c30:	3708      	adds	r7, #8
 8011c32:	46bd      	mov	sp, r7
 8011c34:	bd80      	pop	{r7, pc}

08011c36 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8011c36:	b580      	push	{r7, lr}
 8011c38:	b084      	sub	sp, #16
 8011c3a:	af00      	add	r7, sp, #0
 8011c3c:	60b9      	str	r1, [r7, #8]
 8011c3e:	607a      	str	r2, [r7, #4]
 8011c40:	603b      	str	r3, [r7, #0]
 8011c42:	4603      	mov	r3, r0
 8011c44:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8011c46:	7bfb      	ldrb	r3, [r7, #15]
 8011c48:	2b05      	cmp	r3, #5
 8011c4a:	d002      	beq.n	8011c52 <RegionNextChannel+0x1c>
 8011c4c:	2b08      	cmp	r3, #8
 8011c4e:	d008      	beq.n	8011c62 <RegionNextChannel+0x2c>
 8011c50:	e00f      	b.n	8011c72 <RegionNextChannel+0x3c>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8011c52:	69bb      	ldr	r3, [r7, #24]
 8011c54:	683a      	ldr	r2, [r7, #0]
 8011c56:	6879      	ldr	r1, [r7, #4]
 8011c58:	68b8      	ldr	r0, [r7, #8]
 8011c5a:	f002 f859 	bl	8013d10 <RegionEU868NextChannel>
 8011c5e:	4603      	mov	r3, r0
 8011c60:	e008      	b.n	8011c74 <RegionNextChannel+0x3e>
        KR920_NEXT_CHANNEL( );
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
 8011c62:	69bb      	ldr	r3, [r7, #24]
 8011c64:	683a      	ldr	r2, [r7, #0]
 8011c66:	6879      	ldr	r1, [r7, #4]
 8011c68:	68b8      	ldr	r0, [r7, #8]
 8011c6a:	f003 facf 	bl	801520c <RegionUS915NextChannel>
 8011c6e:	4603      	mov	r3, r0
 8011c70:	e000      	b.n	8011c74 <RegionNextChannel+0x3e>
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8011c72:	2309      	movs	r3, #9
        }
    }
}
 8011c74:	4618      	mov	r0, r3
 8011c76:	3710      	adds	r7, #16
 8011c78:	46bd      	mov	sp, r7
 8011c7a:	bd80      	pop	{r7, pc}

08011c7c <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8011c7c:	b590      	push	{r4, r7, lr}
 8011c7e:	b083      	sub	sp, #12
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	4604      	mov	r4, r0
 8011c84:	4608      	mov	r0, r1
 8011c86:	4611      	mov	r1, r2
 8011c88:	461a      	mov	r2, r3
 8011c8a:	4623      	mov	r3, r4
 8011c8c:	71fb      	strb	r3, [r7, #7]
 8011c8e:	4603      	mov	r3, r0
 8011c90:	71bb      	strb	r3, [r7, #6]
 8011c92:	460b      	mov	r3, r1
 8011c94:	717b      	strb	r3, [r7, #5]
 8011c96:	4613      	mov	r3, r2
 8011c98:	713b      	strb	r3, [r7, #4]
    switch( region )
 8011c9a:	79fb      	ldrb	r3, [r7, #7]
 8011c9c:	2b05      	cmp	r3, #5
 8011c9e:	d002      	beq.n	8011ca6 <RegionApplyDrOffset+0x2a>
 8011ca0:	2b08      	cmp	r3, #8
 8011ca2:	d00a      	beq.n	8011cba <RegionApplyDrOffset+0x3e>
 8011ca4:	e013      	b.n	8011cce <RegionApplyDrOffset+0x52>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 8011ca6:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8011caa:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8011cae:	79bb      	ldrb	r3, [r7, #6]
 8011cb0:	4618      	mov	r0, r3
 8011cb2:	f002 f9a7 	bl	8014004 <RegionEU868ApplyDrOffset>
 8011cb6:	4603      	mov	r3, r0
 8011cb8:	e00a      	b.n	8011cd0 <RegionApplyDrOffset+0x54>
        KR920_APPLY_DR_OFFSET( );
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
 8011cba:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8011cbe:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8011cc2:	79bb      	ldrb	r3, [r7, #6]
 8011cc4:	4618      	mov	r0, r3
 8011cc6:	f003 fb8d 	bl	80153e4 <RegionUS915ApplyDrOffset>
 8011cca:	4603      	mov	r3, r0
 8011ccc:	e000      	b.n	8011cd0 <RegionApplyDrOffset+0x54>
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8011cce:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8011cd0:	4618      	mov	r0, r3
 8011cd2:	370c      	adds	r7, #12
 8011cd4:	46bd      	mov	sp, r7
 8011cd6:	bd90      	pop	{r4, r7, pc}

08011cd8 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8011cd8:	b480      	push	{r7}
 8011cda:	b083      	sub	sp, #12
 8011cdc:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8011cde:	4b04      	ldr	r3, [pc, #16]	@ (8011cf0 <RegionGetVersion+0x18>)
 8011ce0:	607b      	str	r3, [r7, #4]

    return version;
 8011ce2:	687b      	ldr	r3, [r7, #4]
}
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	370c      	adds	r7, #12
 8011ce8:	46bd      	mov	sp, r7
 8011cea:	bc80      	pop	{r7}
 8011cec:	4770      	bx	lr
 8011cee:	bf00      	nop
 8011cf0:	02010001 	.word	0x02010001

08011cf4 <FindAvailable125kHzChannels>:
 *
 * \retval Status
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
 8011cf4:	b480      	push	{r7}
 8011cf6:	b087      	sub	sp, #28
 8011cf8:	af00      	add	r7, sp, #0
 8011cfa:	4603      	mov	r3, r0
 8011cfc:	60b9      	str	r1, [r7, #8]
 8011cfe:	607a      	str	r2, [r7, #4]
 8011d00:	81fb      	strh	r3, [r7, #14]
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 8011d02:	68bb      	ldr	r3, [r7, #8]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d002      	beq.n	8011d0e <FindAvailable125kHzChannels+0x1a>
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d101      	bne.n	8011d12 <FindAvailable125kHzChannels+0x1e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011d0e:	2303      	movs	r3, #3
 8011d10:	e021      	b.n	8011d56 <FindAvailable125kHzChannels+0x62>
    }

    // Initialize counter
    *availableChannels = 0;
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	2200      	movs	r2, #0
 8011d16:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 8011d18:	2300      	movs	r3, #0
 8011d1a:	75fb      	strb	r3, [r7, #23]
 8011d1c:	e017      	b.n	8011d4e <FindAvailable125kHzChannels+0x5a>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 8011d1e:	89fa      	ldrh	r2, [r7, #14]
 8011d20:	7dfb      	ldrb	r3, [r7, #23]
 8011d22:	fa42 f303 	asr.w	r3, r2, r3
 8011d26:	f003 0301 	and.w	r3, r3, #1
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d00c      	beq.n	8011d48 <FindAvailable125kHzChannels+0x54>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	781b      	ldrb	r3, [r3, #0]
 8011d32:	461a      	mov	r2, r3
 8011d34:	68bb      	ldr	r3, [r7, #8]
 8011d36:	4413      	add	r3, r2
 8011d38:	7dfa      	ldrb	r2, [r7, #23]
 8011d3a:	701a      	strb	r2, [r3, #0]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	781b      	ldrb	r3, [r3, #0]
 8011d40:	3301      	adds	r3, #1
 8011d42:	b2da      	uxtb	r2, r3
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 8011d48:	7dfb      	ldrb	r3, [r7, #23]
 8011d4a:	3301      	adds	r3, #1
 8011d4c:	75fb      	strb	r3, [r7, #23]
 8011d4e:	7dfb      	ldrb	r3, [r7, #23]
 8011d50:	2b07      	cmp	r3, #7
 8011d52:	d9e4      	bls.n	8011d1e <FindAvailable125kHzChannels+0x2a>
        }
    }

    return LORAMAC_STATUS_OK;
 8011d54:	2300      	movs	r3, #0
}
 8011d56:	4618      	mov	r0, r3
 8011d58:	371c      	adds	r7, #28
 8011d5a:	46bd      	mov	sp, r7
 8011d5c:	bc80      	pop	{r7}
 8011d5e:	4770      	bx	lr

08011d60 <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 8011d60:	b590      	push	{r4, r7, lr}
 8011d62:	b089      	sub	sp, #36	@ 0x24
 8011d64:	af00      	add	r7, sp, #0
 8011d66:	60f8      	str	r0, [r7, #12]
 8011d68:	60b9      	str	r1, [r7, #8]
 8011d6a:	607a      	str	r2, [r7, #4]
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 8011d6c:	f107 0314 	add.w	r3, r7, #20
 8011d70:	2200      	movs	r2, #0
 8011d72:	601a      	str	r2, [r3, #0]
 8011d74:	605a      	str	r2, [r3, #4]
    uint8_t availableChannels = 0;
 8011d76:	2300      	movs	r3, #0
 8011d78:	74fb      	strb	r3, [r7, #19]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d005      	beq.n	8011d8c <RegionBaseUSComputeNext125kHzJoinChannel+0x2c>
 8011d80:	68bb      	ldr	r3, [r7, #8]
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d002      	beq.n	8011d8c <RegionBaseUSComputeNext125kHzJoinChannel+0x2c>
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d101      	bne.n	8011d90 <RegionBaseUSComputeNext125kHzJoinChannel+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011d8c:	2303      	movs	r3, #3
 8011d8e:	e055      	b.n	8011e3c <RegionBaseUSComputeNext125kHzJoinChannel+0xdc>
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 8011d90:	68bb      	ldr	r3, [r7, #8]
 8011d92:	781b      	ldrb	r3, [r3, #0]
 8011d94:	777b      	strb	r3, [r7, #29]

    do
    {
        // Current ChannelMaskRemaining, two groups per channel mask. For example Group 0 and 1 (8 bit) are ChannelMaskRemaining 0 (16 bit), etc.
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 8011d96:	7f7b      	ldrb	r3, [r7, #29]
 8011d98:	085b      	lsrs	r3, r3, #1
 8011d9a:	773b      	strb	r3, [r7, #28]

        // For even numbers we need the 8 LSBs and for uneven the 8 MSBs
        if( ( startIndex % 2 ) == 0 )
 8011d9c:	7f7b      	ldrb	r3, [r7, #29]
 8011d9e:	f003 0301 	and.w	r3, r3, #1
 8011da2:	b2db      	uxtb	r3, r3
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d107      	bne.n	8011db8 <RegionBaseUSComputeNext125kHzJoinChannel+0x58>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 8011da8:	7f3b      	ldrb	r3, [r7, #28]
 8011daa:	005b      	lsls	r3, r3, #1
 8011dac:	68fa      	ldr	r2, [r7, #12]
 8011dae:	4413      	add	r3, r2
 8011db0:	881b      	ldrh	r3, [r3, #0]
 8011db2:	b2db      	uxtb	r3, r3
 8011db4:	83fb      	strh	r3, [r7, #30]
 8011db6:	e006      	b.n	8011dc6 <RegionBaseUSComputeNext125kHzJoinChannel+0x66>
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 8011db8:	7f3b      	ldrb	r3, [r7, #28]
 8011dba:	005b      	lsls	r3, r3, #1
 8011dbc:	68fa      	ldr	r2, [r7, #12]
 8011dbe:	4413      	add	r3, r2
 8011dc0:	881b      	ldrh	r3, [r3, #0]
 8011dc2:	0a1b      	lsrs	r3, r3, #8
 8011dc4:	83fb      	strh	r3, [r7, #30]
        }

        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 8011dc6:	f107 0213 	add.w	r2, r7, #19
 8011dca:	f107 0114 	add.w	r1, r7, #20
 8011dce:	8bfb      	ldrh	r3, [r7, #30]
 8011dd0:	4618      	mov	r0, r3
 8011dd2:	f7ff ff8f 	bl	8011cf4 <FindAvailable125kHzChannels>
 8011dd6:	4603      	mov	r3, r0
 8011dd8:	2b03      	cmp	r3, #3
 8011dda:	d101      	bne.n	8011de0 <RegionBaseUSComputeNext125kHzJoinChannel+0x80>
        {
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8011ddc:	2303      	movs	r3, #3
 8011dde:	e02d      	b.n	8011e3c <RegionBaseUSComputeNext125kHzJoinChannel+0xdc>
        }

        if ( availableChannels > 0 )
 8011de0:	7cfb      	ldrb	r3, [r7, #19]
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d011      	beq.n	8011e0a <RegionBaseUSComputeNext125kHzJoinChannel+0xaa>
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 8011de6:	7f7b      	ldrb	r3, [r7, #29]
 8011de8:	00db      	lsls	r3, r3, #3
 8011dea:	b2dc      	uxtb	r4, r3
 8011dec:	7cfb      	ldrb	r3, [r7, #19]
 8011dee:	3b01      	subs	r3, #1
 8011df0:	4619      	mov	r1, r3
 8011df2:	2000      	movs	r0, #0
 8011df4:	f004 ffea 	bl	8016dcc <randr>
 8011df8:	4603      	mov	r3, r0
 8011dfa:	3320      	adds	r3, #32
 8011dfc:	443b      	add	r3, r7
 8011dfe:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8011e02:	4423      	add	r3, r4
 8011e04:	b2da      	uxtb	r2, r3
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	701a      	strb	r2, [r3, #0]
        }

        // Increment start index
        startIndex++;
 8011e0a:	7f7b      	ldrb	r3, [r7, #29]
 8011e0c:	3301      	adds	r3, #1
 8011e0e:	777b      	strb	r3, [r7, #29]
        if ( startIndex > 7 )
 8011e10:	7f7b      	ldrb	r3, [r7, #29]
 8011e12:	2b07      	cmp	r3, #7
 8011e14:	d901      	bls.n	8011e1a <RegionBaseUSComputeNext125kHzJoinChannel+0xba>
        {
            startIndex = 0;
 8011e16:	2300      	movs	r3, #0
 8011e18:	777b      	strb	r3, [r7, #29]
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 8011e1a:	7cfb      	ldrb	r3, [r7, #19]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d104      	bne.n	8011e2a <RegionBaseUSComputeNext125kHzJoinChannel+0xca>
 8011e20:	68bb      	ldr	r3, [r7, #8]
 8011e22:	781b      	ldrb	r3, [r3, #0]
 8011e24:	7f7a      	ldrb	r2, [r7, #29]
 8011e26:	429a      	cmp	r2, r3
 8011e28:	d1b5      	bne.n	8011d96 <RegionBaseUSComputeNext125kHzJoinChannel+0x36>

    if ( availableChannels > 0 )
 8011e2a:	7cfb      	ldrb	r3, [r7, #19]
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d004      	beq.n	8011e3a <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    {
        *groupsCurrentIndex = startIndex;
 8011e30:	68bb      	ldr	r3, [r7, #8]
 8011e32:	7f7a      	ldrb	r2, [r7, #29]
 8011e34:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8011e36:	2300      	movs	r3, #0
 8011e38:	e000      	b.n	8011e3c <RegionBaseUSComputeNext125kHzJoinChannel+0xdc>
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 8011e3a:	2303      	movs	r3, #3
}
 8011e3c:	4618      	mov	r0, r3
 8011e3e:	3724      	adds	r7, #36	@ 0x24
 8011e40:	46bd      	mov	sp, r7
 8011e42:	bd90      	pop	{r4, r7, pc}

08011e44 <RegionBaseUSCalcDownlinkFrequency>:
    return true;
}

uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
 8011e44:	b480      	push	{r7}
 8011e46:	b085      	sub	sp, #20
 8011e48:	af00      	add	r7, sp, #0
 8011e4a:	4603      	mov	r3, r0
 8011e4c:	60b9      	str	r1, [r7, #8]
 8011e4e:	607a      	str	r2, [r7, #4]
 8011e50:	73fb      	strb	r3, [r7, #15]
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
 8011e52:	7bfb      	ldrb	r3, [r7, #15]
 8011e54:	687a      	ldr	r2, [r7, #4]
 8011e56:	fb03 f202 	mul.w	r2, r3, r2
 8011e5a:	68bb      	ldr	r3, [r7, #8]
 8011e5c:	4413      	add	r3, r2
}
 8011e5e:	4618      	mov	r0, r3
 8011e60:	3714      	adds	r7, #20
 8011e62:	46bd      	mov	sp, r7
 8011e64:	bc80      	pop	{r7}
 8011e66:	4770      	bx	lr

08011e68 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8011e68:	b480      	push	{r7}
 8011e6a:	b087      	sub	sp, #28
 8011e6c:	af00      	add	r7, sp, #0
 8011e6e:	60f8      	str	r0, [r7, #12]
 8011e70:	4608      	mov	r0, r1
 8011e72:	4639      	mov	r1, r7
 8011e74:	e881 000c 	stmia.w	r1, {r2, r3}
 8011e78:	4603      	mov	r3, r0
 8011e7a:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	881b      	ldrh	r3, [r3, #0]
 8011e80:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8011e82:	7afb      	ldrb	r3, [r7, #11]
 8011e84:	f083 0301 	eor.w	r3, r3, #1
 8011e88:	b2db      	uxtb	r3, r3
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d01b      	beq.n	8011ec6 <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8011e8e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8011e92:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8011e94:	683b      	ldr	r3, [r7, #0]
 8011e96:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8011e9a:	d202      	bcs.n	8011ea2 <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8011e9c:	2364      	movs	r3, #100	@ 0x64
 8011e9e:	82bb      	strh	r3, [r7, #20]
 8011ea0:	e00b      	b.n	8011eba <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8011ea2:	683b      	ldr	r3, [r7, #0]
 8011ea4:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 8011ea8:	4293      	cmp	r3, r2
 8011eaa:	d803      	bhi.n	8011eb4 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8011eac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011eb0:	82bb      	strh	r3, [r7, #20]
 8011eb2:	e002      	b.n	8011eba <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8011eb4:	f242 7310 	movw	r3, #10000	@ 0x2710
 8011eb8:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8011eba:	8aba      	ldrh	r2, [r7, #20]
 8011ebc:	8afb      	ldrh	r3, [r7, #22]
 8011ebe:	4293      	cmp	r3, r2
 8011ec0:	bf38      	it	cc
 8011ec2:	4613      	movcc	r3, r2
 8011ec4:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8011ec6:	8afb      	ldrh	r3, [r7, #22]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d101      	bne.n	8011ed0 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8011ecc:	2301      	movs	r3, #1
 8011ece:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8011ed0:	8afb      	ldrh	r3, [r7, #22]
}
 8011ed2:	4618      	mov	r0, r3
 8011ed4:	371c      	adds	r7, #28
 8011ed6:	46bd      	mov	sp, r7
 8011ed8:	bc80      	pop	{r7}
 8011eda:	4770      	bx	lr

08011edc <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8011edc:	b580      	push	{r7, lr}
 8011ede:	b08e      	sub	sp, #56	@ 0x38
 8011ee0:	af02      	add	r7, sp, #8
 8011ee2:	60f8      	str	r0, [r7, #12]
 8011ee4:	4608      	mov	r0, r1
 8011ee6:	4639      	mov	r1, r7
 8011ee8:	e881 000c 	stmia.w	r1, {r2, r3}
 8011eec:	4603      	mov	r3, r0
 8011eee:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	881b      	ldrh	r3, [r3, #0]
 8011ef4:	857b      	strh	r3, [r7, #42]	@ 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8011ef6:	4b4b      	ldr	r3, [pc, #300]	@ (8012024 <SetMaxTimeCredits+0x148>)
 8011ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8011efa:	463b      	mov	r3, r7
 8011efc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011f00:	f008 faa0 	bl	801a444 <SysTimeToMs>
 8011f04:	6278      	str	r0, [r7, #36]	@ 0x24
    SysTime_t timeDiff = { 0 };
 8011f06:	f107 0314 	add.w	r3, r7, #20
 8011f0a:	2200      	movs	r2, #0
 8011f0c:	601a      	str	r2, [r3, #0]
 8011f0e:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8011f10:	7af9      	ldrb	r1, [r7, #11]
 8011f12:	463b      	mov	r3, r7
 8011f14:	cb0c      	ldmia	r3, {r2, r3}
 8011f16:	68f8      	ldr	r0, [r7, #12]
 8011f18:	f7ff ffa6 	bl	8011e68 <GetDutyCycle>
 8011f1c:	4603      	mov	r3, r0
 8011f1e:	857b      	strh	r3, [r7, #42]	@ 0x2a

    if( joined == false )
 8011f20:	7afb      	ldrb	r3, [r7, #11]
 8011f22:	f083 0301 	eor.w	r3, r3, #1
 8011f26:	b2db      	uxtb	r3, r3
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d062      	beq.n	8011ff2 <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8011f2c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011f2e:	2b64      	cmp	r3, #100	@ 0x64
 8011f30:	d105      	bne.n	8011f3e <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8011f32:	4b3c      	ldr	r3, [pc, #240]	@ (8012024 <SetMaxTimeCredits+0x148>)
 8011f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011f3a:	609a      	str	r2, [r3, #8]
 8011f3c:	e00b      	b.n	8011f56 <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8011f3e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011f40:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011f44:	d105      	bne.n	8011f52 <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 8011f46:	4b38      	ldr	r3, [pc, #224]	@ (8012028 <SetMaxTimeCredits+0x14c>)
 8011f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011f4e:	609a      	str	r2, [r3, #8]
 8011f50:	e001      	b.n	8011f56 <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8011f52:	4b36      	ldr	r3, [pc, #216]	@ (801202c <SetMaxTimeCredits+0x150>)
 8011f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	689a      	ldr	r2, [r3, #8]
 8011f5a:	f107 031c 	add.w	r3, r7, #28
 8011f5e:	4611      	mov	r1, r2
 8011f60:	4618      	mov	r0, r3
 8011f62:	f008 fa97 	bl	801a494 <SysTimeFromMs>
 8011f66:	f107 0014 	add.w	r0, r7, #20
 8011f6a:	6a3b      	ldr	r3, [r7, #32]
 8011f6c:	9300      	str	r3, [sp, #0]
 8011f6e:	69fb      	ldr	r3, [r7, #28]
 8011f70:	463a      	mov	r2, r7
 8011f72:	ca06      	ldmia	r2, {r1, r2}
 8011f74:	f008 f9a7 	bl	801a2c6 <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8011f78:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8011f7c:	f083 0301 	eor.w	r3, r3, #1
 8011f80:	b2db      	uxtb	r3, r3
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d006      	beq.n	8011f94 <SetMaxTimeCredits+0xb8>
 8011f86:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8011f8a:	f083 0301 	eor.w	r3, r3, #1
 8011f8e:	b2db      	uxtb	r3, r3
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d108      	bne.n	8011fa6 <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8011f98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011f9a:	429a      	cmp	r2, r3
 8011f9c:	d103      	bne.n	8011fa6 <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8011f9e:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8011fa0:	4a23      	ldr	r2, [pc, #140]	@ (8012030 <SetMaxTimeCredits+0x154>)
 8011fa2:	4293      	cmp	r3, r2
 8011fa4:	d92f      	bls.n	8012006 <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011faa:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8011fac:	683b      	ldr	r3, [r7, #0]
 8011fae:	4a21      	ldr	r2, [pc, #132]	@ (8012034 <SetMaxTimeCredits+0x158>)
 8011fb0:	4293      	cmp	r3, r2
 8011fb2:	d928      	bls.n	8012006 <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8011fb4:	683b      	ldr	r3, [r7, #0]
 8011fb6:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 8011fba:	3b30      	subs	r3, #48	@ 0x30
 8011fbc:	4a1e      	ldr	r2, [pc, #120]	@ (8012038 <SetMaxTimeCredits+0x15c>)
 8011fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8011fc2:	0c1b      	lsrs	r3, r3, #16
 8011fc4:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8011fc6:	697b      	ldr	r3, [r7, #20]
 8011fc8:	4a1c      	ldr	r2, [pc, #112]	@ (801203c <SetMaxTimeCredits+0x160>)
 8011fca:	fb02 f303 	mul.w	r3, r2, r3
 8011fce:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8011fd0:	697b      	ldr	r3, [r7, #20]
 8011fd2:	f503 33f6 	add.w	r3, r3, #125952	@ 0x1ec00
 8011fd6:	3330      	adds	r3, #48	@ 0x30
 8011fd8:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 8011fda:	2300      	movs	r3, #0
 8011fdc:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 8011fde:	f107 0314 	add.w	r3, r7, #20
 8011fe2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011fe6:	f008 fa2d 	bl	801a444 <SysTimeToMs>
 8011fea:	4602      	mov	r2, r0
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	609a      	str	r2, [r3, #8]
 8011ff0:	e009      	b.n	8012006 <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 8011ff2:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8011ff6:	f083 0301 	eor.w	r3, r3, #1
 8011ffa:	b2db      	uxtb	r3, r3
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d002      	beq.n	8012006 <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012004:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	685b      	ldr	r3, [r3, #4]
 801200a:	2b00      	cmp	r3, #0
 801200c:	d102      	bne.n	8012014 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012012:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8012014:	68fb      	ldr	r3, [r7, #12]
 8012016:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012018:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 801201a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
}
 801201c:	4618      	mov	r0, r3
 801201e:	3730      	adds	r7, #48	@ 0x30
 8012020:	46bd      	mov	sp, r7
 8012022:	bd80      	pop	{r7, pc}
 8012024:	001b7740 	.word	0x001b7740
 8012028:	0112a880 	.word	0x0112a880
 801202c:	02932e00 	.word	0x02932e00
 8012030:	0001517f 	.word	0x0001517f
 8012034:	0001ec2f 	.word	0x0001ec2f
 8012038:	c22e4507 	.word	0xc22e4507
 801203c:	00015180 	.word	0x00015180

08012040 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8012040:	b580      	push	{r7, lr}
 8012042:	b086      	sub	sp, #24
 8012044:	af02      	add	r7, sp, #8
 8012046:	6078      	str	r0, [r7, #4]
 8012048:	4608      	mov	r0, r1
 801204a:	4611      	mov	r1, r2
 801204c:	461a      	mov	r2, r3
 801204e:	4603      	mov	r3, r0
 8012050:	70fb      	strb	r3, [r7, #3]
 8012052:	460b      	mov	r3, r1
 8012054:	70bb      	strb	r3, [r7, #2]
 8012056:	4613      	mov	r3, r2
 8012058:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 801205a:	78f9      	ldrb	r1, [r7, #3]
 801205c:	787b      	ldrb	r3, [r7, #1]
 801205e:	9301      	str	r3, [sp, #4]
 8012060:	78bb      	ldrb	r3, [r7, #2]
 8012062:	9300      	str	r3, [sp, #0]
 8012064:	f107 0318 	add.w	r3, r7, #24
 8012068:	cb0c      	ldmia	r3, {r2, r3}
 801206a:	6878      	ldr	r0, [r7, #4]
 801206c:	f7ff ff36 	bl	8011edc <SetMaxTimeCredits>
 8012070:	4603      	mov	r3, r0
 8012072:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8012074:	78fb      	ldrb	r3, [r7, #3]
 8012076:	2b00      	cmp	r3, #0
 8012078:	d00a      	beq.n	8012090 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	685b      	ldr	r3, [r3, #4]
 801207e:	4618      	mov	r0, r3
 8012080:	f008 fba6 	bl	801a7d0 <UTIL_TIMER_GetElapsedTime>
 8012084:	4602      	mov	r2, r0
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	68db      	ldr	r3, [r3, #12]
 801208a:	441a      	add	r2, r3
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	68da      	ldr	r2, [r3, #12]
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	691b      	ldr	r3, [r3, #16]
 8012098:	429a      	cmp	r2, r3
 801209a:	d903      	bls.n	80120a4 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	691a      	ldr	r2, [r3, #16]
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	6a3a      	ldr	r2, [r7, #32]
 80120a8:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 80120aa:	89fb      	ldrh	r3, [r7, #14]
}
 80120ac:	4618      	mov	r0, r3
 80120ae:	3710      	adds	r7, #16
 80120b0:	46bd      	mov	sp, r7
 80120b2:	bd80      	pop	{r7, pc}

080120b4 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 80120b4:	b480      	push	{r7}
 80120b6:	b085      	sub	sp, #20
 80120b8:	af00      	add	r7, sp, #0
 80120ba:	4603      	mov	r3, r0
 80120bc:	460a      	mov	r2, r1
 80120be:	80fb      	strh	r3, [r7, #6]
 80120c0:	4613      	mov	r3, r2
 80120c2:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 80120c4:	2300      	movs	r3, #0
 80120c6:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 80120c8:	2300      	movs	r3, #0
 80120ca:	73bb      	strb	r3, [r7, #14]
 80120cc:	e011      	b.n	80120f2 <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 80120ce:	88fa      	ldrh	r2, [r7, #6]
 80120d0:	7bbb      	ldrb	r3, [r7, #14]
 80120d2:	2101      	movs	r1, #1
 80120d4:	fa01 f303 	lsl.w	r3, r1, r3
 80120d8:	401a      	ands	r2, r3
 80120da:	7bbb      	ldrb	r3, [r7, #14]
 80120dc:	2101      	movs	r1, #1
 80120de:	fa01 f303 	lsl.w	r3, r1, r3
 80120e2:	429a      	cmp	r2, r3
 80120e4:	d102      	bne.n	80120ec <CountChannels+0x38>
        {
            nbActiveBits++;
 80120e6:	7bfb      	ldrb	r3, [r7, #15]
 80120e8:	3301      	adds	r3, #1
 80120ea:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 80120ec:	7bbb      	ldrb	r3, [r7, #14]
 80120ee:	3301      	adds	r3, #1
 80120f0:	73bb      	strb	r3, [r7, #14]
 80120f2:	7bba      	ldrb	r2, [r7, #14]
 80120f4:	797b      	ldrb	r3, [r7, #5]
 80120f6:	429a      	cmp	r2, r3
 80120f8:	d3e9      	bcc.n	80120ce <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 80120fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80120fc:	4618      	mov	r0, r3
 80120fe:	3714      	adds	r7, #20
 8012100:	46bd      	mov	sp, r7
 8012102:	bc80      	pop	{r7}
 8012104:	4770      	bx	lr

08012106 <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8012106:	b580      	push	{r7, lr}
 8012108:	b084      	sub	sp, #16
 801210a:	af00      	add	r7, sp, #0
 801210c:	6039      	str	r1, [r7, #0]
 801210e:	4611      	mov	r1, r2
 8012110:	461a      	mov	r2, r3
 8012112:	4603      	mov	r3, r0
 8012114:	71fb      	strb	r3, [r7, #7]
 8012116:	460b      	mov	r3, r1
 8012118:	71bb      	strb	r3, [r7, #6]
 801211a:	4613      	mov	r3, r2
 801211c:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 801211e:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8012122:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8012126:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801212a:	4618      	mov	r0, r3
 801212c:	f000 f85d 	bl	80121ea <RegionCommonValueInRange>
 8012130:	4603      	mov	r3, r0
 8012132:	2b00      	cmp	r3, #0
 8012134:	d101      	bne.n	801213a <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 8012136:	2300      	movs	r3, #0
 8012138:	e053      	b.n	80121e2 <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 801213a:	2300      	movs	r3, #0
 801213c:	73fb      	strb	r3, [r7, #15]
 801213e:	2300      	movs	r3, #0
 8012140:	73bb      	strb	r3, [r7, #14]
 8012142:	e049      	b.n	80121d8 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8012144:	2300      	movs	r3, #0
 8012146:	737b      	strb	r3, [r7, #13]
 8012148:	e03d      	b.n	80121c6 <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 801214a:	7bbb      	ldrb	r3, [r7, #14]
 801214c:	005b      	lsls	r3, r3, #1
 801214e:	683a      	ldr	r2, [r7, #0]
 8012150:	4413      	add	r3, r2
 8012152:	881b      	ldrh	r3, [r3, #0]
 8012154:	461a      	mov	r2, r3
 8012156:	7b7b      	ldrb	r3, [r7, #13]
 8012158:	fa42 f303 	asr.w	r3, r2, r3
 801215c:	f003 0301 	and.w	r3, r3, #1
 8012160:	2b00      	cmp	r3, #0
 8012162:	d02d      	beq.n	80121c0 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8012164:	7bfa      	ldrb	r2, [r7, #15]
 8012166:	7b7b      	ldrb	r3, [r7, #13]
 8012168:	4413      	add	r3, r2
 801216a:	461a      	mov	r2, r3
 801216c:	4613      	mov	r3, r2
 801216e:	005b      	lsls	r3, r3, #1
 8012170:	4413      	add	r3, r2
 8012172:	009b      	lsls	r3, r3, #2
 8012174:	461a      	mov	r2, r3
 8012176:	69fb      	ldr	r3, [r7, #28]
 8012178:	4413      	add	r3, r2
 801217a:	7a1b      	ldrb	r3, [r3, #8]
 801217c:	f343 0303 	sbfx	r3, r3, #0, #4
 8012180:	b25b      	sxtb	r3, r3
 8012182:	f003 030f 	and.w	r3, r3, #15
 8012186:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8012188:	7bfa      	ldrb	r2, [r7, #15]
 801218a:	7b7b      	ldrb	r3, [r7, #13]
 801218c:	4413      	add	r3, r2
 801218e:	461a      	mov	r2, r3
 8012190:	4613      	mov	r3, r2
 8012192:	005b      	lsls	r3, r3, #1
 8012194:	4413      	add	r3, r2
 8012196:	009b      	lsls	r3, r3, #2
 8012198:	461a      	mov	r2, r3
 801219a:	69fb      	ldr	r3, [r7, #28]
 801219c:	4413      	add	r3, r2
 801219e:	7a1b      	ldrb	r3, [r3, #8]
 80121a0:	f343 1303 	sbfx	r3, r3, #4, #4
 80121a4:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 80121a6:	f003 030f 	and.w	r3, r3, #15
 80121aa:	b25a      	sxtb	r2, r3
 80121ac:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80121b0:	4618      	mov	r0, r3
 80121b2:	f000 f81a 	bl	80121ea <RegionCommonValueInRange>
 80121b6:	4603      	mov	r3, r0
 80121b8:	2b01      	cmp	r3, #1
 80121ba:	d101      	bne.n	80121c0 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 80121bc:	2301      	movs	r3, #1
 80121be:	e010      	b.n	80121e2 <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 80121c0:	7b7b      	ldrb	r3, [r7, #13]
 80121c2:	3301      	adds	r3, #1
 80121c4:	737b      	strb	r3, [r7, #13]
 80121c6:	7b7b      	ldrb	r3, [r7, #13]
 80121c8:	2b0f      	cmp	r3, #15
 80121ca:	d9be      	bls.n	801214a <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80121cc:	7bfb      	ldrb	r3, [r7, #15]
 80121ce:	3310      	adds	r3, #16
 80121d0:	73fb      	strb	r3, [r7, #15]
 80121d2:	7bbb      	ldrb	r3, [r7, #14]
 80121d4:	3301      	adds	r3, #1
 80121d6:	73bb      	strb	r3, [r7, #14]
 80121d8:	7bfa      	ldrb	r2, [r7, #15]
 80121da:	79fb      	ldrb	r3, [r7, #7]
 80121dc:	429a      	cmp	r2, r3
 80121de:	d3b1      	bcc.n	8012144 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 80121e0:	2300      	movs	r3, #0
}
 80121e2:	4618      	mov	r0, r3
 80121e4:	3710      	adds	r7, #16
 80121e6:	46bd      	mov	sp, r7
 80121e8:	bd80      	pop	{r7, pc}

080121ea <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 80121ea:	b480      	push	{r7}
 80121ec:	b083      	sub	sp, #12
 80121ee:	af00      	add	r7, sp, #0
 80121f0:	4603      	mov	r3, r0
 80121f2:	71fb      	strb	r3, [r7, #7]
 80121f4:	460b      	mov	r3, r1
 80121f6:	71bb      	strb	r3, [r7, #6]
 80121f8:	4613      	mov	r3, r2
 80121fa:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 80121fc:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8012200:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8012204:	429a      	cmp	r2, r3
 8012206:	db07      	blt.n	8012218 <RegionCommonValueInRange+0x2e>
 8012208:	f997 2007 	ldrsb.w	r2, [r7, #7]
 801220c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8012210:	429a      	cmp	r2, r3
 8012212:	dc01      	bgt.n	8012218 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8012214:	2301      	movs	r3, #1
 8012216:	e000      	b.n	801221a <RegionCommonValueInRange+0x30>
    }
    return 0;
 8012218:	2300      	movs	r3, #0
}
 801221a:	4618      	mov	r0, r3
 801221c:	370c      	adds	r7, #12
 801221e:	46bd      	mov	sp, r7
 8012220:	bc80      	pop	{r7}
 8012222:	4770      	bx	lr

08012224 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8012224:	b480      	push	{r7}
 8012226:	b085      	sub	sp, #20
 8012228:	af00      	add	r7, sp, #0
 801222a:	6078      	str	r0, [r7, #4]
 801222c:	460b      	mov	r3, r1
 801222e:	70fb      	strb	r3, [r7, #3]
 8012230:	4613      	mov	r3, r2
 8012232:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8012234:	78fb      	ldrb	r3, [r7, #3]
 8012236:	091b      	lsrs	r3, r3, #4
 8012238:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 801223a:	78bb      	ldrb	r3, [r7, #2]
 801223c:	091b      	lsrs	r3, r3, #4
 801223e:	b2db      	uxtb	r3, r3
 8012240:	7bfa      	ldrb	r2, [r7, #15]
 8012242:	429a      	cmp	r2, r3
 8012244:	d803      	bhi.n	801224e <RegionCommonChanDisable+0x2a>
 8012246:	78fa      	ldrb	r2, [r7, #3]
 8012248:	78bb      	ldrb	r3, [r7, #2]
 801224a:	429a      	cmp	r2, r3
 801224c:	d301      	bcc.n	8012252 <RegionCommonChanDisable+0x2e>
    {
        return false;
 801224e:	2300      	movs	r3, #0
 8012250:	e017      	b.n	8012282 <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8012252:	7bfb      	ldrb	r3, [r7, #15]
 8012254:	005b      	lsls	r3, r3, #1
 8012256:	687a      	ldr	r2, [r7, #4]
 8012258:	4413      	add	r3, r2
 801225a:	881b      	ldrh	r3, [r3, #0]
 801225c:	b21a      	sxth	r2, r3
 801225e:	78fb      	ldrb	r3, [r7, #3]
 8012260:	f003 030f 	and.w	r3, r3, #15
 8012264:	2101      	movs	r1, #1
 8012266:	fa01 f303 	lsl.w	r3, r1, r3
 801226a:	b21b      	sxth	r3, r3
 801226c:	43db      	mvns	r3, r3
 801226e:	b21b      	sxth	r3, r3
 8012270:	4013      	ands	r3, r2
 8012272:	b219      	sxth	r1, r3
 8012274:	7bfb      	ldrb	r3, [r7, #15]
 8012276:	005b      	lsls	r3, r3, #1
 8012278:	687a      	ldr	r2, [r7, #4]
 801227a:	4413      	add	r3, r2
 801227c:	b28a      	uxth	r2, r1
 801227e:	801a      	strh	r2, [r3, #0]

    return true;
 8012280:	2301      	movs	r3, #1
}
 8012282:	4618      	mov	r0, r3
 8012284:	3714      	adds	r7, #20
 8012286:	46bd      	mov	sp, r7
 8012288:	bc80      	pop	{r7}
 801228a:	4770      	bx	lr

0801228c <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 801228c:	b580      	push	{r7, lr}
 801228e:	b084      	sub	sp, #16
 8012290:	af00      	add	r7, sp, #0
 8012292:	6078      	str	r0, [r7, #4]
 8012294:	460b      	mov	r3, r1
 8012296:	70fb      	strb	r3, [r7, #3]
 8012298:	4613      	mov	r3, r2
 801229a:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 801229c:	2300      	movs	r3, #0
 801229e:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d101      	bne.n	80122aa <RegionCommonCountChannels+0x1e>
    {
        return 0;
 80122a6:	2300      	movs	r3, #0
 80122a8:	e018      	b.n	80122dc <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 80122aa:	78fb      	ldrb	r3, [r7, #3]
 80122ac:	73bb      	strb	r3, [r7, #14]
 80122ae:	e010      	b.n	80122d2 <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 80122b0:	7bbb      	ldrb	r3, [r7, #14]
 80122b2:	005b      	lsls	r3, r3, #1
 80122b4:	687a      	ldr	r2, [r7, #4]
 80122b6:	4413      	add	r3, r2
 80122b8:	881b      	ldrh	r3, [r3, #0]
 80122ba:	2110      	movs	r1, #16
 80122bc:	4618      	mov	r0, r3
 80122be:	f7ff fef9 	bl	80120b4 <CountChannels>
 80122c2:	4603      	mov	r3, r0
 80122c4:	461a      	mov	r2, r3
 80122c6:	7bfb      	ldrb	r3, [r7, #15]
 80122c8:	4413      	add	r3, r2
 80122ca:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 80122cc:	7bbb      	ldrb	r3, [r7, #14]
 80122ce:	3301      	adds	r3, #1
 80122d0:	73bb      	strb	r3, [r7, #14]
 80122d2:	7bba      	ldrb	r2, [r7, #14]
 80122d4:	78bb      	ldrb	r3, [r7, #2]
 80122d6:	429a      	cmp	r2, r3
 80122d8:	d3ea      	bcc.n	80122b0 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 80122da:	7bfb      	ldrb	r3, [r7, #15]
}
 80122dc:	4618      	mov	r0, r3
 80122de:	3710      	adds	r7, #16
 80122e0:	46bd      	mov	sp, r7
 80122e2:	bd80      	pop	{r7, pc}

080122e4 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 80122e4:	b480      	push	{r7}
 80122e6:	b087      	sub	sp, #28
 80122e8:	af00      	add	r7, sp, #0
 80122ea:	60f8      	str	r0, [r7, #12]
 80122ec:	60b9      	str	r1, [r7, #8]
 80122ee:	4613      	mov	r3, r2
 80122f0:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 80122f2:	68fb      	ldr	r3, [r7, #12]
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d016      	beq.n	8012326 <RegionCommonChanMaskCopy+0x42>
 80122f8:	68bb      	ldr	r3, [r7, #8]
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d013      	beq.n	8012326 <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 80122fe:	2300      	movs	r3, #0
 8012300:	75fb      	strb	r3, [r7, #23]
 8012302:	e00c      	b.n	801231e <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8012304:	7dfb      	ldrb	r3, [r7, #23]
 8012306:	005b      	lsls	r3, r3, #1
 8012308:	68ba      	ldr	r2, [r7, #8]
 801230a:	441a      	add	r2, r3
 801230c:	7dfb      	ldrb	r3, [r7, #23]
 801230e:	005b      	lsls	r3, r3, #1
 8012310:	68f9      	ldr	r1, [r7, #12]
 8012312:	440b      	add	r3, r1
 8012314:	8812      	ldrh	r2, [r2, #0]
 8012316:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8012318:	7dfb      	ldrb	r3, [r7, #23]
 801231a:	3301      	adds	r3, #1
 801231c:	75fb      	strb	r3, [r7, #23]
 801231e:	7dfa      	ldrb	r2, [r7, #23]
 8012320:	79fb      	ldrb	r3, [r7, #7]
 8012322:	429a      	cmp	r2, r3
 8012324:	d3ee      	bcc.n	8012304 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8012326:	bf00      	nop
 8012328:	371c      	adds	r7, #28
 801232a:	46bd      	mov	sp, r7
 801232c:	bc80      	pop	{r7}
 801232e:	4770      	bx	lr

08012330 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8012330:	b082      	sub	sp, #8
 8012332:	b580      	push	{r7, lr}
 8012334:	b086      	sub	sp, #24
 8012336:	af00      	add	r7, sp, #0
 8012338:	60f8      	str	r0, [r7, #12]
 801233a:	60b9      	str	r1, [r7, #8]
 801233c:	627b      	str	r3, [r7, #36]	@ 0x24
 801233e:	4613      	mov	r3, r2
 8012340:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8012342:	79f9      	ldrb	r1, [r7, #7]
 8012344:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012348:	cb0c      	ldmia	r3, {r2, r3}
 801234a:	68f8      	ldr	r0, [r7, #12]
 801234c:	f7ff fd8c 	bl	8011e68 <GetDutyCycle>
 8012350:	4603      	mov	r3, r0
 8012352:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8012354:	68fb      	ldr	r3, [r7, #12]
 8012356:	68da      	ldr	r2, [r3, #12]
 8012358:	8afb      	ldrh	r3, [r7, #22]
 801235a:	68b9      	ldr	r1, [r7, #8]
 801235c:	fb01 f303 	mul.w	r3, r1, r3
 8012360:	429a      	cmp	r2, r3
 8012362:	d909      	bls.n	8012378 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8012364:	68fb      	ldr	r3, [r7, #12]
 8012366:	68da      	ldr	r2, [r3, #12]
 8012368:	8afb      	ldrh	r3, [r7, #22]
 801236a:	68b9      	ldr	r1, [r7, #8]
 801236c:	fb01 f303 	mul.w	r3, r1, r3
 8012370:	1ad2      	subs	r2, r2, r3
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8012376:	e002      	b.n	801237e <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	2200      	movs	r2, #0
 801237c:	60da      	str	r2, [r3, #12]
}
 801237e:	bf00      	nop
 8012380:	3718      	adds	r7, #24
 8012382:	46bd      	mov	sp, r7
 8012384:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012388:	b002      	add	sp, #8
 801238a:	4770      	bx	lr

0801238c <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 801238c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801238e:	b08f      	sub	sp, #60	@ 0x3c
 8012390:	af04      	add	r7, sp, #16
 8012392:	6039      	str	r1, [r7, #0]
 8012394:	4611      	mov	r1, r2
 8012396:	461a      	mov	r2, r3
 8012398:	4603      	mov	r3, r0
 801239a:	71fb      	strb	r3, [r7, #7]
 801239c:	460b      	mov	r3, r1
 801239e:	71bb      	strb	r3, [r7, #6]
 80123a0:	4613      	mov	r3, r2
 80123a2:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 80123a4:	f04f 33ff 	mov.w	r3, #4294967295
 80123a8:	627b      	str	r3, [r7, #36]	@ 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 80123aa:	f008 f9ff 	bl	801a7ac <UTIL_TIMER_GetCurrentTime>
 80123ae:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 80123b0:	2300      	movs	r3, #0
 80123b2:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 80123b4:	2301      	movs	r3, #1
 80123b6:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 80123b8:	2300      	movs	r3, #0
 80123ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 80123be:	2300      	movs	r3, #0
 80123c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80123c4:	e0ba      	b.n	801253c <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 80123c6:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80123ca:	4613      	mov	r3, r2
 80123cc:	005b      	lsls	r3, r3, #1
 80123ce:	4413      	add	r3, r2
 80123d0:	00db      	lsls	r3, r3, #3
 80123d2:	461a      	mov	r2, r3
 80123d4:	683b      	ldr	r3, [r7, #0]
 80123d6:	189c      	adds	r4, r3, r2
 80123d8:	f897 6040 	ldrb.w	r6, [r7, #64]	@ 0x40
 80123dc:	797a      	ldrb	r2, [r7, #5]
 80123de:	79fd      	ldrb	r5, [r7, #7]
 80123e0:	69fb      	ldr	r3, [r7, #28]
 80123e2:	9302      	str	r3, [sp, #8]
 80123e4:	46ec      	mov	ip, sp
 80123e6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80123ea:	e893 0003 	ldmia.w	r3, {r0, r1}
 80123ee:	e88c 0003 	stmia.w	ip, {r0, r1}
 80123f2:	4633      	mov	r3, r6
 80123f4:	4629      	mov	r1, r5
 80123f6:	4620      	mov	r0, r4
 80123f8:	f7ff fe22 	bl	8012040 <UpdateTimeCredits>
 80123fc:	4603      	mov	r3, r0
 80123fe:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8012400:	8afa      	ldrh	r2, [r7, #22]
 8012402:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012404:	fb02 f303 	mul.w	r3, r2, r3
 8012408:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 801240a:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801240e:	4613      	mov	r3, r2
 8012410:	005b      	lsls	r3, r3, #1
 8012412:	4413      	add	r3, r2
 8012414:	00db      	lsls	r3, r3, #3
 8012416:	461a      	mov	r2, r3
 8012418:	683b      	ldr	r3, [r7, #0]
 801241a:	4413      	add	r3, r2
 801241c:	68db      	ldr	r3, [r3, #12]
 801241e:	69ba      	ldr	r2, [r7, #24]
 8012420:	429a      	cmp	r2, r3
 8012422:	d908      	bls.n	8012436 <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8012424:	797b      	ldrb	r3, [r7, #5]
 8012426:	f083 0301 	eor.w	r3, r3, #1
 801242a:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 801242c:	2b00      	cmp	r3, #0
 801242e:	d013      	beq.n	8012458 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8012430:	79fb      	ldrb	r3, [r7, #7]
 8012432:	2b00      	cmp	r3, #0
 8012434:	d010      	beq.n	8012458 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 8012436:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801243a:	4613      	mov	r3, r2
 801243c:	005b      	lsls	r3, r3, #1
 801243e:	4413      	add	r3, r2
 8012440:	00db      	lsls	r3, r3, #3
 8012442:	461a      	mov	r2, r3
 8012444:	683b      	ldr	r3, [r7, #0]
 8012446:	4413      	add	r3, r2
 8012448:	2201      	movs	r2, #1
 801244a:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 801244c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8012450:	3301      	adds	r3, #1
 8012452:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8012456:	e06c      	b.n	8012532 <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8012458:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801245c:	4613      	mov	r3, r2
 801245e:	005b      	lsls	r3, r3, #1
 8012460:	4413      	add	r3, r2
 8012462:	00db      	lsls	r3, r3, #3
 8012464:	461a      	mov	r2, r3
 8012466:	683b      	ldr	r3, [r7, #0]
 8012468:	4413      	add	r3, r2
 801246a:	2200      	movs	r2, #0
 801246c:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 801246e:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8012472:	4613      	mov	r3, r2
 8012474:	005b      	lsls	r3, r3, #1
 8012476:	4413      	add	r3, r2
 8012478:	00db      	lsls	r3, r3, #3
 801247a:	461a      	mov	r2, r3
 801247c:	683b      	ldr	r3, [r7, #0]
 801247e:	4413      	add	r3, r2
 8012480:	691b      	ldr	r3, [r3, #16]
 8012482:	69ba      	ldr	r2, [r7, #24]
 8012484:	429a      	cmp	r2, r3
 8012486:	d815      	bhi.n	80124b4 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8012488:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801248c:	4613      	mov	r3, r2
 801248e:	005b      	lsls	r3, r3, #1
 8012490:	4413      	add	r3, r2
 8012492:	00db      	lsls	r3, r3, #3
 8012494:	461a      	mov	r2, r3
 8012496:	683b      	ldr	r3, [r7, #0]
 8012498:	4413      	add	r3, r2
 801249a:	68db      	ldr	r3, [r3, #12]
 801249c:	69ba      	ldr	r2, [r7, #24]
 801249e:	1ad3      	subs	r3, r2, r3
 80124a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80124a2:	4293      	cmp	r3, r2
 80124a4:	bf28      	it	cs
 80124a6:	4613      	movcs	r3, r2
 80124a8:	627b      	str	r3, [r7, #36]	@ 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 80124aa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80124ae:	3301      	adds	r3, #1
 80124b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 80124b4:	79fb      	ldrb	r3, [r7, #7]
 80124b6:	f083 0301 	eor.w	r3, r3, #1
 80124ba:	b2db      	uxtb	r3, r3
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d038      	beq.n	8012532 <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 80124c0:	2300      	movs	r3, #0
 80124c2:	60fb      	str	r3, [r7, #12]
 80124c4:	2300      	movs	r3, #0
 80124c6:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 80124c8:	8afb      	ldrh	r3, [r7, #22]
 80124ca:	2b64      	cmp	r3, #100	@ 0x64
 80124cc:	d103      	bne.n	80124d6 <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 80124ce:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 80124d2:	60fb      	str	r3, [r7, #12]
 80124d4:	e009      	b.n	80124ea <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 80124d6:	8afb      	ldrh	r3, [r7, #22]
 80124d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80124dc:	d103      	bne.n	80124e6 <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 80124de:	f649 23b0 	movw	r3, #39600	@ 0x9ab0
 80124e2:	60fb      	str	r3, [r7, #12]
 80124e4:	e001      	b.n	80124ea <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 80124e6:	4b1e      	ldr	r3, [pc, #120]	@ (8012560 <RegionCommonUpdateBandTimeOff+0x1d4>)
 80124e8:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 80124ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80124ec:	4a1c      	ldr	r2, [pc, #112]	@ (8012560 <RegionCommonUpdateBandTimeOff+0x1d4>)
 80124ee:	4293      	cmp	r3, r2
 80124f0:	d90e      	bls.n	8012510 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 80124f2:	68fa      	ldr	r2, [r7, #12]
 80124f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80124f6:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 80124fa:	3b30      	subs	r3, #48	@ 0x30
 80124fc:	4919      	ldr	r1, [pc, #100]	@ (8012564 <RegionCommonUpdateBandTimeOff+0x1d8>)
 80124fe:	fba1 1303 	umull	r1, r3, r1, r3
 8012502:	0c1b      	lsrs	r3, r3, #16
 8012504:	3301      	adds	r3, #1
 8012506:	4918      	ldr	r1, [pc, #96]	@ (8012568 <RegionCommonUpdateBandTimeOff+0x1dc>)
 8012508:	fb01 f303 	mul.w	r3, r1, r3
 801250c:	4413      	add	r3, r2
 801250e:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8012510:	f107 000c 	add.w	r0, r7, #12
 8012514:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012516:	9300      	str	r3, [sp, #0]
 8012518:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801251a:	f107 020c 	add.w	r2, r7, #12
 801251e:	ca06      	ldmia	r2, {r1, r2}
 8012520:	f007 fed1 	bl	801a2c6 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8012524:	f107 030c 	add.w	r3, r7, #12
 8012528:	e893 0003 	ldmia.w	r3, {r0, r1}
 801252c:	f007 ff8a 	bl	801a444 <SysTimeToMs>
 8012530:	6278      	str	r0, [r7, #36]	@ 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 8012532:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8012536:	3301      	adds	r3, #1
 8012538:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801253c:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8012540:	79bb      	ldrb	r3, [r7, #6]
 8012542:	429a      	cmp	r2, r3
 8012544:	f4ff af3f 	bcc.w	80123c6 <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 8012548:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801254c:	2b00      	cmp	r3, #0
 801254e:	d102      	bne.n	8012556 <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8012550:	f04f 33ff 	mov.w	r3, #4294967295
 8012554:	e000      	b.n	8012558 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 8012556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8012558:	4618      	mov	r0, r3
 801255a:	372c      	adds	r7, #44	@ 0x2c
 801255c:	46bd      	mov	sp, r7
 801255e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012560:	0001ec30 	.word	0x0001ec30
 8012564:	c22e4507 	.word	0xc22e4507
 8012568:	00015180 	.word	0x00015180

0801256c <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 801256c:	b480      	push	{r7}
 801256e:	b085      	sub	sp, #20
 8012570:	af00      	add	r7, sp, #0
 8012572:	6078      	str	r0, [r7, #4]
 8012574:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8012576:	2300      	movs	r3, #0
 8012578:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	781b      	ldrb	r3, [r3, #0]
 801257e:	2b03      	cmp	r3, #3
 8012580:	d140      	bne.n	8012604 <RegionCommonParseLinkAdrReq+0x98>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	3301      	adds	r3, #1
 8012586:	781b      	ldrb	r3, [r3, #0]
 8012588:	b25a      	sxtb	r2, r3
 801258a:	683b      	ldr	r3, [r7, #0]
 801258c:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 801258e:	683b      	ldr	r3, [r7, #0]
 8012590:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8012594:	f003 030f 	and.w	r3, r3, #15
 8012598:	b25a      	sxtb	r2, r3
 801259a:	683b      	ldr	r3, [r7, #0]
 801259c:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 801259e:	683b      	ldr	r3, [r7, #0]
 80125a0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80125a4:	b2db      	uxtb	r3, r3
 80125a6:	091b      	lsrs	r3, r3, #4
 80125a8:	b2db      	uxtb	r3, r3
 80125aa:	b25a      	sxtb	r2, r3
 80125ac:	683b      	ldr	r3, [r7, #0]
 80125ae:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	3302      	adds	r3, #2
 80125b4:	781b      	ldrb	r3, [r3, #0]
 80125b6:	461a      	mov	r2, r3
 80125b8:	683b      	ldr	r3, [r7, #0]
 80125ba:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 80125bc:	683b      	ldr	r3, [r7, #0]
 80125be:	889b      	ldrh	r3, [r3, #4]
 80125c0:	b21a      	sxth	r2, r3
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	3303      	adds	r3, #3
 80125c6:	781b      	ldrb	r3, [r3, #0]
 80125c8:	b21b      	sxth	r3, r3
 80125ca:	021b      	lsls	r3, r3, #8
 80125cc:	b21b      	sxth	r3, r3
 80125ce:	4313      	orrs	r3, r2
 80125d0:	b21b      	sxth	r3, r3
 80125d2:	b29a      	uxth	r2, r3
 80125d4:	683b      	ldr	r3, [r7, #0]
 80125d6:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	791a      	ldrb	r2, [r3, #4]
 80125dc:	683b      	ldr	r3, [r7, #0]
 80125de:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 80125e0:	683b      	ldr	r3, [r7, #0]
 80125e2:	781b      	ldrb	r3, [r3, #0]
 80125e4:	091b      	lsrs	r3, r3, #4
 80125e6:	b2db      	uxtb	r3, r3
 80125e8:	f003 0307 	and.w	r3, r3, #7
 80125ec:	b2da      	uxtb	r2, r3
 80125ee:	683b      	ldr	r3, [r7, #0]
 80125f0:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 80125f2:	683b      	ldr	r3, [r7, #0]
 80125f4:	781b      	ldrb	r3, [r3, #0]
 80125f6:	f003 030f 	and.w	r3, r3, #15
 80125fa:	b2da      	uxtb	r2, r3
 80125fc:	683b      	ldr	r3, [r7, #0]
 80125fe:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8012600:	2305      	movs	r3, #5
 8012602:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 8012604:	7bfb      	ldrb	r3, [r7, #15]
}
 8012606:	4618      	mov	r0, r3
 8012608:	3714      	adds	r7, #20
 801260a:	46bd      	mov	sp, r7
 801260c:	bc80      	pop	{r7}
 801260e:	4770      	bx	lr

08012610 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8012610:	b5b0      	push	{r4, r5, r7, lr}
 8012612:	b088      	sub	sp, #32
 8012614:	af02      	add	r7, sp, #8
 8012616:	60f8      	str	r0, [r7, #12]
 8012618:	60b9      	str	r1, [r7, #8]
 801261a:	607a      	str	r2, [r7, #4]
 801261c:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	791b      	ldrb	r3, [r3, #4]
 8012622:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	799b      	ldrb	r3, [r3, #6]
 8012628:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	79db      	ldrb	r3, [r3, #7]
 801262e:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	7a1b      	ldrb	r3, [r3, #8]
 8012634:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8012636:	68fb      	ldr	r3, [r7, #12]
 8012638:	795b      	ldrb	r3, [r3, #5]
 801263a:	f083 0301 	eor.w	r3, r3, #1
 801263e:	b2db      	uxtb	r3, r3
 8012640:	2b00      	cmp	r3, #0
 8012642:	d008      	beq.n	8012656 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	7adb      	ldrb	r3, [r3, #11]
 8012648:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	7a5b      	ldrb	r3, [r3, #9]
 801264e:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8012650:	68fb      	ldr	r3, [r7, #12]
 8012652:	7a9b      	ldrb	r3, [r3, #10]
 8012654:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8012656:	7dfb      	ldrb	r3, [r7, #23]
 8012658:	2b00      	cmp	r3, #0
 801265a:	d04a      	beq.n	80126f2 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 801265c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8012660:	2b0f      	cmp	r3, #15
 8012662:	d103      	bne.n	801266c <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	7a5b      	ldrb	r3, [r3, #9]
 8012668:	75bb      	strb	r3, [r7, #22]
 801266a:	e01d      	b.n	80126a8 <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 801266c:	68fb      	ldr	r3, [r7, #12]
 801266e:	7b18      	ldrb	r0, [r3, #12]
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	6919      	ldr	r1, [r3, #16]
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	f993 5014 	ldrsb.w	r5, [r3, #20]
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8012680:	68fa      	ldr	r2, [r7, #12]
 8012682:	6992      	ldr	r2, [r2, #24]
 8012684:	f997 4016 	ldrsb.w	r4, [r7, #22]
 8012688:	9201      	str	r2, [sp, #4]
 801268a:	9300      	str	r3, [sp, #0]
 801268c:	462b      	mov	r3, r5
 801268e:	4622      	mov	r2, r4
 8012690:	f7ff fd39 	bl	8012106 <RegionCommonChanVerifyDr>
 8012694:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8012696:	f083 0301 	eor.w	r3, r3, #1
 801269a:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 801269c:	2b00      	cmp	r3, #0
 801269e:	d003      	beq.n	80126a8 <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 80126a0:	7dfb      	ldrb	r3, [r7, #23]
 80126a2:	f023 0302 	bic.w	r3, r3, #2
 80126a6:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 80126a8:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80126ac:	2b0f      	cmp	r3, #15
 80126ae:	d103      	bne.n	80126b8 <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	7a9b      	ldrb	r3, [r3, #10]
 80126b4:	757b      	strb	r3, [r7, #21]
 80126b6:	e01c      	b.n	80126f2 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 80126b8:	68fb      	ldr	r3, [r7, #12]
 80126ba:	f993 101d 	ldrsb.w	r1, [r3, #29]
 80126be:	68fb      	ldr	r3, [r7, #12]
 80126c0:	f993 201c 	ldrsb.w	r2, [r3, #28]
 80126c4:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80126c8:	4618      	mov	r0, r3
 80126ca:	f7ff fd8e 	bl	80121ea <RegionCommonValueInRange>
 80126ce:	4603      	mov	r3, r0
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d10e      	bne.n	80126f2 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 80126d4:	68fb      	ldr	r3, [r7, #12]
 80126d6:	f993 301d 	ldrsb.w	r3, [r3, #29]
 80126da:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80126de:	429a      	cmp	r2, r3
 80126e0:	da03      	bge.n	80126ea <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	7f5b      	ldrb	r3, [r3, #29]
 80126e6:	757b      	strb	r3, [r7, #21]
 80126e8:	e003      	b.n	80126f2 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 80126ea:	7dfb      	ldrb	r3, [r7, #23]
 80126ec:	f023 0304 	bic.w	r3, r3, #4
 80126f0:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 80126f2:	7dfb      	ldrb	r3, [r7, #23]
 80126f4:	2b07      	cmp	r3, #7
 80126f6:	d105      	bne.n	8012704 <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 80126f8:	f997 3014 	ldrsb.w	r3, [r7, #20]
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d101      	bne.n	8012704 <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 8012700:	2301      	movs	r3, #1
 8012702:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 8012704:	68bb      	ldr	r3, [r7, #8]
 8012706:	7dba      	ldrb	r2, [r7, #22]
 8012708:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	7d7a      	ldrb	r2, [r7, #21]
 801270e:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8012710:	7d3a      	ldrb	r2, [r7, #20]
 8012712:	683b      	ldr	r3, [r7, #0]
 8012714:	701a      	strb	r2, [r3, #0]

    return status;
 8012716:	7dfb      	ldrb	r3, [r7, #23]
}
 8012718:	4618      	mov	r0, r3
 801271a:	3718      	adds	r7, #24
 801271c:	46bd      	mov	sp, r7
 801271e:	bdb0      	pop	{r4, r5, r7, pc}

08012720 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8012720:	b480      	push	{r7}
 8012722:	b083      	sub	sp, #12
 8012724:	af00      	add	r7, sp, #0
 8012726:	4603      	mov	r3, r0
 8012728:	6039      	str	r1, [r7, #0]
 801272a:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 801272c:	79fb      	ldrb	r3, [r7, #7]
 801272e:	4a06      	ldr	r2, [pc, #24]	@ (8012748 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8012730:	fa02 f303 	lsl.w	r3, r2, r3
 8012734:	461a      	mov	r2, r3
 8012736:	683b      	ldr	r3, [r7, #0]
 8012738:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801273c:	4618      	mov	r0, r3
 801273e:	370c      	adds	r7, #12
 8012740:	46bd      	mov	sp, r7
 8012742:	bc80      	pop	{r7}
 8012744:	4770      	bx	lr
 8012746:	bf00      	nop
 8012748:	000f4240 	.word	0x000f4240

0801274c <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 801274c:	b480      	push	{r7}
 801274e:	b083      	sub	sp, #12
 8012750:	af00      	add	r7, sp, #0
 8012752:	4603      	mov	r3, r0
 8012754:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 8012756:	79fb      	ldrb	r3, [r7, #7]
 8012758:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 801275c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8012760:	4618      	mov	r0, r3
 8012762:	370c      	adds	r7, #12
 8012764:	46bd      	mov	sp, r7
 8012766:	bc80      	pop	{r7}
 8012768:	4770      	bx	lr
	...

0801276c <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 801276c:	b480      	push	{r7}
 801276e:	b085      	sub	sp, #20
 8012770:	af00      	add	r7, sp, #0
 8012772:	60f8      	str	r0, [r7, #12]
 8012774:	607a      	str	r2, [r7, #4]
 8012776:	603b      	str	r3, [r7, #0]
 8012778:	460b      	mov	r3, r1
 801277a:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 801277c:	7afa      	ldrb	r2, [r7, #11]
 801277e:	7afb      	ldrb	r3, [r7, #11]
 8012780:	3b04      	subs	r3, #4
 8012782:	4619      	mov	r1, r3
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	fb03 f101 	mul.w	r1, r3, r1
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8012790:	fb00 f303 	mul.w	r3, r0, r3
 8012794:	440b      	add	r3, r1
 8012796:	005b      	lsls	r3, r3, #1
 8012798:	2b00      	cmp	r3, #0
 801279a:	d013      	beq.n	80127c4 <RegionCommonComputeRxWindowParameters+0x58>
 801279c:	7afb      	ldrb	r3, [r7, #11]
 801279e:	3b04      	subs	r3, #4
 80127a0:	4619      	mov	r1, r3
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	fb03 f101 	mul.w	r1, r3, r1
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80127ae:	fb00 f303 	mul.w	r3, r0, r3
 80127b2:	440b      	add	r3, r1
 80127b4:	0059      	lsls	r1, r3, #1
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	440b      	add	r3, r1
 80127ba:	1e59      	subs	r1, r3, #1
 80127bc:	68fb      	ldr	r3, [r7, #12]
 80127be:	fbb1 f3f3 	udiv	r3, r1, r3
 80127c2:	e00f      	b.n	80127e4 <RegionCommonComputeRxWindowParameters+0x78>
 80127c4:	7afb      	ldrb	r3, [r7, #11]
 80127c6:	3b04      	subs	r3, #4
 80127c8:	4619      	mov	r1, r3
 80127ca:	68fb      	ldr	r3, [r7, #12]
 80127cc:	fb03 f101 	mul.w	r1, r3, r1
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80127d6:	fb00 f303 	mul.w	r3, r0, r3
 80127da:	440b      	add	r3, r1
 80127dc:	0059      	lsls	r1, r3, #1
 80127de:	68fb      	ldr	r3, [r7, #12]
 80127e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80127e4:	429a      	cmp	r2, r3
 80127e6:	bf38      	it	cc
 80127e8:	461a      	movcc	r2, r3
 80127ea:	69bb      	ldr	r3, [r7, #24]
 80127ec:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	009b      	lsls	r3, r3, #2
 80127f2:	4619      	mov	r1, r3
 80127f4:	69bb      	ldr	r3, [r7, #24]
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	68fa      	ldr	r2, [r7, #12]
 80127fa:	fb02 f303 	mul.w	r3, r2, r3
 80127fe:	2b00      	cmp	r3, #0
 8012800:	d007      	beq.n	8012812 <RegionCommonComputeRxWindowParameters+0xa6>
 8012802:	69bb      	ldr	r3, [r7, #24]
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	68fa      	ldr	r2, [r7, #12]
 8012808:	fb02 f303 	mul.w	r3, r2, r3
 801280c:	3301      	adds	r3, #1
 801280e:	085b      	lsrs	r3, r3, #1
 8012810:	e005      	b.n	801281e <RegionCommonComputeRxWindowParameters+0xb2>
 8012812:	69bb      	ldr	r3, [r7, #24]
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	68fa      	ldr	r2, [r7, #12]
 8012818:	fb02 f303 	mul.w	r3, r2, r3
 801281c:	085b      	lsrs	r3, r3, #1
 801281e:	1acb      	subs	r3, r1, r3
 8012820:	683a      	ldr	r2, [r7, #0]
 8012822:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8012826:	fb01 f202 	mul.w	r2, r1, r2
 801282a:	1a9b      	subs	r3, r3, r2
 801282c:	2b00      	cmp	r3, #0
 801282e:	dd27      	ble.n	8012880 <RegionCommonComputeRxWindowParameters+0x114>
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	009b      	lsls	r3, r3, #2
 8012834:	4619      	mov	r1, r3
 8012836:	69bb      	ldr	r3, [r7, #24]
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	68fa      	ldr	r2, [r7, #12]
 801283c:	fb02 f303 	mul.w	r3, r2, r3
 8012840:	2b00      	cmp	r3, #0
 8012842:	d007      	beq.n	8012854 <RegionCommonComputeRxWindowParameters+0xe8>
 8012844:	69bb      	ldr	r3, [r7, #24]
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	68fa      	ldr	r2, [r7, #12]
 801284a:	fb02 f303 	mul.w	r3, r2, r3
 801284e:	3301      	adds	r3, #1
 8012850:	085b      	lsrs	r3, r3, #1
 8012852:	e005      	b.n	8012860 <RegionCommonComputeRxWindowParameters+0xf4>
 8012854:	69bb      	ldr	r3, [r7, #24]
 8012856:	681b      	ldr	r3, [r3, #0]
 8012858:	68fa      	ldr	r2, [r7, #12]
 801285a:	fb02 f303 	mul.w	r3, r2, r3
 801285e:	085b      	lsrs	r3, r3, #1
 8012860:	1acb      	subs	r3, r1, r3
 8012862:	683a      	ldr	r2, [r7, #0]
 8012864:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8012868:	fb01 f202 	mul.w	r2, r1, r2
 801286c:	1a9b      	subs	r3, r3, r2
 801286e:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 8012872:	4a19      	ldr	r2, [pc, #100]	@ (80128d8 <RegionCommonComputeRxWindowParameters+0x16c>)
 8012874:	fb82 1203 	smull	r1, r2, r2, r3
 8012878:	1192      	asrs	r2, r2, #6
 801287a:	17db      	asrs	r3, r3, #31
 801287c:	1ad3      	subs	r3, r2, r3
 801287e:	e024      	b.n	80128ca <RegionCommonComputeRxWindowParameters+0x15e>
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	009b      	lsls	r3, r3, #2
 8012884:	4619      	mov	r1, r3
 8012886:	69bb      	ldr	r3, [r7, #24]
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	68fa      	ldr	r2, [r7, #12]
 801288c:	fb02 f303 	mul.w	r3, r2, r3
 8012890:	2b00      	cmp	r3, #0
 8012892:	d007      	beq.n	80128a4 <RegionCommonComputeRxWindowParameters+0x138>
 8012894:	69bb      	ldr	r3, [r7, #24]
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	68fa      	ldr	r2, [r7, #12]
 801289a:	fb02 f303 	mul.w	r3, r2, r3
 801289e:	3301      	adds	r3, #1
 80128a0:	085b      	lsrs	r3, r3, #1
 80128a2:	e005      	b.n	80128b0 <RegionCommonComputeRxWindowParameters+0x144>
 80128a4:	69bb      	ldr	r3, [r7, #24]
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	68fa      	ldr	r2, [r7, #12]
 80128aa:	fb02 f303 	mul.w	r3, r2, r3
 80128ae:	085b      	lsrs	r3, r3, #1
 80128b0:	1acb      	subs	r3, r1, r3
 80128b2:	683a      	ldr	r2, [r7, #0]
 80128b4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80128b8:	fb01 f202 	mul.w	r2, r1, r2
 80128bc:	1a9b      	subs	r3, r3, r2
 80128be:	4a06      	ldr	r2, [pc, #24]	@ (80128d8 <RegionCommonComputeRxWindowParameters+0x16c>)
 80128c0:	fb82 1203 	smull	r1, r2, r2, r3
 80128c4:	1192      	asrs	r2, r2, #6
 80128c6:	17db      	asrs	r3, r3, #31
 80128c8:	1ad3      	subs	r3, r2, r3
 80128ca:	69fa      	ldr	r2, [r7, #28]
 80128cc:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 80128ce:	bf00      	nop
 80128d0:	3714      	adds	r7, #20
 80128d2:	46bd      	mov	sp, r7
 80128d4:	bc80      	pop	{r7}
 80128d6:	4770      	bx	lr
 80128d8:	10624dd3 	.word	0x10624dd3

080128dc <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 80128dc:	b580      	push	{r7, lr}
 80128de:	b086      	sub	sp, #24
 80128e0:	af00      	add	r7, sp, #0
 80128e2:	4603      	mov	r3, r0
 80128e4:	60b9      	str	r1, [r7, #8]
 80128e6:	607a      	str	r2, [r7, #4]
 80128e8:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 80128ea:	2300      	movs	r3, #0
 80128ec:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 80128ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80128f2:	005b      	lsls	r3, r3, #1
 80128f4:	4618      	mov	r0, r3
 80128f6:	f7ed ffbd 	bl	8000874 <__aeabi_ui2f>
 80128fa:	4603      	mov	r3, r0
 80128fc:	4619      	mov	r1, r3
 80128fe:	68b8      	ldr	r0, [r7, #8]
 8012900:	f7ed ff06 	bl	8000710 <__aeabi_fsub>
 8012904:	4603      	mov	r3, r0
 8012906:	6879      	ldr	r1, [r7, #4]
 8012908:	4618      	mov	r0, r3
 801290a:	f7ed ff01 	bl	8000710 <__aeabi_fsub>
 801290e:	4603      	mov	r3, r0
 8012910:	4618      	mov	r0, r3
 8012912:	f7ed fdf1 	bl	80004f8 <__aeabi_f2d>
 8012916:	4602      	mov	r2, r0
 8012918:	460b      	mov	r3, r1
 801291a:	4610      	mov	r0, r2
 801291c:	4619      	mov	r1, r3
 801291e:	f00d fecb 	bl	80206b8 <floor>
 8012922:	4602      	mov	r2, r0
 8012924:	460b      	mov	r3, r1
 8012926:	4610      	mov	r0, r2
 8012928:	4619      	mov	r1, r3
 801292a:	f7ed fec5 	bl	80006b8 <__aeabi_d2iz>
 801292e:	4603      	mov	r3, r0
 8012930:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 8012932:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012936:	4618      	mov	r0, r3
 8012938:	3718      	adds	r7, #24
 801293a:	46bd      	mov	sp, r7
 801293c:	bd80      	pop	{r7, pc}

0801293e <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 801293e:	b590      	push	{r4, r7, lr}
 8012940:	b087      	sub	sp, #28
 8012942:	af00      	add	r7, sp, #0
 8012944:	60f8      	str	r0, [r7, #12]
 8012946:	60b9      	str	r1, [r7, #8]
 8012948:	607a      	str	r2, [r7, #4]
 801294a:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 801294c:	2300      	movs	r3, #0
 801294e:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 8012950:	2300      	movs	r3, #0
 8012952:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8012954:	2300      	movs	r3, #0
 8012956:	757b      	strb	r3, [r7, #21]
 8012958:	2300      	movs	r3, #0
 801295a:	753b      	strb	r3, [r7, #20]
 801295c:	e09c      	b.n	8012a98 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 801295e:	2300      	movs	r3, #0
 8012960:	74fb      	strb	r3, [r7, #19]
 8012962:	e08f      	b.n	8012a84 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8012964:	68fb      	ldr	r3, [r7, #12]
 8012966:	685a      	ldr	r2, [r3, #4]
 8012968:	7d3b      	ldrb	r3, [r7, #20]
 801296a:	005b      	lsls	r3, r3, #1
 801296c:	4413      	add	r3, r2
 801296e:	881b      	ldrh	r3, [r3, #0]
 8012970:	461a      	mov	r2, r3
 8012972:	7cfb      	ldrb	r3, [r7, #19]
 8012974:	fa42 f303 	asr.w	r3, r2, r3
 8012978:	f003 0301 	and.w	r3, r3, #1
 801297c:	2b00      	cmp	r3, #0
 801297e:	d07e      	beq.n	8012a7e <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8012980:	68fb      	ldr	r3, [r7, #12]
 8012982:	689a      	ldr	r2, [r3, #8]
 8012984:	7d79      	ldrb	r1, [r7, #21]
 8012986:	7cfb      	ldrb	r3, [r7, #19]
 8012988:	440b      	add	r3, r1
 801298a:	4619      	mov	r1, r3
 801298c:	460b      	mov	r3, r1
 801298e:	005b      	lsls	r3, r3, #1
 8012990:	440b      	add	r3, r1
 8012992:	009b      	lsls	r3, r3, #2
 8012994:	4413      	add	r3, r2
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	2b00      	cmp	r3, #0
 801299a:	d06b      	beq.n	8012a74 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 801299c:	68fb      	ldr	r3, [r7, #12]
 801299e:	781b      	ldrb	r3, [r3, #0]
 80129a0:	f083 0301 	eor.w	r3, r3, #1
 80129a4:	b2db      	uxtb	r3, r3
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d011      	beq.n	80129ce <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d00d      	beq.n	80129ce <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 80129b2:	68fb      	ldr	r3, [r7, #12]
 80129b4:	695a      	ldr	r2, [r3, #20]
 80129b6:	7d3b      	ldrb	r3, [r7, #20]
 80129b8:	005b      	lsls	r3, r3, #1
 80129ba:	4413      	add	r3, r2
 80129bc:	881b      	ldrh	r3, [r3, #0]
 80129be:	461a      	mov	r2, r3
 80129c0:	7cfb      	ldrb	r3, [r7, #19]
 80129c2:	fa42 f303 	asr.w	r3, r2, r3
 80129c6:	f003 0301 	and.w	r3, r3, #1
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d054      	beq.n	8012a78 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	785b      	ldrb	r3, [r3, #1]
 80129d2:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	689a      	ldr	r2, [r3, #8]
 80129d8:	7d79      	ldrb	r1, [r7, #21]
 80129da:	7cfb      	ldrb	r3, [r7, #19]
 80129dc:	440b      	add	r3, r1
 80129de:	4619      	mov	r1, r3
 80129e0:	460b      	mov	r3, r1
 80129e2:	005b      	lsls	r3, r3, #1
 80129e4:	440b      	add	r3, r1
 80129e6:	009b      	lsls	r3, r3, #2
 80129e8:	4413      	add	r3, r2
 80129ea:	7a1b      	ldrb	r3, [r3, #8]
 80129ec:	f343 0303 	sbfx	r3, r3, #0, #4
 80129f0:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80129f2:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 80129f4:	68fb      	ldr	r3, [r7, #12]
 80129f6:	689a      	ldr	r2, [r3, #8]
 80129f8:	7d79      	ldrb	r1, [r7, #21]
 80129fa:	7cfb      	ldrb	r3, [r7, #19]
 80129fc:	440b      	add	r3, r1
 80129fe:	4619      	mov	r1, r3
 8012a00:	460b      	mov	r3, r1
 8012a02:	005b      	lsls	r3, r3, #1
 8012a04:	440b      	add	r3, r1
 8012a06:	009b      	lsls	r3, r3, #2
 8012a08:	4413      	add	r3, r2
 8012a0a:	7a1b      	ldrb	r3, [r3, #8]
 8012a0c:	f343 1303 	sbfx	r3, r3, #4, #4
 8012a10:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8012a12:	461a      	mov	r2, r3
 8012a14:	4621      	mov	r1, r4
 8012a16:	f7ff fbe8 	bl	80121ea <RegionCommonValueInRange>
 8012a1a:	4603      	mov	r3, r0
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d02d      	beq.n	8012a7c <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8012a20:	68fb      	ldr	r3, [r7, #12]
 8012a22:	68da      	ldr	r2, [r3, #12]
 8012a24:	68fb      	ldr	r3, [r7, #12]
 8012a26:	6899      	ldr	r1, [r3, #8]
 8012a28:	7d78      	ldrb	r0, [r7, #21]
 8012a2a:	7cfb      	ldrb	r3, [r7, #19]
 8012a2c:	4403      	add	r3, r0
 8012a2e:	4618      	mov	r0, r3
 8012a30:	4603      	mov	r3, r0
 8012a32:	005b      	lsls	r3, r3, #1
 8012a34:	4403      	add	r3, r0
 8012a36:	009b      	lsls	r3, r3, #2
 8012a38:	440b      	add	r3, r1
 8012a3a:	7a5b      	ldrb	r3, [r3, #9]
 8012a3c:	4619      	mov	r1, r3
 8012a3e:	460b      	mov	r3, r1
 8012a40:	005b      	lsls	r3, r3, #1
 8012a42:	440b      	add	r3, r1
 8012a44:	00db      	lsls	r3, r3, #3
 8012a46:	4413      	add	r3, r2
 8012a48:	7d1b      	ldrb	r3, [r3, #20]
 8012a4a:	f083 0301 	eor.w	r3, r3, #1
 8012a4e:	b2db      	uxtb	r3, r3
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d003      	beq.n	8012a5c <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 8012a54:	7dbb      	ldrb	r3, [r7, #22]
 8012a56:	3301      	adds	r3, #1
 8012a58:	75bb      	strb	r3, [r7, #22]
                    continue;
 8012a5a:	e010      	b.n	8012a7e <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8012a5c:	7dfb      	ldrb	r3, [r7, #23]
 8012a5e:	1c5a      	adds	r2, r3, #1
 8012a60:	75fa      	strb	r2, [r7, #23]
 8012a62:	461a      	mov	r2, r3
 8012a64:	68bb      	ldr	r3, [r7, #8]
 8012a66:	4413      	add	r3, r2
 8012a68:	7d79      	ldrb	r1, [r7, #21]
 8012a6a:	7cfa      	ldrb	r2, [r7, #19]
 8012a6c:	440a      	add	r2, r1
 8012a6e:	b2d2      	uxtb	r2, r2
 8012a70:	701a      	strb	r2, [r3, #0]
 8012a72:	e004      	b.n	8012a7e <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8012a74:	bf00      	nop
 8012a76:	e002      	b.n	8012a7e <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 8012a78:	bf00      	nop
 8012a7a:	e000      	b.n	8012a7e <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8012a7c:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8012a7e:	7cfb      	ldrb	r3, [r7, #19]
 8012a80:	3301      	adds	r3, #1
 8012a82:	74fb      	strb	r3, [r7, #19]
 8012a84:	7cfb      	ldrb	r3, [r7, #19]
 8012a86:	2b0f      	cmp	r3, #15
 8012a88:	f67f af6c 	bls.w	8012964 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8012a8c:	7d7b      	ldrb	r3, [r7, #21]
 8012a8e:	3310      	adds	r3, #16
 8012a90:	757b      	strb	r3, [r7, #21]
 8012a92:	7d3b      	ldrb	r3, [r7, #20]
 8012a94:	3301      	adds	r3, #1
 8012a96:	753b      	strb	r3, [r7, #20]
 8012a98:	7d7b      	ldrb	r3, [r7, #21]
 8012a9a:	b29a      	uxth	r2, r3
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	8a1b      	ldrh	r3, [r3, #16]
 8012aa0:	429a      	cmp	r2, r3
 8012aa2:	f4ff af5c 	bcc.w	801295e <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	7dfa      	ldrb	r2, [r7, #23]
 8012aaa:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8012aac:	683b      	ldr	r3, [r7, #0]
 8012aae:	7dba      	ldrb	r2, [r7, #22]
 8012ab0:	701a      	strb	r2, [r3, #0]
}
 8012ab2:	bf00      	nop
 8012ab4:	371c      	adds	r7, #28
 8012ab6:	46bd      	mov	sp, r7
 8012ab8:	bd90      	pop	{r4, r7, pc}

08012aba <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8012aba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012abc:	b08b      	sub	sp, #44	@ 0x2c
 8012abe:	af04      	add	r7, sp, #16
 8012ac0:	60f8      	str	r0, [r7, #12]
 8012ac2:	60b9      	str	r1, [r7, #8]
 8012ac4:	607a      	str	r2, [r7, #4]
 8012ac6:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8012ac8:	68fb      	ldr	r3, [r7, #12]
 8012aca:	685b      	ldr	r3, [r3, #4]
 8012acc:	4618      	mov	r0, r3
 8012ace:	f007 fe7f 	bl	801a7d0 <UTIL_TIMER_GetElapsedTime>
 8012ad2:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8012ad4:	68fb      	ldr	r3, [r7, #12]
 8012ad6:	681a      	ldr	r2, [r3, #0]
 8012ad8:	697b      	ldr	r3, [r7, #20]
 8012ada:	1ad2      	subs	r2, r2, r3
 8012adc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012ade:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8012ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ae2:	2201      	movs	r2, #1
 8012ae4:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 8012ae6:	683b      	ldr	r3, [r7, #0]
 8012ae8:	2200      	movs	r2, #0
 8012aea:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	685b      	ldr	r3, [r3, #4]
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d004      	beq.n	8012afe <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8012af8:	697a      	ldr	r2, [r7, #20]
 8012afa:	429a      	cmp	r2, r3
 8012afc:	d32b      	bcc.n	8012b56 <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8012afe:	68bb      	ldr	r3, [r7, #8]
 8012b00:	2200      	movs	r2, #0
 8012b02:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8012b04:	68fb      	ldr	r3, [r7, #12]
 8012b06:	69db      	ldr	r3, [r3, #28]
 8012b08:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8012b0a:	68fb      	ldr	r3, [r7, #12]
 8012b0c:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8012b0e:	68dd      	ldr	r5, [r3, #12]
 8012b10:	68fb      	ldr	r3, [r7, #12]
 8012b12:	7a5e      	ldrb	r6, [r3, #9]
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	f893 c008 	ldrb.w	ip, [r3, #8]
 8012b1a:	68fb      	ldr	r3, [r7, #12]
 8012b1c:	7d1b      	ldrb	r3, [r3, #20]
 8012b1e:	68fa      	ldr	r2, [r7, #12]
 8012b20:	6992      	ldr	r2, [r2, #24]
 8012b22:	9203      	str	r2, [sp, #12]
 8012b24:	68fa      	ldr	r2, [r7, #12]
 8012b26:	f10d 0e04 	add.w	lr, sp, #4
 8012b2a:	320c      	adds	r2, #12
 8012b2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012b30:	e88e 0003 	stmia.w	lr, {r0, r1}
 8012b34:	9300      	str	r3, [sp, #0]
 8012b36:	4663      	mov	r3, ip
 8012b38:	4632      	mov	r2, r6
 8012b3a:	4629      	mov	r1, r5
 8012b3c:	4620      	mov	r0, r4
 8012b3e:	f7ff fc25 	bl	801238c <RegionCommonUpdateBandTimeOff>
 8012b42:	4602      	mov	r2, r0
 8012b44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012b46:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 8012b48:	68fb      	ldr	r3, [r7, #12]
 8012b4a:	69d8      	ldr	r0, [r3, #28]
 8012b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b4e:	683a      	ldr	r2, [r7, #0]
 8012b50:	6879      	ldr	r1, [r7, #4]
 8012b52:	f7ff fef4 	bl	801293e <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8012b56:	683b      	ldr	r3, [r7, #0]
 8012b58:	781b      	ldrb	r3, [r3, #0]
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d004      	beq.n	8012b68 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8012b5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012b60:	2200      	movs	r2, #0
 8012b62:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8012b64:	2300      	movs	r3, #0
 8012b66:	e006      	b.n	8012b76 <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 8012b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b6a:	781b      	ldrb	r3, [r3, #0]
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d001      	beq.n	8012b74 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8012b70:	230b      	movs	r3, #11
 8012b72:	e000      	b.n	8012b76 <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8012b74:	230c      	movs	r3, #12
    }
}
 8012b76:	4618      	mov	r0, r3
 8012b78:	371c      	adds	r7, #28
 8012b7a:	46bd      	mov	sp, r7
 8012b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012b7e <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8012b7e:	b5b0      	push	{r4, r5, r7, lr}
 8012b80:	b086      	sub	sp, #24
 8012b82:	af02      	add	r7, sp, #8
 8012b84:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	781b      	ldrb	r3, [r3, #0]
 8012b8a:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	f993 2000 	ldrsb.w	r2, [r3]
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8012b98:	429a      	cmp	r2, r3
 8012b9a:	d103      	bne.n	8012ba4 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8012ba2:	e026      	b.n	8012bf2 <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8012ba4:	7bfb      	ldrb	r3, [r7, #15]
 8012ba6:	3b01      	subs	r3, #1
 8012ba8:	b2db      	uxtb	r3, r3
 8012baa:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8012bb2:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8012bb6:	429a      	cmp	r2, r3
 8012bb8:	d019      	beq.n	8012bee <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	78d8      	ldrb	r0, [r3, #3]
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	6859      	ldr	r1, [r3, #4]
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8012bce:	687a      	ldr	r2, [r7, #4]
 8012bd0:	6892      	ldr	r2, [r2, #8]
 8012bd2:	f997 400f 	ldrsb.w	r4, [r7, #15]
 8012bd6:	9201      	str	r2, [sp, #4]
 8012bd8:	9300      	str	r3, [sp, #0]
 8012bda:	462b      	mov	r3, r5
 8012bdc:	4622      	mov	r2, r4
 8012bde:	f7ff fa92 	bl	8012106 <RegionCommonChanVerifyDr>
 8012be2:	4603      	mov	r3, r0
 8012be4:	f083 0301 	eor.w	r3, r3, #1
 8012be8:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d1da      	bne.n	8012ba4 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8012bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 8012bf2:	4618      	mov	r0, r3
 8012bf4:	3710      	adds	r7, #16
 8012bf6:	46bd      	mov	sp, r7
 8012bf8:	bdb0      	pop	{r4, r5, r7, pc}

08012bfa <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8012bfa:	b480      	push	{r7}
 8012bfc:	b083      	sub	sp, #12
 8012bfe:	af00      	add	r7, sp, #0
 8012c00:	4603      	mov	r3, r0
 8012c02:	460a      	mov	r2, r1
 8012c04:	71fb      	strb	r3, [r7, #7]
 8012c06:	4613      	mov	r3, r2
 8012c08:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8012c0a:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8012c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012c12:	4293      	cmp	r3, r2
 8012c14:	bfb8      	it	lt
 8012c16:	4613      	movlt	r3, r2
 8012c18:	b25b      	sxtb	r3, r3
}
 8012c1a:	4618      	mov	r0, r3
 8012c1c:	370c      	adds	r7, #12
 8012c1e:	46bd      	mov	sp, r7
 8012c20:	bc80      	pop	{r7}
 8012c22:	4770      	bx	lr

08012c24 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 8012c24:	b480      	push	{r7}
 8012c26:	b083      	sub	sp, #12
 8012c28:	af00      	add	r7, sp, #0
 8012c2a:	6078      	str	r0, [r7, #4]
 8012c2c:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	009b      	lsls	r3, r3, #2
 8012c32:	683a      	ldr	r2, [r7, #0]
 8012c34:	4413      	add	r3, r2
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	4a07      	ldr	r2, [pc, #28]	@ (8012c58 <RegionCommonGetBandwidth+0x34>)
 8012c3a:	4293      	cmp	r3, r2
 8012c3c:	d004      	beq.n	8012c48 <RegionCommonGetBandwidth+0x24>
 8012c3e:	4a07      	ldr	r2, [pc, #28]	@ (8012c5c <RegionCommonGetBandwidth+0x38>)
 8012c40:	4293      	cmp	r3, r2
 8012c42:	d003      	beq.n	8012c4c <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 8012c44:	2300      	movs	r3, #0
 8012c46:	e002      	b.n	8012c4e <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 8012c48:	2301      	movs	r3, #1
 8012c4a:	e000      	b.n	8012c4e <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 8012c4c:	2302      	movs	r3, #2
    }
}
 8012c4e:	4618      	mov	r0, r3
 8012c50:	370c      	adds	r7, #12
 8012c52:	46bd      	mov	sp, r7
 8012c54:	bc80      	pop	{r7}
 8012c56:	4770      	bx	lr
 8012c58:	0003d090 	.word	0x0003d090
 8012c5c:	0007a120 	.word	0x0007a120

08012c60 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8012c60:	b580      	push	{r7, lr}
 8012c62:	b086      	sub	sp, #24
 8012c64:	af04      	add	r7, sp, #16
 8012c66:	4603      	mov	r3, r0
 8012c68:	6039      	str	r1, [r7, #0]
 8012c6a:	71fb      	strb	r3, [r7, #7]
 8012c6c:	4613      	mov	r3, r2
 8012c6e:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 8012c70:	79fb      	ldrb	r3, [r7, #7]
 8012c72:	2b05      	cmp	r3, #5
 8012c74:	d810      	bhi.n	8012c98 <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 8012c76:	79fb      	ldrb	r3, [r7, #7]
 8012c78:	4a0f      	ldr	r2, [pc, #60]	@ (8012cb8 <RegionCommonRxConfigPrint+0x58>)
 8012c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012c7e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8012c82:	9202      	str	r2, [sp, #8]
 8012c84:	683a      	ldr	r2, [r7, #0]
 8012c86:	9201      	str	r2, [sp, #4]
 8012c88:	9300      	str	r3, [sp, #0]
 8012c8a:	4b0c      	ldr	r3, [pc, #48]	@ (8012cbc <RegionCommonRxConfigPrint+0x5c>)
 8012c8c:	2201      	movs	r2, #1
 8012c8e:	2100      	movs	r1, #0
 8012c90:	2002      	movs	r0, #2
 8012c92:	f006 fe17 	bl	80198c4 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8012c96:	e00a      	b.n	8012cae <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8012c98:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8012c9c:	9301      	str	r3, [sp, #4]
 8012c9e:	683b      	ldr	r3, [r7, #0]
 8012ca0:	9300      	str	r3, [sp, #0]
 8012ca2:	4b07      	ldr	r3, [pc, #28]	@ (8012cc0 <RegionCommonRxConfigPrint+0x60>)
 8012ca4:	2201      	movs	r2, #1
 8012ca6:	2100      	movs	r1, #0
 8012ca8:	2002      	movs	r0, #2
 8012caa:	f006 fe0b 	bl	80198c4 <UTIL_ADV_TRACE_COND_FSend>
}
 8012cae:	bf00      	nop
 8012cb0:	3708      	adds	r7, #8
 8012cb2:	46bd      	mov	sp, r7
 8012cb4:	bd80      	pop	{r7, pc}
 8012cb6:	bf00      	nop
 8012cb8:	200000bc 	.word	0x200000bc
 8012cbc:	08020af4 	.word	0x08020af4
 8012cc0:	08020b14 	.word	0x08020b14

08012cc4 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8012cc4:	b580      	push	{r7, lr}
 8012cc6:	b084      	sub	sp, #16
 8012cc8:	af02      	add	r7, sp, #8
 8012cca:	6078      	str	r0, [r7, #4]
 8012ccc:	460b      	mov	r3, r1
 8012cce:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8012cd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012cd4:	9301      	str	r3, [sp, #4]
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	9300      	str	r3, [sp, #0]
 8012cda:	4b05      	ldr	r3, [pc, #20]	@ (8012cf0 <RegionCommonTxConfigPrint+0x2c>)
 8012cdc:	2201      	movs	r2, #1
 8012cde:	2100      	movs	r1, #0
 8012ce0:	2002      	movs	r0, #2
 8012ce2:	f006 fdef 	bl	80198c4 <UTIL_ADV_TRACE_COND_FSend>
}
 8012ce6:	bf00      	nop
 8012ce8:	3708      	adds	r7, #8
 8012cea:	46bd      	mov	sp, r7
 8012cec:	bd80      	pop	{r7, pc}
 8012cee:	bf00      	nop
 8012cf0:	08020b30 	.word	0x08020b30

08012cf4 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8012cf4:	b580      	push	{r7, lr}
 8012cf6:	b082      	sub	sp, #8
 8012cf8:	af00      	add	r7, sp, #0
 8012cfa:	6078      	str	r0, [r7, #4]
 8012cfc:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8012cfe:	4b2d      	ldr	r3, [pc, #180]	@ (8012db4 <VerifyRfFreq+0xc0>)
 8012d00:	6a1b      	ldr	r3, [r3, #32]
 8012d02:	6878      	ldr	r0, [r7, #4]
 8012d04:	4798      	blx	r3
 8012d06:	4603      	mov	r3, r0
 8012d08:	f083 0301 	eor.w	r3, r3, #1
 8012d0c:	b2db      	uxtb	r3, r3
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d001      	beq.n	8012d16 <VerifyRfFreq+0x22>
    {
        return false;
 8012d12:	2300      	movs	r3, #0
 8012d14:	e04a      	b.n	8012dac <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	4a27      	ldr	r2, [pc, #156]	@ (8012db8 <VerifyRfFreq+0xc4>)
 8012d1a:	4293      	cmp	r3, r2
 8012d1c:	d307      	bcc.n	8012d2e <VerifyRfFreq+0x3a>
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	4a26      	ldr	r2, [pc, #152]	@ (8012dbc <VerifyRfFreq+0xc8>)
 8012d22:	4293      	cmp	r3, r2
 8012d24:	d803      	bhi.n	8012d2e <VerifyRfFreq+0x3a>
    {
        *band = 2;
 8012d26:	683b      	ldr	r3, [r7, #0]
 8012d28:	2202      	movs	r2, #2
 8012d2a:	701a      	strb	r2, [r3, #0]
 8012d2c:	e03d      	b.n	8012daa <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	4a22      	ldr	r2, [pc, #136]	@ (8012dbc <VerifyRfFreq+0xc8>)
 8012d32:	4293      	cmp	r3, r2
 8012d34:	d907      	bls.n	8012d46 <VerifyRfFreq+0x52>
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	4a21      	ldr	r2, [pc, #132]	@ (8012dc0 <VerifyRfFreq+0xcc>)
 8012d3a:	4293      	cmp	r3, r2
 8012d3c:	d803      	bhi.n	8012d46 <VerifyRfFreq+0x52>
    {
        *band = 0;
 8012d3e:	683b      	ldr	r3, [r7, #0]
 8012d40:	2200      	movs	r2, #0
 8012d42:	701a      	strb	r2, [r3, #0]
 8012d44:	e031      	b.n	8012daa <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	4a1d      	ldr	r2, [pc, #116]	@ (8012dc0 <VerifyRfFreq+0xcc>)
 8012d4a:	4293      	cmp	r3, r2
 8012d4c:	d907      	bls.n	8012d5e <VerifyRfFreq+0x6a>
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	4a1c      	ldr	r2, [pc, #112]	@ (8012dc4 <VerifyRfFreq+0xd0>)
 8012d52:	4293      	cmp	r3, r2
 8012d54:	d803      	bhi.n	8012d5e <VerifyRfFreq+0x6a>
    {
        *band = 1;
 8012d56:	683b      	ldr	r3, [r7, #0]
 8012d58:	2201      	movs	r2, #1
 8012d5a:	701a      	strb	r2, [r3, #0]
 8012d5c:	e025      	b.n	8012daa <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	4a19      	ldr	r2, [pc, #100]	@ (8012dc8 <VerifyRfFreq+0xd4>)
 8012d62:	4293      	cmp	r3, r2
 8012d64:	d907      	bls.n	8012d76 <VerifyRfFreq+0x82>
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	4a18      	ldr	r2, [pc, #96]	@ (8012dcc <VerifyRfFreq+0xd8>)
 8012d6a:	4293      	cmp	r3, r2
 8012d6c:	d803      	bhi.n	8012d76 <VerifyRfFreq+0x82>
    {
        *band = 5;
 8012d6e:	683b      	ldr	r3, [r7, #0]
 8012d70:	2205      	movs	r2, #5
 8012d72:	701a      	strb	r2, [r3, #0]
 8012d74:	e019      	b.n	8012daa <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	4a15      	ldr	r2, [pc, #84]	@ (8012dd0 <VerifyRfFreq+0xdc>)
 8012d7a:	4293      	cmp	r3, r2
 8012d7c:	d907      	bls.n	8012d8e <VerifyRfFreq+0x9a>
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	4a14      	ldr	r2, [pc, #80]	@ (8012dd4 <VerifyRfFreq+0xe0>)
 8012d82:	4293      	cmp	r3, r2
 8012d84:	d803      	bhi.n	8012d8e <VerifyRfFreq+0x9a>
    {
        *band = 3;
 8012d86:	683b      	ldr	r3, [r7, #0]
 8012d88:	2203      	movs	r2, #3
 8012d8a:	701a      	strb	r2, [r3, #0]
 8012d8c:	e00d      	b.n	8012daa <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	4a11      	ldr	r2, [pc, #68]	@ (8012dd8 <VerifyRfFreq+0xe4>)
 8012d92:	4293      	cmp	r3, r2
 8012d94:	d307      	bcc.n	8012da6 <VerifyRfFreq+0xb2>
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	4a10      	ldr	r2, [pc, #64]	@ (8012ddc <VerifyRfFreq+0xe8>)
 8012d9a:	4293      	cmp	r3, r2
 8012d9c:	d803      	bhi.n	8012da6 <VerifyRfFreq+0xb2>
    {
        *band = 4;
 8012d9e:	683b      	ldr	r3, [r7, #0]
 8012da0:	2204      	movs	r2, #4
 8012da2:	701a      	strb	r2, [r3, #0]
 8012da4:	e001      	b.n	8012daa <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 8012da6:	2300      	movs	r3, #0
 8012da8:	e000      	b.n	8012dac <VerifyRfFreq+0xb8>
    }
    return true;
 8012daa:	2301      	movs	r3, #1
}
 8012dac:	4618      	mov	r0, r3
 8012dae:	3708      	adds	r7, #8
 8012db0:	46bd      	mov	sp, r7
 8012db2:	bd80      	pop	{r7, pc}
 8012db4:	0802146c 	.word	0x0802146c
 8012db8:	337055c0 	.word	0x337055c0
 8012dbc:	338eda3f 	.word	0x338eda3f
 8012dc0:	33bca100 	.word	0x33bca100
 8012dc4:	33c5c8c0 	.word	0x33c5c8c0
 8012dc8:	33c74f5f 	.word	0x33c74f5f
 8012dcc:	33cef080 	.word	0x33cef080
 8012dd0:	33d1fdbf 	.word	0x33d1fdbf
 8012dd4:	33d5ce50 	.word	0x33d5ce50
 8012dd8:	33d691a0 	.word	0x33d691a0
 8012ddc:	33db2580 	.word	0x33db2580

08012de0 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8012de0:	b590      	push	{r4, r7, lr}
 8012de2:	b08b      	sub	sp, #44	@ 0x2c
 8012de4:	af04      	add	r7, sp, #16
 8012de6:	4603      	mov	r3, r0
 8012de8:	460a      	mov	r2, r1
 8012dea:	71fb      	strb	r3, [r7, #7]
 8012dec:	4613      	mov	r3, r2
 8012dee:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 8012df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012df4:	4a1f      	ldr	r2, [pc, #124]	@ (8012e74 <GetTimeOnAir+0x94>)
 8012df6:	5cd3      	ldrb	r3, [r2, r3]
 8012df8:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8012dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012dfe:	491e      	ldr	r1, [pc, #120]	@ (8012e78 <GetTimeOnAir+0x98>)
 8012e00:	4618      	mov	r0, r3
 8012e02:	f7ff ff0f 	bl	8012c24 <RegionCommonGetBandwidth>
 8012e06:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8012e08:	2300      	movs	r3, #0
 8012e0a:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8012e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012e10:	2b07      	cmp	r3, #7
 8012e12:	d118      	bne.n	8012e46 <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8012e14:	4b19      	ldr	r3, [pc, #100]	@ (8012e7c <GetTimeOnAir+0x9c>)
 8012e16:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012e18:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012e1c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8012e20:	fb02 f303 	mul.w	r3, r2, r3
 8012e24:	4619      	mov	r1, r3
 8012e26:	88bb      	ldrh	r3, [r7, #4]
 8012e28:	b2db      	uxtb	r3, r3
 8012e2a:	2201      	movs	r2, #1
 8012e2c:	9203      	str	r2, [sp, #12]
 8012e2e:	9302      	str	r3, [sp, #8]
 8012e30:	2300      	movs	r3, #0
 8012e32:	9301      	str	r3, [sp, #4]
 8012e34:	2305      	movs	r3, #5
 8012e36:	9300      	str	r3, [sp, #0]
 8012e38:	2300      	movs	r3, #0
 8012e3a:	460a      	mov	r2, r1
 8012e3c:	68f9      	ldr	r1, [r7, #12]
 8012e3e:	2000      	movs	r0, #0
 8012e40:	47a0      	blx	r4
 8012e42:	6178      	str	r0, [r7, #20]
 8012e44:	e011      	b.n	8012e6a <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8012e46:	4b0d      	ldr	r3, [pc, #52]	@ (8012e7c <GetTimeOnAir+0x9c>)
 8012e48:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012e4a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8012e4e:	88bb      	ldrh	r3, [r7, #4]
 8012e50:	b2db      	uxtb	r3, r3
 8012e52:	2101      	movs	r1, #1
 8012e54:	9103      	str	r1, [sp, #12]
 8012e56:	9302      	str	r3, [sp, #8]
 8012e58:	2300      	movs	r3, #0
 8012e5a:	9301      	str	r3, [sp, #4]
 8012e5c:	2308      	movs	r3, #8
 8012e5e:	9300      	str	r3, [sp, #0]
 8012e60:	2301      	movs	r3, #1
 8012e62:	68f9      	ldr	r1, [r7, #12]
 8012e64:	2001      	movs	r0, #1
 8012e66:	47a0      	blx	r4
 8012e68:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 8012e6a:	697b      	ldr	r3, [r7, #20]
}
 8012e6c:	4618      	mov	r0, r3
 8012e6e:	371c      	adds	r7, #28
 8012e70:	46bd      	mov	sp, r7
 8012e72:	bd90      	pop	{r4, r7, pc}
 8012e74:	0802102c 	.word	0x0802102c
 8012e78:	08021034 	.word	0x08021034
 8012e7c:	0802146c 	.word	0x0802146c

08012e80 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8012e80:	b580      	push	{r7, lr}
 8012e82:	b088      	sub	sp, #32
 8012e84:	af00      	add	r7, sp, #0
 8012e86:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8012e88:	2300      	movs	r3, #0
 8012e8a:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	781b      	ldrb	r3, [r3, #0]
 8012e90:	3b01      	subs	r3, #1
 8012e92:	2b37      	cmp	r3, #55	@ 0x37
 8012e94:	f200 8122 	bhi.w	80130dc <RegionEU868GetPhyParam+0x25c>
 8012e98:	a201      	add	r2, pc, #4	@ (adr r2, 8012ea0 <RegionEU868GetPhyParam+0x20>)
 8012e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e9e:	bf00      	nop
 8012ea0:	08012f81 	.word	0x08012f81
 8012ea4:	08012f87 	.word	0x08012f87
 8012ea8:	080130dd 	.word	0x080130dd
 8012eac:	080130dd 	.word	0x080130dd
 8012eb0:	080130dd 	.word	0x080130dd
 8012eb4:	08012f8d 	.word	0x08012f8d
 8012eb8:	080130dd 	.word	0x080130dd
 8012ebc:	08012fc7 	.word	0x08012fc7
 8012ec0:	080130dd 	.word	0x080130dd
 8012ec4:	08012fcd 	.word	0x08012fcd
 8012ec8:	08012fd3 	.word	0x08012fd3
 8012ecc:	08012fd9 	.word	0x08012fd9
 8012ed0:	08012fdf 	.word	0x08012fdf
 8012ed4:	08012fef 	.word	0x08012fef
 8012ed8:	08012fff 	.word	0x08012fff
 8012edc:	08013005 	.word	0x08013005
 8012ee0:	0801300d 	.word	0x0801300d
 8012ee4:	08013015 	.word	0x08013015
 8012ee8:	0801301d 	.word	0x0801301d
 8012eec:	08013025 	.word	0x08013025
 8012ef0:	0801302d 	.word	0x0801302d
 8012ef4:	08013041 	.word	0x08013041
 8012ef8:	08013047 	.word	0x08013047
 8012efc:	0801304d 	.word	0x0801304d
 8012f00:	08013053 	.word	0x08013053
 8012f04:	0801305f 	.word	0x0801305f
 8012f08:	0801306b 	.word	0x0801306b
 8012f0c:	08013071 	.word	0x08013071
 8012f10:	08013079 	.word	0x08013079
 8012f14:	0801307f 	.word	0x0801307f
 8012f18:	08013085 	.word	0x08013085
 8012f1c:	0801308d 	.word	0x0801308d
 8012f20:	08012f93 	.word	0x08012f93
 8012f24:	080130dd 	.word	0x080130dd
 8012f28:	080130dd 	.word	0x080130dd
 8012f2c:	080130dd 	.word	0x080130dd
 8012f30:	080130dd 	.word	0x080130dd
 8012f34:	080130dd 	.word	0x080130dd
 8012f38:	080130dd 	.word	0x080130dd
 8012f3c:	080130dd 	.word	0x080130dd
 8012f40:	080130dd 	.word	0x080130dd
 8012f44:	080130dd 	.word	0x080130dd
 8012f48:	080130dd 	.word	0x080130dd
 8012f4c:	080130dd 	.word	0x080130dd
 8012f50:	080130dd 	.word	0x080130dd
 8012f54:	080130dd 	.word	0x080130dd
 8012f58:	08013093 	.word	0x08013093
 8012f5c:	08013099 	.word	0x08013099
 8012f60:	080130a7 	.word	0x080130a7
 8012f64:	080130dd 	.word	0x080130dd
 8012f68:	080130dd 	.word	0x080130dd
 8012f6c:	080130ad 	.word	0x080130ad
 8012f70:	080130b3 	.word	0x080130b3
 8012f74:	080130dd 	.word	0x080130dd
 8012f78:	080130b9 	.word	0x080130b9
 8012f7c:	080130c9 	.word	0x080130c9
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8012f80:	2300      	movs	r3, #0
 8012f82:	61bb      	str	r3, [r7, #24]
            break;
 8012f84:	e0ab      	b.n	80130de <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 8012f86:	2300      	movs	r3, #0
 8012f88:	61bb      	str	r3, [r7, #24]
            break;
 8012f8a:	e0a8      	b.n	80130de <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8012f8c:	2300      	movs	r3, #0
 8012f8e:	61bb      	str	r3, [r7, #24]
            break;
 8012f90:	e0a5      	b.n	80130de <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8012f98:	733b      	strb	r3, [r7, #12]
 8012f9a:	2307      	movs	r3, #7
 8012f9c:	737b      	strb	r3, [r7, #13]
 8012f9e:	2300      	movs	r3, #0
 8012fa0:	73bb      	strb	r3, [r7, #14]
 8012fa2:	2310      	movs	r3, #16
 8012fa4:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8012fa6:	4b51      	ldr	r3, [pc, #324]	@ (80130ec <RegionEU868GetPhyParam+0x26c>)
 8012fa8:	681b      	ldr	r3, [r3, #0]
 8012faa:	f503 7358 	add.w	r3, r3, #864	@ 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8012fae:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8012fb0:	4b4e      	ldr	r3, [pc, #312]	@ (80130ec <RegionEU868GetPhyParam+0x26c>)
 8012fb2:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8012fb4:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8012fb6:	f107 030c 	add.w	r3, r7, #12
 8012fba:	4618      	mov	r0, r3
 8012fbc:	f7ff fddf 	bl	8012b7e <RegionCommonGetNextLowerTxDr>
 8012fc0:	4603      	mov	r3, r0
 8012fc2:	61bb      	str	r3, [r7, #24]
            break;
 8012fc4:	e08b      	b.n	80130de <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 8012fc6:	2300      	movs	r3, #0
 8012fc8:	61bb      	str	r3, [r7, #24]
            break;
 8012fca:	e088      	b.n	80130de <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8012fcc:	2300      	movs	r3, #0
 8012fce:	61bb      	str	r3, [r7, #24]
            break;
 8012fd0:	e085      	b.n	80130de <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8012fd2:	2340      	movs	r3, #64	@ 0x40
 8012fd4:	61bb      	str	r3, [r7, #24]
            break;
 8012fd6:	e082      	b.n	80130de <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8012fd8:	2320      	movs	r3, #32
 8012fda:	61bb      	str	r3, [r7, #24]
            break;
 8012fdc:	e07f      	b.n	80130de <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8012fe4:	461a      	mov	r2, r3
 8012fe6:	4b42      	ldr	r3, [pc, #264]	@ (80130f0 <RegionEU868GetPhyParam+0x270>)
 8012fe8:	5c9b      	ldrb	r3, [r3, r2]
 8012fea:	61bb      	str	r3, [r7, #24]
            break;
 8012fec:	e077      	b.n	80130de <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8012ff4:	461a      	mov	r2, r3
 8012ff6:	4b3f      	ldr	r3, [pc, #252]	@ (80130f4 <RegionEU868GetPhyParam+0x274>)
 8012ff8:	5c9b      	ldrb	r3, [r3, r2]
 8012ffa:	61bb      	str	r3, [r7, #24]
            break;
 8012ffc:	e06f      	b.n	80130de <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8012ffe:	2301      	movs	r3, #1
 8013000:	61bb      	str	r3, [r7, #24]
            break;
 8013002:	e06c      	b.n	80130de <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8013004:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8013008:	61bb      	str	r3, [r7, #24]
            break;
 801300a:	e068      	b.n	80130de <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 801300c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8013010:	61bb      	str	r3, [r7, #24]
            break;
 8013012:	e064      	b.n	80130de <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8013014:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8013018:	61bb      	str	r3, [r7, #24]
            break;
 801301a:	e060      	b.n	80130de <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 801301c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8013020:	61bb      	str	r3, [r7, #24]
            break;
 8013022:	e05c      	b.n	80130de <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8013024:	f241 7370 	movw	r3, #6000	@ 0x1770
 8013028:	61bb      	str	r3, [r7, #24]
            break;
 801302a:	e058      	b.n	80130de <RegionEU868GetPhyParam+0x25e>
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))

        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 801302c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8013030:	4831      	ldr	r0, [pc, #196]	@ (80130f8 <RegionEU868GetPhyParam+0x278>)
 8013032:	f003 fecb 	bl	8016dcc <randr>
 8013036:	4603      	mov	r3, r0
 8013038:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 801303c:	61bb      	str	r3, [r7, #24]
            break;
 801303e:	e04e      	b.n	80130de <RegionEU868GetPhyParam+0x25e>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8013040:	2300      	movs	r3, #0
 8013042:	61bb      	str	r3, [r7, #24]
            break;
 8013044:	e04b      	b.n	80130de <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8013046:	4b2d      	ldr	r3, [pc, #180]	@ (80130fc <RegionEU868GetPhyParam+0x27c>)
 8013048:	61bb      	str	r3, [r7, #24]
            break;
 801304a:	e048      	b.n	80130de <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 801304c:	2300      	movs	r3, #0
 801304e:	61bb      	str	r3, [r7, #24]
            break;
 8013050:	e045      	b.n	80130de <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8013052:	4b26      	ldr	r3, [pc, #152]	@ (80130ec <RegionEU868GetPhyParam+0x26c>)
 8013054:	681b      	ldr	r3, [r3, #0]
 8013056:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 801305a:	61bb      	str	r3, [r7, #24]
            break;
 801305c:	e03f      	b.n	80130de <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 801305e:	4b23      	ldr	r3, [pc, #140]	@ (80130ec <RegionEU868GetPhyParam+0x26c>)
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8013066:	61bb      	str	r3, [r7, #24]
            break;
 8013068:	e039      	b.n	80130de <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 801306a:	2310      	movs	r3, #16
 801306c:	61bb      	str	r3, [r7, #24]
            break;
 801306e:	e036      	b.n	80130de <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8013070:	4b1e      	ldr	r3, [pc, #120]	@ (80130ec <RegionEU868GetPhyParam+0x26c>)
 8013072:	681b      	ldr	r3, [r3, #0]
 8013074:	61bb      	str	r3, [r7, #24]
            break;
 8013076:	e032      	b.n	80130de <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 8013078:	2300      	movs	r3, #0
 801307a:	61bb      	str	r3, [r7, #24]
            break;
 801307c:	e02f      	b.n	80130de <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 801307e:	2300      	movs	r3, #0
 8013080:	61bb      	str	r3, [r7, #24]
            break;
 8013082:	e02c      	b.n	80130de <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8013084:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8013088:	61bb      	str	r3, [r7, #24]
            break;
 801308a:	e028      	b.n	80130de <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 801308c:	4b1c      	ldr	r3, [pc, #112]	@ (8013100 <RegionEU868GetPhyParam+0x280>)
 801308e:	61bb      	str	r3, [r7, #24]
            break;
 8013090:	e025      	b.n	80130de <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8013092:	4b1a      	ldr	r3, [pc, #104]	@ (80130fc <RegionEU868GetPhyParam+0x27c>)
 8013094:	61bb      	str	r3, [r7, #24]
            break;
 8013096:	e022      	b.n	80130de <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8013098:	2311      	movs	r3, #17
 801309a:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 801309c:	2301      	movs	r3, #1
 801309e:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 80130a0:	2300      	movs	r3, #0
 80130a2:	76bb      	strb	r3, [r7, #26]
            break;
 80130a4:	e01b      	b.n	80130de <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 80130a6:	2303      	movs	r3, #3
 80130a8:	61bb      	str	r3, [r7, #24]
            break;
 80130aa:	e018      	b.n	80130de <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 80130ac:	4b13      	ldr	r3, [pc, #76]	@ (80130fc <RegionEU868GetPhyParam+0x27c>)
 80130ae:	61bb      	str	r3, [r7, #24]
            break;
 80130b0:	e015      	b.n	80130de <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 80130b2:	2303      	movs	r3, #3
 80130b4:	61bb      	str	r3, [r7, #24]
            break;
 80130b6:	e012      	b.n	80130de <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80130be:	461a      	mov	r2, r3
 80130c0:	4b10      	ldr	r3, [pc, #64]	@ (8013104 <RegionEU868GetPhyParam+0x284>)
 80130c2:	5c9b      	ldrb	r3, [r3, r2]
 80130c4:	61bb      	str	r3, [r7, #24]
            break;
 80130c6:	e00a      	b.n	80130de <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80130ce:	490e      	ldr	r1, [pc, #56]	@ (8013108 <RegionEU868GetPhyParam+0x288>)
 80130d0:	4618      	mov	r0, r3
 80130d2:	f7ff fda7 	bl	8012c24 <RegionCommonGetBandwidth>
 80130d6:	4603      	mov	r3, r0
 80130d8:	61bb      	str	r3, [r7, #24]
            break;
 80130da:	e000      	b.n	80130de <RegionEU868GetPhyParam+0x25e>
        }
        default:
        {
            break;
 80130dc:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 80130de:	69bb      	ldr	r3, [r7, #24]
 80130e0:	61fb      	str	r3, [r7, #28]
 80130e2:	69fb      	ldr	r3, [r7, #28]
}
 80130e4:	4618      	mov	r0, r3
 80130e6:	3720      	adds	r7, #32
 80130e8:	46bd      	mov	sp, r7
 80130ea:	bd80      	pop	{r7, pc}
 80130ec:	20001220 	.word	0x20001220
 80130f0:	08021054 	.word	0x08021054
 80130f4:	0802105c 	.word	0x0802105c
 80130f8:	fffffc18 	.word	0xfffffc18
 80130fc:	33d3e608 	.word	0x33d3e608
 8013100:	4009999a 	.word	0x4009999a
 8013104:	0802102c 	.word	0x0802102c
 8013108:	08021034 	.word	0x08021034

0801310c <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 801310c:	b590      	push	{r4, r7, lr}
 801310e:	b085      	sub	sp, #20
 8013110:	af02      	add	r7, sp, #8
 8013112:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8013114:	4b11      	ldr	r3, [pc, #68]	@ (801315c <RegionEU868SetBandTxDone+0x50>)
 8013116:	681a      	ldr	r2, [r3, #0]
 8013118:	4b11      	ldr	r3, [pc, #68]	@ (8013160 <RegionEU868SetBandTxDone+0x54>)
 801311a:	6819      	ldr	r1, [r3, #0]
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	781b      	ldrb	r3, [r3, #0]
 8013120:	4618      	mov	r0, r3
 8013122:	4603      	mov	r3, r0
 8013124:	005b      	lsls	r3, r3, #1
 8013126:	4403      	add	r3, r0
 8013128:	009b      	lsls	r3, r3, #2
 801312a:	440b      	add	r3, r1
 801312c:	3309      	adds	r3, #9
 801312e:	781b      	ldrb	r3, [r3, #0]
 8013130:	4619      	mov	r1, r3
 8013132:	460b      	mov	r3, r1
 8013134:	005b      	lsls	r3, r3, #1
 8013136:	440b      	add	r3, r1
 8013138:	00db      	lsls	r3, r3, #3
 801313a:	18d0      	adds	r0, r2, r3
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	6899      	ldr	r1, [r3, #8]
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	785c      	ldrb	r4, [r3, #1]
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	691a      	ldr	r2, [r3, #16]
 8013148:	9200      	str	r2, [sp, #0]
 801314a:	68db      	ldr	r3, [r3, #12]
 801314c:	4622      	mov	r2, r4
 801314e:	f7ff f8ef 	bl	8012330 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 8013152:	bf00      	nop
 8013154:	370c      	adds	r7, #12
 8013156:	46bd      	mov	sp, r7
 8013158:	bd90      	pop	{r4, r7, pc}
 801315a:	bf00      	nop
 801315c:	20001224 	.word	0x20001224
 8013160:	20001220 	.word	0x20001220

08013164 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8013164:	b580      	push	{r7, lr}
 8013166:	b0b0      	sub	sp, #192	@ 0xc0
 8013168:	af00      	add	r7, sp, #0
 801316a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 801316c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8013170:	2290      	movs	r2, #144	@ 0x90
 8013172:	2100      	movs	r1, #0
 8013174:	4618      	mov	r0, r3
 8013176:	f00c fd83 	bl	801fc80 <memset>
 801317a:	2364      	movs	r3, #100	@ 0x64
 801317c:	863b      	strh	r3, [r7, #48]	@ 0x30
 801317e:	2364      	movs	r3, #100	@ 0x64
 8013180:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8013184:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8013188:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 801318c:	230a      	movs	r3, #10
 801318e:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
 8013192:	2364      	movs	r3, #100	@ 0x64
 8013194:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8013198:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801319c:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	7b1b      	ldrb	r3, [r3, #12]
 80131a4:	2b02      	cmp	r3, #2
 80131a6:	d05d      	beq.n	8013264 <RegionEU868InitDefaults+0x100>
 80131a8:	2b02      	cmp	r3, #2
 80131aa:	dc6a      	bgt.n	8013282 <RegionEU868InitDefaults+0x11e>
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d002      	beq.n	80131b6 <RegionEU868InitDefaults+0x52>
 80131b0:	2b01      	cmp	r3, #1
 80131b2:	d03e      	beq.n	8013232 <RegionEU868InitDefaults+0xce>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 80131b4:	e065      	b.n	8013282 <RegionEU868InitDefaults+0x11e>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d062      	beq.n	8013284 <RegionEU868InitDefaults+0x120>
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	685b      	ldr	r3, [r3, #4]
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d05e      	beq.n	8013284 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	685b      	ldr	r3, [r3, #4]
 80131ca:	4a30      	ldr	r2, [pc, #192]	@ (801328c <RegionEU868InitDefaults+0x128>)
 80131cc:	6013      	str	r3, [r2, #0]
            RegionBands = (Band_t*) params->Bands;
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	689b      	ldr	r3, [r3, #8]
 80131d2:	4a2f      	ldr	r2, [pc, #188]	@ (8013290 <RegionEU868InitDefaults+0x12c>)
 80131d4:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 80131d6:	4b2e      	ldr	r3, [pc, #184]	@ (8013290 <RegionEU868InitDefaults+0x12c>)
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80131de:	2290      	movs	r2, #144	@ 0x90
 80131e0:	4618      	mov	r0, r3
 80131e2:	f003 fe0a 	bl	8016dfa <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 80131e6:	4b29      	ldr	r3, [pc, #164]	@ (801328c <RegionEU868InitDefaults+0x128>)
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	4a2a      	ldr	r2, [pc, #168]	@ (8013294 <RegionEU868InitDefaults+0x130>)
 80131ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80131ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 80131f2:	4b26      	ldr	r3, [pc, #152]	@ (801328c <RegionEU868InitDefaults+0x128>)
 80131f4:	681b      	ldr	r3, [r3, #0]
 80131f6:	4a28      	ldr	r2, [pc, #160]	@ (8013298 <RegionEU868InitDefaults+0x134>)
 80131f8:	330c      	adds	r3, #12
 80131fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80131fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8013200:	4b22      	ldr	r3, [pc, #136]	@ (801328c <RegionEU868InitDefaults+0x128>)
 8013202:	681b      	ldr	r3, [r3, #0]
 8013204:	4a25      	ldr	r2, [pc, #148]	@ (801329c <RegionEU868InitDefaults+0x138>)
 8013206:	3318      	adds	r3, #24
 8013208:	ca07      	ldmia	r2, {r0, r1, r2}
 801320a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 801320e:	4b1f      	ldr	r3, [pc, #124]	@ (801328c <RegionEU868InitDefaults+0x128>)
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	2207      	movs	r2, #7
 8013214:	f8a3 236c 	strh.w	r2, [r3, #876]	@ 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8013218:	4b1c      	ldr	r3, [pc, #112]	@ (801328c <RegionEU868InitDefaults+0x128>)
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8013220:	4b1a      	ldr	r3, [pc, #104]	@ (801328c <RegionEU868InitDefaults+0x128>)
 8013222:	681b      	ldr	r3, [r3, #0]
 8013224:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8013228:	2201      	movs	r2, #1
 801322a:	4619      	mov	r1, r3
 801322c:	f7ff f85a 	bl	80122e4 <RegionCommonChanMaskCopy>
 8013230:	e028      	b.n	8013284 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8013232:	4b16      	ldr	r3, [pc, #88]	@ (801328c <RegionEU868InitDefaults+0x128>)
 8013234:	681b      	ldr	r3, [r3, #0]
 8013236:	2200      	movs	r2, #0
 8013238:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 801323a:	4b14      	ldr	r3, [pc, #80]	@ (801328c <RegionEU868InitDefaults+0x128>)
 801323c:	681b      	ldr	r3, [r3, #0]
 801323e:	2200      	movs	r2, #0
 8013240:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8013242:	4b12      	ldr	r3, [pc, #72]	@ (801328c <RegionEU868InitDefaults+0x128>)
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	2200      	movs	r2, #0
 8013248:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 801324a:	4b10      	ldr	r3, [pc, #64]	@ (801328c <RegionEU868InitDefaults+0x128>)
 801324c:	681b      	ldr	r3, [r3, #0]
 801324e:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8013252:	4b0e      	ldr	r3, [pc, #56]	@ (801328c <RegionEU868InitDefaults+0x128>)
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 801325a:	2201      	movs	r2, #1
 801325c:	4619      	mov	r1, r3
 801325e:	f7ff f841 	bl	80122e4 <RegionCommonChanMaskCopy>
            break;
 8013262:	e00f      	b.n	8013284 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8013264:	4b09      	ldr	r3, [pc, #36]	@ (801328c <RegionEU868InitDefaults+0x128>)
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	f8b3 1360 	ldrh.w	r1, [r3, #864]	@ 0x360
 801326c:	4b07      	ldr	r3, [pc, #28]	@ (801328c <RegionEU868InitDefaults+0x128>)
 801326e:	681b      	ldr	r3, [r3, #0]
 8013270:	f8b3 236c 	ldrh.w	r2, [r3, #876]	@ 0x36c
 8013274:	4b05      	ldr	r3, [pc, #20]	@ (801328c <RegionEU868InitDefaults+0x128>)
 8013276:	681b      	ldr	r3, [r3, #0]
 8013278:	430a      	orrs	r2, r1
 801327a:	b292      	uxth	r2, r2
 801327c:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
            break;
 8013280:	e000      	b.n	8013284 <RegionEU868InitDefaults+0x120>
            break;
 8013282:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8013284:	37c0      	adds	r7, #192	@ 0xc0
 8013286:	46bd      	mov	sp, r7
 8013288:	bd80      	pop	{r7, pc}
 801328a:	bf00      	nop
 801328c:	20001220 	.word	0x20001220
 8013290:	20001224 	.word	0x20001224
 8013294:	08020b4c 	.word	0x08020b4c
 8013298:	08020b58 	.word	0x08020b58
 801329c:	08020b64 	.word	0x08020b64

080132a0 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80132a0:	b580      	push	{r7, lr}
 80132a2:	b084      	sub	sp, #16
 80132a4:	af00      	add	r7, sp, #0
 80132a6:	6078      	str	r0, [r7, #4]
 80132a8:	460b      	mov	r3, r1
 80132aa:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 80132ac:	78fb      	ldrb	r3, [r7, #3]
 80132ae:	2b0f      	cmp	r3, #15
 80132b0:	d86c      	bhi.n	801338c <RegionEU868Verify+0xec>
 80132b2:	a201      	add	r2, pc, #4	@ (adr r2, 80132b8 <RegionEU868Verify+0x18>)
 80132b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80132b8:	080132f9 	.word	0x080132f9
 80132bc:	0801338d 	.word	0x0801338d
 80132c0:	0801338d 	.word	0x0801338d
 80132c4:	0801338d 	.word	0x0801338d
 80132c8:	0801338d 	.word	0x0801338d
 80132cc:	08013311 	.word	0x08013311
 80132d0:	0801332f 	.word	0x0801332f
 80132d4:	0801334d 	.word	0x0801334d
 80132d8:	0801338d 	.word	0x0801338d
 80132dc:	0801336b 	.word	0x0801336b
 80132e0:	0801336b 	.word	0x0801336b
 80132e4:	0801338d 	.word	0x0801338d
 80132e8:	0801338d 	.word	0x0801338d
 80132ec:	0801338d 	.word	0x0801338d
 80132f0:	0801338d 	.word	0x0801338d
 80132f4:	08013389 	.word	0x08013389
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 80132f8:	2300      	movs	r3, #0
 80132fa:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	f107 020f 	add.w	r2, r7, #15
 8013304:	4611      	mov	r1, r2
 8013306:	4618      	mov	r0, r3
 8013308:	f7ff fcf4 	bl	8012cf4 <VerifyRfFreq>
 801330c:	4603      	mov	r3, r0
 801330e:	e03e      	b.n	801338e <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	f993 3000 	ldrsb.w	r3, [r3]
 8013316:	2207      	movs	r2, #7
 8013318:	2100      	movs	r1, #0
 801331a:	4618      	mov	r0, r3
 801331c:	f7fe ff65 	bl	80121ea <RegionCommonValueInRange>
 8013320:	4603      	mov	r3, r0
 8013322:	2b00      	cmp	r3, #0
 8013324:	bf14      	ite	ne
 8013326:	2301      	movne	r3, #1
 8013328:	2300      	moveq	r3, #0
 801332a:	b2db      	uxtb	r3, r3
 801332c:	e02f      	b.n	801338e <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	f993 3000 	ldrsb.w	r3, [r3]
 8013334:	2205      	movs	r2, #5
 8013336:	2100      	movs	r1, #0
 8013338:	4618      	mov	r0, r3
 801333a:	f7fe ff56 	bl	80121ea <RegionCommonValueInRange>
 801333e:	4603      	mov	r3, r0
 8013340:	2b00      	cmp	r3, #0
 8013342:	bf14      	ite	ne
 8013344:	2301      	movne	r3, #1
 8013346:	2300      	moveq	r3, #0
 8013348:	b2db      	uxtb	r3, r3
 801334a:	e020      	b.n	801338e <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	f993 3000 	ldrsb.w	r3, [r3]
 8013352:	2207      	movs	r2, #7
 8013354:	2100      	movs	r1, #0
 8013356:	4618      	mov	r0, r3
 8013358:	f7fe ff47 	bl	80121ea <RegionCommonValueInRange>
 801335c:	4603      	mov	r3, r0
 801335e:	2b00      	cmp	r3, #0
 8013360:	bf14      	ite	ne
 8013362:	2301      	movne	r3, #1
 8013364:	2300      	moveq	r3, #0
 8013366:	b2db      	uxtb	r3, r3
 8013368:	e011      	b.n	801338e <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	f993 3000 	ldrsb.w	r3, [r3]
 8013370:	2207      	movs	r2, #7
 8013372:	2100      	movs	r1, #0
 8013374:	4618      	mov	r0, r3
 8013376:	f7fe ff38 	bl	80121ea <RegionCommonValueInRange>
 801337a:	4603      	mov	r3, r0
 801337c:	2b00      	cmp	r3, #0
 801337e:	bf14      	ite	ne
 8013380:	2301      	movne	r3, #1
 8013382:	2300      	moveq	r3, #0
 8013384:	b2db      	uxtb	r3, r3
 8013386:	e002      	b.n	801338e <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8013388:	2301      	movs	r3, #1
 801338a:	e000      	b.n	801338e <RegionEU868Verify+0xee>
        }
        default:
            return false;
 801338c:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 801338e:	4618      	mov	r0, r3
 8013390:	3710      	adds	r7, #16
 8013392:	46bd      	mov	sp, r7
 8013394:	bd80      	pop	{r7, pc}
 8013396:	bf00      	nop

08013398 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8013398:	b580      	push	{r7, lr}
 801339a:	b08a      	sub	sp, #40	@ 0x28
 801339c:	af00      	add	r7, sp, #0
 801339e:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 80133a0:	2350      	movs	r3, #80	@ 0x50
 80133a2:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	7a1b      	ldrb	r3, [r3, #8]
 80133aa:	2b10      	cmp	r3, #16
 80133ac:	d162      	bne.n	8013474 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	685b      	ldr	r3, [r3, #4]
 80133b2:	330f      	adds	r3, #15
 80133b4:	781b      	ldrb	r3, [r3, #0]
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d15e      	bne.n	8013478 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80133ba:	2300      	movs	r3, #0
 80133bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80133c0:	2303      	movs	r3, #3
 80133c2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80133c6:	e050      	b.n	801346a <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 80133c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80133cc:	2b07      	cmp	r3, #7
 80133ce:	d824      	bhi.n	801341a <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	685a      	ldr	r2, [r3, #4]
 80133d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80133d8:	4413      	add	r3, r2
 80133da:	781b      	ldrb	r3, [r3, #0]
 80133dc:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 80133de:	69ba      	ldr	r2, [r7, #24]
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	6859      	ldr	r1, [r3, #4]
 80133e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80133e8:	3301      	adds	r3, #1
 80133ea:	440b      	add	r3, r1
 80133ec:	781b      	ldrb	r3, [r3, #0]
 80133ee:	021b      	lsls	r3, r3, #8
 80133f0:	4313      	orrs	r3, r2
 80133f2:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 80133f4:	69ba      	ldr	r2, [r7, #24]
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	6859      	ldr	r1, [r3, #4]
 80133fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80133fe:	3302      	adds	r3, #2
 8013400:	440b      	add	r3, r1
 8013402:	781b      	ldrb	r3, [r3, #0]
 8013404:	041b      	lsls	r3, r3, #16
 8013406:	4313      	orrs	r3, r2
 8013408:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 801340a:	69bb      	ldr	r3, [r7, #24]
 801340c:	2264      	movs	r2, #100	@ 0x64
 801340e:	fb02 f303 	mul.w	r3, r2, r3
 8013412:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8013414:	2300      	movs	r3, #0
 8013416:	61fb      	str	r3, [r7, #28]
 8013418:	e006      	b.n	8013428 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 801341a:	2300      	movs	r3, #0
 801341c:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 801341e:	2300      	movs	r3, #0
 8013420:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8013424:	2300      	movs	r3, #0
 8013426:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8013428:	69bb      	ldr	r3, [r7, #24]
 801342a:	2b00      	cmp	r3, #0
 801342c:	d00b      	beq.n	8013446 <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 801342e:	f107 0318 	add.w	r3, r7, #24
 8013432:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8013434:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013438:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 801343a:	f107 0310 	add.w	r3, r7, #16
 801343e:	4618      	mov	r0, r3
 8013440:	f000 fd14 	bl	8013e6c <RegionEU868ChannelAdd>
 8013444:	e007      	b.n	8013456 <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8013446:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801344a:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 801344c:	f107 030c 	add.w	r3, r7, #12
 8013450:	4618      	mov	r0, r3
 8013452:	f000 fdad 	bl	8013fb0 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8013456:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801345a:	3303      	adds	r3, #3
 801345c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013460:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013464:	3301      	adds	r3, #1
 8013466:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801346a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801346e:	2b0f      	cmp	r3, #15
 8013470:	d9aa      	bls.n	80133c8 <RegionEU868ApplyCFList+0x30>
 8013472:	e002      	b.n	801347a <RegionEU868ApplyCFList+0xe2>
        return;
 8013474:	bf00      	nop
 8013476:	e000      	b.n	801347a <RegionEU868ApplyCFList+0xe2>
        return;
 8013478:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 801347a:	3728      	adds	r7, #40	@ 0x28
 801347c:	46bd      	mov	sp, r7
 801347e:	bd80      	pop	{r7, pc}

08013480 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8013480:	b580      	push	{r7, lr}
 8013482:	b082      	sub	sp, #8
 8013484:	af00      	add	r7, sp, #0
 8013486:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	791b      	ldrb	r3, [r3, #4]
 801348c:	2b00      	cmp	r3, #0
 801348e:	d002      	beq.n	8013496 <RegionEU868ChanMaskSet+0x16>
 8013490:	2b01      	cmp	r3, #1
 8013492:	d00b      	beq.n	80134ac <RegionEU868ChanMaskSet+0x2c>
 8013494:	e015      	b.n	80134c2 <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8013496:	4b0e      	ldr	r3, [pc, #56]	@ (80134d0 <RegionEU868ChanMaskSet+0x50>)
 8013498:	681b      	ldr	r3, [r3, #0]
 801349a:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	681b      	ldr	r3, [r3, #0]
 80134a2:	2201      	movs	r2, #1
 80134a4:	4619      	mov	r1, r3
 80134a6:	f7fe ff1d 	bl	80122e4 <RegionCommonChanMaskCopy>
            break;
 80134aa:	e00c      	b.n	80134c6 <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80134ac:	4b08      	ldr	r3, [pc, #32]	@ (80134d0 <RegionEU868ChanMaskSet+0x50>)
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	2201      	movs	r2, #1
 80134ba:	4619      	mov	r1, r3
 80134bc:	f7fe ff12 	bl	80122e4 <RegionCommonChanMaskCopy>
            break;
 80134c0:	e001      	b.n	80134c6 <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 80134c2:	2300      	movs	r3, #0
 80134c4:	e000      	b.n	80134c8 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 80134c6:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 80134c8:	4618      	mov	r0, r3
 80134ca:	3708      	adds	r7, #8
 80134cc:	46bd      	mov	sp, r7
 80134ce:	bd80      	pop	{r7, pc}
 80134d0:	20001220 	.word	0x20001220

080134d4 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80134d4:	b580      	push	{r7, lr}
 80134d6:	b088      	sub	sp, #32
 80134d8:	af02      	add	r7, sp, #8
 80134da:	60ba      	str	r2, [r7, #8]
 80134dc:	607b      	str	r3, [r7, #4]
 80134de:	4603      	mov	r3, r0
 80134e0:	73fb      	strb	r3, [r7, #15]
 80134e2:	460b      	mov	r3, r1
 80134e4:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 80134e6:	2300      	movs	r3, #0
 80134e8:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 80134ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80134ee:	2b07      	cmp	r3, #7
 80134f0:	bfa8      	it	ge
 80134f2:	2307      	movge	r3, #7
 80134f4:	b25a      	sxtb	r2, r3
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013500:	491e      	ldr	r1, [pc, #120]	@ (801357c <RegionEU868ComputeRxWindowParameters+0xa8>)
 8013502:	4618      	mov	r0, r3
 8013504:	f7ff fb8e 	bl	8012c24 <RegionCommonGetBandwidth>
 8013508:	4603      	mov	r3, r0
 801350a:	b2da      	uxtb	r2, r3
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013516:	2b07      	cmp	r3, #7
 8013518:	d10a      	bne.n	8013530 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013520:	461a      	mov	r2, r3
 8013522:	4b17      	ldr	r3, [pc, #92]	@ (8013580 <RegionEU868ComputeRxWindowParameters+0xac>)
 8013524:	5c9b      	ldrb	r3, [r3, r2]
 8013526:	4618      	mov	r0, r3
 8013528:	f7ff f910 	bl	801274c <RegionCommonComputeSymbolTimeFsk>
 801352c:	6178      	str	r0, [r7, #20]
 801352e:	e011      	b.n	8013554 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013536:	461a      	mov	r2, r3
 8013538:	4b11      	ldr	r3, [pc, #68]	@ (8013580 <RegionEU868ComputeRxWindowParameters+0xac>)
 801353a:	5c9a      	ldrb	r2, [r3, r2]
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013542:	4619      	mov	r1, r3
 8013544:	4b0d      	ldr	r3, [pc, #52]	@ (801357c <RegionEU868ComputeRxWindowParameters+0xa8>)
 8013546:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801354a:	4619      	mov	r1, r3
 801354c:	4610      	mov	r0, r2
 801354e:	f7ff f8e7 	bl	8012720 <RegionCommonComputeSymbolTimeLoRa>
 8013552:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8013554:	4b0b      	ldr	r3, [pc, #44]	@ (8013584 <RegionEU868ComputeRxWindowParameters+0xb0>)
 8013556:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013558:	4798      	blx	r3
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	3308      	adds	r3, #8
 801355e:	687a      	ldr	r2, [r7, #4]
 8013560:	320c      	adds	r2, #12
 8013562:	7bb9      	ldrb	r1, [r7, #14]
 8013564:	9201      	str	r2, [sp, #4]
 8013566:	9300      	str	r3, [sp, #0]
 8013568:	4603      	mov	r3, r0
 801356a:	68ba      	ldr	r2, [r7, #8]
 801356c:	6978      	ldr	r0, [r7, #20]
 801356e:	f7ff f8fd 	bl	801276c <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 8013572:	bf00      	nop
 8013574:	3718      	adds	r7, #24
 8013576:	46bd      	mov	sp, r7
 8013578:	bd80      	pop	{r7, pc}
 801357a:	bf00      	nop
 801357c:	08021034 	.word	0x08021034
 8013580:	0802102c 	.word	0x0802102c
 8013584:	0802146c 	.word	0x0802146c

08013588 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8013588:	b5b0      	push	{r4, r5, r7, lr}
 801358a:	b090      	sub	sp, #64	@ 0x40
 801358c:	af0a      	add	r7, sp, #40	@ 0x28
 801358e:	6078      	str	r0, [r7, #4]
 8013590:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	785b      	ldrb	r3, [r3, #1]
 8013596:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8013598:	2300      	movs	r3, #0
 801359a:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 801359c:	2300      	movs	r3, #0
 801359e:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	685b      	ldr	r3, [r3, #4]
 80135a4:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 80135a6:	4b5a      	ldr	r3, [pc, #360]	@ (8013710 <RegionEU868RxConfig+0x188>)
 80135a8:	685b      	ldr	r3, [r3, #4]
 80135aa:	4798      	blx	r3
 80135ac:	4603      	mov	r3, r0
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d001      	beq.n	80135b6 <RegionEU868RxConfig+0x2e>
    {
        return false;
 80135b2:	2300      	movs	r3, #0
 80135b4:	e0a8      	b.n	8013708 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	7cdb      	ldrb	r3, [r3, #19]
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d126      	bne.n	801360c <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 80135be:	4b55      	ldr	r3, [pc, #340]	@ (8013714 <RegionEU868RxConfig+0x18c>)
 80135c0:	681a      	ldr	r2, [r3, #0]
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	781b      	ldrb	r3, [r3, #0]
 80135c6:	4619      	mov	r1, r3
 80135c8:	460b      	mov	r3, r1
 80135ca:	005b      	lsls	r3, r3, #1
 80135cc:	440b      	add	r3, r1
 80135ce:	009b      	lsls	r3, r3, #2
 80135d0:	4413      	add	r3, r2
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 80135d6:	4b4f      	ldr	r3, [pc, #316]	@ (8013714 <RegionEU868RxConfig+0x18c>)
 80135d8:	681a      	ldr	r2, [r3, #0]
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	781b      	ldrb	r3, [r3, #0]
 80135de:	4619      	mov	r1, r3
 80135e0:	460b      	mov	r3, r1
 80135e2:	005b      	lsls	r3, r3, #1
 80135e4:	440b      	add	r3, r1
 80135e6:	009b      	lsls	r3, r3, #2
 80135e8:	4413      	add	r3, r2
 80135ea:	3304      	adds	r3, #4
 80135ec:	681b      	ldr	r3, [r3, #0]
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	d00c      	beq.n	801360c <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 80135f2:	4b48      	ldr	r3, [pc, #288]	@ (8013714 <RegionEU868RxConfig+0x18c>)
 80135f4:	681a      	ldr	r2, [r3, #0]
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	781b      	ldrb	r3, [r3, #0]
 80135fa:	4619      	mov	r1, r3
 80135fc:	460b      	mov	r3, r1
 80135fe:	005b      	lsls	r3, r3, #1
 8013600:	440b      	add	r3, r1
 8013602:	009b      	lsls	r3, r3, #2
 8013604:	4413      	add	r3, r2
 8013606:	3304      	adds	r3, #4
 8013608:	681b      	ldr	r3, [r3, #0]
 801360a:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 801360c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013610:	4a41      	ldr	r2, [pc, #260]	@ (8013718 <RegionEU868RxConfig+0x190>)
 8013612:	5cd3      	ldrb	r3, [r2, r3]
 8013614:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8013616:	4b3e      	ldr	r3, [pc, #248]	@ (8013710 <RegionEU868RxConfig+0x188>)
 8013618:	68db      	ldr	r3, [r3, #12]
 801361a:	6938      	ldr	r0, [r7, #16]
 801361c:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 801361e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013622:	2b07      	cmp	r3, #7
 8013624:	d128      	bne.n	8013678 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 8013626:	2300      	movs	r3, #0
 8013628:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 801362a:	4b39      	ldr	r3, [pc, #228]	@ (8013710 <RegionEU868RxConfig+0x188>)
 801362c:	699c      	ldr	r4, [r3, #24]
 801362e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013632:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8013636:	fb02 f303 	mul.w	r3, r2, r3
 801363a:	4619      	mov	r1, r3
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	689b      	ldr	r3, [r3, #8]
 8013640:	b29b      	uxth	r3, r3
 8013642:	687a      	ldr	r2, [r7, #4]
 8013644:	7c92      	ldrb	r2, [r2, #18]
 8013646:	7df8      	ldrb	r0, [r7, #23]
 8013648:	9209      	str	r2, [sp, #36]	@ 0x24
 801364a:	2200      	movs	r2, #0
 801364c:	9208      	str	r2, [sp, #32]
 801364e:	2200      	movs	r2, #0
 8013650:	9207      	str	r2, [sp, #28]
 8013652:	2200      	movs	r2, #0
 8013654:	9206      	str	r2, [sp, #24]
 8013656:	2201      	movs	r2, #1
 8013658:	9205      	str	r2, [sp, #20]
 801365a:	2200      	movs	r2, #0
 801365c:	9204      	str	r2, [sp, #16]
 801365e:	2200      	movs	r2, #0
 8013660:	9203      	str	r2, [sp, #12]
 8013662:	9302      	str	r3, [sp, #8]
 8013664:	2305      	movs	r3, #5
 8013666:	9301      	str	r3, [sp, #4]
 8013668:	4b2c      	ldr	r3, [pc, #176]	@ (801371c <RegionEU868RxConfig+0x194>)
 801366a:	9300      	str	r3, [sp, #0]
 801366c:	2300      	movs	r3, #0
 801366e:	460a      	mov	r2, r1
 8013670:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8013674:	47a0      	blx	r4
 8013676:	e024      	b.n	80136c2 <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 8013678:	2301      	movs	r3, #1
 801367a:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 801367c:	4b24      	ldr	r3, [pc, #144]	@ (8013710 <RegionEU868RxConfig+0x188>)
 801367e:	699c      	ldr	r4, [r3, #24]
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	789b      	ldrb	r3, [r3, #2]
 8013684:	461d      	mov	r5, r3
 8013686:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	689b      	ldr	r3, [r3, #8]
 801368e:	b29b      	uxth	r3, r3
 8013690:	687a      	ldr	r2, [r7, #4]
 8013692:	7c92      	ldrb	r2, [r2, #18]
 8013694:	7df8      	ldrb	r0, [r7, #23]
 8013696:	9209      	str	r2, [sp, #36]	@ 0x24
 8013698:	2201      	movs	r2, #1
 801369a:	9208      	str	r2, [sp, #32]
 801369c:	2200      	movs	r2, #0
 801369e:	9207      	str	r2, [sp, #28]
 80136a0:	2200      	movs	r2, #0
 80136a2:	9206      	str	r2, [sp, #24]
 80136a4:	2200      	movs	r2, #0
 80136a6:	9205      	str	r2, [sp, #20]
 80136a8:	2200      	movs	r2, #0
 80136aa:	9204      	str	r2, [sp, #16]
 80136ac:	2200      	movs	r2, #0
 80136ae:	9203      	str	r2, [sp, #12]
 80136b0:	9302      	str	r3, [sp, #8]
 80136b2:	2308      	movs	r3, #8
 80136b4:	9301      	str	r3, [sp, #4]
 80136b6:	2300      	movs	r3, #0
 80136b8:	9300      	str	r3, [sp, #0]
 80136ba:	2301      	movs	r3, #1
 80136bc:	460a      	mov	r2, r1
 80136be:	4629      	mov	r1, r5
 80136c0:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	7c5b      	ldrb	r3, [r3, #17]
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d005      	beq.n	80136d6 <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 80136ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80136ce:	4a14      	ldr	r2, [pc, #80]	@ (8013720 <RegionEU868RxConfig+0x198>)
 80136d0:	5cd3      	ldrb	r3, [r2, r3]
 80136d2:	75bb      	strb	r3, [r7, #22]
 80136d4:	e004      	b.n	80136e0 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 80136d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80136da:	4a12      	ldr	r2, [pc, #72]	@ (8013724 <RegionEU868RxConfig+0x19c>)
 80136dc:	5cd3      	ldrb	r3, [r2, r3]
 80136de:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 80136e0:	4b0b      	ldr	r3, [pc, #44]	@ (8013710 <RegionEU868RxConfig+0x188>)
 80136e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80136e4:	7dba      	ldrb	r2, [r7, #22]
 80136e6:	320d      	adds	r2, #13
 80136e8:	b2d1      	uxtb	r1, r2
 80136ea:	7dfa      	ldrb	r2, [r7, #23]
 80136ec:	4610      	mov	r0, r2
 80136ee:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	7cdb      	ldrb	r3, [r3, #19]
 80136f4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80136f8:	6939      	ldr	r1, [r7, #16]
 80136fa:	4618      	mov	r0, r3
 80136fc:	f7ff fab0 	bl	8012c60 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 8013700:	683b      	ldr	r3, [r7, #0]
 8013702:	7bfa      	ldrb	r2, [r7, #15]
 8013704:	701a      	strb	r2, [r3, #0]
    return true;
 8013706:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8013708:	4618      	mov	r0, r3
 801370a:	3718      	adds	r7, #24
 801370c:	46bd      	mov	sp, r7
 801370e:	bdb0      	pop	{r4, r5, r7, pc}
 8013710:	0802146c 	.word	0x0802146c
 8013714:	20001220 	.word	0x20001220
 8013718:	0802102c 	.word	0x0802102c
 801371c:	00014585 	.word	0x00014585
 8013720:	0802105c 	.word	0x0802105c
 8013724:	08021054 	.word	0x08021054

08013728 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8013728:	b590      	push	{r4, r7, lr}
 801372a:	b093      	sub	sp, #76	@ 0x4c
 801372c:	af0a      	add	r7, sp, #40	@ 0x28
 801372e:	60f8      	str	r0, [r7, #12]
 8013730:	60b9      	str	r1, [r7, #8]
 8013732:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 8013734:	68fb      	ldr	r3, [r7, #12]
 8013736:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801373a:	461a      	mov	r2, r3
 801373c:	4b5d      	ldr	r3, [pc, #372]	@ (80138b4 <RegionEU868TxConfig+0x18c>)
 801373e:	5c9b      	ldrb	r3, [r3, r2]
 8013740:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 8013742:	68fb      	ldr	r3, [r7, #12]
 8013744:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8013748:	4b5b      	ldr	r3, [pc, #364]	@ (80138b8 <RegionEU868TxConfig+0x190>)
 801374a:	681a      	ldr	r2, [r3, #0]
 801374c:	4b5b      	ldr	r3, [pc, #364]	@ (80138bc <RegionEU868TxConfig+0x194>)
 801374e:	6819      	ldr	r1, [r3, #0]
 8013750:	68fb      	ldr	r3, [r7, #12]
 8013752:	781b      	ldrb	r3, [r3, #0]
 8013754:	461c      	mov	r4, r3
 8013756:	4623      	mov	r3, r4
 8013758:	005b      	lsls	r3, r3, #1
 801375a:	4423      	add	r3, r4
 801375c:	009b      	lsls	r3, r3, #2
 801375e:	440b      	add	r3, r1
 8013760:	3309      	adds	r3, #9
 8013762:	781b      	ldrb	r3, [r3, #0]
 8013764:	4619      	mov	r1, r3
 8013766:	460b      	mov	r3, r1
 8013768:	005b      	lsls	r3, r3, #1
 801376a:	440b      	add	r3, r1
 801376c:	00db      	lsls	r3, r3, #3
 801376e:	4413      	add	r3, r2
 8013770:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8013774:	4619      	mov	r1, r3
 8013776:	f7ff fa40 	bl	8012bfa <RegionCommonLimitTxPower>
 801377a:	4603      	mov	r3, r0
 801377c:	777b      	strb	r3, [r7, #29]
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 801377e:	68fb      	ldr	r3, [r7, #12]
 8013780:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013784:	494e      	ldr	r1, [pc, #312]	@ (80138c0 <RegionEU868TxConfig+0x198>)
 8013786:	4618      	mov	r0, r3
 8013788:	f7ff fa4c 	bl	8012c24 <RegionCommonGetBandwidth>
 801378c:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 801378e:	2300      	movs	r3, #0
 8013790:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8013792:	68fb      	ldr	r3, [r7, #12]
 8013794:	6859      	ldr	r1, [r3, #4]
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	689a      	ldr	r2, [r3, #8]
 801379a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801379e:	4618      	mov	r0, r3
 80137a0:	f7ff f89c 	bl	80128dc <RegionCommonComputeTxPower>
 80137a4:	4603      	mov	r3, r0
 80137a6:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 80137a8:	4b46      	ldr	r3, [pc, #280]	@ (80138c4 <RegionEU868TxConfig+0x19c>)
 80137aa:	68da      	ldr	r2, [r3, #12]
 80137ac:	4b43      	ldr	r3, [pc, #268]	@ (80138bc <RegionEU868TxConfig+0x194>)
 80137ae:	6819      	ldr	r1, [r3, #0]
 80137b0:	68fb      	ldr	r3, [r7, #12]
 80137b2:	781b      	ldrb	r3, [r3, #0]
 80137b4:	4618      	mov	r0, r3
 80137b6:	4603      	mov	r3, r0
 80137b8:	005b      	lsls	r3, r3, #1
 80137ba:	4403      	add	r3, r0
 80137bc:	009b      	lsls	r3, r3, #2
 80137be:	440b      	add	r3, r1
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	4618      	mov	r0, r3
 80137c4:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 80137c6:	68fb      	ldr	r3, [r7, #12]
 80137c8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80137cc:	2b07      	cmp	r3, #7
 80137ce:	d124      	bne.n	801381a <RegionEU868TxConfig+0xf2>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 80137d0:	2300      	movs	r3, #0
 80137d2:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 80137d4:	4b3b      	ldr	r3, [pc, #236]	@ (80138c4 <RegionEU868TxConfig+0x19c>)
 80137d6:	69dc      	ldr	r4, [r3, #28]
 80137d8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80137dc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80137e0:	fb02 f303 	mul.w	r3, r2, r3
 80137e4:	461a      	mov	r2, r3
 80137e6:	f997 1017 	ldrsb.w	r1, [r7, #23]
 80137ea:	7ff8      	ldrb	r0, [r7, #31]
 80137ec:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80137f0:	9308      	str	r3, [sp, #32]
 80137f2:	2300      	movs	r3, #0
 80137f4:	9307      	str	r3, [sp, #28]
 80137f6:	2300      	movs	r3, #0
 80137f8:	9306      	str	r3, [sp, #24]
 80137fa:	2300      	movs	r3, #0
 80137fc:	9305      	str	r3, [sp, #20]
 80137fe:	2301      	movs	r3, #1
 8013800:	9304      	str	r3, [sp, #16]
 8013802:	2300      	movs	r3, #0
 8013804:	9303      	str	r3, [sp, #12]
 8013806:	2305      	movs	r3, #5
 8013808:	9302      	str	r3, [sp, #8]
 801380a:	2300      	movs	r3, #0
 801380c:	9301      	str	r3, [sp, #4]
 801380e:	9200      	str	r2, [sp, #0]
 8013810:	69bb      	ldr	r3, [r7, #24]
 8013812:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8013816:	47a0      	blx	r4
 8013818:	e01d      	b.n	8013856 <RegionEU868TxConfig+0x12e>
    }
    else
    {
        modem = MODEM_LORA;
 801381a:	2301      	movs	r3, #1
 801381c:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 801381e:	4b29      	ldr	r3, [pc, #164]	@ (80138c4 <RegionEU868TxConfig+0x19c>)
 8013820:	69dc      	ldr	r4, [r3, #28]
 8013822:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8013826:	f997 1017 	ldrsb.w	r1, [r7, #23]
 801382a:	7ff8      	ldrb	r0, [r7, #31]
 801382c:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8013830:	9208      	str	r2, [sp, #32]
 8013832:	2200      	movs	r2, #0
 8013834:	9207      	str	r2, [sp, #28]
 8013836:	2200      	movs	r2, #0
 8013838:	9206      	str	r2, [sp, #24]
 801383a:	2200      	movs	r2, #0
 801383c:	9205      	str	r2, [sp, #20]
 801383e:	2201      	movs	r2, #1
 8013840:	9204      	str	r2, [sp, #16]
 8013842:	2200      	movs	r2, #0
 8013844:	9203      	str	r2, [sp, #12]
 8013846:	2208      	movs	r2, #8
 8013848:	9202      	str	r2, [sp, #8]
 801384a:	2201      	movs	r2, #1
 801384c:	9201      	str	r2, [sp, #4]
 801384e:	9300      	str	r3, [sp, #0]
 8013850:	69bb      	ldr	r3, [r7, #24]
 8013852:	2200      	movs	r2, #0
 8013854:	47a0      	blx	r4
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8013856:	4b19      	ldr	r3, [pc, #100]	@ (80138bc <RegionEU868TxConfig+0x194>)
 8013858:	681a      	ldr	r2, [r3, #0]
 801385a:	68fb      	ldr	r3, [r7, #12]
 801385c:	781b      	ldrb	r3, [r3, #0]
 801385e:	4619      	mov	r1, r3
 8013860:	460b      	mov	r3, r1
 8013862:	005b      	lsls	r3, r3, #1
 8013864:	440b      	add	r3, r1
 8013866:	009b      	lsls	r3, r3, #2
 8013868:	4413      	add	r3, r2
 801386a:	681a      	ldr	r2, [r3, #0]
 801386c:	68fb      	ldr	r3, [r7, #12]
 801386e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013872:	4619      	mov	r1, r3
 8013874:	4610      	mov	r0, r2
 8013876:	f7ff fa25 	bl	8012cc4 <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 801387a:	68fb      	ldr	r3, [r7, #12]
 801387c:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8013880:	68fb      	ldr	r3, [r7, #12]
 8013882:	899b      	ldrh	r3, [r3, #12]
 8013884:	4619      	mov	r1, r3
 8013886:	4610      	mov	r0, r2
 8013888:	f7ff faaa 	bl	8012de0 <GetTimeOnAir>
 801388c:	4602      	mov	r2, r0
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8013892:	4b0c      	ldr	r3, [pc, #48]	@ (80138c4 <RegionEU868TxConfig+0x19c>)
 8013894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013896:	68fa      	ldr	r2, [r7, #12]
 8013898:	8992      	ldrh	r2, [r2, #12]
 801389a:	b2d1      	uxtb	r1, r2
 801389c:	7ffa      	ldrb	r2, [r7, #31]
 801389e:	4610      	mov	r0, r2
 80138a0:	4798      	blx	r3

    *txPower = txPowerLimited;
 80138a2:	68bb      	ldr	r3, [r7, #8]
 80138a4:	7f7a      	ldrb	r2, [r7, #29]
 80138a6:	701a      	strb	r2, [r3, #0]
    return true;
 80138a8:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 80138aa:	4618      	mov	r0, r3
 80138ac:	3724      	adds	r7, #36	@ 0x24
 80138ae:	46bd      	mov	sp, r7
 80138b0:	bd90      	pop	{r4, r7, pc}
 80138b2:	bf00      	nop
 80138b4:	0802102c 	.word	0x0802102c
 80138b8:	20001224 	.word	0x20001224
 80138bc:	20001220 	.word	0x20001220
 80138c0:	08021034 	.word	0x08021034
 80138c4:	0802146c 	.word	0x0802146c

080138c8 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80138c8:	b590      	push	{r4, r7, lr}
 80138ca:	b093      	sub	sp, #76	@ 0x4c
 80138cc:	af00      	add	r7, sp, #0
 80138ce:	60f8      	str	r0, [r7, #12]
 80138d0:	60b9      	str	r1, [r7, #8]
 80138d2:	607a      	str	r2, [r7, #4]
 80138d4:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 80138d6:	2307      	movs	r3, #7
 80138d8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 80138dc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80138e0:	2200      	movs	r2, #0
 80138e2:	601a      	str	r2, [r3, #0]
 80138e4:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 80138e6:	2300      	movs	r3, #0
 80138e8:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    uint8_t bytesProcessed = 0;
 80138ec:	2300      	movs	r3, #0
 80138ee:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    uint16_t chMask = 0;
 80138f2:	2300      	movs	r3, #0
 80138f4:	877b      	strh	r3, [r7, #58]	@ 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 80138f6:	e085      	b.n	8013a04 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 80138f8:	68fb      	ldr	r3, [r7, #12]
 80138fa:	685a      	ldr	r2, [r3, #4]
 80138fc:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8013900:	4413      	add	r3, r2
 8013902:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8013906:	4611      	mov	r1, r2
 8013908:	4618      	mov	r0, r3
 801390a:	f7fe fe2f 	bl	801256c <RegionCommonParseLinkAdrReq>
 801390e:	4603      	mov	r3, r0
 8013910:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

        if( nextIndex == 0 )
 8013914:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8013918:	2b00      	cmp	r3, #0
 801391a:	d07b      	beq.n	8013a14 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 801391c:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8013920:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8013924:	4413      	add	r3, r2
 8013926:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 801392a:	2307      	movs	r3, #7
 801392c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8013930:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8013934:	877b      	strh	r3, [r7, #58]	@ 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8013936:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801393a:	2b00      	cmp	r3, #0
 801393c:	d109      	bne.n	8013952 <RegionEU868LinkAdrReq+0x8a>
 801393e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8013940:	2b00      	cmp	r3, #0
 8013942:	d106      	bne.n	8013952 <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 8013944:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013948:	f023 0301 	bic.w	r3, r3, #1
 801394c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8013950:	e058      	b.n	8013a04 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8013952:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8013956:	2b00      	cmp	r3, #0
 8013958:	d003      	beq.n	8013962 <RegionEU868LinkAdrReq+0x9a>
 801395a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801395e:	2b05      	cmp	r3, #5
 8013960:	d903      	bls.n	801396a <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8013962:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8013966:	2b06      	cmp	r3, #6
 8013968:	d906      	bls.n	8013978 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 801396a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801396e:	f023 0301 	bic.w	r3, r3, #1
 8013972:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8013976:	e045      	b.n	8013a04 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8013978:	2300      	movs	r3, #0
 801397a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 801397e:	e03d      	b.n	80139fc <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8013980:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8013984:	2b06      	cmp	r3, #6
 8013986:	d118      	bne.n	80139ba <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8013988:	4b5f      	ldr	r3, [pc, #380]	@ (8013b08 <RegionEU868LinkAdrReq+0x240>)
 801398a:	6819      	ldr	r1, [r3, #0]
 801398c:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8013990:	4613      	mov	r3, r2
 8013992:	005b      	lsls	r3, r3, #1
 8013994:	4413      	add	r3, r2
 8013996:	009b      	lsls	r3, r3, #2
 8013998:	440b      	add	r3, r1
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	2b00      	cmp	r3, #0
 801399e:	d028      	beq.n	80139f2 <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 80139a0:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80139a4:	2201      	movs	r2, #1
 80139a6:	fa02 f303 	lsl.w	r3, r2, r3
 80139aa:	b21a      	sxth	r2, r3
 80139ac:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80139ae:	b21b      	sxth	r3, r3
 80139b0:	4313      	orrs	r3, r2
 80139b2:	b21b      	sxth	r3, r3
 80139b4:	b29b      	uxth	r3, r3
 80139b6:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80139b8:	e01b      	b.n	80139f2 <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80139ba:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80139bc:	461a      	mov	r2, r3
 80139be:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80139c2:	fa42 f303 	asr.w	r3, r2, r3
 80139c6:	f003 0301 	and.w	r3, r3, #1
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d011      	beq.n	80139f2 <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 80139ce:	4b4e      	ldr	r3, [pc, #312]	@ (8013b08 <RegionEU868LinkAdrReq+0x240>)
 80139d0:	6819      	ldr	r1, [r3, #0]
 80139d2:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80139d6:	4613      	mov	r3, r2
 80139d8:	005b      	lsls	r3, r3, #1
 80139da:	4413      	add	r3, r2
 80139dc:	009b      	lsls	r3, r3, #2
 80139de:	440b      	add	r3, r1
 80139e0:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d105      	bne.n	80139f2 <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 80139e6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80139ea:	f023 0301 	bic.w	r3, r3, #1
 80139ee:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 80139f2:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80139f6:	3301      	adds	r3, #1
 80139f8:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 80139fc:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8013a00:	2b0f      	cmp	r3, #15
 8013a02:	d9bd      	bls.n	8013980 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8013a04:	68fb      	ldr	r3, [r7, #12]
 8013a06:	7a1b      	ldrb	r3, [r3, #8]
 8013a08:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8013a0c:	429a      	cmp	r2, r3
 8013a0e:	f4ff af73 	bcc.w	80138f8 <RegionEU868LinkAdrReq+0x30>
 8013a12:	e000      	b.n	8013a16 <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 8013a14:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8013a16:	2302      	movs	r3, #2
 8013a18:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8013a1c:	68fb      	ldr	r3, [r7, #12]
 8013a1e:	7a5b      	ldrb	r3, [r3, #9]
 8013a20:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 8013a24:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8013a28:	4618      	mov	r0, r3
 8013a2a:	f7ff fa29 	bl	8012e80 <RegionEU868GetPhyParam>
 8013a2e:	4603      	mov	r3, r0
 8013a30:	633b      	str	r3, [r7, #48]	@ 0x30

    linkAdrVerifyParams.Status = status;
 8013a32:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013a36:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8013a38:	68fb      	ldr	r3, [r7, #12]
 8013a3a:	7a9b      	ldrb	r3, [r3, #10]
 8013a3c:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8013a3e:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d
 8013a42:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8013a44:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
 8013a48:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8013a4a:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8013a4e:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8013a50:	68fb      	ldr	r3, [r7, #12]
 8013a52:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8013a56:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8013a5e:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	7b5b      	ldrb	r3, [r3, #13]
 8013a64:	b25b      	sxtb	r3, r3
 8013a66:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 8013a68:	2310      	movs	r3, #16
 8013a6a:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8013a6c:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 8013a70:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8013a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a74:	b25b      	sxtb	r3, r3
 8013a76:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 8013a7a:	2307      	movs	r3, #7
 8013a7c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8013a80:	4b21      	ldr	r3, [pc, #132]	@ (8013b08 <RegionEU868LinkAdrReq+0x240>)
 8013a82:	681b      	ldr	r3, [r3, #0]
 8013a84:	62bb      	str	r3, [r7, #40]	@ 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 8013a86:	2307      	movs	r3, #7
 8013a88:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8013a8c:	2300      	movs	r3, #0
 8013a8e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	681b      	ldr	r3, [r3, #0]
 8013a96:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8013a98:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8013a9c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8013aa0:	1c9a      	adds	r2, r3, #2
 8013aa2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8013aa6:	1c59      	adds	r1, r3, #1
 8013aa8:	f107 0010 	add.w	r0, r7, #16
 8013aac:	4623      	mov	r3, r4
 8013aae:	f7fe fdaf 	bl	8012610 <RegionCommonLinkAdrReqVerifyParams>
 8013ab2:	4603      	mov	r3, r0
 8013ab4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8013ab8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013abc:	2b07      	cmp	r3, #7
 8013abe:	d10d      	bne.n	8013adc <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8013ac0:	4b11      	ldr	r3, [pc, #68]	@ (8013b08 <RegionEU868LinkAdrReq+0x240>)
 8013ac2:	681b      	ldr	r3, [r3, #0]
 8013ac4:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8013ac8:	220c      	movs	r2, #12
 8013aca:	2100      	movs	r1, #0
 8013acc:	4618      	mov	r0, r3
 8013ace:	f003 f9cf 	bl	8016e70 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8013ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8013b08 <RegionEU868LinkAdrReq+0x240>)
 8013ad4:	681b      	ldr	r3, [r3, #0]
 8013ad6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8013ad8:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8013adc:	f997 203d 	ldrsb.w	r2, [r7, #61]	@ 0x3d
 8013ae0:	68bb      	ldr	r3, [r7, #8]
 8013ae2:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8013ae4:	f997 203e 	ldrsb.w	r2, [r7, #62]	@ 0x3e
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8013aec:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8013af0:	683b      	ldr	r3, [r7, #0]
 8013af2:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8013af4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013af6:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8013afa:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 8013afc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8013b00:	4618      	mov	r0, r3
 8013b02:	374c      	adds	r7, #76	@ 0x4c
 8013b04:	46bd      	mov	sp, r7
 8013b06:	bd90      	pop	{r4, r7, pc}
 8013b08:	20001220 	.word	0x20001220

08013b0c <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8013b0c:	b580      	push	{r7, lr}
 8013b0e:	b084      	sub	sp, #16
 8013b10:	af00      	add	r7, sp, #0
 8013b12:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8013b14:	2307      	movs	r3, #7
 8013b16:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8013b18:	2300      	movs	r3, #0
 8013b1a:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	685b      	ldr	r3, [r3, #4]
 8013b20:	f107 020e 	add.w	r2, r7, #14
 8013b24:	4611      	mov	r1, r2
 8013b26:	4618      	mov	r0, r3
 8013b28:	f7ff f8e4 	bl	8012cf4 <VerifyRfFreq>
 8013b2c:	4603      	mov	r3, r0
 8013b2e:	f083 0301 	eor.w	r3, r3, #1
 8013b32:	b2db      	uxtb	r3, r3
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d003      	beq.n	8013b40 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 8013b38:	7bfb      	ldrb	r3, [r7, #15]
 8013b3a:	f023 0301 	bic.w	r3, r3, #1
 8013b3e:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	f993 3000 	ldrsb.w	r3, [r3]
 8013b46:	2207      	movs	r2, #7
 8013b48:	2100      	movs	r1, #0
 8013b4a:	4618      	mov	r0, r3
 8013b4c:	f7fe fb4d 	bl	80121ea <RegionCommonValueInRange>
 8013b50:	4603      	mov	r3, r0
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d103      	bne.n	8013b5e <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 8013b56:	7bfb      	ldrb	r3, [r7, #15]
 8013b58:	f023 0302 	bic.w	r3, r3, #2
 8013b5c:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013b64:	2205      	movs	r2, #5
 8013b66:	2100      	movs	r1, #0
 8013b68:	4618      	mov	r0, r3
 8013b6a:	f7fe fb3e 	bl	80121ea <RegionCommonValueInRange>
 8013b6e:	4603      	mov	r3, r0
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d103      	bne.n	8013b7c <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8013b74:	7bfb      	ldrb	r3, [r7, #15]
 8013b76:	f023 0304 	bic.w	r3, r3, #4
 8013b7a:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 8013b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8013b7e:	4618      	mov	r0, r3
 8013b80:	3710      	adds	r7, #16
 8013b82:	46bd      	mov	sp, r7
 8013b84:	bd80      	pop	{r7, pc}
	...

08013b88 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8013b88:	b580      	push	{r7, lr}
 8013b8a:	b086      	sub	sp, #24
 8013b8c:	af00      	add	r7, sp, #0
 8013b8e:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8013b90:	2303      	movs	r3, #3
 8013b92:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	681b      	ldr	r3, [r3, #0]
 8013b98:	681b      	ldr	r3, [r3, #0]
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d114      	bne.n	8013bc8 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8013ba4:	b2db      	uxtb	r3, r3
 8013ba6:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8013ba8:	f107 0308 	add.w	r3, r7, #8
 8013bac:	4618      	mov	r0, r3
 8013bae:	f000 f9ff 	bl	8013fb0 <RegionEU868ChannelsRemove>
 8013bb2:	4603      	mov	r3, r0
 8013bb4:	f083 0301 	eor.w	r3, r3, #1
 8013bb8:	b2db      	uxtb	r3, r3
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d03b      	beq.n	8013c36 <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 8013bbe:	7dfb      	ldrb	r3, [r7, #23]
 8013bc0:	f023 0303 	bic.w	r3, r3, #3
 8013bc4:	75fb      	strb	r3, [r7, #23]
 8013bc6:	e036      	b.n	8013c36 <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	681b      	ldr	r3, [r3, #0]
 8013bcc:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8013bd4:	b2db      	uxtb	r3, r3
 8013bd6:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8013bd8:	f107 030c 	add.w	r3, r7, #12
 8013bdc:	4618      	mov	r0, r3
 8013bde:	f000 f945 	bl	8013e6c <RegionEU868ChannelAdd>
 8013be2:	4603      	mov	r3, r0
 8013be4:	2b06      	cmp	r3, #6
 8013be6:	d820      	bhi.n	8013c2a <RegionEU868NewChannelReq+0xa2>
 8013be8:	a201      	add	r2, pc, #4	@ (adr r2, 8013bf0 <RegionEU868NewChannelReq+0x68>)
 8013bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013bee:	bf00      	nop
 8013bf0:	08013c35 	.word	0x08013c35
 8013bf4:	08013c2b 	.word	0x08013c2b
 8013bf8:	08013c2b 	.word	0x08013c2b
 8013bfc:	08013c2b 	.word	0x08013c2b
 8013c00:	08013c0d 	.word	0x08013c0d
 8013c04:	08013c17 	.word	0x08013c17
 8013c08:	08013c21 	.word	0x08013c21
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8013c0c:	7dfb      	ldrb	r3, [r7, #23]
 8013c0e:	f023 0301 	bic.w	r3, r3, #1
 8013c12:	75fb      	strb	r3, [r7, #23]
                break;
 8013c14:	e00f      	b.n	8013c36 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 8013c16:	7dfb      	ldrb	r3, [r7, #23]
 8013c18:	f023 0302 	bic.w	r3, r3, #2
 8013c1c:	75fb      	strb	r3, [r7, #23]
                break;
 8013c1e:	e00a      	b.n	8013c36 <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8013c20:	7dfb      	ldrb	r3, [r7, #23]
 8013c22:	f023 0303 	bic.w	r3, r3, #3
 8013c26:	75fb      	strb	r3, [r7, #23]
                break;
 8013c28:	e005      	b.n	8013c36 <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 8013c2a:	7dfb      	ldrb	r3, [r7, #23]
 8013c2c:	f023 0303 	bic.w	r3, r3, #3
 8013c30:	75fb      	strb	r3, [r7, #23]
                break;
 8013c32:	e000      	b.n	8013c36 <RegionEU868NewChannelReq+0xae>
                break;
 8013c34:	bf00      	nop
            }
        }
    }

    return status;
 8013c36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013c3a:	4618      	mov	r0, r3
 8013c3c:	3718      	adds	r7, #24
 8013c3e:	46bd      	mov	sp, r7
 8013c40:	bd80      	pop	{r7, pc}
 8013c42:	bf00      	nop

08013c44 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8013c44:	b480      	push	{r7}
 8013c46:	b083      	sub	sp, #12
 8013c48:	af00      	add	r7, sp, #0
 8013c4a:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8013c4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013c50:	4618      	mov	r0, r3
 8013c52:	370c      	adds	r7, #12
 8013c54:	46bd      	mov	sp, r7
 8013c56:	bc80      	pop	{r7}
 8013c58:	4770      	bx	lr
	...

08013c5c <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8013c5c:	b580      	push	{r7, lr}
 8013c5e:	b084      	sub	sp, #16
 8013c60:	af00      	add	r7, sp, #0
 8013c62:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8013c64:	2303      	movs	r3, #3
 8013c66:	73fb      	strb	r3, [r7, #15]

#if defined( REGION_EU868 )
    uint8_t band = 0;
 8013c68:	2300      	movs	r3, #0
 8013c6a:	73bb      	strb	r3, [r7, #14]

    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	781b      	ldrb	r3, [r3, #0]
 8013c70:	2b0f      	cmp	r3, #15
 8013c72:	d901      	bls.n	8013c78 <RegionEU868DlChannelReq+0x1c>
    {
        return 0;
 8013c74:	2300      	movs	r3, #0
 8013c76:	e035      	b.n	8013ce4 <RegionEU868DlChannelReq+0x88>
    }

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	685b      	ldr	r3, [r3, #4]
 8013c7c:	f107 020e 	add.w	r2, r7, #14
 8013c80:	4611      	mov	r1, r2
 8013c82:	4618      	mov	r0, r3
 8013c84:	f7ff f836 	bl	8012cf4 <VerifyRfFreq>
 8013c88:	4603      	mov	r3, r0
 8013c8a:	f083 0301 	eor.w	r3, r3, #1
 8013c8e:	b2db      	uxtb	r3, r3
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d003      	beq.n	8013c9c <RegionEU868DlChannelReq+0x40>
    {
        status &= 0xFE;
 8013c94:	7bfb      	ldrb	r3, [r7, #15]
 8013c96:	f023 0301 	bic.w	r3, r3, #1
 8013c9a:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8013c9c:	4b13      	ldr	r3, [pc, #76]	@ (8013cec <RegionEU868DlChannelReq+0x90>)
 8013c9e:	681a      	ldr	r2, [r3, #0]
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	781b      	ldrb	r3, [r3, #0]
 8013ca4:	4619      	mov	r1, r3
 8013ca6:	460b      	mov	r3, r1
 8013ca8:	005b      	lsls	r3, r3, #1
 8013caa:	440b      	add	r3, r1
 8013cac:	009b      	lsls	r3, r3, #2
 8013cae:	4413      	add	r3, r2
 8013cb0:	681b      	ldr	r3, [r3, #0]
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d103      	bne.n	8013cbe <RegionEU868DlChannelReq+0x62>
    {
        status &= 0xFD;
 8013cb6:	7bfb      	ldrb	r3, [r7, #15]
 8013cb8:	f023 0302 	bic.w	r3, r3, #2
 8013cbc:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8013cbe:	7bfb      	ldrb	r3, [r7, #15]
 8013cc0:	2b03      	cmp	r3, #3
 8013cc2:	d10d      	bne.n	8013ce0 <RegionEU868DlChannelReq+0x84>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8013cc4:	4b09      	ldr	r3, [pc, #36]	@ (8013cec <RegionEU868DlChannelReq+0x90>)
 8013cc6:	6819      	ldr	r1, [r3, #0]
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	781b      	ldrb	r3, [r3, #0]
 8013ccc:	4618      	mov	r0, r3
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	685a      	ldr	r2, [r3, #4]
 8013cd2:	4603      	mov	r3, r0
 8013cd4:	005b      	lsls	r3, r3, #1
 8013cd6:	4403      	add	r3, r0
 8013cd8:	009b      	lsls	r3, r3, #2
 8013cda:	440b      	add	r3, r1
 8013cdc:	3304      	adds	r3, #4
 8013cde:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 8013ce0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013ce4:	4618      	mov	r0, r3
 8013ce6:	3710      	adds	r7, #16
 8013ce8:	46bd      	mov	sp, r7
 8013cea:	bd80      	pop	{r7, pc}
 8013cec:	20001220 	.word	0x20001220

08013cf0 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8013cf0:	b480      	push	{r7}
 8013cf2:	b083      	sub	sp, #12
 8013cf4:	af00      	add	r7, sp, #0
 8013cf6:	4603      	mov	r3, r0
 8013cf8:	460a      	mov	r2, r1
 8013cfa:	71fb      	strb	r3, [r7, #7]
 8013cfc:	4613      	mov	r3, r2
 8013cfe:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 8013d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 8013d04:	4618      	mov	r0, r3
 8013d06:	370c      	adds	r7, #12
 8013d08:	46bd      	mov	sp, r7
 8013d0a:	bc80      	pop	{r7}
 8013d0c:	4770      	bx	lr
	...

08013d10 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8013d10:	b580      	push	{r7, lr}
 8013d12:	b09a      	sub	sp, #104	@ 0x68
 8013d14:	af02      	add	r7, sp, #8
 8013d16:	60f8      	str	r0, [r7, #12]
 8013d18:	60b9      	str	r1, [r7, #8]
 8013d1a:	607a      	str	r2, [r7, #4]
 8013d1c:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 8013d1e:	2300      	movs	r3, #0
 8013d20:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    uint8_t nbRestrictedChannels = 0;
 8013d24:	2300      	movs	r3, #0
 8013d26:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8013d2a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8013d2e:	2200      	movs	r2, #0
 8013d30:	601a      	str	r2, [r3, #0]
 8013d32:	605a      	str	r2, [r3, #4]
 8013d34:	609a      	str	r2, [r3, #8]
 8013d36:	60da      	str	r2, [r3, #12]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8013d38:	230c      	movs	r3, #12
 8013d3a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 8013d3e:	2307      	movs	r3, #7
 8013d40:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8013d42:	4b48      	ldr	r3, [pc, #288]	@ (8013e64 <RegionEU868NextChannel+0x154>)
 8013d44:	681b      	ldr	r3, [r3, #0]
 8013d46:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8013d4a:	2201      	movs	r2, #1
 8013d4c:	2100      	movs	r1, #0
 8013d4e:	4618      	mov	r0, r3
 8013d50:	f7fe fa9c 	bl	801228c <RegionCommonCountChannels>
 8013d54:	4603      	mov	r3, r0
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d10a      	bne.n	8013d70 <RegionEU868NextChannel+0x60>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8013d5a:	4b42      	ldr	r3, [pc, #264]	@ (8013e64 <RegionEU868NextChannel+0x154>)
 8013d5c:	681b      	ldr	r3, [r3, #0]
 8013d5e:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 8013d62:	4b40      	ldr	r3, [pc, #256]	@ (8013e64 <RegionEU868NextChannel+0x154>)
 8013d64:	681b      	ldr	r3, [r3, #0]
 8013d66:	f042 0207 	orr.w	r2, r2, #7
 8013d6a:	b292      	uxth	r2, r2
 8013d6c:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8013d70:	68fb      	ldr	r3, [r7, #12]
 8013d72:	7a5b      	ldrb	r3, [r3, #9]
 8013d74:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8013d76:	68fb      	ldr	r3, [r7, #12]
 8013d78:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8013d7c:	b2db      	uxtb	r3, r3
 8013d7e:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8013d80:	4b38      	ldr	r3, [pc, #224]	@ (8013e64 <RegionEU868NextChannel+0x154>)
 8013d82:	681b      	ldr	r3, [r3, #0]
 8013d84:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8013d88:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8013d8a:	4b36      	ldr	r3, [pc, #216]	@ (8013e64 <RegionEU868NextChannel+0x154>)
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 8013d90:	4b35      	ldr	r3, [pc, #212]	@ (8013e68 <RegionEU868NextChannel+0x158>)
 8013d92:	681b      	ldr	r3, [r3, #0]
 8013d94:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8013d96:	2310      	movs	r3, #16
 8013d98:	84bb      	strh	r3, [r7, #36]	@ 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 8013d9a:	f107 0312 	add.w	r3, r7, #18
 8013d9e:	62bb      	str	r3, [r7, #40]	@ 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8013da0:	68fb      	ldr	r3, [r7, #12]
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8013da6:	68fb      	ldr	r3, [r7, #12]
 8013da8:	685b      	ldr	r3, [r3, #4]
 8013daa:	633b      	str	r3, [r7, #48]	@ 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8013dac:	68fb      	ldr	r3, [r7, #12]
 8013dae:	7a9b      	ldrb	r3, [r3, #10]
 8013db0:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8013db4:	2306      	movs	r3, #6
 8013db6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8013dba:	68fa      	ldr	r2, [r7, #12]
 8013dbc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8013dc0:	320c      	adds	r2, #12
 8013dc2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013dc6:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8013dca:	68fb      	ldr	r3, [r7, #12]
 8013dcc:	7d1b      	ldrb	r3, [r3, #20]
 8013dce:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8013dd8:	68fb      	ldr	r3, [r7, #12]
 8013dda:	8adb      	ldrh	r3, [r3, #22]
 8013ddc:	4619      	mov	r1, r3
 8013dde:	4610      	mov	r0, r2
 8013de0:	f7fe fffe 	bl	8012de0 <GetTimeOnAir>
 8013de4:	4603      	mov	r3, r0
 8013de6:	647b      	str	r3, [r7, #68]	@ 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8013de8:	f107 0314 	add.w	r3, r7, #20
 8013dec:	64bb      	str	r3, [r7, #72]	@ 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8013dee:	f107 015e 	add.w	r1, r7, #94	@ 0x5e
 8013df2:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8013df6:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	9301      	str	r3, [sp, #4]
 8013dfe:	f107 035d 	add.w	r3, r7, #93	@ 0x5d
 8013e02:	9300      	str	r3, [sp, #0]
 8013e04:	460b      	mov	r3, r1
 8013e06:	6839      	ldr	r1, [r7, #0]
 8013e08:	f7fe fe57 	bl	8012aba <RegionCommonIdentifyChannels>
 8013e0c:	4603      	mov	r3, r0
 8013e0e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8013e12:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d10e      	bne.n	8013e38 <RegionEU868NextChannel+0x128>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8013e1a:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8013e1e:	3b01      	subs	r3, #1
 8013e20:	4619      	mov	r1, r3
 8013e22:	2000      	movs	r0, #0
 8013e24:	f002 ffd2 	bl	8016dcc <randr>
 8013e28:	4603      	mov	r3, r0
 8013e2a:	3360      	adds	r3, #96	@ 0x60
 8013e2c:	443b      	add	r3, r7
 8013e2e:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8013e32:	68bb      	ldr	r3, [r7, #8]
 8013e34:	701a      	strb	r2, [r3, #0]
 8013e36:	e00e      	b.n	8013e56 <RegionEU868NextChannel+0x146>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8013e38:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013e3c:	2b0c      	cmp	r3, #12
 8013e3e:	d10a      	bne.n	8013e56 <RegionEU868NextChannel+0x146>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8013e40:	4b08      	ldr	r3, [pc, #32]	@ (8013e64 <RegionEU868NextChannel+0x154>)
 8013e42:	681b      	ldr	r3, [r3, #0]
 8013e44:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 8013e48:	4b06      	ldr	r3, [pc, #24]	@ (8013e64 <RegionEU868NextChannel+0x154>)
 8013e4a:	681b      	ldr	r3, [r3, #0]
 8013e4c:	f042 0207 	orr.w	r2, r2, #7
 8013e50:	b292      	uxth	r2, r2
 8013e52:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }
    return status;
 8013e56:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8013e5a:	4618      	mov	r0, r3
 8013e5c:	3760      	adds	r7, #96	@ 0x60
 8013e5e:	46bd      	mov	sp, r7
 8013e60:	bd80      	pop	{r7, pc}
 8013e62:	bf00      	nop
 8013e64:	20001220 	.word	0x20001220
 8013e68:	20001224 	.word	0x20001224

08013e6c <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8013e6c:	b580      	push	{r7, lr}
 8013e6e:	b084      	sub	sp, #16
 8013e70:	af00      	add	r7, sp, #0
 8013e72:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8013e74:	2300      	movs	r3, #0
 8013e76:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 8013e78:	2300      	movs	r3, #0
 8013e7a:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8013e7c:	2300      	movs	r3, #0
 8013e7e:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	791b      	ldrb	r3, [r3, #4]
 8013e84:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8013e86:	7b7b      	ldrb	r3, [r7, #13]
 8013e88:	2b02      	cmp	r3, #2
 8013e8a:	d801      	bhi.n	8013e90 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8013e8c:	2306      	movs	r3, #6
 8013e8e:	e089      	b.n	8013fa4 <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8013e90:	7b7b      	ldrb	r3, [r7, #13]
 8013e92:	2b0f      	cmp	r3, #15
 8013e94:	d901      	bls.n	8013e9a <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013e96:	2303      	movs	r3, #3
 8013e98:	e084      	b.n	8013fa4 <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	681b      	ldr	r3, [r3, #0]
 8013e9e:	7a1b      	ldrb	r3, [r3, #8]
 8013ea0:	f343 0303 	sbfx	r3, r3, #0, #4
 8013ea4:	b25b      	sxtb	r3, r3
 8013ea6:	2207      	movs	r2, #7
 8013ea8:	2100      	movs	r1, #0
 8013eaa:	4618      	mov	r0, r3
 8013eac:	f7fe f99d 	bl	80121ea <RegionCommonValueInRange>
 8013eb0:	4603      	mov	r3, r0
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d101      	bne.n	8013eba <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 8013eb6:	2301      	movs	r3, #1
 8013eb8:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	681b      	ldr	r3, [r3, #0]
 8013ebe:	7a1b      	ldrb	r3, [r3, #8]
 8013ec0:	f343 1303 	sbfx	r3, r3, #4, #4
 8013ec4:	b25b      	sxtb	r3, r3
 8013ec6:	2207      	movs	r2, #7
 8013ec8:	2100      	movs	r1, #0
 8013eca:	4618      	mov	r0, r3
 8013ecc:	f7fe f98d 	bl	80121ea <RegionCommonValueInRange>
 8013ed0:	4603      	mov	r3, r0
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d101      	bne.n	8013eda <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 8013ed6:	2301      	movs	r3, #1
 8013ed8:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	681b      	ldr	r3, [r3, #0]
 8013ede:	7a1b      	ldrb	r3, [r3, #8]
 8013ee0:	f343 0303 	sbfx	r3, r3, #0, #4
 8013ee4:	b25a      	sxtb	r2, r3
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	7a1b      	ldrb	r3, [r3, #8]
 8013eec:	f343 1303 	sbfx	r3, r3, #4, #4
 8013ef0:	b25b      	sxtb	r3, r3
 8013ef2:	429a      	cmp	r2, r3
 8013ef4:	dd01      	ble.n	8013efa <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 8013ef6:	2301      	movs	r3, #1
 8013ef8:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 8013efa:	7bbb      	ldrb	r3, [r7, #14]
 8013efc:	f083 0301 	eor.w	r3, r3, #1
 8013f00:	b2db      	uxtb	r3, r3
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d010      	beq.n	8013f28 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	681b      	ldr	r3, [r3, #0]
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	f107 020c 	add.w	r2, r7, #12
 8013f10:	4611      	mov	r1, r2
 8013f12:	4618      	mov	r0, r3
 8013f14:	f7fe feee 	bl	8012cf4 <VerifyRfFreq>
 8013f18:	4603      	mov	r3, r0
 8013f1a:	f083 0301 	eor.w	r3, r3, #1
 8013f1e:	b2db      	uxtb	r3, r3
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d001      	beq.n	8013f28 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 8013f24:	2301      	movs	r3, #1
 8013f26:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8013f28:	7bfb      	ldrb	r3, [r7, #15]
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d004      	beq.n	8013f38 <RegionEU868ChannelAdd+0xcc>
 8013f2e:	7bbb      	ldrb	r3, [r7, #14]
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d001      	beq.n	8013f38 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8013f34:	2306      	movs	r3, #6
 8013f36:	e035      	b.n	8013fa4 <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 8013f38:	7bfb      	ldrb	r3, [r7, #15]
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d001      	beq.n	8013f42 <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8013f3e:	2305      	movs	r3, #5
 8013f40:	e030      	b.n	8013fa4 <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 8013f42:	7bbb      	ldrb	r3, [r7, #14]
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d001      	beq.n	8013f4c <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8013f48:	2304      	movs	r3, #4
 8013f4a:	e02b      	b.n	8013fa4 <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8013f4c:	4b17      	ldr	r3, [pc, #92]	@ (8013fac <RegionEU868ChannelAdd+0x140>)
 8013f4e:	6819      	ldr	r1, [r3, #0]
 8013f50:	7b7a      	ldrb	r2, [r7, #13]
 8013f52:	4613      	mov	r3, r2
 8013f54:	005b      	lsls	r3, r3, #1
 8013f56:	4413      	add	r3, r2
 8013f58:	009b      	lsls	r3, r3, #2
 8013f5a:	18c8      	adds	r0, r1, r3
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	681b      	ldr	r3, [r3, #0]
 8013f60:	220c      	movs	r2, #12
 8013f62:	4619      	mov	r1, r3
 8013f64:	f002 ff49 	bl	8016dfa <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 8013f68:	4b10      	ldr	r3, [pc, #64]	@ (8013fac <RegionEU868ChannelAdd+0x140>)
 8013f6a:	6819      	ldr	r1, [r3, #0]
 8013f6c:	7b7a      	ldrb	r2, [r7, #13]
 8013f6e:	7b38      	ldrb	r0, [r7, #12]
 8013f70:	4613      	mov	r3, r2
 8013f72:	005b      	lsls	r3, r3, #1
 8013f74:	4413      	add	r3, r2
 8013f76:	009b      	lsls	r3, r3, #2
 8013f78:	440b      	add	r3, r1
 8013f7a:	3309      	adds	r3, #9
 8013f7c:	4602      	mov	r2, r0
 8013f7e:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8013f80:	4b0a      	ldr	r3, [pc, #40]	@ (8013fac <RegionEU868ChannelAdd+0x140>)
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	f8b3 3360 	ldrh.w	r3, [r3, #864]	@ 0x360
 8013f88:	b21a      	sxth	r2, r3
 8013f8a:	7b7b      	ldrb	r3, [r7, #13]
 8013f8c:	2101      	movs	r1, #1
 8013f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8013f92:	b21b      	sxth	r3, r3
 8013f94:	4313      	orrs	r3, r2
 8013f96:	b21a      	sxth	r2, r3
 8013f98:	4b04      	ldr	r3, [pc, #16]	@ (8013fac <RegionEU868ChannelAdd+0x140>)
 8013f9a:	681b      	ldr	r3, [r3, #0]
 8013f9c:	b292      	uxth	r2, r2
 8013f9e:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    return LORAMAC_STATUS_OK;
 8013fa2:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8013fa4:	4618      	mov	r0, r3
 8013fa6:	3710      	adds	r7, #16
 8013fa8:	46bd      	mov	sp, r7
 8013faa:	bd80      	pop	{r7, pc}
 8013fac:	20001220 	.word	0x20001220

08013fb0 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8013fb0:	b580      	push	{r7, lr}
 8013fb2:	b086      	sub	sp, #24
 8013fb4:	af00      	add	r7, sp, #0
 8013fb6:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	781b      	ldrb	r3, [r3, #0]
 8013fbc:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8013fbe:	7dfb      	ldrb	r3, [r7, #23]
 8013fc0:	2b02      	cmp	r3, #2
 8013fc2:	d801      	bhi.n	8013fc8 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 8013fc4:	2300      	movs	r3, #0
 8013fc6:	e016      	b.n	8013ff6 <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8013fc8:	4b0d      	ldr	r3, [pc, #52]	@ (8014000 <RegionEU868ChannelsRemove+0x50>)
 8013fca:	6819      	ldr	r1, [r3, #0]
 8013fcc:	7dfa      	ldrb	r2, [r7, #23]
 8013fce:	4613      	mov	r3, r2
 8013fd0:	005b      	lsls	r3, r3, #1
 8013fd2:	4413      	add	r3, r2
 8013fd4:	009b      	lsls	r3, r3, #2
 8013fd6:	440b      	add	r3, r1
 8013fd8:	461a      	mov	r2, r3
 8013fda:	2300      	movs	r3, #0
 8013fdc:	6013      	str	r3, [r2, #0]
 8013fde:	6053      	str	r3, [r2, #4]
 8013fe0:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8013fe2:	4b07      	ldr	r3, [pc, #28]	@ (8014000 <RegionEU868ChannelsRemove+0x50>)
 8013fe4:	681b      	ldr	r3, [r3, #0]
 8013fe6:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8013fea:	7df9      	ldrb	r1, [r7, #23]
 8013fec:	2210      	movs	r2, #16
 8013fee:	4618      	mov	r0, r3
 8013ff0:	f7fe f918 	bl	8012224 <RegionCommonChanDisable>
 8013ff4:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 8013ff6:	4618      	mov	r0, r3
 8013ff8:	3718      	adds	r7, #24
 8013ffa:	46bd      	mov	sp, r7
 8013ffc:	bd80      	pop	{r7, pc}
 8013ffe:	bf00      	nop
 8014000:	20001220 	.word	0x20001220

08014004 <RegionEU868ApplyDrOffset>:
#endif /* REGION_EU868 */
}
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8014004:	b480      	push	{r7}
 8014006:	b085      	sub	sp, #20
 8014008:	af00      	add	r7, sp, #0
 801400a:	4603      	mov	r3, r0
 801400c:	71fb      	strb	r3, [r7, #7]
 801400e:	460b      	mov	r3, r1
 8014010:	71bb      	strb	r3, [r7, #6]
 8014012:	4613      	mov	r3, r2
 8014014:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 8014016:	79ba      	ldrb	r2, [r7, #6]
 8014018:	797b      	ldrb	r3, [r7, #5]
 801401a:	1ad3      	subs	r3, r2, r3
 801401c:	b2db      	uxtb	r3, r3
 801401e:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8014020:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014024:	2b00      	cmp	r3, #0
 8014026:	da01      	bge.n	801402c <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 8014028:	2300      	movs	r3, #0
 801402a:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 801402c:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 801402e:	4618      	mov	r0, r3
 8014030:	3714      	adds	r7, #20
 8014032:	46bd      	mov	sp, r7
 8014034:	bc80      	pop	{r7}
 8014036:	4770      	bx	lr

08014038 <LimitTxPower>:
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
static Band_t* RegionBands;
#endif /* REGION_VERSION */

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 8014038:	b580      	push	{r7, lr}
 801403a:	b084      	sub	sp, #16
 801403c:	af00      	add	r7, sp, #0
 801403e:	603b      	str	r3, [r7, #0]
 8014040:	4603      	mov	r3, r0
 8014042:	71fb      	strb	r3, [r7, #7]
 8014044:	460b      	mov	r3, r1
 8014046:	71bb      	strb	r3, [r7, #6]
 8014048:	4613      	mov	r3, r2
 801404a:	717b      	strb	r3, [r7, #5]
    int8_t txPowerResult = txPower;
 801404c:	79fb      	ldrb	r3, [r7, #7]
 801404e:	73fb      	strb	r3, [r7, #15]

    // Limit tx power to the band max
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 8014050:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8014054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014058:	4611      	mov	r1, r2
 801405a:	4618      	mov	r0, r3
 801405c:	f7fe fdcd 	bl	8012bfa <RegionCommonLimitTxPower>
 8014060:	4603      	mov	r3, r0
 8014062:	73fb      	strb	r3, [r7, #15]

    if( datarate == DR_4 )
 8014064:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8014068:	2b04      	cmp	r3, #4
 801406a:	d106      	bne.n	801407a <LimitTxPower+0x42>
    {// Limit tx power to max 26dBm
        txPowerResult = MAX( txPower, TX_POWER_2 );
 801406c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014070:	2b02      	cmp	r3, #2
 8014072:	bfb8      	it	lt
 8014074:	2302      	movlt	r3, #2
 8014076:	73fb      	strb	r3, [r7, #15]
 8014078:	e00d      	b.n	8014096 <LimitTxPower+0x5e>
    }
    else
    {
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 801407a:	2204      	movs	r2, #4
 801407c:	2100      	movs	r1, #0
 801407e:	6838      	ldr	r0, [r7, #0]
 8014080:	f7fe f904 	bl	801228c <RegionCommonCountChannels>
 8014084:	4603      	mov	r3, r0
 8014086:	2b31      	cmp	r3, #49	@ 0x31
 8014088:	d805      	bhi.n	8014096 <LimitTxPower+0x5e>
        {// Limit tx power to max 21dBm
            txPowerResult = MAX( txPower, TX_POWER_5 );
 801408a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801408e:	2b05      	cmp	r3, #5
 8014090:	bfb8      	it	lt
 8014092:	2305      	movlt	r3, #5
 8014094:	73fb      	strb	r3, [r7, #15]
        }
    }
    return txPowerResult;
 8014096:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801409a:	4618      	mov	r0, r3
 801409c:	3710      	adds	r7, #16
 801409e:	46bd      	mov	sp, r7
 80140a0:	bd80      	pop	{r7, pc}
	...

080140a4 <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 80140a4:	b580      	push	{r7, lr}
 80140a6:	b082      	sub	sp, #8
 80140a8:	af00      	add	r7, sp, #0
 80140aa:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 80140ac:	4b18      	ldr	r3, [pc, #96]	@ (8014110 <VerifyRfFreq+0x6c>)
 80140ae:	6a1b      	ldr	r3, [r3, #32]
 80140b0:	6878      	ldr	r0, [r7, #4]
 80140b2:	4798      	blx	r3
 80140b4:	4603      	mov	r3, r0
 80140b6:	f083 0301 	eor.w	r3, r3, #1
 80140ba:	b2db      	uxtb	r3, r3
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d001      	beq.n	80140c4 <VerifyRfFreq+0x20>
    {
        return false;
 80140c0:	2300      	movs	r3, #0
 80140c2:	e021      	b.n	8014108 <VerifyRfFreq+0x64>
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	4a13      	ldr	r2, [pc, #76]	@ (8014114 <VerifyRfFreq+0x70>)
 80140c8:	4293      	cmp	r3, r2
 80140ca:	d910      	bls.n	80140ee <VerifyRfFreq+0x4a>
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	4a12      	ldr	r2, [pc, #72]	@ (8014118 <VerifyRfFreq+0x74>)
 80140d0:	4293      	cmp	r3, r2
 80140d2:	d80c      	bhi.n	80140ee <VerifyRfFreq+0x4a>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 80140d4:	687a      	ldr	r2, [r7, #4]
 80140d6:	4b11      	ldr	r3, [pc, #68]	@ (801411c <VerifyRfFreq+0x78>)
 80140d8:	4413      	add	r3, r2
 80140da:	4a11      	ldr	r2, [pc, #68]	@ (8014120 <VerifyRfFreq+0x7c>)
 80140dc:	fba2 1203 	umull	r1, r2, r2, r3
 80140e0:	0c92      	lsrs	r2, r2, #18
 80140e2:	4910      	ldr	r1, [pc, #64]	@ (8014124 <VerifyRfFreq+0x80>)
 80140e4:	fb01 f202 	mul.w	r2, r1, r2
 80140e8:	1a9a      	subs	r2, r3, r2
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 80140ea:	2a00      	cmp	r2, #0
 80140ec:	d001      	beq.n	80140f2 <VerifyRfFreq+0x4e>
    {
        return false;
 80140ee:	2300      	movs	r3, #0
 80140f0:	e00a      	b.n	8014108 <VerifyRfFreq+0x64>
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	4a0c      	ldr	r2, [pc, #48]	@ (8014128 <VerifyRfFreq+0x84>)
 80140f6:	4293      	cmp	r3, r2
 80140f8:	d903      	bls.n	8014102 <VerifyRfFreq+0x5e>
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	4a06      	ldr	r2, [pc, #24]	@ (8014118 <VerifyRfFreq+0x74>)
 80140fe:	4293      	cmp	r3, r2
 8014100:	d901      	bls.n	8014106 <VerifyRfFreq+0x62>
    {
        return false;
 8014102:	2300      	movs	r3, #0
 8014104:	e000      	b.n	8014108 <VerifyRfFreq+0x64>
    }
    return true;
 8014106:	2301      	movs	r3, #1
}
 8014108:	4618      	mov	r0, r3
 801410a:	3708      	adds	r7, #8
 801410c:	46bd      	mov	sp, r7
 801410e:	bd80      	pop	{r7, pc}
 8014110:	0802146c 	.word	0x0802146c
 8014114:	3708709f 	.word	0x3708709f
 8014118:	374886e0 	.word	0x374886e0
 801411c:	c8f78f60 	.word	0xc8f78f60
 8014120:	6fd91d85 	.word	0x6fd91d85
 8014124:	000927c0 	.word	0x000927c0
 8014128:	35c8015f 	.word	0x35c8015f

0801412c <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 801412c:	b590      	push	{r4, r7, lr}
 801412e:	b089      	sub	sp, #36	@ 0x24
 8014130:	af04      	add	r7, sp, #16
 8014132:	4603      	mov	r3, r0
 8014134:	460a      	mov	r2, r1
 8014136:	71fb      	strb	r3, [r7, #7]
 8014138:	4613      	mov	r3, r2
 801413a:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesUS915[datarate];
 801413c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014140:	4a0f      	ldr	r2, [pc, #60]	@ (8014180 <GetTimeOnAir+0x54>)
 8014142:	5cd3      	ldrb	r3, [r2, r3]
 8014144:	73fb      	strb	r3, [r7, #15]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 8014146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801414a:	490e      	ldr	r1, [pc, #56]	@ (8014184 <GetTimeOnAir+0x58>)
 801414c:	4618      	mov	r0, r3
 801414e:	f7fe fd69 	bl	8012c24 <RegionCommonGetBandwidth>
 8014152:	60b8      	str	r0, [r7, #8]

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8014154:	4b0c      	ldr	r3, [pc, #48]	@ (8014188 <GetTimeOnAir+0x5c>)
 8014156:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8014158:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801415c:	88bb      	ldrh	r3, [r7, #4]
 801415e:	b2db      	uxtb	r3, r3
 8014160:	2101      	movs	r1, #1
 8014162:	9103      	str	r1, [sp, #12]
 8014164:	9302      	str	r3, [sp, #8]
 8014166:	2300      	movs	r3, #0
 8014168:	9301      	str	r3, [sp, #4]
 801416a:	2308      	movs	r3, #8
 801416c:	9300      	str	r3, [sp, #0]
 801416e:	2301      	movs	r3, #1
 8014170:	68b9      	ldr	r1, [r7, #8]
 8014172:	2001      	movs	r0, #1
 8014174:	47a0      	blx	r4
 8014176:	4603      	mov	r3, r0
}
 8014178:	4618      	mov	r0, r3
 801417a:	3714      	adds	r7, #20
 801417c:	46bd      	mov	sp, r7
 801417e:	bd90      	pop	{r4, r7, pc}
 8014180:	08021064 	.word	0x08021064
 8014184:	08021074 	.word	0x08021074
 8014188:	0802146c 	.word	0x0802146c

0801418c <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 801418c:	b580      	push	{r7, lr}
 801418e:	b088      	sub	sp, #32
 8014190:	af00      	add	r7, sp, #0
 8014192:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8014194:	2300      	movs	r3, #0
 8014196:	61bb      	str	r3, [r7, #24]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	781b      	ldrb	r3, [r3, #0]
 801419c:	3b01      	subs	r3, #1
 801419e:	2b37      	cmp	r3, #55	@ 0x37
 80141a0:	f200 8136 	bhi.w	8014410 <RegionUS915GetPhyParam+0x284>
 80141a4:	a201      	add	r2, pc, #4	@ (adr r2, 80141ac <RegionUS915GetPhyParam+0x20>)
 80141a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80141aa:	bf00      	nop
 80141ac:	0801428d 	.word	0x0801428d
 80141b0:	08014293 	.word	0x08014293
 80141b4:	08014411 	.word	0x08014411
 80141b8:	08014411 	.word	0x08014411
 80141bc:	08014411 	.word	0x08014411
 80141c0:	08014299 	.word	0x08014299
 80141c4:	08014411 	.word	0x08014411
 80141c8:	080142d3 	.word	0x080142d3
 80141cc:	08014411 	.word	0x08014411
 80141d0:	080142d9 	.word	0x080142d9
 80141d4:	080142df 	.word	0x080142df
 80141d8:	080142e5 	.word	0x080142e5
 80141dc:	080142eb 	.word	0x080142eb
 80141e0:	080142fb 	.word	0x080142fb
 80141e4:	0801430b 	.word	0x0801430b
 80141e8:	08014311 	.word	0x08014311
 80141ec:	08014319 	.word	0x08014319
 80141f0:	08014321 	.word	0x08014321
 80141f4:	08014329 	.word	0x08014329
 80141f8:	08014331 	.word	0x08014331
 80141fc:	08014339 	.word	0x08014339
 8014200:	0801434d 	.word	0x0801434d
 8014204:	08014353 	.word	0x08014353
 8014208:	08014359 	.word	0x08014359
 801420c:	0801435f 	.word	0x0801435f
 8014210:	0801436b 	.word	0x0801436b
 8014214:	08014377 	.word	0x08014377
 8014218:	0801437d 	.word	0x0801437d
 801421c:	08014385 	.word	0x08014385
 8014220:	0801438b 	.word	0x0801438b
 8014224:	08014391 	.word	0x08014391
 8014228:	08014397 	.word	0x08014397
 801422c:	0801429f 	.word	0x0801429f
 8014230:	08014411 	.word	0x08014411
 8014234:	08014411 	.word	0x08014411
 8014238:	08014411 	.word	0x08014411
 801423c:	08014411 	.word	0x08014411
 8014240:	08014411 	.word	0x08014411
 8014244:	08014411 	.word	0x08014411
 8014248:	08014411 	.word	0x08014411
 801424c:	08014411 	.word	0x08014411
 8014250:	08014411 	.word	0x08014411
 8014254:	08014411 	.word	0x08014411
 8014258:	08014411 	.word	0x08014411
 801425c:	08014411 	.word	0x08014411
 8014260:	08014411 	.word	0x08014411
 8014264:	0801439f 	.word	0x0801439f
 8014268:	080143b3 	.word	0x080143b3
 801426c:	080143c1 	.word	0x080143c1
 8014270:	080143c7 	.word	0x080143c7
 8014274:	08014411 	.word	0x08014411
 8014278:	080143cd 	.word	0x080143cd
 801427c:	080143e1 	.word	0x080143e1
 8014280:	080143e7 	.word	0x080143e7
 8014284:	080143ed 	.word	0x080143ed
 8014288:	080143fd 	.word	0x080143fd
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 801428c:	2308      	movs	r3, #8
 801428e:	61bb      	str	r3, [r7, #24]
            break;
 8014290:	e0bf      	b.n	8014412 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = US915_TX_MIN_DATARATE;
 8014292:	2300      	movs	r3, #0
 8014294:	61bb      	str	r3, [r7, #24]
            break;
 8014296:	e0bc      	b.n	8014412 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = US915_DEFAULT_DATARATE;
 8014298:	2300      	movs	r3, #0
 801429a:	61bb      	str	r3, [r7, #24]
            break;
 801429c:	e0b9      	b.n	8014412 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80142a4:	733b      	strb	r3, [r7, #12]
 80142a6:	2304      	movs	r3, #4
 80142a8:	737b      	strb	r3, [r7, #13]
 80142aa:	2300      	movs	r3, #0
 80142ac:	73bb      	strb	r3, [r7, #14]
 80142ae:	2348      	movs	r3, #72	@ 0x48
 80142b0:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )US915_TX_MAX_DATARATE,
                .MinDr = ( int8_t )US915_TX_MIN_DATARATE,
                .NbChannels = US915_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 80142b2:	4b5b      	ldr	r3, [pc, #364]	@ (8014420 <RegionUS915GetPhyParam+0x294>)
 80142b4:	681b      	ldr	r3, [r3, #0]
 80142b6:	f503 7358 	add.w	r3, r3, #864	@ 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80142ba:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 80142bc:	4b58      	ldr	r3, [pc, #352]	@ (8014420 <RegionUS915GetPhyParam+0x294>)
 80142be:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80142c0:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 80142c2:	f107 030c 	add.w	r3, r7, #12
 80142c6:	4618      	mov	r0, r3
 80142c8:	f7fe fc59 	bl	8012b7e <RegionCommonGetNextLowerTxDr>
 80142cc:	4603      	mov	r3, r0
 80142ce:	61bb      	str	r3, [r7, #24]
            break;
 80142d0:	e09f      	b.n	8014412 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = US915_MAX_TX_POWER;
 80142d2:	2300      	movs	r3, #0
 80142d4:	61bb      	str	r3, [r7, #24]
            break;
 80142d6:	e09c      	b.n	8014412 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = US915_DEFAULT_TX_POWER;
 80142d8:	2300      	movs	r3, #0
 80142da:	61bb      	str	r3, [r7, #24]
            break;
 80142dc:	e099      	b.n	8014412 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 80142de:	2340      	movs	r3, #64	@ 0x40
 80142e0:	61bb      	str	r3, [r7, #24]
            break;
 80142e2:	e096      	b.n	8014412 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 80142e4:	2320      	movs	r3, #32
 80142e6:	61bb      	str	r3, [r7, #24]
            break;
 80142e8:	e093      	b.n	8014412 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80142f0:	461a      	mov	r2, r3
 80142f2:	4b4c      	ldr	r3, [pc, #304]	@ (8014424 <RegionUS915GetPhyParam+0x298>)
 80142f4:	5c9b      	ldrb	r3, [r3, r2]
 80142f6:	61bb      	str	r3, [r7, #24]
            break;
 80142f8:	e08b      	b.n	8014412 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014300:	461a      	mov	r2, r3
 8014302:	4b49      	ldr	r3, [pc, #292]	@ (8014428 <RegionUS915GetPhyParam+0x29c>)
 8014304:	5c9b      	ldrb	r3, [r3, r2]
 8014306:	61bb      	str	r3, [r7, #24]
            break;
 8014308:	e083      	b.n	8014412 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = US915_DUTY_CYCLE_ENABLED;
 801430a:	2300      	movs	r3, #0
 801430c:	61bb      	str	r3, [r7, #24]
            break;
 801430e:	e080      	b.n	8014412 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = US915_MAX_RX_WINDOW;
 8014310:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8014314:	61bb      	str	r3, [r7, #24]
            break;
 8014316:	e07c      	b.n	8014412 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8014318:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801431c:	61bb      	str	r3, [r7, #24]
            break;
 801431e:	e078      	b.n	8014412 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8014320:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8014324:	61bb      	str	r3, [r7, #24]
            break;
 8014326:	e074      	b.n	8014412 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8014328:	f241 3388 	movw	r3, #5000	@ 0x1388
 801432c:	61bb      	str	r3, [r7, #24]
            break;
 801432e:	e070      	b.n	8014412 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8014330:	f241 7370 	movw	r3, #6000	@ 0x1770
 8014334:	61bb      	str	r3, [r7, #24]
            break;
 8014336:	e06c      	b.n	8014412 <RegionUS915GetPhyParam+0x286>
            break;
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8014338:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801433c:	483b      	ldr	r0, [pc, #236]	@ (801442c <RegionUS915GetPhyParam+0x2a0>)
 801433e:	f002 fd45 	bl	8016dcc <randr>
 8014342:	4603      	mov	r3, r0
 8014344:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8014348:	61bb      	str	r3, [r7, #24]
            break;
 801434a:	e062      	b.n	8014412 <RegionUS915GetPhyParam+0x286>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 801434c:	2300      	movs	r3, #0
 801434e:	61bb      	str	r3, [r7, #24]
            break;
 8014350:	e05f      	b.n	8014412 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = US915_RX_WND_2_FREQ;
 8014352:	4b37      	ldr	r3, [pc, #220]	@ (8014430 <RegionUS915GetPhyParam+0x2a4>)
 8014354:	61bb      	str	r3, [r7, #24]
            break;
 8014356:	e05c      	b.n	8014412 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = US915_RX_WND_2_DR;
 8014358:	2308      	movs	r3, #8
 801435a:	61bb      	str	r3, [r7, #24]
            break;
 801435c:	e059      	b.n	8014412 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801435e:	4b30      	ldr	r3, [pc, #192]	@ (8014420 <RegionUS915GetPhyParam+0x294>)
 8014360:	681b      	ldr	r3, [r3, #0]
 8014362:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8014366:	61bb      	str	r3, [r7, #24]
            break;
 8014368:	e053      	b.n	8014412 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 801436a:	4b2d      	ldr	r3, [pc, #180]	@ (8014420 <RegionUS915GetPhyParam+0x294>)
 801436c:	681b      	ldr	r3, [r3, #0]
 801436e:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8014372:	61bb      	str	r3, [r7, #24]
            break;
 8014374:	e04d      	b.n	8014412 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = US915_MAX_NB_CHANNELS;
 8014376:	2348      	movs	r3, #72	@ 0x48
 8014378:	61bb      	str	r3, [r7, #24]
            break;
 801437a:	e04a      	b.n	8014412 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 801437c:	4b28      	ldr	r3, [pc, #160]	@ (8014420 <RegionUS915GetPhyParam+0x294>)
 801437e:	681b      	ldr	r3, [r3, #0]
 8014380:	61bb      	str	r3, [r7, #24]
            break;
 8014382:	e046      	b.n	8014412 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = US915_DEFAULT_UPLINK_DWELL_TIME;
 8014384:	2300      	movs	r3, #0
 8014386:	61bb      	str	r3, [r7, #24]
            break;
 8014388:	e043      	b.n	8014412 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 801438a:	2300      	movs	r3, #0
 801438c:	61bb      	str	r3, [r7, #24]
            break;
 801438e:	e040      	b.n	8014412 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 8014390:	4b28      	ldr	r3, [pc, #160]	@ (8014434 <RegionUS915GetPhyParam+0x2a8>)
 8014392:	61bb      	str	r3, [r7, #24]
            break;
 8014394:	e03d      	b.n	8014412 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = 0;
 8014396:	f04f 0300 	mov.w	r3, #0
 801439a:	61bb      	str	r3, [r7, #24]
            break;
 801439c:	e039      	b.n	8014412 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	791b      	ldrb	r3, [r3, #4]
 80143a2:	4a25      	ldr	r2, [pc, #148]	@ (8014438 <RegionUS915GetPhyParam+0x2ac>)
 80143a4:	4922      	ldr	r1, [pc, #136]	@ (8014430 <RegionUS915GetPhyParam+0x2a4>)
 80143a6:	4618      	mov	r0, r3
 80143a8:	f7fd fd4c 	bl	8011e44 <RegionBaseUSCalcDownlinkFrequency>
 80143ac:	4603      	mov	r3, r0
 80143ae:	61bb      	str	r3, [r7, #24]
                                                                US915_BEACON_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 80143b0:	e02f      	b.n	8014412 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 80143b2:	2317      	movs	r3, #23
 80143b4:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 80143b6:	2304      	movs	r3, #4
 80143b8:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 80143ba:	2303      	movs	r3, #3
 80143bc:	76bb      	strb	r3, [r7, #26]
            break;
 80143be:	e028      	b.n	8014412 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 80143c0:	2308      	movs	r3, #8
 80143c2:	61bb      	str	r3, [r7, #24]
            break;
 80143c4:	e025      	b.n	8014412 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 80143c6:	2308      	movs	r3, #8
 80143c8:	61bb      	str	r3, [r7, #24]
            break;
 80143ca:	e022      	b.n	8014412 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	791b      	ldrb	r3, [r3, #4]
 80143d0:	4a19      	ldr	r2, [pc, #100]	@ (8014438 <RegionUS915GetPhyParam+0x2ac>)
 80143d2:	4917      	ldr	r1, [pc, #92]	@ (8014430 <RegionUS915GetPhyParam+0x2a4>)
 80143d4:	4618      	mov	r0, r3
 80143d6:	f7fd fd35 	bl	8011e44 <RegionBaseUSCalcDownlinkFrequency>
 80143da:	4603      	mov	r3, r0
 80143dc:	61bb      	str	r3, [r7, #24]
                                                                US915_PING_SLOT_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 80143de:	e018      	b.n	8014412 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 80143e0:	2308      	movs	r3, #8
 80143e2:	61bb      	str	r3, [r7, #24]
            break;
 80143e4:	e015      	b.n	8014412 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 80143e6:	2308      	movs	r3, #8
 80143e8:	61bb      	str	r3, [r7, #24]
            break;
 80143ea:	e012      	b.n	8014412 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80143f2:	461a      	mov	r2, r3
 80143f4:	4b11      	ldr	r3, [pc, #68]	@ (801443c <RegionUS915GetPhyParam+0x2b0>)
 80143f6:	5c9b      	ldrb	r3, [r3, r2]
 80143f8:	61bb      	str	r3, [r7, #24]
            break;
 80143fa:	e00a      	b.n	8014412 <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014402:	490f      	ldr	r1, [pc, #60]	@ (8014440 <RegionUS915GetPhyParam+0x2b4>)
 8014404:	4618      	mov	r0, r3
 8014406:	f7fe fc0d 	bl	8012c24 <RegionCommonGetBandwidth>
 801440a:	4603      	mov	r3, r0
 801440c:	61bb      	str	r3, [r7, #24]
            break;
 801440e:	e000      	b.n	8014412 <RegionUS915GetPhyParam+0x286>
        }
        default:
        {
            break;
 8014410:	bf00      	nop
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 8014412:	69bb      	ldr	r3, [r7, #24]
 8014414:	61fb      	str	r3, [r7, #28]
 8014416:	69fb      	ldr	r3, [r7, #28]
}
 8014418:	4618      	mov	r0, r3
 801441a:	3720      	adds	r7, #32
 801441c:	46bd      	mov	sp, r7
 801441e:	bd80      	pop	{r7, pc}
 8014420:	2000122c 	.word	0x2000122c
 8014424:	080210c8 	.word	0x080210c8
 8014428:	080210d8 	.word	0x080210d8
 801442c:	fffffc18 	.word	0xfffffc18
 8014430:	370870a0 	.word	0x370870a0
 8014434:	4200999a 	.word	0x4200999a
 8014438:	000927c0 	.word	0x000927c0
 801443c:	08021064 	.word	0x08021064
 8014440:	08021074 	.word	0x08021074

08014444 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8014444:	b590      	push	{r4, r7, lr}
 8014446:	b085      	sub	sp, #20
 8014448:	af02      	add	r7, sp, #8
 801444a:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 801444c:	4b11      	ldr	r3, [pc, #68]	@ (8014494 <RegionUS915SetBandTxDone+0x50>)
 801444e:	681a      	ldr	r2, [r3, #0]
 8014450:	4b11      	ldr	r3, [pc, #68]	@ (8014498 <RegionUS915SetBandTxDone+0x54>)
 8014452:	6819      	ldr	r1, [r3, #0]
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	781b      	ldrb	r3, [r3, #0]
 8014458:	4618      	mov	r0, r3
 801445a:	4603      	mov	r3, r0
 801445c:	005b      	lsls	r3, r3, #1
 801445e:	4403      	add	r3, r0
 8014460:	009b      	lsls	r3, r3, #2
 8014462:	440b      	add	r3, r1
 8014464:	3309      	adds	r3, #9
 8014466:	781b      	ldrb	r3, [r3, #0]
 8014468:	4619      	mov	r1, r3
 801446a:	460b      	mov	r3, r1
 801446c:	005b      	lsls	r3, r3, #1
 801446e:	440b      	add	r3, r1
 8014470:	00db      	lsls	r3, r3, #3
 8014472:	18d0      	adds	r0, r2, r3
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	6899      	ldr	r1, [r3, #8]
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	785c      	ldrb	r4, [r3, #1]
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	691a      	ldr	r2, [r3, #16]
 8014480:	9200      	str	r2, [sp, #0]
 8014482:	68db      	ldr	r3, [r3, #12]
 8014484:	4622      	mov	r2, r4
 8014486:	f7fd ff53 	bl	8012330 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 801448a:	bf00      	nop
 801448c:	370c      	adds	r7, #12
 801448e:	46bd      	mov	sp, r7
 8014490:	bd90      	pop	{r4, r7, pc}
 8014492:	bf00      	nop
 8014494:	20001230 	.word	0x20001230
 8014498:	2000122c 	.word	0x2000122c

0801449c <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 801449c:	b580      	push	{r7, lr}
 801449e:	b08a      	sub	sp, #40	@ 0x28
 80144a0:	af00      	add	r7, sp, #0
 80144a2:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 80144a4:	2301      	movs	r3, #1
 80144a6:	81bb      	strh	r3, [r7, #12]
 80144a8:	2300      	movs	r3, #0
 80144aa:	73bb      	strb	r3, [r7, #14]
 80144ac:	2300      	movs	r3, #0
 80144ae:	613b      	str	r3, [r7, #16]
 80144b0:	2300      	movs	r3, #0
 80144b2:	617b      	str	r3, [r7, #20]
 80144b4:	2300      	movs	r3, #0
 80144b6:	61bb      	str	r3, [r7, #24]
 80144b8:	2300      	movs	r3, #0
 80144ba:	61fb      	str	r3, [r7, #28]
 80144bc:	2300      	movs	r3, #0
 80144be:	f887 3020 	strb.w	r3, [r7, #32]
    {
       US915_BAND0
    };

    switch( params->Type )
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	7b1b      	ldrb	r3, [r3, #12]
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d007      	beq.n	80144da <RegionUS915InitDefaults+0x3e>
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	f2c0 8104 	blt.w	80146d8 <RegionUS915InitDefaults+0x23c>
 80144d0:	3b01      	subs	r3, #1
 80144d2:	2b01      	cmp	r3, #1
 80144d4:	f200 8100 	bhi.w	80146d8 <RegionUS915InitDefaults+0x23c>
 80144d8:	e0ce      	b.n	8014678 <RegionUS915InitDefaults+0x1dc>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	681b      	ldr	r3, [r3, #0]
 80144de:	2b00      	cmp	r3, #0
 80144e0:	f000 80fc 	beq.w	80146dc <RegionUS915InitDefaults+0x240>
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	685b      	ldr	r3, [r3, #4]
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	f000 80f7 	beq.w	80146dc <RegionUS915InitDefaults+0x240>
            {
                return;
            }

            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	681b      	ldr	r3, [r3, #0]
 80144f2:	4a7c      	ldr	r2, [pc, #496]	@ (80146e4 <RegionUS915InitDefaults+0x248>)
 80144f4:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	685b      	ldr	r3, [r3, #4]
 80144fa:	4a7b      	ldr	r2, [pc, #492]	@ (80146e8 <RegionUS915InitDefaults+0x24c>)
 80144fc:	6013      	str	r3, [r2, #0]
            RegionNvmGroup1->JoinTrialsCounter = 0;

            // Default bands
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            RegionBands = (Band_t*) params->Bands;
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	689b      	ldr	r3, [r3, #8]
 8014502:	4a7a      	ldr	r2, [pc, #488]	@ (80146ec <RegionUS915InitDefaults+0x250>)
 8014504:	6013      	str	r3, [r2, #0]

            // Initialize 8 bit channel groups index
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8014506:	4b77      	ldr	r3, [pc, #476]	@ (80146e4 <RegionUS915InitDefaults+0x248>)
 8014508:	681b      	ldr	r3, [r3, #0]
 801450a:	2200      	movs	r2, #0
 801450c:	731a      	strb	r2, [r3, #12]

            // Initialize the join trials counter
            RegionNvmGroup1->JoinTrialsCounter = 0;
 801450e:	4b75      	ldr	r3, [pc, #468]	@ (80146e4 <RegionUS915InitDefaults+0x248>)
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	2200      	movs	r2, #0
 8014514:	735a      	strb	r2, [r3, #13]

            // Default bands
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 8014516:	4b75      	ldr	r3, [pc, #468]	@ (80146ec <RegionUS915InitDefaults+0x250>)
 8014518:	681b      	ldr	r3, [r3, #0]
 801451a:	f107 010c 	add.w	r1, r7, #12
 801451e:	2218      	movs	r2, #24
 8014520:	4618      	mov	r0, r3
 8014522:	f002 fc6a 	bl	8016dfa <memcpy1>
#endif /* REGION_VERSION */

            // Default channels
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 8014526:	2300      	movs	r3, #0
 8014528:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801452c:	e02e      	b.n	801458c <RegionUS915InitDefaults+0xf0>
            {
                // 125 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 801452e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014532:	4a6f      	ldr	r2, [pc, #444]	@ (80146f0 <RegionUS915InitDefaults+0x254>)
 8014534:	fb03 f202 	mul.w	r2, r3, r2
 8014538:	4b6e      	ldr	r3, [pc, #440]	@ (80146f4 <RegionUS915InitDefaults+0x258>)
 801453a:	4413      	add	r3, r2
 801453c:	4a6a      	ldr	r2, [pc, #424]	@ (80146e8 <RegionUS915InitDefaults+0x24c>)
 801453e:	6811      	ldr	r1, [r2, #0]
 8014540:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8014544:	4618      	mov	r0, r3
 8014546:	4613      	mov	r3, r2
 8014548:	005b      	lsls	r3, r3, #1
 801454a:	4413      	add	r3, r2
 801454c:	009b      	lsls	r3, r3, #2
 801454e:	440b      	add	r3, r1
 8014550:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 8014552:	4b65      	ldr	r3, [pc, #404]	@ (80146e8 <RegionUS915InitDefaults+0x24c>)
 8014554:	6819      	ldr	r1, [r3, #0]
 8014556:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801455a:	4613      	mov	r3, r2
 801455c:	005b      	lsls	r3, r3, #1
 801455e:	4413      	add	r3, r2
 8014560:	009b      	lsls	r3, r3, #2
 8014562:	440b      	add	r3, r1
 8014564:	3308      	adds	r3, #8
 8014566:	2230      	movs	r2, #48	@ 0x30
 8014568:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 801456a:	4b5f      	ldr	r3, [pc, #380]	@ (80146e8 <RegionUS915InitDefaults+0x24c>)
 801456c:	6819      	ldr	r1, [r3, #0]
 801456e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8014572:	4613      	mov	r3, r2
 8014574:	005b      	lsls	r3, r3, #1
 8014576:	4413      	add	r3, r2
 8014578:	009b      	lsls	r3, r3, #2
 801457a:	440b      	add	r3, r1
 801457c:	3309      	adds	r3, #9
 801457e:	2200      	movs	r2, #0
 8014580:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 8014582:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014586:	3301      	adds	r3, #1
 8014588:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801458c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014590:	2b3f      	cmp	r3, #63	@ 0x3f
 8014592:	d9cc      	bls.n	801452e <RegionUS915InitDefaults+0x92>
            }
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 8014594:	2340      	movs	r3, #64	@ 0x40
 8014596:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801459a:	e02f      	b.n	80145fc <RegionUS915InitDefaults+0x160>
            {
                // 500 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 801459c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80145a0:	3b40      	subs	r3, #64	@ 0x40
 80145a2:	4a55      	ldr	r2, [pc, #340]	@ (80146f8 <RegionUS915InitDefaults+0x25c>)
 80145a4:	fb03 f202 	mul.w	r2, r3, r2
 80145a8:	4b54      	ldr	r3, [pc, #336]	@ (80146fc <RegionUS915InitDefaults+0x260>)
 80145aa:	4413      	add	r3, r2
 80145ac:	4a4e      	ldr	r2, [pc, #312]	@ (80146e8 <RegionUS915InitDefaults+0x24c>)
 80145ae:	6811      	ldr	r1, [r2, #0]
 80145b0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80145b4:	4618      	mov	r0, r3
 80145b6:	4613      	mov	r3, r2
 80145b8:	005b      	lsls	r3, r3, #1
 80145ba:	4413      	add	r3, r2
 80145bc:	009b      	lsls	r3, r3, #2
 80145be:	440b      	add	r3, r1
 80145c0:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 80145c2:	4b49      	ldr	r3, [pc, #292]	@ (80146e8 <RegionUS915InitDefaults+0x24c>)
 80145c4:	6819      	ldr	r1, [r3, #0]
 80145c6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80145ca:	4613      	mov	r3, r2
 80145cc:	005b      	lsls	r3, r3, #1
 80145ce:	4413      	add	r3, r2
 80145d0:	009b      	lsls	r3, r3, #2
 80145d2:	440b      	add	r3, r1
 80145d4:	3308      	adds	r3, #8
 80145d6:	2244      	movs	r2, #68	@ 0x44
 80145d8:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 80145da:	4b43      	ldr	r3, [pc, #268]	@ (80146e8 <RegionUS915InitDefaults+0x24c>)
 80145dc:	6819      	ldr	r1, [r3, #0]
 80145de:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80145e2:	4613      	mov	r3, r2
 80145e4:	005b      	lsls	r3, r3, #1
 80145e6:	4413      	add	r3, r2
 80145e8:	009b      	lsls	r3, r3, #2
 80145ea:	440b      	add	r3, r1
 80145ec:	3309      	adds	r3, #9
 80145ee:	2200      	movs	r2, #0
 80145f0:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 80145f2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80145f6:	3301      	adds	r3, #1
 80145f8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80145fc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014600:	2b47      	cmp	r3, #71	@ 0x47
 8014602:	d9cb      	bls.n	801459c <RegionUS915InitDefaults+0x100>
            RegionNvmGroup2->ChannelsDefaultMask[2] = HYBRID_DEFAULT_MASK2;
            RegionNvmGroup2->ChannelsDefaultMask[3] = HYBRID_DEFAULT_MASK3;
            RegionNvmGroup2->ChannelsDefaultMask[4] = HYBRID_DEFAULT_MASK4;
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
#else
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 8014604:	4b38      	ldr	r3, [pc, #224]	@ (80146e8 <RegionUS915InitDefaults+0x24c>)
 8014606:	681b      	ldr	r3, [r3, #0]
 8014608:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801460c:	f8a3 236c 	strh.w	r2, [r3, #876]	@ 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 8014610:	4b35      	ldr	r3, [pc, #212]	@ (80146e8 <RegionUS915InitDefaults+0x24c>)
 8014612:	681b      	ldr	r3, [r3, #0]
 8014614:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014618:	f8a3 236e 	strh.w	r2, [r3, #878]	@ 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 801461c:	4b32      	ldr	r3, [pc, #200]	@ (80146e8 <RegionUS915InitDefaults+0x24c>)
 801461e:	681b      	ldr	r3, [r3, #0]
 8014620:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014624:	f8a3 2370 	strh.w	r2, [r3, #880]	@ 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 8014628:	4b2f      	ldr	r3, [pc, #188]	@ (80146e8 <RegionUS915InitDefaults+0x24c>)
 801462a:	681b      	ldr	r3, [r3, #0]
 801462c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014630:	f8a3 2372 	strh.w	r2, [r3, #882]	@ 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 8014634:	4b2c      	ldr	r3, [pc, #176]	@ (80146e8 <RegionUS915InitDefaults+0x24c>)
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	22ff      	movs	r2, #255	@ 0xff
 801463a:	f8a3 2374 	strh.w	r2, [r3, #884]	@ 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 801463e:	4b2a      	ldr	r3, [pc, #168]	@ (80146e8 <RegionUS915InitDefaults+0x24c>)
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	2200      	movs	r2, #0
 8014644:	f8a3 2376 	strh.w	r2, [r3, #886]	@ 0x376
#endif /* HYBRID_ENABLED == 1 */

            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8014648:	4b27      	ldr	r3, [pc, #156]	@ (80146e8 <RegionUS915InitDefaults+0x24c>)
 801464a:	681b      	ldr	r3, [r3, #0]
 801464c:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8014650:	4b25      	ldr	r3, [pc, #148]	@ (80146e8 <RegionUS915InitDefaults+0x24c>)
 8014652:	681b      	ldr	r3, [r3, #0]
 8014654:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8014658:	2206      	movs	r2, #6
 801465a:	4619      	mov	r1, r3
 801465c:	f7fd fe42 	bl	80122e4 <RegionCommonChanMaskCopy>

            // Copy into channels mask remaining
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 8014660:	4b20      	ldr	r3, [pc, #128]	@ (80146e4 <RegionUS915InitDefaults+0x248>)
 8014662:	681b      	ldr	r3, [r3, #0]
 8014664:	4618      	mov	r0, r3
 8014666:	4b20      	ldr	r3, [pc, #128]	@ (80146e8 <RegionUS915InitDefaults+0x24c>)
 8014668:	681b      	ldr	r3, [r3, #0]
 801466a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 801466e:	2206      	movs	r2, #6
 8014670:	4619      	mov	r1, r3
 8014672:	f7fd fe37 	bl	80122e4 <RegionCommonChanMaskCopy>
            break;
 8014676:	e032      	b.n	80146de <RegionUS915InitDefaults+0x242>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8014678:	4b1b      	ldr	r3, [pc, #108]	@ (80146e8 <RegionUS915InitDefaults+0x24c>)
 801467a:	681b      	ldr	r3, [r3, #0]
 801467c:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8014680:	4b19      	ldr	r3, [pc, #100]	@ (80146e8 <RegionUS915InitDefaults+0x24c>)
 8014682:	681b      	ldr	r3, [r3, #0]
 8014684:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8014688:	2206      	movs	r2, #6
 801468a:	4619      	mov	r1, r3
 801468c:	f7fd fe2a 	bl	80122e4 <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
 8014690:	2300      	movs	r3, #0
 8014692:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8014696:	e01a      	b.n	80146ce <RegionUS915InitDefaults+0x232>
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8014698:	4b12      	ldr	r3, [pc, #72]	@ (80146e4 <RegionUS915InitDefaults+0x248>)
 801469a:	681b      	ldr	r3, [r3, #0]
 801469c:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80146a0:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80146a4:	4b10      	ldr	r3, [pc, #64]	@ (80146e8 <RegionUS915InitDefaults+0x24c>)
 80146a6:	681b      	ldr	r3, [r3, #0]
 80146a8:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80146ac:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 80146b0:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80146b4:	4b0b      	ldr	r3, [pc, #44]	@ (80146e4 <RegionUS915InitDefaults+0x248>)
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80146bc:	4001      	ands	r1, r0
 80146be:	b289      	uxth	r1, r1
 80146c0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < 6; i++ )
 80146c4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80146c8:	3301      	adds	r3, #1
 80146ca:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80146ce:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80146d2:	2b05      	cmp	r3, #5
 80146d4:	d9e0      	bls.n	8014698 <RegionUS915InitDefaults+0x1fc>
            }
            break;
 80146d6:	e002      	b.n	80146de <RegionUS915InitDefaults+0x242>
        }
        default:
        {
            break;
 80146d8:	bf00      	nop
 80146da:	e000      	b.n	80146de <RegionUS915InitDefaults+0x242>
                return;
 80146dc:	bf00      	nop
        }
    }
#endif /* REGION_US915 */
}
 80146de:	3728      	adds	r7, #40	@ 0x28
 80146e0:	46bd      	mov	sp, r7
 80146e2:	bd80      	pop	{r7, pc}
 80146e4:	20001228 	.word	0x20001228
 80146e8:	2000122c 	.word	0x2000122c
 80146ec:	20001230 	.word	0x20001230
 80146f0:	00030d40 	.word	0x00030d40
 80146f4:	35c80160 	.word	0x35c80160
 80146f8:	00186a00 	.word	0x00186a00
 80146fc:	35d2afc0 	.word	0x35d2afc0

08014700 <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8014700:	b580      	push	{r7, lr}
 8014702:	b082      	sub	sp, #8
 8014704:	af00      	add	r7, sp, #0
 8014706:	6078      	str	r0, [r7, #4]
 8014708:	460b      	mov	r3, r1
 801470a:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_US915 )
    switch( phyAttribute )
 801470c:	78fb      	ldrb	r3, [r7, #3]
 801470e:	2b0f      	cmp	r3, #15
 8014710:	d867      	bhi.n	80147e2 <RegionUS915Verify+0xe2>
 8014712:	a201      	add	r2, pc, #4	@ (adr r2, 8014718 <RegionUS915Verify+0x18>)
 8014714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014718:	08014759 	.word	0x08014759
 801471c:	080147e3 	.word	0x080147e3
 8014720:	080147e3 	.word	0x080147e3
 8014724:	080147e3 	.word	0x080147e3
 8014728:	080147e3 	.word	0x080147e3
 801472c:	08014767 	.word	0x08014767
 8014730:	08014785 	.word	0x08014785
 8014734:	080147a3 	.word	0x080147a3
 8014738:	080147e3 	.word	0x080147e3
 801473c:	080147c1 	.word	0x080147c1
 8014740:	080147c1 	.word	0x080147c1
 8014744:	080147e3 	.word	0x080147e3
 8014748:	080147e3 	.word	0x080147e3
 801474c:	080147e3 	.word	0x080147e3
 8014750:	080147e3 	.word	0x080147e3
 8014754:	080147df 	.word	0x080147df
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	681b      	ldr	r3, [r3, #0]
 801475c:	4618      	mov	r0, r3
 801475e:	f7ff fca1 	bl	80140a4 <VerifyRfFreq>
 8014762:	4603      	mov	r3, r0
 8014764:	e03e      	b.n	80147e4 <RegionUS915Verify+0xe4>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	f993 3000 	ldrsb.w	r3, [r3]
 801476c:	2204      	movs	r2, #4
 801476e:	2100      	movs	r1, #0
 8014770:	4618      	mov	r0, r3
 8014772:	f7fd fd3a 	bl	80121ea <RegionCommonValueInRange>
 8014776:	4603      	mov	r3, r0
 8014778:	2b00      	cmp	r3, #0
 801477a:	bf14      	ite	ne
 801477c:	2301      	movne	r3, #1
 801477e:	2300      	moveq	r3, #0
 8014780:	b2db      	uxtb	r3, r3
 8014782:	e02f      	b.n	80147e4 <RegionUS915Verify+0xe4>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	f993 3000 	ldrsb.w	r3, [r3]
 801478a:	2205      	movs	r2, #5
 801478c:	2100      	movs	r1, #0
 801478e:	4618      	mov	r0, r3
 8014790:	f7fd fd2b 	bl	80121ea <RegionCommonValueInRange>
 8014794:	4603      	mov	r3, r0
 8014796:	2b00      	cmp	r3, #0
 8014798:	bf14      	ite	ne
 801479a:	2301      	movne	r3, #1
 801479c:	2300      	moveq	r3, #0
 801479e:	b2db      	uxtb	r3, r3
 80147a0:	e020      	b.n	80147e4 <RegionUS915Verify+0xe4>
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	f993 3000 	ldrsb.w	r3, [r3]
 80147a8:	220d      	movs	r2, #13
 80147aa:	2108      	movs	r1, #8
 80147ac:	4618      	mov	r0, r3
 80147ae:	f7fd fd1c 	bl	80121ea <RegionCommonValueInRange>
 80147b2:	4603      	mov	r3, r0
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	bf14      	ite	ne
 80147b8:	2301      	movne	r3, #1
 80147ba:	2300      	moveq	r3, #0
 80147bc:	b2db      	uxtb	r3, r3
 80147be:	e011      	b.n	80147e4 <RegionUS915Verify+0xe4>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	f993 3000 	ldrsb.w	r3, [r3]
 80147c6:	220e      	movs	r2, #14
 80147c8:	2100      	movs	r1, #0
 80147ca:	4618      	mov	r0, r3
 80147cc:	f7fd fd0d 	bl	80121ea <RegionCommonValueInRange>
 80147d0:	4603      	mov	r3, r0
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	bf14      	ite	ne
 80147d6:	2301      	movne	r3, #1
 80147d8:	2300      	moveq	r3, #0
 80147da:	b2db      	uxtb	r3, r3
 80147dc:	e002      	b.n	80147e4 <RegionUS915Verify+0xe4>
        }
        case PHY_DUTY_CYCLE:
        {
            return US915_DUTY_CYCLE_ENABLED;
 80147de:	2300      	movs	r3, #0
 80147e0:	e000      	b.n	80147e4 <RegionUS915Verify+0xe4>
        }
        default:
            return false;
 80147e2:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_US915 */
}
 80147e4:	4618      	mov	r0, r3
 80147e6:	3708      	adds	r7, #8
 80147e8:	46bd      	mov	sp, r7
 80147ea:	bd80      	pop	{r7, pc}

080147ec <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 80147ec:	b480      	push	{r7}
 80147ee:	b085      	sub	sp, #20
 80147f0:	af00      	add	r7, sp, #0
 80147f2:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	7a1b      	ldrb	r3, [r3, #8]
 80147f8:	2b10      	cmp	r3, #16
 80147fa:	d15e      	bne.n	80148ba <RegionUS915ApplyCFList+0xce>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	685b      	ldr	r3, [r3, #4]
 8014800:	330f      	adds	r3, #15
 8014802:	781b      	ldrb	r3, [r3, #0]
 8014804:	2b01      	cmp	r3, #1
 8014806:	d15a      	bne.n	80148be <RegionUS915ApplyCFList+0xd2>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 8014808:	2300      	movs	r3, #0
 801480a:	73fb      	strb	r3, [r7, #15]
 801480c:	2300      	movs	r3, #0
 801480e:	73bb      	strb	r3, [r7, #14]
 8014810:	e04f      	b.n	80148b2 <RegionUS915ApplyCFList+0xc6>
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	685a      	ldr	r2, [r3, #4]
 8014816:	7bbb      	ldrb	r3, [r7, #14]
 8014818:	4413      	add	r3, r2
 801481a:	7819      	ldrb	r1, [r3, #0]
 801481c:	4b2a      	ldr	r3, [pc, #168]	@ (80148c8 <RegionUS915ApplyCFList+0xdc>)
 801481e:	681b      	ldr	r3, [r3, #0]
 8014820:	7bfa      	ldrb	r2, [r7, #15]
 8014822:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 8014826:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 801482a:	4b27      	ldr	r3, [pc, #156]	@ (80148c8 <RegionUS915ApplyCFList+0xdc>)
 801482c:	681b      	ldr	r3, [r3, #0]
 801482e:	7bfa      	ldrb	r2, [r7, #15]
 8014830:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 8014834:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	685a      	ldr	r2, [r3, #4]
 801483c:	7bbb      	ldrb	r3, [r7, #14]
 801483e:	3301      	adds	r3, #1
 8014840:	4413      	add	r3, r2
 8014842:	781b      	ldrb	r3, [r3, #0]
 8014844:	021b      	lsls	r3, r3, #8
 8014846:	b299      	uxth	r1, r3
 8014848:	4b1f      	ldr	r3, [pc, #124]	@ (80148c8 <RegionUS915ApplyCFList+0xdc>)
 801484a:	681b      	ldr	r3, [r3, #0]
 801484c:	7bfa      	ldrb	r2, [r7, #15]
 801484e:	4301      	orrs	r1, r0
 8014850:	b289      	uxth	r1, r1
 8014852:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 8014856:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        if( chMaskItr == 4 )
 801485a:	7bfb      	ldrb	r3, [r7, #15]
 801485c:	2b04      	cmp	r3, #4
 801485e:	d10f      	bne.n	8014880 <RegionUS915ApplyCFList+0x94>
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 8014860:	4b19      	ldr	r3, [pc, #100]	@ (80148c8 <RegionUS915ApplyCFList+0xdc>)
 8014862:	681b      	ldr	r3, [r3, #0]
 8014864:	7bfa      	ldrb	r2, [r7, #15]
 8014866:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 801486a:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801486e:	4b16      	ldr	r3, [pc, #88]	@ (80148c8 <RegionUS915ApplyCFList+0xdc>)
 8014870:	681b      	ldr	r3, [r3, #0]
 8014872:	7bfa      	ldrb	r2, [r7, #15]
 8014874:	b2c9      	uxtb	r1, r1
 8014876:	b289      	uxth	r1, r1
 8014878:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 801487c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 8014880:	4b12      	ldr	r3, [pc, #72]	@ (80148cc <RegionUS915ApplyCFList+0xe0>)
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	7bfa      	ldrb	r2, [r7, #15]
 8014886:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801488a:	4b0f      	ldr	r3, [pc, #60]	@ (80148c8 <RegionUS915ApplyCFList+0xdc>)
 801488c:	681b      	ldr	r3, [r3, #0]
 801488e:	7bfa      	ldrb	r2, [r7, #15]
 8014890:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 8014894:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8014898:	4b0c      	ldr	r3, [pc, #48]	@ (80148cc <RegionUS915ApplyCFList+0xe0>)
 801489a:	681b      	ldr	r3, [r3, #0]
 801489c:	7bfa      	ldrb	r2, [r7, #15]
 801489e:	4001      	ands	r1, r0
 80148a0:	b289      	uxth	r1, r1
 80148a2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 80148a6:	7bfb      	ldrb	r3, [r7, #15]
 80148a8:	3301      	adds	r3, #1
 80148aa:	73fb      	strb	r3, [r7, #15]
 80148ac:	7bbb      	ldrb	r3, [r7, #14]
 80148ae:	3302      	adds	r3, #2
 80148b0:	73bb      	strb	r3, [r7, #14]
 80148b2:	7bfb      	ldrb	r3, [r7, #15]
 80148b4:	2b04      	cmp	r3, #4
 80148b6:	d9ac      	bls.n	8014812 <RegionUS915ApplyCFList+0x26>
 80148b8:	e002      	b.n	80148c0 <RegionUS915ApplyCFList+0xd4>
        return;
 80148ba:	bf00      	nop
 80148bc:	e000      	b.n	80148c0 <RegionUS915ApplyCFList+0xd4>
        return;
 80148be:	bf00      	nop
    }
#endif /* REGION_US915 */
}
 80148c0:	3714      	adds	r7, #20
 80148c2:	46bd      	mov	sp, r7
 80148c4:	bc80      	pop	{r7}
 80148c6:	4770      	bx	lr
 80148c8:	2000122c 	.word	0x2000122c
 80148cc:	20001228 	.word	0x20001228

080148d0 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 80148d0:	b580      	push	{r7, lr}
 80148d2:	b084      	sub	sp, #16
 80148d4:	af00      	add	r7, sp, #0
 80148d6:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	681b      	ldr	r3, [r3, #0]
 80148dc:	2204      	movs	r2, #4
 80148de:	2100      	movs	r1, #0
 80148e0:	4618      	mov	r0, r3
 80148e2:	f7fd fcd3 	bl	801228c <RegionCommonCountChannels>
 80148e6:	4603      	mov	r3, r0
 80148e8:	73bb      	strb	r3, [r7, #14]

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 80148ea:	7bbb      	ldrb	r3, [r7, #14]
 80148ec:	2b01      	cmp	r3, #1
 80148ee:	d804      	bhi.n	80148fa <RegionUS915ChanMaskSet+0x2a>
 80148f0:	7bbb      	ldrb	r3, [r7, #14]
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	d001      	beq.n	80148fa <RegionUS915ChanMaskSet+0x2a>
        ( nbChannels > 0 ) )
    {
        return false;
 80148f6:	2300      	movs	r3, #0
 80148f8:	e04a      	b.n	8014990 <RegionUS915ChanMaskSet+0xc0>
    }

    switch( chanMaskSet->ChannelsMaskType )
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	791b      	ldrb	r3, [r3, #4]
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d002      	beq.n	8014908 <RegionUS915ChanMaskSet+0x38>
 8014902:	2b01      	cmp	r3, #1
 8014904:	d036      	beq.n	8014974 <RegionUS915ChanMaskSet+0xa4>
 8014906:	e040      	b.n	801498a <RegionUS915ChanMaskSet+0xba>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8014908:	4b23      	ldr	r3, [pc, #140]	@ (8014998 <RegionUS915ChanMaskSet+0xc8>)
 801490a:	681b      	ldr	r3, [r3, #0]
 801490c:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	681b      	ldr	r3, [r3, #0]
 8014914:	2206      	movs	r2, #6
 8014916:	4619      	mov	r1, r3
 8014918:	f7fd fce4 	bl	80122e4 <RegionCommonChanMaskCopy>

            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 801491c:	4b1e      	ldr	r3, [pc, #120]	@ (8014998 <RegionUS915ChanMaskSet+0xc8>)
 801491e:	681b      	ldr	r3, [r3, #0]
 8014920:	f8b3 2374 	ldrh.w	r2, [r3, #884]	@ 0x374
 8014924:	4b1c      	ldr	r3, [pc, #112]	@ (8014998 <RegionUS915ChanMaskSet+0xc8>)
 8014926:	681b      	ldr	r3, [r3, #0]
 8014928:	b2d2      	uxtb	r2, r2
 801492a:	b292      	uxth	r2, r2
 801492c:	f8a3 2374 	strh.w	r2, [r3, #884]	@ 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8014930:	4b19      	ldr	r3, [pc, #100]	@ (8014998 <RegionUS915ChanMaskSet+0xc8>)
 8014932:	681b      	ldr	r3, [r3, #0]
 8014934:	2200      	movs	r2, #0
 8014936:	f8a3 2376 	strh.w	r2, [r3, #886]	@ 0x376

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 801493a:	2300      	movs	r3, #0
 801493c:	73fb      	strb	r3, [r7, #15]
 801493e:	e015      	b.n	801496c <RegionUS915ChanMaskSet+0x9c>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8014940:	4b16      	ldr	r3, [pc, #88]	@ (801499c <RegionUS915ChanMaskSet+0xcc>)
 8014942:	681b      	ldr	r3, [r3, #0]
 8014944:	7bfa      	ldrb	r2, [r7, #15]
 8014946:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 801494a:	4b13      	ldr	r3, [pc, #76]	@ (8014998 <RegionUS915ChanMaskSet+0xc8>)
 801494c:	681b      	ldr	r3, [r3, #0]
 801494e:	7bfa      	ldrb	r2, [r7, #15]
 8014950:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 8014954:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 8014958:	4b10      	ldr	r3, [pc, #64]	@ (801499c <RegionUS915ChanMaskSet+0xcc>)
 801495a:	681b      	ldr	r3, [r3, #0]
 801495c:	7bfa      	ldrb	r2, [r7, #15]
 801495e:	4001      	ands	r1, r0
 8014960:	b289      	uxth	r1, r1
 8014962:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8014966:	7bfb      	ldrb	r3, [r7, #15]
 8014968:	3301      	adds	r3, #1
 801496a:	73fb      	strb	r3, [r7, #15]
 801496c:	7bfb      	ldrb	r3, [r7, #15]
 801496e:	2b05      	cmp	r3, #5
 8014970:	d9e6      	bls.n	8014940 <RegionUS915ChanMaskSet+0x70>
            }
            break;
 8014972:	e00c      	b.n	801498e <RegionUS915ChanMaskSet+0xbe>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8014974:	4b08      	ldr	r3, [pc, #32]	@ (8014998 <RegionUS915ChanMaskSet+0xc8>)
 8014976:	681b      	ldr	r3, [r3, #0]
 8014978:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	681b      	ldr	r3, [r3, #0]
 8014980:	2206      	movs	r2, #6
 8014982:	4619      	mov	r1, r3
 8014984:	f7fd fcae 	bl	80122e4 <RegionCommonChanMaskCopy>
            break;
 8014988:	e001      	b.n	801498e <RegionUS915ChanMaskSet+0xbe>
        }
        default:
            return false;
 801498a:	2300      	movs	r3, #0
 801498c:	e000      	b.n	8014990 <RegionUS915ChanMaskSet+0xc0>
    }
    return true;
 801498e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8014990:	4618      	mov	r0, r3
 8014992:	3710      	adds	r7, #16
 8014994:	46bd      	mov	sp, r7
 8014996:	bd80      	pop	{r7, pc}
 8014998:	2000122c 	.word	0x2000122c
 801499c:	20001228 	.word	0x20001228

080149a0 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80149a0:	b580      	push	{r7, lr}
 80149a2:	b088      	sub	sp, #32
 80149a4:	af02      	add	r7, sp, #8
 80149a6:	60ba      	str	r2, [r7, #8]
 80149a8:	607b      	str	r3, [r7, #4]
 80149aa:	4603      	mov	r3, r0
 80149ac:	73fb      	strb	r3, [r7, #15]
 80149ae:	460b      	mov	r3, r1
 80149b0:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;
 80149b2:	2300      	movs	r3, #0
 80149b4:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 80149b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80149ba:	2b0d      	cmp	r3, #13
 80149bc:	bfa8      	it	ge
 80149be:	230d      	movge	r3, #13
 80149c0:	b25a      	sxtb	r2, r3
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80149cc:	4916      	ldr	r1, [pc, #88]	@ (8014a28 <RegionUS915ComputeRxWindowParameters+0x88>)
 80149ce:	4618      	mov	r0, r3
 80149d0:	f7fe f928 	bl	8012c24 <RegionCommonGetBandwidth>
 80149d4:	4603      	mov	r3, r0
 80149d6:	b2da      	uxtb	r2, r3
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	709a      	strb	r2, [r3, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80149e2:	461a      	mov	r2, r3
 80149e4:	4b11      	ldr	r3, [pc, #68]	@ (8014a2c <RegionUS915ComputeRxWindowParameters+0x8c>)
 80149e6:	5c9a      	ldrb	r2, [r3, r2]
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80149ee:	4619      	mov	r1, r3
 80149f0:	4b0d      	ldr	r3, [pc, #52]	@ (8014a28 <RegionUS915ComputeRxWindowParameters+0x88>)
 80149f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80149f6:	4619      	mov	r1, r3
 80149f8:	4610      	mov	r0, r2
 80149fa:	f7fd fe91 	bl	8012720 <RegionCommonComputeSymbolTimeLoRa>
 80149fe:	6178      	str	r0, [r7, #20]

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8014a00:	4b0b      	ldr	r3, [pc, #44]	@ (8014a30 <RegionUS915ComputeRxWindowParameters+0x90>)
 8014a02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014a04:	4798      	blx	r3
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	3308      	adds	r3, #8
 8014a0a:	687a      	ldr	r2, [r7, #4]
 8014a0c:	320c      	adds	r2, #12
 8014a0e:	7bb9      	ldrb	r1, [r7, #14]
 8014a10:	9201      	str	r2, [sp, #4]
 8014a12:	9300      	str	r3, [sp, #0]
 8014a14:	4603      	mov	r3, r0
 8014a16:	68ba      	ldr	r2, [r7, #8]
 8014a18:	6978      	ldr	r0, [r7, #20]
 8014a1a:	f7fd fea7 	bl	801276c <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 8014a1e:	bf00      	nop
 8014a20:	3718      	adds	r7, #24
 8014a22:	46bd      	mov	sp, r7
 8014a24:	bd80      	pop	{r7, pc}
 8014a26:	bf00      	nop
 8014a28:	08021074 	.word	0x08021074
 8014a2c:	08021064 	.word	0x08021064
 8014a30:	0802146c 	.word	0x0802146c

08014a34 <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8014a34:	b590      	push	{r4, r7, lr}
 8014a36:	b091      	sub	sp, #68	@ 0x44
 8014a38:	af0a      	add	r7, sp, #40	@ 0x28
 8014a3a:	6078      	str	r0, [r7, #4]
 8014a3c:	6039      	str	r1, [r7, #0]
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	785b      	ldrb	r3, [r3, #1]
 8014a42:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8014a44:	2300      	movs	r3, #0
 8014a46:	75fb      	strb	r3, [r7, #23]
    int8_t phyDr = 0;
 8014a48:	2300      	movs	r3, #0
 8014a4a:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	685b      	ldr	r3, [r3, #4]
 8014a50:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8014a52:	4b34      	ldr	r3, [pc, #208]	@ (8014b24 <RegionUS915RxConfig+0xf0>)
 8014a54:	685b      	ldr	r3, [r3, #4]
 8014a56:	4798      	blx	r3
 8014a58:	4603      	mov	r3, r0
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d001      	beq.n	8014a62 <RegionUS915RxConfig+0x2e>
    {
        return false;
 8014a5e:	2300      	movs	r3, #0
 8014a60:	e05c      	b.n	8014b1c <RegionUS915RxConfig+0xe8>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	7cdb      	ldrb	r3, [r3, #19]
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	d109      	bne.n	8014a7e <RegionUS915RxConfig+0x4a>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	781b      	ldrb	r3, [r3, #0]
 8014a6e:	f003 0307 	and.w	r3, r3, #7
 8014a72:	4a2d      	ldr	r2, [pc, #180]	@ (8014b28 <RegionUS915RxConfig+0xf4>)
 8014a74:	fb03 f202 	mul.w	r2, r3, r2
 8014a78:	4b2c      	ldr	r3, [pc, #176]	@ (8014b2c <RegionUS915RxConfig+0xf8>)
 8014a7a:	4413      	add	r3, r2
 8014a7c:	613b      	str	r3, [r7, #16]
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 8014a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014a82:	4a2b      	ldr	r2, [pc, #172]	@ (8014b30 <RegionUS915RxConfig+0xfc>)
 8014a84:	5cd3      	ldrb	r3, [r2, r3]
 8014a86:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8014a88:	4b26      	ldr	r3, [pc, #152]	@ (8014b24 <RegionUS915RxConfig+0xf0>)
 8014a8a:	68db      	ldr	r3, [r3, #12]
 8014a8c:	6938      	ldr	r0, [r7, #16]
 8014a8e:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8014a90:	4b24      	ldr	r3, [pc, #144]	@ (8014b24 <RegionUS915RxConfig+0xf0>)
 8014a92:	699c      	ldr	r4, [r3, #24]
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	789b      	ldrb	r3, [r3, #2]
 8014a98:	4618      	mov	r0, r3
 8014a9a:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	689b      	ldr	r3, [r3, #8]
 8014aa2:	b29b      	uxth	r3, r3
 8014aa4:	687a      	ldr	r2, [r7, #4]
 8014aa6:	7c92      	ldrb	r2, [r2, #18]
 8014aa8:	9209      	str	r2, [sp, #36]	@ 0x24
 8014aaa:	2201      	movs	r2, #1
 8014aac:	9208      	str	r2, [sp, #32]
 8014aae:	2200      	movs	r2, #0
 8014ab0:	9207      	str	r2, [sp, #28]
 8014ab2:	2200      	movs	r2, #0
 8014ab4:	9206      	str	r2, [sp, #24]
 8014ab6:	2200      	movs	r2, #0
 8014ab8:	9205      	str	r2, [sp, #20]
 8014aba:	2200      	movs	r2, #0
 8014abc:	9204      	str	r2, [sp, #16]
 8014abe:	2200      	movs	r2, #0
 8014ac0:	9203      	str	r2, [sp, #12]
 8014ac2:	9302      	str	r3, [sp, #8]
 8014ac4:	2308      	movs	r3, #8
 8014ac6:	9301      	str	r3, [sp, #4]
 8014ac8:	2300      	movs	r3, #0
 8014aca:	9300      	str	r3, [sp, #0]
 8014acc:	2301      	movs	r3, #1
 8014ace:	460a      	mov	r2, r1
 8014ad0:	4601      	mov	r1, r0
 8014ad2:	2001      	movs	r0, #1
 8014ad4:	47a0      	blx	r4

    if( rxConfig->RepeaterSupport == true )
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	7c5b      	ldrb	r3, [r3, #17]
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	d005      	beq.n	8014aea <RegionUS915RxConfig+0xb6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 8014ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014ae2:	4a14      	ldr	r2, [pc, #80]	@ (8014b34 <RegionUS915RxConfig+0x100>)
 8014ae4:	5cd3      	ldrb	r3, [r2, r3]
 8014ae6:	75fb      	strb	r3, [r7, #23]
 8014ae8:	e004      	b.n	8014af4 <RegionUS915RxConfig+0xc0>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 8014aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014aee:	4a12      	ldr	r2, [pc, #72]	@ (8014b38 <RegionUS915RxConfig+0x104>)
 8014af0:	5cd3      	ldrb	r3, [r2, r3]
 8014af2:	75fb      	strb	r3, [r7, #23]
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8014af4:	4b0b      	ldr	r3, [pc, #44]	@ (8014b24 <RegionUS915RxConfig+0xf0>)
 8014af6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014af8:	7dfa      	ldrb	r2, [r7, #23]
 8014afa:	320d      	adds	r2, #13
 8014afc:	b2d2      	uxtb	r2, r2
 8014afe:	4611      	mov	r1, r2
 8014b00:	2001      	movs	r0, #1
 8014b02:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	7cdb      	ldrb	r3, [r3, #19]
 8014b08:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8014b0c:	6939      	ldr	r1, [r7, #16]
 8014b0e:	4618      	mov	r0, r3
 8014b10:	f7fe f8a6 	bl	8012c60 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 8014b14:	683b      	ldr	r3, [r7, #0]
 8014b16:	7bfa      	ldrb	r2, [r7, #15]
 8014b18:	701a      	strb	r2, [r3, #0]
    return true;
 8014b1a:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8014b1c:	4618      	mov	r0, r3
 8014b1e:	371c      	adds	r7, #28
 8014b20:	46bd      	mov	sp, r7
 8014b22:	bd90      	pop	{r4, r7, pc}
 8014b24:	0802146c 	.word	0x0802146c
 8014b28:	000927c0 	.word	0x000927c0
 8014b2c:	370870a0 	.word	0x370870a0
 8014b30:	08021064 	.word	0x08021064
 8014b34:	080210d8 	.word	0x080210d8
 8014b38:	080210c8 	.word	0x080210c8

08014b3c <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8014b3c:	b590      	push	{r4, r7, lr}
 8014b3e:	b093      	sub	sp, #76	@ 0x4c
 8014b40:	af0a      	add	r7, sp, #40	@ 0x28
 8014b42:	60f8      	str	r0, [r7, #12]
 8014b44:	60b9      	str	r1, [r7, #8]
 8014b46:	607a      	str	r2, [r7, #4]
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 8014b48:	68fb      	ldr	r3, [r7, #12]
 8014b4a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014b4e:	461a      	mov	r2, r3
 8014b50:	4b49      	ldr	r3, [pc, #292]	@ (8014c78 <RegionUS915TxConfig+0x13c>)
 8014b52:	5c9b      	ldrb	r3, [r3, r2]
 8014b54:	77fb      	strb	r3, [r7, #31]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 8014b56:	68fb      	ldr	r3, [r7, #12]
 8014b58:	f993 0002 	ldrsb.w	r0, [r3, #2]
 8014b5c:	4b47      	ldr	r3, [pc, #284]	@ (8014c7c <RegionUS915TxConfig+0x140>)
 8014b5e:	681a      	ldr	r2, [r3, #0]
 8014b60:	4b47      	ldr	r3, [pc, #284]	@ (8014c80 <RegionUS915TxConfig+0x144>)
 8014b62:	6819      	ldr	r1, [r3, #0]
 8014b64:	68fb      	ldr	r3, [r7, #12]
 8014b66:	781b      	ldrb	r3, [r3, #0]
 8014b68:	461c      	mov	r4, r3
 8014b6a:	4623      	mov	r3, r4
 8014b6c:	005b      	lsls	r3, r3, #1
 8014b6e:	4423      	add	r3, r4
 8014b70:	009b      	lsls	r3, r3, #2
 8014b72:	440b      	add	r3, r1
 8014b74:	3309      	adds	r3, #9
 8014b76:	781b      	ldrb	r3, [r3, #0]
 8014b78:	4619      	mov	r1, r3
 8014b7a:	460b      	mov	r3, r1
 8014b7c:	005b      	lsls	r3, r3, #1
 8014b7e:	440b      	add	r3, r1
 8014b80:	00db      	lsls	r3, r3, #3
 8014b82:	4413      	add	r3, r2
 8014b84:	f993 1002 	ldrsb.w	r1, [r3, #2]
 8014b88:	68fb      	ldr	r3, [r7, #12]
 8014b8a:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8014b8e:	4b3c      	ldr	r3, [pc, #240]	@ (8014c80 <RegionUS915TxConfig+0x144>)
 8014b90:	681b      	ldr	r3, [r3, #0]
 8014b92:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8014b96:	f7ff fa4f 	bl	8014038 <LimitTxPower>
 8014b9a:	4603      	mov	r3, r0
 8014b9c:	77bb      	strb	r3, [r7, #30]
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 8014b9e:	68fb      	ldr	r3, [r7, #12]
 8014ba0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014ba4:	4937      	ldr	r1, [pc, #220]	@ (8014c84 <RegionUS915TxConfig+0x148>)
 8014ba6:	4618      	mov	r0, r3
 8014ba8:	f7fe f83c 	bl	8012c24 <RegionCommonGetBandwidth>
 8014bac:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8014bae:	2300      	movs	r3, #0
 8014bb0:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 8014bb2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8014bb6:	f04f 0200 	mov.w	r2, #0
 8014bba:	4933      	ldr	r1, [pc, #204]	@ (8014c88 <RegionUS915TxConfig+0x14c>)
 8014bbc:	4618      	mov	r0, r3
 8014bbe:	f7fd fe8d 	bl	80128dc <RegionCommonComputeTxPower>
 8014bc2:	4603      	mov	r3, r0
 8014bc4:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8014bc6:	4b31      	ldr	r3, [pc, #196]	@ (8014c8c <RegionUS915TxConfig+0x150>)
 8014bc8:	68da      	ldr	r2, [r3, #12]
 8014bca:	4b2d      	ldr	r3, [pc, #180]	@ (8014c80 <RegionUS915TxConfig+0x144>)
 8014bcc:	6819      	ldr	r1, [r3, #0]
 8014bce:	68fb      	ldr	r3, [r7, #12]
 8014bd0:	781b      	ldrb	r3, [r3, #0]
 8014bd2:	4618      	mov	r0, r3
 8014bd4:	4603      	mov	r3, r0
 8014bd6:	005b      	lsls	r3, r3, #1
 8014bd8:	4403      	add	r3, r0
 8014bda:	009b      	lsls	r3, r3, #2
 8014bdc:	440b      	add	r3, r1
 8014bde:	681b      	ldr	r3, [r3, #0]
 8014be0:	4618      	mov	r0, r3
 8014be2:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8014be4:	4b29      	ldr	r3, [pc, #164]	@ (8014c8c <RegionUS915TxConfig+0x150>)
 8014be6:	69dc      	ldr	r4, [r3, #28]
 8014be8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014bec:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8014bf0:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8014bf4:	9208      	str	r2, [sp, #32]
 8014bf6:	2200      	movs	r2, #0
 8014bf8:	9207      	str	r2, [sp, #28]
 8014bfa:	2200      	movs	r2, #0
 8014bfc:	9206      	str	r2, [sp, #24]
 8014bfe:	2200      	movs	r2, #0
 8014c00:	9205      	str	r2, [sp, #20]
 8014c02:	2201      	movs	r2, #1
 8014c04:	9204      	str	r2, [sp, #16]
 8014c06:	2200      	movs	r2, #0
 8014c08:	9203      	str	r2, [sp, #12]
 8014c0a:	2208      	movs	r2, #8
 8014c0c:	9202      	str	r2, [sp, #8]
 8014c0e:	2201      	movs	r2, #1
 8014c10:	9201      	str	r2, [sp, #4]
 8014c12:	9300      	str	r3, [sp, #0]
 8014c14:	69bb      	ldr	r3, [r7, #24]
 8014c16:	2200      	movs	r2, #0
 8014c18:	2001      	movs	r0, #1
 8014c1a:	47a0      	blx	r4
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8014c1c:	4b18      	ldr	r3, [pc, #96]	@ (8014c80 <RegionUS915TxConfig+0x144>)
 8014c1e:	681a      	ldr	r2, [r3, #0]
 8014c20:	68fb      	ldr	r3, [r7, #12]
 8014c22:	781b      	ldrb	r3, [r3, #0]
 8014c24:	4619      	mov	r1, r3
 8014c26:	460b      	mov	r3, r1
 8014c28:	005b      	lsls	r3, r3, #1
 8014c2a:	440b      	add	r3, r1
 8014c2c:	009b      	lsls	r3, r3, #2
 8014c2e:	4413      	add	r3, r2
 8014c30:	681a      	ldr	r2, [r3, #0]
 8014c32:	68fb      	ldr	r3, [r7, #12]
 8014c34:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014c38:	4619      	mov	r1, r3
 8014c3a:	4610      	mov	r0, r2
 8014c3c:	f7fe f842 	bl	8012cc4 <RegionCommonTxConfigPrint>

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 8014c40:	4b12      	ldr	r3, [pc, #72]	@ (8014c8c <RegionUS915TxConfig+0x150>)
 8014c42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014c44:	68fa      	ldr	r2, [r7, #12]
 8014c46:	8992      	ldrh	r2, [r2, #12]
 8014c48:	b2d2      	uxtb	r2, r2
 8014c4a:	4611      	mov	r1, r2
 8014c4c:	2001      	movs	r0, #1
 8014c4e:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8014c50:	68fb      	ldr	r3, [r7, #12]
 8014c52:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8014c56:	68fb      	ldr	r3, [r7, #12]
 8014c58:	899b      	ldrh	r3, [r3, #12]
 8014c5a:	4619      	mov	r1, r3
 8014c5c:	4610      	mov	r0, r2
 8014c5e:	f7ff fa65 	bl	801412c <GetTimeOnAir>
 8014c62:	4602      	mov	r2, r0
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 8014c68:	68bb      	ldr	r3, [r7, #8]
 8014c6a:	7fba      	ldrb	r2, [r7, #30]
 8014c6c:	701a      	strb	r2, [r3, #0]
    return true;
 8014c6e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8014c70:	4618      	mov	r0, r3
 8014c72:	3724      	adds	r7, #36	@ 0x24
 8014c74:	46bd      	mov	sp, r7
 8014c76:	bd90      	pop	{r4, r7, pc}
 8014c78:	08021064 	.word	0x08021064
 8014c7c:	20001230 	.word	0x20001230
 8014c80:	2000122c 	.word	0x2000122c
 8014c84:	08021074 	.word	0x08021074
 8014c88:	41f00000 	.word	0x41f00000
 8014c8c:	0802146c 	.word	0x0802146c

08014c90 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8014c90:	b590      	push	{r4, r7, lr}
 8014c92:	b097      	sub	sp, #92	@ 0x5c
 8014c94:	af00      	add	r7, sp, #0
 8014c96:	60f8      	str	r0, [r7, #12]
 8014c98:	60b9      	str	r1, [r7, #8]
 8014c9a:	607a      	str	r2, [r7, #4]
 8014c9c:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 8014c9e:	2307      	movs	r3, #7
 8014ca0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8014ca4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8014ca8:	2200      	movs	r2, #0
 8014caa:	601a      	str	r2, [r3, #0]
 8014cac:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8014cae:	2300      	movs	r3, #0
 8014cb0:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    uint8_t bytesProcessed = 0;
 8014cb4:	2300      	movs	r3, #0
 8014cb6:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 8014cba:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8014cbe:	2200      	movs	r2, #0
 8014cc0:	601a      	str	r2, [r3, #0]
 8014cc2:	605a      	str	r2, [r3, #4]
 8014cc4:	609a      	str	r2, [r3, #8]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 8014cc6:	4b97      	ldr	r3, [pc, #604]	@ (8014f24 <RegionUS915LinkAdrReq+0x294>)
 8014cc8:	681b      	ldr	r3, [r3, #0]
 8014cca:	f503 7158 	add.w	r1, r3, #864	@ 0x360
 8014cce:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8014cd2:	2206      	movs	r2, #6
 8014cd4:	4618      	mov	r0, r3
 8014cd6:	f7fd fb05 	bl	80122e4 <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8014cda:	e11b      	b.n	8014f14 <RegionUS915LinkAdrReq+0x284>
    {
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8014cdc:	68fb      	ldr	r3, [r7, #12]
 8014cde:	685a      	ldr	r2, [r3, #4]
 8014ce0:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8014ce4:	4413      	add	r3, r2
 8014ce6:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8014cea:	4611      	mov	r1, r2
 8014cec:	4618      	mov	r0, r3
 8014cee:	f7fd fc3d 	bl	801256c <RegionCommonParseLinkAdrReq>
 8014cf2:	4603      	mov	r3, r0
 8014cf4:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

        if( nextIndex == 0 )
 8014cf8:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	f000 8113 	beq.w	8014f28 <RegionUS915LinkAdrReq+0x298>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8014d02:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 8014d06:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8014d0a:	4413      	add	r3, r2
 8014d0c:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8014d10:	2307      	movs	r3, #7
 8014d12:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

        if( linkAdrParams.ChMaskCtrl == 6 )
 8014d16:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014d1a:	2b06      	cmp	r3, #6
 8014d1c:	d116      	bne.n	8014d4c <RegionUS915LinkAdrReq+0xbc>
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 8014d1e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014d22:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
            channelsMask[1] = 0xFFFF;
 8014d26:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014d2a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
            channelsMask[2] = 0xFFFF;
 8014d2e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014d32:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            channelsMask[3] = 0xFFFF;
 8014d36:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014d3a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8014d3e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8014d42:	b2db      	uxtb	r3, r3
 8014d44:	b29b      	uxth	r3, r3
 8014d46:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8014d4a:	e0e3      	b.n	8014f14 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 8014d4c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014d50:	2b07      	cmp	r3, #7
 8014d52:	d112      	bne.n	8014d7a <RegionUS915LinkAdrReq+0xea>
        {
            // Disable all 125 kHz channels
            channelsMask[0] = 0x0000;
 8014d54:	2300      	movs	r3, #0
 8014d56:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
            channelsMask[1] = 0x0000;
 8014d5a:	2300      	movs	r3, #0
 8014d5c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
            channelsMask[2] = 0x0000;
 8014d60:	2300      	movs	r3, #0
 8014d62:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            channelsMask[3] = 0x0000;
 8014d66:	2300      	movs	r3, #0
 8014d68:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8014d6c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8014d70:	b2db      	uxtb	r3, r3
 8014d72:	b29b      	uxth	r3, r3
 8014d74:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8014d78:	e0cc      	b.n	8014f14 <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 8014d7a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014d7e:	2b05      	cmp	r3, #5
 8014d80:	f040 80bf 	bne.w	8014f02 <RegionUS915LinkAdrReq+0x272>
        {
            // Start value for comparison
            uint8_t bitMask = 1;
 8014d84:	2301      	movs	r3, #1
 8014d86:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52

            // cntChannelMask for channelsMask[0] until channelsMask[3]
            uint8_t cntChannelMask = 0;
 8014d8a:	2300      	movs	r3, #0
 8014d8c:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55

            // i will be 1, 2, 3, ..., 7
            for( uint8_t i = 0; i <= 7; i++ )
 8014d90:	2300      	movs	r3, #0
 8014d92:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 8014d96:	e0ae      	b.n	8014ef6 <RegionUS915LinkAdrReq+0x266>
            {
                // 8 MSBs of ChMask are RFU
                // Checking if the ChMask is set, then true
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 8014d98:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8014d9c:	b2da      	uxtb	r2, r3
 8014d9e:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 8014da2:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8014da6:	fa01 f303 	lsl.w	r3, r1, r3
 8014daa:	4013      	ands	r3, r2
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	d04d      	beq.n	8014e4c <RegionUS915LinkAdrReq+0x1bc>
                {
                    if( ( i % 2 ) == 0 )
 8014db0:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8014db4:	f003 0301 	and.w	r3, r3, #1
 8014db8:	b2db      	uxtb	r3, r3
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d120      	bne.n	8014e00 <RegionUS915LinkAdrReq+0x170>
                    {
                        // Enable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] |= 0x00FF;
 8014dbe:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8014dc2:	005b      	lsls	r3, r3, #1
 8014dc4:	3358      	adds	r3, #88	@ 0x58
 8014dc6:	443b      	add	r3, r7
 8014dc8:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8014dcc:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8014dd0:	f042 02ff 	orr.w	r2, r2, #255	@ 0xff
 8014dd4:	b292      	uxth	r2, r2
 8014dd6:	005b      	lsls	r3, r3, #1
 8014dd8:	3358      	adds	r3, #88	@ 0x58
 8014dda:	443b      	add	r3, r7
 8014ddc:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 8014de0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8014de4:	b21a      	sxth	r2, r3
 8014de6:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 8014dea:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8014dee:	fa01 f303 	lsl.w	r3, r1, r3
 8014df2:	b21b      	sxth	r3, r3
 8014df4:	4313      	orrs	r3, r2
 8014df6:	b21b      	sxth	r3, r3
 8014df8:	b29b      	uxth	r3, r3
 8014dfa:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8014dfe:	e075      	b.n	8014eec <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] |= 0xFF00;
 8014e00:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8014e04:	005b      	lsls	r3, r3, #1
 8014e06:	3358      	adds	r3, #88	@ 0x58
 8014e08:	443b      	add	r3, r7
 8014e0a:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8014e0e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8014e12:	f062 02ff 	orn	r2, r2, #255	@ 0xff
 8014e16:	b292      	uxth	r2, r2
 8014e18:	005b      	lsls	r3, r3, #1
 8014e1a:	3358      	adds	r3, #88	@ 0x58
 8014e1c:	443b      	add	r3, r7
 8014e1e:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 8014e22:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8014e26:	b21a      	sxth	r2, r3
 8014e28:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 8014e2c:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8014e30:	fa01 f303 	lsl.w	r3, r1, r3
 8014e34:	b21b      	sxth	r3, r3
 8014e36:	4313      	orrs	r3, r2
 8014e38:	b21b      	sxth	r3, r3
 8014e3a:	b29b      	uxth	r3, r3
 8014e3c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 8014e40:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8014e44:	3301      	adds	r3, #1
 8014e46:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 8014e4a:	e04f      	b.n	8014eec <RegionUS915LinkAdrReq+0x25c>
                    }
                }
                // ChMask is not set
                else
                {
                    if( ( i % 2 ) == 0 )
 8014e4c:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8014e50:	f003 0301 	and.w	r3, r3, #1
 8014e54:	b2db      	uxtb	r3, r3
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	d122      	bne.n	8014ea0 <RegionUS915LinkAdrReq+0x210>
                    {
                        // Disable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] &= 0xFF00;
 8014e5a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8014e5e:	005b      	lsls	r3, r3, #1
 8014e60:	3358      	adds	r3, #88	@ 0x58
 8014e62:	443b      	add	r3, r7
 8014e64:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8014e68:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8014e6c:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8014e70:	b292      	uxth	r2, r2
 8014e72:	005b      	lsls	r3, r3, #1
 8014e74:	3358      	adds	r3, #88	@ 0x58
 8014e76:	443b      	add	r3, r7
 8014e78:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 8014e7c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8014e80:	b21a      	sxth	r2, r3
 8014e82:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 8014e86:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8014e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8014e8e:	b21b      	sxth	r3, r3
 8014e90:	43db      	mvns	r3, r3
 8014e92:	b21b      	sxth	r3, r3
 8014e94:	4013      	ands	r3, r2
 8014e96:	b21b      	sxth	r3, r3
 8014e98:	b29b      	uxth	r3, r3
 8014e9a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8014e9e:	e025      	b.n	8014eec <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] &= 0x00FF;
 8014ea0:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8014ea4:	005b      	lsls	r3, r3, #1
 8014ea6:	3358      	adds	r3, #88	@ 0x58
 8014ea8:	443b      	add	r3, r7
 8014eaa:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8014eae:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8014eb2:	b2d2      	uxtb	r2, r2
 8014eb4:	b292      	uxth	r2, r2
 8014eb6:	005b      	lsls	r3, r3, #1
 8014eb8:	3358      	adds	r3, #88	@ 0x58
 8014eba:	443b      	add	r3, r7
 8014ebc:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 8014ec0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8014ec4:	b21a      	sxth	r2, r3
 8014ec6:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 8014eca:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8014ece:	fa01 f303 	lsl.w	r3, r1, r3
 8014ed2:	b21b      	sxth	r3, r3
 8014ed4:	43db      	mvns	r3, r3
 8014ed6:	b21b      	sxth	r3, r3
 8014ed8:	4013      	ands	r3, r2
 8014eda:	b21b      	sxth	r3, r3
 8014edc:	b29b      	uxth	r3, r3
 8014ede:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 8014ee2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8014ee6:	3301      	adds	r3, #1
 8014ee8:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
            for( uint8_t i = 0; i <= 7; i++ )
 8014eec:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8014ef0:	3301      	adds	r3, #1
 8014ef2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 8014ef6:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8014efa:	2b07      	cmp	r3, #7
 8014efc:	f67f af4c 	bls.w	8014d98 <RegionUS915LinkAdrReq+0x108>
 8014f00:	e008      	b.n	8014f14 <RegionUS915LinkAdrReq+0x284>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 8014f02:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014f06:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8014f0a:	005b      	lsls	r3, r3, #1
 8014f0c:	3358      	adds	r3, #88	@ 0x58
 8014f0e:	443b      	add	r3, r7
 8014f10:	f823 2c18 	strh.w	r2, [r3, #-24]
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8014f14:	68fb      	ldr	r3, [r7, #12]
 8014f16:	7a1b      	ldrb	r3, [r3, #8]
 8014f18:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 8014f1c:	429a      	cmp	r2, r3
 8014f1e:	f4ff aedd 	bcc.w	8014cdc <RegionUS915LinkAdrReq+0x4c>
 8014f22:	e002      	b.n	8014f2a <RegionUS915LinkAdrReq+0x29a>
 8014f24:	2000122c 	.word	0x2000122c
            break; // break loop, since no more request has been found
 8014f28:	bf00      	nop
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 8014f2a:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 8014f2e:	2b03      	cmp	r3, #3
 8014f30:	dc0f      	bgt.n	8014f52 <RegionUS915LinkAdrReq+0x2c2>
 8014f32:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8014f36:	2204      	movs	r2, #4
 8014f38:	2100      	movs	r1, #0
 8014f3a:	4618      	mov	r0, r3
 8014f3c:	f7fd f9a6 	bl	801228c <RegionCommonCountChannels>
 8014f40:	4603      	mov	r3, r0
 8014f42:	2b01      	cmp	r3, #1
 8014f44:	d805      	bhi.n	8014f52 <RegionUS915LinkAdrReq+0x2c2>
    {
        status &= 0xFE; // Channel mask KO
 8014f46:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014f4a:	f023 0301 	bic.w	r3, r3, #1
 8014f4e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8014f52:	2302      	movs	r3, #2
 8014f54:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8014f58:	68fb      	ldr	r3, [r7, #12]
 8014f5a:	7a5b      	ldrb	r3, [r3, #9]
 8014f5c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
    phyParam = RegionUS915GetPhyParam( &getPhy );
 8014f60:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8014f64:	4618      	mov	r0, r3
 8014f66:	f7ff f911 	bl	801418c <RegionUS915GetPhyParam>
 8014f6a:	4603      	mov	r3, r0
 8014f6c:	637b      	str	r3, [r7, #52]	@ 0x34

    linkAdrVerifyParams.Status = status;
 8014f6e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014f72:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8014f74:	68fb      	ldr	r3, [r7, #12]
 8014f76:	7a9b      	ldrb	r3, [r3, #10]
 8014f78:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8014f7a:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 8014f7e:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8014f80:	f997 304e 	ldrsb.w	r3, [r7, #78]	@ 0x4e
 8014f84:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8014f86:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8014f8a:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8014f92:	777b      	strb	r3, [r7, #29]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8014f9a:	77bb      	strb	r3, [r7, #30]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8014f9c:	68fb      	ldr	r3, [r7, #12]
 8014f9e:	7b5b      	ldrb	r3, [r3, #13]
 8014fa0:	b25b      	sxtb	r3, r3
 8014fa2:	77fb      	strb	r3, [r7, #31]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 8014fa4:	2348      	movs	r3, #72	@ 0x48
 8014fa6:	f887 3020 	strb.w	r3, [r7, #32]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 8014faa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8014fae:	627b      	str	r3, [r7, #36]	@ 0x24
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8014fb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014fb2:	b25b      	sxtb	r3, r3
 8014fb4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 8014fb8:	2304      	movs	r3, #4
 8014fba:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8014fbe:	4b3f      	ldr	r3, [pc, #252]	@ (80150bc <RegionUS915LinkAdrReq+0x42c>)
 8014fc0:	681b      	ldr	r3, [r3, #0]
 8014fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 8014fc4:	230e      	movs	r3, #14
 8014fc6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 8014fca:	2300      	movs	r3, #0
 8014fcc:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8014fd0:	68fb      	ldr	r3, [r7, #12]
 8014fd2:	681b      	ldr	r3, [r3, #0]
 8014fd4:	617b      	str	r3, [r7, #20]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8014fd6:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8014fda:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8014fde:	1c9a      	adds	r2, r3, #2
 8014fe0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8014fe4:	1c59      	adds	r1, r3, #1
 8014fe6:	f107 0014 	add.w	r0, r7, #20
 8014fea:	4623      	mov	r3, r4
 8014fec:	f7fd fb10 	bl	8012610 <RegionCommonLinkAdrReqVerifyParams>
 8014ff0:	4603      	mov	r3, r0
 8014ff2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8014ff6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014ffa:	2b07      	cmp	r3, #7
 8014ffc:	d147      	bne.n	801508e <RegionUS915LinkAdrReq+0x3fe>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 8014ffe:	4b2f      	ldr	r3, [pc, #188]	@ (80150bc <RegionUS915LinkAdrReq+0x42c>)
 8015000:	681b      	ldr	r3, [r3, #0]
 8015002:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8015006:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 801500a:	2206      	movs	r2, #6
 801500c:	4618      	mov	r0, r3
 801500e:	f7fd f969 	bl	80122e4 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 8015012:	4b2b      	ldr	r3, [pc, #172]	@ (80150c0 <RegionUS915LinkAdrReq+0x430>)
 8015014:	681b      	ldr	r3, [r3, #0]
 8015016:	8819      	ldrh	r1, [r3, #0]
 8015018:	4b28      	ldr	r3, [pc, #160]	@ (80150bc <RegionUS915LinkAdrReq+0x42c>)
 801501a:	681b      	ldr	r3, [r3, #0]
 801501c:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 8015020:	4b27      	ldr	r3, [pc, #156]	@ (80150c0 <RegionUS915LinkAdrReq+0x430>)
 8015022:	681b      	ldr	r3, [r3, #0]
 8015024:	400a      	ands	r2, r1
 8015026:	b292      	uxth	r2, r2
 8015028:	801a      	strh	r2, [r3, #0]
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 801502a:	4b25      	ldr	r3, [pc, #148]	@ (80150c0 <RegionUS915LinkAdrReq+0x430>)
 801502c:	681b      	ldr	r3, [r3, #0]
 801502e:	8859      	ldrh	r1, [r3, #2]
 8015030:	4b22      	ldr	r3, [pc, #136]	@ (80150bc <RegionUS915LinkAdrReq+0x42c>)
 8015032:	681b      	ldr	r3, [r3, #0]
 8015034:	f8b3 2362 	ldrh.w	r2, [r3, #866]	@ 0x362
 8015038:	4b21      	ldr	r3, [pc, #132]	@ (80150c0 <RegionUS915LinkAdrReq+0x430>)
 801503a:	681b      	ldr	r3, [r3, #0]
 801503c:	400a      	ands	r2, r1
 801503e:	b292      	uxth	r2, r2
 8015040:	805a      	strh	r2, [r3, #2]
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 8015042:	4b1f      	ldr	r3, [pc, #124]	@ (80150c0 <RegionUS915LinkAdrReq+0x430>)
 8015044:	681b      	ldr	r3, [r3, #0]
 8015046:	8899      	ldrh	r1, [r3, #4]
 8015048:	4b1c      	ldr	r3, [pc, #112]	@ (80150bc <RegionUS915LinkAdrReq+0x42c>)
 801504a:	681b      	ldr	r3, [r3, #0]
 801504c:	f8b3 2364 	ldrh.w	r2, [r3, #868]	@ 0x364
 8015050:	4b1b      	ldr	r3, [pc, #108]	@ (80150c0 <RegionUS915LinkAdrReq+0x430>)
 8015052:	681b      	ldr	r3, [r3, #0]
 8015054:	400a      	ands	r2, r1
 8015056:	b292      	uxth	r2, r2
 8015058:	809a      	strh	r2, [r3, #4]
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 801505a:	4b19      	ldr	r3, [pc, #100]	@ (80150c0 <RegionUS915LinkAdrReq+0x430>)
 801505c:	681b      	ldr	r3, [r3, #0]
 801505e:	88d9      	ldrh	r1, [r3, #6]
 8015060:	4b16      	ldr	r3, [pc, #88]	@ (80150bc <RegionUS915LinkAdrReq+0x42c>)
 8015062:	681b      	ldr	r3, [r3, #0]
 8015064:	f8b3 2366 	ldrh.w	r2, [r3, #870]	@ 0x366
 8015068:	4b15      	ldr	r3, [pc, #84]	@ (80150c0 <RegionUS915LinkAdrReq+0x430>)
 801506a:	681b      	ldr	r3, [r3, #0]
 801506c:	400a      	ands	r2, r1
 801506e:	b292      	uxth	r2, r2
 8015070:	80da      	strh	r2, [r3, #6]
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8015072:	4b12      	ldr	r3, [pc, #72]	@ (80150bc <RegionUS915LinkAdrReq+0x42c>)
 8015074:	681a      	ldr	r2, [r3, #0]
 8015076:	4b12      	ldr	r3, [pc, #72]	@ (80150c0 <RegionUS915LinkAdrReq+0x430>)
 8015078:	681b      	ldr	r3, [r3, #0]
 801507a:	f8b2 2368 	ldrh.w	r2, [r2, #872]	@ 0x368
 801507e:	811a      	strh	r2, [r3, #8]
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 8015080:	4b0e      	ldr	r3, [pc, #56]	@ (80150bc <RegionUS915LinkAdrReq+0x42c>)
 8015082:	681a      	ldr	r2, [r3, #0]
 8015084:	4b0e      	ldr	r3, [pc, #56]	@ (80150c0 <RegionUS915LinkAdrReq+0x430>)
 8015086:	681b      	ldr	r3, [r3, #0]
 8015088:	f8b2 236a 	ldrh.w	r2, [r2, #874]	@ 0x36a
 801508c:	815a      	strh	r2, [r3, #10]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 801508e:	f997 204d 	ldrsb.w	r2, [r7, #77]	@ 0x4d
 8015092:	68bb      	ldr	r3, [r7, #8]
 8015094:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8015096:	f997 204e 	ldrsb.w	r2, [r7, #78]	@ 0x4e
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 801509e:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 80150a2:	683b      	ldr	r3, [r7, #0]
 80150a4:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 80150a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80150a8:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 80150ac:	701a      	strb	r2, [r3, #0]

#endif /* REGION_US915 */
    return status;
 80150ae:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 80150b2:	4618      	mov	r0, r3
 80150b4:	375c      	adds	r7, #92	@ 0x5c
 80150b6:	46bd      	mov	sp, r7
 80150b8:	bd90      	pop	{r4, r7, pc}
 80150ba:	bf00      	nop
 80150bc:	2000122c 	.word	0x2000122c
 80150c0:	20001228 	.word	0x20001228

080150c4 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 80150c4:	b580      	push	{r7, lr}
 80150c6:	b084      	sub	sp, #16
 80150c8:	af00      	add	r7, sp, #0
 80150ca:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 80150cc:	2307      	movs	r3, #7
 80150ce:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	685b      	ldr	r3, [r3, #4]
 80150d4:	4618      	mov	r0, r3
 80150d6:	f7fe ffe5 	bl	80140a4 <VerifyRfFreq>
 80150da:	4603      	mov	r3, r0
 80150dc:	f083 0301 	eor.w	r3, r3, #1
 80150e0:	b2db      	uxtb	r3, r3
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	d003      	beq.n	80150ee <RegionUS915RxParamSetupReq+0x2a>
    {
        status &= 0xFE; // Channel frequency KO
 80150e6:	7bfb      	ldrb	r3, [r7, #15]
 80150e8:	f023 0301 	bic.w	r3, r3, #1
 80150ec:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	f993 3000 	ldrsb.w	r3, [r3]
 80150f4:	220d      	movs	r2, #13
 80150f6:	2108      	movs	r1, #8
 80150f8:	4618      	mov	r0, r3
 80150fa:	f7fd f876 	bl	80121ea <RegionCommonValueInRange>
 80150fe:	4603      	mov	r3, r0
 8015100:	2b00      	cmp	r3, #0
 8015102:	d103      	bne.n	801510c <RegionUS915RxParamSetupReq+0x48>
    {
        status &= 0xFD; // Datarate KO
 8015104:	7bfb      	ldrb	r3, [r7, #15]
 8015106:	f023 0302 	bic.w	r3, r3, #2
 801510a:	73fb      	strb	r3, [r7, #15]
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	f993 3000 	ldrsb.w	r3, [r3]
 8015112:	2207      	movs	r2, #7
 8015114:	2105      	movs	r1, #5
 8015116:	4618      	mov	r0, r3
 8015118:	f7fd f867 	bl	80121ea <RegionCommonValueInRange>
 801511c:	4603      	mov	r3, r0
 801511e:	2b01      	cmp	r3, #1
 8015120:	d004      	beq.n	801512c <RegionUS915RxParamSetupReq+0x68>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	f993 3000 	ldrsb.w	r3, [r3]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8015128:	2b0d      	cmp	r3, #13
 801512a:	dd03      	ble.n	8015134 <RegionUS915RxParamSetupReq+0x70>
    {
        status &= 0xFD; // Datarate KO
 801512c:	7bfb      	ldrb	r3, [r7, #15]
 801512e:	f023 0302 	bic.w	r3, r3, #2
 8015132:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801513a:	2203      	movs	r2, #3
 801513c:	2100      	movs	r1, #0
 801513e:	4618      	mov	r0, r3
 8015140:	f7fd f853 	bl	80121ea <RegionCommonValueInRange>
 8015144:	4603      	mov	r3, r0
 8015146:	2b00      	cmp	r3, #0
 8015148:	d103      	bne.n	8015152 <RegionUS915RxParamSetupReq+0x8e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 801514a:	7bfb      	ldrb	r3, [r7, #15]
 801514c:	f023 0304 	bic.w	r3, r3, #4
 8015150:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_US915 */
    return status;
 8015152:	7bfb      	ldrb	r3, [r7, #15]
}
 8015154:	4618      	mov	r0, r3
 8015156:	3710      	adds	r7, #16
 8015158:	46bd      	mov	sp, r7
 801515a:	bd80      	pop	{r7, pc}

0801515c <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 801515c:	b480      	push	{r7}
 801515e:	b083      	sub	sp, #12
 8015160:	af00      	add	r7, sp, #0
 8015162:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8015164:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015168:	4618      	mov	r0, r3
 801516a:	370c      	adds	r7, #12
 801516c:	46bd      	mov	sp, r7
 801516e:	bc80      	pop	{r7}
 8015170:	4770      	bx	lr

08015172 <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8015172:	b480      	push	{r7}
 8015174:	b083      	sub	sp, #12
 8015176:	af00      	add	r7, sp, #0
 8015178:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 801517a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801517e:	4618      	mov	r0, r3
 8015180:	370c      	adds	r7, #12
 8015182:	46bd      	mov	sp, r7
 8015184:	bc80      	pop	{r7}
 8015186:	4770      	bx	lr

08015188 <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8015188:	b480      	push	{r7}
 801518a:	b083      	sub	sp, #12
 801518c:	af00      	add	r7, sp, #0
 801518e:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8015190:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015194:	4618      	mov	r0, r3
 8015196:	370c      	adds	r7, #12
 8015198:	46bd      	mov	sp, r7
 801519a:	bc80      	pop	{r7}
 801519c:	4770      	bx	lr
	...

080151a0 <RegionUS915AlternateDr>:

int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 80151a0:	b480      	push	{r7}
 80151a2:	b083      	sub	sp, #12
 80151a4:	af00      	add	r7, sp, #0
 80151a6:	4603      	mov	r3, r0
 80151a8:	460a      	mov	r2, r1
 80151aa:	71fb      	strb	r3, [r7, #7]
 80151ac:	4613      	mov	r3, r2
 80151ae:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 80151b0:	79bb      	ldrb	r3, [r7, #6]
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	d106      	bne.n	80151c4 <RegionUS915AlternateDr+0x24>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 80151b6:	4b13      	ldr	r3, [pc, #76]	@ (8015204 <RegionUS915AlternateDr+0x64>)
 80151b8:	681b      	ldr	r3, [r3, #0]
 80151ba:	7b5a      	ldrb	r2, [r3, #13]
 80151bc:	3201      	adds	r2, #1
 80151be:	b2d2      	uxtb	r2, r2
 80151c0:	735a      	strb	r2, [r3, #13]
 80151c2:	e005      	b.n	80151d0 <RegionUS915AlternateDr+0x30>
    }
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
 80151c4:	4b0f      	ldr	r3, [pc, #60]	@ (8015204 <RegionUS915AlternateDr+0x64>)
 80151c6:	681b      	ldr	r3, [r3, #0]
 80151c8:	7b5a      	ldrb	r2, [r3, #13]
 80151ca:	3a01      	subs	r2, #1
 80151cc:	b2d2      	uxtb	r2, r2
 80151ce:	735a      	strb	r2, [r3, #13]
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 80151d0:	4b0c      	ldr	r3, [pc, #48]	@ (8015204 <RegionUS915AlternateDr+0x64>)
 80151d2:	681b      	ldr	r3, [r3, #0]
 80151d4:	7b5a      	ldrb	r2, [r3, #13]
 80151d6:	4b0c      	ldr	r3, [pc, #48]	@ (8015208 <RegionUS915AlternateDr+0x68>)
 80151d8:	fba3 1302 	umull	r1, r3, r3, r2
 80151dc:	0859      	lsrs	r1, r3, #1
 80151de:	460b      	mov	r3, r1
 80151e0:	00db      	lsls	r3, r3, #3
 80151e2:	440b      	add	r3, r1
 80151e4:	1ad3      	subs	r3, r2, r3
 80151e6:	b2db      	uxtb	r3, r3
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	d102      	bne.n	80151f2 <RegionUS915AlternateDr+0x52>
    {
        // Use DR_4 every 9th times.
        currentDr = DR_4;
 80151ec:	2304      	movs	r3, #4
 80151ee:	71fb      	strb	r3, [r7, #7]
 80151f0:	e001      	b.n	80151f6 <RegionUS915AlternateDr+0x56>
    }
    else
    {
        currentDr = DR_0;
 80151f2:	2300      	movs	r3, #0
 80151f4:	71fb      	strb	r3, [r7, #7]
    }
    return currentDr;
 80151f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_US915 */
}
 80151fa:	4618      	mov	r0, r3
 80151fc:	370c      	adds	r7, #12
 80151fe:	46bd      	mov	sp, r7
 8015200:	bc80      	pop	{r7}
 8015202:	4770      	bx	lr
 8015204:	20001228 	.word	0x20001228
 8015208:	38e38e39 	.word	0x38e38e39

0801520c <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801520c:	b580      	push	{r7, lr}
 801520e:	b0a8      	sub	sp, #160	@ 0xa0
 8015210:	af02      	add	r7, sp, #8
 8015212:	60f8      	str	r0, [r7, #12]
 8015214:	60b9      	str	r1, [r7, #8]
 8015216:	607a      	str	r2, [r7, #4]
 8015218:	603b      	str	r3, [r7, #0]
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 801521a:	2300      	movs	r3, #0
 801521c:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
    uint8_t nbRestrictedChannels = 0;
 8015220:	2300      	movs	r3, #0
 8015222:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 8015226:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801522a:	2248      	movs	r2, #72	@ 0x48
 801522c:	2100      	movs	r1, #0
 801522e:	4618      	mov	r0, r3
 8015230:	f00a fd26 	bl	801fc80 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8015234:	230c      	movs	r3, #12
 8015236:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 801523a:	4b67      	ldr	r3, [pc, #412]	@ (80153d8 <RegionUS915NextChannel+0x1cc>)
 801523c:	681b      	ldr	r3, [r3, #0]
 801523e:	2204      	movs	r2, #4
 8015240:	2100      	movs	r1, #0
 8015242:	4618      	mov	r0, r3
 8015244:	f7fd f822 	bl	801228c <RegionCommonCountChannels>
 8015248:	4603      	mov	r3, r0
 801524a:	2b00      	cmp	r3, #0
 801524c:	d10e      	bne.n	801526c <RegionUS915NextChannel+0x60>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 801524e:	4b62      	ldr	r3, [pc, #392]	@ (80153d8 <RegionUS915NextChannel+0x1cc>)
 8015250:	681b      	ldr	r3, [r3, #0]
 8015252:	4618      	mov	r0, r3
 8015254:	4b61      	ldr	r3, [pc, #388]	@ (80153dc <RegionUS915NextChannel+0x1d0>)
 8015256:	681b      	ldr	r3, [r3, #0]
 8015258:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 801525c:	2204      	movs	r2, #4
 801525e:	4619      	mov	r1, r3
 8015260:	f7fd f840 	bl	80122e4 <RegionCommonChanMaskCopy>

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8015264:	4b5c      	ldr	r3, [pc, #368]	@ (80153d8 <RegionUS915NextChannel+0x1cc>)
 8015266:	681b      	ldr	r3, [r3, #0]
 8015268:	2200      	movs	r2, #0
 801526a:	731a      	strb	r2, [r3, #12]
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 801526c:	68fb      	ldr	r3, [r7, #12]
 801526e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8015272:	2b03      	cmp	r3, #3
 8015274:	dd0c      	ble.n	8015290 <RegionUS915NextChannel+0x84>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 8015276:	4b58      	ldr	r3, [pc, #352]	@ (80153d8 <RegionUS915NextChannel+0x1cc>)
 8015278:	681b      	ldr	r3, [r3, #0]
 801527a:	891b      	ldrh	r3, [r3, #8]
 801527c:	b2db      	uxtb	r3, r3
 801527e:	2b00      	cmp	r3, #0
 8015280:	d106      	bne.n	8015290 <RegionUS915NextChannel+0x84>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8015282:	4b56      	ldr	r3, [pc, #344]	@ (80153dc <RegionUS915NextChannel+0x1d0>)
 8015284:	681a      	ldr	r2, [r3, #0]
 8015286:	4b54      	ldr	r3, [pc, #336]	@ (80153d8 <RegionUS915NextChannel+0x1cc>)
 8015288:	681b      	ldr	r3, [r3, #0]
 801528a:	f8b2 2368 	ldrh.w	r2, [r2, #872]	@ 0x368
 801528e:	811a      	strh	r2, [r3, #8]
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8015290:	68fb      	ldr	r3, [r7, #12]
 8015292:	7a5b      	ldrb	r3, [r3, #9]
 8015294:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8015296:	68fb      	ldr	r3, [r7, #12]
 8015298:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801529c:	b2db      	uxtb	r3, r3
 801529e:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 80152a0:	4b4d      	ldr	r3, [pc, #308]	@ (80153d8 <RegionUS915NextChannel+0x1cc>)
 80152a2:	681b      	ldr	r3, [r3, #0]
 80152a4:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 80152a6:	4b4d      	ldr	r3, [pc, #308]	@ (80153dc <RegionUS915NextChannel+0x1d0>)
 80152a8:	681b      	ldr	r3, [r3, #0]
 80152aa:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 80152ac:	4b4c      	ldr	r3, [pc, #304]	@ (80153e0 <RegionUS915NextChannel+0x1d4>)
 80152ae:	681b      	ldr	r3, [r3, #0]
 80152b0:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 80152b2:	2348      	movs	r3, #72	@ 0x48
 80152b4:	84bb      	strh	r3, [r7, #36]	@ 0x24
    countChannelsParams.JoinChannels = NULL;
 80152b6:	2300      	movs	r3, #0
 80152b8:	62bb      	str	r3, [r7, #40]	@ 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 80152ba:	68fb      	ldr	r3, [r7, #12]
 80152bc:	681b      	ldr	r3, [r3, #0]
 80152be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 80152c0:	68fb      	ldr	r3, [r7, #12]
 80152c2:	685b      	ldr	r3, [r3, #4]
 80152c4:	633b      	str	r3, [r7, #48]	@ 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 80152c6:	68fb      	ldr	r3, [r7, #12]
 80152c8:	7a9b      	ldrb	r3, [r3, #10]
 80152ca:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 80152ce:	2301      	movs	r3, #1
 80152d0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 80152d4:	f107 0314 	add.w	r3, r7, #20
 80152d8:	64bb      	str	r3, [r7, #72]	@ 0x48

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 80152da:	68fa      	ldr	r2, [r7, #12]
 80152dc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80152e0:	320c      	adds	r2, #12
 80152e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80152e6:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 80152ea:	68fb      	ldr	r3, [r7, #12]
 80152ec:	7d1b      	ldrb	r3, [r3, #20]
 80152ee:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 80152f2:	68fb      	ldr	r3, [r7, #12]
 80152f4:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80152f8:	68fb      	ldr	r3, [r7, #12]
 80152fa:	8adb      	ldrh	r3, [r3, #22]
 80152fc:	4619      	mov	r1, r3
 80152fe:	4610      	mov	r0, r2
 8015300:	f7fe ff14 	bl	801412c <GetTimeOnAir>
 8015304:	4603      	mov	r3, r0
 8015306:	647b      	str	r3, [r7, #68]	@ 0x44
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8015308:	f107 0195 	add.w	r1, r7, #149	@ 0x95
 801530c:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8015310:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	9301      	str	r3, [sp, #4]
 8015318:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 801531c:	9300      	str	r3, [sp, #0]
 801531e:	460b      	mov	r3, r1
 8015320:	6839      	ldr	r1, [r7, #0]
 8015322:	f7fd fbca 	bl	8012aba <RegionCommonIdentifyChannels>
 8015326:	4603      	mov	r3, r0
 8015328:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 801532c:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8015330:	2b00      	cmp	r3, #0
 8015332:	d14a      	bne.n	80153ca <RegionUS915NextChannel+0x1be>
    {
        if( nextChanParams->Joined == true )
 8015334:	68fb      	ldr	r3, [r7, #12]
 8015336:	7a5b      	ldrb	r3, [r3, #9]
 8015338:	2b00      	cmp	r3, #0
 801533a:	d00e      	beq.n	801535a <RegionUS915NextChannel+0x14e>
        {
            // Choose randomly on of the remaining channels
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 801533c:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 8015340:	3b01      	subs	r3, #1
 8015342:	4619      	mov	r1, r3
 8015344:	2000      	movs	r0, #0
 8015346:	f001 fd41 	bl	8016dcc <randr>
 801534a:	4603      	mov	r3, r0
 801534c:	3398      	adds	r3, #152	@ 0x98
 801534e:	443b      	add	r3, r7
 8015350:	f813 2c4c 	ldrb.w	r2, [r3, #-76]
 8015354:	68bb      	ldr	r3, [r7, #8]
 8015356:	701a      	strb	r2, [r3, #0]
 8015358:	e02e      	b.n	80153b8 <RegionUS915NextChannel+0x1ac>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 801535a:	68fb      	ldr	r3, [r7, #12]
 801535c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8015360:	2b00      	cmp	r3, #0
 8015362:	d10e      	bne.n	8015382 <RegionUS915NextChannel+0x176>
            {
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 8015364:	4b1c      	ldr	r3, [pc, #112]	@ (80153d8 <RegionUS915NextChannel+0x1cc>)
 8015366:	681b      	ldr	r3, [r3, #0]
 8015368:	4618      	mov	r0, r3
                    &RegionNvmGroup1->JoinChannelGroupsCurrentIndex, channel ) == LORAMAC_STATUS_PARAMETER_INVALID )
 801536a:	4b1b      	ldr	r3, [pc, #108]	@ (80153d8 <RegionUS915NextChannel+0x1cc>)
 801536c:	681b      	ldr	r3, [r3, #0]
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 801536e:	330c      	adds	r3, #12
 8015370:	68ba      	ldr	r2, [r7, #8]
 8015372:	4619      	mov	r1, r3
 8015374:	f7fc fcf4 	bl	8011d60 <RegionBaseUSComputeNext125kHzJoinChannel>
 8015378:	4603      	mov	r3, r0
 801537a:	2b03      	cmp	r3, #3
 801537c:	d11c      	bne.n	80153b8 <RegionUS915NextChannel+0x1ac>
                {
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 801537e:	2303      	movs	r3, #3
 8015380:	e025      	b.n	80153ce <RegionUS915NextChannel+0x1c2>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 8015382:	2300      	movs	r3, #0
 8015384:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8015388:	e004      	b.n	8015394 <RegionUS915NextChannel+0x188>
                {
                    i++;
 801538a:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 801538e:	3301      	adds	r3, #1
 8015390:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8015394:	4b10      	ldr	r3, [pc, #64]	@ (80153d8 <RegionUS915NextChannel+0x1cc>)
 8015396:	681b      	ldr	r3, [r3, #0]
 8015398:	891b      	ldrh	r3, [r3, #8]
 801539a:	b2da      	uxtb	r2, r3
 801539c:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80153a0:	fa42 f303 	asr.w	r3, r2, r3
 80153a4:	f003 0301 	and.w	r3, r3, #1
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	d0ee      	beq.n	801538a <RegionUS915NextChannel+0x17e>
                }
                *channel = 64 + i;
 80153ac:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 80153b0:	3340      	adds	r3, #64	@ 0x40
 80153b2:	b2da      	uxtb	r2, r3
 80153b4:	68bb      	ldr	r3, [r7, #8]
 80153b6:	701a      	strb	r2, [r3, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 80153b8:	4b07      	ldr	r3, [pc, #28]	@ (80153d8 <RegionUS915NextChannel+0x1cc>)
 80153ba:	681b      	ldr	r3, [r3, #0]
 80153bc:	4618      	mov	r0, r3
 80153be:	68bb      	ldr	r3, [r7, #8]
 80153c0:	781b      	ldrb	r3, [r3, #0]
 80153c2:	2248      	movs	r2, #72	@ 0x48
 80153c4:	4619      	mov	r1, r3
 80153c6:	f7fc ff2d 	bl	8012224 <RegionCommonChanDisable>
    }
    return status;
 80153ca:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 80153ce:	4618      	mov	r0, r3
 80153d0:	3798      	adds	r7, #152	@ 0x98
 80153d2:	46bd      	mov	sp, r7
 80153d4:	bd80      	pop	{r7, pc}
 80153d6:	bf00      	nop
 80153d8:	20001228 	.word	0x20001228
 80153dc:	2000122c 	.word	0x2000122c
 80153e0:	20001230 	.word	0x20001230

080153e4 <RegionUS915ApplyDrOffset>:
#endif /* REGION_US915 */
}
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80153e4:	b480      	push	{r7}
 80153e6:	b085      	sub	sp, #20
 80153e8:	af00      	add	r7, sp, #0
 80153ea:	4603      	mov	r3, r0
 80153ec:	71fb      	strb	r3, [r7, #7]
 80153ee:	460b      	mov	r3, r1
 80153f0:	71bb      	strb	r3, [r7, #6]
 80153f2:	4613      	mov	r3, r2
 80153f4:	717b      	strb	r3, [r7, #5]
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 80153f6:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80153fa:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80153fe:	4909      	ldr	r1, [pc, #36]	@ (8015424 <RegionUS915ApplyDrOffset+0x40>)
 8015400:	0092      	lsls	r2, r2, #2
 8015402:	440a      	add	r2, r1
 8015404:	4413      	add	r3, r2
 8015406:	781b      	ldrb	r3, [r3, #0]
 8015408:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 801540a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801540e:	2b00      	cmp	r3, #0
 8015410:	da01      	bge.n	8015416 <RegionUS915ApplyDrOffset+0x32>
    {
        datarate = DR_0;
 8015412:	2300      	movs	r3, #0
 8015414:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8015416:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_US915 */
}
 8015418:	4618      	mov	r0, r3
 801541a:	3714      	adds	r7, #20
 801541c:	46bd      	mov	sp, r7
 801541e:	bc80      	pop	{r7}
 8015420:	4770      	bx	lr
 8015422:	bf00      	nop
 8015424:	080210b4 	.word	0x080210b4

08015428 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 8015428:	b580      	push	{r7, lr}
 801542a:	b082      	sub	sp, #8
 801542c:	af00      	add	r7, sp, #0
 801542e:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	33f1      	adds	r3, #241	@ 0xf1
 8015434:	2210      	movs	r2, #16
 8015436:	2100      	movs	r1, #0
 8015438:	4618      	mov	r0, r3
 801543a:	f001 fd19 	bl	8016e70 <memset1>
    ctx->M_n = 0;
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	2200      	movs	r2, #0
 8015442:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	22f0      	movs	r2, #240	@ 0xf0
 801544a:	2100      	movs	r1, #0
 801544c:	4618      	mov	r0, r3
 801544e:	f001 fd0f 	bl	8016e70 <memset1>
}
 8015452:	bf00      	nop
 8015454:	3708      	adds	r7, #8
 8015456:	46bd      	mov	sp, r7
 8015458:	bd80      	pop	{r7, pc}

0801545a <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 801545a:	b580      	push	{r7, lr}
 801545c:	b082      	sub	sp, #8
 801545e:	af00      	add	r7, sp, #0
 8015460:	6078      	str	r0, [r7, #4]
 8015462:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 8015464:	687b      	ldr	r3, [r7, #4]
 8015466:	461a      	mov	r2, r3
 8015468:	2110      	movs	r1, #16
 801546a:	6838      	ldr	r0, [r7, #0]
 801546c:	f000 fe60 	bl	8016130 <lorawan_aes_set_key>
}
 8015470:	bf00      	nop
 8015472:	3708      	adds	r7, #8
 8015474:	46bd      	mov	sp, r7
 8015476:	bd80      	pop	{r7, pc}

08015478 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 8015478:	b580      	push	{r7, lr}
 801547a:	b08c      	sub	sp, #48	@ 0x30
 801547c:	af00      	add	r7, sp, #0
 801547e:	60f8      	str	r0, [r7, #12]
 8015480:	60b9      	str	r1, [r7, #8]
 8015482:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 8015484:	68fb      	ldr	r3, [r7, #12]
 8015486:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 801548a:	2b00      	cmp	r3, #0
 801548c:	f000 80a1 	beq.w	80155d2 <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 8015490:	68fb      	ldr	r3, [r7, #12]
 8015492:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8015496:	f1c3 0310 	rsb	r3, r3, #16
 801549a:	687a      	ldr	r2, [r7, #4]
 801549c:	4293      	cmp	r3, r2
 801549e:	bf28      	it	cs
 80154a0:	4613      	movcs	r3, r2
 80154a2:	627b      	str	r3, [r7, #36]	@ 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 80154a4:	68fb      	ldr	r3, [r7, #12]
 80154a6:	f203 1201 	addw	r2, r3, #257	@ 0x101
 80154aa:	68fb      	ldr	r3, [r7, #12]
 80154ac:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80154b0:	4413      	add	r3, r2
 80154b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80154b4:	b292      	uxth	r2, r2
 80154b6:	68b9      	ldr	r1, [r7, #8]
 80154b8:	4618      	mov	r0, r3
 80154ba:	f001 fc9e 	bl	8016dfa <memcpy1>
        ctx->M_n += mlen;
 80154be:	68fb      	ldr	r3, [r7, #12]
 80154c0:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 80154c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154c6:	441a      	add	r2, r3
 80154c8:	68fb      	ldr	r3, [r7, #12]
 80154ca:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        if( ctx->M_n < 16 || len == mlen )
 80154ce:	68fb      	ldr	r3, [r7, #12]
 80154d0:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80154d4:	2b0f      	cmp	r3, #15
 80154d6:	f240 808d 	bls.w	80155f4 <AES_CMAC_Update+0x17c>
 80154da:	687a      	ldr	r2, [r7, #4]
 80154dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154de:	429a      	cmp	r2, r3
 80154e0:	f000 8088 	beq.w	80155f4 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 80154e4:	2300      	movs	r3, #0
 80154e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80154e8:	e015      	b.n	8015516 <AES_CMAC_Update+0x9e>
 80154ea:	68fa      	ldr	r2, [r7, #12]
 80154ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154ee:	4413      	add	r3, r2
 80154f0:	33f1      	adds	r3, #241	@ 0xf1
 80154f2:	781a      	ldrb	r2, [r3, #0]
 80154f4:	68f9      	ldr	r1, [r7, #12]
 80154f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154f8:	440b      	add	r3, r1
 80154fa:	f203 1301 	addw	r3, r3, #257	@ 0x101
 80154fe:	781b      	ldrb	r3, [r3, #0]
 8015500:	4053      	eors	r3, r2
 8015502:	b2d9      	uxtb	r1, r3
 8015504:	68fa      	ldr	r2, [r7, #12]
 8015506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015508:	4413      	add	r3, r2
 801550a:	33f1      	adds	r3, #241	@ 0xf1
 801550c:	460a      	mov	r2, r1
 801550e:	701a      	strb	r2, [r3, #0]
 8015510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015512:	3301      	adds	r3, #1
 8015514:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015518:	2b0f      	cmp	r3, #15
 801551a:	dde6      	ble.n	80154ea <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 801551c:	68fb      	ldr	r3, [r7, #12]
 801551e:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 8015522:	f107 0314 	add.w	r3, r7, #20
 8015526:	2210      	movs	r2, #16
 8015528:	4618      	mov	r0, r3
 801552a:	f001 fc66 	bl	8016dfa <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 801552e:	68fa      	ldr	r2, [r7, #12]
 8015530:	f107 0114 	add.w	r1, r7, #20
 8015534:	f107 0314 	add.w	r3, r7, #20
 8015538:	4618      	mov	r0, r3
 801553a:	f000 fed7 	bl	80162ec <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 801553e:	68fb      	ldr	r3, [r7, #12]
 8015540:	33f1      	adds	r3, #241	@ 0xf1
 8015542:	f107 0114 	add.w	r1, r7, #20
 8015546:	2210      	movs	r2, #16
 8015548:	4618      	mov	r0, r3
 801554a:	f001 fc56 	bl	8016dfa <memcpy1>

        data += mlen;
 801554e:	68ba      	ldr	r2, [r7, #8]
 8015550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015552:	4413      	add	r3, r2
 8015554:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 8015556:	687a      	ldr	r2, [r7, #4]
 8015558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801555a:	1ad3      	subs	r3, r2, r3
 801555c:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 801555e:	e038      	b.n	80155d2 <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 8015560:	2300      	movs	r3, #0
 8015562:	62bb      	str	r3, [r7, #40]	@ 0x28
 8015564:	e013      	b.n	801558e <AES_CMAC_Update+0x116>
 8015566:	68fa      	ldr	r2, [r7, #12]
 8015568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801556a:	4413      	add	r3, r2
 801556c:	33f1      	adds	r3, #241	@ 0xf1
 801556e:	781a      	ldrb	r2, [r3, #0]
 8015570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015572:	68b9      	ldr	r1, [r7, #8]
 8015574:	440b      	add	r3, r1
 8015576:	781b      	ldrb	r3, [r3, #0]
 8015578:	4053      	eors	r3, r2
 801557a:	b2d9      	uxtb	r1, r3
 801557c:	68fa      	ldr	r2, [r7, #12]
 801557e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015580:	4413      	add	r3, r2
 8015582:	33f1      	adds	r3, #241	@ 0xf1
 8015584:	460a      	mov	r2, r1
 8015586:	701a      	strb	r2, [r3, #0]
 8015588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801558a:	3301      	adds	r3, #1
 801558c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801558e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015590:	2b0f      	cmp	r3, #15
 8015592:	dde8      	ble.n	8015566 <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8015594:	68fb      	ldr	r3, [r7, #12]
 8015596:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 801559a:	f107 0314 	add.w	r3, r7, #20
 801559e:	2210      	movs	r2, #16
 80155a0:	4618      	mov	r0, r3
 80155a2:	f001 fc2a 	bl	8016dfa <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 80155a6:	68fa      	ldr	r2, [r7, #12]
 80155a8:	f107 0114 	add.w	r1, r7, #20
 80155ac:	f107 0314 	add.w	r3, r7, #20
 80155b0:	4618      	mov	r0, r3
 80155b2:	f000 fe9b 	bl	80162ec <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 80155b6:	68fb      	ldr	r3, [r7, #12]
 80155b8:	33f1      	adds	r3, #241	@ 0xf1
 80155ba:	f107 0114 	add.w	r1, r7, #20
 80155be:	2210      	movs	r2, #16
 80155c0:	4618      	mov	r0, r3
 80155c2:	f001 fc1a 	bl	8016dfa <memcpy1>

        data += 16;
 80155c6:	68bb      	ldr	r3, [r7, #8]
 80155c8:	3310      	adds	r3, #16
 80155ca:	60bb      	str	r3, [r7, #8]
        len -= 16;
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	3b10      	subs	r3, #16
 80155d0:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	2b10      	cmp	r3, #16
 80155d6:	d8c3      	bhi.n	8015560 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 80155d8:	68fb      	ldr	r3, [r7, #12]
 80155da:	f203 1301 	addw	r3, r3, #257	@ 0x101
 80155de:	687a      	ldr	r2, [r7, #4]
 80155e0:	b292      	uxth	r2, r2
 80155e2:	68b9      	ldr	r1, [r7, #8]
 80155e4:	4618      	mov	r0, r3
 80155e6:	f001 fc08 	bl	8016dfa <memcpy1>
    ctx->M_n = len;
 80155ea:	68fb      	ldr	r3, [r7, #12]
 80155ec:	687a      	ldr	r2, [r7, #4]
 80155ee:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 80155f2:	e000      	b.n	80155f6 <AES_CMAC_Update+0x17e>
            return;
 80155f4:	bf00      	nop
}
 80155f6:	3730      	adds	r7, #48	@ 0x30
 80155f8:	46bd      	mov	sp, r7
 80155fa:	bd80      	pop	{r7, pc}

080155fc <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 80155fc:	b580      	push	{r7, lr}
 80155fe:	b092      	sub	sp, #72	@ 0x48
 8015600:	af00      	add	r7, sp, #0
 8015602:	6078      	str	r0, [r7, #4]
 8015604:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 8015606:	f107 031c 	add.w	r3, r7, #28
 801560a:	2210      	movs	r2, #16
 801560c:	2100      	movs	r1, #0
 801560e:	4618      	mov	r0, r3
 8015610:	f001 fc2e 	bl	8016e70 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 8015614:	683a      	ldr	r2, [r7, #0]
 8015616:	f107 011c 	add.w	r1, r7, #28
 801561a:	f107 031c 	add.w	r3, r7, #28
 801561e:	4618      	mov	r0, r3
 8015620:	f000 fe64 	bl	80162ec <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 8015624:	7f3b      	ldrb	r3, [r7, #28]
 8015626:	b25b      	sxtb	r3, r3
 8015628:	2b00      	cmp	r3, #0
 801562a:	da31      	bge.n	8015690 <AES_CMAC_Final+0x94>
    {
        LSHIFT( K, K );
 801562c:	2300      	movs	r3, #0
 801562e:	647b      	str	r3, [r7, #68]	@ 0x44
 8015630:	e01c      	b.n	801566c <AES_CMAC_Final+0x70>
 8015632:	f107 021c 	add.w	r2, r7, #28
 8015636:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015638:	4413      	add	r3, r2
 801563a:	781b      	ldrb	r3, [r3, #0]
 801563c:	b25b      	sxtb	r3, r3
 801563e:	005b      	lsls	r3, r3, #1
 8015640:	b25a      	sxtb	r2, r3
 8015642:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015644:	3301      	adds	r3, #1
 8015646:	3348      	adds	r3, #72	@ 0x48
 8015648:	443b      	add	r3, r7
 801564a:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 801564e:	09db      	lsrs	r3, r3, #7
 8015650:	b2db      	uxtb	r3, r3
 8015652:	b25b      	sxtb	r3, r3
 8015654:	4313      	orrs	r3, r2
 8015656:	b25b      	sxtb	r3, r3
 8015658:	b2d9      	uxtb	r1, r3
 801565a:	f107 021c 	add.w	r2, r7, #28
 801565e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015660:	4413      	add	r3, r2
 8015662:	460a      	mov	r2, r1
 8015664:	701a      	strb	r2, [r3, #0]
 8015666:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015668:	3301      	adds	r3, #1
 801566a:	647b      	str	r3, [r7, #68]	@ 0x44
 801566c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801566e:	2b0e      	cmp	r3, #14
 8015670:	dddf      	ble.n	8015632 <AES_CMAC_Final+0x36>
 8015672:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8015676:	005b      	lsls	r3, r3, #1
 8015678:	b2db      	uxtb	r3, r3
 801567a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        K[15] ^= 0x87;
 801567e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8015682:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 8015686:	43db      	mvns	r3, r3
 8015688:	b2db      	uxtb	r3, r3
 801568a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801568e:	e028      	b.n	80156e2 <AES_CMAC_Final+0xe6>
    }
    else
        LSHIFT( K, K );
 8015690:	2300      	movs	r3, #0
 8015692:	643b      	str	r3, [r7, #64]	@ 0x40
 8015694:	e01c      	b.n	80156d0 <AES_CMAC_Final+0xd4>
 8015696:	f107 021c 	add.w	r2, r7, #28
 801569a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801569c:	4413      	add	r3, r2
 801569e:	781b      	ldrb	r3, [r3, #0]
 80156a0:	b25b      	sxtb	r3, r3
 80156a2:	005b      	lsls	r3, r3, #1
 80156a4:	b25a      	sxtb	r2, r3
 80156a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80156a8:	3301      	adds	r3, #1
 80156aa:	3348      	adds	r3, #72	@ 0x48
 80156ac:	443b      	add	r3, r7
 80156ae:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80156b2:	09db      	lsrs	r3, r3, #7
 80156b4:	b2db      	uxtb	r3, r3
 80156b6:	b25b      	sxtb	r3, r3
 80156b8:	4313      	orrs	r3, r2
 80156ba:	b25b      	sxtb	r3, r3
 80156bc:	b2d9      	uxtb	r1, r3
 80156be:	f107 021c 	add.w	r2, r7, #28
 80156c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80156c4:	4413      	add	r3, r2
 80156c6:	460a      	mov	r2, r1
 80156c8:	701a      	strb	r2, [r3, #0]
 80156ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80156cc:	3301      	adds	r3, #1
 80156ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80156d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80156d2:	2b0e      	cmp	r3, #14
 80156d4:	dddf      	ble.n	8015696 <AES_CMAC_Final+0x9a>
 80156d6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80156da:	005b      	lsls	r3, r3, #1
 80156dc:	b2db      	uxtb	r3, r3
 80156de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    if( ctx->M_n == 16 )
 80156e2:	683b      	ldr	r3, [r7, #0]
 80156e4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80156e8:	2b10      	cmp	r3, #16
 80156ea:	d11d      	bne.n	8015728 <AES_CMAC_Final+0x12c>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 80156ec:	2300      	movs	r3, #0
 80156ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80156f0:	e016      	b.n	8015720 <AES_CMAC_Final+0x124>
 80156f2:	683a      	ldr	r2, [r7, #0]
 80156f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80156f6:	4413      	add	r3, r2
 80156f8:	f203 1301 	addw	r3, r3, #257	@ 0x101
 80156fc:	781a      	ldrb	r2, [r3, #0]
 80156fe:	f107 011c 	add.w	r1, r7, #28
 8015702:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015704:	440b      	add	r3, r1
 8015706:	781b      	ldrb	r3, [r3, #0]
 8015708:	4053      	eors	r3, r2
 801570a:	b2d9      	uxtb	r1, r3
 801570c:	683a      	ldr	r2, [r7, #0]
 801570e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015710:	4413      	add	r3, r2
 8015712:	f203 1301 	addw	r3, r3, #257	@ 0x101
 8015716:	460a      	mov	r2, r1
 8015718:	701a      	strb	r2, [r3, #0]
 801571a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801571c:	3301      	adds	r3, #1
 801571e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015720:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015722:	2b0f      	cmp	r3, #15
 8015724:	dde5      	ble.n	80156f2 <AES_CMAC_Final+0xf6>
 8015726:	e098      	b.n	801585a <AES_CMAC_Final+0x25e>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 8015728:	7f3b      	ldrb	r3, [r7, #28]
 801572a:	b25b      	sxtb	r3, r3
 801572c:	2b00      	cmp	r3, #0
 801572e:	da31      	bge.n	8015794 <AES_CMAC_Final+0x198>
        {
            LSHIFT( K, K );
 8015730:	2300      	movs	r3, #0
 8015732:	63bb      	str	r3, [r7, #56]	@ 0x38
 8015734:	e01c      	b.n	8015770 <AES_CMAC_Final+0x174>
 8015736:	f107 021c 	add.w	r2, r7, #28
 801573a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801573c:	4413      	add	r3, r2
 801573e:	781b      	ldrb	r3, [r3, #0]
 8015740:	b25b      	sxtb	r3, r3
 8015742:	005b      	lsls	r3, r3, #1
 8015744:	b25a      	sxtb	r2, r3
 8015746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015748:	3301      	adds	r3, #1
 801574a:	3348      	adds	r3, #72	@ 0x48
 801574c:	443b      	add	r3, r7
 801574e:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8015752:	09db      	lsrs	r3, r3, #7
 8015754:	b2db      	uxtb	r3, r3
 8015756:	b25b      	sxtb	r3, r3
 8015758:	4313      	orrs	r3, r2
 801575a:	b25b      	sxtb	r3, r3
 801575c:	b2d9      	uxtb	r1, r3
 801575e:	f107 021c 	add.w	r2, r7, #28
 8015762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015764:	4413      	add	r3, r2
 8015766:	460a      	mov	r2, r1
 8015768:	701a      	strb	r2, [r3, #0]
 801576a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801576c:	3301      	adds	r3, #1
 801576e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8015770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015772:	2b0e      	cmp	r3, #14
 8015774:	dddf      	ble.n	8015736 <AES_CMAC_Final+0x13a>
 8015776:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801577a:	005b      	lsls	r3, r3, #1
 801577c:	b2db      	uxtb	r3, r3
 801577e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            K[15] ^= 0x87;
 8015782:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8015786:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 801578a:	43db      	mvns	r3, r3
 801578c:	b2db      	uxtb	r3, r3
 801578e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8015792:	e028      	b.n	80157e6 <AES_CMAC_Final+0x1ea>
        }
        else
            LSHIFT( K, K );
 8015794:	2300      	movs	r3, #0
 8015796:	637b      	str	r3, [r7, #52]	@ 0x34
 8015798:	e01c      	b.n	80157d4 <AES_CMAC_Final+0x1d8>
 801579a:	f107 021c 	add.w	r2, r7, #28
 801579e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80157a0:	4413      	add	r3, r2
 80157a2:	781b      	ldrb	r3, [r3, #0]
 80157a4:	b25b      	sxtb	r3, r3
 80157a6:	005b      	lsls	r3, r3, #1
 80157a8:	b25a      	sxtb	r2, r3
 80157aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80157ac:	3301      	adds	r3, #1
 80157ae:	3348      	adds	r3, #72	@ 0x48
 80157b0:	443b      	add	r3, r7
 80157b2:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80157b6:	09db      	lsrs	r3, r3, #7
 80157b8:	b2db      	uxtb	r3, r3
 80157ba:	b25b      	sxtb	r3, r3
 80157bc:	4313      	orrs	r3, r2
 80157be:	b25b      	sxtb	r3, r3
 80157c0:	b2d9      	uxtb	r1, r3
 80157c2:	f107 021c 	add.w	r2, r7, #28
 80157c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80157c8:	4413      	add	r3, r2
 80157ca:	460a      	mov	r2, r1
 80157cc:	701a      	strb	r2, [r3, #0]
 80157ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80157d0:	3301      	adds	r3, #1
 80157d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80157d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80157d6:	2b0e      	cmp	r3, #14
 80157d8:	dddf      	ble.n	801579a <AES_CMAC_Final+0x19e>
 80157da:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80157de:	005b      	lsls	r3, r3, #1
 80157e0:	b2db      	uxtb	r3, r3
 80157e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 80157e6:	683b      	ldr	r3, [r7, #0]
 80157e8:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80157ec:	683a      	ldr	r2, [r7, #0]
 80157ee:	4413      	add	r3, r2
 80157f0:	2280      	movs	r2, #128	@ 0x80
 80157f2:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 80157f6:	e007      	b.n	8015808 <AES_CMAC_Final+0x20c>
            ctx->M_last[ctx->M_n] = 0;
 80157f8:	683b      	ldr	r3, [r7, #0]
 80157fa:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80157fe:	683a      	ldr	r2, [r7, #0]
 8015800:	4413      	add	r3, r2
 8015802:	2200      	movs	r2, #0
 8015804:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 8015808:	683b      	ldr	r3, [r7, #0]
 801580a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 801580e:	1c5a      	adds	r2, r3, #1
 8015810:	683b      	ldr	r3, [r7, #0]
 8015812:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 8015816:	683b      	ldr	r3, [r7, #0]
 8015818:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 801581c:	2b0f      	cmp	r3, #15
 801581e:	d9eb      	bls.n	80157f8 <AES_CMAC_Final+0x1fc>

        XOR( K, ctx->M_last );
 8015820:	2300      	movs	r3, #0
 8015822:	633b      	str	r3, [r7, #48]	@ 0x30
 8015824:	e016      	b.n	8015854 <AES_CMAC_Final+0x258>
 8015826:	683a      	ldr	r2, [r7, #0]
 8015828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801582a:	4413      	add	r3, r2
 801582c:	f203 1301 	addw	r3, r3, #257	@ 0x101
 8015830:	781a      	ldrb	r2, [r3, #0]
 8015832:	f107 011c 	add.w	r1, r7, #28
 8015836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015838:	440b      	add	r3, r1
 801583a:	781b      	ldrb	r3, [r3, #0]
 801583c:	4053      	eors	r3, r2
 801583e:	b2d9      	uxtb	r1, r3
 8015840:	683a      	ldr	r2, [r7, #0]
 8015842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015844:	4413      	add	r3, r2
 8015846:	f203 1301 	addw	r3, r3, #257	@ 0x101
 801584a:	460a      	mov	r2, r1
 801584c:	701a      	strb	r2, [r3, #0]
 801584e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015850:	3301      	adds	r3, #1
 8015852:	633b      	str	r3, [r7, #48]	@ 0x30
 8015854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015856:	2b0f      	cmp	r3, #15
 8015858:	dde5      	ble.n	8015826 <AES_CMAC_Final+0x22a>
    }
    XOR( ctx->M_last, ctx->X );
 801585a:	2300      	movs	r3, #0
 801585c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801585e:	e015      	b.n	801588c <AES_CMAC_Final+0x290>
 8015860:	683a      	ldr	r2, [r7, #0]
 8015862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015864:	4413      	add	r3, r2
 8015866:	33f1      	adds	r3, #241	@ 0xf1
 8015868:	781a      	ldrb	r2, [r3, #0]
 801586a:	6839      	ldr	r1, [r7, #0]
 801586c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801586e:	440b      	add	r3, r1
 8015870:	f203 1301 	addw	r3, r3, #257	@ 0x101
 8015874:	781b      	ldrb	r3, [r3, #0]
 8015876:	4053      	eors	r3, r2
 8015878:	b2d9      	uxtb	r1, r3
 801587a:	683a      	ldr	r2, [r7, #0]
 801587c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801587e:	4413      	add	r3, r2
 8015880:	33f1      	adds	r3, #241	@ 0xf1
 8015882:	460a      	mov	r2, r1
 8015884:	701a      	strb	r2, [r3, #0]
 8015886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015888:	3301      	adds	r3, #1
 801588a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801588c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801588e:	2b0f      	cmp	r3, #15
 8015890:	dde6      	ble.n	8015860 <AES_CMAC_Final+0x264>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8015892:	683b      	ldr	r3, [r7, #0]
 8015894:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 8015898:	f107 030c 	add.w	r3, r7, #12
 801589c:	2210      	movs	r2, #16
 801589e:	4618      	mov	r0, r3
 80158a0:	f001 faab 	bl	8016dfa <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 80158a4:	683a      	ldr	r2, [r7, #0]
 80158a6:	f107 030c 	add.w	r3, r7, #12
 80158aa:	6879      	ldr	r1, [r7, #4]
 80158ac:	4618      	mov	r0, r3
 80158ae:	f000 fd1d 	bl	80162ec <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 80158b2:	f107 031c 	add.w	r3, r7, #28
 80158b6:	2210      	movs	r2, #16
 80158b8:	2100      	movs	r1, #0
 80158ba:	4618      	mov	r0, r3
 80158bc:	f001 fad8 	bl	8016e70 <memset1>
}
 80158c0:	bf00      	nop
 80158c2:	3748      	adds	r7, #72	@ 0x48
 80158c4:	46bd      	mov	sp, r7
 80158c6:	bd80      	pop	{r7, pc}

080158c8 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 80158c8:	b480      	push	{r7}
 80158ca:	b083      	sub	sp, #12
 80158cc:	af00      	add	r7, sp, #0
 80158ce:	6078      	str	r0, [r7, #4]
 80158d0:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 80158d2:	683b      	ldr	r3, [r7, #0]
 80158d4:	781a      	ldrb	r2, [r3, #0]
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	3301      	adds	r3, #1
 80158de:	683a      	ldr	r2, [r7, #0]
 80158e0:	7852      	ldrb	r2, [r2, #1]
 80158e2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	3302      	adds	r3, #2
 80158e8:	683a      	ldr	r2, [r7, #0]
 80158ea:	7892      	ldrb	r2, [r2, #2]
 80158ec:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	3303      	adds	r3, #3
 80158f2:	683a      	ldr	r2, [r7, #0]
 80158f4:	78d2      	ldrb	r2, [r2, #3]
 80158f6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	3304      	adds	r3, #4
 80158fc:	683a      	ldr	r2, [r7, #0]
 80158fe:	7912      	ldrb	r2, [r2, #4]
 8015900:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	3305      	adds	r3, #5
 8015906:	683a      	ldr	r2, [r7, #0]
 8015908:	7952      	ldrb	r2, [r2, #5]
 801590a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	3306      	adds	r3, #6
 8015910:	683a      	ldr	r2, [r7, #0]
 8015912:	7992      	ldrb	r2, [r2, #6]
 8015914:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	3307      	adds	r3, #7
 801591a:	683a      	ldr	r2, [r7, #0]
 801591c:	79d2      	ldrb	r2, [r2, #7]
 801591e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	3308      	adds	r3, #8
 8015924:	683a      	ldr	r2, [r7, #0]
 8015926:	7a12      	ldrb	r2, [r2, #8]
 8015928:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	3309      	adds	r3, #9
 801592e:	683a      	ldr	r2, [r7, #0]
 8015930:	7a52      	ldrb	r2, [r2, #9]
 8015932:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	330a      	adds	r3, #10
 8015938:	683a      	ldr	r2, [r7, #0]
 801593a:	7a92      	ldrb	r2, [r2, #10]
 801593c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	330b      	adds	r3, #11
 8015942:	683a      	ldr	r2, [r7, #0]
 8015944:	7ad2      	ldrb	r2, [r2, #11]
 8015946:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	330c      	adds	r3, #12
 801594c:	683a      	ldr	r2, [r7, #0]
 801594e:	7b12      	ldrb	r2, [r2, #12]
 8015950:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	330d      	adds	r3, #13
 8015956:	683a      	ldr	r2, [r7, #0]
 8015958:	7b52      	ldrb	r2, [r2, #13]
 801595a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	330e      	adds	r3, #14
 8015960:	683a      	ldr	r2, [r7, #0]
 8015962:	7b92      	ldrb	r2, [r2, #14]
 8015964:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	330f      	adds	r3, #15
 801596a:	683a      	ldr	r2, [r7, #0]
 801596c:	7bd2      	ldrb	r2, [r2, #15]
 801596e:	701a      	strb	r2, [r3, #0]
#endif
}
 8015970:	bf00      	nop
 8015972:	370c      	adds	r7, #12
 8015974:	46bd      	mov	sp, r7
 8015976:	bc80      	pop	{r7}
 8015978:	4770      	bx	lr

0801597a <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 801597a:	b480      	push	{r7}
 801597c:	b085      	sub	sp, #20
 801597e:	af00      	add	r7, sp, #0
 8015980:	60f8      	str	r0, [r7, #12]
 8015982:	60b9      	str	r1, [r7, #8]
 8015984:	4613      	mov	r3, r2
 8015986:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 8015988:	e007      	b.n	801599a <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 801598a:	68ba      	ldr	r2, [r7, #8]
 801598c:	1c53      	adds	r3, r2, #1
 801598e:	60bb      	str	r3, [r7, #8]
 8015990:	68fb      	ldr	r3, [r7, #12]
 8015992:	1c59      	adds	r1, r3, #1
 8015994:	60f9      	str	r1, [r7, #12]
 8015996:	7812      	ldrb	r2, [r2, #0]
 8015998:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 801599a:	79fb      	ldrb	r3, [r7, #7]
 801599c:	1e5a      	subs	r2, r3, #1
 801599e:	71fa      	strb	r2, [r7, #7]
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d1f2      	bne.n	801598a <copy_block_nn+0x10>
}
 80159a4:	bf00      	nop
 80159a6:	bf00      	nop
 80159a8:	3714      	adds	r7, #20
 80159aa:	46bd      	mov	sp, r7
 80159ac:	bc80      	pop	{r7}
 80159ae:	4770      	bx	lr

080159b0 <xor_block>:

static void xor_block( void *d, const void *s )
{
 80159b0:	b480      	push	{r7}
 80159b2:	b083      	sub	sp, #12
 80159b4:	af00      	add	r7, sp, #0
 80159b6:	6078      	str	r0, [r7, #4]
 80159b8:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	781a      	ldrb	r2, [r3, #0]
 80159be:	683b      	ldr	r3, [r7, #0]
 80159c0:	781b      	ldrb	r3, [r3, #0]
 80159c2:	4053      	eors	r3, r2
 80159c4:	b2da      	uxtb	r2, r3
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	3301      	adds	r3, #1
 80159ce:	7819      	ldrb	r1, [r3, #0]
 80159d0:	683b      	ldr	r3, [r7, #0]
 80159d2:	3301      	adds	r3, #1
 80159d4:	781a      	ldrb	r2, [r3, #0]
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	3301      	adds	r3, #1
 80159da:	404a      	eors	r2, r1
 80159dc:	b2d2      	uxtb	r2, r2
 80159de:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	3302      	adds	r3, #2
 80159e4:	7819      	ldrb	r1, [r3, #0]
 80159e6:	683b      	ldr	r3, [r7, #0]
 80159e8:	3302      	adds	r3, #2
 80159ea:	781a      	ldrb	r2, [r3, #0]
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	3302      	adds	r3, #2
 80159f0:	404a      	eors	r2, r1
 80159f2:	b2d2      	uxtb	r2, r2
 80159f4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	3303      	adds	r3, #3
 80159fa:	7819      	ldrb	r1, [r3, #0]
 80159fc:	683b      	ldr	r3, [r7, #0]
 80159fe:	3303      	adds	r3, #3
 8015a00:	781a      	ldrb	r2, [r3, #0]
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	3303      	adds	r3, #3
 8015a06:	404a      	eors	r2, r1
 8015a08:	b2d2      	uxtb	r2, r2
 8015a0a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	3304      	adds	r3, #4
 8015a10:	7819      	ldrb	r1, [r3, #0]
 8015a12:	683b      	ldr	r3, [r7, #0]
 8015a14:	3304      	adds	r3, #4
 8015a16:	781a      	ldrb	r2, [r3, #0]
 8015a18:	687b      	ldr	r3, [r7, #4]
 8015a1a:	3304      	adds	r3, #4
 8015a1c:	404a      	eors	r2, r1
 8015a1e:	b2d2      	uxtb	r2, r2
 8015a20:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	3305      	adds	r3, #5
 8015a26:	7819      	ldrb	r1, [r3, #0]
 8015a28:	683b      	ldr	r3, [r7, #0]
 8015a2a:	3305      	adds	r3, #5
 8015a2c:	781a      	ldrb	r2, [r3, #0]
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	3305      	adds	r3, #5
 8015a32:	404a      	eors	r2, r1
 8015a34:	b2d2      	uxtb	r2, r2
 8015a36:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	3306      	adds	r3, #6
 8015a3c:	7819      	ldrb	r1, [r3, #0]
 8015a3e:	683b      	ldr	r3, [r7, #0]
 8015a40:	3306      	adds	r3, #6
 8015a42:	781a      	ldrb	r2, [r3, #0]
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	3306      	adds	r3, #6
 8015a48:	404a      	eors	r2, r1
 8015a4a:	b2d2      	uxtb	r2, r2
 8015a4c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	3307      	adds	r3, #7
 8015a52:	7819      	ldrb	r1, [r3, #0]
 8015a54:	683b      	ldr	r3, [r7, #0]
 8015a56:	3307      	adds	r3, #7
 8015a58:	781a      	ldrb	r2, [r3, #0]
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	3307      	adds	r3, #7
 8015a5e:	404a      	eors	r2, r1
 8015a60:	b2d2      	uxtb	r2, r2
 8015a62:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	3308      	adds	r3, #8
 8015a68:	7819      	ldrb	r1, [r3, #0]
 8015a6a:	683b      	ldr	r3, [r7, #0]
 8015a6c:	3308      	adds	r3, #8
 8015a6e:	781a      	ldrb	r2, [r3, #0]
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	3308      	adds	r3, #8
 8015a74:	404a      	eors	r2, r1
 8015a76:	b2d2      	uxtb	r2, r2
 8015a78:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	3309      	adds	r3, #9
 8015a7e:	7819      	ldrb	r1, [r3, #0]
 8015a80:	683b      	ldr	r3, [r7, #0]
 8015a82:	3309      	adds	r3, #9
 8015a84:	781a      	ldrb	r2, [r3, #0]
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	3309      	adds	r3, #9
 8015a8a:	404a      	eors	r2, r1
 8015a8c:	b2d2      	uxtb	r2, r2
 8015a8e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	330a      	adds	r3, #10
 8015a94:	7819      	ldrb	r1, [r3, #0]
 8015a96:	683b      	ldr	r3, [r7, #0]
 8015a98:	330a      	adds	r3, #10
 8015a9a:	781a      	ldrb	r2, [r3, #0]
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	330a      	adds	r3, #10
 8015aa0:	404a      	eors	r2, r1
 8015aa2:	b2d2      	uxtb	r2, r2
 8015aa4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	330b      	adds	r3, #11
 8015aaa:	7819      	ldrb	r1, [r3, #0]
 8015aac:	683b      	ldr	r3, [r7, #0]
 8015aae:	330b      	adds	r3, #11
 8015ab0:	781a      	ldrb	r2, [r3, #0]
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	330b      	adds	r3, #11
 8015ab6:	404a      	eors	r2, r1
 8015ab8:	b2d2      	uxtb	r2, r2
 8015aba:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	330c      	adds	r3, #12
 8015ac0:	7819      	ldrb	r1, [r3, #0]
 8015ac2:	683b      	ldr	r3, [r7, #0]
 8015ac4:	330c      	adds	r3, #12
 8015ac6:	781a      	ldrb	r2, [r3, #0]
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	330c      	adds	r3, #12
 8015acc:	404a      	eors	r2, r1
 8015ace:	b2d2      	uxtb	r2, r2
 8015ad0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	330d      	adds	r3, #13
 8015ad6:	7819      	ldrb	r1, [r3, #0]
 8015ad8:	683b      	ldr	r3, [r7, #0]
 8015ada:	330d      	adds	r3, #13
 8015adc:	781a      	ldrb	r2, [r3, #0]
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	330d      	adds	r3, #13
 8015ae2:	404a      	eors	r2, r1
 8015ae4:	b2d2      	uxtb	r2, r2
 8015ae6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	330e      	adds	r3, #14
 8015aec:	7819      	ldrb	r1, [r3, #0]
 8015aee:	683b      	ldr	r3, [r7, #0]
 8015af0:	330e      	adds	r3, #14
 8015af2:	781a      	ldrb	r2, [r3, #0]
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	330e      	adds	r3, #14
 8015af8:	404a      	eors	r2, r1
 8015afa:	b2d2      	uxtb	r2, r2
 8015afc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	330f      	adds	r3, #15
 8015b02:	7819      	ldrb	r1, [r3, #0]
 8015b04:	683b      	ldr	r3, [r7, #0]
 8015b06:	330f      	adds	r3, #15
 8015b08:	781a      	ldrb	r2, [r3, #0]
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	330f      	adds	r3, #15
 8015b0e:	404a      	eors	r2, r1
 8015b10:	b2d2      	uxtb	r2, r2
 8015b12:	701a      	strb	r2, [r3, #0]
#endif
}
 8015b14:	bf00      	nop
 8015b16:	370c      	adds	r7, #12
 8015b18:	46bd      	mov	sp, r7
 8015b1a:	bc80      	pop	{r7}
 8015b1c:	4770      	bx	lr

08015b1e <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 8015b1e:	b480      	push	{r7}
 8015b20:	b085      	sub	sp, #20
 8015b22:	af00      	add	r7, sp, #0
 8015b24:	60f8      	str	r0, [r7, #12]
 8015b26:	60b9      	str	r1, [r7, #8]
 8015b28:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 8015b2a:	68bb      	ldr	r3, [r7, #8]
 8015b2c:	781a      	ldrb	r2, [r3, #0]
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	781b      	ldrb	r3, [r3, #0]
 8015b32:	4053      	eors	r3, r2
 8015b34:	b2da      	uxtb	r2, r3
 8015b36:	68fb      	ldr	r3, [r7, #12]
 8015b38:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 8015b3a:	68bb      	ldr	r3, [r7, #8]
 8015b3c:	3301      	adds	r3, #1
 8015b3e:	7819      	ldrb	r1, [r3, #0]
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	3301      	adds	r3, #1
 8015b44:	781a      	ldrb	r2, [r3, #0]
 8015b46:	68fb      	ldr	r3, [r7, #12]
 8015b48:	3301      	adds	r3, #1
 8015b4a:	404a      	eors	r2, r1
 8015b4c:	b2d2      	uxtb	r2, r2
 8015b4e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 8015b50:	68bb      	ldr	r3, [r7, #8]
 8015b52:	3302      	adds	r3, #2
 8015b54:	7819      	ldrb	r1, [r3, #0]
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	3302      	adds	r3, #2
 8015b5a:	781a      	ldrb	r2, [r3, #0]
 8015b5c:	68fb      	ldr	r3, [r7, #12]
 8015b5e:	3302      	adds	r3, #2
 8015b60:	404a      	eors	r2, r1
 8015b62:	b2d2      	uxtb	r2, r2
 8015b64:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 8015b66:	68bb      	ldr	r3, [r7, #8]
 8015b68:	3303      	adds	r3, #3
 8015b6a:	7819      	ldrb	r1, [r3, #0]
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	3303      	adds	r3, #3
 8015b70:	781a      	ldrb	r2, [r3, #0]
 8015b72:	68fb      	ldr	r3, [r7, #12]
 8015b74:	3303      	adds	r3, #3
 8015b76:	404a      	eors	r2, r1
 8015b78:	b2d2      	uxtb	r2, r2
 8015b7a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 8015b7c:	68bb      	ldr	r3, [r7, #8]
 8015b7e:	3304      	adds	r3, #4
 8015b80:	7819      	ldrb	r1, [r3, #0]
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	3304      	adds	r3, #4
 8015b86:	781a      	ldrb	r2, [r3, #0]
 8015b88:	68fb      	ldr	r3, [r7, #12]
 8015b8a:	3304      	adds	r3, #4
 8015b8c:	404a      	eors	r2, r1
 8015b8e:	b2d2      	uxtb	r2, r2
 8015b90:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 8015b92:	68bb      	ldr	r3, [r7, #8]
 8015b94:	3305      	adds	r3, #5
 8015b96:	7819      	ldrb	r1, [r3, #0]
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	3305      	adds	r3, #5
 8015b9c:	781a      	ldrb	r2, [r3, #0]
 8015b9e:	68fb      	ldr	r3, [r7, #12]
 8015ba0:	3305      	adds	r3, #5
 8015ba2:	404a      	eors	r2, r1
 8015ba4:	b2d2      	uxtb	r2, r2
 8015ba6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 8015ba8:	68bb      	ldr	r3, [r7, #8]
 8015baa:	3306      	adds	r3, #6
 8015bac:	7819      	ldrb	r1, [r3, #0]
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	3306      	adds	r3, #6
 8015bb2:	781a      	ldrb	r2, [r3, #0]
 8015bb4:	68fb      	ldr	r3, [r7, #12]
 8015bb6:	3306      	adds	r3, #6
 8015bb8:	404a      	eors	r2, r1
 8015bba:	b2d2      	uxtb	r2, r2
 8015bbc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 8015bbe:	68bb      	ldr	r3, [r7, #8]
 8015bc0:	3307      	adds	r3, #7
 8015bc2:	7819      	ldrb	r1, [r3, #0]
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	3307      	adds	r3, #7
 8015bc8:	781a      	ldrb	r2, [r3, #0]
 8015bca:	68fb      	ldr	r3, [r7, #12]
 8015bcc:	3307      	adds	r3, #7
 8015bce:	404a      	eors	r2, r1
 8015bd0:	b2d2      	uxtb	r2, r2
 8015bd2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 8015bd4:	68bb      	ldr	r3, [r7, #8]
 8015bd6:	3308      	adds	r3, #8
 8015bd8:	7819      	ldrb	r1, [r3, #0]
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	3308      	adds	r3, #8
 8015bde:	781a      	ldrb	r2, [r3, #0]
 8015be0:	68fb      	ldr	r3, [r7, #12]
 8015be2:	3308      	adds	r3, #8
 8015be4:	404a      	eors	r2, r1
 8015be6:	b2d2      	uxtb	r2, r2
 8015be8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 8015bea:	68bb      	ldr	r3, [r7, #8]
 8015bec:	3309      	adds	r3, #9
 8015bee:	7819      	ldrb	r1, [r3, #0]
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	3309      	adds	r3, #9
 8015bf4:	781a      	ldrb	r2, [r3, #0]
 8015bf6:	68fb      	ldr	r3, [r7, #12]
 8015bf8:	3309      	adds	r3, #9
 8015bfa:	404a      	eors	r2, r1
 8015bfc:	b2d2      	uxtb	r2, r2
 8015bfe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 8015c00:	68bb      	ldr	r3, [r7, #8]
 8015c02:	330a      	adds	r3, #10
 8015c04:	7819      	ldrb	r1, [r3, #0]
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	330a      	adds	r3, #10
 8015c0a:	781a      	ldrb	r2, [r3, #0]
 8015c0c:	68fb      	ldr	r3, [r7, #12]
 8015c0e:	330a      	adds	r3, #10
 8015c10:	404a      	eors	r2, r1
 8015c12:	b2d2      	uxtb	r2, r2
 8015c14:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 8015c16:	68bb      	ldr	r3, [r7, #8]
 8015c18:	330b      	adds	r3, #11
 8015c1a:	7819      	ldrb	r1, [r3, #0]
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	330b      	adds	r3, #11
 8015c20:	781a      	ldrb	r2, [r3, #0]
 8015c22:	68fb      	ldr	r3, [r7, #12]
 8015c24:	330b      	adds	r3, #11
 8015c26:	404a      	eors	r2, r1
 8015c28:	b2d2      	uxtb	r2, r2
 8015c2a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 8015c2c:	68bb      	ldr	r3, [r7, #8]
 8015c2e:	330c      	adds	r3, #12
 8015c30:	7819      	ldrb	r1, [r3, #0]
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	330c      	adds	r3, #12
 8015c36:	781a      	ldrb	r2, [r3, #0]
 8015c38:	68fb      	ldr	r3, [r7, #12]
 8015c3a:	330c      	adds	r3, #12
 8015c3c:	404a      	eors	r2, r1
 8015c3e:	b2d2      	uxtb	r2, r2
 8015c40:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 8015c42:	68bb      	ldr	r3, [r7, #8]
 8015c44:	330d      	adds	r3, #13
 8015c46:	7819      	ldrb	r1, [r3, #0]
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	330d      	adds	r3, #13
 8015c4c:	781a      	ldrb	r2, [r3, #0]
 8015c4e:	68fb      	ldr	r3, [r7, #12]
 8015c50:	330d      	adds	r3, #13
 8015c52:	404a      	eors	r2, r1
 8015c54:	b2d2      	uxtb	r2, r2
 8015c56:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 8015c58:	68bb      	ldr	r3, [r7, #8]
 8015c5a:	330e      	adds	r3, #14
 8015c5c:	7819      	ldrb	r1, [r3, #0]
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	330e      	adds	r3, #14
 8015c62:	781a      	ldrb	r2, [r3, #0]
 8015c64:	68fb      	ldr	r3, [r7, #12]
 8015c66:	330e      	adds	r3, #14
 8015c68:	404a      	eors	r2, r1
 8015c6a:	b2d2      	uxtb	r2, r2
 8015c6c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 8015c6e:	68bb      	ldr	r3, [r7, #8]
 8015c70:	330f      	adds	r3, #15
 8015c72:	7819      	ldrb	r1, [r3, #0]
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	330f      	adds	r3, #15
 8015c78:	781a      	ldrb	r2, [r3, #0]
 8015c7a:	68fb      	ldr	r3, [r7, #12]
 8015c7c:	330f      	adds	r3, #15
 8015c7e:	404a      	eors	r2, r1
 8015c80:	b2d2      	uxtb	r2, r2
 8015c82:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 8015c84:	bf00      	nop
 8015c86:	3714      	adds	r7, #20
 8015c88:	46bd      	mov	sp, r7
 8015c8a:	bc80      	pop	{r7}
 8015c8c:	4770      	bx	lr

08015c8e <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 8015c8e:	b580      	push	{r7, lr}
 8015c90:	b082      	sub	sp, #8
 8015c92:	af00      	add	r7, sp, #0
 8015c94:	6078      	str	r0, [r7, #4]
 8015c96:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 8015c98:	6839      	ldr	r1, [r7, #0]
 8015c9a:	6878      	ldr	r0, [r7, #4]
 8015c9c:	f7ff fe88 	bl	80159b0 <xor_block>
}
 8015ca0:	bf00      	nop
 8015ca2:	3708      	adds	r7, #8
 8015ca4:	46bd      	mov	sp, r7
 8015ca6:	bd80      	pop	{r7, pc}

08015ca8 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 8015ca8:	b480      	push	{r7}
 8015caa:	b085      	sub	sp, #20
 8015cac:	af00      	add	r7, sp, #0
 8015cae:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	781b      	ldrb	r3, [r3, #0]
 8015cb4:	461a      	mov	r2, r3
 8015cb6:	4b48      	ldr	r3, [pc, #288]	@ (8015dd8 <shift_sub_rows+0x130>)
 8015cb8:	5c9a      	ldrb	r2, [r3, r2]
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	701a      	strb	r2, [r3, #0]
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	3304      	adds	r3, #4
 8015cc2:	781b      	ldrb	r3, [r3, #0]
 8015cc4:	4619      	mov	r1, r3
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	3304      	adds	r3, #4
 8015cca:	4a43      	ldr	r2, [pc, #268]	@ (8015dd8 <shift_sub_rows+0x130>)
 8015ccc:	5c52      	ldrb	r2, [r2, r1]
 8015cce:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	3308      	adds	r3, #8
 8015cd4:	781b      	ldrb	r3, [r3, #0]
 8015cd6:	4619      	mov	r1, r3
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	3308      	adds	r3, #8
 8015cdc:	4a3e      	ldr	r2, [pc, #248]	@ (8015dd8 <shift_sub_rows+0x130>)
 8015cde:	5c52      	ldrb	r2, [r2, r1]
 8015ce0:	701a      	strb	r2, [r3, #0]
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	330c      	adds	r3, #12
 8015ce6:	781b      	ldrb	r3, [r3, #0]
 8015ce8:	4619      	mov	r1, r3
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	330c      	adds	r3, #12
 8015cee:	4a3a      	ldr	r2, [pc, #232]	@ (8015dd8 <shift_sub_rows+0x130>)
 8015cf0:	5c52      	ldrb	r2, [r2, r1]
 8015cf2:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	785b      	ldrb	r3, [r3, #1]
 8015cf8:	73fb      	strb	r3, [r7, #15]
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	3305      	adds	r3, #5
 8015cfe:	781b      	ldrb	r3, [r3, #0]
 8015d00:	4619      	mov	r1, r3
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	3301      	adds	r3, #1
 8015d06:	4a34      	ldr	r2, [pc, #208]	@ (8015dd8 <shift_sub_rows+0x130>)
 8015d08:	5c52      	ldrb	r2, [r2, r1]
 8015d0a:	701a      	strb	r2, [r3, #0]
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	3309      	adds	r3, #9
 8015d10:	781b      	ldrb	r3, [r3, #0]
 8015d12:	4619      	mov	r1, r3
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	3305      	adds	r3, #5
 8015d18:	4a2f      	ldr	r2, [pc, #188]	@ (8015dd8 <shift_sub_rows+0x130>)
 8015d1a:	5c52      	ldrb	r2, [r2, r1]
 8015d1c:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	330d      	adds	r3, #13
 8015d22:	781b      	ldrb	r3, [r3, #0]
 8015d24:	4619      	mov	r1, r3
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	3309      	adds	r3, #9
 8015d2a:	4a2b      	ldr	r2, [pc, #172]	@ (8015dd8 <shift_sub_rows+0x130>)
 8015d2c:	5c52      	ldrb	r2, [r2, r1]
 8015d2e:	701a      	strb	r2, [r3, #0]
 8015d30:	7bfa      	ldrb	r2, [r7, #15]
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	330d      	adds	r3, #13
 8015d36:	4928      	ldr	r1, [pc, #160]	@ (8015dd8 <shift_sub_rows+0x130>)
 8015d38:	5c8a      	ldrb	r2, [r1, r2]
 8015d3a:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	789b      	ldrb	r3, [r3, #2]
 8015d40:	73fb      	strb	r3, [r7, #15]
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	330a      	adds	r3, #10
 8015d46:	781b      	ldrb	r3, [r3, #0]
 8015d48:	4619      	mov	r1, r3
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	3302      	adds	r3, #2
 8015d4e:	4a22      	ldr	r2, [pc, #136]	@ (8015dd8 <shift_sub_rows+0x130>)
 8015d50:	5c52      	ldrb	r2, [r2, r1]
 8015d52:	701a      	strb	r2, [r3, #0]
 8015d54:	7bfa      	ldrb	r2, [r7, #15]
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	330a      	adds	r3, #10
 8015d5a:	491f      	ldr	r1, [pc, #124]	@ (8015dd8 <shift_sub_rows+0x130>)
 8015d5c:	5c8a      	ldrb	r2, [r1, r2]
 8015d5e:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	799b      	ldrb	r3, [r3, #6]
 8015d64:	73fb      	strb	r3, [r7, #15]
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	330e      	adds	r3, #14
 8015d6a:	781b      	ldrb	r3, [r3, #0]
 8015d6c:	4619      	mov	r1, r3
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	3306      	adds	r3, #6
 8015d72:	4a19      	ldr	r2, [pc, #100]	@ (8015dd8 <shift_sub_rows+0x130>)
 8015d74:	5c52      	ldrb	r2, [r2, r1]
 8015d76:	701a      	strb	r2, [r3, #0]
 8015d78:	7bfa      	ldrb	r2, [r7, #15]
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	330e      	adds	r3, #14
 8015d7e:	4916      	ldr	r1, [pc, #88]	@ (8015dd8 <shift_sub_rows+0x130>)
 8015d80:	5c8a      	ldrb	r2, [r1, r2]
 8015d82:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	7bdb      	ldrb	r3, [r3, #15]
 8015d88:	73fb      	strb	r3, [r7, #15]
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	330b      	adds	r3, #11
 8015d8e:	781b      	ldrb	r3, [r3, #0]
 8015d90:	4619      	mov	r1, r3
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	330f      	adds	r3, #15
 8015d96:	4a10      	ldr	r2, [pc, #64]	@ (8015dd8 <shift_sub_rows+0x130>)
 8015d98:	5c52      	ldrb	r2, [r2, r1]
 8015d9a:	701a      	strb	r2, [r3, #0]
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	3307      	adds	r3, #7
 8015da0:	781b      	ldrb	r3, [r3, #0]
 8015da2:	4619      	mov	r1, r3
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	330b      	adds	r3, #11
 8015da8:	4a0b      	ldr	r2, [pc, #44]	@ (8015dd8 <shift_sub_rows+0x130>)
 8015daa:	5c52      	ldrb	r2, [r2, r1]
 8015dac:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	3303      	adds	r3, #3
 8015db2:	781b      	ldrb	r3, [r3, #0]
 8015db4:	4619      	mov	r1, r3
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	3307      	adds	r3, #7
 8015dba:	4a07      	ldr	r2, [pc, #28]	@ (8015dd8 <shift_sub_rows+0x130>)
 8015dbc:	5c52      	ldrb	r2, [r2, r1]
 8015dbe:	701a      	strb	r2, [r3, #0]
 8015dc0:	7bfa      	ldrb	r2, [r7, #15]
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	3303      	adds	r3, #3
 8015dc6:	4904      	ldr	r1, [pc, #16]	@ (8015dd8 <shift_sub_rows+0x130>)
 8015dc8:	5c8a      	ldrb	r2, [r1, r2]
 8015dca:	701a      	strb	r2, [r3, #0]
}
 8015dcc:	bf00      	nop
 8015dce:	3714      	adds	r7, #20
 8015dd0:	46bd      	mov	sp, r7
 8015dd2:	bc80      	pop	{r7}
 8015dd4:	4770      	bx	lr
 8015dd6:	bf00      	nop
 8015dd8:	080210e8 	.word	0x080210e8

08015ddc <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 8015ddc:	b580      	push	{r7, lr}
 8015dde:	b086      	sub	sp, #24
 8015de0:	af00      	add	r7, sp, #0
 8015de2:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 8015de4:	f107 0308 	add.w	r3, r7, #8
 8015de8:	6879      	ldr	r1, [r7, #4]
 8015dea:	4618      	mov	r0, r3
 8015dec:	f7ff fd6c 	bl	80158c8 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8015df0:	7a3b      	ldrb	r3, [r7, #8]
 8015df2:	461a      	mov	r2, r3
 8015df4:	4b9a      	ldr	r3, [pc, #616]	@ (8016060 <mix_sub_columns+0x284>)
 8015df6:	5c9a      	ldrb	r2, [r3, r2]
 8015df8:	7b7b      	ldrb	r3, [r7, #13]
 8015dfa:	4619      	mov	r1, r3
 8015dfc:	4b99      	ldr	r3, [pc, #612]	@ (8016064 <mix_sub_columns+0x288>)
 8015dfe:	5c5b      	ldrb	r3, [r3, r1]
 8015e00:	4053      	eors	r3, r2
 8015e02:	b2da      	uxtb	r2, r3
 8015e04:	7cbb      	ldrb	r3, [r7, #18]
 8015e06:	4619      	mov	r1, r3
 8015e08:	4b97      	ldr	r3, [pc, #604]	@ (8016068 <mix_sub_columns+0x28c>)
 8015e0a:	5c5b      	ldrb	r3, [r3, r1]
 8015e0c:	4053      	eors	r3, r2
 8015e0e:	b2da      	uxtb	r2, r3
 8015e10:	7dfb      	ldrb	r3, [r7, #23]
 8015e12:	4619      	mov	r1, r3
 8015e14:	4b94      	ldr	r3, [pc, #592]	@ (8016068 <mix_sub_columns+0x28c>)
 8015e16:	5c5b      	ldrb	r3, [r3, r1]
 8015e18:	4053      	eors	r3, r2
 8015e1a:	b2da      	uxtb	r2, r3
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8015e20:	7a3b      	ldrb	r3, [r7, #8]
 8015e22:	461a      	mov	r2, r3
 8015e24:	4b90      	ldr	r3, [pc, #576]	@ (8016068 <mix_sub_columns+0x28c>)
 8015e26:	5c9a      	ldrb	r2, [r3, r2]
 8015e28:	7b7b      	ldrb	r3, [r7, #13]
 8015e2a:	4619      	mov	r1, r3
 8015e2c:	4b8c      	ldr	r3, [pc, #560]	@ (8016060 <mix_sub_columns+0x284>)
 8015e2e:	5c5b      	ldrb	r3, [r3, r1]
 8015e30:	4053      	eors	r3, r2
 8015e32:	b2da      	uxtb	r2, r3
 8015e34:	7cbb      	ldrb	r3, [r7, #18]
 8015e36:	4619      	mov	r1, r3
 8015e38:	4b8a      	ldr	r3, [pc, #552]	@ (8016064 <mix_sub_columns+0x288>)
 8015e3a:	5c5b      	ldrb	r3, [r3, r1]
 8015e3c:	4053      	eors	r3, r2
 8015e3e:	b2d9      	uxtb	r1, r3
 8015e40:	7dfb      	ldrb	r3, [r7, #23]
 8015e42:	461a      	mov	r2, r3
 8015e44:	4b88      	ldr	r3, [pc, #544]	@ (8016068 <mix_sub_columns+0x28c>)
 8015e46:	5c9a      	ldrb	r2, [r3, r2]
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	3301      	adds	r3, #1
 8015e4c:	404a      	eors	r2, r1
 8015e4e:	b2d2      	uxtb	r2, r2
 8015e50:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8015e52:	7a3b      	ldrb	r3, [r7, #8]
 8015e54:	461a      	mov	r2, r3
 8015e56:	4b84      	ldr	r3, [pc, #528]	@ (8016068 <mix_sub_columns+0x28c>)
 8015e58:	5c9a      	ldrb	r2, [r3, r2]
 8015e5a:	7b7b      	ldrb	r3, [r7, #13]
 8015e5c:	4619      	mov	r1, r3
 8015e5e:	4b82      	ldr	r3, [pc, #520]	@ (8016068 <mix_sub_columns+0x28c>)
 8015e60:	5c5b      	ldrb	r3, [r3, r1]
 8015e62:	4053      	eors	r3, r2
 8015e64:	b2da      	uxtb	r2, r3
 8015e66:	7cbb      	ldrb	r3, [r7, #18]
 8015e68:	4619      	mov	r1, r3
 8015e6a:	4b7d      	ldr	r3, [pc, #500]	@ (8016060 <mix_sub_columns+0x284>)
 8015e6c:	5c5b      	ldrb	r3, [r3, r1]
 8015e6e:	4053      	eors	r3, r2
 8015e70:	b2d9      	uxtb	r1, r3
 8015e72:	7dfb      	ldrb	r3, [r7, #23]
 8015e74:	461a      	mov	r2, r3
 8015e76:	4b7b      	ldr	r3, [pc, #492]	@ (8016064 <mix_sub_columns+0x288>)
 8015e78:	5c9a      	ldrb	r2, [r3, r2]
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	3302      	adds	r3, #2
 8015e7e:	404a      	eors	r2, r1
 8015e80:	b2d2      	uxtb	r2, r2
 8015e82:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8015e84:	7a3b      	ldrb	r3, [r7, #8]
 8015e86:	461a      	mov	r2, r3
 8015e88:	4b76      	ldr	r3, [pc, #472]	@ (8016064 <mix_sub_columns+0x288>)
 8015e8a:	5c9a      	ldrb	r2, [r3, r2]
 8015e8c:	7b7b      	ldrb	r3, [r7, #13]
 8015e8e:	4619      	mov	r1, r3
 8015e90:	4b75      	ldr	r3, [pc, #468]	@ (8016068 <mix_sub_columns+0x28c>)
 8015e92:	5c5b      	ldrb	r3, [r3, r1]
 8015e94:	4053      	eors	r3, r2
 8015e96:	b2da      	uxtb	r2, r3
 8015e98:	7cbb      	ldrb	r3, [r7, #18]
 8015e9a:	4619      	mov	r1, r3
 8015e9c:	4b72      	ldr	r3, [pc, #456]	@ (8016068 <mix_sub_columns+0x28c>)
 8015e9e:	5c5b      	ldrb	r3, [r3, r1]
 8015ea0:	4053      	eors	r3, r2
 8015ea2:	b2d9      	uxtb	r1, r3
 8015ea4:	7dfb      	ldrb	r3, [r7, #23]
 8015ea6:	461a      	mov	r2, r3
 8015ea8:	4b6d      	ldr	r3, [pc, #436]	@ (8016060 <mix_sub_columns+0x284>)
 8015eaa:	5c9a      	ldrb	r2, [r3, r2]
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	3303      	adds	r3, #3
 8015eb0:	404a      	eors	r2, r1
 8015eb2:	b2d2      	uxtb	r2, r2
 8015eb4:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8015eb6:	7b3b      	ldrb	r3, [r7, #12]
 8015eb8:	461a      	mov	r2, r3
 8015eba:	4b69      	ldr	r3, [pc, #420]	@ (8016060 <mix_sub_columns+0x284>)
 8015ebc:	5c9a      	ldrb	r2, [r3, r2]
 8015ebe:	7c7b      	ldrb	r3, [r7, #17]
 8015ec0:	4619      	mov	r1, r3
 8015ec2:	4b68      	ldr	r3, [pc, #416]	@ (8016064 <mix_sub_columns+0x288>)
 8015ec4:	5c5b      	ldrb	r3, [r3, r1]
 8015ec6:	4053      	eors	r3, r2
 8015ec8:	b2da      	uxtb	r2, r3
 8015eca:	7dbb      	ldrb	r3, [r7, #22]
 8015ecc:	4619      	mov	r1, r3
 8015ece:	4b66      	ldr	r3, [pc, #408]	@ (8016068 <mix_sub_columns+0x28c>)
 8015ed0:	5c5b      	ldrb	r3, [r3, r1]
 8015ed2:	4053      	eors	r3, r2
 8015ed4:	b2d9      	uxtb	r1, r3
 8015ed6:	7afb      	ldrb	r3, [r7, #11]
 8015ed8:	461a      	mov	r2, r3
 8015eda:	4b63      	ldr	r3, [pc, #396]	@ (8016068 <mix_sub_columns+0x28c>)
 8015edc:	5c9a      	ldrb	r2, [r3, r2]
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	3304      	adds	r3, #4
 8015ee2:	404a      	eors	r2, r1
 8015ee4:	b2d2      	uxtb	r2, r2
 8015ee6:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8015ee8:	7b3b      	ldrb	r3, [r7, #12]
 8015eea:	461a      	mov	r2, r3
 8015eec:	4b5e      	ldr	r3, [pc, #376]	@ (8016068 <mix_sub_columns+0x28c>)
 8015eee:	5c9a      	ldrb	r2, [r3, r2]
 8015ef0:	7c7b      	ldrb	r3, [r7, #17]
 8015ef2:	4619      	mov	r1, r3
 8015ef4:	4b5a      	ldr	r3, [pc, #360]	@ (8016060 <mix_sub_columns+0x284>)
 8015ef6:	5c5b      	ldrb	r3, [r3, r1]
 8015ef8:	4053      	eors	r3, r2
 8015efa:	b2da      	uxtb	r2, r3
 8015efc:	7dbb      	ldrb	r3, [r7, #22]
 8015efe:	4619      	mov	r1, r3
 8015f00:	4b58      	ldr	r3, [pc, #352]	@ (8016064 <mix_sub_columns+0x288>)
 8015f02:	5c5b      	ldrb	r3, [r3, r1]
 8015f04:	4053      	eors	r3, r2
 8015f06:	b2d9      	uxtb	r1, r3
 8015f08:	7afb      	ldrb	r3, [r7, #11]
 8015f0a:	461a      	mov	r2, r3
 8015f0c:	4b56      	ldr	r3, [pc, #344]	@ (8016068 <mix_sub_columns+0x28c>)
 8015f0e:	5c9a      	ldrb	r2, [r3, r2]
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	3305      	adds	r3, #5
 8015f14:	404a      	eors	r2, r1
 8015f16:	b2d2      	uxtb	r2, r2
 8015f18:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8015f1a:	7b3b      	ldrb	r3, [r7, #12]
 8015f1c:	461a      	mov	r2, r3
 8015f1e:	4b52      	ldr	r3, [pc, #328]	@ (8016068 <mix_sub_columns+0x28c>)
 8015f20:	5c9a      	ldrb	r2, [r3, r2]
 8015f22:	7c7b      	ldrb	r3, [r7, #17]
 8015f24:	4619      	mov	r1, r3
 8015f26:	4b50      	ldr	r3, [pc, #320]	@ (8016068 <mix_sub_columns+0x28c>)
 8015f28:	5c5b      	ldrb	r3, [r3, r1]
 8015f2a:	4053      	eors	r3, r2
 8015f2c:	b2da      	uxtb	r2, r3
 8015f2e:	7dbb      	ldrb	r3, [r7, #22]
 8015f30:	4619      	mov	r1, r3
 8015f32:	4b4b      	ldr	r3, [pc, #300]	@ (8016060 <mix_sub_columns+0x284>)
 8015f34:	5c5b      	ldrb	r3, [r3, r1]
 8015f36:	4053      	eors	r3, r2
 8015f38:	b2d9      	uxtb	r1, r3
 8015f3a:	7afb      	ldrb	r3, [r7, #11]
 8015f3c:	461a      	mov	r2, r3
 8015f3e:	4b49      	ldr	r3, [pc, #292]	@ (8016064 <mix_sub_columns+0x288>)
 8015f40:	5c9a      	ldrb	r2, [r3, r2]
 8015f42:	687b      	ldr	r3, [r7, #4]
 8015f44:	3306      	adds	r3, #6
 8015f46:	404a      	eors	r2, r1
 8015f48:	b2d2      	uxtb	r2, r2
 8015f4a:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 8015f4c:	7b3b      	ldrb	r3, [r7, #12]
 8015f4e:	461a      	mov	r2, r3
 8015f50:	4b44      	ldr	r3, [pc, #272]	@ (8016064 <mix_sub_columns+0x288>)
 8015f52:	5c9a      	ldrb	r2, [r3, r2]
 8015f54:	7c7b      	ldrb	r3, [r7, #17]
 8015f56:	4619      	mov	r1, r3
 8015f58:	4b43      	ldr	r3, [pc, #268]	@ (8016068 <mix_sub_columns+0x28c>)
 8015f5a:	5c5b      	ldrb	r3, [r3, r1]
 8015f5c:	4053      	eors	r3, r2
 8015f5e:	b2da      	uxtb	r2, r3
 8015f60:	7dbb      	ldrb	r3, [r7, #22]
 8015f62:	4619      	mov	r1, r3
 8015f64:	4b40      	ldr	r3, [pc, #256]	@ (8016068 <mix_sub_columns+0x28c>)
 8015f66:	5c5b      	ldrb	r3, [r3, r1]
 8015f68:	4053      	eors	r3, r2
 8015f6a:	b2d9      	uxtb	r1, r3
 8015f6c:	7afb      	ldrb	r3, [r7, #11]
 8015f6e:	461a      	mov	r2, r3
 8015f70:	4b3b      	ldr	r3, [pc, #236]	@ (8016060 <mix_sub_columns+0x284>)
 8015f72:	5c9a      	ldrb	r2, [r3, r2]
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	3307      	adds	r3, #7
 8015f78:	404a      	eors	r2, r1
 8015f7a:	b2d2      	uxtb	r2, r2
 8015f7c:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8015f7e:	7c3b      	ldrb	r3, [r7, #16]
 8015f80:	461a      	mov	r2, r3
 8015f82:	4b37      	ldr	r3, [pc, #220]	@ (8016060 <mix_sub_columns+0x284>)
 8015f84:	5c9a      	ldrb	r2, [r3, r2]
 8015f86:	7d7b      	ldrb	r3, [r7, #21]
 8015f88:	4619      	mov	r1, r3
 8015f8a:	4b36      	ldr	r3, [pc, #216]	@ (8016064 <mix_sub_columns+0x288>)
 8015f8c:	5c5b      	ldrb	r3, [r3, r1]
 8015f8e:	4053      	eors	r3, r2
 8015f90:	b2da      	uxtb	r2, r3
 8015f92:	7abb      	ldrb	r3, [r7, #10]
 8015f94:	4619      	mov	r1, r3
 8015f96:	4b34      	ldr	r3, [pc, #208]	@ (8016068 <mix_sub_columns+0x28c>)
 8015f98:	5c5b      	ldrb	r3, [r3, r1]
 8015f9a:	4053      	eors	r3, r2
 8015f9c:	b2d9      	uxtb	r1, r3
 8015f9e:	7bfb      	ldrb	r3, [r7, #15]
 8015fa0:	461a      	mov	r2, r3
 8015fa2:	4b31      	ldr	r3, [pc, #196]	@ (8016068 <mix_sub_columns+0x28c>)
 8015fa4:	5c9a      	ldrb	r2, [r3, r2]
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	3308      	adds	r3, #8
 8015faa:	404a      	eors	r2, r1
 8015fac:	b2d2      	uxtb	r2, r2
 8015fae:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 8015fb0:	7c3b      	ldrb	r3, [r7, #16]
 8015fb2:	461a      	mov	r2, r3
 8015fb4:	4b2c      	ldr	r3, [pc, #176]	@ (8016068 <mix_sub_columns+0x28c>)
 8015fb6:	5c9a      	ldrb	r2, [r3, r2]
 8015fb8:	7d7b      	ldrb	r3, [r7, #21]
 8015fba:	4619      	mov	r1, r3
 8015fbc:	4b28      	ldr	r3, [pc, #160]	@ (8016060 <mix_sub_columns+0x284>)
 8015fbe:	5c5b      	ldrb	r3, [r3, r1]
 8015fc0:	4053      	eors	r3, r2
 8015fc2:	b2da      	uxtb	r2, r3
 8015fc4:	7abb      	ldrb	r3, [r7, #10]
 8015fc6:	4619      	mov	r1, r3
 8015fc8:	4b26      	ldr	r3, [pc, #152]	@ (8016064 <mix_sub_columns+0x288>)
 8015fca:	5c5b      	ldrb	r3, [r3, r1]
 8015fcc:	4053      	eors	r3, r2
 8015fce:	b2d9      	uxtb	r1, r3
 8015fd0:	7bfb      	ldrb	r3, [r7, #15]
 8015fd2:	461a      	mov	r2, r3
 8015fd4:	4b24      	ldr	r3, [pc, #144]	@ (8016068 <mix_sub_columns+0x28c>)
 8015fd6:	5c9a      	ldrb	r2, [r3, r2]
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	3309      	adds	r3, #9
 8015fdc:	404a      	eors	r2, r1
 8015fde:	b2d2      	uxtb	r2, r2
 8015fe0:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8015fe2:	7c3b      	ldrb	r3, [r7, #16]
 8015fe4:	461a      	mov	r2, r3
 8015fe6:	4b20      	ldr	r3, [pc, #128]	@ (8016068 <mix_sub_columns+0x28c>)
 8015fe8:	5c9a      	ldrb	r2, [r3, r2]
 8015fea:	7d7b      	ldrb	r3, [r7, #21]
 8015fec:	4619      	mov	r1, r3
 8015fee:	4b1e      	ldr	r3, [pc, #120]	@ (8016068 <mix_sub_columns+0x28c>)
 8015ff0:	5c5b      	ldrb	r3, [r3, r1]
 8015ff2:	4053      	eors	r3, r2
 8015ff4:	b2da      	uxtb	r2, r3
 8015ff6:	7abb      	ldrb	r3, [r7, #10]
 8015ff8:	4619      	mov	r1, r3
 8015ffa:	4b19      	ldr	r3, [pc, #100]	@ (8016060 <mix_sub_columns+0x284>)
 8015ffc:	5c5b      	ldrb	r3, [r3, r1]
 8015ffe:	4053      	eors	r3, r2
 8016000:	b2d9      	uxtb	r1, r3
 8016002:	7bfb      	ldrb	r3, [r7, #15]
 8016004:	461a      	mov	r2, r3
 8016006:	4b17      	ldr	r3, [pc, #92]	@ (8016064 <mix_sub_columns+0x288>)
 8016008:	5c9a      	ldrb	r2, [r3, r2]
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	330a      	adds	r3, #10
 801600e:	404a      	eors	r2, r1
 8016010:	b2d2      	uxtb	r2, r2
 8016012:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 8016014:	7c3b      	ldrb	r3, [r7, #16]
 8016016:	461a      	mov	r2, r3
 8016018:	4b12      	ldr	r3, [pc, #72]	@ (8016064 <mix_sub_columns+0x288>)
 801601a:	5c9a      	ldrb	r2, [r3, r2]
 801601c:	7d7b      	ldrb	r3, [r7, #21]
 801601e:	4619      	mov	r1, r3
 8016020:	4b11      	ldr	r3, [pc, #68]	@ (8016068 <mix_sub_columns+0x28c>)
 8016022:	5c5b      	ldrb	r3, [r3, r1]
 8016024:	4053      	eors	r3, r2
 8016026:	b2da      	uxtb	r2, r3
 8016028:	7abb      	ldrb	r3, [r7, #10]
 801602a:	4619      	mov	r1, r3
 801602c:	4b0e      	ldr	r3, [pc, #56]	@ (8016068 <mix_sub_columns+0x28c>)
 801602e:	5c5b      	ldrb	r3, [r3, r1]
 8016030:	4053      	eors	r3, r2
 8016032:	b2d9      	uxtb	r1, r3
 8016034:	7bfb      	ldrb	r3, [r7, #15]
 8016036:	461a      	mov	r2, r3
 8016038:	4b09      	ldr	r3, [pc, #36]	@ (8016060 <mix_sub_columns+0x284>)
 801603a:	5c9a      	ldrb	r2, [r3, r2]
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	330b      	adds	r3, #11
 8016040:	404a      	eors	r2, r1
 8016042:	b2d2      	uxtb	r2, r2
 8016044:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 8016046:	7d3b      	ldrb	r3, [r7, #20]
 8016048:	461a      	mov	r2, r3
 801604a:	4b05      	ldr	r3, [pc, #20]	@ (8016060 <mix_sub_columns+0x284>)
 801604c:	5c9a      	ldrb	r2, [r3, r2]
 801604e:	7a7b      	ldrb	r3, [r7, #9]
 8016050:	4619      	mov	r1, r3
 8016052:	4b04      	ldr	r3, [pc, #16]	@ (8016064 <mix_sub_columns+0x288>)
 8016054:	5c5b      	ldrb	r3, [r3, r1]
 8016056:	4053      	eors	r3, r2
 8016058:	b2da      	uxtb	r2, r3
 801605a:	7bbb      	ldrb	r3, [r7, #14]
 801605c:	4619      	mov	r1, r3
 801605e:	e005      	b.n	801606c <mix_sub_columns+0x290>
 8016060:	080211e8 	.word	0x080211e8
 8016064:	080212e8 	.word	0x080212e8
 8016068:	080210e8 	.word	0x080210e8
 801606c:	4b2d      	ldr	r3, [pc, #180]	@ (8016124 <mix_sub_columns+0x348>)
 801606e:	5c5b      	ldrb	r3, [r3, r1]
 8016070:	4053      	eors	r3, r2
 8016072:	b2d9      	uxtb	r1, r3
 8016074:	7cfb      	ldrb	r3, [r7, #19]
 8016076:	461a      	mov	r2, r3
 8016078:	4b2a      	ldr	r3, [pc, #168]	@ (8016124 <mix_sub_columns+0x348>)
 801607a:	5c9a      	ldrb	r2, [r3, r2]
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	330c      	adds	r3, #12
 8016080:	404a      	eors	r2, r1
 8016082:	b2d2      	uxtb	r2, r2
 8016084:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 8016086:	7d3b      	ldrb	r3, [r7, #20]
 8016088:	461a      	mov	r2, r3
 801608a:	4b26      	ldr	r3, [pc, #152]	@ (8016124 <mix_sub_columns+0x348>)
 801608c:	5c9a      	ldrb	r2, [r3, r2]
 801608e:	7a7b      	ldrb	r3, [r7, #9]
 8016090:	4619      	mov	r1, r3
 8016092:	4b25      	ldr	r3, [pc, #148]	@ (8016128 <mix_sub_columns+0x34c>)
 8016094:	5c5b      	ldrb	r3, [r3, r1]
 8016096:	4053      	eors	r3, r2
 8016098:	b2da      	uxtb	r2, r3
 801609a:	7bbb      	ldrb	r3, [r7, #14]
 801609c:	4619      	mov	r1, r3
 801609e:	4b23      	ldr	r3, [pc, #140]	@ (801612c <mix_sub_columns+0x350>)
 80160a0:	5c5b      	ldrb	r3, [r3, r1]
 80160a2:	4053      	eors	r3, r2
 80160a4:	b2d9      	uxtb	r1, r3
 80160a6:	7cfb      	ldrb	r3, [r7, #19]
 80160a8:	461a      	mov	r2, r3
 80160aa:	4b1e      	ldr	r3, [pc, #120]	@ (8016124 <mix_sub_columns+0x348>)
 80160ac:	5c9a      	ldrb	r2, [r3, r2]
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	330d      	adds	r3, #13
 80160b2:	404a      	eors	r2, r1
 80160b4:	b2d2      	uxtb	r2, r2
 80160b6:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 80160b8:	7d3b      	ldrb	r3, [r7, #20]
 80160ba:	461a      	mov	r2, r3
 80160bc:	4b19      	ldr	r3, [pc, #100]	@ (8016124 <mix_sub_columns+0x348>)
 80160be:	5c9a      	ldrb	r2, [r3, r2]
 80160c0:	7a7b      	ldrb	r3, [r7, #9]
 80160c2:	4619      	mov	r1, r3
 80160c4:	4b17      	ldr	r3, [pc, #92]	@ (8016124 <mix_sub_columns+0x348>)
 80160c6:	5c5b      	ldrb	r3, [r3, r1]
 80160c8:	4053      	eors	r3, r2
 80160ca:	b2da      	uxtb	r2, r3
 80160cc:	7bbb      	ldrb	r3, [r7, #14]
 80160ce:	4619      	mov	r1, r3
 80160d0:	4b15      	ldr	r3, [pc, #84]	@ (8016128 <mix_sub_columns+0x34c>)
 80160d2:	5c5b      	ldrb	r3, [r3, r1]
 80160d4:	4053      	eors	r3, r2
 80160d6:	b2d9      	uxtb	r1, r3
 80160d8:	7cfb      	ldrb	r3, [r7, #19]
 80160da:	461a      	mov	r2, r3
 80160dc:	4b13      	ldr	r3, [pc, #76]	@ (801612c <mix_sub_columns+0x350>)
 80160de:	5c9a      	ldrb	r2, [r3, r2]
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	330e      	adds	r3, #14
 80160e4:	404a      	eors	r2, r1
 80160e6:	b2d2      	uxtb	r2, r2
 80160e8:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 80160ea:	7d3b      	ldrb	r3, [r7, #20]
 80160ec:	461a      	mov	r2, r3
 80160ee:	4b0f      	ldr	r3, [pc, #60]	@ (801612c <mix_sub_columns+0x350>)
 80160f0:	5c9a      	ldrb	r2, [r3, r2]
 80160f2:	7a7b      	ldrb	r3, [r7, #9]
 80160f4:	4619      	mov	r1, r3
 80160f6:	4b0b      	ldr	r3, [pc, #44]	@ (8016124 <mix_sub_columns+0x348>)
 80160f8:	5c5b      	ldrb	r3, [r3, r1]
 80160fa:	4053      	eors	r3, r2
 80160fc:	b2da      	uxtb	r2, r3
 80160fe:	7bbb      	ldrb	r3, [r7, #14]
 8016100:	4619      	mov	r1, r3
 8016102:	4b08      	ldr	r3, [pc, #32]	@ (8016124 <mix_sub_columns+0x348>)
 8016104:	5c5b      	ldrb	r3, [r3, r1]
 8016106:	4053      	eors	r3, r2
 8016108:	b2d9      	uxtb	r1, r3
 801610a:	7cfb      	ldrb	r3, [r7, #19]
 801610c:	461a      	mov	r2, r3
 801610e:	4b06      	ldr	r3, [pc, #24]	@ (8016128 <mix_sub_columns+0x34c>)
 8016110:	5c9a      	ldrb	r2, [r3, r2]
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	330f      	adds	r3, #15
 8016116:	404a      	eors	r2, r1
 8016118:	b2d2      	uxtb	r2, r2
 801611a:	701a      	strb	r2, [r3, #0]
  }
 801611c:	bf00      	nop
 801611e:	3718      	adds	r7, #24
 8016120:	46bd      	mov	sp, r7
 8016122:	bd80      	pop	{r7, pc}
 8016124:	080210e8 	.word	0x080210e8
 8016128:	080211e8 	.word	0x080211e8
 801612c:	080212e8 	.word	0x080212e8

08016130 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 8016130:	b580      	push	{r7, lr}
 8016132:	b086      	sub	sp, #24
 8016134:	af00      	add	r7, sp, #0
 8016136:	60f8      	str	r0, [r7, #12]
 8016138:	460b      	mov	r3, r1
 801613a:	607a      	str	r2, [r7, #4]
 801613c:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 801613e:	7afb      	ldrb	r3, [r7, #11]
 8016140:	3b10      	subs	r3, #16
 8016142:	2b10      	cmp	r3, #16
 8016144:	bf8c      	ite	hi
 8016146:	2201      	movhi	r2, #1
 8016148:	2200      	movls	r2, #0
 801614a:	b2d2      	uxtb	r2, r2
 801614c:	2a00      	cmp	r2, #0
 801614e:	d10b      	bne.n	8016168 <lorawan_aes_set_key+0x38>
 8016150:	4a64      	ldr	r2, [pc, #400]	@ (80162e4 <lorawan_aes_set_key+0x1b4>)
 8016152:	fa22 f303 	lsr.w	r3, r2, r3
 8016156:	f003 0301 	and.w	r3, r3, #1
 801615a:	2b00      	cmp	r3, #0
 801615c:	bf14      	ite	ne
 801615e:	2301      	movne	r3, #1
 8016160:	2300      	moveq	r3, #0
 8016162:	b2db      	uxtb	r3, r3
 8016164:	2b00      	cmp	r3, #0
 8016166:	d105      	bne.n	8016174 <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	2200      	movs	r2, #0
 801616c:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
        return ( uint8_t )-1;
 8016170:	23ff      	movs	r3, #255	@ 0xff
 8016172:	e0b3      	b.n	80162dc <lorawan_aes_set_key+0x1ac>
        break;
 8016174:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 8016176:	687b      	ldr	r3, [r7, #4]
 8016178:	7afa      	ldrb	r2, [r7, #11]
 801617a:	68f9      	ldr	r1, [r7, #12]
 801617c:	4618      	mov	r0, r3
 801617e:	f7ff fbfc 	bl	801597a <copy_block_nn>
    hi = (keylen + 28) << 2;
 8016182:	7afb      	ldrb	r3, [r7, #11]
 8016184:	331c      	adds	r3, #28
 8016186:	b2db      	uxtb	r3, r3
 8016188:	009b      	lsls	r3, r3, #2
 801618a:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 801618c:	7c7b      	ldrb	r3, [r7, #17]
 801618e:	091b      	lsrs	r3, r3, #4
 8016190:	b2db      	uxtb	r3, r3
 8016192:	3b01      	subs	r3, #1
 8016194:	b2da      	uxtb	r2, r3
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 801619c:	7afb      	ldrb	r3, [r7, #11]
 801619e:	75fb      	strb	r3, [r7, #23]
 80161a0:	2301      	movs	r3, #1
 80161a2:	75bb      	strb	r3, [r7, #22]
 80161a4:	e094      	b.n	80162d0 <lorawan_aes_set_key+0x1a0>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 80161a6:	7dfb      	ldrb	r3, [r7, #23]
 80161a8:	3b04      	subs	r3, #4
 80161aa:	687a      	ldr	r2, [r7, #4]
 80161ac:	5cd3      	ldrb	r3, [r2, r3]
 80161ae:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 80161b0:	7dfb      	ldrb	r3, [r7, #23]
 80161b2:	3b03      	subs	r3, #3
 80161b4:	687a      	ldr	r2, [r7, #4]
 80161b6:	5cd3      	ldrb	r3, [r2, r3]
 80161b8:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 80161ba:	7dfb      	ldrb	r3, [r7, #23]
 80161bc:	3b02      	subs	r3, #2
 80161be:	687a      	ldr	r2, [r7, #4]
 80161c0:	5cd3      	ldrb	r3, [r2, r3]
 80161c2:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 80161c4:	7dfb      	ldrb	r3, [r7, #23]
 80161c6:	3b01      	subs	r3, #1
 80161c8:	687a      	ldr	r2, [r7, #4]
 80161ca:	5cd3      	ldrb	r3, [r2, r3]
 80161cc:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 80161ce:	7dfb      	ldrb	r3, [r7, #23]
 80161d0:	7afa      	ldrb	r2, [r7, #11]
 80161d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80161d6:	fb01 f202 	mul.w	r2, r1, r2
 80161da:	1a9b      	subs	r3, r3, r2
 80161dc:	b2db      	uxtb	r3, r3
 80161de:	2b00      	cmp	r3, #0
 80161e0:	d128      	bne.n	8016234 <lorawan_aes_set_key+0x104>
        {
            tt = t0;
 80161e2:	7d7b      	ldrb	r3, [r7, #21]
 80161e4:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 80161e6:	7d3b      	ldrb	r3, [r7, #20]
 80161e8:	4a3f      	ldr	r2, [pc, #252]	@ (80162e8 <lorawan_aes_set_key+0x1b8>)
 80161ea:	5cd2      	ldrb	r2, [r2, r3]
 80161ec:	7dbb      	ldrb	r3, [r7, #22]
 80161ee:	4053      	eors	r3, r2
 80161f0:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 80161f2:	7cfb      	ldrb	r3, [r7, #19]
 80161f4:	4a3c      	ldr	r2, [pc, #240]	@ (80162e8 <lorawan_aes_set_key+0x1b8>)
 80161f6:	5cd3      	ldrb	r3, [r2, r3]
 80161f8:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 80161fa:	7cbb      	ldrb	r3, [r7, #18]
 80161fc:	4a3a      	ldr	r2, [pc, #232]	@ (80162e8 <lorawan_aes_set_key+0x1b8>)
 80161fe:	5cd3      	ldrb	r3, [r2, r3]
 8016200:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 8016202:	7c3b      	ldrb	r3, [r7, #16]
 8016204:	4a38      	ldr	r2, [pc, #224]	@ (80162e8 <lorawan_aes_set_key+0x1b8>)
 8016206:	5cd3      	ldrb	r3, [r2, r3]
 8016208:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 801620a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 801620e:	005b      	lsls	r3, r3, #1
 8016210:	b25a      	sxtb	r2, r3
 8016212:	7dbb      	ldrb	r3, [r7, #22]
 8016214:	09db      	lsrs	r3, r3, #7
 8016216:	b2db      	uxtb	r3, r3
 8016218:	b25b      	sxtb	r3, r3
 801621a:	4619      	mov	r1, r3
 801621c:	0049      	lsls	r1, r1, #1
 801621e:	440b      	add	r3, r1
 8016220:	4619      	mov	r1, r3
 8016222:	00c8      	lsls	r0, r1, #3
 8016224:	4619      	mov	r1, r3
 8016226:	4603      	mov	r3, r0
 8016228:	440b      	add	r3, r1
 801622a:	b25b      	sxtb	r3, r3
 801622c:	4053      	eors	r3, r2
 801622e:	b25b      	sxtb	r3, r3
 8016230:	75bb      	strb	r3, [r7, #22]
 8016232:	e01c      	b.n	801626e <lorawan_aes_set_key+0x13e>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 8016234:	7afb      	ldrb	r3, [r7, #11]
 8016236:	2b18      	cmp	r3, #24
 8016238:	d919      	bls.n	801626e <lorawan_aes_set_key+0x13e>
 801623a:	7dfb      	ldrb	r3, [r7, #23]
 801623c:	7afa      	ldrb	r2, [r7, #11]
 801623e:	fbb3 f1f2 	udiv	r1, r3, r2
 8016242:	fb01 f202 	mul.w	r2, r1, r2
 8016246:	1a9b      	subs	r3, r3, r2
 8016248:	b2db      	uxtb	r3, r3
 801624a:	2b10      	cmp	r3, #16
 801624c:	d10f      	bne.n	801626e <lorawan_aes_set_key+0x13e>
        {
            t0 = s_box(t0);
 801624e:	7d7b      	ldrb	r3, [r7, #21]
 8016250:	4a25      	ldr	r2, [pc, #148]	@ (80162e8 <lorawan_aes_set_key+0x1b8>)
 8016252:	5cd3      	ldrb	r3, [r2, r3]
 8016254:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 8016256:	7d3b      	ldrb	r3, [r7, #20]
 8016258:	4a23      	ldr	r2, [pc, #140]	@ (80162e8 <lorawan_aes_set_key+0x1b8>)
 801625a:	5cd3      	ldrb	r3, [r2, r3]
 801625c:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 801625e:	7cfb      	ldrb	r3, [r7, #19]
 8016260:	4a21      	ldr	r2, [pc, #132]	@ (80162e8 <lorawan_aes_set_key+0x1b8>)
 8016262:	5cd3      	ldrb	r3, [r2, r3]
 8016264:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 8016266:	7cbb      	ldrb	r3, [r7, #18]
 8016268:	4a1f      	ldr	r2, [pc, #124]	@ (80162e8 <lorawan_aes_set_key+0x1b8>)
 801626a:	5cd3      	ldrb	r3, [r2, r3]
 801626c:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 801626e:	7dfa      	ldrb	r2, [r7, #23]
 8016270:	7afb      	ldrb	r3, [r7, #11]
 8016272:	1ad3      	subs	r3, r2, r3
 8016274:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 8016276:	7c3b      	ldrb	r3, [r7, #16]
 8016278:	687a      	ldr	r2, [r7, #4]
 801627a:	5cd1      	ldrb	r1, [r2, r3]
 801627c:	7dfb      	ldrb	r3, [r7, #23]
 801627e:	7d7a      	ldrb	r2, [r7, #21]
 8016280:	404a      	eors	r2, r1
 8016282:	b2d1      	uxtb	r1, r2
 8016284:	687a      	ldr	r2, [r7, #4]
 8016286:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8016288:	7c3b      	ldrb	r3, [r7, #16]
 801628a:	3301      	adds	r3, #1
 801628c:	687a      	ldr	r2, [r7, #4]
 801628e:	5cd1      	ldrb	r1, [r2, r3]
 8016290:	7dfb      	ldrb	r3, [r7, #23]
 8016292:	3301      	adds	r3, #1
 8016294:	7d3a      	ldrb	r2, [r7, #20]
 8016296:	404a      	eors	r2, r1
 8016298:	b2d1      	uxtb	r1, r2
 801629a:	687a      	ldr	r2, [r7, #4]
 801629c:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 801629e:	7c3b      	ldrb	r3, [r7, #16]
 80162a0:	3302      	adds	r3, #2
 80162a2:	687a      	ldr	r2, [r7, #4]
 80162a4:	5cd1      	ldrb	r1, [r2, r3]
 80162a6:	7dfb      	ldrb	r3, [r7, #23]
 80162a8:	3302      	adds	r3, #2
 80162aa:	7cfa      	ldrb	r2, [r7, #19]
 80162ac:	404a      	eors	r2, r1
 80162ae:	b2d1      	uxtb	r1, r2
 80162b0:	687a      	ldr	r2, [r7, #4]
 80162b2:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 80162b4:	7c3b      	ldrb	r3, [r7, #16]
 80162b6:	3303      	adds	r3, #3
 80162b8:	687a      	ldr	r2, [r7, #4]
 80162ba:	5cd1      	ldrb	r1, [r2, r3]
 80162bc:	7dfb      	ldrb	r3, [r7, #23]
 80162be:	3303      	adds	r3, #3
 80162c0:	7cba      	ldrb	r2, [r7, #18]
 80162c2:	404a      	eors	r2, r1
 80162c4:	b2d1      	uxtb	r1, r2
 80162c6:	687a      	ldr	r2, [r7, #4]
 80162c8:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80162ca:	7dfb      	ldrb	r3, [r7, #23]
 80162cc:	3304      	adds	r3, #4
 80162ce:	75fb      	strb	r3, [r7, #23]
 80162d0:	7dfa      	ldrb	r2, [r7, #23]
 80162d2:	7c7b      	ldrb	r3, [r7, #17]
 80162d4:	429a      	cmp	r2, r3
 80162d6:	f4ff af66 	bcc.w	80161a6 <lorawan_aes_set_key+0x76>
    }
    return 0;
 80162da:	2300      	movs	r3, #0
}
 80162dc:	4618      	mov	r0, r3
 80162de:	3718      	adds	r7, #24
 80162e0:	46bd      	mov	sp, r7
 80162e2:	bd80      	pop	{r7, pc}
 80162e4:	00010101 	.word	0x00010101
 80162e8:	080210e8 	.word	0x080210e8

080162ec <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 80162ec:	b580      	push	{r7, lr}
 80162ee:	b08a      	sub	sp, #40	@ 0x28
 80162f0:	af00      	add	r7, sp, #0
 80162f2:	60f8      	str	r0, [r7, #12]
 80162f4:	60b9      	str	r1, [r7, #8]
 80162f6:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80162fe:	2b00      	cmp	r3, #0
 8016300:	d038      	beq.n	8016374 <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 8016302:	687a      	ldr	r2, [r7, #4]
 8016304:	f107 0314 	add.w	r3, r7, #20
 8016308:	68f9      	ldr	r1, [r7, #12]
 801630a:	4618      	mov	r0, r3
 801630c:	f7ff fc07 	bl	8015b1e <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 8016310:	2301      	movs	r3, #1
 8016312:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8016316:	e014      	b.n	8016342 <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 8016318:	f107 0314 	add.w	r3, r7, #20
 801631c:	4618      	mov	r0, r3
 801631e:	f7ff fd5d 	bl	8015ddc <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8016328:	0112      	lsls	r2, r2, #4
 801632a:	441a      	add	r2, r3
 801632c:	f107 0314 	add.w	r3, r7, #20
 8016330:	4611      	mov	r1, r2
 8016332:	4618      	mov	r0, r3
 8016334:	f7ff fcab 	bl	8015c8e <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 8016338:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801633c:	3301      	adds	r3, #1
 801633e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8016348:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801634c:	429a      	cmp	r2, r3
 801634e:	d3e3      	bcc.n	8016318 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 8016350:	f107 0314 	add.w	r3, r7, #20
 8016354:	4618      	mov	r0, r3
 8016356:	f7ff fca7 	bl	8015ca8 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8016360:	0112      	lsls	r2, r2, #4
 8016362:	441a      	add	r2, r3
 8016364:	f107 0314 	add.w	r3, r7, #20
 8016368:	4619      	mov	r1, r3
 801636a:	68b8      	ldr	r0, [r7, #8]
 801636c:	f7ff fbd7 	bl	8015b1e <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 8016370:	2300      	movs	r3, #0
 8016372:	e000      	b.n	8016376 <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 8016374:	23ff      	movs	r3, #255	@ 0xff
}
 8016376:	4618      	mov	r0, r3
 8016378:	3728      	adds	r7, #40	@ 0x28
 801637a:	46bd      	mov	sp, r7
 801637c:	bd80      	pop	{r7, pc}
	...

08016380 <PrintKey>:
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac );

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t keyID )
{
 8016380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016382:	b0a1      	sub	sp, #132	@ 0x84
 8016384:	af12      	add	r7, sp, #72	@ 0x48
 8016386:	4603      	mov	r3, r0
 8016388:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
#if (KEY_EXTRACTABLE == 1)
#if (LORAWAN_KMS == 0)
    Key_t *keyItem;
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 801638c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8016390:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8016394:	4611      	mov	r1, r2
 8016396:	4618      	mov	r0, r3
 8016398:	f000 fa12 	bl	80167c0 <SecureElementGetKeyByID>
 801639c:	4603      	mov	r3, r0
 801639e:	2b00      	cmp	r3, #0
 80163a0:	d174      	bne.n	801648c <PrintKey+0x10c>
#else
    uint8_t extractable_key[SE_KEY_SIZE] = {0};
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, ( uint8_t * )extractable_key ) )
#endif /* LORAWAN_KMS */
    {
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80163a2:	2300      	movs	r3, #0
 80163a4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80163a8:	e06c      	b.n	8016484 <PrintKey+0x104>
        {
            if( KeyLabel[i].keyID == keyID )
 80163aa:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80163ae:	4939      	ldr	r1, [pc, #228]	@ (8016494 <PrintKey+0x114>)
 80163b0:	4613      	mov	r3, r2
 80163b2:	005b      	lsls	r3, r3, #1
 80163b4:	4413      	add	r3, r2
 80163b6:	009b      	lsls	r3, r3, #2
 80163b8:	440b      	add	r3, r1
 80163ba:	781b      	ldrb	r3, [r3, #0]
 80163bc:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80163c0:	429a      	cmp	r2, r3
 80163c2:	d15a      	bne.n	801647a <PrintKey+0xfa>
            {
#if (LORAWAN_KMS == 0)
                MW_LOG( TS_OFF, VLEVEL_M,
 80163c4:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80163c8:	4932      	ldr	r1, [pc, #200]	@ (8016494 <PrintKey+0x114>)
 80163ca:	4613      	mov	r3, r2
 80163cc:	005b      	lsls	r3, r3, #1
 80163ce:	4413      	add	r3, r2
 80163d0:	009b      	lsls	r3, r3, #2
 80163d2:	440b      	add	r3, r1
 80163d4:	3308      	adds	r3, #8
 80163d6:	6819      	ldr	r1, [r3, #0]
 80163d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80163da:	785b      	ldrb	r3, [r3, #1]
 80163dc:	461d      	mov	r5, r3
 80163de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80163e0:	789b      	ldrb	r3, [r3, #2]
 80163e2:	461e      	mov	r6, r3
 80163e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80163e6:	78db      	ldrb	r3, [r3, #3]
 80163e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80163ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80163ec:	791b      	ldrb	r3, [r3, #4]
 80163ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80163f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80163f2:	795b      	ldrb	r3, [r3, #5]
 80163f4:	623b      	str	r3, [r7, #32]
 80163f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80163f8:	799b      	ldrb	r3, [r3, #6]
 80163fa:	61fb      	str	r3, [r7, #28]
 80163fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80163fe:	79db      	ldrb	r3, [r3, #7]
 8016400:	61bb      	str	r3, [r7, #24]
 8016402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016404:	7a1b      	ldrb	r3, [r3, #8]
 8016406:	617b      	str	r3, [r7, #20]
 8016408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801640a:	7a5b      	ldrb	r3, [r3, #9]
 801640c:	613b      	str	r3, [r7, #16]
 801640e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016410:	7a9b      	ldrb	r3, [r3, #10]
 8016412:	60fb      	str	r3, [r7, #12]
 8016414:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016416:	7adb      	ldrb	r3, [r3, #11]
 8016418:	60bb      	str	r3, [r7, #8]
 801641a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801641c:	7b1b      	ldrb	r3, [r3, #12]
 801641e:	607b      	str	r3, [r7, #4]
 8016420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016422:	7b5b      	ldrb	r3, [r3, #13]
 8016424:	461c      	mov	r4, r3
 8016426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016428:	7b9b      	ldrb	r3, [r3, #14]
 801642a:	4618      	mov	r0, r3
 801642c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801642e:	7bdb      	ldrb	r3, [r3, #15]
 8016430:	461a      	mov	r2, r3
 8016432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016434:	7c1b      	ldrb	r3, [r3, #16]
 8016436:	9310      	str	r3, [sp, #64]	@ 0x40
 8016438:	920f      	str	r2, [sp, #60]	@ 0x3c
 801643a:	900e      	str	r0, [sp, #56]	@ 0x38
 801643c:	940d      	str	r4, [sp, #52]	@ 0x34
 801643e:	687a      	ldr	r2, [r7, #4]
 8016440:	920c      	str	r2, [sp, #48]	@ 0x30
 8016442:	68ba      	ldr	r2, [r7, #8]
 8016444:	920b      	str	r2, [sp, #44]	@ 0x2c
 8016446:	68fa      	ldr	r2, [r7, #12]
 8016448:	920a      	str	r2, [sp, #40]	@ 0x28
 801644a:	693a      	ldr	r2, [r7, #16]
 801644c:	9209      	str	r2, [sp, #36]	@ 0x24
 801644e:	697a      	ldr	r2, [r7, #20]
 8016450:	9208      	str	r2, [sp, #32]
 8016452:	69ba      	ldr	r2, [r7, #24]
 8016454:	9207      	str	r2, [sp, #28]
 8016456:	69fa      	ldr	r2, [r7, #28]
 8016458:	9206      	str	r2, [sp, #24]
 801645a:	6a3a      	ldr	r2, [r7, #32]
 801645c:	9205      	str	r2, [sp, #20]
 801645e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016460:	9204      	str	r2, [sp, #16]
 8016462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016464:	9303      	str	r3, [sp, #12]
 8016466:	9602      	str	r6, [sp, #8]
 8016468:	9501      	str	r5, [sp, #4]
 801646a:	9100      	str	r1, [sp, #0]
 801646c:	4b0a      	ldr	r3, [pc, #40]	@ (8016498 <PrintKey+0x118>)
 801646e:	2200      	movs	r2, #0
 8016470:	2100      	movs	r1, #0
 8016472:	2002      	movs	r0, #2
 8016474:	f003 fa26 	bl	80198c4 <UTIL_ADV_TRACE_COND_FSend>
 8016478:	e008      	b.n	801648c <PrintKey+0x10c>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 801647a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801647e:	3301      	adds	r3, #1
 8016480:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8016484:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8016488:	2b0a      	cmp	r3, #10
 801648a:	d98e      	bls.n	80163aa <PrintKey+0x2a>
                return;
            }
        }
    }
#endif /* KEY_EXTRACTABLE */
}
 801648c:	373c      	adds	r7, #60	@ 0x3c
 801648e:	46bd      	mov	sp, r7
 8016490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016492:	bf00      	nop
 8016494:	080213e8 	.word	0x080213e8
 8016498:	08020c04 	.word	0x08020c04

0801649c <PrintIds>:

static void PrintIds( ActivationType_t mode )
{
 801649c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801649e:	b091      	sub	sp, #68	@ 0x44
 80164a0:	af08      	add	r7, sp, #32
 80164a2:	4603      	mov	r3, r0
 80164a4:	71fb      	strb	r3, [r7, #7]
    uint8_t joinEui[SE_EUI_SIZE];
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddr = 0;
 80164a6:	2300      	movs	r3, #0
 80164a8:	60fb      	str	r3, [r7, #12]

    SecureElementGetDevEui( devEui );
 80164aa:	f107 0310 	add.w	r3, r7, #16
 80164ae:	4618      	mov	r0, r3
 80164b0:	f000 fbd8 	bl	8016c64 <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 80164b4:	7c3b      	ldrb	r3, [r7, #16]
 80164b6:	7c7a      	ldrb	r2, [r7, #17]
 80164b8:	7cb9      	ldrb	r1, [r7, #18]
 80164ba:	7cf8      	ldrb	r0, [r7, #19]
 80164bc:	7d3c      	ldrb	r4, [r7, #20]
 80164be:	7d7d      	ldrb	r5, [r7, #21]
 80164c0:	7dbe      	ldrb	r6, [r7, #22]
 80164c2:	f897 c017 	ldrb.w	ip, [r7, #23]
 80164c6:	f8cd c01c 	str.w	ip, [sp, #28]
 80164ca:	9606      	str	r6, [sp, #24]
 80164cc:	9505      	str	r5, [sp, #20]
 80164ce:	9404      	str	r4, [sp, #16]
 80164d0:	9003      	str	r0, [sp, #12]
 80164d2:	9102      	str	r1, [sp, #8]
 80164d4:	9201      	str	r2, [sp, #4]
 80164d6:	9300      	str	r3, [sp, #0]
 80164d8:	4b24      	ldr	r3, [pc, #144]	@ (801656c <PrintIds+0xd0>)
 80164da:	2200      	movs	r2, #0
 80164dc:	2100      	movs	r1, #0
 80164de:	2002      	movs	r0, #2
 80164e0:	f003 f9f0 	bl	80198c4 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetJoinEui( joinEui );
 80164e4:	f107 0318 	add.w	r3, r7, #24
 80164e8:	4618      	mov	r0, r3
 80164ea:	f000 fc05 	bl	8016cf8 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 80164ee:	7e3b      	ldrb	r3, [r7, #24]
 80164f0:	7e7a      	ldrb	r2, [r7, #25]
 80164f2:	7eb9      	ldrb	r1, [r7, #26]
 80164f4:	7ef8      	ldrb	r0, [r7, #27]
 80164f6:	7f3c      	ldrb	r4, [r7, #28]
 80164f8:	7f7d      	ldrb	r5, [r7, #29]
 80164fa:	7fbe      	ldrb	r6, [r7, #30]
 80164fc:	f897 c01f 	ldrb.w	ip, [r7, #31]
 8016500:	f8cd c01c 	str.w	ip, [sp, #28]
 8016504:	9606      	str	r6, [sp, #24]
 8016506:	9505      	str	r5, [sp, #20]
 8016508:	9404      	str	r4, [sp, #16]
 801650a:	9003      	str	r0, [sp, #12]
 801650c:	9102      	str	r1, [sp, #8]
 801650e:	9201      	str	r2, [sp, #4]
 8016510:	9300      	str	r3, [sp, #0]
 8016512:	4b17      	ldr	r3, [pc, #92]	@ (8016570 <PrintIds+0xd4>)
 8016514:	2200      	movs	r2, #0
 8016516:	2100      	movs	r1, #0
 8016518:	2002      	movs	r0, #2
 801651a:	f003 f9d3 	bl	80198c4 <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetDevAddr( mode, &devAddr );
 801651e:	f107 020c 	add.w	r2, r7, #12
 8016522:	79fb      	ldrb	r3, [r7, #7]
 8016524:	4611      	mov	r1, r2
 8016526:	4618      	mov	r0, r3
 8016528:	f000 fbfe 	bl	8016d28 <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 801652c:	f107 030c 	add.w	r3, r7, #12
 8016530:	3303      	adds	r3, #3
 8016532:	781b      	ldrb	r3, [r3, #0]
 8016534:	461a      	mov	r2, r3
 8016536:	f107 030c 	add.w	r3, r7, #12
 801653a:	3302      	adds	r3, #2
 801653c:	781b      	ldrb	r3, [r3, #0]
 801653e:	4619      	mov	r1, r3
 8016540:	f107 030c 	add.w	r3, r7, #12
 8016544:	3301      	adds	r3, #1
 8016546:	781b      	ldrb	r3, [r3, #0]
 8016548:	4618      	mov	r0, r3
 801654a:	f107 030c 	add.w	r3, r7, #12
 801654e:	781b      	ldrb	r3, [r3, #0]
 8016550:	9303      	str	r3, [sp, #12]
 8016552:	9002      	str	r0, [sp, #8]
 8016554:	9101      	str	r1, [sp, #4]
 8016556:	9200      	str	r2, [sp, #0]
 8016558:	4b06      	ldr	r3, [pc, #24]	@ (8016574 <PrintIds+0xd8>)
 801655a:	2200      	movs	r2, #0
 801655c:	2100      	movs	r1, #0
 801655e:	2002      	movs	r0, #2
 8016560:	f003 f9b0 	bl	80198c4 <UTIL_ADV_TRACE_COND_FSend>
            ( unsigned )( ( unsigned char * )( &devAddr ) )[3],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[2],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[1],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[0] );
}
 8016564:	bf00      	nop
 8016566:	3724      	adds	r7, #36	@ 0x24
 8016568:	46bd      	mov	sp, r7
 801656a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801656c:	08020c60 	.word	0x08020c60
 8016570:	08020ca0 	.word	0x08020ca0
 8016574:	08020ce0 	.word	0x08020ce0

08016578 <GetKeyByID>:

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 8016578:	b480      	push	{r7}
 801657a:	b085      	sub	sp, #20
 801657c:	af00      	add	r7, sp, #0
 801657e:	4603      	mov	r3, r0
 8016580:	6039      	str	r1, [r7, #0]
 8016582:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8016584:	2300      	movs	r3, #0
 8016586:	73fb      	strb	r3, [r7, #15]
 8016588:	e01a      	b.n	80165c0 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 801658a:	4b12      	ldr	r3, [pc, #72]	@ (80165d4 <GetKeyByID+0x5c>)
 801658c:	6819      	ldr	r1, [r3, #0]
 801658e:	7bfa      	ldrb	r2, [r7, #15]
 8016590:	4613      	mov	r3, r2
 8016592:	011b      	lsls	r3, r3, #4
 8016594:	4413      	add	r3, r2
 8016596:	440b      	add	r3, r1
 8016598:	3318      	adds	r3, #24
 801659a:	781b      	ldrb	r3, [r3, #0]
 801659c:	79fa      	ldrb	r2, [r7, #7]
 801659e:	429a      	cmp	r2, r3
 80165a0:	d10b      	bne.n	80165ba <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 80165a2:	4b0c      	ldr	r3, [pc, #48]	@ (80165d4 <GetKeyByID+0x5c>)
 80165a4:	6819      	ldr	r1, [r3, #0]
 80165a6:	7bfa      	ldrb	r2, [r7, #15]
 80165a8:	4613      	mov	r3, r2
 80165aa:	011b      	lsls	r3, r3, #4
 80165ac:	4413      	add	r3, r2
 80165ae:	3318      	adds	r3, #24
 80165b0:	18ca      	adds	r2, r1, r3
 80165b2:	683b      	ldr	r3, [r7, #0]
 80165b4:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 80165b6:	2300      	movs	r3, #0
 80165b8:	e006      	b.n	80165c8 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80165ba:	7bfb      	ldrb	r3, [r7, #15]
 80165bc:	3301      	adds	r3, #1
 80165be:	73fb      	strb	r3, [r7, #15]
 80165c0:	7bfb      	ldrb	r3, [r7, #15]
 80165c2:	2b0a      	cmp	r3, #10
 80165c4:	d9e1      	bls.n	801658a <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80165c6:	2303      	movs	r3, #3
}
 80165c8:	4618      	mov	r0, r3
 80165ca:	3714      	adds	r7, #20
 80165cc:	46bd      	mov	sp, r7
 80165ce:	bc80      	pop	{r7}
 80165d0:	4770      	bx	lr
 80165d2:	bf00      	nop
 80165d4:	20001234 	.word	0x20001234

080165d8 <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 80165d8:	b590      	push	{r4, r7, lr}
 80165da:	b0d1      	sub	sp, #324	@ 0x144
 80165dc:	af00      	add	r7, sp, #0
 80165de:	f507 74a0 	add.w	r4, r7, #320	@ 0x140
 80165e2:	f5a4 749a 	sub.w	r4, r4, #308	@ 0x134
 80165e6:	6020      	str	r0, [r4, #0]
 80165e8:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 80165ec:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 80165f0:	6001      	str	r1, [r0, #0]
 80165f2:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 80165f6:	f5a1 719e 	sub.w	r1, r1, #316	@ 0x13c
 80165fa:	600a      	str	r2, [r1, #0]
 80165fc:	461a      	mov	r2, r3
 80165fe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8016602:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 8016606:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 8016608:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801660c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8016610:	681b      	ldr	r3, [r3, #0]
 8016612:	2b00      	cmp	r3, #0
 8016614:	d003      	beq.n	801661e <ComputeCmac+0x46>
 8016616:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 801661a:	2b00      	cmp	r3, #0
 801661c:	d101      	bne.n	8016622 <ComputeCmac+0x4a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 801661e:	2302      	movs	r3, #2
 8016620:	e05d      	b.n	80166de <ComputeCmac+0x106>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 8016622:	f107 0314 	add.w	r3, r7, #20
 8016626:	4618      	mov	r0, r3
 8016628:	f7fe fefe 	bl	8015428 <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 801662c:	f107 0210 	add.w	r2, r7, #16
 8016630:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8016634:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 8016638:	781b      	ldrb	r3, [r3, #0]
 801663a:	4611      	mov	r1, r2
 801663c:	4618      	mov	r0, r3
 801663e:	f7ff ff9b 	bl	8016578 <GetKeyByID>
 8016642:	4603      	mov	r3, r0
 8016644:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 8016648:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 801664c:	2b00      	cmp	r3, #0
 801664e:	d144      	bne.n	80166da <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 8016650:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8016654:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8016658:	681b      	ldr	r3, [r3, #0]
 801665a:	1c5a      	adds	r2, r3, #1
 801665c:	f107 0314 	add.w	r3, r7, #20
 8016660:	4611      	mov	r1, r2
 8016662:	4618      	mov	r0, r3
 8016664:	f7fe fef9 	bl	801545a <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 8016668:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801666c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8016670:	681b      	ldr	r3, [r3, #0]
 8016672:	2b00      	cmp	r3, #0
 8016674:	d009      	beq.n	801668a <ComputeCmac+0xb2>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 8016676:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801667a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 801667e:	f107 0014 	add.w	r0, r7, #20
 8016682:	2210      	movs	r2, #16
 8016684:	6819      	ldr	r1, [r3, #0]
 8016686:	f7fe fef7 	bl	8015478 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 801668a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801668e:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 8016692:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8016696:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 801669a:	f107 0014 	add.w	r0, r7, #20
 801669e:	6812      	ldr	r2, [r2, #0]
 80166a0:	6819      	ldr	r1, [r3, #0]
 80166a2:	f7fe fee9 	bl	8015478 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 80166a6:	f107 0214 	add.w	r2, r7, #20
 80166aa:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 80166ae:	4611      	mov	r1, r2
 80166b0:	4618      	mov	r0, r3
 80166b2:	f7fe ffa3 	bl	80155fc <AES_CMAC_Final>

        /* Bring into the required format */
        *cmac = GET_UINT32_LE( Cmac, 0 );
 80166b6:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 80166ba:	461a      	mov	r2, r3
 80166bc:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 80166c0:	021b      	lsls	r3, r3, #8
 80166c2:	431a      	orrs	r2, r3
 80166c4:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 80166c8:	041b      	lsls	r3, r3, #16
 80166ca:	431a      	orrs	r2, r3
 80166cc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80166d0:	061b      	lsls	r3, r3, #24
 80166d2:	431a      	orrs	r2, r3
 80166d4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80166d8:	601a      	str	r2, [r3, #0]
    if( rv != CKR_OK )
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 80166da:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
}
 80166de:	4618      	mov	r0, r3
 80166e0:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 80166e4:	46bd      	mov	sp, r7
 80166e6:	bd90      	pop	{r4, r7, pc}

080166e8 <SecureElementInit>:
/* Exported functions ---------------------------------------------------------*/
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
 80166e8:	b580      	push	{r7, lr}
 80166ea:	b082      	sub	sp, #8
 80166ec:	af00      	add	r7, sp, #0
 80166ee:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	d101      	bne.n	80166fa <SecureElementInit+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80166f6:	2302      	movs	r3, #2
 80166f8:	e00a      	b.n	8016710 <SecureElementInit+0x28>
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 80166fa:	4a07      	ldr	r2, [pc, #28]	@ (8016718 <SecureElementInit+0x30>)
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	6013      	str	r3, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 8016700:	4b05      	ldr	r3, [pc, #20]	@ (8016718 <SecureElementInit+0x30>)
 8016702:	681b      	ldr	r3, [r3, #0]
 8016704:	22d8      	movs	r2, #216	@ 0xd8
 8016706:	4905      	ldr	r1, [pc, #20]	@ (801671c <SecureElementInit+0x34>)
 8016708:	4618      	mov	r0, r3
 801670a:	f000 fb76 	bl	8016dfa <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 801670e:	2300      	movs	r3, #0
}
 8016710:	4618      	mov	r0, r3
 8016712:	3708      	adds	r7, #8
 8016714:	46bd      	mov	sp, r7
 8016716:	bd80      	pop	{r7, pc}
 8016718:	20001234 	.word	0x20001234
 801671c:	0803e500 	.word	0x0803e500

08016720 <SecureElementInitMcuID>:

SecureElementStatus_t SecureElementInitMcuID( SecureElementGetUniqueId_t seGetUniqueId,
                                              SecureElementGetDevAddr_t seGetDevAddr )
{
 8016720:	b580      	push	{r7, lr}
 8016722:	b086      	sub	sp, #24
 8016724:	af00      	add	r7, sp, #0
 8016726:	6078      	str	r0, [r7, #4]
 8016728:	6039      	str	r1, [r7, #0]
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddrABP = 0;
 801672a:	2300      	movs	r3, #0
 801672c:	60bb      	str	r3, [r7, #8]

    SecureElementGetDevEui( devEui );
 801672e:	f107 030c 	add.w	r3, r7, #12
 8016732:	4618      	mov	r0, r3
 8016734:	f000 fa96 	bl	8016c64 <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 8016738:	f107 0308 	add.w	r3, r7, #8
 801673c:	4619      	mov	r1, r3
 801673e:	2001      	movs	r0, #1
 8016740:	f000 faf2 	bl	8016d28 <SecureElementGetDevAddr>

    if( seGetUniqueId != NULL )
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	2b00      	cmp	r3, #0
 8016748:	d024      	beq.n	8016794 <SecureElementInitMcuID+0x74>
    {
        bool id_init = false;
 801674a:	2300      	movs	r3, #0
 801674c:	75fb      	strb	r3, [r7, #23]
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 801674e:	2300      	movs	r3, #0
 8016750:	75bb      	strb	r3, [r7, #22]
 8016752:	e00c      	b.n	801676e <SecureElementInitMcuID+0x4e>
        {
            if( devEui[index] != 0 )
 8016754:	7dbb      	ldrb	r3, [r7, #22]
 8016756:	3318      	adds	r3, #24
 8016758:	443b      	add	r3, r7
 801675a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 801675e:	2b00      	cmp	r3, #0
 8016760:	d002      	beq.n	8016768 <SecureElementInitMcuID+0x48>
            {
                id_init = true;
 8016762:	2301      	movs	r3, #1
 8016764:	75fb      	strb	r3, [r7, #23]
                break;
 8016766:	e005      	b.n	8016774 <SecureElementInitMcuID+0x54>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 8016768:	7dbb      	ldrb	r3, [r7, #22]
 801676a:	3301      	adds	r3, #1
 801676c:	75bb      	strb	r3, [r7, #22]
 801676e:	7dbb      	ldrb	r3, [r7, #22]
 8016770:	2b07      	cmp	r3, #7
 8016772:	d9ef      	bls.n	8016754 <SecureElementInitMcuID+0x34>
            }
        }
        if( id_init == false )
 8016774:	7dfb      	ldrb	r3, [r7, #23]
 8016776:	f083 0301 	eor.w	r3, r3, #1
 801677a:	b2db      	uxtb	r3, r3
 801677c:	2b00      	cmp	r3, #0
 801677e:	d009      	beq.n	8016794 <SecureElementInitMcuID+0x74>
        {
            /* Get a DevEUI from MCU unique ID */
            seGetUniqueId( devEui );
 8016780:	f107 020c 	add.w	r2, r7, #12
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	4610      	mov	r0, r2
 8016788:	4798      	blx	r3
            SecureElementSetDevEui( devEui );
 801678a:	f107 030c 	add.w	r3, r7, #12
 801678e:	4618      	mov	r0, r3
 8016790:	f000 fa50 	bl	8016c34 <SecureElementSetDevEui>
        }
    }

    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 8016794:	683b      	ldr	r3, [r7, #0]
 8016796:	2b00      	cmp	r3, #0
 8016798:	d00c      	beq.n	80167b4 <SecureElementInitMcuID+0x94>
 801679a:	68bb      	ldr	r3, [r7, #8]
 801679c:	2b00      	cmp	r3, #0
 801679e:	d109      	bne.n	80167b4 <SecureElementInitMcuID+0x94>
    {
        /* callback to dynamic DevAddr generation */
        seGetDevAddr( &devAddrABP );
 80167a0:	f107 0208 	add.w	r2, r7, #8
 80167a4:	683b      	ldr	r3, [r7, #0]
 80167a6:	4610      	mov	r0, r2
 80167a8:	4798      	blx	r3
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 80167aa:	68bb      	ldr	r3, [r7, #8]
 80167ac:	4619      	mov	r1, r3
 80167ae:	2001      	movs	r0, #1
 80167b0:	f000 fa88 	bl	8016cc4 <SecureElementSetDevAddr>
    }

    return SECURE_ELEMENT_SUCCESS;
 80167b4:	2300      	movs	r3, #0
}
 80167b6:	4618      	mov	r0, r3
 80167b8:	3718      	adds	r7, #24
 80167ba:	46bd      	mov	sp, r7
 80167bc:	bd80      	pop	{r7, pc}
	...

080167c0 <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 80167c0:	b480      	push	{r7}
 80167c2:	b085      	sub	sp, #20
 80167c4:	af00      	add	r7, sp, #0
 80167c6:	4603      	mov	r3, r0
 80167c8:	6039      	str	r1, [r7, #0]
 80167ca:	71fb      	strb	r3, [r7, #7]
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80167cc:	2300      	movs	r3, #0
 80167ce:	73fb      	strb	r3, [r7, #15]
 80167d0:	e01a      	b.n	8016808 <SecureElementGetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 80167d2:	4b12      	ldr	r3, [pc, #72]	@ (801681c <SecureElementGetKeyByID+0x5c>)
 80167d4:	6819      	ldr	r1, [r3, #0]
 80167d6:	7bfa      	ldrb	r2, [r7, #15]
 80167d8:	4613      	mov	r3, r2
 80167da:	011b      	lsls	r3, r3, #4
 80167dc:	4413      	add	r3, r2
 80167de:	440b      	add	r3, r1
 80167e0:	3318      	adds	r3, #24
 80167e2:	781b      	ldrb	r3, [r3, #0]
 80167e4:	79fa      	ldrb	r2, [r7, #7]
 80167e6:	429a      	cmp	r2, r3
 80167e8:	d10b      	bne.n	8016802 <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 80167ea:	4b0c      	ldr	r3, [pc, #48]	@ (801681c <SecureElementGetKeyByID+0x5c>)
 80167ec:	6819      	ldr	r1, [r3, #0]
 80167ee:	7bfa      	ldrb	r2, [r7, #15]
 80167f0:	4613      	mov	r3, r2
 80167f2:	011b      	lsls	r3, r3, #4
 80167f4:	4413      	add	r3, r2
 80167f6:	3318      	adds	r3, #24
 80167f8:	18ca      	adds	r2, r1, r3
 80167fa:	683b      	ldr	r3, [r7, #0]
 80167fc:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 80167fe:	2300      	movs	r3, #0
 8016800:	e006      	b.n	8016810 <SecureElementGetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8016802:	7bfb      	ldrb	r3, [r7, #15]
 8016804:	3301      	adds	r3, #1
 8016806:	73fb      	strb	r3, [r7, #15]
 8016808:	7bfb      	ldrb	r3, [r7, #15]
 801680a:	2b0a      	cmp	r3, #10
 801680c:	d9e1      	bls.n	80167d2 <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 801680e:	2303      	movs	r3, #3
}
 8016810:	4618      	mov	r0, r3
 8016812:	3714      	adds	r7, #20
 8016814:	46bd      	mov	sp, r7
 8016816:	bc80      	pop	{r7}
 8016818:	4770      	bx	lr
 801681a:	bf00      	nop
 801681c:	20001234 	.word	0x20001234

08016820 <SecureElementPrintKeys>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAWAN_KMS */

SecureElementStatus_t SecureElementPrintKeys( void )
{
 8016820:	b580      	push	{r7, lr}
 8016822:	af00      	add	r7, sp, #0
    PrintKey( APP_KEY );
 8016824:	2000      	movs	r0, #0
 8016826:	f7ff fdab 	bl	8016380 <PrintKey>
    PrintKey( NWK_KEY );
 801682a:	2001      	movs	r0, #1
 801682c:	f7ff fda8 	bl	8016380 <PrintKey>
    PrintKey( APP_S_KEY );
 8016830:	2009      	movs	r0, #9
 8016832:	f7ff fda5 	bl	8016380 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 8016836:	2008      	movs	r0, #8
 8016838:	f7ff fda2 	bl	8016380 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintIds( ACTIVATION_TYPE_NONE );
 801683c:	2000      	movs	r0, #0
 801683e:	f7ff fe2d 	bl	801649c <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 8016842:	2300      	movs	r3, #0
}
 8016844:	4618      	mov	r0, r3
 8016846:	bd80      	pop	{r7, pc}

08016848 <SecureElementPrintSessionKeys>:

SecureElementStatus_t SecureElementPrintSessionKeys( ActivationType_t mode )
{
 8016848:	b580      	push	{r7, lr}
 801684a:	b082      	sub	sp, #8
 801684c:	af00      	add	r7, sp, #0
 801684e:	4603      	mov	r3, r0
 8016850:	71fb      	strb	r3, [r7, #7]
    PrintKey( MC_ROOT_KEY );
 8016852:	200b      	movs	r0, #11
 8016854:	f7ff fd94 	bl	8016380 <PrintKey>
    PrintKey( MC_KE_KEY );
 8016858:	200c      	movs	r0, #12
 801685a:	f7ff fd91 	bl	8016380 <PrintKey>
    PrintKey( APP_S_KEY );
 801685e:	2009      	movs	r0, #9
 8016860:	f7ff fd8e 	bl	8016380 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 8016864:	2008      	movs	r0, #8
 8016866:	f7ff fd8b 	bl	8016380 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintKey( DATABLOCK_INT_KEY );
 801686a:	200a      	movs	r0, #10
 801686c:	f7ff fd88 	bl	8016380 <PrintKey>
    PrintIds( mode );
 8016870:	79fb      	ldrb	r3, [r7, #7]
 8016872:	4618      	mov	r0, r3
 8016874:	f7ff fe12 	bl	801649c <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 8016878:	2300      	movs	r3, #0
}
 801687a:	4618      	mov	r0, r3
 801687c:	3708      	adds	r7, #8
 801687e:	46bd      	mov	sp, r7
 8016880:	bd80      	pop	{r7, pc}
	...

08016884 <SecureElementSetKey>:
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t *key )
{
 8016884:	b580      	push	{r7, lr}
 8016886:	b088      	sub	sp, #32
 8016888:	af00      	add	r7, sp, #0
 801688a:	4603      	mov	r3, r0
 801688c:	6039      	str	r1, [r7, #0]
 801688e:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 8016890:	683b      	ldr	r3, [r7, #0]
 8016892:	2b00      	cmp	r3, #0
 8016894:	d101      	bne.n	801689a <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8016896:	2302      	movs	r3, #2
 8016898:	e04b      	b.n	8016932 <SecureElementSetKey+0xae>
    }

#if (LORAWAN_KMS == 0)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 801689a:	2300      	movs	r3, #0
 801689c:	77fb      	strb	r3, [r7, #31]
 801689e:	e044      	b.n	801692a <SecureElementSetKey+0xa6>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 80168a0:	4b26      	ldr	r3, [pc, #152]	@ (801693c <SecureElementSetKey+0xb8>)
 80168a2:	6819      	ldr	r1, [r3, #0]
 80168a4:	7ffa      	ldrb	r2, [r7, #31]
 80168a6:	4613      	mov	r3, r2
 80168a8:	011b      	lsls	r3, r3, #4
 80168aa:	4413      	add	r3, r2
 80168ac:	440b      	add	r3, r1
 80168ae:	3318      	adds	r3, #24
 80168b0:	781b      	ldrb	r3, [r3, #0]
 80168b2:	79fa      	ldrb	r2, [r7, #7]
 80168b4:	429a      	cmp	r2, r3
 80168b6:	d135      	bne.n	8016924 <SecureElementSetKey+0xa0>
        {
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if( keyID == MC_KEY_0 )
 80168b8:	79fb      	ldrb	r3, [r7, #7]
 80168ba:	2b0d      	cmp	r3, #13
 80168bc:	d122      	bne.n	8016904 <SecureElementSetKey+0x80>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            {
                /* Decrypt the key if its a Mckey */
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 80168be:	2306      	movs	r3, #6
 80168c0:	77bb      	strb	r3, [r7, #30]
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 80168c2:	f107 030c 	add.w	r3, r7, #12
 80168c6:	2200      	movs	r2, #0
 80168c8:	601a      	str	r2, [r3, #0]
 80168ca:	605a      	str	r2, [r3, #4]
 80168cc:	609a      	str	r2, [r3, #8]
 80168ce:	60da      	str	r2, [r3, #12]

                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 80168d0:	f107 030c 	add.w	r3, r7, #12
 80168d4:	220c      	movs	r2, #12
 80168d6:	2110      	movs	r1, #16
 80168d8:	6838      	ldr	r0, [r7, #0]
 80168da:	f000 f877 	bl	80169cc <SecureElementAesEncrypt>
 80168de:	4603      	mov	r3, r0
 80168e0:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 80168e2:	4b16      	ldr	r3, [pc, #88]	@ (801693c <SecureElementSetKey+0xb8>)
 80168e4:	6819      	ldr	r1, [r3, #0]
 80168e6:	7ffa      	ldrb	r2, [r7, #31]
 80168e8:	4613      	mov	r3, r2
 80168ea:	011b      	lsls	r3, r3, #4
 80168ec:	4413      	add	r3, r2
 80168ee:	3318      	adds	r3, #24
 80168f0:	440b      	add	r3, r1
 80168f2:	3301      	adds	r3, #1
 80168f4:	f107 010c 	add.w	r1, r7, #12
 80168f8:	2210      	movs	r2, #16
 80168fa:	4618      	mov	r0, r3
 80168fc:	f000 fa7d 	bl	8016dfa <memcpy1>
                return retval;
 8016900:	7fbb      	ldrb	r3, [r7, #30]
 8016902:	e016      	b.n	8016932 <SecureElementSetKey+0xae>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 8016904:	4b0d      	ldr	r3, [pc, #52]	@ (801693c <SecureElementSetKey+0xb8>)
 8016906:	6819      	ldr	r1, [r3, #0]
 8016908:	7ffa      	ldrb	r2, [r7, #31]
 801690a:	4613      	mov	r3, r2
 801690c:	011b      	lsls	r3, r3, #4
 801690e:	4413      	add	r3, r2
 8016910:	3318      	adds	r3, #24
 8016912:	440b      	add	r3, r1
 8016914:	3301      	adds	r3, #1
 8016916:	2210      	movs	r2, #16
 8016918:	6839      	ldr	r1, [r7, #0]
 801691a:	4618      	mov	r0, r3
 801691c:	f000 fa6d 	bl	8016dfa <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 8016920:	2300      	movs	r3, #0
 8016922:	e006      	b.n	8016932 <SecureElementSetKey+0xae>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8016924:	7ffb      	ldrb	r3, [r7, #31]
 8016926:	3301      	adds	r3, #1
 8016928:	77fb      	strb	r3, [r7, #31]
 801692a:	7ffb      	ldrb	r3, [r7, #31]
 801692c:	2b0a      	cmp	r3, #10
 801692e:	d9b7      	bls.n	80168a0 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8016930:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 8016932:	4618      	mov	r0, r3
 8016934:	3720      	adds	r7, #32
 8016936:	46bd      	mov	sp, r7
 8016938:	bd80      	pop	{r7, pc}
 801693a:	bf00      	nop
 801693c:	20001234 	.word	0x20001234

08016940 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
 8016940:	b580      	push	{r7, lr}
 8016942:	b086      	sub	sp, #24
 8016944:	af02      	add	r7, sp, #8
 8016946:	60f8      	str	r0, [r7, #12]
 8016948:	60b9      	str	r1, [r7, #8]
 801694a:	607a      	str	r2, [r7, #4]
 801694c:	70fb      	strb	r3, [r7, #3]
    if( keyID >= MC_KE_KEY )
 801694e:	78fb      	ldrb	r3, [r7, #3]
 8016950:	2b0b      	cmp	r3, #11
 8016952:	d901      	bls.n	8016958 <SecureElementComputeAesCmac+0x18>
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8016954:	2303      	movs	r3, #3
 8016956:	e009      	b.n	801696c <SecureElementComputeAesCmac+0x2c>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 8016958:	78fa      	ldrb	r2, [r7, #3]
 801695a:	69bb      	ldr	r3, [r7, #24]
 801695c:	9300      	str	r3, [sp, #0]
 801695e:	4613      	mov	r3, r2
 8016960:	687a      	ldr	r2, [r7, #4]
 8016962:	68b9      	ldr	r1, [r7, #8]
 8016964:	68f8      	ldr	r0, [r7, #12]
 8016966:	f7ff fe37 	bl	80165d8 <ComputeCmac>
 801696a:	4603      	mov	r3, r0
}
 801696c:	4618      	mov	r0, r3
 801696e:	3710      	adds	r7, #16
 8016970:	46bd      	mov	sp, r7
 8016972:	bd80      	pop	{r7, pc}

08016974 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 8016974:	b580      	push	{r7, lr}
 8016976:	b088      	sub	sp, #32
 8016978:	af02      	add	r7, sp, #8
 801697a:	60f8      	str	r0, [r7, #12]
 801697c:	60b9      	str	r1, [r7, #8]
 801697e:	607a      	str	r2, [r7, #4]
 8016980:	70fb      	strb	r3, [r7, #3]
    if( buffer == NULL )
 8016982:	68fb      	ldr	r3, [r7, #12]
 8016984:	2b00      	cmp	r3, #0
 8016986:	d101      	bne.n	801698c <SecureElementVerifyAesCmac+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8016988:	2302      	movs	r3, #2
 801698a:	e01b      	b.n	80169c4 <SecureElementVerifyAesCmac+0x50>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 801698c:	2306      	movs	r3, #6
 801698e:	75fb      	strb	r3, [r7, #23]
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 8016990:	2300      	movs	r3, #0
 8016992:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 8016994:	78fa      	ldrb	r2, [r7, #3]
 8016996:	f107 0310 	add.w	r3, r7, #16
 801699a:	9300      	str	r3, [sp, #0]
 801699c:	4613      	mov	r3, r2
 801699e:	68ba      	ldr	r2, [r7, #8]
 80169a0:	68f9      	ldr	r1, [r7, #12]
 80169a2:	2000      	movs	r0, #0
 80169a4:	f7ff fe18 	bl	80165d8 <ComputeCmac>
 80169a8:	4603      	mov	r3, r0
 80169aa:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 80169ac:	7dfb      	ldrb	r3, [r7, #23]
 80169ae:	2b00      	cmp	r3, #0
 80169b0:	d001      	beq.n	80169b6 <SecureElementVerifyAesCmac+0x42>
    {
        return retval;
 80169b2:	7dfb      	ldrb	r3, [r7, #23]
 80169b4:	e006      	b.n	80169c4 <SecureElementVerifyAesCmac+0x50>
    }

    if( expectedCmac != compCmac )
 80169b6:	693b      	ldr	r3, [r7, #16]
 80169b8:	687a      	ldr	r2, [r7, #4]
 80169ba:	429a      	cmp	r2, r3
 80169bc:	d001      	beq.n	80169c2 <SecureElementVerifyAesCmac+0x4e>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 80169be:	2301      	movs	r3, #1
 80169c0:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 80169c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80169c4:	4618      	mov	r0, r3
 80169c6:	3718      	adds	r7, #24
 80169c8:	46bd      	mov	sp, r7
 80169ca:	bd80      	pop	{r7, pc}

080169cc <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 80169cc:	b580      	push	{r7, lr}
 80169ce:	b0c2      	sub	sp, #264	@ 0x108
 80169d0:	af00      	add	r7, sp, #0
 80169d2:	60f8      	str	r0, [r7, #12]
 80169d4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80169d8:	f5a0 7080 	sub.w	r0, r0, #256	@ 0x100
 80169dc:	6001      	str	r1, [r0, #0]
 80169de:	4611      	mov	r1, r2
 80169e0:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80169e4:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80169e8:	6013      	str	r3, [r2, #0]
 80169ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80169ee:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 80169f2:	460a      	mov	r2, r1
 80169f4:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 80169f6:	68fb      	ldr	r3, [r7, #12]
 80169f8:	2b00      	cmp	r3, #0
 80169fa:	d006      	beq.n	8016a0a <SecureElementAesEncrypt+0x3e>
 80169fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8016a00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8016a04:	681b      	ldr	r3, [r3, #0]
 8016a06:	2b00      	cmp	r3, #0
 8016a08:	d101      	bne.n	8016a0e <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8016a0a:	2302      	movs	r3, #2
 8016a0c:	e059      	b.n	8016ac2 <SecureElementAesEncrypt+0xf6>
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 8016a0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8016a12:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8016a16:	681b      	ldr	r3, [r3, #0]
 8016a18:	f003 030f 	and.w	r3, r3, #15
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	d001      	beq.n	8016a24 <SecureElementAesEncrypt+0x58>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8016a20:	2305      	movs	r3, #5
 8016a22:	e04e      	b.n	8016ac2 <SecureElementAesEncrypt+0xf6>
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 8016a24:	f107 0314 	add.w	r3, r7, #20
 8016a28:	22f0      	movs	r2, #240	@ 0xf0
 8016a2a:	2100      	movs	r1, #0
 8016a2c:	4618      	mov	r0, r3
 8016a2e:	f000 fa1f 	bl	8016e70 <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 8016a32:	f107 0210 	add.w	r2, r7, #16
 8016a36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8016a3a:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8016a3e:	781b      	ldrb	r3, [r3, #0]
 8016a40:	4611      	mov	r1, r2
 8016a42:	4618      	mov	r0, r3
 8016a44:	f7ff fd98 	bl	8016578 <GetKeyByID>
 8016a48:	4603      	mov	r3, r0
 8016a4a:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 8016a4e:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	d133      	bne.n	8016abe <SecureElementAesEncrypt+0xf2>
    {
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 8016a56:	693b      	ldr	r3, [r7, #16]
 8016a58:	3301      	adds	r3, #1
 8016a5a:	f107 0214 	add.w	r2, r7, #20
 8016a5e:	2110      	movs	r1, #16
 8016a60:	4618      	mov	r0, r3
 8016a62:	f7ff fb65 	bl	8016130 <lorawan_aes_set_key>

        uint8_t block = 0;
 8016a66:	2300      	movs	r3, #0
 8016a68:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107

        while( size != 0 )
 8016a6c:	e020      	b.n	8016ab0 <SecureElementAesEncrypt+0xe4>
        {
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 8016a6e:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8016a72:	68fa      	ldr	r2, [r7, #12]
 8016a74:	18d0      	adds	r0, r2, r3
 8016a76:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8016a7a:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8016a7e:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8016a82:	6812      	ldr	r2, [r2, #0]
 8016a84:	4413      	add	r3, r2
 8016a86:	f107 0214 	add.w	r2, r7, #20
 8016a8a:	4619      	mov	r1, r3
 8016a8c:	f7ff fc2e 	bl	80162ec <lorawan_aes_encrypt>
            block = block + 16;
 8016a90:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8016a94:	3310      	adds	r3, #16
 8016a96:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
            size  = size - 16;
 8016a9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8016a9e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8016aa2:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8016aa6:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 8016aaa:	6812      	ldr	r2, [r2, #0]
 8016aac:	3a10      	subs	r2, #16
 8016aae:	601a      	str	r2, [r3, #0]
        while( size != 0 )
 8016ab0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8016ab4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8016ab8:	681b      	ldr	r3, [r3, #0]
 8016aba:	2b00      	cmp	r3, #0
 8016abc:	d1d7      	bne.n	8016a6e <SecureElementAesEncrypt+0xa2>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 8016abe:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
}
 8016ac2:	4618      	mov	r0, r3
 8016ac4:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8016ac8:	46bd      	mov	sp, r7
 8016aca:	bd80      	pop	{r7, pc}

08016acc <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 8016acc:	b580      	push	{r7, lr}
 8016ace:	b088      	sub	sp, #32
 8016ad0:	af00      	add	r7, sp, #0
 8016ad2:	6078      	str	r0, [r7, #4]
 8016ad4:	460b      	mov	r3, r1
 8016ad6:	70fb      	strb	r3, [r7, #3]
 8016ad8:	4613      	mov	r3, r2
 8016ada:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	2b00      	cmp	r3, #0
 8016ae0:	d101      	bne.n	8016ae6 <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8016ae2:	2302      	movs	r3, #2
 8016ae4:	e02d      	b.n	8016b42 <SecureElementDeriveAndStoreKey+0x76>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 8016ae6:	2306      	movs	r3, #6
 8016ae8:	77fb      	strb	r3, [r7, #31]

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 8016aea:	78bb      	ldrb	r3, [r7, #2]
 8016aec:	2b0c      	cmp	r3, #12
 8016aee:	d104      	bne.n	8016afa <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 8016af0:	78fb      	ldrb	r3, [r7, #3]
 8016af2:	2b0b      	cmp	r3, #11
 8016af4:	d001      	beq.n	8016afa <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8016af6:	2303      	movs	r3, #3
 8016af8:	e023      	b.n	8016b42 <SecureElementDeriveAndStoreKey+0x76>
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 8016afa:	f107 030c 	add.w	r3, r7, #12
 8016afe:	2200      	movs	r2, #0
 8016b00:	601a      	str	r2, [r3, #0]
 8016b02:	605a      	str	r2, [r3, #4]
 8016b04:	609a      	str	r2, [r3, #8]
 8016b06:	60da      	str	r2, [r3, #12]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 8016b08:	f107 030c 	add.w	r3, r7, #12
 8016b0c:	78fa      	ldrb	r2, [r7, #3]
 8016b0e:	2110      	movs	r1, #16
 8016b10:	6878      	ldr	r0, [r7, #4]
 8016b12:	f7ff ff5b 	bl	80169cc <SecureElementAesEncrypt>
 8016b16:	4603      	mov	r3, r0
 8016b18:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 8016b1a:	7ffb      	ldrb	r3, [r7, #31]
 8016b1c:	2b00      	cmp	r3, #0
 8016b1e:	d001      	beq.n	8016b24 <SecureElementDeriveAndStoreKey+0x58>
    {
        return retval;
 8016b20:	7ffb      	ldrb	r3, [r7, #31]
 8016b22:	e00e      	b.n	8016b42 <SecureElementDeriveAndStoreKey+0x76>
    }

    /* Store key */
    retval = SecureElementSetKey( targetKeyID, key );
 8016b24:	f107 020c 	add.w	r2, r7, #12
 8016b28:	78bb      	ldrb	r3, [r7, #2]
 8016b2a:	4611      	mov	r1, r2
 8016b2c:	4618      	mov	r0, r3
 8016b2e:	f7ff fea9 	bl	8016884 <SecureElementSetKey>
 8016b32:	4603      	mov	r3, r0
 8016b34:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 8016b36:	7ffb      	ldrb	r3, [r7, #31]
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	d001      	beq.n	8016b40 <SecureElementDeriveAndStoreKey+0x74>
    {
        return retval;
 8016b3c:	7ffb      	ldrb	r3, [r7, #31]
 8016b3e:	e000      	b.n	8016b42 <SecureElementDeriveAndStoreKey+0x76>
    }

    return SECURE_ELEMENT_SUCCESS;
 8016b40:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 8016b42:	4618      	mov	r0, r3
 8016b44:	3720      	adds	r7, #32
 8016b46:	46bd      	mov	sp, r7
 8016b48:	bd80      	pop	{r7, pc}

08016b4a <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 8016b4a:	b580      	push	{r7, lr}
 8016b4c:	b086      	sub	sp, #24
 8016b4e:	af00      	add	r7, sp, #0
 8016b50:	60b9      	str	r1, [r7, #8]
 8016b52:	607b      	str	r3, [r7, #4]
 8016b54:	4603      	mov	r3, r0
 8016b56:	73fb      	strb	r3, [r7, #15]
 8016b58:	4613      	mov	r3, r2
 8016b5a:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 8016b5c:	687b      	ldr	r3, [r7, #4]
 8016b5e:	2b00      	cmp	r3, #0
 8016b60:	d005      	beq.n	8016b6e <SecureElementProcessJoinAccept+0x24>
 8016b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b64:	2b00      	cmp	r3, #0
 8016b66:	d002      	beq.n	8016b6e <SecureElementProcessJoinAccept+0x24>
 8016b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	d101      	bne.n	8016b72 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8016b6e:	2302      	movs	r3, #2
 8016b70:	e05c      	b.n	8016c2c <SecureElementProcessJoinAccept+0xe2>
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 8016b72:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016b76:	2b21      	cmp	r3, #33	@ 0x21
 8016b78:	d901      	bls.n	8016b7e <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8016b7a:	2305      	movs	r3, #5
 8016b7c:	e056      	b.n	8016c2c <SecureElementProcessJoinAccept+0xe2>
    }

    /* Determine decryption key */
    KeyIdentifier_t encKeyID = NWK_KEY;
 8016b7e:	2301      	movs	r3, #1
 8016b80:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 8016b82:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016b86:	b29b      	uxth	r3, r3
 8016b88:	461a      	mov	r2, r3
 8016b8a:	6879      	ldr	r1, [r7, #4]
 8016b8c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016b8e:	f000 f934 	bl	8016dfa <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 8016b92:	687b      	ldr	r3, [r7, #4]
 8016b94:	1c58      	adds	r0, r3, #1
 8016b96:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016b9a:	3b01      	subs	r3, #1
 8016b9c:	4619      	mov	r1, r3
 8016b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ba0:	3301      	adds	r3, #1
 8016ba2:	7dfa      	ldrb	r2, [r7, #23]
 8016ba4:	f7ff ff12 	bl	80169cc <SecureElementAesEncrypt>
 8016ba8:	4603      	mov	r3, r0
 8016baa:	2b00      	cmp	r3, #0
 8016bac:	d001      	beq.n	8016bb2 <SecureElementProcessJoinAccept+0x68>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 8016bae:	2307      	movs	r3, #7
 8016bb0:	e03c      	b.n	8016c2c <SecureElementProcessJoinAccept+0xe2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 8016bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016bb4:	330b      	adds	r3, #11
 8016bb6:	781b      	ldrb	r3, [r3, #0]
 8016bb8:	09db      	lsrs	r3, r3, #7
 8016bba:	b2da      	uxtb	r2, r3
 8016bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016bbe:	701a      	strb	r2, [r3, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 8016bc0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016bc4:	3b04      	subs	r3, #4
 8016bc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016bc8:	4413      	add	r3, r2
 8016bca:	781b      	ldrb	r3, [r3, #0]
 8016bcc:	4619      	mov	r1, r3
 8016bce:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016bd2:	3b03      	subs	r3, #3
 8016bd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016bd6:	4413      	add	r3, r2
 8016bd8:	781b      	ldrb	r3, [r3, #0]
 8016bda:	021b      	lsls	r3, r3, #8
 8016bdc:	ea41 0203 	orr.w	r2, r1, r3
 8016be0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016be4:	3b02      	subs	r3, #2
 8016be6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016be8:	440b      	add	r3, r1
 8016bea:	781b      	ldrb	r3, [r3, #0]
 8016bec:	041b      	lsls	r3, r3, #16
 8016bee:	431a      	orrs	r2, r3
 8016bf0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016bf4:	3b01      	subs	r3, #1
 8016bf6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016bf8:	440b      	add	r3, r1
 8016bfa:	781b      	ldrb	r3, [r3, #0]
 8016bfc:	061b      	lsls	r3, r3, #24
 8016bfe:	4313      	orrs	r3, r2
 8016c00:	613b      	str	r3, [r7, #16]
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 8016c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016c04:	781b      	ldrb	r3, [r3, #0]
 8016c06:	2b00      	cmp	r3, #0
 8016c08:	d10d      	bne.n	8016c26 <SecureElementProcessJoinAccept+0xdc>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 8016c0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016c0e:	3b04      	subs	r3, #4
 8016c10:	4619      	mov	r1, r3
 8016c12:	2301      	movs	r3, #1
 8016c14:	693a      	ldr	r2, [r7, #16]
 8016c16:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016c18:	f7ff feac 	bl	8016974 <SecureElementVerifyAesCmac>
 8016c1c:	4603      	mov	r3, r0
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	d003      	beq.n	8016c2a <SecureElementProcessJoinAccept+0xe0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 8016c22:	2301      	movs	r3, #1
 8016c24:	e002      	b.n	8016c2c <SecureElementProcessJoinAccept+0xe2>
        }
    }
#endif /* LORAMAC_VERSION */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 8016c26:	2304      	movs	r3, #4
 8016c28:	e000      	b.n	8016c2c <SecureElementProcessJoinAccept+0xe2>
    }

    return SECURE_ELEMENT_SUCCESS;
 8016c2a:	2300      	movs	r3, #0
}
 8016c2c:	4618      	mov	r0, r3
 8016c2e:	3718      	adds	r7, #24
 8016c30:	46bd      	mov	sp, r7
 8016c32:	bd80      	pop	{r7, pc}

08016c34 <SecureElementSetDevEui>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
 8016c34:	b580      	push	{r7, lr}
 8016c36:	b082      	sub	sp, #8
 8016c38:	af00      	add	r7, sp, #0
 8016c3a:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	2b00      	cmp	r3, #0
 8016c40:	d101      	bne.n	8016c46 <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8016c42:	2302      	movs	r3, #2
 8016c44:	e007      	b.n	8016c56 <SecureElementSetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 8016c46:	4b06      	ldr	r3, [pc, #24]	@ (8016c60 <SecureElementSetDevEui+0x2c>)
 8016c48:	681b      	ldr	r3, [r3, #0]
 8016c4a:	2208      	movs	r2, #8
 8016c4c:	6879      	ldr	r1, [r7, #4]
 8016c4e:	4618      	mov	r0, r3
 8016c50:	f000 f8d3 	bl	8016dfa <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8016c54:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8016c56:	4618      	mov	r0, r3
 8016c58:	3708      	adds	r7, #8
 8016c5a:	46bd      	mov	sp, r7
 8016c5c:	bd80      	pop	{r7, pc}
 8016c5e:	bf00      	nop
 8016c60:	20001234 	.word	0x20001234

08016c64 <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
 8016c64:	b580      	push	{r7, lr}
 8016c66:	b082      	sub	sp, #8
 8016c68:	af00      	add	r7, sp, #0
 8016c6a:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	2b00      	cmp	r3, #0
 8016c70:	d101      	bne.n	8016c76 <SecureElementGetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8016c72:	2302      	movs	r3, #2
 8016c74:	e007      	b.n	8016c86 <SecureElementGetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 8016c76:	4b06      	ldr	r3, [pc, #24]	@ (8016c90 <SecureElementGetDevEui+0x2c>)
 8016c78:	681b      	ldr	r3, [r3, #0]
 8016c7a:	2208      	movs	r2, #8
 8016c7c:	4619      	mov	r1, r3
 8016c7e:	6878      	ldr	r0, [r7, #4]
 8016c80:	f000 f8bb 	bl	8016dfa <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8016c84:	2300      	movs	r3, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8016c86:	4618      	mov	r0, r3
 8016c88:	3708      	adds	r7, #8
 8016c8a:	46bd      	mov	sp, r7
 8016c8c:	bd80      	pop	{r7, pc}
 8016c8e:	bf00      	nop
 8016c90:	20001234 	.word	0x20001234

08016c94 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
 8016c94:	b580      	push	{r7, lr}
 8016c96:	b082      	sub	sp, #8
 8016c98:	af00      	add	r7, sp, #0
 8016c9a:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 8016c9c:	687b      	ldr	r3, [r7, #4]
 8016c9e:	2b00      	cmp	r3, #0
 8016ca0:	d101      	bne.n	8016ca6 <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8016ca2:	2302      	movs	r3, #2
 8016ca4:	e008      	b.n	8016cb8 <SecureElementSetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 8016ca6:	4b06      	ldr	r3, [pc, #24]	@ (8016cc0 <SecureElementSetJoinEui+0x2c>)
 8016ca8:	681b      	ldr	r3, [r3, #0]
 8016caa:	3308      	adds	r3, #8
 8016cac:	2208      	movs	r2, #8
 8016cae:	6879      	ldr	r1, [r7, #4]
 8016cb0:	4618      	mov	r0, r3
 8016cb2:	f000 f8a2 	bl	8016dfa <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8016cb6:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8016cb8:	4618      	mov	r0, r3
 8016cba:	3708      	adds	r7, #8
 8016cbc:	46bd      	mov	sp, r7
 8016cbe:	bd80      	pop	{r7, pc}
 8016cc0:	20001234 	.word	0x20001234

08016cc4 <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
 8016cc4:	b480      	push	{r7}
 8016cc6:	b083      	sub	sp, #12
 8016cc8:	af00      	add	r7, sp, #0
 8016cca:	4603      	mov	r3, r0
 8016ccc:	6039      	str	r1, [r7, #0]
 8016cce:	71fb      	strb	r3, [r7, #7]
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 8016cd0:	79fb      	ldrb	r3, [r7, #7]
 8016cd2:	2b02      	cmp	r3, #2
 8016cd4:	d104      	bne.n	8016ce0 <SecureElementSetDevAddr+0x1c>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 8016cd6:	4b07      	ldr	r3, [pc, #28]	@ (8016cf4 <SecureElementSetDevAddr+0x30>)
 8016cd8:	681b      	ldr	r3, [r3, #0]
 8016cda:	683a      	ldr	r2, [r7, #0]
 8016cdc:	611a      	str	r2, [r3, #16]
 8016cde:	e003      	b.n	8016ce8 <SecureElementSetDevAddr+0x24>
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 8016ce0:	4b04      	ldr	r3, [pc, #16]	@ (8016cf4 <SecureElementSetDevAddr+0x30>)
 8016ce2:	681b      	ldr	r3, [r3, #0]
 8016ce4:	683a      	ldr	r2, [r7, #0]
 8016ce6:	615a      	str	r2, [r3, #20]
    }

    return SECURE_ELEMENT_SUCCESS;
 8016ce8:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 8016cea:	4618      	mov	r0, r3
 8016cec:	370c      	adds	r7, #12
 8016cee:	46bd      	mov	sp, r7
 8016cf0:	bc80      	pop	{r7}
 8016cf2:	4770      	bx	lr
 8016cf4:	20001234 	.word	0x20001234

08016cf8 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
 8016cf8:	b580      	push	{r7, lr}
 8016cfa:	b082      	sub	sp, #8
 8016cfc:	af00      	add	r7, sp, #0
 8016cfe:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	d101      	bne.n	8016d0a <SecureElementGetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8016d06:	2302      	movs	r3, #2
 8016d08:	e008      	b.n	8016d1c <SecureElementGetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 8016d0a:	4b06      	ldr	r3, [pc, #24]	@ (8016d24 <SecureElementGetJoinEui+0x2c>)
 8016d0c:	681b      	ldr	r3, [r3, #0]
 8016d0e:	3308      	adds	r3, #8
 8016d10:	2208      	movs	r2, #8
 8016d12:	4619      	mov	r1, r3
 8016d14:	6878      	ldr	r0, [r7, #4]
 8016d16:	f000 f870 	bl	8016dfa <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8016d1a:	2300      	movs	r3, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8016d1c:	4618      	mov	r0, r3
 8016d1e:	3708      	adds	r7, #8
 8016d20:	46bd      	mov	sp, r7
 8016d22:	bd80      	pop	{r7, pc}
 8016d24:	20001234 	.word	0x20001234

08016d28 <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
 8016d28:	b480      	push	{r7}
 8016d2a:	b083      	sub	sp, #12
 8016d2c:	af00      	add	r7, sp, #0
 8016d2e:	4603      	mov	r3, r0
 8016d30:	6039      	str	r1, [r7, #0]
 8016d32:	71fb      	strb	r3, [r7, #7]
    if( devAddr == NULL )
 8016d34:	683b      	ldr	r3, [r7, #0]
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	d101      	bne.n	8016d3e <SecureElementGetDevAddr+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8016d3a:	2302      	movs	r3, #2
 8016d3c:	e00e      	b.n	8016d5c <SecureElementGetDevAddr+0x34>
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 8016d3e:	79fb      	ldrb	r3, [r7, #7]
 8016d40:	2b02      	cmp	r3, #2
 8016d42:	d105      	bne.n	8016d50 <SecureElementGetDevAddr+0x28>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 8016d44:	4b08      	ldr	r3, [pc, #32]	@ (8016d68 <SecureElementGetDevAddr+0x40>)
 8016d46:	681b      	ldr	r3, [r3, #0]
 8016d48:	691a      	ldr	r2, [r3, #16]
 8016d4a:	683b      	ldr	r3, [r7, #0]
 8016d4c:	601a      	str	r2, [r3, #0]
 8016d4e:	e004      	b.n	8016d5a <SecureElementGetDevAddr+0x32>
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 8016d50:	4b05      	ldr	r3, [pc, #20]	@ (8016d68 <SecureElementGetDevAddr+0x40>)
 8016d52:	681b      	ldr	r3, [r3, #0]
 8016d54:	695a      	ldr	r2, [r3, #20]
 8016d56:	683b      	ldr	r3, [r7, #0]
 8016d58:	601a      	str	r2, [r3, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 8016d5a:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 8016d5c:	4618      	mov	r0, r3
 8016d5e:	370c      	adds	r7, #12
 8016d60:	46bd      	mov	sp, r7
 8016d62:	bc80      	pop	{r7}
 8016d64:	4770      	bx	lr
 8016d66:	bf00      	nop
 8016d68:	20001234 	.word	0x20001234

08016d6c <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 8016d6c:	b480      	push	{r7}
 8016d6e:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8016d70:	4b0d      	ldr	r3, [pc, #52]	@ (8016da8 <rand1+0x3c>)
 8016d72:	681b      	ldr	r3, [r3, #0]
 8016d74:	4a0d      	ldr	r2, [pc, #52]	@ (8016dac <rand1+0x40>)
 8016d76:	fb02 f303 	mul.w	r3, r2, r3
 8016d7a:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 8016d7e:	3339      	adds	r3, #57	@ 0x39
 8016d80:	4a09      	ldr	r2, [pc, #36]	@ (8016da8 <rand1+0x3c>)
 8016d82:	6013      	str	r3, [r2, #0]
 8016d84:	4b08      	ldr	r3, [pc, #32]	@ (8016da8 <rand1+0x3c>)
 8016d86:	681a      	ldr	r2, [r3, #0]
 8016d88:	2303      	movs	r3, #3
 8016d8a:	fba3 1302 	umull	r1, r3, r3, r2
 8016d8e:	1ad1      	subs	r1, r2, r3
 8016d90:	0849      	lsrs	r1, r1, #1
 8016d92:	440b      	add	r3, r1
 8016d94:	0f99      	lsrs	r1, r3, #30
 8016d96:	460b      	mov	r3, r1
 8016d98:	07db      	lsls	r3, r3, #31
 8016d9a:	1a5b      	subs	r3, r3, r1
 8016d9c:	1ad1      	subs	r1, r2, r3
 8016d9e:	460b      	mov	r3, r1
}
 8016da0:	4618      	mov	r0, r3
 8016da2:	46bd      	mov	sp, r7
 8016da4:	bc80      	pop	{r7}
 8016da6:	4770      	bx	lr
 8016da8:	200000d4 	.word	0x200000d4
 8016dac:	41c64e6d 	.word	0x41c64e6d

08016db0 <srand1>:

void srand1( uint32_t seed )
{
 8016db0:	b480      	push	{r7}
 8016db2:	b083      	sub	sp, #12
 8016db4:	af00      	add	r7, sp, #0
 8016db6:	6078      	str	r0, [r7, #4]
    next = seed;
 8016db8:	4a03      	ldr	r2, [pc, #12]	@ (8016dc8 <srand1+0x18>)
 8016dba:	687b      	ldr	r3, [r7, #4]
 8016dbc:	6013      	str	r3, [r2, #0]
}
 8016dbe:	bf00      	nop
 8016dc0:	370c      	adds	r7, #12
 8016dc2:	46bd      	mov	sp, r7
 8016dc4:	bc80      	pop	{r7}
 8016dc6:	4770      	bx	lr
 8016dc8:	200000d4 	.word	0x200000d4

08016dcc <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8016dcc:	b580      	push	{r7, lr}
 8016dce:	b082      	sub	sp, #8
 8016dd0:	af00      	add	r7, sp, #0
 8016dd2:	6078      	str	r0, [r7, #4]
 8016dd4:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8016dd6:	f7ff ffc9 	bl	8016d6c <rand1>
 8016dda:	4602      	mov	r2, r0
 8016ddc:	6839      	ldr	r1, [r7, #0]
 8016dde:	687b      	ldr	r3, [r7, #4]
 8016de0:	1acb      	subs	r3, r1, r3
 8016de2:	3301      	adds	r3, #1
 8016de4:	fb92 f1f3 	sdiv	r1, r2, r3
 8016de8:	fb01 f303 	mul.w	r3, r1, r3
 8016dec:	1ad2      	subs	r2, r2, r3
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	4413      	add	r3, r2
}
 8016df2:	4618      	mov	r0, r3
 8016df4:	3708      	adds	r7, #8
 8016df6:	46bd      	mov	sp, r7
 8016df8:	bd80      	pop	{r7, pc}

08016dfa <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8016dfa:	b480      	push	{r7}
 8016dfc:	b085      	sub	sp, #20
 8016dfe:	af00      	add	r7, sp, #0
 8016e00:	60f8      	str	r0, [r7, #12]
 8016e02:	60b9      	str	r1, [r7, #8]
 8016e04:	4613      	mov	r3, r2
 8016e06:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8016e08:	e007      	b.n	8016e1a <memcpy1+0x20>
    {
        *dst++ = *src++;
 8016e0a:	68ba      	ldr	r2, [r7, #8]
 8016e0c:	1c53      	adds	r3, r2, #1
 8016e0e:	60bb      	str	r3, [r7, #8]
 8016e10:	68fb      	ldr	r3, [r7, #12]
 8016e12:	1c59      	adds	r1, r3, #1
 8016e14:	60f9      	str	r1, [r7, #12]
 8016e16:	7812      	ldrb	r2, [r2, #0]
 8016e18:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8016e1a:	88fb      	ldrh	r3, [r7, #6]
 8016e1c:	1e5a      	subs	r2, r3, #1
 8016e1e:	80fa      	strh	r2, [r7, #6]
 8016e20:	2b00      	cmp	r3, #0
 8016e22:	d1f2      	bne.n	8016e0a <memcpy1+0x10>
    }
}
 8016e24:	bf00      	nop
 8016e26:	bf00      	nop
 8016e28:	3714      	adds	r7, #20
 8016e2a:	46bd      	mov	sp, r7
 8016e2c:	bc80      	pop	{r7}
 8016e2e:	4770      	bx	lr

08016e30 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8016e30:	b480      	push	{r7}
 8016e32:	b085      	sub	sp, #20
 8016e34:	af00      	add	r7, sp, #0
 8016e36:	60f8      	str	r0, [r7, #12]
 8016e38:	60b9      	str	r1, [r7, #8]
 8016e3a:	4613      	mov	r3, r2
 8016e3c:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 8016e3e:	88fb      	ldrh	r3, [r7, #6]
 8016e40:	3b01      	subs	r3, #1
 8016e42:	68fa      	ldr	r2, [r7, #12]
 8016e44:	4413      	add	r3, r2
 8016e46:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8016e48:	e007      	b.n	8016e5a <memcpyr+0x2a>
    {
        *dst-- = *src++;
 8016e4a:	68ba      	ldr	r2, [r7, #8]
 8016e4c:	1c53      	adds	r3, r2, #1
 8016e4e:	60bb      	str	r3, [r7, #8]
 8016e50:	68fb      	ldr	r3, [r7, #12]
 8016e52:	1e59      	subs	r1, r3, #1
 8016e54:	60f9      	str	r1, [r7, #12]
 8016e56:	7812      	ldrb	r2, [r2, #0]
 8016e58:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8016e5a:	88fb      	ldrh	r3, [r7, #6]
 8016e5c:	1e5a      	subs	r2, r3, #1
 8016e5e:	80fa      	strh	r2, [r7, #6]
 8016e60:	2b00      	cmp	r3, #0
 8016e62:	d1f2      	bne.n	8016e4a <memcpyr+0x1a>
    }
}
 8016e64:	bf00      	nop
 8016e66:	bf00      	nop
 8016e68:	3714      	adds	r7, #20
 8016e6a:	46bd      	mov	sp, r7
 8016e6c:	bc80      	pop	{r7}
 8016e6e:	4770      	bx	lr

08016e70 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8016e70:	b480      	push	{r7}
 8016e72:	b083      	sub	sp, #12
 8016e74:	af00      	add	r7, sp, #0
 8016e76:	6078      	str	r0, [r7, #4]
 8016e78:	460b      	mov	r3, r1
 8016e7a:	70fb      	strb	r3, [r7, #3]
 8016e7c:	4613      	mov	r3, r2
 8016e7e:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8016e80:	e004      	b.n	8016e8c <memset1+0x1c>
    {
        *dst++ = value;
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	1c5a      	adds	r2, r3, #1
 8016e86:	607a      	str	r2, [r7, #4]
 8016e88:	78fa      	ldrb	r2, [r7, #3]
 8016e8a:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8016e8c:	883b      	ldrh	r3, [r7, #0]
 8016e8e:	1e5a      	subs	r2, r3, #1
 8016e90:	803a      	strh	r2, [r7, #0]
 8016e92:	2b00      	cmp	r3, #0
 8016e94:	d1f5      	bne.n	8016e82 <memset1+0x12>
    }
}
 8016e96:	bf00      	nop
 8016e98:	bf00      	nop
 8016e9a:	370c      	adds	r7, #12
 8016e9c:	46bd      	mov	sp, r7
 8016e9e:	bc80      	pop	{r7}
 8016ea0:	4770      	bx	lr
	...

08016ea4 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8016ea4:	b480      	push	{r7}
 8016ea6:	b085      	sub	sp, #20
 8016ea8:	af00      	add	r7, sp, #0
 8016eaa:	6078      	str	r0, [r7, #4]
 8016eac:	460b      	mov	r3, r1
 8016eae:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8016eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8016eb4:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	2b00      	cmp	r3, #0
 8016eba:	d101      	bne.n	8016ec0 <Crc32+0x1c>
    {
        return 0;
 8016ebc:	2300      	movs	r3, #0
 8016ebe:	e026      	b.n	8016f0e <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 8016ec0:	2300      	movs	r3, #0
 8016ec2:	817b      	strh	r3, [r7, #10]
 8016ec4:	e01d      	b.n	8016f02 <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 8016ec6:	897b      	ldrh	r3, [r7, #10]
 8016ec8:	687a      	ldr	r2, [r7, #4]
 8016eca:	4413      	add	r3, r2
 8016ecc:	781b      	ldrb	r3, [r3, #0]
 8016ece:	461a      	mov	r2, r3
 8016ed0:	68fb      	ldr	r3, [r7, #12]
 8016ed2:	4053      	eors	r3, r2
 8016ed4:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8016ed6:	2300      	movs	r3, #0
 8016ed8:	813b      	strh	r3, [r7, #8]
 8016eda:	e00c      	b.n	8016ef6 <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8016edc:	68fb      	ldr	r3, [r7, #12]
 8016ede:	085a      	lsrs	r2, r3, #1
 8016ee0:	68fb      	ldr	r3, [r7, #12]
 8016ee2:	f003 0301 	and.w	r3, r3, #1
 8016ee6:	425b      	negs	r3, r3
 8016ee8:	490b      	ldr	r1, [pc, #44]	@ (8016f18 <Crc32+0x74>)
 8016eea:	400b      	ands	r3, r1
 8016eec:	4053      	eors	r3, r2
 8016eee:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8016ef0:	893b      	ldrh	r3, [r7, #8]
 8016ef2:	3301      	adds	r3, #1
 8016ef4:	813b      	strh	r3, [r7, #8]
 8016ef6:	893b      	ldrh	r3, [r7, #8]
 8016ef8:	2b07      	cmp	r3, #7
 8016efa:	d9ef      	bls.n	8016edc <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 8016efc:	897b      	ldrh	r3, [r7, #10]
 8016efe:	3301      	adds	r3, #1
 8016f00:	817b      	strh	r3, [r7, #10]
 8016f02:	897a      	ldrh	r2, [r7, #10]
 8016f04:	887b      	ldrh	r3, [r7, #2]
 8016f06:	429a      	cmp	r2, r3
 8016f08:	d3dd      	bcc.n	8016ec6 <Crc32+0x22>
        }
    }

    return ~crc;
 8016f0a:	68fb      	ldr	r3, [r7, #12]
 8016f0c:	43db      	mvns	r3, r3
}
 8016f0e:	4618      	mov	r0, r3
 8016f10:	3714      	adds	r7, #20
 8016f12:	46bd      	mov	sp, r7
 8016f14:	bc80      	pop	{r7}
 8016f16:	4770      	bx	lr
 8016f18:	edb88320 	.word	0xedb88320

08016f1c <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8016f1c:	b480      	push	{r7}
 8016f1e:	b083      	sub	sp, #12
 8016f20:	af00      	add	r7, sp, #0
 8016f22:	6078      	str	r0, [r7, #4]
 8016f24:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	683a      	ldr	r2, [r7, #0]
 8016f2a:	619a      	str	r2, [r3, #24]
}
 8016f2c:	bf00      	nop
 8016f2e:	370c      	adds	r7, #12
 8016f30:	46bd      	mov	sp, r7
 8016f32:	bc80      	pop	{r7}
 8016f34:	4770      	bx	lr

08016f36 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8016f36:	b480      	push	{r7}
 8016f38:	b083      	sub	sp, #12
 8016f3a:	af00      	add	r7, sp, #0
 8016f3c:	6078      	str	r0, [r7, #4]
 8016f3e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	683a      	ldr	r2, [r7, #0]
 8016f44:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8016f46:	bf00      	nop
 8016f48:	370c      	adds	r7, #12
 8016f4a:	46bd      	mov	sp, r7
 8016f4c:	bc80      	pop	{r7}
 8016f4e:	4770      	bx	lr

08016f50 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8016f50:	b580      	push	{r7, lr}
 8016f52:	b084      	sub	sp, #16
 8016f54:	af02      	add	r7, sp, #8
 8016f56:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8016f58:	4a24      	ldr	r2, [pc, #144]	@ (8016fec <RadioInit+0x9c>)
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8016f5e:	4b24      	ldr	r3, [pc, #144]	@ (8016ff0 <RadioInit+0xa0>)
 8016f60:	2200      	movs	r2, #0
 8016f62:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8016f64:	4b22      	ldr	r3, [pc, #136]	@ (8016ff0 <RadioInit+0xa0>)
 8016f66:	2200      	movs	r2, #0
 8016f68:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8016f6a:	4b21      	ldr	r3, [pc, #132]	@ (8016ff0 <RadioInit+0xa0>)
 8016f6c:	2200      	movs	r2, #0
 8016f6e:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8016f70:	4b1f      	ldr	r3, [pc, #124]	@ (8016ff0 <RadioInit+0xa0>)
 8016f72:	2200      	movs	r2, #0
 8016f74:	659a      	str	r2, [r3, #88]	@ 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 8016f76:	481f      	ldr	r0, [pc, #124]	@ (8016ff4 <RadioInit+0xa4>)
 8016f78:	f001 fa38 	bl	80183ec <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8016f7c:	4b1c      	ldr	r3, [pc, #112]	@ (8016ff0 <RadioInit+0xa0>)
 8016f7e:	2200      	movs	r2, #0
 8016f80:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8016f82:	4b1b      	ldr	r3, [pc, #108]	@ (8016ff0 <RadioInit+0xa0>)
 8016f84:	2200      	movs	r2, #0
 8016f86:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8016f88:	f001 fcce 	bl	8018928 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8016f8c:	2100      	movs	r1, #0
 8016f8e:	2000      	movs	r0, #0
 8016f90:	f002 f89a 	bl	80190c8 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8016f94:	2204      	movs	r2, #4
 8016f96:	2100      	movs	r1, #0
 8016f98:	2001      	movs	r0, #1
 8016f9a:	f001 fe5d 	bl	8018c58 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8016f9e:	2300      	movs	r3, #0
 8016fa0:	2200      	movs	r2, #0
 8016fa2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8016fa6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8016faa:	f001 fd8d 	bl	8018ac8 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 8016fae:	f000 fd4f 	bl	8017a50 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8016fb2:	2300      	movs	r3, #0
 8016fb4:	9300      	str	r3, [sp, #0]
 8016fb6:	4b10      	ldr	r3, [pc, #64]	@ (8016ff8 <RadioInit+0xa8>)
 8016fb8:	2200      	movs	r2, #0
 8016fba:	f04f 31ff 	mov.w	r1, #4294967295
 8016fbe:	480f      	ldr	r0, [pc, #60]	@ (8016ffc <RadioInit+0xac>)
 8016fc0:	f003 fab6 	bl	801a530 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8016fc4:	2300      	movs	r3, #0
 8016fc6:	9300      	str	r3, [sp, #0]
 8016fc8:	4b0d      	ldr	r3, [pc, #52]	@ (8017000 <RadioInit+0xb0>)
 8016fca:	2200      	movs	r2, #0
 8016fcc:	f04f 31ff 	mov.w	r1, #4294967295
 8016fd0:	480c      	ldr	r0, [pc, #48]	@ (8017004 <RadioInit+0xb4>)
 8016fd2:	f003 faad 	bl	801a530 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8016fd6:	4809      	ldr	r0, [pc, #36]	@ (8016ffc <RadioInit+0xac>)
 8016fd8:	f003 fb4e 	bl	801a678 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8016fdc:	4809      	ldr	r0, [pc, #36]	@ (8017004 <RadioInit+0xb4>)
 8016fde:	f003 fb4b 	bl	801a678 <UTIL_TIMER_Stop>
}
 8016fe2:	bf00      	nop
 8016fe4:	3708      	adds	r7, #8
 8016fe6:	46bd      	mov	sp, r7
 8016fe8:	bd80      	pop	{r7, pc}
 8016fea:	bf00      	nop
 8016fec:	20001338 	.word	0x20001338
 8016ff0:	2000133c 	.word	0x2000133c
 8016ff4:	08017e75 	.word	0x08017e75
 8016ff8:	08017de5 	.word	0x08017de5
 8016ffc:	20001398 	.word	0x20001398
 8017000:	08017df9 	.word	0x08017df9
 8017004:	200013b0 	.word	0x200013b0

08017008 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8017008:	b580      	push	{r7, lr}
 801700a:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 801700c:	f001 fa36 	bl	801847c <SUBGRF_GetOperatingMode>
 8017010:	4603      	mov	r3, r0
 8017012:	2b07      	cmp	r3, #7
 8017014:	d00a      	beq.n	801702c <RadioGetStatus+0x24>
 8017016:	2b07      	cmp	r3, #7
 8017018:	dc0a      	bgt.n	8017030 <RadioGetStatus+0x28>
 801701a:	2b04      	cmp	r3, #4
 801701c:	d002      	beq.n	8017024 <RadioGetStatus+0x1c>
 801701e:	2b05      	cmp	r3, #5
 8017020:	d002      	beq.n	8017028 <RadioGetStatus+0x20>
 8017022:	e005      	b.n	8017030 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8017024:	2302      	movs	r3, #2
 8017026:	e004      	b.n	8017032 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8017028:	2301      	movs	r3, #1
 801702a:	e002      	b.n	8017032 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 801702c:	2303      	movs	r3, #3
 801702e:	e000      	b.n	8017032 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8017030:	2300      	movs	r3, #0
    }
}
 8017032:	4618      	mov	r0, r3
 8017034:	bd80      	pop	{r7, pc}
	...

08017038 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8017038:	b580      	push	{r7, lr}
 801703a:	b082      	sub	sp, #8
 801703c:	af00      	add	r7, sp, #0
 801703e:	4603      	mov	r3, r0
 8017040:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8017042:	4a1e      	ldr	r2, [pc, #120]	@ (80170bc <RadioSetModem+0x84>)
 8017044:	79fb      	ldrb	r3, [r7, #7]
 8017046:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8017048:	79fb      	ldrb	r3, [r7, #7]
 801704a:	4618      	mov	r0, r3
 801704c:	f002 fc02 	bl	8019854 <RFW_SetRadioModem>
    switch( modem )
 8017050:	79fb      	ldrb	r3, [r7, #7]
 8017052:	2b03      	cmp	r3, #3
 8017054:	d026      	beq.n	80170a4 <RadioSetModem+0x6c>
 8017056:	2b03      	cmp	r3, #3
 8017058:	dc03      	bgt.n	8017062 <RadioSetModem+0x2a>
 801705a:	2b00      	cmp	r3, #0
 801705c:	d008      	beq.n	8017070 <RadioSetModem+0x38>
 801705e:	2b01      	cmp	r3, #1
 8017060:	d00d      	beq.n	801707e <RadioSetModem+0x46>
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8017062:	2003      	movs	r0, #3
 8017064:	f001 fdd2 	bl	8018c0c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8017068:	4b14      	ldr	r3, [pc, #80]	@ (80170bc <RadioSetModem+0x84>)
 801706a:	2200      	movs	r2, #0
 801706c:	735a      	strb	r2, [r3, #13]
        break;
 801706e:	e021      	b.n	80170b4 <RadioSetModem+0x7c>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8017070:	2000      	movs	r0, #0
 8017072:	f001 fdcb 	bl	8018c0c <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8017076:	4b11      	ldr	r3, [pc, #68]	@ (80170bc <RadioSetModem+0x84>)
 8017078:	2200      	movs	r2, #0
 801707a:	735a      	strb	r2, [r3, #13]
        break;
 801707c:	e01a      	b.n	80170b4 <RadioSetModem+0x7c>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 801707e:	2001      	movs	r0, #1
 8017080:	f001 fdc4 	bl	8018c0c <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8017084:	4b0d      	ldr	r3, [pc, #52]	@ (80170bc <RadioSetModem+0x84>)
 8017086:	7b5a      	ldrb	r2, [r3, #13]
 8017088:	4b0c      	ldr	r3, [pc, #48]	@ (80170bc <RadioSetModem+0x84>)
 801708a:	7b1b      	ldrb	r3, [r3, #12]
 801708c:	429a      	cmp	r2, r3
 801708e:	d010      	beq.n	80170b2 <RadioSetModem+0x7a>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8017090:	4b0a      	ldr	r3, [pc, #40]	@ (80170bc <RadioSetModem+0x84>)
 8017092:	7b1a      	ldrb	r2, [r3, #12]
 8017094:	4b09      	ldr	r3, [pc, #36]	@ (80170bc <RadioSetModem+0x84>)
 8017096:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8017098:	4b08      	ldr	r3, [pc, #32]	@ (80170bc <RadioSetModem+0x84>)
 801709a:	7b5b      	ldrb	r3, [r3, #13]
 801709c:	4618      	mov	r0, r3
 801709e:	f000 fe6b 	bl	8017d78 <RadioSetPublicNetwork>
        }
        break;
 80170a2:	e006      	b.n	80170b2 <RadioSetModem+0x7a>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80170a4:	2002      	movs	r0, #2
 80170a6:	f001 fdb1 	bl	8018c0c <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 80170aa:	4b04      	ldr	r3, [pc, #16]	@ (80170bc <RadioSetModem+0x84>)
 80170ac:	2200      	movs	r2, #0
 80170ae:	735a      	strb	r2, [r3, #13]
        break;
 80170b0:	e000      	b.n	80170b4 <RadioSetModem+0x7c>
        break;
 80170b2:	bf00      	nop
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
        break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 80170b4:	bf00      	nop
 80170b6:	3708      	adds	r7, #8
 80170b8:	46bd      	mov	sp, r7
 80170ba:	bd80      	pop	{r7, pc}
 80170bc:	2000133c 	.word	0x2000133c

080170c0 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 80170c0:	b580      	push	{r7, lr}
 80170c2:	b082      	sub	sp, #8
 80170c4:	af00      	add	r7, sp, #0
 80170c6:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 80170c8:	6878      	ldr	r0, [r7, #4]
 80170ca:	f001 fd59 	bl	8018b80 <SUBGRF_SetRfFrequency>
}
 80170ce:	bf00      	nop
 80170d0:	3708      	adds	r7, #8
 80170d2:	46bd      	mov	sp, r7
 80170d4:	bd80      	pop	{r7, pc}

080170d6 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 80170d6:	b580      	push	{r7, lr}
 80170d8:	b090      	sub	sp, #64	@ 0x40
 80170da:	af0a      	add	r7, sp, #40	@ 0x28
 80170dc:	60f8      	str	r0, [r7, #12]
 80170de:	60b9      	str	r1, [r7, #8]
 80170e0:	603b      	str	r3, [r7, #0]
 80170e2:	4613      	mov	r3, r2
 80170e4:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 80170e6:	2301      	movs	r3, #1
 80170e8:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 80170ea:	2300      	movs	r3, #0
 80170ec:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 80170ee:	2300      	movs	r3, #0
 80170f0:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 80170f2:	f000 fcc0 	bl	8017a76 <RadioStandby>

    RadioSetModem( MODEM_FSK );
 80170f6:	2000      	movs	r0, #0
 80170f8:	f7ff ff9e 	bl	8017038 <RadioSetModem>

    RadioSetChannel( freq );
 80170fc:	68f8      	ldr	r0, [r7, #12]
 80170fe:	f7ff ffdf 	bl	80170c0 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8017102:	2301      	movs	r3, #1
 8017104:	9309      	str	r3, [sp, #36]	@ 0x24
 8017106:	2300      	movs	r3, #0
 8017108:	9308      	str	r3, [sp, #32]
 801710a:	2300      	movs	r3, #0
 801710c:	9307      	str	r3, [sp, #28]
 801710e:	2300      	movs	r3, #0
 8017110:	9306      	str	r3, [sp, #24]
 8017112:	2300      	movs	r3, #0
 8017114:	9305      	str	r3, [sp, #20]
 8017116:	2300      	movs	r3, #0
 8017118:	9304      	str	r3, [sp, #16]
 801711a:	2300      	movs	r3, #0
 801711c:	9303      	str	r3, [sp, #12]
 801711e:	2300      	movs	r3, #0
 8017120:	9302      	str	r3, [sp, #8]
 8017122:	2303      	movs	r3, #3
 8017124:	9301      	str	r3, [sp, #4]
 8017126:	68bb      	ldr	r3, [r7, #8]
 8017128:	9300      	str	r3, [sp, #0]
 801712a:	2300      	movs	r3, #0
 801712c:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8017130:	68b9      	ldr	r1, [r7, #8]
 8017132:	2000      	movs	r0, #0
 8017134:	f000 f83c 	bl	80171b0 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8017138:	2000      	movs	r0, #0
 801713a:	f000 fca3 	bl	8017a84 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 801713e:	f000 fe49 	bl	8017dd4 <RadioGetWakeupTime>
 8017142:	4603      	mov	r3, r0
 8017144:	4618      	mov	r0, r3
 8017146:	f7ea fb07 	bl	8001758 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 801714a:	f003 fb2f 	bl	801a7ac <UTIL_TIMER_GetCurrentTime>
 801714e:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8017150:	e00d      	b.n	801716e <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8017152:	2000      	movs	r0, #0
 8017154:	f000 fd90 	bl	8017c78 <RadioRssi>
 8017158:	4603      	mov	r3, r0
 801715a:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 801715c:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8017160:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017164:	429a      	cmp	r2, r3
 8017166:	dd02      	ble.n	801716e <RadioIsChannelFree+0x98>
        {
            status = false;
 8017168:	2300      	movs	r3, #0
 801716a:	75fb      	strb	r3, [r7, #23]
            break;
 801716c:	e006      	b.n	801717c <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 801716e:	6938      	ldr	r0, [r7, #16]
 8017170:	f003 fb2e 	bl	801a7d0 <UTIL_TIMER_GetElapsedTime>
 8017174:	4602      	mov	r2, r0
 8017176:	683b      	ldr	r3, [r7, #0]
 8017178:	4293      	cmp	r3, r2
 801717a:	d8ea      	bhi.n	8017152 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 801717c:	f000 fc7b 	bl	8017a76 <RadioStandby>

    return status;
 8017180:	7dfb      	ldrb	r3, [r7, #23]
}
 8017182:	4618      	mov	r0, r3
 8017184:	3718      	adds	r7, #24
 8017186:	46bd      	mov	sp, r7
 8017188:	bd80      	pop	{r7, pc}

0801718a <RadioRandom>:

static uint32_t RadioRandom( void )
{
 801718a:	b580      	push	{r7, lr}
 801718c:	b082      	sub	sp, #8
 801718e:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8017190:	2300      	movs	r3, #0
 8017192:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8017194:	2300      	movs	r3, #0
 8017196:	2200      	movs	r2, #0
 8017198:	2100      	movs	r1, #0
 801719a:	2000      	movs	r0, #0
 801719c:	f001 fc94 	bl	8018ac8 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 80171a0:	f001 fa3d 	bl	801861e <SUBGRF_GetRandom>
 80171a4:	6078      	str	r0, [r7, #4]

    return rnd;
 80171a6:	687b      	ldr	r3, [r7, #4]
}
 80171a8:	4618      	mov	r0, r3
 80171aa:	3708      	adds	r7, #8
 80171ac:	46bd      	mov	sp, r7
 80171ae:	bd80      	pop	{r7, pc}

080171b0 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 80171b0:	b580      	push	{r7, lr}
 80171b2:	b086      	sub	sp, #24
 80171b4:	af00      	add	r7, sp, #0
 80171b6:	60b9      	str	r1, [r7, #8]
 80171b8:	607a      	str	r2, [r7, #4]
 80171ba:	461a      	mov	r2, r3
 80171bc:	4603      	mov	r3, r0
 80171be:	73fb      	strb	r3, [r7, #15]
 80171c0:	4613      	mov	r3, r2
 80171c2:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 80171c4:	4a93      	ldr	r2, [pc, #588]	@ (8017414 <RadioSetRxConfig+0x264>)
 80171c6:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80171ca:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 80171cc:	f002 fb00 	bl	80197d0 <RFW_DeInit>
    if( rxContinuous == true )
 80171d0:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80171d4:	2b00      	cmp	r3, #0
 80171d6:	d001      	beq.n	80171dc <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 80171d8:	2300      	movs	r3, #0
 80171da:	853b      	strh	r3, [r7, #40]	@ 0x28
    }
    if( fixLen == true )
 80171dc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80171e0:	2b00      	cmp	r3, #0
 80171e2:	d004      	beq.n	80171ee <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 80171e4:	4a8c      	ldr	r2, [pc, #560]	@ (8017418 <RadioSetRxConfig+0x268>)
 80171e6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80171ea:	7013      	strb	r3, [r2, #0]
 80171ec:	e002      	b.n	80171f4 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 80171ee:	4b8a      	ldr	r3, [pc, #552]	@ (8017418 <RadioSetRxConfig+0x268>)
 80171f0:	22ff      	movs	r2, #255	@ 0xff
 80171f2:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 80171f4:	7bfb      	ldrb	r3, [r7, #15]
 80171f6:	2b00      	cmp	r3, #0
 80171f8:	d002      	beq.n	8017200 <RadioSetRxConfig+0x50>
 80171fa:	2b01      	cmp	r3, #1
 80171fc:	d068      	beq.n	80172d0 <RadioSetRxConfig+0x120>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 80171fe:	e105      	b.n	801740c <RadioSetRxConfig+0x25c>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8017200:	2000      	movs	r0, #0
 8017202:	f001 fb53 	bl	80188ac <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8017206:	4b83      	ldr	r3, [pc, #524]	@ (8017414 <RadioSetRxConfig+0x264>)
 8017208:	2200      	movs	r2, #0
 801720a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 801720e:	4a81      	ldr	r2, [pc, #516]	@ (8017414 <RadioSetRxConfig+0x264>)
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8017214:	4b7f      	ldr	r3, [pc, #508]	@ (8017414 <RadioSetRxConfig+0x264>)
 8017216:	220b      	movs	r2, #11
 8017218:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801721c:	68b8      	ldr	r0, [r7, #8]
 801721e:	f002 fa17 	bl	8019650 <SUBGRF_GetFskBandwidthRegValue>
 8017222:	4603      	mov	r3, r0
 8017224:	461a      	mov	r2, r3
 8017226:	4b7b      	ldr	r3, [pc, #492]	@ (8017414 <RadioSetRxConfig+0x264>)
 8017228:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801722c:	4b79      	ldr	r3, [pc, #484]	@ (8017414 <RadioSetRxConfig+0x264>)
 801722e:	2200      	movs	r2, #0
 8017230:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8017232:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017234:	00db      	lsls	r3, r3, #3
 8017236:	b29a      	uxth	r2, r3
 8017238:	4b76      	ldr	r3, [pc, #472]	@ (8017414 <RadioSetRxConfig+0x264>)
 801723a:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801723c:	4b75      	ldr	r3, [pc, #468]	@ (8017414 <RadioSetRxConfig+0x264>)
 801723e:	2204      	movs	r2, #4
 8017240:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8017242:	4b74      	ldr	r3, [pc, #464]	@ (8017414 <RadioSetRxConfig+0x264>)
 8017244:	2218      	movs	r2, #24
 8017246:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8017248:	4b72      	ldr	r3, [pc, #456]	@ (8017414 <RadioSetRxConfig+0x264>)
 801724a:	2200      	movs	r2, #0
 801724c:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801724e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8017252:	f083 0301 	eor.w	r3, r3, #1
 8017256:	b2db      	uxtb	r3, r3
 8017258:	461a      	mov	r2, r3
 801725a:	4b6e      	ldr	r3, [pc, #440]	@ (8017414 <RadioSetRxConfig+0x264>)
 801725c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 801725e:	4b6e      	ldr	r3, [pc, #440]	@ (8017418 <RadioSetRxConfig+0x268>)
 8017260:	781a      	ldrb	r2, [r3, #0]
 8017262:	4b6c      	ldr	r3, [pc, #432]	@ (8017414 <RadioSetRxConfig+0x264>)
 8017264:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8017266:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 801726a:	2b00      	cmp	r3, #0
 801726c:	d003      	beq.n	8017276 <RadioSetRxConfig+0xc6>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801726e:	4b69      	ldr	r3, [pc, #420]	@ (8017414 <RadioSetRxConfig+0x264>)
 8017270:	22f2      	movs	r2, #242	@ 0xf2
 8017272:	75da      	strb	r2, [r3, #23]
 8017274:	e002      	b.n	801727c <RadioSetRxConfig+0xcc>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8017276:	4b67      	ldr	r3, [pc, #412]	@ (8017414 <RadioSetRxConfig+0x264>)
 8017278:	2201      	movs	r2, #1
 801727a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801727c:	4b65      	ldr	r3, [pc, #404]	@ (8017414 <RadioSetRxConfig+0x264>)
 801727e:	2201      	movs	r2, #1
 8017280:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8017282:	f000 fbf8 	bl	8017a76 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8017286:	2000      	movs	r0, #0
 8017288:	f7ff fed6 	bl	8017038 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801728c:	4863      	ldr	r0, [pc, #396]	@ (801741c <RadioSetRxConfig+0x26c>)
 801728e:	f001 fdb1 	bl	8018df4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017292:	4863      	ldr	r0, [pc, #396]	@ (8017420 <RadioSetRxConfig+0x270>)
 8017294:	f001 fe7c 	bl	8018f90 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8017298:	4a62      	ldr	r2, [pc, #392]	@ (8017424 <RadioSetRxConfig+0x274>)
 801729a:	f107 0310 	add.w	r3, r7, #16
 801729e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80172a2:	e883 0003 	stmia.w	r3, {r0, r1}
 80172a6:	f107 0310 	add.w	r3, r7, #16
 80172aa:	4618      	mov	r0, r3
 80172ac:	f001 f935 	bl	801851a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80172b0:	f240 10ff 	movw	r0, #511	@ 0x1ff
 80172b4:	f001 f980 	bl	80185b8 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80172b8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80172ba:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80172be:	fb02 f303 	mul.w	r3, r2, r3
 80172c2:	461a      	mov	r2, r3
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80172ca:	4a52      	ldr	r2, [pc, #328]	@ (8017414 <RadioSetRxConfig+0x264>)
 80172cc:	6093      	str	r3, [r2, #8]
            break;
 80172ce:	e09d      	b.n	801740c <RadioSetRxConfig+0x25c>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80172d0:	2000      	movs	r0, #0
 80172d2:	f001 faeb 	bl	80188ac <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80172d6:	4b4f      	ldr	r3, [pc, #316]	@ (8017414 <RadioSetRxConfig+0x264>)
 80172d8:	2201      	movs	r2, #1
 80172da:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 80172de:	687b      	ldr	r3, [r7, #4]
 80172e0:	b2da      	uxtb	r2, r3
 80172e2:	4b4c      	ldr	r3, [pc, #304]	@ (8017414 <RadioSetRxConfig+0x264>)
 80172e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 80172e8:	4a4f      	ldr	r2, [pc, #316]	@ (8017428 <RadioSetRxConfig+0x278>)
 80172ea:	68bb      	ldr	r3, [r7, #8]
 80172ec:	4413      	add	r3, r2
 80172ee:	781a      	ldrb	r2, [r3, #0]
 80172f0:	4b48      	ldr	r3, [pc, #288]	@ (8017414 <RadioSetRxConfig+0x264>)
 80172f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 80172f6:	4a47      	ldr	r2, [pc, #284]	@ (8017414 <RadioSetRxConfig+0x264>)
 80172f8:	7bbb      	ldrb	r3, [r7, #14]
 80172fa:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80172fe:	68bb      	ldr	r3, [r7, #8]
 8017300:	2b00      	cmp	r3, #0
 8017302:	d105      	bne.n	8017310 <RadioSetRxConfig+0x160>
 8017304:	687b      	ldr	r3, [r7, #4]
 8017306:	2b0b      	cmp	r3, #11
 8017308:	d008      	beq.n	801731c <RadioSetRxConfig+0x16c>
 801730a:	687b      	ldr	r3, [r7, #4]
 801730c:	2b0c      	cmp	r3, #12
 801730e:	d005      	beq.n	801731c <RadioSetRxConfig+0x16c>
 8017310:	68bb      	ldr	r3, [r7, #8]
 8017312:	2b01      	cmp	r3, #1
 8017314:	d107      	bne.n	8017326 <RadioSetRxConfig+0x176>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	2b0c      	cmp	r3, #12
 801731a:	d104      	bne.n	8017326 <RadioSetRxConfig+0x176>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801731c:	4b3d      	ldr	r3, [pc, #244]	@ (8017414 <RadioSetRxConfig+0x264>)
 801731e:	2201      	movs	r2, #1
 8017320:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8017324:	e003      	b.n	801732e <RadioSetRxConfig+0x17e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8017326:	4b3b      	ldr	r3, [pc, #236]	@ (8017414 <RadioSetRxConfig+0x264>)
 8017328:	2200      	movs	r2, #0
 801732a:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801732e:	4b39      	ldr	r3, [pc, #228]	@ (8017414 <RadioSetRxConfig+0x264>)
 8017330:	2201      	movs	r2, #1
 8017332:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017334:	4b37      	ldr	r3, [pc, #220]	@ (8017414 <RadioSetRxConfig+0x264>)
 8017336:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 801733a:	2b05      	cmp	r3, #5
 801733c:	d004      	beq.n	8017348 <RadioSetRxConfig+0x198>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801733e:	4b35      	ldr	r3, [pc, #212]	@ (8017414 <RadioSetRxConfig+0x264>)
 8017340:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017344:	2b06      	cmp	r3, #6
 8017346:	d10a      	bne.n	801735e <RadioSetRxConfig+0x1ae>
                if( preambleLen < 12 )
 8017348:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801734a:	2b0b      	cmp	r3, #11
 801734c:	d803      	bhi.n	8017356 <RadioSetRxConfig+0x1a6>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801734e:	4b31      	ldr	r3, [pc, #196]	@ (8017414 <RadioSetRxConfig+0x264>)
 8017350:	220c      	movs	r2, #12
 8017352:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8017354:	e006      	b.n	8017364 <RadioSetRxConfig+0x1b4>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8017356:	4a2f      	ldr	r2, [pc, #188]	@ (8017414 <RadioSetRxConfig+0x264>)
 8017358:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801735a:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801735c:	e002      	b.n	8017364 <RadioSetRxConfig+0x1b4>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801735e:	4a2d      	ldr	r2, [pc, #180]	@ (8017414 <RadioSetRxConfig+0x264>)
 8017360:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017362:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8017364:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8017368:	4b2a      	ldr	r3, [pc, #168]	@ (8017414 <RadioSetRxConfig+0x264>)
 801736a:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801736c:	4b2a      	ldr	r3, [pc, #168]	@ (8017418 <RadioSetRxConfig+0x268>)
 801736e:	781a      	ldrb	r2, [r3, #0]
 8017370:	4b28      	ldr	r3, [pc, #160]	@ (8017414 <RadioSetRxConfig+0x264>)
 8017372:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8017374:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8017378:	4b26      	ldr	r3, [pc, #152]	@ (8017414 <RadioSetRxConfig+0x264>)
 801737a:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801737e:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8017382:	4b24      	ldr	r3, [pc, #144]	@ (8017414 <RadioSetRxConfig+0x264>)
 8017384:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8017388:	f000 fb75 	bl	8017a76 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801738c:	2001      	movs	r0, #1
 801738e:	f7ff fe53 	bl	8017038 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017392:	4822      	ldr	r0, [pc, #136]	@ (801741c <RadioSetRxConfig+0x26c>)
 8017394:	f001 fd2e 	bl	8018df4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017398:	4821      	ldr	r0, [pc, #132]	@ (8017420 <RadioSetRxConfig+0x270>)
 801739a:	f001 fdf9 	bl	8018f90 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801739e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80173a0:	b2db      	uxtb	r3, r3
 80173a2:	4618      	mov	r0, r3
 80173a4:	f001 fa91 	bl	80188ca <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 80173a8:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 80173ac:	f001 ff4a 	bl	8019244 <SUBGRF_ReadRegister>
 80173b0:	4603      	mov	r3, r0
 80173b2:	f003 0301 	and.w	r3, r3, #1
 80173b6:	b2db      	uxtb	r3, r3
 80173b8:	4619      	mov	r1, r3
 80173ba:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 80173be:	f001 ff2d 	bl	801921c <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80173c2:	4b14      	ldr	r3, [pc, #80]	@ (8017414 <RadioSetRxConfig+0x264>)
 80173c4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80173c8:	2b01      	cmp	r3, #1
 80173ca:	d10d      	bne.n	80173e8 <RadioSetRxConfig+0x238>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80173cc:	f240 7036 	movw	r0, #1846	@ 0x736
 80173d0:	f001 ff38 	bl	8019244 <SUBGRF_ReadRegister>
 80173d4:	4603      	mov	r3, r0
 80173d6:	f023 0304 	bic.w	r3, r3, #4
 80173da:	b2db      	uxtb	r3, r3
 80173dc:	4619      	mov	r1, r3
 80173de:	f240 7036 	movw	r0, #1846	@ 0x736
 80173e2:	f001 ff1b 	bl	801921c <SUBGRF_WriteRegister>
 80173e6:	e00c      	b.n	8017402 <RadioSetRxConfig+0x252>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 80173e8:	f240 7036 	movw	r0, #1846	@ 0x736
 80173ec:	f001 ff2a 	bl	8019244 <SUBGRF_ReadRegister>
 80173f0:	4603      	mov	r3, r0
 80173f2:	f043 0304 	orr.w	r3, r3, #4
 80173f6:	b2db      	uxtb	r3, r3
 80173f8:	4619      	mov	r1, r3
 80173fa:	f240 7036 	movw	r0, #1846	@ 0x736
 80173fe:	f001 ff0d 	bl	801921c <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8017402:	4b04      	ldr	r3, [pc, #16]	@ (8017414 <RadioSetRxConfig+0x264>)
 8017404:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017408:	609a      	str	r2, [r3, #8]
            break;
 801740a:	bf00      	nop
    }
}
 801740c:	bf00      	nop
 801740e:	3718      	adds	r7, #24
 8017410:	46bd      	mov	sp, r7
 8017412:	bd80      	pop	{r7, pc}
 8017414:	2000133c 	.word	0x2000133c
 8017418:	200000d8 	.word	0x200000d8
 801741c:	20001374 	.word	0x20001374
 8017420:	2000134a 	.word	0x2000134a
 8017424:	08020d0c 	.word	0x08020d0c
 8017428:	080214f8 	.word	0x080214f8

0801742c <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 801742c:	b580      	push	{r7, lr}
 801742e:	b086      	sub	sp, #24
 8017430:	af00      	add	r7, sp, #0
 8017432:	60ba      	str	r2, [r7, #8]
 8017434:	607b      	str	r3, [r7, #4]
 8017436:	4603      	mov	r3, r0
 8017438:	73fb      	strb	r3, [r7, #15]
 801743a:	460b      	mov	r3, r1
 801743c:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 801743e:	f002 f9c7 	bl	80197d0 <RFW_DeInit>
    switch( modem )
 8017442:	7bfb      	ldrb	r3, [r7, #15]
 8017444:	2b00      	cmp	r3, #0
 8017446:	d002      	beq.n	801744e <RadioSetTxConfig+0x22>
 8017448:	2b01      	cmp	r3, #1
 801744a:	d059      	beq.n	8017500 <RadioSetTxConfig+0xd4>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801744c:	e0be      	b.n	80175cc <RadioSetTxConfig+0x1a0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801744e:	4b6d      	ldr	r3, [pc, #436]	@ (8017604 <RadioSetTxConfig+0x1d8>)
 8017450:	2200      	movs	r2, #0
 8017452:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8017456:	4a6b      	ldr	r2, [pc, #428]	@ (8017604 <RadioSetTxConfig+0x1d8>)
 8017458:	6a3b      	ldr	r3, [r7, #32]
 801745a:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801745c:	4b69      	ldr	r3, [pc, #420]	@ (8017604 <RadioSetTxConfig+0x1d8>)
 801745e:	220b      	movs	r2, #11
 8017460:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8017464:	6878      	ldr	r0, [r7, #4]
 8017466:	f002 f8f3 	bl	8019650 <SUBGRF_GetFskBandwidthRegValue>
 801746a:	4603      	mov	r3, r0
 801746c:	461a      	mov	r2, r3
 801746e:	4b65      	ldr	r3, [pc, #404]	@ (8017604 <RadioSetTxConfig+0x1d8>)
 8017470:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8017474:	4a63      	ldr	r2, [pc, #396]	@ (8017604 <RadioSetTxConfig+0x1d8>)
 8017476:	68bb      	ldr	r3, [r7, #8]
 8017478:	6413      	str	r3, [r2, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801747a:	4b62      	ldr	r3, [pc, #392]	@ (8017604 <RadioSetTxConfig+0x1d8>)
 801747c:	2200      	movs	r2, #0
 801747e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8017480:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8017482:	00db      	lsls	r3, r3, #3
 8017484:	b29a      	uxth	r2, r3
 8017486:	4b5f      	ldr	r3, [pc, #380]	@ (8017604 <RadioSetTxConfig+0x1d8>)
 8017488:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801748a:	4b5e      	ldr	r3, [pc, #376]	@ (8017604 <RadioSetTxConfig+0x1d8>)
 801748c:	2204      	movs	r2, #4
 801748e:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8017490:	4b5c      	ldr	r3, [pc, #368]	@ (8017604 <RadioSetTxConfig+0x1d8>)
 8017492:	2218      	movs	r2, #24
 8017494:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8017496:	4b5b      	ldr	r3, [pc, #364]	@ (8017604 <RadioSetTxConfig+0x1d8>)
 8017498:	2200      	movs	r2, #0
 801749a:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801749c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80174a0:	f083 0301 	eor.w	r3, r3, #1
 80174a4:	b2db      	uxtb	r3, r3
 80174a6:	461a      	mov	r2, r3
 80174a8:	4b56      	ldr	r3, [pc, #344]	@ (8017604 <RadioSetTxConfig+0x1d8>)
 80174aa:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 80174ac:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80174b0:	2b00      	cmp	r3, #0
 80174b2:	d003      	beq.n	80174bc <RadioSetTxConfig+0x90>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80174b4:	4b53      	ldr	r3, [pc, #332]	@ (8017604 <RadioSetTxConfig+0x1d8>)
 80174b6:	22f2      	movs	r2, #242	@ 0xf2
 80174b8:	75da      	strb	r2, [r3, #23]
 80174ba:	e002      	b.n	80174c2 <RadioSetTxConfig+0x96>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80174bc:	4b51      	ldr	r3, [pc, #324]	@ (8017604 <RadioSetTxConfig+0x1d8>)
 80174be:	2201      	movs	r2, #1
 80174c0:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80174c2:	4b50      	ldr	r3, [pc, #320]	@ (8017604 <RadioSetTxConfig+0x1d8>)
 80174c4:	2201      	movs	r2, #1
 80174c6:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80174c8:	f000 fad5 	bl	8017a76 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 80174cc:	2000      	movs	r0, #0
 80174ce:	f7ff fdb3 	bl	8017038 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80174d2:	484d      	ldr	r0, [pc, #308]	@ (8017608 <RadioSetTxConfig+0x1dc>)
 80174d4:	f001 fc8e 	bl	8018df4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80174d8:	484c      	ldr	r0, [pc, #304]	@ (801760c <RadioSetTxConfig+0x1e0>)
 80174da:	f001 fd59 	bl	8018f90 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80174de:	4a4c      	ldr	r2, [pc, #304]	@ (8017610 <RadioSetTxConfig+0x1e4>)
 80174e0:	f107 0310 	add.w	r3, r7, #16
 80174e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80174e8:	e883 0003 	stmia.w	r3, {r0, r1}
 80174ec:	f107 0310 	add.w	r3, r7, #16
 80174f0:	4618      	mov	r0, r3
 80174f2:	f001 f812 	bl	801851a <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80174f6:	f240 10ff 	movw	r0, #511	@ 0x1ff
 80174fa:	f001 f85d 	bl	80185b8 <SUBGRF_SetWhiteningSeed>
            break;
 80174fe:	e065      	b.n	80175cc <RadioSetTxConfig+0x1a0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8017500:	4b40      	ldr	r3, [pc, #256]	@ (8017604 <RadioSetTxConfig+0x1d8>)
 8017502:	2201      	movs	r2, #1
 8017504:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8017508:	6a3b      	ldr	r3, [r7, #32]
 801750a:	b2da      	uxtb	r2, r3
 801750c:	4b3d      	ldr	r3, [pc, #244]	@ (8017604 <RadioSetTxConfig+0x1d8>)
 801750e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8017512:	4a40      	ldr	r2, [pc, #256]	@ (8017614 <RadioSetTxConfig+0x1e8>)
 8017514:	687b      	ldr	r3, [r7, #4]
 8017516:	4413      	add	r3, r2
 8017518:	781a      	ldrb	r2, [r3, #0]
 801751a:	4b3a      	ldr	r3, [pc, #232]	@ (8017604 <RadioSetTxConfig+0x1d8>)
 801751c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8017520:	4a38      	ldr	r2, [pc, #224]	@ (8017604 <RadioSetTxConfig+0x1d8>)
 8017522:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8017526:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801752a:	687b      	ldr	r3, [r7, #4]
 801752c:	2b00      	cmp	r3, #0
 801752e:	d105      	bne.n	801753c <RadioSetTxConfig+0x110>
 8017530:	6a3b      	ldr	r3, [r7, #32]
 8017532:	2b0b      	cmp	r3, #11
 8017534:	d008      	beq.n	8017548 <RadioSetTxConfig+0x11c>
 8017536:	6a3b      	ldr	r3, [r7, #32]
 8017538:	2b0c      	cmp	r3, #12
 801753a:	d005      	beq.n	8017548 <RadioSetTxConfig+0x11c>
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	2b01      	cmp	r3, #1
 8017540:	d107      	bne.n	8017552 <RadioSetTxConfig+0x126>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8017542:	6a3b      	ldr	r3, [r7, #32]
 8017544:	2b0c      	cmp	r3, #12
 8017546:	d104      	bne.n	8017552 <RadioSetTxConfig+0x126>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8017548:	4b2e      	ldr	r3, [pc, #184]	@ (8017604 <RadioSetTxConfig+0x1d8>)
 801754a:	2201      	movs	r2, #1
 801754c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8017550:	e003      	b.n	801755a <RadioSetTxConfig+0x12e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8017552:	4b2c      	ldr	r3, [pc, #176]	@ (8017604 <RadioSetTxConfig+0x1d8>)
 8017554:	2200      	movs	r2, #0
 8017556:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801755a:	4b2a      	ldr	r3, [pc, #168]	@ (8017604 <RadioSetTxConfig+0x1d8>)
 801755c:	2201      	movs	r2, #1
 801755e:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017560:	4b28      	ldr	r3, [pc, #160]	@ (8017604 <RadioSetTxConfig+0x1d8>)
 8017562:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8017566:	2b05      	cmp	r3, #5
 8017568:	d004      	beq.n	8017574 <RadioSetTxConfig+0x148>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801756a:	4b26      	ldr	r3, [pc, #152]	@ (8017604 <RadioSetTxConfig+0x1d8>)
 801756c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017570:	2b06      	cmp	r3, #6
 8017572:	d10a      	bne.n	801758a <RadioSetTxConfig+0x15e>
                if( preambleLen < 12 )
 8017574:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8017576:	2b0b      	cmp	r3, #11
 8017578:	d803      	bhi.n	8017582 <RadioSetTxConfig+0x156>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801757a:	4b22      	ldr	r3, [pc, #136]	@ (8017604 <RadioSetTxConfig+0x1d8>)
 801757c:	220c      	movs	r2, #12
 801757e:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8017580:	e006      	b.n	8017590 <RadioSetTxConfig+0x164>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8017582:	4a20      	ldr	r2, [pc, #128]	@ (8017604 <RadioSetTxConfig+0x1d8>)
 8017584:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8017586:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8017588:	e002      	b.n	8017590 <RadioSetTxConfig+0x164>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801758a:	4a1e      	ldr	r2, [pc, #120]	@ (8017604 <RadioSetTxConfig+0x1d8>)
 801758c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801758e:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8017590:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8017594:	4b1b      	ldr	r3, [pc, #108]	@ (8017604 <RadioSetTxConfig+0x1d8>)
 8017596:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8017598:	4b1f      	ldr	r3, [pc, #124]	@ (8017618 <RadioSetTxConfig+0x1ec>)
 801759a:	781a      	ldrb	r2, [r3, #0]
 801759c:	4b19      	ldr	r3, [pc, #100]	@ (8017604 <RadioSetTxConfig+0x1d8>)
 801759e:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80175a0:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80175a4:	4b17      	ldr	r3, [pc, #92]	@ (8017604 <RadioSetTxConfig+0x1d8>)
 80175a6:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80175aa:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 80175ae:	4b15      	ldr	r3, [pc, #84]	@ (8017604 <RadioSetTxConfig+0x1d8>)
 80175b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 80175b4:	f000 fa5f 	bl	8017a76 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80175b8:	2001      	movs	r0, #1
 80175ba:	f7ff fd3d 	bl	8017038 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80175be:	4812      	ldr	r0, [pc, #72]	@ (8017608 <RadioSetTxConfig+0x1dc>)
 80175c0:	f001 fc18 	bl	8018df4 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80175c4:	4811      	ldr	r0, [pc, #68]	@ (801760c <RadioSetTxConfig+0x1e0>)
 80175c6:	f001 fce3 	bl	8018f90 <SUBGRF_SetPacketParams>
            break;
 80175ca:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80175cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80175d0:	4618      	mov	r0, r3
 80175d2:	f001 ff3f 	bl	8019454 <SUBGRF_SetRfTxPower>
 80175d6:	4603      	mov	r3, r0
 80175d8:	461a      	mov	r2, r3
 80175da:	4b0a      	ldr	r3, [pc, #40]	@ (8017604 <RadioSetTxConfig+0x1d8>)
 80175dc:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80175e0:	210e      	movs	r1, #14
 80175e2:	f640 101f 	movw	r0, #2335	@ 0x91f
 80175e6:	f001 fe19 	bl	801921c <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 80175ea:	4b06      	ldr	r3, [pc, #24]	@ (8017604 <RadioSetTxConfig+0x1d8>)
 80175ec:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80175f0:	4618      	mov	r0, r3
 80175f2:	f002 f901 	bl	80197f8 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 80175f6:	4a03      	ldr	r2, [pc, #12]	@ (8017604 <RadioSetTxConfig+0x1d8>)
 80175f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80175fa:	6053      	str	r3, [r2, #4]
}
 80175fc:	bf00      	nop
 80175fe:	3718      	adds	r7, #24
 8017600:	46bd      	mov	sp, r7
 8017602:	bd80      	pop	{r7, pc}
 8017604:	2000133c 	.word	0x2000133c
 8017608:	20001374 	.word	0x20001374
 801760c:	2000134a 	.word	0x2000134a
 8017610:	08020d0c 	.word	0x08020d0c
 8017614:	080214f8 	.word	0x080214f8
 8017618:	200000d8 	.word	0x200000d8

0801761c <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 801761c:	b480      	push	{r7}
 801761e:	b083      	sub	sp, #12
 8017620:	af00      	add	r7, sp, #0
 8017622:	6078      	str	r0, [r7, #4]
    return true;
 8017624:	2301      	movs	r3, #1
}
 8017626:	4618      	mov	r0, r3
 8017628:	370c      	adds	r7, #12
 801762a:	46bd      	mov	sp, r7
 801762c:	bc80      	pop	{r7}
 801762e:	4770      	bx	lr

08017630 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8017630:	b480      	push	{r7}
 8017632:	b085      	sub	sp, #20
 8017634:	af00      	add	r7, sp, #0
 8017636:	4603      	mov	r3, r0
 8017638:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 801763a:	2300      	movs	r3, #0
 801763c:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801763e:	79fb      	ldrb	r3, [r7, #7]
 8017640:	2b0a      	cmp	r3, #10
 8017642:	d83e      	bhi.n	80176c2 <RadioGetLoRaBandwidthInHz+0x92>
 8017644:	a201      	add	r2, pc, #4	@ (adr r2, 801764c <RadioGetLoRaBandwidthInHz+0x1c>)
 8017646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801764a:	bf00      	nop
 801764c:	08017679 	.word	0x08017679
 8017650:	08017689 	.word	0x08017689
 8017654:	08017699 	.word	0x08017699
 8017658:	080176a9 	.word	0x080176a9
 801765c:	080176b1 	.word	0x080176b1
 8017660:	080176b7 	.word	0x080176b7
 8017664:	080176bd 	.word	0x080176bd
 8017668:	080176c3 	.word	0x080176c3
 801766c:	08017681 	.word	0x08017681
 8017670:	08017691 	.word	0x08017691
 8017674:	080176a1 	.word	0x080176a1
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8017678:	f641 6384 	movw	r3, #7812	@ 0x1e84
 801767c:	60fb      	str	r3, [r7, #12]
        break;
 801767e:	e020      	b.n	80176c2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8017680:	f642 03b1 	movw	r3, #10417	@ 0x28b1
 8017684:	60fb      	str	r3, [r7, #12]
        break;
 8017686:	e01c      	b.n	80176c2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8017688:	f643 5309 	movw	r3, #15625	@ 0x3d09
 801768c:	60fb      	str	r3, [r7, #12]
        break;
 801768e:	e018      	b.n	80176c2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8017690:	f245 1361 	movw	r3, #20833	@ 0x5161
 8017694:	60fb      	str	r3, [r7, #12]
        break;
 8017696:	e014      	b.n	80176c2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8017698:	f647 2312 	movw	r3, #31250	@ 0x7a12
 801769c:	60fb      	str	r3, [r7, #12]
        break;
 801769e:	e010      	b.n	80176c2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 80176a0:	f24a 23c3 	movw	r3, #41667	@ 0xa2c3
 80176a4:	60fb      	str	r3, [r7, #12]
        break;
 80176a6:	e00c      	b.n	80176c2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 80176a8:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80176ac:	60fb      	str	r3, [r7, #12]
        break;
 80176ae:	e008      	b.n	80176c2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 80176b0:	4b07      	ldr	r3, [pc, #28]	@ (80176d0 <RadioGetLoRaBandwidthInHz+0xa0>)
 80176b2:	60fb      	str	r3, [r7, #12]
        break;
 80176b4:	e005      	b.n	80176c2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 80176b6:	4b07      	ldr	r3, [pc, #28]	@ (80176d4 <RadioGetLoRaBandwidthInHz+0xa4>)
 80176b8:	60fb      	str	r3, [r7, #12]
        break;
 80176ba:	e002      	b.n	80176c2 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 80176bc:	4b06      	ldr	r3, [pc, #24]	@ (80176d8 <RadioGetLoRaBandwidthInHz+0xa8>)
 80176be:	60fb      	str	r3, [r7, #12]
        break;
 80176c0:	bf00      	nop
    }

    return bandwidthInHz;
 80176c2:	68fb      	ldr	r3, [r7, #12]
}
 80176c4:	4618      	mov	r0, r3
 80176c6:	3714      	adds	r7, #20
 80176c8:	46bd      	mov	sp, r7
 80176ca:	bc80      	pop	{r7}
 80176cc:	4770      	bx	lr
 80176ce:	bf00      	nop
 80176d0:	0001e848 	.word	0x0001e848
 80176d4:	0003d090 	.word	0x0003d090
 80176d8:	0007a120 	.word	0x0007a120

080176dc <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80176dc:	b480      	push	{r7}
 80176de:	b083      	sub	sp, #12
 80176e0:	af00      	add	r7, sp, #0
 80176e2:	6078      	str	r0, [r7, #4]
 80176e4:	4608      	mov	r0, r1
 80176e6:	4611      	mov	r1, r2
 80176e8:	461a      	mov	r2, r3
 80176ea:	4603      	mov	r3, r0
 80176ec:	70fb      	strb	r3, [r7, #3]
 80176ee:	460b      	mov	r3, r1
 80176f0:	803b      	strh	r3, [r7, #0]
 80176f2:	4613      	mov	r3, r2
 80176f4:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 80176f6:	883b      	ldrh	r3, [r7, #0]
 80176f8:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80176fa:	78ba      	ldrb	r2, [r7, #2]
 80176fc:	f082 0201 	eor.w	r2, r2, #1
 8017700:	b2d2      	uxtb	r2, r2
 8017702:	2a00      	cmp	r2, #0
 8017704:	d001      	beq.n	801770a <RadioGetGfskTimeOnAirNumerator+0x2e>
 8017706:	2208      	movs	r2, #8
 8017708:	e000      	b.n	801770c <RadioGetGfskTimeOnAirNumerator+0x30>
 801770a:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 801770c:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801770e:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8017712:	7c3b      	ldrb	r3, [r7, #16]
 8017714:	7d39      	ldrb	r1, [r7, #20]
 8017716:	2900      	cmp	r1, #0
 8017718:	d001      	beq.n	801771e <RadioGetGfskTimeOnAirNumerator+0x42>
 801771a:	2102      	movs	r1, #2
 801771c:	e000      	b.n	8017720 <RadioGetGfskTimeOnAirNumerator+0x44>
 801771e:	2100      	movs	r1, #0
 8017720:	440b      	add	r3, r1
 8017722:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8017724:	4413      	add	r3, r2
}
 8017726:	4618      	mov	r0, r3
 8017728:	370c      	adds	r7, #12
 801772a:	46bd      	mov	sp, r7
 801772c:	bc80      	pop	{r7}
 801772e:	4770      	bx	lr

08017730 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8017730:	b480      	push	{r7}
 8017732:	b08b      	sub	sp, #44	@ 0x2c
 8017734:	af00      	add	r7, sp, #0
 8017736:	60f8      	str	r0, [r7, #12]
 8017738:	60b9      	str	r1, [r7, #8]
 801773a:	4611      	mov	r1, r2
 801773c:	461a      	mov	r2, r3
 801773e:	460b      	mov	r3, r1
 8017740:	71fb      	strb	r3, [r7, #7]
 8017742:	4613      	mov	r3, r2
 8017744:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8017746:	79fb      	ldrb	r3, [r7, #7]
 8017748:	3304      	adds	r3, #4
 801774a:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 801774c:	2300      	movs	r3, #0
 801774e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8017752:	68bb      	ldr	r3, [r7, #8]
 8017754:	2b05      	cmp	r3, #5
 8017756:	d002      	beq.n	801775e <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8017758:	68bb      	ldr	r3, [r7, #8]
 801775a:	2b06      	cmp	r3, #6
 801775c:	d104      	bne.n	8017768 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 801775e:	88bb      	ldrh	r3, [r7, #4]
 8017760:	2b0b      	cmp	r3, #11
 8017762:	d801      	bhi.n	8017768 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8017764:	230c      	movs	r3, #12
 8017766:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8017768:	68fb      	ldr	r3, [r7, #12]
 801776a:	2b00      	cmp	r3, #0
 801776c:	d105      	bne.n	801777a <RadioGetLoRaTimeOnAirNumerator+0x4a>
 801776e:	68bb      	ldr	r3, [r7, #8]
 8017770:	2b0b      	cmp	r3, #11
 8017772:	d008      	beq.n	8017786 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8017774:	68bb      	ldr	r3, [r7, #8]
 8017776:	2b0c      	cmp	r3, #12
 8017778:	d005      	beq.n	8017786 <RadioGetLoRaTimeOnAirNumerator+0x56>
 801777a:	68fb      	ldr	r3, [r7, #12]
 801777c:	2b01      	cmp	r3, #1
 801777e:	d105      	bne.n	801778c <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8017780:	68bb      	ldr	r3, [r7, #8]
 8017782:	2b0c      	cmp	r3, #12
 8017784:	d102      	bne.n	801778c <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8017786:	2301      	movs	r3, #1
 8017788:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801778c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8017790:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8017792:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8017796:	2a00      	cmp	r2, #0
 8017798:	d001      	beq.n	801779e <RadioGetLoRaTimeOnAirNumerator+0x6e>
 801779a:	2210      	movs	r2, #16
 801779c:	e000      	b.n	80177a0 <RadioGetLoRaTimeOnAirNumerator+0x70>
 801779e:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80177a0:	4413      	add	r3, r2
 80177a2:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 80177a4:	68bb      	ldr	r3, [r7, #8]
 80177a6:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 80177a8:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 80177aa:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80177ae:	2a00      	cmp	r2, #0
 80177b0:	d001      	beq.n	80177b6 <RadioGetLoRaTimeOnAirNumerator+0x86>
 80177b2:	2200      	movs	r2, #0
 80177b4:	e000      	b.n	80177b8 <RadioGetLoRaTimeOnAirNumerator+0x88>
 80177b6:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 80177b8:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80177ba:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 80177bc:	68bb      	ldr	r3, [r7, #8]
 80177be:	2b06      	cmp	r3, #6
 80177c0:	d803      	bhi.n	80177ca <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 80177c2:	68bb      	ldr	r3, [r7, #8]
 80177c4:	009b      	lsls	r3, r3, #2
 80177c6:	623b      	str	r3, [r7, #32]
 80177c8:	e00e      	b.n	80177e8 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 80177ca:	69fb      	ldr	r3, [r7, #28]
 80177cc:	3308      	adds	r3, #8
 80177ce:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 80177d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80177d4:	2b00      	cmp	r3, #0
 80177d6:	d004      	beq.n	80177e2 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 80177d8:	68bb      	ldr	r3, [r7, #8]
 80177da:	3b02      	subs	r3, #2
 80177dc:	009b      	lsls	r3, r3, #2
 80177de:	623b      	str	r3, [r7, #32]
 80177e0:	e002      	b.n	80177e8 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 80177e2:	68bb      	ldr	r3, [r7, #8]
 80177e4:	009b      	lsls	r3, r3, #2
 80177e6:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 80177e8:	69fb      	ldr	r3, [r7, #28]
 80177ea:	2b00      	cmp	r3, #0
 80177ec:	da01      	bge.n	80177f2 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 80177ee:	2300      	movs	r3, #0
 80177f0:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 80177f2:	69fa      	ldr	r2, [r7, #28]
 80177f4:	6a3b      	ldr	r3, [r7, #32]
 80177f6:	4413      	add	r3, r2
 80177f8:	1e5a      	subs	r2, r3, #1
 80177fa:	6a3b      	ldr	r3, [r7, #32]
 80177fc:	fb92 f3f3 	sdiv	r3, r2, r3
 8017800:	697a      	ldr	r2, [r7, #20]
 8017802:	fb03 f202 	mul.w	r2, r3, r2
 8017806:	88bb      	ldrh	r3, [r7, #4]
 8017808:	4413      	add	r3, r2
    int32_t intermediate =
 801780a:	330c      	adds	r3, #12
 801780c:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 801780e:	68bb      	ldr	r3, [r7, #8]
 8017810:	2b06      	cmp	r3, #6
 8017812:	d802      	bhi.n	801781a <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8017814:	69bb      	ldr	r3, [r7, #24]
 8017816:	3302      	adds	r3, #2
 8017818:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 801781a:	69bb      	ldr	r3, [r7, #24]
 801781c:	009b      	lsls	r3, r3, #2
 801781e:	1c5a      	adds	r2, r3, #1
 8017820:	68bb      	ldr	r3, [r7, #8]
 8017822:	3b02      	subs	r3, #2
 8017824:	fa02 f303 	lsl.w	r3, r2, r3
}
 8017828:	4618      	mov	r0, r3
 801782a:	372c      	adds	r7, #44	@ 0x2c
 801782c:	46bd      	mov	sp, r7
 801782e:	bc80      	pop	{r7}
 8017830:	4770      	bx	lr
	...

08017834 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8017834:	b580      	push	{r7, lr}
 8017836:	b08a      	sub	sp, #40	@ 0x28
 8017838:	af04      	add	r7, sp, #16
 801783a:	60b9      	str	r1, [r7, #8]
 801783c:	607a      	str	r2, [r7, #4]
 801783e:	461a      	mov	r2, r3
 8017840:	4603      	mov	r3, r0
 8017842:	73fb      	strb	r3, [r7, #15]
 8017844:	4613      	mov	r3, r2
 8017846:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8017848:	2300      	movs	r3, #0
 801784a:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 801784c:	2301      	movs	r3, #1
 801784e:	613b      	str	r3, [r7, #16]

    switch( modem )
 8017850:	7bfb      	ldrb	r3, [r7, #15]
 8017852:	2b00      	cmp	r3, #0
 8017854:	d002      	beq.n	801785c <RadioTimeOnAir+0x28>
 8017856:	2b01      	cmp	r3, #1
 8017858:	d017      	beq.n	801788a <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 801785a:	e035      	b.n	80178c8 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 801785c:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 8017860:	8c3a      	ldrh	r2, [r7, #32]
 8017862:	7bb9      	ldrb	r1, [r7, #14]
 8017864:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8017868:	9301      	str	r3, [sp, #4]
 801786a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801786e:	9300      	str	r3, [sp, #0]
 8017870:	4603      	mov	r3, r0
 8017872:	6878      	ldr	r0, [r7, #4]
 8017874:	f7ff ff32 	bl	80176dc <RadioGetGfskTimeOnAirNumerator>
 8017878:	4603      	mov	r3, r0
 801787a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801787e:	fb02 f303 	mul.w	r3, r2, r3
 8017882:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	613b      	str	r3, [r7, #16]
        break;
 8017888:	e01e      	b.n	80178c8 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 801788a:	8c39      	ldrh	r1, [r7, #32]
 801788c:	7bba      	ldrb	r2, [r7, #14]
 801788e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8017892:	9302      	str	r3, [sp, #8]
 8017894:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8017898:	9301      	str	r3, [sp, #4]
 801789a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801789e:	9300      	str	r3, [sp, #0]
 80178a0:	460b      	mov	r3, r1
 80178a2:	6879      	ldr	r1, [r7, #4]
 80178a4:	68b8      	ldr	r0, [r7, #8]
 80178a6:	f7ff ff43 	bl	8017730 <RadioGetLoRaTimeOnAirNumerator>
 80178aa:	4603      	mov	r3, r0
 80178ac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80178b0:	fb02 f303 	mul.w	r3, r2, r3
 80178b4:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 80178b6:	4a0a      	ldr	r2, [pc, #40]	@ (80178e0 <RadioTimeOnAir+0xac>)
 80178b8:	68bb      	ldr	r3, [r7, #8]
 80178ba:	4413      	add	r3, r2
 80178bc:	781b      	ldrb	r3, [r3, #0]
 80178be:	4618      	mov	r0, r3
 80178c0:	f7ff feb6 	bl	8017630 <RadioGetLoRaBandwidthInHz>
 80178c4:	6138      	str	r0, [r7, #16]
        break;
 80178c6:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 80178c8:	697a      	ldr	r2, [r7, #20]
 80178ca:	693b      	ldr	r3, [r7, #16]
 80178cc:	4413      	add	r3, r2
 80178ce:	1e5a      	subs	r2, r3, #1
 80178d0:	693b      	ldr	r3, [r7, #16]
 80178d2:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80178d6:	4618      	mov	r0, r3
 80178d8:	3718      	adds	r7, #24
 80178da:	46bd      	mov	sp, r7
 80178dc:	bd80      	pop	{r7, pc}
 80178de:	bf00      	nop
 80178e0:	080214f8 	.word	0x080214f8

080178e4 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 80178e4:	b580      	push	{r7, lr}
 80178e6:	b084      	sub	sp, #16
 80178e8:	af00      	add	r7, sp, #0
 80178ea:	6078      	str	r0, [r7, #4]
 80178ec:	460b      	mov	r3, r1
 80178ee:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 80178f0:	2300      	movs	r3, #0
 80178f2:	2200      	movs	r2, #0
 80178f4:	f240 2101 	movw	r1, #513	@ 0x201
 80178f8:	f240 2001 	movw	r0, #513	@ 0x201
 80178fc:	f001 f8e4 	bl	8018ac8 <SUBGRF_SetDioIrqParams>
                            IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );
 8017900:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8017904:	484d      	ldr	r0, [pc, #308]	@ (8017a3c <RadioSend+0x158>)
 8017906:	f7ff fb09 	bl	8016f1c <LL_GPIO_SetOutputPin>

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801790a:	4b4d      	ldr	r3, [pc, #308]	@ (8017a40 <RadioSend+0x15c>)
 801790c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8017910:	2101      	movs	r1, #1
 8017912:	4618      	mov	r0, r3
 8017914:	f001 fd76 	bl	8019404 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8017918:	4b49      	ldr	r3, [pc, #292]	@ (8017a40 <RadioSend+0x15c>)
 801791a:	781b      	ldrb	r3, [r3, #0]
 801791c:	2b01      	cmp	r3, #1
 801791e:	d112      	bne.n	8017946 <RadioSend+0x62>
 8017920:	4b47      	ldr	r3, [pc, #284]	@ (8017a40 <RadioSend+0x15c>)
 8017922:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8017926:	2b06      	cmp	r3, #6
 8017928:	d10d      	bne.n	8017946 <RadioSend+0x62>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801792a:	f640 0089 	movw	r0, #2185	@ 0x889
 801792e:	f001 fc89 	bl	8019244 <SUBGRF_ReadRegister>
 8017932:	4603      	mov	r3, r0
 8017934:	f023 0304 	bic.w	r3, r3, #4
 8017938:	b2db      	uxtb	r3, r3
 801793a:	4619      	mov	r1, r3
 801793c:	f640 0089 	movw	r0, #2185	@ 0x889
 8017940:	f001 fc6c 	bl	801921c <SUBGRF_WriteRegister>
 8017944:	e00c      	b.n	8017960 <RadioSend+0x7c>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8017946:	f640 0089 	movw	r0, #2185	@ 0x889
 801794a:	f001 fc7b 	bl	8019244 <SUBGRF_ReadRegister>
 801794e:	4603      	mov	r3, r0
 8017950:	f043 0304 	orr.w	r3, r3, #4
 8017954:	b2db      	uxtb	r3, r3
 8017956:	4619      	mov	r1, r3
 8017958:	f640 0089 	movw	r0, #2185	@ 0x889
 801795c:	f001 fc5e 	bl	801921c <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 8017960:	4b37      	ldr	r3, [pc, #220]	@ (8017a40 <RadioSend+0x15c>)
 8017962:	781b      	ldrb	r3, [r3, #0]
 8017964:	2b03      	cmp	r3, #3
 8017966:	d859      	bhi.n	8017a1c <RadioSend+0x138>
 8017968:	a201      	add	r2, pc, #4	@ (adr r2, 8017970 <RadioSend+0x8c>)
 801796a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801796e:	bf00      	nop
 8017970:	0801799b 	.word	0x0801799b
 8017974:	08017981 	.word	0x08017981
 8017978:	0801799b 	.word	0x0801799b
 801797c:	080179fd 	.word	0x080179fd
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8017980:	4a2f      	ldr	r2, [pc, #188]	@ (8017a40 <RadioSend+0x15c>)
 8017982:	78fb      	ldrb	r3, [r7, #3]
 8017984:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017986:	482f      	ldr	r0, [pc, #188]	@ (8017a44 <RadioSend+0x160>)
 8017988:	f001 fb02 	bl	8018f90 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801798c:	78fb      	ldrb	r3, [r7, #3]
 801798e:	2200      	movs	r2, #0
 8017990:	4619      	mov	r1, r3
 8017992:	6878      	ldr	r0, [r7, #4]
 8017994:	f000 fdae 	bl	80184f4 <SUBGRF_SendPayload>
            break;
 8017998:	e041      	b.n	8017a1e <RadioSend+0x13a>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 801799a:	f001 ff1f 	bl	80197dc <RFW_Is_Init>
 801799e:	4603      	mov	r3, r0
 80179a0:	2b01      	cmp	r3, #1
 80179a2:	d11e      	bne.n	80179e2 <RadioSend+0xfe>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 80179a4:	f107 020f 	add.w	r2, r7, #15
 80179a8:	78fb      	ldrb	r3, [r7, #3]
 80179aa:	4619      	mov	r1, r3
 80179ac:	6878      	ldr	r0, [r7, #4]
 80179ae:	f001 ff2d 	bl	801980c <RFW_TransmitInit>
 80179b2:	4603      	mov	r3, r0
 80179b4:	2b00      	cmp	r3, #0
 80179b6:	d10c      	bne.n	80179d2 <RadioSend+0xee>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 80179b8:	7bfa      	ldrb	r2, [r7, #15]
 80179ba:	4b21      	ldr	r3, [pc, #132]	@ (8017a40 <RadioSend+0x15c>)
 80179bc:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80179be:	4821      	ldr	r0, [pc, #132]	@ (8017a44 <RadioSend+0x160>)
 80179c0:	f001 fae6 	bl	8018f90 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 80179c4:	7bfb      	ldrb	r3, [r7, #15]
 80179c6:	2200      	movs	r2, #0
 80179c8:	4619      	mov	r1, r3
 80179ca:	6878      	ldr	r0, [r7, #4]
 80179cc:	f000 fd92 	bl	80184f4 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 80179d0:	e025      	b.n	8017a1e <RadioSend+0x13a>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 80179d2:	4b1d      	ldr	r3, [pc, #116]	@ (8017a48 <RadioSend+0x164>)
 80179d4:	2201      	movs	r2, #1
 80179d6:	2100      	movs	r1, #0
 80179d8:	2002      	movs	r0, #2
 80179da:	f001 ff73 	bl	80198c4 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 80179de:	2303      	movs	r3, #3
 80179e0:	e027      	b.n	8017a32 <RadioSend+0x14e>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 80179e2:	4a17      	ldr	r2, [pc, #92]	@ (8017a40 <RadioSend+0x15c>)
 80179e4:	78fb      	ldrb	r3, [r7, #3]
 80179e6:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80179e8:	4816      	ldr	r0, [pc, #88]	@ (8017a44 <RadioSend+0x160>)
 80179ea:	f001 fad1 	bl	8018f90 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 80179ee:	78fb      	ldrb	r3, [r7, #3]
 80179f0:	2200      	movs	r2, #0
 80179f2:	4619      	mov	r1, r3
 80179f4:	6878      	ldr	r0, [r7, #4]
 80179f6:	f000 fd7d 	bl	80184f4 <SUBGRF_SendPayload>
            break;
 80179fa:	e010      	b.n	8017a1e <RadioSend+0x13a>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80179fc:	4b10      	ldr	r3, [pc, #64]	@ (8017a40 <RadioSend+0x15c>)
 80179fe:	2202      	movs	r2, #2
 8017a00:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8017a02:	4a0f      	ldr	r2, [pc, #60]	@ (8017a40 <RadioSend+0x15c>)
 8017a04:	78fb      	ldrb	r3, [r7, #3]
 8017a06:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017a08:	480e      	ldr	r0, [pc, #56]	@ (8017a44 <RadioSend+0x160>)
 8017a0a:	f001 fac1 	bl	8018f90 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8017a0e:	78fb      	ldrb	r3, [r7, #3]
 8017a10:	2200      	movs	r2, #0
 8017a12:	4619      	mov	r1, r3
 8017a14:	6878      	ldr	r0, [r7, #4]
 8017a16:	f000 fd6d 	bl	80184f4 <SUBGRF_SendPayload>
            break;
 8017a1a:	e000      	b.n	8017a1e <RadioSend+0x13a>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
            break;
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8017a1c:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8017a1e:	4b08      	ldr	r3, [pc, #32]	@ (8017a40 <RadioSend+0x15c>)
 8017a20:	685b      	ldr	r3, [r3, #4]
 8017a22:	4619      	mov	r1, r3
 8017a24:	4809      	ldr	r0, [pc, #36]	@ (8017a4c <RadioSend+0x168>)
 8017a26:	f002 fe97 	bl	801a758 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 8017a2a:	4808      	ldr	r0, [pc, #32]	@ (8017a4c <RadioSend+0x168>)
 8017a2c:	f002 fdb6 	bl	801a59c <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 8017a30:	2300      	movs	r3, #0
}
 8017a32:	4618      	mov	r0, r3
 8017a34:	3710      	adds	r7, #16
 8017a36:	46bd      	mov	sp, r7
 8017a38:	bd80      	pop	{r7, pc}
 8017a3a:	bf00      	nop
 8017a3c:	48000400 	.word	0x48000400
 8017a40:	2000133c 	.word	0x2000133c
 8017a44:	2000134a 	.word	0x2000134a
 8017a48:	08020d14 	.word	0x08020d14
 8017a4c:	20001398 	.word	0x20001398

08017a50 <RadioSleep>:

static void RadioSleep( void )
{
 8017a50:	b580      	push	{r7, lr}
 8017a52:	b082      	sub	sp, #8
 8017a54:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8017a56:	2300      	movs	r3, #0
 8017a58:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8017a5a:	793b      	ldrb	r3, [r7, #4]
 8017a5c:	f043 0304 	orr.w	r3, r3, #4
 8017a60:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8017a62:	7938      	ldrb	r0, [r7, #4]
 8017a64:	f000 fe22 	bl	80186ac <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8017a68:	2002      	movs	r0, #2
 8017a6a:	f7e9 fe75 	bl	8001758 <HAL_Delay>
}
 8017a6e:	bf00      	nop
 8017a70:	3708      	adds	r7, #8
 8017a72:	46bd      	mov	sp, r7
 8017a74:	bd80      	pop	{r7, pc}

08017a76 <RadioStandby>:

static void RadioStandby( void )
{
 8017a76:	b580      	push	{r7, lr}
 8017a78:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8017a7a:	2000      	movs	r0, #0
 8017a7c:	f000 fe4a 	bl	8018714 <SUBGRF_SetStandby>
}
 8017a80:	bf00      	nop
 8017a82:	bd80      	pop	{r7, pc}

08017a84 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8017a84:	b580      	push	{r7, lr}
 8017a86:	b082      	sub	sp, #8
 8017a88:	af00      	add	r7, sp, #0
 8017a8a:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 8017a8c:	f001 fea6 	bl	80197dc <RFW_Is_Init>
 8017a90:	4603      	mov	r3, r0
 8017a92:	2b01      	cmp	r3, #1
 8017a94:	d102      	bne.n	8017a9c <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 8017a96:	f001 fec9 	bl	801982c <RFW_ReceiveInit>
 8017a9a:	e007      	b.n	8017aac <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8017a9c:	2300      	movs	r3, #0
 8017a9e:	2200      	movs	r2, #0
 8017aa0:	f240 2162 	movw	r1, #610	@ 0x262
 8017aa4:	f240 2062 	movw	r0, #610	@ 0x262
 8017aa8:	f001 f80e 	bl	8018ac8 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8017aac:	687b      	ldr	r3, [r7, #4]
 8017aae:	2b00      	cmp	r3, #0
 8017ab0:	d006      	beq.n	8017ac0 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8017ab2:	6879      	ldr	r1, [r7, #4]
 8017ab4:	4813      	ldr	r0, [pc, #76]	@ (8017b04 <RadioRx+0x80>)
 8017ab6:	f002 fe4f 	bl	801a758 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8017aba:	4812      	ldr	r0, [pc, #72]	@ (8017b04 <RadioRx+0x80>)
 8017abc:	f002 fd6e 	bl	801a59c <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8017ac0:	4b11      	ldr	r3, [pc, #68]	@ (8017b08 <RadioRx+0x84>)
 8017ac2:	2200      	movs	r2, #0
 8017ac4:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
 8017ac6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8017aca:	4810      	ldr	r0, [pc, #64]	@ (8017b0c <RadioRx+0x88>)
 8017acc:	f7ff fa26 	bl	8016f1c <LL_GPIO_SetOutputPin>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8017ad0:	4b0d      	ldr	r3, [pc, #52]	@ (8017b08 <RadioRx+0x84>)
 8017ad2:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8017ad6:	2100      	movs	r1, #0
 8017ad8:	4618      	mov	r0, r3
 8017ada:	f001 fc93 	bl	8019404 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8017ade:	4b0a      	ldr	r3, [pc, #40]	@ (8017b08 <RadioRx+0x84>)
 8017ae0:	785b      	ldrb	r3, [r3, #1]
 8017ae2:	2b00      	cmp	r3, #0
 8017ae4:	d004      	beq.n	8017af0 <RadioRx+0x6c>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8017ae6:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8017aea:	f000 fe4f 	bl	801878c <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8017aee:	e005      	b.n	8017afc <RadioRx+0x78>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8017af0:	4b05      	ldr	r3, [pc, #20]	@ (8017b08 <RadioRx+0x84>)
 8017af2:	689b      	ldr	r3, [r3, #8]
 8017af4:	019b      	lsls	r3, r3, #6
 8017af6:	4618      	mov	r0, r3
 8017af8:	f000 fe48 	bl	801878c <SUBGRF_SetRx>
}
 8017afc:	bf00      	nop
 8017afe:	3708      	adds	r7, #8
 8017b00:	46bd      	mov	sp, r7
 8017b02:	bd80      	pop	{r7, pc}
 8017b04:	200013b0 	.word	0x200013b0
 8017b08:	2000133c 	.word	0x2000133c
 8017b0c:	48000400 	.word	0x48000400

08017b10 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8017b10:	b580      	push	{r7, lr}
 8017b12:	b082      	sub	sp, #8
 8017b14:	af00      	add	r7, sp, #0
 8017b16:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 8017b18:	f001 fe60 	bl	80197dc <RFW_Is_Init>
 8017b1c:	4603      	mov	r3, r0
 8017b1e:	2b01      	cmp	r3, #1
 8017b20:	d102      	bne.n	8017b28 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 8017b22:	f001 fe83 	bl	801982c <RFW_ReceiveInit>
 8017b26:	e007      	b.n	8017b38 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8017b28:	2300      	movs	r3, #0
 8017b2a:	2200      	movs	r2, #0
 8017b2c:	f240 2162 	movw	r1, #610	@ 0x262
 8017b30:	f240 2062 	movw	r0, #610	@ 0x262
 8017b34:	f000 ffc8 	bl	8018ac8 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	d006      	beq.n	8017b4c <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8017b3e:	6879      	ldr	r1, [r7, #4]
 8017b40:	4813      	ldr	r0, [pc, #76]	@ (8017b90 <RadioRxBoosted+0x80>)
 8017b42:	f002 fe09 	bl	801a758 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8017b46:	4812      	ldr	r0, [pc, #72]	@ (8017b90 <RadioRxBoosted+0x80>)
 8017b48:	f002 fd28 	bl	801a59c <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8017b4c:	4b11      	ldr	r3, [pc, #68]	@ (8017b94 <RadioRxBoosted+0x84>)
 8017b4e:	2200      	movs	r2, #0
 8017b50:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
 8017b52:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8017b56:	4810      	ldr	r0, [pc, #64]	@ (8017b98 <RadioRxBoosted+0x88>)
 8017b58:	f7ff f9e0 	bl	8016f1c <LL_GPIO_SetOutputPin>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8017b5c:	4b0d      	ldr	r3, [pc, #52]	@ (8017b94 <RadioRxBoosted+0x84>)
 8017b5e:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8017b62:	2100      	movs	r1, #0
 8017b64:	4618      	mov	r0, r3
 8017b66:	f001 fc4d 	bl	8019404 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8017b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8017b94 <RadioRxBoosted+0x84>)
 8017b6c:	785b      	ldrb	r3, [r3, #1]
 8017b6e:	2b00      	cmp	r3, #0
 8017b70:	d004      	beq.n	8017b7c <RadioRxBoosted+0x6c>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8017b72:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8017b76:	f000 fe29 	bl	80187cc <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8017b7a:	e005      	b.n	8017b88 <RadioRxBoosted+0x78>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8017b7c:	4b05      	ldr	r3, [pc, #20]	@ (8017b94 <RadioRxBoosted+0x84>)
 8017b7e:	689b      	ldr	r3, [r3, #8]
 8017b80:	019b      	lsls	r3, r3, #6
 8017b82:	4618      	mov	r0, r3
 8017b84:	f000 fe22 	bl	80187cc <SUBGRF_SetRxBoosted>
}
 8017b88:	bf00      	nop
 8017b8a:	3708      	adds	r7, #8
 8017b8c:	46bd      	mov	sp, r7
 8017b8e:	bd80      	pop	{r7, pc}
 8017b90:	200013b0 	.word	0x200013b0
 8017b94:	2000133c 	.word	0x2000133c
 8017b98:	48000400 	.word	0x48000400

08017b9c <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8017b9c:	b580      	push	{r7, lr}
 8017b9e:	b082      	sub	sp, #8
 8017ba0:	af00      	add	r7, sp, #0
 8017ba2:	6078      	str	r0, [r7, #4]
 8017ba4:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8017ba6:	687b      	ldr	r3, [r7, #4]
 8017ba8:	005a      	lsls	r2, r3, #1
 8017baa:	683b      	ldr	r3, [r7, #0]
 8017bac:	4413      	add	r3, r2
 8017bae:	4a0c      	ldr	r2, [pc, #48]	@ (8017be0 <RadioSetRxDutyCycle+0x44>)
 8017bb0:	6593      	str	r3, [r2, #88]	@ 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8017bb2:	2300      	movs	r3, #0
 8017bb4:	2200      	movs	r2, #0
 8017bb6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8017bba:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8017bbe:	f000 ff83 	bl	8018ac8 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8017bc2:	4b07      	ldr	r3, [pc, #28]	@ (8017be0 <RadioSetRxDutyCycle+0x44>)
 8017bc4:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8017bc8:	2100      	movs	r1, #0
 8017bca:	4618      	mov	r0, r3
 8017bcc:	f001 fc1a 	bl	8019404 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8017bd0:	6839      	ldr	r1, [r7, #0]
 8017bd2:	6878      	ldr	r0, [r7, #4]
 8017bd4:	f000 fe1e 	bl	8018814 <SUBGRF_SetRxDutyCycle>
}
 8017bd8:	bf00      	nop
 8017bda:	3708      	adds	r7, #8
 8017bdc:	46bd      	mov	sp, r7
 8017bde:	bd80      	pop	{r7, pc}
 8017be0:	2000133c 	.word	0x2000133c

08017be4 <RadioStartCad>:

static void RadioStartCad( void )
{
 8017be4:	b580      	push	{r7, lr}
 8017be6:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8017be8:	4b09      	ldr	r3, [pc, #36]	@ (8017c10 <RadioStartCad+0x2c>)
 8017bea:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8017bee:	2100      	movs	r1, #0
 8017bf0:	4618      	mov	r0, r3
 8017bf2:	f001 fc07 	bl	8019404 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8017bf6:	2300      	movs	r3, #0
 8017bf8:	2200      	movs	r2, #0
 8017bfa:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8017bfe:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 8017c02:	f000 ff61 	bl	8018ac8 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8017c06:	f000 fe31 	bl	801886c <SUBGRF_SetCad>
}
 8017c0a:	bf00      	nop
 8017c0c:	bd80      	pop	{r7, pc}
 8017c0e:	bf00      	nop
 8017c10:	2000133c 	.word	0x2000133c

08017c14 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8017c14:	b580      	push	{r7, lr}
 8017c16:	b084      	sub	sp, #16
 8017c18:	af00      	add	r7, sp, #0
 8017c1a:	6078      	str	r0, [r7, #4]
 8017c1c:	460b      	mov	r3, r1
 8017c1e:	70fb      	strb	r3, [r7, #3]
 8017c20:	4613      	mov	r3, r2
 8017c22:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 8017c24:	883b      	ldrh	r3, [r7, #0]
 8017c26:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8017c2a:	fb02 f303 	mul.w	r3, r2, r3
 8017c2e:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8017c30:	6878      	ldr	r0, [r7, #4]
 8017c32:	f000 ffa5 	bl	8018b80 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8017c36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017c3a:	4618      	mov	r0, r3
 8017c3c:	f001 fc0a 	bl	8019454 <SUBGRF_SetRfTxPower>
 8017c40:	4603      	mov	r3, r0
 8017c42:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8017c44:	210e      	movs	r1, #14
 8017c46:	f640 101f 	movw	r0, #2335	@ 0x91f
 8017c4a:	f001 fae7 	bl	801921c <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8017c4e:	7afb      	ldrb	r3, [r7, #11]
 8017c50:	2101      	movs	r1, #1
 8017c52:	4618      	mov	r0, r3
 8017c54:	f001 fbd6 	bl	8019404 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8017c58:	f000 fe16 	bl	8018888 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8017c5c:	68f9      	ldr	r1, [r7, #12]
 8017c5e:	4805      	ldr	r0, [pc, #20]	@ (8017c74 <RadioSetTxContinuousWave+0x60>)
 8017c60:	f002 fd7a 	bl	801a758 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8017c64:	4803      	ldr	r0, [pc, #12]	@ (8017c74 <RadioSetTxContinuousWave+0x60>)
 8017c66:	f002 fc99 	bl	801a59c <UTIL_TIMER_Start>
}
 8017c6a:	bf00      	nop
 8017c6c:	3710      	adds	r7, #16
 8017c6e:	46bd      	mov	sp, r7
 8017c70:	bd80      	pop	{r7, pc}
 8017c72:	bf00      	nop
 8017c74:	20001398 	.word	0x20001398

08017c78 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8017c78:	b580      	push	{r7, lr}
 8017c7a:	b082      	sub	sp, #8
 8017c7c:	af00      	add	r7, sp, #0
 8017c7e:	4603      	mov	r3, r0
 8017c80:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8017c82:	f001 fa38 	bl	80190f6 <SUBGRF_GetRssiInst>
 8017c86:	4603      	mov	r3, r0
}
 8017c88:	4618      	mov	r0, r3
 8017c8a:	3708      	adds	r7, #8
 8017c8c:	46bd      	mov	sp, r7
 8017c8e:	bd80      	pop	{r7, pc}

08017c90 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8017c90:	b580      	push	{r7, lr}
 8017c92:	b082      	sub	sp, #8
 8017c94:	af00      	add	r7, sp, #0
 8017c96:	4603      	mov	r3, r0
 8017c98:	460a      	mov	r2, r1
 8017c9a:	80fb      	strh	r3, [r7, #6]
 8017c9c:	4613      	mov	r3, r2
 8017c9e:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8017ca0:	797a      	ldrb	r2, [r7, #5]
 8017ca2:	88fb      	ldrh	r3, [r7, #6]
 8017ca4:	4611      	mov	r1, r2
 8017ca6:	4618      	mov	r0, r3
 8017ca8:	f001 fab8 	bl	801921c <SUBGRF_WriteRegister>
}
 8017cac:	bf00      	nop
 8017cae:	3708      	adds	r7, #8
 8017cb0:	46bd      	mov	sp, r7
 8017cb2:	bd80      	pop	{r7, pc}

08017cb4 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8017cb4:	b580      	push	{r7, lr}
 8017cb6:	b082      	sub	sp, #8
 8017cb8:	af00      	add	r7, sp, #0
 8017cba:	4603      	mov	r3, r0
 8017cbc:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8017cbe:	88fb      	ldrh	r3, [r7, #6]
 8017cc0:	4618      	mov	r0, r3
 8017cc2:	f001 fabf 	bl	8019244 <SUBGRF_ReadRegister>
 8017cc6:	4603      	mov	r3, r0
}
 8017cc8:	4618      	mov	r0, r3
 8017cca:	3708      	adds	r7, #8
 8017ccc:	46bd      	mov	sp, r7
 8017cce:	bd80      	pop	{r7, pc}

08017cd0 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8017cd0:	b580      	push	{r7, lr}
 8017cd2:	b082      	sub	sp, #8
 8017cd4:	af00      	add	r7, sp, #0
 8017cd6:	4603      	mov	r3, r0
 8017cd8:	6039      	str	r1, [r7, #0]
 8017cda:	80fb      	strh	r3, [r7, #6]
 8017cdc:	4613      	mov	r3, r2
 8017cde:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8017ce0:	797b      	ldrb	r3, [r7, #5]
 8017ce2:	b29a      	uxth	r2, r3
 8017ce4:	88fb      	ldrh	r3, [r7, #6]
 8017ce6:	6839      	ldr	r1, [r7, #0]
 8017ce8:	4618      	mov	r0, r3
 8017cea:	f001 fabf 	bl	801926c <SUBGRF_WriteRegisters>
}
 8017cee:	bf00      	nop
 8017cf0:	3708      	adds	r7, #8
 8017cf2:	46bd      	mov	sp, r7
 8017cf4:	bd80      	pop	{r7, pc}

08017cf6 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8017cf6:	b580      	push	{r7, lr}
 8017cf8:	b082      	sub	sp, #8
 8017cfa:	af00      	add	r7, sp, #0
 8017cfc:	4603      	mov	r3, r0
 8017cfe:	6039      	str	r1, [r7, #0]
 8017d00:	80fb      	strh	r3, [r7, #6]
 8017d02:	4613      	mov	r3, r2
 8017d04:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8017d06:	797b      	ldrb	r3, [r7, #5]
 8017d08:	b29a      	uxth	r2, r3
 8017d0a:	88fb      	ldrh	r3, [r7, #6]
 8017d0c:	6839      	ldr	r1, [r7, #0]
 8017d0e:	4618      	mov	r0, r3
 8017d10:	f001 face 	bl	80192b0 <SUBGRF_ReadRegisters>
}
 8017d14:	bf00      	nop
 8017d16:	3708      	adds	r7, #8
 8017d18:	46bd      	mov	sp, r7
 8017d1a:	bd80      	pop	{r7, pc}

08017d1c <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8017d1c:	b580      	push	{r7, lr}
 8017d1e:	b082      	sub	sp, #8
 8017d20:	af00      	add	r7, sp, #0
 8017d22:	4603      	mov	r3, r0
 8017d24:	460a      	mov	r2, r1
 8017d26:	71fb      	strb	r3, [r7, #7]
 8017d28:	4613      	mov	r3, r2
 8017d2a:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8017d2c:	79fb      	ldrb	r3, [r7, #7]
 8017d2e:	2b01      	cmp	r3, #1
 8017d30:	d10a      	bne.n	8017d48 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8017d32:	4a0e      	ldr	r2, [pc, #56]	@ (8017d6c <RadioSetMaxPayloadLength+0x50>)
 8017d34:	79bb      	ldrb	r3, [r7, #6]
 8017d36:	7013      	strb	r3, [r2, #0]
 8017d38:	4b0c      	ldr	r3, [pc, #48]	@ (8017d6c <RadioSetMaxPayloadLength+0x50>)
 8017d3a:	781a      	ldrb	r2, [r3, #0]
 8017d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8017d70 <RadioSetMaxPayloadLength+0x54>)
 8017d3e:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017d40:	480c      	ldr	r0, [pc, #48]	@ (8017d74 <RadioSetMaxPayloadLength+0x58>)
 8017d42:	f001 f925 	bl	8018f90 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8017d46:	e00d      	b.n	8017d64 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8017d48:	4b09      	ldr	r3, [pc, #36]	@ (8017d70 <RadioSetMaxPayloadLength+0x54>)
 8017d4a:	7d5b      	ldrb	r3, [r3, #21]
 8017d4c:	2b01      	cmp	r3, #1
 8017d4e:	d109      	bne.n	8017d64 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8017d50:	4a06      	ldr	r2, [pc, #24]	@ (8017d6c <RadioSetMaxPayloadLength+0x50>)
 8017d52:	79bb      	ldrb	r3, [r7, #6]
 8017d54:	7013      	strb	r3, [r2, #0]
 8017d56:	4b05      	ldr	r3, [pc, #20]	@ (8017d6c <RadioSetMaxPayloadLength+0x50>)
 8017d58:	781a      	ldrb	r2, [r3, #0]
 8017d5a:	4b05      	ldr	r3, [pc, #20]	@ (8017d70 <RadioSetMaxPayloadLength+0x54>)
 8017d5c:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017d5e:	4805      	ldr	r0, [pc, #20]	@ (8017d74 <RadioSetMaxPayloadLength+0x58>)
 8017d60:	f001 f916 	bl	8018f90 <SUBGRF_SetPacketParams>
}
 8017d64:	bf00      	nop
 8017d66:	3708      	adds	r7, #8
 8017d68:	46bd      	mov	sp, r7
 8017d6a:	bd80      	pop	{r7, pc}
 8017d6c:	200000d8 	.word	0x200000d8
 8017d70:	2000133c 	.word	0x2000133c
 8017d74:	2000134a 	.word	0x2000134a

08017d78 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8017d78:	b580      	push	{r7, lr}
 8017d7a:	b082      	sub	sp, #8
 8017d7c:	af00      	add	r7, sp, #0
 8017d7e:	4603      	mov	r3, r0
 8017d80:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8017d82:	4a13      	ldr	r2, [pc, #76]	@ (8017dd0 <RadioSetPublicNetwork+0x58>)
 8017d84:	79fb      	ldrb	r3, [r7, #7]
 8017d86:	7313      	strb	r3, [r2, #12]
 8017d88:	4b11      	ldr	r3, [pc, #68]	@ (8017dd0 <RadioSetPublicNetwork+0x58>)
 8017d8a:	7b1a      	ldrb	r2, [r3, #12]
 8017d8c:	4b10      	ldr	r3, [pc, #64]	@ (8017dd0 <RadioSetPublicNetwork+0x58>)
 8017d8e:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8017d90:	2001      	movs	r0, #1
 8017d92:	f7ff f951 	bl	8017038 <RadioSetModem>
    if( enable == true )
 8017d96:	79fb      	ldrb	r3, [r7, #7]
 8017d98:	2b00      	cmp	r3, #0
 8017d9a:	d00a      	beq.n	8017db2 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8017d9c:	2134      	movs	r1, #52	@ 0x34
 8017d9e:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8017da2:	f001 fa3b 	bl	801921c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8017da6:	2144      	movs	r1, #68	@ 0x44
 8017da8:	f240 7041 	movw	r0, #1857	@ 0x741
 8017dac:	f001 fa36 	bl	801921c <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8017db0:	e009      	b.n	8017dc6 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8017db2:	2114      	movs	r1, #20
 8017db4:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8017db8:	f001 fa30 	bl	801921c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8017dbc:	2124      	movs	r1, #36	@ 0x24
 8017dbe:	f240 7041 	movw	r0, #1857	@ 0x741
 8017dc2:	f001 fa2b 	bl	801921c <SUBGRF_WriteRegister>
}
 8017dc6:	bf00      	nop
 8017dc8:	3708      	adds	r7, #8
 8017dca:	46bd      	mov	sp, r7
 8017dcc:	bd80      	pop	{r7, pc}
 8017dce:	bf00      	nop
 8017dd0:	2000133c 	.word	0x2000133c

08017dd4 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8017dd4:	b580      	push	{r7, lr}
 8017dd6:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8017dd8:	f001 fb70 	bl	80194bc <SUBGRF_GetRadioWakeUpTime>
 8017ddc:	4603      	mov	r3, r0
 8017dde:	3303      	adds	r3, #3
}
 8017de0:	4618      	mov	r0, r3
 8017de2:	bd80      	pop	{r7, pc}

08017de4 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8017de4:	b580      	push	{r7, lr}
 8017de6:	b082      	sub	sp, #8
 8017de8:	af00      	add	r7, sp, #0
 8017dea:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8017dec:	f000 f80e 	bl	8017e0c <RadioOnTxTimeoutProcess>
}
 8017df0:	bf00      	nop
 8017df2:	3708      	adds	r7, #8
 8017df4:	46bd      	mov	sp, r7
 8017df6:	bd80      	pop	{r7, pc}

08017df8 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8017df8:	b580      	push	{r7, lr}
 8017dfa:	b082      	sub	sp, #8
 8017dfc:	af00      	add	r7, sp, #0
 8017dfe:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8017e00:	f000 f81e 	bl	8017e40 <RadioOnRxTimeoutProcess>
}
 8017e04:	bf00      	nop
 8017e06:	3708      	adds	r7, #8
 8017e08:	46bd      	mov	sp, r7
 8017e0a:	bd80      	pop	{r7, pc}

08017e0c <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8017e0c:	b580      	push	{r7, lr}
 8017e0e:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );
 8017e10:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8017e14:	4808      	ldr	r0, [pc, #32]	@ (8017e38 <RadioOnTxTimeoutProcess+0x2c>)
 8017e16:	f7ff f88e 	bl	8016f36 <LL_GPIO_ResetOutputPin>

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8017e1a:	4b08      	ldr	r3, [pc, #32]	@ (8017e3c <RadioOnTxTimeoutProcess+0x30>)
 8017e1c:	681b      	ldr	r3, [r3, #0]
 8017e1e:	2b00      	cmp	r3, #0
 8017e20:	d008      	beq.n	8017e34 <RadioOnTxTimeoutProcess+0x28>
 8017e22:	4b06      	ldr	r3, [pc, #24]	@ (8017e3c <RadioOnTxTimeoutProcess+0x30>)
 8017e24:	681b      	ldr	r3, [r3, #0]
 8017e26:	685b      	ldr	r3, [r3, #4]
 8017e28:	2b00      	cmp	r3, #0
 8017e2a:	d003      	beq.n	8017e34 <RadioOnTxTimeoutProcess+0x28>
    {
        RadioEvents->TxTimeout( );
 8017e2c:	4b03      	ldr	r3, [pc, #12]	@ (8017e3c <RadioOnTxTimeoutProcess+0x30>)
 8017e2e:	681b      	ldr	r3, [r3, #0]
 8017e30:	685b      	ldr	r3, [r3, #4]
 8017e32:	4798      	blx	r3
    }
}
 8017e34:	bf00      	nop
 8017e36:	bd80      	pop	{r7, pc}
 8017e38:	48000400 	.word	0x48000400
 8017e3c:	20001338 	.word	0x20001338

08017e40 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8017e40:	b580      	push	{r7, lr}
 8017e42:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );
 8017e44:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8017e48:	4808      	ldr	r0, [pc, #32]	@ (8017e6c <RadioOnRxTimeoutProcess+0x2c>)
 8017e4a:	f7ff f874 	bl	8016f36 <LL_GPIO_ResetOutputPin>

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8017e4e:	4b08      	ldr	r3, [pc, #32]	@ (8017e70 <RadioOnRxTimeoutProcess+0x30>)
 8017e50:	681b      	ldr	r3, [r3, #0]
 8017e52:	2b00      	cmp	r3, #0
 8017e54:	d008      	beq.n	8017e68 <RadioOnRxTimeoutProcess+0x28>
 8017e56:	4b06      	ldr	r3, [pc, #24]	@ (8017e70 <RadioOnRxTimeoutProcess+0x30>)
 8017e58:	681b      	ldr	r3, [r3, #0]
 8017e5a:	68db      	ldr	r3, [r3, #12]
 8017e5c:	2b00      	cmp	r3, #0
 8017e5e:	d003      	beq.n	8017e68 <RadioOnRxTimeoutProcess+0x28>
    {
        RadioEvents->RxTimeout( );
 8017e60:	4b03      	ldr	r3, [pc, #12]	@ (8017e70 <RadioOnRxTimeoutProcess+0x30>)
 8017e62:	681b      	ldr	r3, [r3, #0]
 8017e64:	68db      	ldr	r3, [r3, #12]
 8017e66:	4798      	blx	r3
    }
}
 8017e68:	bf00      	nop
 8017e6a:	bd80      	pop	{r7, pc}
 8017e6c:	48000400 	.word	0x48000400
 8017e70:	20001338 	.word	0x20001338

08017e74 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8017e74:	b580      	push	{r7, lr}
 8017e76:	b082      	sub	sp, #8
 8017e78:	af00      	add	r7, sp, #0
 8017e7a:	4603      	mov	r3, r0
 8017e7c:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8017e7e:	4a05      	ldr	r2, [pc, #20]	@ (8017e94 <RadioOnDioIrq+0x20>)
 8017e80:	88fb      	ldrh	r3, [r7, #6]
 8017e82:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

    RADIO_IRQ_PROCESS();
 8017e86:	f000 f807 	bl	8017e98 <RadioIrqProcess>
}
 8017e8a:	bf00      	nop
 8017e8c:	3708      	adds	r7, #8
 8017e8e:	46bd      	mov	sp, r7
 8017e90:	bd80      	pop	{r7, pc}
 8017e92:	bf00      	nop
 8017e94:	2000133c 	.word	0x2000133c

08017e98 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8017e98:	b5b0      	push	{r4, r5, r7, lr}
 8017e9a:	b082      	sub	sp, #8
 8017e9c:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8017e9e:	2300      	movs	r3, #0
 8017ea0:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8017ea2:	2300      	movs	r3, #0
 8017ea4:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 8017ea6:	4bb2      	ldr	r3, [pc, #712]	@ (8018170 <RadioIrqProcess+0x2d8>)
 8017ea8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8017eac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017eb0:	f000 8117 	beq.w	80180e2 <RadioIrqProcess+0x24a>
 8017eb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017eb8:	f300 81fe 	bgt.w	80182b8 <RadioIrqProcess+0x420>
 8017ebc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017ec0:	f000 80fb 	beq.w	80180ba <RadioIrqProcess+0x222>
 8017ec4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017ec8:	f300 81f6 	bgt.w	80182b8 <RadioIrqProcess+0x420>
 8017ecc:	2b80      	cmp	r3, #128	@ 0x80
 8017ece:	f000 80e0 	beq.w	8018092 <RadioIrqProcess+0x1fa>
 8017ed2:	2b80      	cmp	r3, #128	@ 0x80
 8017ed4:	f300 81f0 	bgt.w	80182b8 <RadioIrqProcess+0x420>
 8017ed8:	2b20      	cmp	r3, #32
 8017eda:	dc49      	bgt.n	8017f70 <RadioIrqProcess+0xd8>
 8017edc:	2b00      	cmp	r3, #0
 8017ede:	f340 81eb 	ble.w	80182b8 <RadioIrqProcess+0x420>
 8017ee2:	3b01      	subs	r3, #1
 8017ee4:	2b1f      	cmp	r3, #31
 8017ee6:	f200 81e7 	bhi.w	80182b8 <RadioIrqProcess+0x420>
 8017eea:	a201      	add	r2, pc, #4	@ (adr r2, 8017ef0 <RadioIrqProcess+0x58>)
 8017eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017ef0:	08017f79 	.word	0x08017f79
 8017ef4:	08017fbd 	.word	0x08017fbd
 8017ef8:	080182b9 	.word	0x080182b9
 8017efc:	08018195 	.word	0x08018195
 8017f00:	080182b9 	.word	0x080182b9
 8017f04:	080182b9 	.word	0x080182b9
 8017f08:	080182b9 	.word	0x080182b9
 8017f0c:	08018211 	.word	0x08018211
 8017f10:	080182b9 	.word	0x080182b9
 8017f14:	080182b9 	.word	0x080182b9
 8017f18:	080182b9 	.word	0x080182b9
 8017f1c:	080182b9 	.word	0x080182b9
 8017f20:	080182b9 	.word	0x080182b9
 8017f24:	080182b9 	.word	0x080182b9
 8017f28:	080182b9 	.word	0x080182b9
 8017f2c:	0801822d 	.word	0x0801822d
 8017f30:	080182b9 	.word	0x080182b9
 8017f34:	080182b9 	.word	0x080182b9
 8017f38:	080182b9 	.word	0x080182b9
 8017f3c:	080182b9 	.word	0x080182b9
 8017f40:	080182b9 	.word	0x080182b9
 8017f44:	080182b9 	.word	0x080182b9
 8017f48:	080182b9 	.word	0x080182b9
 8017f4c:	080182b9 	.word	0x080182b9
 8017f50:	080182b9 	.word	0x080182b9
 8017f54:	080182b9 	.word	0x080182b9
 8017f58:	080182b9 	.word	0x080182b9
 8017f5c:	080182b9 	.word	0x080182b9
 8017f60:	080182b9 	.word	0x080182b9
 8017f64:	080182b9 	.word	0x080182b9
 8017f68:	080182b9 	.word	0x080182b9
 8017f6c:	0801823b 	.word	0x0801823b
 8017f70:	2b40      	cmp	r3, #64	@ 0x40
 8017f72:	f000 8183 	beq.w	801827c <RadioIrqProcess+0x3e4>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 8017f76:	e19f      	b.n	80182b8 <RadioIrqProcess+0x420>
        DBG_GPIO_RADIO_TX( RST );
 8017f78:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8017f7c:	487d      	ldr	r0, [pc, #500]	@ (8018174 <RadioIrqProcess+0x2dc>)
 8017f7e:	f7fe ffda 	bl	8016f36 <LL_GPIO_ResetOutputPin>
        TimerStop( &TxTimeoutTimer );
 8017f82:	487d      	ldr	r0, [pc, #500]	@ (8018178 <RadioIrqProcess+0x2e0>)
 8017f84:	f002 fb78 	bl	801a678 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8017f88:	2000      	movs	r0, #0
 8017f8a:	f000 fbc3 	bl	8018714 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8017f8e:	f001 fc2c 	bl	80197ea <RFW_Is_LongPacketModeEnabled>
 8017f92:	4603      	mov	r3, r0
 8017f94:	2b01      	cmp	r3, #1
 8017f96:	d101      	bne.n	8017f9c <RadioIrqProcess+0x104>
            RFW_DeInit_TxLongPacket( );
 8017f98:	f001 fc50 	bl	801983c <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8017f9c:	4b77      	ldr	r3, [pc, #476]	@ (801817c <RadioIrqProcess+0x2e4>)
 8017f9e:	681b      	ldr	r3, [r3, #0]
 8017fa0:	2b00      	cmp	r3, #0
 8017fa2:	f000 818b 	beq.w	80182bc <RadioIrqProcess+0x424>
 8017fa6:	4b75      	ldr	r3, [pc, #468]	@ (801817c <RadioIrqProcess+0x2e4>)
 8017fa8:	681b      	ldr	r3, [r3, #0]
 8017faa:	681b      	ldr	r3, [r3, #0]
 8017fac:	2b00      	cmp	r3, #0
 8017fae:	f000 8185 	beq.w	80182bc <RadioIrqProcess+0x424>
            RadioEvents->TxDone( );
 8017fb2:	4b72      	ldr	r3, [pc, #456]	@ (801817c <RadioIrqProcess+0x2e4>)
 8017fb4:	681b      	ldr	r3, [r3, #0]
 8017fb6:	681b      	ldr	r3, [r3, #0]
 8017fb8:	4798      	blx	r3
        break;
 8017fba:	e17f      	b.n	80182bc <RadioIrqProcess+0x424>
        DBG_GPIO_RADIO_RX( RST );
 8017fbc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8017fc0:	486c      	ldr	r0, [pc, #432]	@ (8018174 <RadioIrqProcess+0x2dc>)
 8017fc2:	f7fe ffb8 	bl	8016f36 <LL_GPIO_ResetOutputPin>
        TimerStop( &RxTimeoutTimer );
 8017fc6:	486e      	ldr	r0, [pc, #440]	@ (8018180 <RadioIrqProcess+0x2e8>)
 8017fc8:	f002 fb56 	bl	801a678 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8017fcc:	4b68      	ldr	r3, [pc, #416]	@ (8018170 <RadioIrqProcess+0x2d8>)
 8017fce:	785b      	ldrb	r3, [r3, #1]
 8017fd0:	f083 0301 	eor.w	r3, r3, #1
 8017fd4:	b2db      	uxtb	r3, r3
 8017fd6:	2b00      	cmp	r3, #0
 8017fd8:	d014      	beq.n	8018004 <RadioIrqProcess+0x16c>
            SUBGRF_SetStandby( STDBY_RC );
 8017fda:	2000      	movs	r0, #0
 8017fdc:	f000 fb9a 	bl	8018714 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8017fe0:	2100      	movs	r1, #0
 8017fe2:	f640 1002 	movw	r0, #2306	@ 0x902
 8017fe6:	f001 f919 	bl	801921c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8017fea:	f640 1044 	movw	r0, #2372	@ 0x944
 8017fee:	f001 f929 	bl	8019244 <SUBGRF_ReadRegister>
 8017ff2:	4603      	mov	r3, r0
 8017ff4:	f043 0302 	orr.w	r3, r3, #2
 8017ff8:	b2db      	uxtb	r3, r3
 8017ffa:	4619      	mov	r1, r3
 8017ffc:	f640 1044 	movw	r0, #2372	@ 0x944
 8018000:	f001 f90c 	bl	801921c <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8018004:	1dfb      	adds	r3, r7, #7
 8018006:	22ff      	movs	r2, #255	@ 0xff
 8018008:	4619      	mov	r1, r3
 801800a:	485e      	ldr	r0, [pc, #376]	@ (8018184 <RadioIrqProcess+0x2ec>)
 801800c:	f000 fa50 	bl	80184b0 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8018010:	485d      	ldr	r0, [pc, #372]	@ (8018188 <RadioIrqProcess+0x2f0>)
 8018012:	f001 f8b1 	bl	8019178 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8018016:	4b59      	ldr	r3, [pc, #356]	@ (801817c <RadioIrqProcess+0x2e4>)
 8018018:	681b      	ldr	r3, [r3, #0]
 801801a:	2b00      	cmp	r3, #0
 801801c:	f000 8150 	beq.w	80182c0 <RadioIrqProcess+0x428>
 8018020:	4b56      	ldr	r3, [pc, #344]	@ (801817c <RadioIrqProcess+0x2e4>)
 8018022:	681b      	ldr	r3, [r3, #0]
 8018024:	689b      	ldr	r3, [r3, #8]
 8018026:	2b00      	cmp	r3, #0
 8018028:	f000 814a 	beq.w	80182c0 <RadioIrqProcess+0x428>
            switch( SubgRf.PacketStatus.packetType )
 801802c:	4b50      	ldr	r3, [pc, #320]	@ (8018170 <RadioIrqProcess+0x2d8>)
 801802e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8018032:	2b01      	cmp	r3, #1
 8018034:	d10e      	bne.n	8018054 <RadioIrqProcess+0x1bc>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8018036:	4b51      	ldr	r3, [pc, #324]	@ (801817c <RadioIrqProcess+0x2e4>)
 8018038:	681b      	ldr	r3, [r3, #0]
 801803a:	689c      	ldr	r4, [r3, #8]
 801803c:	79fb      	ldrb	r3, [r7, #7]
 801803e:	4619      	mov	r1, r3
 8018040:	4b4b      	ldr	r3, [pc, #300]	@ (8018170 <RadioIrqProcess+0x2d8>)
 8018042:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 8018046:	461a      	mov	r2, r3
 8018048:	4b49      	ldr	r3, [pc, #292]	@ (8018170 <RadioIrqProcess+0x2d8>)
 801804a:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 801804e:	484d      	ldr	r0, [pc, #308]	@ (8018184 <RadioIrqProcess+0x2ec>)
 8018050:	47a0      	blx	r4
                break;
 8018052:	e01d      	b.n	8018090 <RadioIrqProcess+0x1f8>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8018054:	4b46      	ldr	r3, [pc, #280]	@ (8018170 <RadioIrqProcess+0x2d8>)
 8018056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018058:	463a      	mov	r2, r7
 801805a:	4611      	mov	r1, r2
 801805c:	4618      	mov	r0, r3
 801805e:	f001 fb1f 	bl	80196a0 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 8018062:	4b46      	ldr	r3, [pc, #280]	@ (801817c <RadioIrqProcess+0x2e4>)
 8018064:	681b      	ldr	r3, [r3, #0]
 8018066:	689c      	ldr	r4, [r3, #8]
 8018068:	79fb      	ldrb	r3, [r7, #7]
 801806a:	4619      	mov	r1, r3
 801806c:	4b40      	ldr	r3, [pc, #256]	@ (8018170 <RadioIrqProcess+0x2d8>)
 801806e:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 8018072:	4618      	mov	r0, r3
 8018074:	683b      	ldr	r3, [r7, #0]
 8018076:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 801807a:	4a44      	ldr	r2, [pc, #272]	@ (801818c <RadioIrqProcess+0x2f4>)
 801807c:	fb82 5203 	smull	r5, r2, r2, r3
 8018080:	1192      	asrs	r2, r2, #6
 8018082:	17db      	asrs	r3, r3, #31
 8018084:	1ad3      	subs	r3, r2, r3
 8018086:	b25b      	sxtb	r3, r3
 8018088:	4602      	mov	r2, r0
 801808a:	483e      	ldr	r0, [pc, #248]	@ (8018184 <RadioIrqProcess+0x2ec>)
 801808c:	47a0      	blx	r4
                break;
 801808e:	bf00      	nop
        break;
 8018090:	e116      	b.n	80182c0 <RadioIrqProcess+0x428>
        SUBGRF_SetStandby( STDBY_RC );
 8018092:	2000      	movs	r0, #0
 8018094:	f000 fb3e 	bl	8018714 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8018098:	4b38      	ldr	r3, [pc, #224]	@ (801817c <RadioIrqProcess+0x2e4>)
 801809a:	681b      	ldr	r3, [r3, #0]
 801809c:	2b00      	cmp	r3, #0
 801809e:	f000 8111 	beq.w	80182c4 <RadioIrqProcess+0x42c>
 80180a2:	4b36      	ldr	r3, [pc, #216]	@ (801817c <RadioIrqProcess+0x2e4>)
 80180a4:	681b      	ldr	r3, [r3, #0]
 80180a6:	699b      	ldr	r3, [r3, #24]
 80180a8:	2b00      	cmp	r3, #0
 80180aa:	f000 810b 	beq.w	80182c4 <RadioIrqProcess+0x42c>
            RadioEvents->CadDone( false );
 80180ae:	4b33      	ldr	r3, [pc, #204]	@ (801817c <RadioIrqProcess+0x2e4>)
 80180b0:	681b      	ldr	r3, [r3, #0]
 80180b2:	699b      	ldr	r3, [r3, #24]
 80180b4:	2000      	movs	r0, #0
 80180b6:	4798      	blx	r3
        break;
 80180b8:	e104      	b.n	80182c4 <RadioIrqProcess+0x42c>
        SUBGRF_SetStandby( STDBY_RC );
 80180ba:	2000      	movs	r0, #0
 80180bc:	f000 fb2a 	bl	8018714 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80180c0:	4b2e      	ldr	r3, [pc, #184]	@ (801817c <RadioIrqProcess+0x2e4>)
 80180c2:	681b      	ldr	r3, [r3, #0]
 80180c4:	2b00      	cmp	r3, #0
 80180c6:	f000 80ff 	beq.w	80182c8 <RadioIrqProcess+0x430>
 80180ca:	4b2c      	ldr	r3, [pc, #176]	@ (801817c <RadioIrqProcess+0x2e4>)
 80180cc:	681b      	ldr	r3, [r3, #0]
 80180ce:	699b      	ldr	r3, [r3, #24]
 80180d0:	2b00      	cmp	r3, #0
 80180d2:	f000 80f9 	beq.w	80182c8 <RadioIrqProcess+0x430>
            RadioEvents->CadDone( true );
 80180d6:	4b29      	ldr	r3, [pc, #164]	@ (801817c <RadioIrqProcess+0x2e4>)
 80180d8:	681b      	ldr	r3, [r3, #0]
 80180da:	699b      	ldr	r3, [r3, #24]
 80180dc:	2001      	movs	r0, #1
 80180de:	4798      	blx	r3
        break;
 80180e0:	e0f2      	b.n	80182c8 <RadioIrqProcess+0x430>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 80180e2:	4b2b      	ldr	r3, [pc, #172]	@ (8018190 <RadioIrqProcess+0x2f8>)
 80180e4:	2201      	movs	r2, #1
 80180e6:	2100      	movs	r1, #0
 80180e8:	2002      	movs	r0, #2
 80180ea:	f001 fbeb 	bl	80198c4 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 80180ee:	f000 f9c5 	bl	801847c <SUBGRF_GetOperatingMode>
 80180f2:	4603      	mov	r3, r0
 80180f4:	2b04      	cmp	r3, #4
 80180f6:	d11a      	bne.n	801812e <RadioIrqProcess+0x296>
            DBG_GPIO_RADIO_TX( RST );
 80180f8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80180fc:	481d      	ldr	r0, [pc, #116]	@ (8018174 <RadioIrqProcess+0x2dc>)
 80180fe:	f7fe ff1a 	bl	8016f36 <LL_GPIO_ResetOutputPin>
            TimerStop( &TxTimeoutTimer );
 8018102:	481d      	ldr	r0, [pc, #116]	@ (8018178 <RadioIrqProcess+0x2e0>)
 8018104:	f002 fab8 	bl	801a678 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8018108:	2000      	movs	r0, #0
 801810a:	f000 fb03 	bl	8018714 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801810e:	4b1b      	ldr	r3, [pc, #108]	@ (801817c <RadioIrqProcess+0x2e4>)
 8018110:	681b      	ldr	r3, [r3, #0]
 8018112:	2b00      	cmp	r3, #0
 8018114:	f000 80da 	beq.w	80182cc <RadioIrqProcess+0x434>
 8018118:	4b18      	ldr	r3, [pc, #96]	@ (801817c <RadioIrqProcess+0x2e4>)
 801811a:	681b      	ldr	r3, [r3, #0]
 801811c:	685b      	ldr	r3, [r3, #4]
 801811e:	2b00      	cmp	r3, #0
 8018120:	f000 80d4 	beq.w	80182cc <RadioIrqProcess+0x434>
                RadioEvents->TxTimeout( );
 8018124:	4b15      	ldr	r3, [pc, #84]	@ (801817c <RadioIrqProcess+0x2e4>)
 8018126:	681b      	ldr	r3, [r3, #0]
 8018128:	685b      	ldr	r3, [r3, #4]
 801812a:	4798      	blx	r3
        break;
 801812c:	e0ce      	b.n	80182cc <RadioIrqProcess+0x434>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 801812e:	f000 f9a5 	bl	801847c <SUBGRF_GetOperatingMode>
 8018132:	4603      	mov	r3, r0
 8018134:	2b05      	cmp	r3, #5
 8018136:	f040 80c9 	bne.w	80182cc <RadioIrqProcess+0x434>
            DBG_GPIO_RADIO_RX( RST );
 801813a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 801813e:	480d      	ldr	r0, [pc, #52]	@ (8018174 <RadioIrqProcess+0x2dc>)
 8018140:	f7fe fef9 	bl	8016f36 <LL_GPIO_ResetOutputPin>
            TimerStop( &RxTimeoutTimer );
 8018144:	480e      	ldr	r0, [pc, #56]	@ (8018180 <RadioIrqProcess+0x2e8>)
 8018146:	f002 fa97 	bl	801a678 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801814a:	2000      	movs	r0, #0
 801814c:	f000 fae2 	bl	8018714 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8018150:	4b0a      	ldr	r3, [pc, #40]	@ (801817c <RadioIrqProcess+0x2e4>)
 8018152:	681b      	ldr	r3, [r3, #0]
 8018154:	2b00      	cmp	r3, #0
 8018156:	f000 80b9 	beq.w	80182cc <RadioIrqProcess+0x434>
 801815a:	4b08      	ldr	r3, [pc, #32]	@ (801817c <RadioIrqProcess+0x2e4>)
 801815c:	681b      	ldr	r3, [r3, #0]
 801815e:	68db      	ldr	r3, [r3, #12]
 8018160:	2b00      	cmp	r3, #0
 8018162:	f000 80b3 	beq.w	80182cc <RadioIrqProcess+0x434>
                RadioEvents->RxTimeout( );
 8018166:	4b05      	ldr	r3, [pc, #20]	@ (801817c <RadioIrqProcess+0x2e4>)
 8018168:	681b      	ldr	r3, [r3, #0]
 801816a:	68db      	ldr	r3, [r3, #12]
 801816c:	4798      	blx	r3
        break;
 801816e:	e0ad      	b.n	80182cc <RadioIrqProcess+0x434>
 8018170:	2000133c 	.word	0x2000133c
 8018174:	48000400 	.word	0x48000400
 8018178:	20001398 	.word	0x20001398
 801817c:	20001338 	.word	0x20001338
 8018180:	200013b0 	.word	0x200013b0
 8018184:	20001238 	.word	0x20001238
 8018188:	20001360 	.word	0x20001360
 801818c:	10624dd3 	.word	0x10624dd3
 8018190:	08020d2c 	.word	0x08020d2c
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8018194:	4b54      	ldr	r3, [pc, #336]	@ (80182e8 <RadioIrqProcess+0x450>)
 8018196:	2201      	movs	r2, #1
 8018198:	2100      	movs	r1, #0
 801819a:	2002      	movs	r0, #2
 801819c:	f001 fb92 	bl	80198c4 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 80181a0:	4b52      	ldr	r3, [pc, #328]	@ (80182ec <RadioIrqProcess+0x454>)
 80181a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80181a4:	2b00      	cmp	r3, #0
 80181a6:	f000 8093 	beq.w	80182d0 <RadioIrqProcess+0x438>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 80181aa:	4a51      	ldr	r2, [pc, #324]	@ (80182f0 <RadioIrqProcess+0x458>)
 80181ac:	4b4f      	ldr	r3, [pc, #316]	@ (80182ec <RadioIrqProcess+0x454>)
 80181ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80181b0:	0c1b      	lsrs	r3, r3, #16
 80181b2:	b2db      	uxtb	r3, r3
 80181b4:	4619      	mov	r1, r3
 80181b6:	f640 1003 	movw	r0, #2307	@ 0x903
 80181ba:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 80181bc:	4a4c      	ldr	r2, [pc, #304]	@ (80182f0 <RadioIrqProcess+0x458>)
 80181be:	4b4b      	ldr	r3, [pc, #300]	@ (80182ec <RadioIrqProcess+0x454>)
 80181c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80181c2:	0a1b      	lsrs	r3, r3, #8
 80181c4:	b2db      	uxtb	r3, r3
 80181c6:	4619      	mov	r1, r3
 80181c8:	f640 1004 	movw	r0, #2308	@ 0x904
 80181cc:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 80181ce:	4a48      	ldr	r2, [pc, #288]	@ (80182f0 <RadioIrqProcess+0x458>)
 80181d0:	4b46      	ldr	r3, [pc, #280]	@ (80182ec <RadioIrqProcess+0x454>)
 80181d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80181d4:	b2db      	uxtb	r3, r3
 80181d6:	4619      	mov	r1, r3
 80181d8:	f640 1005 	movw	r0, #2309	@ 0x905
 80181dc:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 80181de:	4c44      	ldr	r4, [pc, #272]	@ (80182f0 <RadioIrqProcess+0x458>)
 80181e0:	4b44      	ldr	r3, [pc, #272]	@ (80182f4 <RadioIrqProcess+0x45c>)
 80181e2:	f640 1002 	movw	r0, #2306	@ 0x902
 80181e6:	4798      	blx	r3
 80181e8:	4603      	mov	r3, r0
 80181ea:	f043 0301 	orr.w	r3, r3, #1
 80181ee:	b2db      	uxtb	r3, r3
 80181f0:	4619      	mov	r1, r3
 80181f2:	f640 1002 	movw	r0, #2306	@ 0x902
 80181f6:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 80181f8:	4b3c      	ldr	r3, [pc, #240]	@ (80182ec <RadioIrqProcess+0x454>)
 80181fa:	2200      	movs	r2, #0
 80181fc:	659a      	str	r2, [r3, #88]	@ 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80181fe:	2300      	movs	r3, #0
 8018200:	2200      	movs	r2, #0
 8018202:	f240 2162 	movw	r1, #610	@ 0x262
 8018206:	f240 2062 	movw	r0, #610	@ 0x262
 801820a:	f000 fc5d 	bl	8018ac8 <SUBGRF_SetDioIrqParams>
        break;
 801820e:	e05f      	b.n	80182d0 <RadioIrqProcess+0x438>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8018210:	4b39      	ldr	r3, [pc, #228]	@ (80182f8 <RadioIrqProcess+0x460>)
 8018212:	2201      	movs	r2, #1
 8018214:	2100      	movs	r1, #0
 8018216:	2002      	movs	r0, #2
 8018218:	f001 fb54 	bl	80198c4 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 801821c:	f001 fade 	bl	80197dc <RFW_Is_Init>
 8018220:	4603      	mov	r3, r0
 8018222:	2b01      	cmp	r3, #1
 8018224:	d156      	bne.n	80182d4 <RadioIrqProcess+0x43c>
            RFW_ReceivePayload( );
 8018226:	f001 fb0f 	bl	8019848 <RFW_ReceivePayload>
        break;
 801822a:	e053      	b.n	80182d4 <RadioIrqProcess+0x43c>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801822c:	4b33      	ldr	r3, [pc, #204]	@ (80182fc <RadioIrqProcess+0x464>)
 801822e:	2201      	movs	r2, #1
 8018230:	2100      	movs	r1, #0
 8018232:	2002      	movs	r0, #2
 8018234:	f001 fb46 	bl	80198c4 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8018238:	e051      	b.n	80182de <RadioIrqProcess+0x446>
        TimerStop( &RxTimeoutTimer );
 801823a:	4831      	ldr	r0, [pc, #196]	@ (8018300 <RadioIrqProcess+0x468>)
 801823c:	f002 fa1c 	bl	801a678 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8018240:	4b2a      	ldr	r3, [pc, #168]	@ (80182ec <RadioIrqProcess+0x454>)
 8018242:	785b      	ldrb	r3, [r3, #1]
 8018244:	f083 0301 	eor.w	r3, r3, #1
 8018248:	b2db      	uxtb	r3, r3
 801824a:	2b00      	cmp	r3, #0
 801824c:	d002      	beq.n	8018254 <RadioIrqProcess+0x3bc>
            SUBGRF_SetStandby( STDBY_RC );
 801824e:	2000      	movs	r0, #0
 8018250:	f000 fa60 	bl	8018714 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8018254:	4b2b      	ldr	r3, [pc, #172]	@ (8018304 <RadioIrqProcess+0x46c>)
 8018256:	681b      	ldr	r3, [r3, #0]
 8018258:	2b00      	cmp	r3, #0
 801825a:	d03d      	beq.n	80182d8 <RadioIrqProcess+0x440>
 801825c:	4b29      	ldr	r3, [pc, #164]	@ (8018304 <RadioIrqProcess+0x46c>)
 801825e:	681b      	ldr	r3, [r3, #0]
 8018260:	68db      	ldr	r3, [r3, #12]
 8018262:	2b00      	cmp	r3, #0
 8018264:	d038      	beq.n	80182d8 <RadioIrqProcess+0x440>
            RadioEvents->RxTimeout( );
 8018266:	4b27      	ldr	r3, [pc, #156]	@ (8018304 <RadioIrqProcess+0x46c>)
 8018268:	681b      	ldr	r3, [r3, #0]
 801826a:	68db      	ldr	r3, [r3, #12]
 801826c:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801826e:	4b26      	ldr	r3, [pc, #152]	@ (8018308 <RadioIrqProcess+0x470>)
 8018270:	2201      	movs	r2, #1
 8018272:	2100      	movs	r1, #0
 8018274:	2002      	movs	r0, #2
 8018276:	f001 fb25 	bl	80198c4 <UTIL_ADV_TRACE_COND_FSend>
        break;
 801827a:	e02d      	b.n	80182d8 <RadioIrqProcess+0x440>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 801827c:	4b23      	ldr	r3, [pc, #140]	@ (801830c <RadioIrqProcess+0x474>)
 801827e:	2201      	movs	r2, #1
 8018280:	2100      	movs	r1, #0
 8018282:	2002      	movs	r0, #2
 8018284:	f001 fb1e 	bl	80198c4 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8018288:	4b18      	ldr	r3, [pc, #96]	@ (80182ec <RadioIrqProcess+0x454>)
 801828a:	785b      	ldrb	r3, [r3, #1]
 801828c:	f083 0301 	eor.w	r3, r3, #1
 8018290:	b2db      	uxtb	r3, r3
 8018292:	2b00      	cmp	r3, #0
 8018294:	d002      	beq.n	801829c <RadioIrqProcess+0x404>
            SUBGRF_SetStandby( STDBY_RC );
 8018296:	2000      	movs	r0, #0
 8018298:	f000 fa3c 	bl	8018714 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 801829c:	4b19      	ldr	r3, [pc, #100]	@ (8018304 <RadioIrqProcess+0x46c>)
 801829e:	681b      	ldr	r3, [r3, #0]
 80182a0:	2b00      	cmp	r3, #0
 80182a2:	d01b      	beq.n	80182dc <RadioIrqProcess+0x444>
 80182a4:	4b17      	ldr	r3, [pc, #92]	@ (8018304 <RadioIrqProcess+0x46c>)
 80182a6:	681b      	ldr	r3, [r3, #0]
 80182a8:	691b      	ldr	r3, [r3, #16]
 80182aa:	2b00      	cmp	r3, #0
 80182ac:	d016      	beq.n	80182dc <RadioIrqProcess+0x444>
            RadioEvents->RxError( );
 80182ae:	4b15      	ldr	r3, [pc, #84]	@ (8018304 <RadioIrqProcess+0x46c>)
 80182b0:	681b      	ldr	r3, [r3, #0]
 80182b2:	691b      	ldr	r3, [r3, #16]
 80182b4:	4798      	blx	r3
        break;
 80182b6:	e011      	b.n	80182dc <RadioIrqProcess+0x444>
        break;
 80182b8:	bf00      	nop
 80182ba:	e010      	b.n	80182de <RadioIrqProcess+0x446>
        break;
 80182bc:	bf00      	nop
 80182be:	e00e      	b.n	80182de <RadioIrqProcess+0x446>
        break;
 80182c0:	bf00      	nop
 80182c2:	e00c      	b.n	80182de <RadioIrqProcess+0x446>
        break;
 80182c4:	bf00      	nop
 80182c6:	e00a      	b.n	80182de <RadioIrqProcess+0x446>
        break;
 80182c8:	bf00      	nop
 80182ca:	e008      	b.n	80182de <RadioIrqProcess+0x446>
        break;
 80182cc:	bf00      	nop
 80182ce:	e006      	b.n	80182de <RadioIrqProcess+0x446>
        break;
 80182d0:	bf00      	nop
 80182d2:	e004      	b.n	80182de <RadioIrqProcess+0x446>
        break;
 80182d4:	bf00      	nop
 80182d6:	e002      	b.n	80182de <RadioIrqProcess+0x446>
        break;
 80182d8:	bf00      	nop
 80182da:	e000      	b.n	80182de <RadioIrqProcess+0x446>
        break;
 80182dc:	bf00      	nop
    }
}
 80182de:	bf00      	nop
 80182e0:	3708      	adds	r7, #8
 80182e2:	46bd      	mov	sp, r7
 80182e4:	bdb0      	pop	{r4, r5, r7, pc}
 80182e6:	bf00      	nop
 80182e8:	08020d40 	.word	0x08020d40
 80182ec:	2000133c 	.word	0x2000133c
 80182f0:	08017c91 	.word	0x08017c91
 80182f4:	08017cb5 	.word	0x08017cb5
 80182f8:	08020d4c 	.word	0x08020d4c
 80182fc:	08020d58 	.word	0x08020d58
 8018300:	200013b0 	.word	0x200013b0
 8018304:	20001338 	.word	0x20001338
 8018308:	08020d64 	.word	0x08020d64
 801830c:	08020d70 	.word	0x08020d70

08018310 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8018310:	b580      	push	{r7, lr}
 8018312:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8018314:	4b09      	ldr	r3, [pc, #36]	@ (801833c <RadioTxPrbs+0x2c>)
 8018316:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801831a:	2101      	movs	r1, #1
 801831c:	4618      	mov	r0, r3
 801831e:	f001 f871 	bl	8019404 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8018322:	4b07      	ldr	r3, [pc, #28]	@ (8018340 <RadioTxPrbs+0x30>)
 8018324:	212d      	movs	r1, #45	@ 0x2d
 8018326:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 801832a:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 801832c:	f000 fab5 	bl	801889a <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8018330:	4804      	ldr	r0, [pc, #16]	@ (8018344 <RadioTxPrbs+0x34>)
 8018332:	f000 fa0b 	bl	801874c <SUBGRF_SetTx>
}
 8018336:	bf00      	nop
 8018338:	bd80      	pop	{r7, pc}
 801833a:	bf00      	nop
 801833c:	2000133c 	.word	0x2000133c
 8018340:	08017c91 	.word	0x08017c91
 8018344:	000fffff 	.word	0x000fffff

08018348 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8018348:	b580      	push	{r7, lr}
 801834a:	b084      	sub	sp, #16
 801834c:	af00      	add	r7, sp, #0
 801834e:	4603      	mov	r3, r0
 8018350:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8018352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018356:	4618      	mov	r0, r3
 8018358:	f001 f87c 	bl	8019454 <SUBGRF_SetRfTxPower>
 801835c:	4603      	mov	r3, r0
 801835e:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8018360:	210e      	movs	r1, #14
 8018362:	f640 101f 	movw	r0, #2335	@ 0x91f
 8018366:	f000 ff59 	bl	801921c <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 801836a:	7bfb      	ldrb	r3, [r7, #15]
 801836c:	2101      	movs	r1, #1
 801836e:	4618      	mov	r0, r3
 8018370:	f001 f848 	bl	8019404 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8018374:	f000 fa88 	bl	8018888 <SUBGRF_SetTxContinuousWave>
}
 8018378:	bf00      	nop
 801837a:	3710      	adds	r7, #16
 801837c:	46bd      	mov	sp, r7
 801837e:	bd80      	pop	{r7, pc}

08018380 <RadioSetRxGenericConfig>:
}
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 8018380:	b480      	push	{r7}
 8018382:	b085      	sub	sp, #20
 8018384:	af00      	add	r7, sp, #0
 8018386:	60b9      	str	r1, [r7, #8]
 8018388:	607a      	str	r2, [r7, #4]
 801838a:	603b      	str	r3, [r7, #0]
 801838c:	4603      	mov	r3, r0
 801838e:	73fb      	strb	r3, [r7, #15]
    default:
        break;
    }
    return status;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
 8018390:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8018394:	4618      	mov	r0, r3
 8018396:	3714      	adds	r7, #20
 8018398:	46bd      	mov	sp, r7
 801839a:	bc80      	pop	{r7}
 801839c:	4770      	bx	lr

0801839e <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 801839e:	b480      	push	{r7}
 80183a0:	b085      	sub	sp, #20
 80183a2:	af00      	add	r7, sp, #0
 80183a4:	60b9      	str	r1, [r7, #8]
 80183a6:	607b      	str	r3, [r7, #4]
 80183a8:	4603      	mov	r3, r0
 80183aa:	73fb      	strb	r3, [r7, #15]
 80183ac:	4613      	mov	r3, r2
 80183ae:	73bb      	strb	r3, [r7, #14]
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
    SubgRf.TxTimeout = timeout;
    return 0;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
 80183b0:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 80183b4:	4618      	mov	r0, r3
 80183b6:	3714      	adds	r7, #20
 80183b8:	46bd      	mov	sp, r7
 80183ba:	bc80      	pop	{r7}
 80183bc:	4770      	bx	lr

080183be <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 80183be:	b480      	push	{r7}
 80183c0:	b085      	sub	sp, #20
 80183c2:	af00      	add	r7, sp, #0
 80183c4:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 80183c6:	2301      	movs	r3, #1
 80183c8:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 80183ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80183cc:	4618      	mov	r0, r3
 80183ce:	3714      	adds	r7, #20
 80183d0:	46bd      	mov	sp, r7
 80183d2:	bc80      	pop	{r7}
 80183d4:	4770      	bx	lr

080183d6 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 80183d6:	b480      	push	{r7}
 80183d8:	b083      	sub	sp, #12
 80183da:	af00      	add	r7, sp, #0
 80183dc:	6078      	str	r0, [r7, #4]
 80183de:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 80183e0:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 80183e2:	4618      	mov	r0, r3
 80183e4:	370c      	adds	r7, #12
 80183e6:	46bd      	mov	sp, r7
 80183e8:	bc80      	pop	{r7}
 80183ea:	4770      	bx	lr

080183ec <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 80183ec:	b580      	push	{r7, lr}
 80183ee:	b084      	sub	sp, #16
 80183f0:	af00      	add	r7, sp, #0
 80183f2:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	2b00      	cmp	r3, #0
 80183f8:	d002      	beq.n	8018400 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 80183fa:	4a1d      	ldr	r2, [pc, #116]	@ (8018470 <SUBGRF_Init+0x84>)
 80183fc:	687b      	ldr	r3, [r7, #4]
 80183fe:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8018400:	f7e9 f8e2 	bl	80015c8 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8018404:	2002      	movs	r0, #2
 8018406:	f001 f901 	bl	801960c <Radio_SMPS_Set>

    ImageCalibrated = false;
 801840a:	4b1a      	ldr	r3, [pc, #104]	@ (8018474 <SUBGRF_Init+0x88>)
 801840c:	2200      	movs	r2, #0
 801840e:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8018410:	2000      	movs	r0, #0
 8018412:	f000 f97f 	bl	8018714 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8018416:	f7ea f951 	bl	80026bc <RBI_IsTCXO>
 801841a:	4603      	mov	r3, r0
 801841c:	2b01      	cmp	r3, #1
 801841e:	d10e      	bne.n	801843e <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8018420:	2140      	movs	r1, #64	@ 0x40
 8018422:	2001      	movs	r0, #1
 8018424:	f000 fb8a 	bl	8018b3c <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8018428:	2100      	movs	r1, #0
 801842a:	f640 1011 	movw	r0, #2321	@ 0x911
 801842e:	f000 fef5 	bl	801921c <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8018432:	237f      	movs	r3, #127	@ 0x7f
 8018434:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8018436:	7b38      	ldrb	r0, [r7, #12]
 8018438:	f000 fa8d 	bl	8018956 <SUBGRF_Calibrate>
 801843c:	e009      	b.n	8018452 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 801843e:	2120      	movs	r1, #32
 8018440:	f640 1011 	movw	r0, #2321	@ 0x911
 8018444:	f000 feea 	bl	801921c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8018448:	2120      	movs	r1, #32
 801844a:	f640 1012 	movw	r0, #2322	@ 0x912
 801844e:	f000 fee5 	bl	801921c <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8018452:	210e      	movs	r1, #14
 8018454:	f640 101f 	movw	r0, #2335	@ 0x91f
 8018458:	f000 fee0 	bl	801921c <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 801845c:	f7ea f912 	bl	8002684 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8018460:	4b05      	ldr	r3, [pc, #20]	@ (8018478 <SUBGRF_Init+0x8c>)
 8018462:	2201      	movs	r2, #1
 8018464:	701a      	strb	r2, [r3, #0]
}
 8018466:	bf00      	nop
 8018468:	3710      	adds	r7, #16
 801846a:	46bd      	mov	sp, r7
 801846c:	bd80      	pop	{r7, pc}
 801846e:	bf00      	nop
 8018470:	200013d4 	.word	0x200013d4
 8018474:	200013d0 	.word	0x200013d0
 8018478:	200013c8 	.word	0x200013c8

0801847c <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 801847c:	b480      	push	{r7}
 801847e:	af00      	add	r7, sp, #0
    return OperatingMode;
 8018480:	4b02      	ldr	r3, [pc, #8]	@ (801848c <SUBGRF_GetOperatingMode+0x10>)
 8018482:	781b      	ldrb	r3, [r3, #0]
}
 8018484:	4618      	mov	r0, r3
 8018486:	46bd      	mov	sp, r7
 8018488:	bc80      	pop	{r7}
 801848a:	4770      	bx	lr
 801848c:	200013c8 	.word	0x200013c8

08018490 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8018490:	b580      	push	{r7, lr}
 8018492:	b082      	sub	sp, #8
 8018494:	af00      	add	r7, sp, #0
 8018496:	6078      	str	r0, [r7, #4]
 8018498:	460b      	mov	r3, r1
 801849a:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801849c:	78fb      	ldrb	r3, [r7, #3]
 801849e:	461a      	mov	r2, r3
 80184a0:	6879      	ldr	r1, [r7, #4]
 80184a2:	2000      	movs	r0, #0
 80184a4:	f000 ff26 	bl	80192f4 <SUBGRF_WriteBuffer>
}
 80184a8:	bf00      	nop
 80184aa:	3708      	adds	r7, #8
 80184ac:	46bd      	mov	sp, r7
 80184ae:	bd80      	pop	{r7, pc}

080184b0 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 80184b0:	b580      	push	{r7, lr}
 80184b2:	b086      	sub	sp, #24
 80184b4:	af00      	add	r7, sp, #0
 80184b6:	60f8      	str	r0, [r7, #12]
 80184b8:	60b9      	str	r1, [r7, #8]
 80184ba:	4613      	mov	r3, r2
 80184bc:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 80184be:	2300      	movs	r3, #0
 80184c0:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 80184c2:	f107 0317 	add.w	r3, r7, #23
 80184c6:	4619      	mov	r1, r3
 80184c8:	68b8      	ldr	r0, [r7, #8]
 80184ca:	f000 fe29 	bl	8019120 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 80184ce:	68bb      	ldr	r3, [r7, #8]
 80184d0:	781b      	ldrb	r3, [r3, #0]
 80184d2:	79fa      	ldrb	r2, [r7, #7]
 80184d4:	429a      	cmp	r2, r3
 80184d6:	d201      	bcs.n	80184dc <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 80184d8:	2301      	movs	r3, #1
 80184da:	e007      	b.n	80184ec <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 80184dc:	7df8      	ldrb	r0, [r7, #23]
 80184de:	68bb      	ldr	r3, [r7, #8]
 80184e0:	781b      	ldrb	r3, [r3, #0]
 80184e2:	461a      	mov	r2, r3
 80184e4:	68f9      	ldr	r1, [r7, #12]
 80184e6:	f000 ff27 	bl	8019338 <SUBGRF_ReadBuffer>

    return 0;
 80184ea:	2300      	movs	r3, #0
}
 80184ec:	4618      	mov	r0, r3
 80184ee:	3718      	adds	r7, #24
 80184f0:	46bd      	mov	sp, r7
 80184f2:	bd80      	pop	{r7, pc}

080184f4 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 80184f4:	b580      	push	{r7, lr}
 80184f6:	b084      	sub	sp, #16
 80184f8:	af00      	add	r7, sp, #0
 80184fa:	60f8      	str	r0, [r7, #12]
 80184fc:	460b      	mov	r3, r1
 80184fe:	607a      	str	r2, [r7, #4]
 8018500:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8018502:	7afb      	ldrb	r3, [r7, #11]
 8018504:	4619      	mov	r1, r3
 8018506:	68f8      	ldr	r0, [r7, #12]
 8018508:	f7ff ffc2 	bl	8018490 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 801850c:	6878      	ldr	r0, [r7, #4]
 801850e:	f000 f91d 	bl	801874c <SUBGRF_SetTx>
}
 8018512:	bf00      	nop
 8018514:	3710      	adds	r7, #16
 8018516:	46bd      	mov	sp, r7
 8018518:	bd80      	pop	{r7, pc}

0801851a <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 801851a:	b580      	push	{r7, lr}
 801851c:	b082      	sub	sp, #8
 801851e:	af00      	add	r7, sp, #0
 8018520:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8018522:	2208      	movs	r2, #8
 8018524:	6879      	ldr	r1, [r7, #4]
 8018526:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 801852a:	f000 fe9f 	bl	801926c <SUBGRF_WriteRegisters>
    return 0;
 801852e:	2300      	movs	r3, #0
}
 8018530:	4618      	mov	r0, r3
 8018532:	3708      	adds	r7, #8
 8018534:	46bd      	mov	sp, r7
 8018536:	bd80      	pop	{r7, pc}

08018538 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8018538:	b580      	push	{r7, lr}
 801853a:	b084      	sub	sp, #16
 801853c:	af00      	add	r7, sp, #0
 801853e:	4603      	mov	r3, r0
 8018540:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8018542:	88fb      	ldrh	r3, [r7, #6]
 8018544:	0a1b      	lsrs	r3, r3, #8
 8018546:	b29b      	uxth	r3, r3
 8018548:	b2db      	uxtb	r3, r3
 801854a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801854c:	88fb      	ldrh	r3, [r7, #6]
 801854e:	b2db      	uxtb	r3, r3
 8018550:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8018552:	f000 fb77 	bl	8018c44 <SUBGRF_GetPacketType>
 8018556:	4603      	mov	r3, r0
 8018558:	2b00      	cmp	r3, #0
 801855a:	d108      	bne.n	801856e <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 801855c:	f107 030c 	add.w	r3, r7, #12
 8018560:	2202      	movs	r2, #2
 8018562:	4619      	mov	r1, r3
 8018564:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 8018568:	f000 fe80 	bl	801926c <SUBGRF_WriteRegisters>
            break;
 801856c:	e000      	b.n	8018570 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 801856e:	bf00      	nop
    }
}
 8018570:	bf00      	nop
 8018572:	3710      	adds	r7, #16
 8018574:	46bd      	mov	sp, r7
 8018576:	bd80      	pop	{r7, pc}

08018578 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8018578:	b580      	push	{r7, lr}
 801857a:	b084      	sub	sp, #16
 801857c:	af00      	add	r7, sp, #0
 801857e:	4603      	mov	r3, r0
 8018580:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8018582:	88fb      	ldrh	r3, [r7, #6]
 8018584:	0a1b      	lsrs	r3, r3, #8
 8018586:	b29b      	uxth	r3, r3
 8018588:	b2db      	uxtb	r3, r3
 801858a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 801858c:	88fb      	ldrh	r3, [r7, #6]
 801858e:	b2db      	uxtb	r3, r3
 8018590:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8018592:	f000 fb57 	bl	8018c44 <SUBGRF_GetPacketType>
 8018596:	4603      	mov	r3, r0
 8018598:	2b00      	cmp	r3, #0
 801859a:	d108      	bne.n	80185ae <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 801859c:	f107 030c 	add.w	r3, r7, #12
 80185a0:	2202      	movs	r2, #2
 80185a2:	4619      	mov	r1, r3
 80185a4:	f240 60be 	movw	r0, #1726	@ 0x6be
 80185a8:	f000 fe60 	bl	801926c <SUBGRF_WriteRegisters>
            break;
 80185ac:	e000      	b.n	80185b0 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 80185ae:	bf00      	nop
    }
}
 80185b0:	bf00      	nop
 80185b2:	3710      	adds	r7, #16
 80185b4:	46bd      	mov	sp, r7
 80185b6:	bd80      	pop	{r7, pc}

080185b8 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 80185b8:	b580      	push	{r7, lr}
 80185ba:	b084      	sub	sp, #16
 80185bc:	af00      	add	r7, sp, #0
 80185be:	4603      	mov	r3, r0
 80185c0:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 80185c2:	2300      	movs	r3, #0
 80185c4:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 80185c6:	f000 fb3d 	bl	8018c44 <SUBGRF_GetPacketType>
 80185ca:	4603      	mov	r3, r0
 80185cc:	2b00      	cmp	r3, #0
 80185ce:	d121      	bne.n	8018614 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 80185d0:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 80185d4:	f000 fe36 	bl	8019244 <SUBGRF_ReadRegister>
 80185d8:	4603      	mov	r3, r0
 80185da:	f023 0301 	bic.w	r3, r3, #1
 80185de:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 80185e0:	88fb      	ldrh	r3, [r7, #6]
 80185e2:	0a1b      	lsrs	r3, r3, #8
 80185e4:	b29b      	uxth	r3, r3
 80185e6:	b25b      	sxtb	r3, r3
 80185e8:	f003 0301 	and.w	r3, r3, #1
 80185ec:	b25a      	sxtb	r2, r3
 80185ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80185f2:	4313      	orrs	r3, r2
 80185f4:	b25b      	sxtb	r3, r3
 80185f6:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 80185f8:	7bfb      	ldrb	r3, [r7, #15]
 80185fa:	4619      	mov	r1, r3
 80185fc:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8018600:	f000 fe0c 	bl	801921c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8018604:	88fb      	ldrh	r3, [r7, #6]
 8018606:	b2db      	uxtb	r3, r3
 8018608:	4619      	mov	r1, r3
 801860a:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 801860e:	f000 fe05 	bl	801921c <SUBGRF_WriteRegister>
            break;
 8018612:	e000      	b.n	8018616 <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8018614:	bf00      	nop
    }
}
 8018616:	bf00      	nop
 8018618:	3710      	adds	r7, #16
 801861a:	46bd      	mov	sp, r7
 801861c:	bd80      	pop	{r7, pc}

0801861e <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 801861e:	b580      	push	{r7, lr}
 8018620:	b082      	sub	sp, #8
 8018622:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8018624:	2300      	movs	r3, #0
 8018626:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8018628:	2300      	movs	r3, #0
 801862a:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 801862c:	2300      	movs	r3, #0
 801862e:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8018630:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8018634:	f000 fe06 	bl	8019244 <SUBGRF_ReadRegister>
 8018638:	4603      	mov	r3, r0
 801863a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 801863c:	79fb      	ldrb	r3, [r7, #7]
 801863e:	f023 0301 	bic.w	r3, r3, #1
 8018642:	b2db      	uxtb	r3, r3
 8018644:	4619      	mov	r1, r3
 8018646:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 801864a:	f000 fde7 	bl	801921c <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801864e:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8018652:	f000 fdf7 	bl	8019244 <SUBGRF_ReadRegister>
 8018656:	4603      	mov	r3, r0
 8018658:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 801865a:	79bb      	ldrb	r3, [r7, #6]
 801865c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018660:	b2db      	uxtb	r3, r3
 8018662:	4619      	mov	r1, r3
 8018664:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8018668:	f000 fdd8 	bl	801921c <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801866c:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8018670:	f000 f88c 	bl	801878c <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8018674:	463b      	mov	r3, r7
 8018676:	2204      	movs	r2, #4
 8018678:	4619      	mov	r1, r3
 801867a:	f640 0019 	movw	r0, #2073	@ 0x819
 801867e:	f000 fe17 	bl	80192b0 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8018682:	2000      	movs	r0, #0
 8018684:	f000 f846 	bl	8018714 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8018688:	79fb      	ldrb	r3, [r7, #7]
 801868a:	4619      	mov	r1, r3
 801868c:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8018690:	f000 fdc4 	bl	801921c <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8018694:	79bb      	ldrb	r3, [r7, #6]
 8018696:	4619      	mov	r1, r3
 8018698:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801869c:	f000 fdbe 	bl	801921c <SUBGRF_WriteRegister>

    return number;
 80186a0:	683b      	ldr	r3, [r7, #0]
}
 80186a2:	4618      	mov	r0, r3
 80186a4:	3708      	adds	r7, #8
 80186a6:	46bd      	mov	sp, r7
 80186a8:	bd80      	pop	{r7, pc}
	...

080186ac <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 80186ac:	b580      	push	{r7, lr}
 80186ae:	b084      	sub	sp, #16
 80186b0:	af00      	add	r7, sp, #0
 80186b2:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 80186b4:	2000      	movs	r0, #0
 80186b6:	f7e9 ffec 	bl	8002692 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80186ba:	2002      	movs	r0, #2
 80186bc:	f000 ffa6 	bl	801960c <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80186c0:	793b      	ldrb	r3, [r7, #4]
 80186c2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80186c6:	b2db      	uxtb	r3, r3
 80186c8:	b25b      	sxtb	r3, r3
 80186ca:	009b      	lsls	r3, r3, #2
 80186cc:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80186ce:	793b      	ldrb	r3, [r7, #4]
 80186d0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80186d4:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80186d6:	b25b      	sxtb	r3, r3
 80186d8:	005b      	lsls	r3, r3, #1
 80186da:	b25b      	sxtb	r3, r3
 80186dc:	4313      	orrs	r3, r2
 80186de:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 80186e0:	793b      	ldrb	r3, [r7, #4]
 80186e2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80186e6:	b2db      	uxtb	r3, r3
 80186e8:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80186ea:	4313      	orrs	r3, r2
 80186ec:	b25b      	sxtb	r3, r3
 80186ee:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80186f0:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 80186f2:	f107 030f 	add.w	r3, r7, #15
 80186f6:	2201      	movs	r2, #1
 80186f8:	4619      	mov	r1, r3
 80186fa:	2084      	movs	r0, #132	@ 0x84
 80186fc:	f000 fe3e 	bl	801937c <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8018700:	4b03      	ldr	r3, [pc, #12]	@ (8018710 <SUBGRF_SetSleep+0x64>)
 8018702:	2200      	movs	r2, #0
 8018704:	701a      	strb	r2, [r3, #0]
}
 8018706:	bf00      	nop
 8018708:	3710      	adds	r7, #16
 801870a:	46bd      	mov	sp, r7
 801870c:	bd80      	pop	{r7, pc}
 801870e:	bf00      	nop
 8018710:	200013c8 	.word	0x200013c8

08018714 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8018714:	b580      	push	{r7, lr}
 8018716:	b082      	sub	sp, #8
 8018718:	af00      	add	r7, sp, #0
 801871a:	4603      	mov	r3, r0
 801871c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 801871e:	1dfb      	adds	r3, r7, #7
 8018720:	2201      	movs	r2, #1
 8018722:	4619      	mov	r1, r3
 8018724:	2080      	movs	r0, #128	@ 0x80
 8018726:	f000 fe29 	bl	801937c <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 801872a:	79fb      	ldrb	r3, [r7, #7]
 801872c:	2b00      	cmp	r3, #0
 801872e:	d103      	bne.n	8018738 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8018730:	4b05      	ldr	r3, [pc, #20]	@ (8018748 <SUBGRF_SetStandby+0x34>)
 8018732:	2201      	movs	r2, #1
 8018734:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8018736:	e002      	b.n	801873e <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8018738:	4b03      	ldr	r3, [pc, #12]	@ (8018748 <SUBGRF_SetStandby+0x34>)
 801873a:	2202      	movs	r2, #2
 801873c:	701a      	strb	r2, [r3, #0]
}
 801873e:	bf00      	nop
 8018740:	3708      	adds	r7, #8
 8018742:	46bd      	mov	sp, r7
 8018744:	bd80      	pop	{r7, pc}
 8018746:	bf00      	nop
 8018748:	200013c8 	.word	0x200013c8

0801874c <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 801874c:	b580      	push	{r7, lr}
 801874e:	b084      	sub	sp, #16
 8018750:	af00      	add	r7, sp, #0
 8018752:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8018754:	4b0c      	ldr	r3, [pc, #48]	@ (8018788 <SUBGRF_SetTx+0x3c>)
 8018756:	2204      	movs	r2, #4
 8018758:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801875a:	687b      	ldr	r3, [r7, #4]
 801875c:	0c1b      	lsrs	r3, r3, #16
 801875e:	b2db      	uxtb	r3, r3
 8018760:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018762:	687b      	ldr	r3, [r7, #4]
 8018764:	0a1b      	lsrs	r3, r3, #8
 8018766:	b2db      	uxtb	r3, r3
 8018768:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801876a:	687b      	ldr	r3, [r7, #4]
 801876c:	b2db      	uxtb	r3, r3
 801876e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8018770:	f107 030c 	add.w	r3, r7, #12
 8018774:	2203      	movs	r2, #3
 8018776:	4619      	mov	r1, r3
 8018778:	2083      	movs	r0, #131	@ 0x83
 801877a:	f000 fdff 	bl	801937c <SUBGRF_WriteCommand>
}
 801877e:	bf00      	nop
 8018780:	3710      	adds	r7, #16
 8018782:	46bd      	mov	sp, r7
 8018784:	bd80      	pop	{r7, pc}
 8018786:	bf00      	nop
 8018788:	200013c8 	.word	0x200013c8

0801878c <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 801878c:	b580      	push	{r7, lr}
 801878e:	b084      	sub	sp, #16
 8018790:	af00      	add	r7, sp, #0
 8018792:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8018794:	4b0c      	ldr	r3, [pc, #48]	@ (80187c8 <SUBGRF_SetRx+0x3c>)
 8018796:	2205      	movs	r2, #5
 8018798:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801879a:	687b      	ldr	r3, [r7, #4]
 801879c:	0c1b      	lsrs	r3, r3, #16
 801879e:	b2db      	uxtb	r3, r3
 80187a0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80187a2:	687b      	ldr	r3, [r7, #4]
 80187a4:	0a1b      	lsrs	r3, r3, #8
 80187a6:	b2db      	uxtb	r3, r3
 80187a8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80187aa:	687b      	ldr	r3, [r7, #4]
 80187ac:	b2db      	uxtb	r3, r3
 80187ae:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80187b0:	f107 030c 	add.w	r3, r7, #12
 80187b4:	2203      	movs	r2, #3
 80187b6:	4619      	mov	r1, r3
 80187b8:	2082      	movs	r0, #130	@ 0x82
 80187ba:	f000 fddf 	bl	801937c <SUBGRF_WriteCommand>
}
 80187be:	bf00      	nop
 80187c0:	3710      	adds	r7, #16
 80187c2:	46bd      	mov	sp, r7
 80187c4:	bd80      	pop	{r7, pc}
 80187c6:	bf00      	nop
 80187c8:	200013c8 	.word	0x200013c8

080187cc <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 80187cc:	b580      	push	{r7, lr}
 80187ce:	b084      	sub	sp, #16
 80187d0:	af00      	add	r7, sp, #0
 80187d2:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 80187d4:	4b0e      	ldr	r3, [pc, #56]	@ (8018810 <SUBGRF_SetRxBoosted+0x44>)
 80187d6:	2205      	movs	r2, #5
 80187d8:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 80187da:	2197      	movs	r1, #151	@ 0x97
 80187dc:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 80187e0:	f000 fd1c 	bl	801921c <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80187e4:	687b      	ldr	r3, [r7, #4]
 80187e6:	0c1b      	lsrs	r3, r3, #16
 80187e8:	b2db      	uxtb	r3, r3
 80187ea:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80187ec:	687b      	ldr	r3, [r7, #4]
 80187ee:	0a1b      	lsrs	r3, r3, #8
 80187f0:	b2db      	uxtb	r3, r3
 80187f2:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80187f4:	687b      	ldr	r3, [r7, #4]
 80187f6:	b2db      	uxtb	r3, r3
 80187f8:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80187fa:	f107 030c 	add.w	r3, r7, #12
 80187fe:	2203      	movs	r2, #3
 8018800:	4619      	mov	r1, r3
 8018802:	2082      	movs	r0, #130	@ 0x82
 8018804:	f000 fdba 	bl	801937c <SUBGRF_WriteCommand>
}
 8018808:	bf00      	nop
 801880a:	3710      	adds	r7, #16
 801880c:	46bd      	mov	sp, r7
 801880e:	bd80      	pop	{r7, pc}
 8018810:	200013c8 	.word	0x200013c8

08018814 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8018814:	b580      	push	{r7, lr}
 8018816:	b084      	sub	sp, #16
 8018818:	af00      	add	r7, sp, #0
 801881a:	6078      	str	r0, [r7, #4]
 801881c:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 801881e:	687b      	ldr	r3, [r7, #4]
 8018820:	0c1b      	lsrs	r3, r3, #16
 8018822:	b2db      	uxtb	r3, r3
 8018824:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8018826:	687b      	ldr	r3, [r7, #4]
 8018828:	0a1b      	lsrs	r3, r3, #8
 801882a:	b2db      	uxtb	r3, r3
 801882c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 801882e:	687b      	ldr	r3, [r7, #4]
 8018830:	b2db      	uxtb	r3, r3
 8018832:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8018834:	683b      	ldr	r3, [r7, #0]
 8018836:	0c1b      	lsrs	r3, r3, #16
 8018838:	b2db      	uxtb	r3, r3
 801883a:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801883c:	683b      	ldr	r3, [r7, #0]
 801883e:	0a1b      	lsrs	r3, r3, #8
 8018840:	b2db      	uxtb	r3, r3
 8018842:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8018844:	683b      	ldr	r3, [r7, #0]
 8018846:	b2db      	uxtb	r3, r3
 8018848:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 801884a:	f107 0308 	add.w	r3, r7, #8
 801884e:	2206      	movs	r2, #6
 8018850:	4619      	mov	r1, r3
 8018852:	2094      	movs	r0, #148	@ 0x94
 8018854:	f000 fd92 	bl	801937c <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8018858:	4b03      	ldr	r3, [pc, #12]	@ (8018868 <SUBGRF_SetRxDutyCycle+0x54>)
 801885a:	2206      	movs	r2, #6
 801885c:	701a      	strb	r2, [r3, #0]
}
 801885e:	bf00      	nop
 8018860:	3710      	adds	r7, #16
 8018862:	46bd      	mov	sp, r7
 8018864:	bd80      	pop	{r7, pc}
 8018866:	bf00      	nop
 8018868:	200013c8 	.word	0x200013c8

0801886c <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 801886c:	b580      	push	{r7, lr}
 801886e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8018870:	2200      	movs	r2, #0
 8018872:	2100      	movs	r1, #0
 8018874:	20c5      	movs	r0, #197	@ 0xc5
 8018876:	f000 fd81 	bl	801937c <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 801887a:	4b02      	ldr	r3, [pc, #8]	@ (8018884 <SUBGRF_SetCad+0x18>)
 801887c:	2207      	movs	r2, #7
 801887e:	701a      	strb	r2, [r3, #0]
}
 8018880:	bf00      	nop
 8018882:	bd80      	pop	{r7, pc}
 8018884:	200013c8 	.word	0x200013c8

08018888 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8018888:	b580      	push	{r7, lr}
 801888a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801888c:	2200      	movs	r2, #0
 801888e:	2100      	movs	r1, #0
 8018890:	20d1      	movs	r0, #209	@ 0xd1
 8018892:	f000 fd73 	bl	801937c <SUBGRF_WriteCommand>
}
 8018896:	bf00      	nop
 8018898:	bd80      	pop	{r7, pc}

0801889a <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 801889a:	b580      	push	{r7, lr}
 801889c:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 801889e:	2200      	movs	r2, #0
 80188a0:	2100      	movs	r1, #0
 80188a2:	20d2      	movs	r0, #210	@ 0xd2
 80188a4:	f000 fd6a 	bl	801937c <SUBGRF_WriteCommand>
}
 80188a8:	bf00      	nop
 80188aa:	bd80      	pop	{r7, pc}

080188ac <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 80188ac:	b580      	push	{r7, lr}
 80188ae:	b082      	sub	sp, #8
 80188b0:	af00      	add	r7, sp, #0
 80188b2:	4603      	mov	r3, r0
 80188b4:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 80188b6:	1dfb      	adds	r3, r7, #7
 80188b8:	2201      	movs	r2, #1
 80188ba:	4619      	mov	r1, r3
 80188bc:	209f      	movs	r0, #159	@ 0x9f
 80188be:	f000 fd5d 	bl	801937c <SUBGRF_WriteCommand>
}
 80188c2:	bf00      	nop
 80188c4:	3708      	adds	r7, #8
 80188c6:	46bd      	mov	sp, r7
 80188c8:	bd80      	pop	{r7, pc}

080188ca <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 80188ca:	b580      	push	{r7, lr}
 80188cc:	b084      	sub	sp, #16
 80188ce:	af00      	add	r7, sp, #0
 80188d0:	4603      	mov	r3, r0
 80188d2:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 80188d4:	1dfb      	adds	r3, r7, #7
 80188d6:	2201      	movs	r2, #1
 80188d8:	4619      	mov	r1, r3
 80188da:	20a0      	movs	r0, #160	@ 0xa0
 80188dc:	f000 fd4e 	bl	801937c <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 80188e0:	79fb      	ldrb	r3, [r7, #7]
 80188e2:	2b3f      	cmp	r3, #63	@ 0x3f
 80188e4:	d91c      	bls.n	8018920 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 80188e6:	79fb      	ldrb	r3, [r7, #7]
 80188e8:	085b      	lsrs	r3, r3, #1
 80188ea:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 80188ec:	2300      	movs	r3, #0
 80188ee:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 80188f0:	2300      	movs	r3, #0
 80188f2:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 80188f4:	e005      	b.n	8018902 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 80188f6:	7bfb      	ldrb	r3, [r7, #15]
 80188f8:	089b      	lsrs	r3, r3, #2
 80188fa:	73fb      	strb	r3, [r7, #15]
            exp++;
 80188fc:	7bbb      	ldrb	r3, [r7, #14]
 80188fe:	3301      	adds	r3, #1
 8018900:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 8018902:	7bfb      	ldrb	r3, [r7, #15]
 8018904:	2b1f      	cmp	r3, #31
 8018906:	d8f6      	bhi.n	80188f6 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8018908:	7bfb      	ldrb	r3, [r7, #15]
 801890a:	00db      	lsls	r3, r3, #3
 801890c:	b2da      	uxtb	r2, r3
 801890e:	7bbb      	ldrb	r3, [r7, #14]
 8018910:	4413      	add	r3, r2
 8018912:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8018914:	7b7b      	ldrb	r3, [r7, #13]
 8018916:	4619      	mov	r1, r3
 8018918:	f240 7006 	movw	r0, #1798	@ 0x706
 801891c:	f000 fc7e 	bl	801921c <SUBGRF_WriteRegister>
    }
}
 8018920:	bf00      	nop
 8018922:	3710      	adds	r7, #16
 8018924:	46bd      	mov	sp, r7
 8018926:	bd80      	pop	{r7, pc}

08018928 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 8018928:	b580      	push	{r7, lr}
 801892a:	b082      	sub	sp, #8
 801892c:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 801892e:	f7e9 fecc 	bl	80026ca <RBI_IsDCDC>
 8018932:	4603      	mov	r3, r0
 8018934:	2b01      	cmp	r3, #1
 8018936:	d102      	bne.n	801893e <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8018938:	2301      	movs	r3, #1
 801893a:	71fb      	strb	r3, [r7, #7]
 801893c:	e001      	b.n	8018942 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 801893e:	2300      	movs	r3, #0
 8018940:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8018942:	1dfb      	adds	r3, r7, #7
 8018944:	2201      	movs	r2, #1
 8018946:	4619      	mov	r1, r3
 8018948:	2096      	movs	r0, #150	@ 0x96
 801894a:	f000 fd17 	bl	801937c <SUBGRF_WriteCommand>
}
 801894e:	bf00      	nop
 8018950:	3708      	adds	r7, #8
 8018952:	46bd      	mov	sp, r7
 8018954:	bd80      	pop	{r7, pc}

08018956 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8018956:	b580      	push	{r7, lr}
 8018958:	b084      	sub	sp, #16
 801895a:	af00      	add	r7, sp, #0
 801895c:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801895e:	793b      	ldrb	r3, [r7, #4]
 8018960:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8018964:	b2db      	uxtb	r3, r3
 8018966:	b25b      	sxtb	r3, r3
 8018968:	019b      	lsls	r3, r3, #6
 801896a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801896c:	793b      	ldrb	r3, [r7, #4]
 801896e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8018972:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8018974:	b25b      	sxtb	r3, r3
 8018976:	015b      	lsls	r3, r3, #5
 8018978:	b25b      	sxtb	r3, r3
 801897a:	4313      	orrs	r3, r2
 801897c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801897e:	793b      	ldrb	r3, [r7, #4]
 8018980:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8018984:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8018986:	b25b      	sxtb	r3, r3
 8018988:	011b      	lsls	r3, r3, #4
 801898a:	b25b      	sxtb	r3, r3
 801898c:	4313      	orrs	r3, r2
 801898e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8018990:	793b      	ldrb	r3, [r7, #4]
 8018992:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8018996:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8018998:	b25b      	sxtb	r3, r3
 801899a:	00db      	lsls	r3, r3, #3
 801899c:	b25b      	sxtb	r3, r3
 801899e:	4313      	orrs	r3, r2
 80189a0:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80189a2:	793b      	ldrb	r3, [r7, #4]
 80189a4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80189a8:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80189aa:	b25b      	sxtb	r3, r3
 80189ac:	009b      	lsls	r3, r3, #2
 80189ae:	b25b      	sxtb	r3, r3
 80189b0:	4313      	orrs	r3, r2
 80189b2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80189b4:	793b      	ldrb	r3, [r7, #4]
 80189b6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80189ba:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80189bc:	b25b      	sxtb	r3, r3
 80189be:	005b      	lsls	r3, r3, #1
 80189c0:	b25b      	sxtb	r3, r3
 80189c2:	4313      	orrs	r3, r2
 80189c4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 80189c6:	793b      	ldrb	r3, [r7, #4]
 80189c8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80189cc:	b2db      	uxtb	r3, r3
 80189ce:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80189d0:	4313      	orrs	r3, r2
 80189d2:	b25b      	sxtb	r3, r3
 80189d4:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80189d6:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 80189d8:	f107 030f 	add.w	r3, r7, #15
 80189dc:	2201      	movs	r2, #1
 80189de:	4619      	mov	r1, r3
 80189e0:	2089      	movs	r0, #137	@ 0x89
 80189e2:	f000 fccb 	bl	801937c <SUBGRF_WriteCommand>
}
 80189e6:	bf00      	nop
 80189e8:	3710      	adds	r7, #16
 80189ea:	46bd      	mov	sp, r7
 80189ec:	bd80      	pop	{r7, pc}
	...

080189f0 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 80189f0:	b580      	push	{r7, lr}
 80189f2:	b084      	sub	sp, #16
 80189f4:	af00      	add	r7, sp, #0
 80189f6:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 80189f8:	687b      	ldr	r3, [r7, #4]
 80189fa:	4a1d      	ldr	r2, [pc, #116]	@ (8018a70 <SUBGRF_CalibrateImage+0x80>)
 80189fc:	4293      	cmp	r3, r2
 80189fe:	d904      	bls.n	8018a0a <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8018a00:	23e1      	movs	r3, #225	@ 0xe1
 8018a02:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8018a04:	23e9      	movs	r3, #233	@ 0xe9
 8018a06:	737b      	strb	r3, [r7, #13]
 8018a08:	e027      	b.n	8018a5a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 8018a0a:	687b      	ldr	r3, [r7, #4]
 8018a0c:	4a19      	ldr	r2, [pc, #100]	@ (8018a74 <SUBGRF_CalibrateImage+0x84>)
 8018a0e:	4293      	cmp	r3, r2
 8018a10:	d904      	bls.n	8018a1c <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8018a12:	23d7      	movs	r3, #215	@ 0xd7
 8018a14:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 8018a16:	23db      	movs	r3, #219	@ 0xdb
 8018a18:	737b      	strb	r3, [r7, #13]
 8018a1a:	e01e      	b.n	8018a5a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 8018a1c:	687b      	ldr	r3, [r7, #4]
 8018a1e:	4a16      	ldr	r2, [pc, #88]	@ (8018a78 <SUBGRF_CalibrateImage+0x88>)
 8018a20:	4293      	cmp	r3, r2
 8018a22:	d904      	bls.n	8018a2e <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8018a24:	23c1      	movs	r3, #193	@ 0xc1
 8018a26:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8018a28:	23c5      	movs	r3, #197	@ 0xc5
 8018a2a:	737b      	strb	r3, [r7, #13]
 8018a2c:	e015      	b.n	8018a5a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 8018a2e:	687b      	ldr	r3, [r7, #4]
 8018a30:	4a12      	ldr	r2, [pc, #72]	@ (8018a7c <SUBGRF_CalibrateImage+0x8c>)
 8018a32:	4293      	cmp	r3, r2
 8018a34:	d904      	bls.n	8018a40 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 8018a36:	2375      	movs	r3, #117	@ 0x75
 8018a38:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8018a3a:	2381      	movs	r3, #129	@ 0x81
 8018a3c:	737b      	strb	r3, [r7, #13]
 8018a3e:	e00c      	b.n	8018a5a <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 8018a40:	687b      	ldr	r3, [r7, #4]
 8018a42:	4a0f      	ldr	r2, [pc, #60]	@ (8018a80 <SUBGRF_CalibrateImage+0x90>)
 8018a44:	4293      	cmp	r3, r2
 8018a46:	d904      	bls.n	8018a52 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 8018a48:	236b      	movs	r3, #107	@ 0x6b
 8018a4a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8018a4c:	236f      	movs	r3, #111	@ 0x6f
 8018a4e:	737b      	strb	r3, [r7, #13]
 8018a50:	e003      	b.n	8018a5a <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 8018a52:	2329      	movs	r3, #41	@ 0x29
 8018a54:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 8018a56:	232b      	movs	r3, #43	@ 0x2b
 8018a58:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8018a5a:	f107 030c 	add.w	r3, r7, #12
 8018a5e:	2202      	movs	r2, #2
 8018a60:	4619      	mov	r1, r3
 8018a62:	2098      	movs	r0, #152	@ 0x98
 8018a64:	f000 fc8a 	bl	801937c <SUBGRF_WriteCommand>
}
 8018a68:	bf00      	nop
 8018a6a:	3710      	adds	r7, #16
 8018a6c:	46bd      	mov	sp, r7
 8018a6e:	bd80      	pop	{r7, pc}
 8018a70:	35a4e900 	.word	0x35a4e900
 8018a74:	32a9f880 	.word	0x32a9f880
 8018a78:	2de54480 	.word	0x2de54480
 8018a7c:	1b6b0b00 	.word	0x1b6b0b00
 8018a80:	1954fc40 	.word	0x1954fc40

08018a84 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8018a84:	b590      	push	{r4, r7, lr}
 8018a86:	b085      	sub	sp, #20
 8018a88:	af00      	add	r7, sp, #0
 8018a8a:	4604      	mov	r4, r0
 8018a8c:	4608      	mov	r0, r1
 8018a8e:	4611      	mov	r1, r2
 8018a90:	461a      	mov	r2, r3
 8018a92:	4623      	mov	r3, r4
 8018a94:	71fb      	strb	r3, [r7, #7]
 8018a96:	4603      	mov	r3, r0
 8018a98:	71bb      	strb	r3, [r7, #6]
 8018a9a:	460b      	mov	r3, r1
 8018a9c:	717b      	strb	r3, [r7, #5]
 8018a9e:	4613      	mov	r3, r2
 8018aa0:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 8018aa2:	79fb      	ldrb	r3, [r7, #7]
 8018aa4:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8018aa6:	79bb      	ldrb	r3, [r7, #6]
 8018aa8:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8018aaa:	797b      	ldrb	r3, [r7, #5]
 8018aac:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8018aae:	793b      	ldrb	r3, [r7, #4]
 8018ab0:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8018ab2:	f107 030c 	add.w	r3, r7, #12
 8018ab6:	2204      	movs	r2, #4
 8018ab8:	4619      	mov	r1, r3
 8018aba:	2095      	movs	r0, #149	@ 0x95
 8018abc:	f000 fc5e 	bl	801937c <SUBGRF_WriteCommand>
}
 8018ac0:	bf00      	nop
 8018ac2:	3714      	adds	r7, #20
 8018ac4:	46bd      	mov	sp, r7
 8018ac6:	bd90      	pop	{r4, r7, pc}

08018ac8 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8018ac8:	b590      	push	{r4, r7, lr}
 8018aca:	b085      	sub	sp, #20
 8018acc:	af00      	add	r7, sp, #0
 8018ace:	4604      	mov	r4, r0
 8018ad0:	4608      	mov	r0, r1
 8018ad2:	4611      	mov	r1, r2
 8018ad4:	461a      	mov	r2, r3
 8018ad6:	4623      	mov	r3, r4
 8018ad8:	80fb      	strh	r3, [r7, #6]
 8018ada:	4603      	mov	r3, r0
 8018adc:	80bb      	strh	r3, [r7, #4]
 8018ade:	460b      	mov	r3, r1
 8018ae0:	807b      	strh	r3, [r7, #2]
 8018ae2:	4613      	mov	r3, r2
 8018ae4:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8018ae6:	88fb      	ldrh	r3, [r7, #6]
 8018ae8:	0a1b      	lsrs	r3, r3, #8
 8018aea:	b29b      	uxth	r3, r3
 8018aec:	b2db      	uxtb	r3, r3
 8018aee:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8018af0:	88fb      	ldrh	r3, [r7, #6]
 8018af2:	b2db      	uxtb	r3, r3
 8018af4:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8018af6:	88bb      	ldrh	r3, [r7, #4]
 8018af8:	0a1b      	lsrs	r3, r3, #8
 8018afa:	b29b      	uxth	r3, r3
 8018afc:	b2db      	uxtb	r3, r3
 8018afe:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8018b00:	88bb      	ldrh	r3, [r7, #4]
 8018b02:	b2db      	uxtb	r3, r3
 8018b04:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8018b06:	887b      	ldrh	r3, [r7, #2]
 8018b08:	0a1b      	lsrs	r3, r3, #8
 8018b0a:	b29b      	uxth	r3, r3
 8018b0c:	b2db      	uxtb	r3, r3
 8018b0e:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8018b10:	887b      	ldrh	r3, [r7, #2]
 8018b12:	b2db      	uxtb	r3, r3
 8018b14:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8018b16:	883b      	ldrh	r3, [r7, #0]
 8018b18:	0a1b      	lsrs	r3, r3, #8
 8018b1a:	b29b      	uxth	r3, r3
 8018b1c:	b2db      	uxtb	r3, r3
 8018b1e:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8018b20:	883b      	ldrh	r3, [r7, #0]
 8018b22:	b2db      	uxtb	r3, r3
 8018b24:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8018b26:	f107 0308 	add.w	r3, r7, #8
 8018b2a:	2208      	movs	r2, #8
 8018b2c:	4619      	mov	r1, r3
 8018b2e:	2008      	movs	r0, #8
 8018b30:	f000 fc24 	bl	801937c <SUBGRF_WriteCommand>
}
 8018b34:	bf00      	nop
 8018b36:	3714      	adds	r7, #20
 8018b38:	46bd      	mov	sp, r7
 8018b3a:	bd90      	pop	{r4, r7, pc}

08018b3c <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8018b3c:	b580      	push	{r7, lr}
 8018b3e:	b084      	sub	sp, #16
 8018b40:	af00      	add	r7, sp, #0
 8018b42:	4603      	mov	r3, r0
 8018b44:	6039      	str	r1, [r7, #0]
 8018b46:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8018b48:	79fb      	ldrb	r3, [r7, #7]
 8018b4a:	f003 0307 	and.w	r3, r3, #7
 8018b4e:	b2db      	uxtb	r3, r3
 8018b50:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018b52:	683b      	ldr	r3, [r7, #0]
 8018b54:	0c1b      	lsrs	r3, r3, #16
 8018b56:	b2db      	uxtb	r3, r3
 8018b58:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018b5a:	683b      	ldr	r3, [r7, #0]
 8018b5c:	0a1b      	lsrs	r3, r3, #8
 8018b5e:	b2db      	uxtb	r3, r3
 8018b60:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8018b62:	683b      	ldr	r3, [r7, #0]
 8018b64:	b2db      	uxtb	r3, r3
 8018b66:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8018b68:	f107 030c 	add.w	r3, r7, #12
 8018b6c:	2204      	movs	r2, #4
 8018b6e:	4619      	mov	r1, r3
 8018b70:	2097      	movs	r0, #151	@ 0x97
 8018b72:	f000 fc03 	bl	801937c <SUBGRF_WriteCommand>
}
 8018b76:	bf00      	nop
 8018b78:	3710      	adds	r7, #16
 8018b7a:	46bd      	mov	sp, r7
 8018b7c:	bd80      	pop	{r7, pc}
	...

08018b80 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 8018b80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8018b84:	b084      	sub	sp, #16
 8018b86:	af00      	add	r7, sp, #0
 8018b88:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8018b8a:	2300      	movs	r3, #0
 8018b8c:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8018b8e:	4b1d      	ldr	r3, [pc, #116]	@ (8018c04 <SUBGRF_SetRfFrequency+0x84>)
 8018b90:	781b      	ldrb	r3, [r3, #0]
 8018b92:	f083 0301 	eor.w	r3, r3, #1
 8018b96:	b2db      	uxtb	r3, r3
 8018b98:	2b00      	cmp	r3, #0
 8018b9a:	d005      	beq.n	8018ba8 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 8018b9c:	6878      	ldr	r0, [r7, #4]
 8018b9e:	f7ff ff27 	bl	80189f0 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8018ba2:	4b18      	ldr	r3, [pc, #96]	@ (8018c04 <SUBGRF_SetRfFrequency+0x84>)
 8018ba4:	2201      	movs	r2, #1
 8018ba6:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8018ba8:	687b      	ldr	r3, [r7, #4]
 8018baa:	2200      	movs	r2, #0
 8018bac:	461c      	mov	r4, r3
 8018bae:	4615      	mov	r5, r2
 8018bb0:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8018bb4:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8018bb8:	4a13      	ldr	r2, [pc, #76]	@ (8018c08 <SUBGRF_SetRfFrequency+0x88>)
 8018bba:	f04f 0300 	mov.w	r3, #0
 8018bbe:	4640      	mov	r0, r8
 8018bc0:	4649      	mov	r1, r9
 8018bc2:	f7e8 f8bb 	bl	8000d3c <__aeabi_uldivmod>
 8018bc6:	4602      	mov	r2, r0
 8018bc8:	460b      	mov	r3, r1
 8018bca:	4613      	mov	r3, r2
 8018bcc:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8018bce:	68fb      	ldr	r3, [r7, #12]
 8018bd0:	0e1b      	lsrs	r3, r3, #24
 8018bd2:	b2db      	uxtb	r3, r3
 8018bd4:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8018bd6:	68fb      	ldr	r3, [r7, #12]
 8018bd8:	0c1b      	lsrs	r3, r3, #16
 8018bda:	b2db      	uxtb	r3, r3
 8018bdc:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8018bde:	68fb      	ldr	r3, [r7, #12]
 8018be0:	0a1b      	lsrs	r3, r3, #8
 8018be2:	b2db      	uxtb	r3, r3
 8018be4:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8018be6:	68fb      	ldr	r3, [r7, #12]
 8018be8:	b2db      	uxtb	r3, r3
 8018bea:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8018bec:	f107 0308 	add.w	r3, r7, #8
 8018bf0:	2204      	movs	r2, #4
 8018bf2:	4619      	mov	r1, r3
 8018bf4:	2086      	movs	r0, #134	@ 0x86
 8018bf6:	f000 fbc1 	bl	801937c <SUBGRF_WriteCommand>
}
 8018bfa:	bf00      	nop
 8018bfc:	3710      	adds	r7, #16
 8018bfe:	46bd      	mov	sp, r7
 8018c00:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8018c04:	200013d0 	.word	0x200013d0
 8018c08:	01e84800 	.word	0x01e84800

08018c0c <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8018c0c:	b580      	push	{r7, lr}
 8018c0e:	b082      	sub	sp, #8
 8018c10:	af00      	add	r7, sp, #0
 8018c12:	4603      	mov	r3, r0
 8018c14:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 8018c16:	79fa      	ldrb	r2, [r7, #7]
 8018c18:	4b09      	ldr	r3, [pc, #36]	@ (8018c40 <SUBGRF_SetPacketType+0x34>)
 8018c1a:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8018c1c:	79fb      	ldrb	r3, [r7, #7]
 8018c1e:	2b00      	cmp	r3, #0
 8018c20:	d104      	bne.n	8018c2c <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8018c22:	2100      	movs	r1, #0
 8018c24:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8018c28:	f000 faf8 	bl	801921c <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8018c2c:	1dfb      	adds	r3, r7, #7
 8018c2e:	2201      	movs	r2, #1
 8018c30:	4619      	mov	r1, r3
 8018c32:	208a      	movs	r0, #138	@ 0x8a
 8018c34:	f000 fba2 	bl	801937c <SUBGRF_WriteCommand>
}
 8018c38:	bf00      	nop
 8018c3a:	3708      	adds	r7, #8
 8018c3c:	46bd      	mov	sp, r7
 8018c3e:	bd80      	pop	{r7, pc}
 8018c40:	200013c9 	.word	0x200013c9

08018c44 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8018c44:	b480      	push	{r7}
 8018c46:	af00      	add	r7, sp, #0
    return PacketType;
 8018c48:	4b02      	ldr	r3, [pc, #8]	@ (8018c54 <SUBGRF_GetPacketType+0x10>)
 8018c4a:	781b      	ldrb	r3, [r3, #0]
}
 8018c4c:	4618      	mov	r0, r3
 8018c4e:	46bd      	mov	sp, r7
 8018c50:	bc80      	pop	{r7}
 8018c52:	4770      	bx	lr
 8018c54:	200013c9 	.word	0x200013c9

08018c58 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 8018c58:	b580      	push	{r7, lr}
 8018c5a:	b084      	sub	sp, #16
 8018c5c:	af00      	add	r7, sp, #0
 8018c5e:	4603      	mov	r3, r0
 8018c60:	71fb      	strb	r3, [r7, #7]
 8018c62:	460b      	mov	r3, r1
 8018c64:	71bb      	strb	r3, [r7, #6]
 8018c66:	4613      	mov	r3, r2
 8018c68:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 8018c6a:	79fb      	ldrb	r3, [r7, #7]
 8018c6c:	2b01      	cmp	r3, #1
 8018c6e:	d149      	bne.n	8018d04 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8018c70:	2000      	movs	r0, #0
 8018c72:	f7e9 fd31 	bl	80026d8 <RBI_GetRFOMaxPowerConfig>
 8018c76:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 8018c78:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018c7c:	68fa      	ldr	r2, [r7, #12]
 8018c7e:	429a      	cmp	r2, r3
 8018c80:	da01      	bge.n	8018c86 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 8018c82:	68fb      	ldr	r3, [r7, #12]
 8018c84:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 8018c86:	68fb      	ldr	r3, [r7, #12]
 8018c88:	2b0e      	cmp	r3, #14
 8018c8a:	d10e      	bne.n	8018caa <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8018c8c:	2301      	movs	r3, #1
 8018c8e:	2201      	movs	r2, #1
 8018c90:	2100      	movs	r1, #0
 8018c92:	2004      	movs	r0, #4
 8018c94:	f7ff fef6 	bl	8018a84 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8018c98:	79ba      	ldrb	r2, [r7, #6]
 8018c9a:	68fb      	ldr	r3, [r7, #12]
 8018c9c:	b2db      	uxtb	r3, r3
 8018c9e:	1ad3      	subs	r3, r2, r3
 8018ca0:	b2db      	uxtb	r3, r3
 8018ca2:	330e      	adds	r3, #14
 8018ca4:	b2db      	uxtb	r3, r3
 8018ca6:	71bb      	strb	r3, [r7, #6]
 8018ca8:	e01f      	b.n	8018cea <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 8018caa:	68fb      	ldr	r3, [r7, #12]
 8018cac:	2b0a      	cmp	r3, #10
 8018cae:	d10e      	bne.n	8018cce <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8018cb0:	2301      	movs	r3, #1
 8018cb2:	2201      	movs	r2, #1
 8018cb4:	2100      	movs	r1, #0
 8018cb6:	2001      	movs	r0, #1
 8018cb8:	f7ff fee4 	bl	8018a84 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8018cbc:	79ba      	ldrb	r2, [r7, #6]
 8018cbe:	68fb      	ldr	r3, [r7, #12]
 8018cc0:	b2db      	uxtb	r3, r3
 8018cc2:	1ad3      	subs	r3, r2, r3
 8018cc4:	b2db      	uxtb	r3, r3
 8018cc6:	330d      	adds	r3, #13
 8018cc8:	b2db      	uxtb	r3, r3
 8018cca:	71bb      	strb	r3, [r7, #6]
 8018ccc:	e00d      	b.n	8018cea <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 8018cce:	2301      	movs	r3, #1
 8018cd0:	2201      	movs	r2, #1
 8018cd2:	2100      	movs	r1, #0
 8018cd4:	2007      	movs	r0, #7
 8018cd6:	f7ff fed5 	bl	8018a84 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8018cda:	79ba      	ldrb	r2, [r7, #6]
 8018cdc:	68fb      	ldr	r3, [r7, #12]
 8018cde:	b2db      	uxtb	r3, r3
 8018ce0:	1ad3      	subs	r3, r2, r3
 8018ce2:	b2db      	uxtb	r3, r3
 8018ce4:	330e      	adds	r3, #14
 8018ce6:	b2db      	uxtb	r3, r3
 8018ce8:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 8018cea:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018cee:	f113 0f11 	cmn.w	r3, #17
 8018cf2:	da01      	bge.n	8018cf8 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 8018cf4:	23ef      	movs	r3, #239	@ 0xef
 8018cf6:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8018cf8:	2118      	movs	r1, #24
 8018cfa:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8018cfe:	f000 fa8d 	bl	801921c <SUBGRF_WriteRegister>
 8018d02:	e067      	b.n	8018dd4 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8018d04:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8018d08:	f000 fa9c 	bl	8019244 <SUBGRF_ReadRegister>
 8018d0c:	4603      	mov	r3, r0
 8018d0e:	f043 031e 	orr.w	r3, r3, #30
 8018d12:	b2db      	uxtb	r3, r3
 8018d14:	4619      	mov	r1, r3
 8018d16:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8018d1a:	f000 fa7f 	bl	801921c <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8018d1e:	2001      	movs	r0, #1
 8018d20:	f7e9 fcda 	bl	80026d8 <RBI_GetRFOMaxPowerConfig>
 8018d24:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 8018d26:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018d2a:	68fa      	ldr	r2, [r7, #12]
 8018d2c:	429a      	cmp	r2, r3
 8018d2e:	da01      	bge.n	8018d34 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 8018d30:	68fb      	ldr	r3, [r7, #12]
 8018d32:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 8018d34:	68fb      	ldr	r3, [r7, #12]
 8018d36:	2b14      	cmp	r3, #20
 8018d38:	d10e      	bne.n	8018d58 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8018d3a:	2301      	movs	r3, #1
 8018d3c:	2200      	movs	r2, #0
 8018d3e:	2105      	movs	r1, #5
 8018d40:	2003      	movs	r0, #3
 8018d42:	f7ff fe9f 	bl	8018a84 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8018d46:	79ba      	ldrb	r2, [r7, #6]
 8018d48:	68fb      	ldr	r3, [r7, #12]
 8018d4a:	b2db      	uxtb	r3, r3
 8018d4c:	1ad3      	subs	r3, r2, r3
 8018d4e:	b2db      	uxtb	r3, r3
 8018d50:	3316      	adds	r3, #22
 8018d52:	b2db      	uxtb	r3, r3
 8018d54:	71bb      	strb	r3, [r7, #6]
 8018d56:	e031      	b.n	8018dbc <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 8018d58:	68fb      	ldr	r3, [r7, #12]
 8018d5a:	2b11      	cmp	r3, #17
 8018d5c:	d10e      	bne.n	8018d7c <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8018d5e:	2301      	movs	r3, #1
 8018d60:	2200      	movs	r2, #0
 8018d62:	2103      	movs	r1, #3
 8018d64:	2002      	movs	r0, #2
 8018d66:	f7ff fe8d 	bl	8018a84 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8018d6a:	79ba      	ldrb	r2, [r7, #6]
 8018d6c:	68fb      	ldr	r3, [r7, #12]
 8018d6e:	b2db      	uxtb	r3, r3
 8018d70:	1ad3      	subs	r3, r2, r3
 8018d72:	b2db      	uxtb	r3, r3
 8018d74:	3316      	adds	r3, #22
 8018d76:	b2db      	uxtb	r3, r3
 8018d78:	71bb      	strb	r3, [r7, #6]
 8018d7a:	e01f      	b.n	8018dbc <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 8018d7c:	68fb      	ldr	r3, [r7, #12]
 8018d7e:	2b0e      	cmp	r3, #14
 8018d80:	d10e      	bne.n	8018da0 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8018d82:	2301      	movs	r3, #1
 8018d84:	2200      	movs	r2, #0
 8018d86:	2102      	movs	r1, #2
 8018d88:	2002      	movs	r0, #2
 8018d8a:	f7ff fe7b 	bl	8018a84 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8018d8e:	79ba      	ldrb	r2, [r7, #6]
 8018d90:	68fb      	ldr	r3, [r7, #12]
 8018d92:	b2db      	uxtb	r3, r3
 8018d94:	1ad3      	subs	r3, r2, r3
 8018d96:	b2db      	uxtb	r3, r3
 8018d98:	330e      	adds	r3, #14
 8018d9a:	b2db      	uxtb	r3, r3
 8018d9c:	71bb      	strb	r3, [r7, #6]
 8018d9e:	e00d      	b.n	8018dbc <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8018da0:	2301      	movs	r3, #1
 8018da2:	2200      	movs	r2, #0
 8018da4:	2107      	movs	r1, #7
 8018da6:	2004      	movs	r0, #4
 8018da8:	f7ff fe6c 	bl	8018a84 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8018dac:	79ba      	ldrb	r2, [r7, #6]
 8018dae:	68fb      	ldr	r3, [r7, #12]
 8018db0:	b2db      	uxtb	r3, r3
 8018db2:	1ad3      	subs	r3, r2, r3
 8018db4:	b2db      	uxtb	r3, r3
 8018db6:	3316      	adds	r3, #22
 8018db8:	b2db      	uxtb	r3, r3
 8018dba:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 8018dbc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018dc0:	f113 0f09 	cmn.w	r3, #9
 8018dc4:	da01      	bge.n	8018dca <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 8018dc6:	23f7      	movs	r3, #247	@ 0xf7
 8018dc8:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8018dca:	2138      	movs	r1, #56	@ 0x38
 8018dcc:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8018dd0:	f000 fa24 	bl	801921c <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8018dd4:	79bb      	ldrb	r3, [r7, #6]
 8018dd6:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8018dd8:	797b      	ldrb	r3, [r7, #5]
 8018dda:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8018ddc:	f107 0308 	add.w	r3, r7, #8
 8018de0:	2202      	movs	r2, #2
 8018de2:	4619      	mov	r1, r3
 8018de4:	208e      	movs	r0, #142	@ 0x8e
 8018de6:	f000 fac9 	bl	801937c <SUBGRF_WriteCommand>
}
 8018dea:	bf00      	nop
 8018dec:	3710      	adds	r7, #16
 8018dee:	46bd      	mov	sp, r7
 8018df0:	bd80      	pop	{r7, pc}
	...

08018df4 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8018df4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8018df8:	b086      	sub	sp, #24
 8018dfa:	af00      	add	r7, sp, #0
 8018dfc:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8018dfe:	2300      	movs	r3, #0
 8018e00:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8018e02:	f107 0308 	add.w	r3, r7, #8
 8018e06:	2200      	movs	r2, #0
 8018e08:	601a      	str	r2, [r3, #0]
 8018e0a:	605a      	str	r2, [r3, #4]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	781a      	ldrb	r2, [r3, #0]
 8018e10:	4b5c      	ldr	r3, [pc, #368]	@ (8018f84 <SUBGRF_SetModulationParams+0x190>)
 8018e12:	781b      	ldrb	r3, [r3, #0]
 8018e14:	429a      	cmp	r2, r3
 8018e16:	d004      	beq.n	8018e22 <SUBGRF_SetModulationParams+0x2e>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8018e18:	687b      	ldr	r3, [r7, #4]
 8018e1a:	781b      	ldrb	r3, [r3, #0]
 8018e1c:	4618      	mov	r0, r3
 8018e1e:	f7ff fef5 	bl	8018c0c <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8018e22:	687b      	ldr	r3, [r7, #4]
 8018e24:	781b      	ldrb	r3, [r3, #0]
 8018e26:	2b03      	cmp	r3, #3
 8018e28:	f200 80a5 	bhi.w	8018f76 <SUBGRF_SetModulationParams+0x182>
 8018e2c:	a201      	add	r2, pc, #4	@ (adr r2, 8018e34 <SUBGRF_SetModulationParams+0x40>)
 8018e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018e32:	bf00      	nop
 8018e34:	08018e45 	.word	0x08018e45
 8018e38:	08018f05 	.word	0x08018f05
 8018e3c:	08018ec7 	.word	0x08018ec7
 8018e40:	08018f33 	.word	0x08018f33
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8018e44:	2308      	movs	r3, #8
 8018e46:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8018e48:	687b      	ldr	r3, [r7, #4]
 8018e4a:	685b      	ldr	r3, [r3, #4]
 8018e4c:	4a4e      	ldr	r2, [pc, #312]	@ (8018f88 <SUBGRF_SetModulationParams+0x194>)
 8018e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8018e52:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8018e54:	697b      	ldr	r3, [r7, #20]
 8018e56:	0c1b      	lsrs	r3, r3, #16
 8018e58:	b2db      	uxtb	r3, r3
 8018e5a:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8018e5c:	697b      	ldr	r3, [r7, #20]
 8018e5e:	0a1b      	lsrs	r3, r3, #8
 8018e60:	b2db      	uxtb	r3, r3
 8018e62:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8018e64:	697b      	ldr	r3, [r7, #20]
 8018e66:	b2db      	uxtb	r3, r3
 8018e68:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8018e6a:	687b      	ldr	r3, [r7, #4]
 8018e6c:	7b1b      	ldrb	r3, [r3, #12]
 8018e6e:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8018e70:	687b      	ldr	r3, [r7, #4]
 8018e72:	7b5b      	ldrb	r3, [r3, #13]
 8018e74:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8018e76:	687b      	ldr	r3, [r7, #4]
 8018e78:	689b      	ldr	r3, [r3, #8]
 8018e7a:	2200      	movs	r2, #0
 8018e7c:	461c      	mov	r4, r3
 8018e7e:	4615      	mov	r5, r2
 8018e80:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8018e84:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8018e88:	4a40      	ldr	r2, [pc, #256]	@ (8018f8c <SUBGRF_SetModulationParams+0x198>)
 8018e8a:	f04f 0300 	mov.w	r3, #0
 8018e8e:	4640      	mov	r0, r8
 8018e90:	4649      	mov	r1, r9
 8018e92:	f7e7 ff53 	bl	8000d3c <__aeabi_uldivmod>
 8018e96:	4602      	mov	r2, r0
 8018e98:	460b      	mov	r3, r1
 8018e9a:	4613      	mov	r3, r2
 8018e9c:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8018e9e:	697b      	ldr	r3, [r7, #20]
 8018ea0:	0c1b      	lsrs	r3, r3, #16
 8018ea2:	b2db      	uxtb	r3, r3
 8018ea4:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8018ea6:	697b      	ldr	r3, [r7, #20]
 8018ea8:	0a1b      	lsrs	r3, r3, #8
 8018eaa:	b2db      	uxtb	r3, r3
 8018eac:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8018eae:	697b      	ldr	r3, [r7, #20]
 8018eb0:	b2db      	uxtb	r3, r3
 8018eb2:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8018eb4:	7cfb      	ldrb	r3, [r7, #19]
 8018eb6:	b29a      	uxth	r2, r3
 8018eb8:	f107 0308 	add.w	r3, r7, #8
 8018ebc:	4619      	mov	r1, r3
 8018ebe:	208b      	movs	r0, #139	@ 0x8b
 8018ec0:	f000 fa5c 	bl	801937c <SUBGRF_WriteCommand>
        break;
 8018ec4:	e058      	b.n	8018f78 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_BPSK:
        n = 4;
 8018ec6:	2304      	movs	r3, #4
 8018ec8:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8018eca:	687b      	ldr	r3, [r7, #4]
 8018ecc:	691b      	ldr	r3, [r3, #16]
 8018ece:	4a2e      	ldr	r2, [pc, #184]	@ (8018f88 <SUBGRF_SetModulationParams+0x194>)
 8018ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8018ed4:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8018ed6:	697b      	ldr	r3, [r7, #20]
 8018ed8:	0c1b      	lsrs	r3, r3, #16
 8018eda:	b2db      	uxtb	r3, r3
 8018edc:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8018ede:	697b      	ldr	r3, [r7, #20]
 8018ee0:	0a1b      	lsrs	r3, r3, #8
 8018ee2:	b2db      	uxtb	r3, r3
 8018ee4:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8018ee6:	697b      	ldr	r3, [r7, #20]
 8018ee8:	b2db      	uxtb	r3, r3
 8018eea:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8018eec:	687b      	ldr	r3, [r7, #4]
 8018eee:	7d1b      	ldrb	r3, [r3, #20]
 8018ef0:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8018ef2:	7cfb      	ldrb	r3, [r7, #19]
 8018ef4:	b29a      	uxth	r2, r3
 8018ef6:	f107 0308 	add.w	r3, r7, #8
 8018efa:	4619      	mov	r1, r3
 8018efc:	208b      	movs	r0, #139	@ 0x8b
 8018efe:	f000 fa3d 	bl	801937c <SUBGRF_WriteCommand>
        break;
 8018f02:	e039      	b.n	8018f78 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_LORA:
        n = 4;
 8018f04:	2304      	movs	r3, #4
 8018f06:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8018f08:	687b      	ldr	r3, [r7, #4]
 8018f0a:	7e1b      	ldrb	r3, [r3, #24]
 8018f0c:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8018f0e:	687b      	ldr	r3, [r7, #4]
 8018f10:	7e5b      	ldrb	r3, [r3, #25]
 8018f12:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8018f14:	687b      	ldr	r3, [r7, #4]
 8018f16:	7e9b      	ldrb	r3, [r3, #26]
 8018f18:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8018f1a:	687b      	ldr	r3, [r7, #4]
 8018f1c:	7edb      	ldrb	r3, [r3, #27]
 8018f1e:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8018f20:	7cfb      	ldrb	r3, [r7, #19]
 8018f22:	b29a      	uxth	r2, r3
 8018f24:	f107 0308 	add.w	r3, r7, #8
 8018f28:	4619      	mov	r1, r3
 8018f2a:	208b      	movs	r0, #139	@ 0x8b
 8018f2c:	f000 fa26 	bl	801937c <SUBGRF_WriteCommand>

        break;
 8018f30:	e022      	b.n	8018f78 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_GMSK:
        n = 5;
 8018f32:	2305      	movs	r3, #5
 8018f34:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8018f36:	687b      	ldr	r3, [r7, #4]
 8018f38:	685b      	ldr	r3, [r3, #4]
 8018f3a:	4a13      	ldr	r2, [pc, #76]	@ (8018f88 <SUBGRF_SetModulationParams+0x194>)
 8018f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8018f40:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8018f42:	697b      	ldr	r3, [r7, #20]
 8018f44:	0c1b      	lsrs	r3, r3, #16
 8018f46:	b2db      	uxtb	r3, r3
 8018f48:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8018f4a:	697b      	ldr	r3, [r7, #20]
 8018f4c:	0a1b      	lsrs	r3, r3, #8
 8018f4e:	b2db      	uxtb	r3, r3
 8018f50:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8018f52:	697b      	ldr	r3, [r7, #20]
 8018f54:	b2db      	uxtb	r3, r3
 8018f56:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8018f58:	687b      	ldr	r3, [r7, #4]
 8018f5a:	7b1b      	ldrb	r3, [r3, #12]
 8018f5c:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8018f5e:	687b      	ldr	r3, [r7, #4]
 8018f60:	7b5b      	ldrb	r3, [r3, #13]
 8018f62:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8018f64:	7cfb      	ldrb	r3, [r7, #19]
 8018f66:	b29a      	uxth	r2, r3
 8018f68:	f107 0308 	add.w	r3, r7, #8
 8018f6c:	4619      	mov	r1, r3
 8018f6e:	208b      	movs	r0, #139	@ 0x8b
 8018f70:	f000 fa04 	bl	801937c <SUBGRF_WriteCommand>
        break;
 8018f74:	e000      	b.n	8018f78 <SUBGRF_SetModulationParams+0x184>
    default:
    case PACKET_TYPE_NONE:
      break;
 8018f76:	bf00      	nop
    }
}
 8018f78:	bf00      	nop
 8018f7a:	3718      	adds	r7, #24
 8018f7c:	46bd      	mov	sp, r7
 8018f7e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8018f82:	bf00      	nop
 8018f84:	200013c9 	.word	0x200013c9
 8018f88:	3d090000 	.word	0x3d090000
 8018f8c:	01e84800 	.word	0x01e84800

08018f90 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8018f90:	b580      	push	{r7, lr}
 8018f92:	b086      	sub	sp, #24
 8018f94:	af00      	add	r7, sp, #0
 8018f96:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8018f98:	2300      	movs	r3, #0
 8018f9a:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8018f9c:	f107 030c 	add.w	r3, r7, #12
 8018fa0:	2200      	movs	r2, #0
 8018fa2:	601a      	str	r2, [r3, #0]
 8018fa4:	605a      	str	r2, [r3, #4]
 8018fa6:	721a      	strb	r2, [r3, #8]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8018fa8:	687b      	ldr	r3, [r7, #4]
 8018faa:	781a      	ldrb	r2, [r3, #0]
 8018fac:	4b44      	ldr	r3, [pc, #272]	@ (80190c0 <SUBGRF_SetPacketParams+0x130>)
 8018fae:	781b      	ldrb	r3, [r3, #0]
 8018fb0:	429a      	cmp	r2, r3
 8018fb2:	d004      	beq.n	8018fbe <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8018fb4:	687b      	ldr	r3, [r7, #4]
 8018fb6:	781b      	ldrb	r3, [r3, #0]
 8018fb8:	4618      	mov	r0, r3
 8018fba:	f7ff fe27 	bl	8018c0c <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8018fbe:	687b      	ldr	r3, [r7, #4]
 8018fc0:	781b      	ldrb	r3, [r3, #0]
 8018fc2:	2b03      	cmp	r3, #3
 8018fc4:	d878      	bhi.n	80190b8 <SUBGRF_SetPacketParams+0x128>
 8018fc6:	a201      	add	r2, pc, #4	@ (adr r2, 8018fcc <SUBGRF_SetPacketParams+0x3c>)
 8018fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018fcc:	08018fdd 	.word	0x08018fdd
 8018fd0:	0801906d 	.word	0x0801906d
 8018fd4:	08019061 	.word	0x08019061
 8018fd8:	08018fdd 	.word	0x08018fdd
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8018fdc:	687b      	ldr	r3, [r7, #4]
 8018fde:	7a5b      	ldrb	r3, [r3, #9]
 8018fe0:	2bf1      	cmp	r3, #241	@ 0xf1
 8018fe2:	d10a      	bne.n	8018ffa <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8018fe4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8018fe8:	f7ff faa6 	bl	8018538 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8018fec:	f248 0005 	movw	r0, #32773	@ 0x8005
 8018ff0:	f7ff fac2 	bl	8018578 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8018ff4:	2302      	movs	r3, #2
 8018ff6:	75bb      	strb	r3, [r7, #22]
 8018ff8:	e011      	b.n	801901e <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8018ffa:	687b      	ldr	r3, [r7, #4]
 8018ffc:	7a5b      	ldrb	r3, [r3, #9]
 8018ffe:	2bf2      	cmp	r3, #242	@ 0xf2
 8019000:	d10a      	bne.n	8019018 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8019002:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 8019006:	f7ff fa97 	bl	8018538 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 801900a:	f241 0021 	movw	r0, #4129	@ 0x1021
 801900e:	f7ff fab3 	bl	8018578 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8019012:	2306      	movs	r3, #6
 8019014:	75bb      	strb	r3, [r7, #22]
 8019016:	e002      	b.n	801901e <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8019018:	687b      	ldr	r3, [r7, #4]
 801901a:	7a5b      	ldrb	r3, [r3, #9]
 801901c:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801901e:	2309      	movs	r3, #9
 8019020:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8019022:	687b      	ldr	r3, [r7, #4]
 8019024:	885b      	ldrh	r3, [r3, #2]
 8019026:	0a1b      	lsrs	r3, r3, #8
 8019028:	b29b      	uxth	r3, r3
 801902a:	b2db      	uxtb	r3, r3
 801902c:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801902e:	687b      	ldr	r3, [r7, #4]
 8019030:	885b      	ldrh	r3, [r3, #2]
 8019032:	b2db      	uxtb	r3, r3
 8019034:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8019036:	687b      	ldr	r3, [r7, #4]
 8019038:	791b      	ldrb	r3, [r3, #4]
 801903a:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 801903c:	687b      	ldr	r3, [r7, #4]
 801903e:	795b      	ldrb	r3, [r3, #5]
 8019040:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8019042:	687b      	ldr	r3, [r7, #4]
 8019044:	799b      	ldrb	r3, [r3, #6]
 8019046:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8019048:	687b      	ldr	r3, [r7, #4]
 801904a:	79db      	ldrb	r3, [r3, #7]
 801904c:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 801904e:	687b      	ldr	r3, [r7, #4]
 8019050:	7a1b      	ldrb	r3, [r3, #8]
 8019052:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8019054:	7dbb      	ldrb	r3, [r7, #22]
 8019056:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8019058:	687b      	ldr	r3, [r7, #4]
 801905a:	7a9b      	ldrb	r3, [r3, #10]
 801905c:	753b      	strb	r3, [r7, #20]
        break;
 801905e:	e022      	b.n	80190a6 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8019060:	2301      	movs	r3, #1
 8019062:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8019064:	687b      	ldr	r3, [r7, #4]
 8019066:	7b1b      	ldrb	r3, [r3, #12]
 8019068:	733b      	strb	r3, [r7, #12]
        break;
 801906a:	e01c      	b.n	80190a6 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 801906c:	2306      	movs	r3, #6
 801906e:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8019070:	687b      	ldr	r3, [r7, #4]
 8019072:	89db      	ldrh	r3, [r3, #14]
 8019074:	0a1b      	lsrs	r3, r3, #8
 8019076:	b29b      	uxth	r3, r3
 8019078:	b2db      	uxtb	r3, r3
 801907a:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 801907c:	687b      	ldr	r3, [r7, #4]
 801907e:	89db      	ldrh	r3, [r3, #14]
 8019080:	b2db      	uxtb	r3, r3
 8019082:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8019084:	687b      	ldr	r3, [r7, #4]
 8019086:	7c1a      	ldrb	r2, [r3, #16]
 8019088:	4b0e      	ldr	r3, [pc, #56]	@ (80190c4 <SUBGRF_SetPacketParams+0x134>)
 801908a:	4611      	mov	r1, r2
 801908c:	7019      	strb	r1, [r3, #0]
 801908e:	4613      	mov	r3, r2
 8019090:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8019092:	687b      	ldr	r3, [r7, #4]
 8019094:	7c5b      	ldrb	r3, [r3, #17]
 8019096:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8019098:	687b      	ldr	r3, [r7, #4]
 801909a:	7c9b      	ldrb	r3, [r3, #18]
 801909c:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801909e:	687b      	ldr	r3, [r7, #4]
 80190a0:	7cdb      	ldrb	r3, [r3, #19]
 80190a2:	747b      	strb	r3, [r7, #17]
        break;
 80190a4:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 80190a6:	7dfb      	ldrb	r3, [r7, #23]
 80190a8:	b29a      	uxth	r2, r3
 80190aa:	f107 030c 	add.w	r3, r7, #12
 80190ae:	4619      	mov	r1, r3
 80190b0:	208c      	movs	r0, #140	@ 0x8c
 80190b2:	f000 f963 	bl	801937c <SUBGRF_WriteCommand>
 80190b6:	e000      	b.n	80190ba <SUBGRF_SetPacketParams+0x12a>
        return;
 80190b8:	bf00      	nop
}
 80190ba:	3718      	adds	r7, #24
 80190bc:	46bd      	mov	sp, r7
 80190be:	bd80      	pop	{r7, pc}
 80190c0:	200013c9 	.word	0x200013c9
 80190c4:	200013ca 	.word	0x200013ca

080190c8 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 80190c8:	b580      	push	{r7, lr}
 80190ca:	b084      	sub	sp, #16
 80190cc:	af00      	add	r7, sp, #0
 80190ce:	4603      	mov	r3, r0
 80190d0:	460a      	mov	r2, r1
 80190d2:	71fb      	strb	r3, [r7, #7]
 80190d4:	4613      	mov	r3, r2
 80190d6:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 80190d8:	79fb      	ldrb	r3, [r7, #7]
 80190da:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 80190dc:	79bb      	ldrb	r3, [r7, #6]
 80190de:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 80190e0:	f107 030c 	add.w	r3, r7, #12
 80190e4:	2202      	movs	r2, #2
 80190e6:	4619      	mov	r1, r3
 80190e8:	208f      	movs	r0, #143	@ 0x8f
 80190ea:	f000 f947 	bl	801937c <SUBGRF_WriteCommand>
}
 80190ee:	bf00      	nop
 80190f0:	3710      	adds	r7, #16
 80190f2:	46bd      	mov	sp, r7
 80190f4:	bd80      	pop	{r7, pc}

080190f6 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 80190f6:	b580      	push	{r7, lr}
 80190f8:	b082      	sub	sp, #8
 80190fa:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 80190fc:	2300      	movs	r3, #0
 80190fe:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8019100:	1d3b      	adds	r3, r7, #4
 8019102:	2201      	movs	r2, #1
 8019104:	4619      	mov	r1, r3
 8019106:	2015      	movs	r0, #21
 8019108:	f000 f95a 	bl	80193c0 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801910c:	793b      	ldrb	r3, [r7, #4]
 801910e:	425b      	negs	r3, r3
 8019110:	105b      	asrs	r3, r3, #1
 8019112:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8019114:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8019118:	4618      	mov	r0, r3
 801911a:	3708      	adds	r7, #8
 801911c:	46bd      	mov	sp, r7
 801911e:	bd80      	pop	{r7, pc}

08019120 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8019120:	b580      	push	{r7, lr}
 8019122:	b084      	sub	sp, #16
 8019124:	af00      	add	r7, sp, #0
 8019126:	6078      	str	r0, [r7, #4]
 8019128:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801912a:	f107 030c 	add.w	r3, r7, #12
 801912e:	2202      	movs	r2, #2
 8019130:	4619      	mov	r1, r3
 8019132:	2013      	movs	r0, #19
 8019134:	f000 f944 	bl	80193c0 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8019138:	f7ff fd84 	bl	8018c44 <SUBGRF_GetPacketType>
 801913c:	4603      	mov	r3, r0
 801913e:	2b01      	cmp	r3, #1
 8019140:	d10d      	bne.n	801915e <SUBGRF_GetRxBufferStatus+0x3e>
 8019142:	4b0c      	ldr	r3, [pc, #48]	@ (8019174 <SUBGRF_GetRxBufferStatus+0x54>)
 8019144:	781b      	ldrb	r3, [r3, #0]
 8019146:	b2db      	uxtb	r3, r3
 8019148:	2b01      	cmp	r3, #1
 801914a:	d108      	bne.n	801915e <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801914c:	f240 7002 	movw	r0, #1794	@ 0x702
 8019150:	f000 f878 	bl	8019244 <SUBGRF_ReadRegister>
 8019154:	4603      	mov	r3, r0
 8019156:	461a      	mov	r2, r3
 8019158:	687b      	ldr	r3, [r7, #4]
 801915a:	701a      	strb	r2, [r3, #0]
 801915c:	e002      	b.n	8019164 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 801915e:	7b3a      	ldrb	r2, [r7, #12]
 8019160:	687b      	ldr	r3, [r7, #4]
 8019162:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8019164:	7b7a      	ldrb	r2, [r7, #13]
 8019166:	683b      	ldr	r3, [r7, #0]
 8019168:	701a      	strb	r2, [r3, #0]
}
 801916a:	bf00      	nop
 801916c:	3710      	adds	r7, #16
 801916e:	46bd      	mov	sp, r7
 8019170:	bd80      	pop	{r7, pc}
 8019172:	bf00      	nop
 8019174:	200013ca 	.word	0x200013ca

08019178 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8019178:	b580      	push	{r7, lr}
 801917a:	b084      	sub	sp, #16
 801917c:	af00      	add	r7, sp, #0
 801917e:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8019180:	f107 030c 	add.w	r3, r7, #12
 8019184:	2203      	movs	r2, #3
 8019186:	4619      	mov	r1, r3
 8019188:	2014      	movs	r0, #20
 801918a:	f000 f919 	bl	80193c0 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 801918e:	f7ff fd59 	bl	8018c44 <SUBGRF_GetPacketType>
 8019192:	4603      	mov	r3, r0
 8019194:	461a      	mov	r2, r3
 8019196:	687b      	ldr	r3, [r7, #4]
 8019198:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801919a:	687b      	ldr	r3, [r7, #4]
 801919c:	781b      	ldrb	r3, [r3, #0]
 801919e:	2b00      	cmp	r3, #0
 80191a0:	d002      	beq.n	80191a8 <SUBGRF_GetPacketStatus+0x30>
 80191a2:	2b01      	cmp	r3, #1
 80191a4:	d013      	beq.n	80191ce <SUBGRF_GetPacketStatus+0x56>
 80191a6:	e02a      	b.n	80191fe <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 80191a8:	7b3a      	ldrb	r2, [r7, #12]
 80191aa:	687b      	ldr	r3, [r7, #4]
 80191ac:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 80191ae:	7b7b      	ldrb	r3, [r7, #13]
 80191b0:	425b      	negs	r3, r3
 80191b2:	105b      	asrs	r3, r3, #1
 80191b4:	b25a      	sxtb	r2, r3
 80191b6:	687b      	ldr	r3, [r7, #4]
 80191b8:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 80191ba:	7bbb      	ldrb	r3, [r7, #14]
 80191bc:	425b      	negs	r3, r3
 80191be:	105b      	asrs	r3, r3, #1
 80191c0:	b25a      	sxtb	r2, r3
 80191c2:	687b      	ldr	r3, [r7, #4]
 80191c4:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 80191c6:	687b      	ldr	r3, [r7, #4]
 80191c8:	2200      	movs	r2, #0
 80191ca:	609a      	str	r2, [r3, #8]
            break;
 80191cc:	e020      	b.n	8019210 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 80191ce:	7b3b      	ldrb	r3, [r7, #12]
 80191d0:	425b      	negs	r3, r3
 80191d2:	105b      	asrs	r3, r3, #1
 80191d4:	b25a      	sxtb	r2, r3
 80191d6:	687b      	ldr	r3, [r7, #4]
 80191d8:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 80191da:	7b7b      	ldrb	r3, [r7, #13]
 80191dc:	b25b      	sxtb	r3, r3
 80191de:	3302      	adds	r3, #2
 80191e0:	109b      	asrs	r3, r3, #2
 80191e2:	b25a      	sxtb	r2, r3
 80191e4:	687b      	ldr	r3, [r7, #4]
 80191e6:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 80191e8:	7bbb      	ldrb	r3, [r7, #14]
 80191ea:	425b      	negs	r3, r3
 80191ec:	105b      	asrs	r3, r3, #1
 80191ee:	b25a      	sxtb	r2, r3
 80191f0:	687b      	ldr	r3, [r7, #4]
 80191f2:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 80191f4:	4b08      	ldr	r3, [pc, #32]	@ (8019218 <SUBGRF_GetPacketStatus+0xa0>)
 80191f6:	681a      	ldr	r2, [r3, #0]
 80191f8:	687b      	ldr	r3, [r7, #4]
 80191fa:	611a      	str	r2, [r3, #16]
            break;
 80191fc:	e008      	b.n	8019210 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 80191fe:	2214      	movs	r2, #20
 8019200:	2100      	movs	r1, #0
 8019202:	6878      	ldr	r0, [r7, #4]
 8019204:	f000 fe7c 	bl	8019f00 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8019208:	687b      	ldr	r3, [r7, #4]
 801920a:	220f      	movs	r2, #15
 801920c:	701a      	strb	r2, [r3, #0]
            break;
 801920e:	bf00      	nop
    }
}
 8019210:	bf00      	nop
 8019212:	3710      	adds	r7, #16
 8019214:	46bd      	mov	sp, r7
 8019216:	bd80      	pop	{r7, pc}
 8019218:	200013cc 	.word	0x200013cc

0801921c <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801921c:	b580      	push	{r7, lr}
 801921e:	b082      	sub	sp, #8
 8019220:	af00      	add	r7, sp, #0
 8019222:	4603      	mov	r3, r0
 8019224:	460a      	mov	r2, r1
 8019226:	80fb      	strh	r3, [r7, #6]
 8019228:	4613      	mov	r3, r2
 801922a:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801922c:	1d7a      	adds	r2, r7, #5
 801922e:	88f9      	ldrh	r1, [r7, #6]
 8019230:	2301      	movs	r3, #1
 8019232:	4803      	ldr	r0, [pc, #12]	@ (8019240 <SUBGRF_WriteRegister+0x24>)
 8019234:	f7ee f85c 	bl	80072f0 <HAL_SUBGHZ_WriteRegisters>
}
 8019238:	bf00      	nop
 801923a:	3708      	adds	r7, #8
 801923c:	46bd      	mov	sp, r7
 801923e:	bd80      	pop	{r7, pc}
 8019240:	20000788 	.word	0x20000788

08019244 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8019244:	b580      	push	{r7, lr}
 8019246:	b084      	sub	sp, #16
 8019248:	af00      	add	r7, sp, #0
 801924a:	4603      	mov	r3, r0
 801924c:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 801924e:	f107 020f 	add.w	r2, r7, #15
 8019252:	88f9      	ldrh	r1, [r7, #6]
 8019254:	2301      	movs	r3, #1
 8019256:	4804      	ldr	r0, [pc, #16]	@ (8019268 <SUBGRF_ReadRegister+0x24>)
 8019258:	f7ee f8a9 	bl	80073ae <HAL_SUBGHZ_ReadRegisters>
    return data;
 801925c:	7bfb      	ldrb	r3, [r7, #15]
}
 801925e:	4618      	mov	r0, r3
 8019260:	3710      	adds	r7, #16
 8019262:	46bd      	mov	sp, r7
 8019264:	bd80      	pop	{r7, pc}
 8019266:	bf00      	nop
 8019268:	20000788 	.word	0x20000788

0801926c <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 801926c:	b580      	push	{r7, lr}
 801926e:	b086      	sub	sp, #24
 8019270:	af00      	add	r7, sp, #0
 8019272:	4603      	mov	r3, r0
 8019274:	6039      	str	r1, [r7, #0]
 8019276:	80fb      	strh	r3, [r7, #6]
 8019278:	4613      	mov	r3, r2
 801927a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801927c:	f3ef 8310 	mrs	r3, PRIMASK
 8019280:	60fb      	str	r3, [r7, #12]
  return(result);
 8019282:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019284:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019286:	b672      	cpsid	i
}
 8019288:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801928a:	88bb      	ldrh	r3, [r7, #4]
 801928c:	88f9      	ldrh	r1, [r7, #6]
 801928e:	683a      	ldr	r2, [r7, #0]
 8019290:	4806      	ldr	r0, [pc, #24]	@ (80192ac <SUBGRF_WriteRegisters+0x40>)
 8019292:	f7ee f82d 	bl	80072f0 <HAL_SUBGHZ_WriteRegisters>
 8019296:	697b      	ldr	r3, [r7, #20]
 8019298:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801929a:	693b      	ldr	r3, [r7, #16]
 801929c:	f383 8810 	msr	PRIMASK, r3
}
 80192a0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80192a2:	bf00      	nop
 80192a4:	3718      	adds	r7, #24
 80192a6:	46bd      	mov	sp, r7
 80192a8:	bd80      	pop	{r7, pc}
 80192aa:	bf00      	nop
 80192ac:	20000788 	.word	0x20000788

080192b0 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 80192b0:	b580      	push	{r7, lr}
 80192b2:	b086      	sub	sp, #24
 80192b4:	af00      	add	r7, sp, #0
 80192b6:	4603      	mov	r3, r0
 80192b8:	6039      	str	r1, [r7, #0]
 80192ba:	80fb      	strh	r3, [r7, #6]
 80192bc:	4613      	mov	r3, r2
 80192be:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80192c0:	f3ef 8310 	mrs	r3, PRIMASK
 80192c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80192c6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80192c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80192ca:	b672      	cpsid	i
}
 80192cc:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 80192ce:	88bb      	ldrh	r3, [r7, #4]
 80192d0:	88f9      	ldrh	r1, [r7, #6]
 80192d2:	683a      	ldr	r2, [r7, #0]
 80192d4:	4806      	ldr	r0, [pc, #24]	@ (80192f0 <SUBGRF_ReadRegisters+0x40>)
 80192d6:	f7ee f86a 	bl	80073ae <HAL_SUBGHZ_ReadRegisters>
 80192da:	697b      	ldr	r3, [r7, #20]
 80192dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80192de:	693b      	ldr	r3, [r7, #16]
 80192e0:	f383 8810 	msr	PRIMASK, r3
}
 80192e4:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80192e6:	bf00      	nop
 80192e8:	3718      	adds	r7, #24
 80192ea:	46bd      	mov	sp, r7
 80192ec:	bd80      	pop	{r7, pc}
 80192ee:	bf00      	nop
 80192f0:	20000788 	.word	0x20000788

080192f4 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 80192f4:	b580      	push	{r7, lr}
 80192f6:	b086      	sub	sp, #24
 80192f8:	af00      	add	r7, sp, #0
 80192fa:	4603      	mov	r3, r0
 80192fc:	6039      	str	r1, [r7, #0]
 80192fe:	71fb      	strb	r3, [r7, #7]
 8019300:	4613      	mov	r3, r2
 8019302:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019304:	f3ef 8310 	mrs	r3, PRIMASK
 8019308:	60fb      	str	r3, [r7, #12]
  return(result);
 801930a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801930c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801930e:	b672      	cpsid	i
}
 8019310:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8019312:	79bb      	ldrb	r3, [r7, #6]
 8019314:	b29b      	uxth	r3, r3
 8019316:	79f9      	ldrb	r1, [r7, #7]
 8019318:	683a      	ldr	r2, [r7, #0]
 801931a:	4806      	ldr	r0, [pc, #24]	@ (8019334 <SUBGRF_WriteBuffer+0x40>)
 801931c:	f7ee f95b 	bl	80075d6 <HAL_SUBGHZ_WriteBuffer>
 8019320:	697b      	ldr	r3, [r7, #20]
 8019322:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019324:	693b      	ldr	r3, [r7, #16]
 8019326:	f383 8810 	msr	PRIMASK, r3
}
 801932a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801932c:	bf00      	nop
 801932e:	3718      	adds	r7, #24
 8019330:	46bd      	mov	sp, r7
 8019332:	bd80      	pop	{r7, pc}
 8019334:	20000788 	.word	0x20000788

08019338 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8019338:	b580      	push	{r7, lr}
 801933a:	b086      	sub	sp, #24
 801933c:	af00      	add	r7, sp, #0
 801933e:	4603      	mov	r3, r0
 8019340:	6039      	str	r1, [r7, #0]
 8019342:	71fb      	strb	r3, [r7, #7]
 8019344:	4613      	mov	r3, r2
 8019346:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019348:	f3ef 8310 	mrs	r3, PRIMASK
 801934c:	60fb      	str	r3, [r7, #12]
  return(result);
 801934e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019350:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019352:	b672      	cpsid	i
}
 8019354:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8019356:	79bb      	ldrb	r3, [r7, #6]
 8019358:	b29b      	uxth	r3, r3
 801935a:	79f9      	ldrb	r1, [r7, #7]
 801935c:	683a      	ldr	r2, [r7, #0]
 801935e:	4806      	ldr	r0, [pc, #24]	@ (8019378 <SUBGRF_ReadBuffer+0x40>)
 8019360:	f7ee f98c 	bl	800767c <HAL_SUBGHZ_ReadBuffer>
 8019364:	697b      	ldr	r3, [r7, #20]
 8019366:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019368:	693b      	ldr	r3, [r7, #16]
 801936a:	f383 8810 	msr	PRIMASK, r3
}
 801936e:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019370:	bf00      	nop
 8019372:	3718      	adds	r7, #24
 8019374:	46bd      	mov	sp, r7
 8019376:	bd80      	pop	{r7, pc}
 8019378:	20000788 	.word	0x20000788

0801937c <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 801937c:	b580      	push	{r7, lr}
 801937e:	b086      	sub	sp, #24
 8019380:	af00      	add	r7, sp, #0
 8019382:	4603      	mov	r3, r0
 8019384:	6039      	str	r1, [r7, #0]
 8019386:	71fb      	strb	r3, [r7, #7]
 8019388:	4613      	mov	r3, r2
 801938a:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801938c:	f3ef 8310 	mrs	r3, PRIMASK
 8019390:	60fb      	str	r3, [r7, #12]
  return(result);
 8019392:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019394:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019396:	b672      	cpsid	i
}
 8019398:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801939a:	88bb      	ldrh	r3, [r7, #4]
 801939c:	79f9      	ldrb	r1, [r7, #7]
 801939e:	683a      	ldr	r2, [r7, #0]
 80193a0:	4806      	ldr	r0, [pc, #24]	@ (80193bc <SUBGRF_WriteCommand+0x40>)
 80193a2:	f7ee f865 	bl	8007470 <HAL_SUBGHZ_ExecSetCmd>
 80193a6:	697b      	ldr	r3, [r7, #20]
 80193a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80193aa:	693b      	ldr	r3, [r7, #16]
 80193ac:	f383 8810 	msr	PRIMASK, r3
}
 80193b0:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80193b2:	bf00      	nop
 80193b4:	3718      	adds	r7, #24
 80193b6:	46bd      	mov	sp, r7
 80193b8:	bd80      	pop	{r7, pc}
 80193ba:	bf00      	nop
 80193bc:	20000788 	.word	0x20000788

080193c0 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 80193c0:	b580      	push	{r7, lr}
 80193c2:	b086      	sub	sp, #24
 80193c4:	af00      	add	r7, sp, #0
 80193c6:	4603      	mov	r3, r0
 80193c8:	6039      	str	r1, [r7, #0]
 80193ca:	71fb      	strb	r3, [r7, #7]
 80193cc:	4613      	mov	r3, r2
 80193ce:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80193d0:	f3ef 8310 	mrs	r3, PRIMASK
 80193d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80193d6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80193d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80193da:	b672      	cpsid	i
}
 80193dc:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 80193de:	88bb      	ldrh	r3, [r7, #4]
 80193e0:	79f9      	ldrb	r1, [r7, #7]
 80193e2:	683a      	ldr	r2, [r7, #0]
 80193e4:	4806      	ldr	r0, [pc, #24]	@ (8019400 <SUBGRF_ReadCommand+0x40>)
 80193e6:	f7ee f8a2 	bl	800752e <HAL_SUBGHZ_ExecGetCmd>
 80193ea:	697b      	ldr	r3, [r7, #20]
 80193ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80193ee:	693b      	ldr	r3, [r7, #16]
 80193f0:	f383 8810 	msr	PRIMASK, r3
}
 80193f4:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80193f6:	bf00      	nop
 80193f8:	3718      	adds	r7, #24
 80193fa:	46bd      	mov	sp, r7
 80193fc:	bd80      	pop	{r7, pc}
 80193fe:	bf00      	nop
 8019400:	20000788 	.word	0x20000788

08019404 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8019404:	b580      	push	{r7, lr}
 8019406:	b084      	sub	sp, #16
 8019408:	af00      	add	r7, sp, #0
 801940a:	4603      	mov	r3, r0
 801940c:	460a      	mov	r2, r1
 801940e:	71fb      	strb	r3, [r7, #7]
 8019410:	4613      	mov	r3, r2
 8019412:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8019414:	2301      	movs	r3, #1
 8019416:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8019418:	79bb      	ldrb	r3, [r7, #6]
 801941a:	2b01      	cmp	r3, #1
 801941c:	d10d      	bne.n	801943a <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801941e:	79fb      	ldrb	r3, [r7, #7]
 8019420:	2b01      	cmp	r3, #1
 8019422:	d104      	bne.n	801942e <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8019424:	2302      	movs	r3, #2
 8019426:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8019428:	2004      	movs	r0, #4
 801942a:	f000 f8ef 	bl	801960c <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801942e:	79fb      	ldrb	r3, [r7, #7]
 8019430:	2b02      	cmp	r3, #2
 8019432:	d107      	bne.n	8019444 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8019434:	2303      	movs	r3, #3
 8019436:	73fb      	strb	r3, [r7, #15]
 8019438:	e004      	b.n	8019444 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 801943a:	79bb      	ldrb	r3, [r7, #6]
 801943c:	2b00      	cmp	r3, #0
 801943e:	d101      	bne.n	8019444 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8019440:	2301      	movs	r3, #1
 8019442:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8019444:	7bfb      	ldrb	r3, [r7, #15]
 8019446:	4618      	mov	r0, r3
 8019448:	f7e9 f923 	bl	8002692 <RBI_ConfigRFSwitch>
}
 801944c:	bf00      	nop
 801944e:	3710      	adds	r7, #16
 8019450:	46bd      	mov	sp, r7
 8019452:	bd80      	pop	{r7, pc}

08019454 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 8019454:	b580      	push	{r7, lr}
 8019456:	b084      	sub	sp, #16
 8019458:	af00      	add	r7, sp, #0
 801945a:	4603      	mov	r3, r0
 801945c:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 801945e:	2301      	movs	r3, #1
 8019460:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8019462:	f7e9 f924 	bl	80026ae <RBI_GetTxConfig>
 8019466:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8019468:	68bb      	ldr	r3, [r7, #8]
 801946a:	2b02      	cmp	r3, #2
 801946c:	d016      	beq.n	801949c <SUBGRF_SetRfTxPower+0x48>
 801946e:	68bb      	ldr	r3, [r7, #8]
 8019470:	2b02      	cmp	r3, #2
 8019472:	dc16      	bgt.n	80194a2 <SUBGRF_SetRfTxPower+0x4e>
 8019474:	68bb      	ldr	r3, [r7, #8]
 8019476:	2b00      	cmp	r3, #0
 8019478:	d003      	beq.n	8019482 <SUBGRF_SetRfTxPower+0x2e>
 801947a:	68bb      	ldr	r3, [r7, #8]
 801947c:	2b01      	cmp	r3, #1
 801947e:	d00a      	beq.n	8019496 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8019480:	e00f      	b.n	80194a2 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8019482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019486:	2b0f      	cmp	r3, #15
 8019488:	dd02      	ble.n	8019490 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 801948a:	2302      	movs	r3, #2
 801948c:	73fb      	strb	r3, [r7, #15]
            break;
 801948e:	e009      	b.n	80194a4 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8019490:	2301      	movs	r3, #1
 8019492:	73fb      	strb	r3, [r7, #15]
            break;
 8019494:	e006      	b.n	80194a4 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8019496:	2301      	movs	r3, #1
 8019498:	73fb      	strb	r3, [r7, #15]
            break;
 801949a:	e003      	b.n	80194a4 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801949c:	2302      	movs	r3, #2
 801949e:	73fb      	strb	r3, [r7, #15]
            break;
 80194a0:	e000      	b.n	80194a4 <SUBGRF_SetRfTxPower+0x50>
            break;
 80194a2:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 80194a4:	f997 1007 	ldrsb.w	r1, [r7, #7]
 80194a8:	7bfb      	ldrb	r3, [r7, #15]
 80194aa:	2202      	movs	r2, #2
 80194ac:	4618      	mov	r0, r3
 80194ae:	f7ff fbd3 	bl	8018c58 <SUBGRF_SetTxParams>

    return paSelect;
 80194b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80194b4:	4618      	mov	r0, r3
 80194b6:	3710      	adds	r7, #16
 80194b8:	46bd      	mov	sp, r7
 80194ba:	bd80      	pop	{r7, pc}

080194bc <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 80194bc:	b480      	push	{r7}
 80194be:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 80194c0:	2301      	movs	r3, #1
}
 80194c2:	4618      	mov	r0, r3
 80194c4:	46bd      	mov	sp, r7
 80194c6:	bc80      	pop	{r7}
 80194c8:	4770      	bx	lr
	...

080194cc <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80194cc:	b580      	push	{r7, lr}
 80194ce:	b082      	sub	sp, #8
 80194d0:	af00      	add	r7, sp, #0
 80194d2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 80194d4:	4b03      	ldr	r3, [pc, #12]	@ (80194e4 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 80194d6:	681b      	ldr	r3, [r3, #0]
 80194d8:	2001      	movs	r0, #1
 80194da:	4798      	blx	r3
}
 80194dc:	bf00      	nop
 80194de:	3708      	adds	r7, #8
 80194e0:	46bd      	mov	sp, r7
 80194e2:	bd80      	pop	{r7, pc}
 80194e4:	200013d4 	.word	0x200013d4

080194e8 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80194e8:	b580      	push	{r7, lr}
 80194ea:	b082      	sub	sp, #8
 80194ec:	af00      	add	r7, sp, #0
 80194ee:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 80194f0:	4b03      	ldr	r3, [pc, #12]	@ (8019500 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 80194f2:	681b      	ldr	r3, [r3, #0]
 80194f4:	2002      	movs	r0, #2
 80194f6:	4798      	blx	r3
}
 80194f8:	bf00      	nop
 80194fa:	3708      	adds	r7, #8
 80194fc:	46bd      	mov	sp, r7
 80194fe:	bd80      	pop	{r7, pc}
 8019500:	200013d4 	.word	0x200013d4

08019504 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8019504:	b580      	push	{r7, lr}
 8019506:	b082      	sub	sp, #8
 8019508:	af00      	add	r7, sp, #0
 801950a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801950c:	4b03      	ldr	r3, [pc, #12]	@ (801951c <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801950e:	681b      	ldr	r3, [r3, #0]
 8019510:	2040      	movs	r0, #64	@ 0x40
 8019512:	4798      	blx	r3
}
 8019514:	bf00      	nop
 8019516:	3708      	adds	r7, #8
 8019518:	46bd      	mov	sp, r7
 801951a:	bd80      	pop	{r7, pc}
 801951c:	200013d4 	.word	0x200013d4

08019520 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8019520:	b580      	push	{r7, lr}
 8019522:	b082      	sub	sp, #8
 8019524:	af00      	add	r7, sp, #0
 8019526:	6078      	str	r0, [r7, #4]
 8019528:	460b      	mov	r3, r1
 801952a:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801952c:	78fb      	ldrb	r3, [r7, #3]
 801952e:	2b00      	cmp	r3, #0
 8019530:	d002      	beq.n	8019538 <HAL_SUBGHZ_CADStatusCallback+0x18>
 8019532:	2b01      	cmp	r3, #1
 8019534:	d005      	beq.n	8019542 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8019536:	e00a      	b.n	801954e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8019538:	4b07      	ldr	r3, [pc, #28]	@ (8019558 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801953a:	681b      	ldr	r3, [r3, #0]
 801953c:	2080      	movs	r0, #128	@ 0x80
 801953e:	4798      	blx	r3
            break;
 8019540:	e005      	b.n	801954e <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8019542:	4b05      	ldr	r3, [pc, #20]	@ (8019558 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8019544:	681b      	ldr	r3, [r3, #0]
 8019546:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801954a:	4798      	blx	r3
            break;
 801954c:	bf00      	nop
    }
}
 801954e:	bf00      	nop
 8019550:	3708      	adds	r7, #8
 8019552:	46bd      	mov	sp, r7
 8019554:	bd80      	pop	{r7, pc}
 8019556:	bf00      	nop
 8019558:	200013d4 	.word	0x200013d4

0801955c <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801955c:	b580      	push	{r7, lr}
 801955e:	b082      	sub	sp, #8
 8019560:	af00      	add	r7, sp, #0
 8019562:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8019564:	4b04      	ldr	r3, [pc, #16]	@ (8019578 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8019566:	681b      	ldr	r3, [r3, #0]
 8019568:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801956c:	4798      	blx	r3
}
 801956e:	bf00      	nop
 8019570:	3708      	adds	r7, #8
 8019572:	46bd      	mov	sp, r7
 8019574:	bd80      	pop	{r7, pc}
 8019576:	bf00      	nop
 8019578:	200013d4 	.word	0x200013d4

0801957c <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801957c:	b580      	push	{r7, lr}
 801957e:	b082      	sub	sp, #8
 8019580:	af00      	add	r7, sp, #0
 8019582:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8019584:	4b03      	ldr	r3, [pc, #12]	@ (8019594 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8019586:	681b      	ldr	r3, [r3, #0]
 8019588:	2020      	movs	r0, #32
 801958a:	4798      	blx	r3
}
 801958c:	bf00      	nop
 801958e:	3708      	adds	r7, #8
 8019590:	46bd      	mov	sp, r7
 8019592:	bd80      	pop	{r7, pc}
 8019594:	200013d4 	.word	0x200013d4

08019598 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019598:	b580      	push	{r7, lr}
 801959a:	b082      	sub	sp, #8
 801959c:	af00      	add	r7, sp, #0
 801959e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 80195a0:	4b03      	ldr	r3, [pc, #12]	@ (80195b0 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 80195a2:	681b      	ldr	r3, [r3, #0]
 80195a4:	2004      	movs	r0, #4
 80195a6:	4798      	blx	r3
}
 80195a8:	bf00      	nop
 80195aa:	3708      	adds	r7, #8
 80195ac:	46bd      	mov	sp, r7
 80195ae:	bd80      	pop	{r7, pc}
 80195b0:	200013d4 	.word	0x200013d4

080195b4 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80195b4:	b580      	push	{r7, lr}
 80195b6:	b082      	sub	sp, #8
 80195b8:	af00      	add	r7, sp, #0
 80195ba:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 80195bc:	4b03      	ldr	r3, [pc, #12]	@ (80195cc <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 80195be:	681b      	ldr	r3, [r3, #0]
 80195c0:	2008      	movs	r0, #8
 80195c2:	4798      	blx	r3
}
 80195c4:	bf00      	nop
 80195c6:	3708      	adds	r7, #8
 80195c8:	46bd      	mov	sp, r7
 80195ca:	bd80      	pop	{r7, pc}
 80195cc:	200013d4 	.word	0x200013d4

080195d0 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80195d0:	b580      	push	{r7, lr}
 80195d2:	b082      	sub	sp, #8
 80195d4:	af00      	add	r7, sp, #0
 80195d6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 80195d8:	4b03      	ldr	r3, [pc, #12]	@ (80195e8 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 80195da:	681b      	ldr	r3, [r3, #0]
 80195dc:	2010      	movs	r0, #16
 80195de:	4798      	blx	r3
}
 80195e0:	bf00      	nop
 80195e2:	3708      	adds	r7, #8
 80195e4:	46bd      	mov	sp, r7
 80195e6:	bd80      	pop	{r7, pc}
 80195e8:	200013d4 	.word	0x200013d4

080195ec <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80195ec:	b580      	push	{r7, lr}
 80195ee:	b082      	sub	sp, #8
 80195f0:	af00      	add	r7, sp, #0
 80195f2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 80195f4:	4b04      	ldr	r3, [pc, #16]	@ (8019608 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 80195f6:	681b      	ldr	r3, [r3, #0]
 80195f8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80195fc:	4798      	blx	r3
}
 80195fe:	bf00      	nop
 8019600:	3708      	adds	r7, #8
 8019602:	46bd      	mov	sp, r7
 8019604:	bd80      	pop	{r7, pc}
 8019606:	bf00      	nop
 8019608:	200013d4 	.word	0x200013d4

0801960c <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 801960c:	b580      	push	{r7, lr}
 801960e:	b084      	sub	sp, #16
 8019610:	af00      	add	r7, sp, #0
 8019612:	4603      	mov	r3, r0
 8019614:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8019616:	f7e9 f858 	bl	80026ca <RBI_IsDCDC>
 801961a:	4603      	mov	r3, r0
 801961c:	2b01      	cmp	r3, #1
 801961e:	d112      	bne.n	8019646 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8019620:	f640 1023 	movw	r0, #2339	@ 0x923
 8019624:	f7ff fe0e 	bl	8019244 <SUBGRF_ReadRegister>
 8019628:	4603      	mov	r3, r0
 801962a:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 801962c:	7bfb      	ldrb	r3, [r7, #15]
 801962e:	f023 0306 	bic.w	r3, r3, #6
 8019632:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8019634:	7bfa      	ldrb	r2, [r7, #15]
 8019636:	79fb      	ldrb	r3, [r7, #7]
 8019638:	4313      	orrs	r3, r2
 801963a:	b2db      	uxtb	r3, r3
 801963c:	4619      	mov	r1, r3
 801963e:	f640 1023 	movw	r0, #2339	@ 0x923
 8019642:	f7ff fdeb 	bl	801921c <SUBGRF_WriteRegister>
  }
}
 8019646:	bf00      	nop
 8019648:	3710      	adds	r7, #16
 801964a:	46bd      	mov	sp, r7
 801964c:	bd80      	pop	{r7, pc}
	...

08019650 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8019650:	b480      	push	{r7}
 8019652:	b085      	sub	sp, #20
 8019654:	af00      	add	r7, sp, #0
 8019656:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 8019658:	687b      	ldr	r3, [r7, #4]
 801965a:	2b00      	cmp	r3, #0
 801965c:	d101      	bne.n	8019662 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 801965e:	231f      	movs	r3, #31
 8019660:	e017      	b.n	8019692 <SUBGRF_GetFskBandwidthRegValue+0x42>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8019662:	2300      	movs	r3, #0
 8019664:	73fb      	strb	r3, [r7, #15]
 8019666:	e00f      	b.n	8019688 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8019668:	7bfb      	ldrb	r3, [r7, #15]
 801966a:	4a0c      	ldr	r2, [pc, #48]	@ (801969c <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801966c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8019670:	687a      	ldr	r2, [r7, #4]
 8019672:	429a      	cmp	r2, r3
 8019674:	d205      	bcs.n	8019682 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 8019676:	7bfb      	ldrb	r3, [r7, #15]
 8019678:	4a08      	ldr	r2, [pc, #32]	@ (801969c <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 801967a:	00db      	lsls	r3, r3, #3
 801967c:	4413      	add	r3, r2
 801967e:	791b      	ldrb	r3, [r3, #4]
 8019680:	e007      	b.n	8019692 <SUBGRF_GetFskBandwidthRegValue+0x42>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8019682:	7bfb      	ldrb	r3, [r7, #15]
 8019684:	3301      	adds	r3, #1
 8019686:	73fb      	strb	r3, [r7, #15]
 8019688:	7bfb      	ldrb	r3, [r7, #15]
 801968a:	2b15      	cmp	r3, #21
 801968c:	d9ec      	bls.n	8019668 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 801968e:	bf00      	nop
 8019690:	e7fd      	b.n	801968e <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 8019692:	4618      	mov	r0, r3
 8019694:	3714      	adds	r7, #20
 8019696:	46bd      	mov	sp, r7
 8019698:	bc80      	pop	{r7}
 801969a:	4770      	bx	lr
 801969c:	080214fc 	.word	0x080214fc

080196a0 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 80196a0:	b580      	push	{r7, lr}
 80196a2:	b08a      	sub	sp, #40	@ 0x28
 80196a4:	af00      	add	r7, sp, #0
 80196a6:	6078      	str	r0, [r7, #4]
 80196a8:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 80196aa:	4b35      	ldr	r3, [pc, #212]	@ (8019780 <SUBGRF_GetCFO+0xe0>)
 80196ac:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 80196ae:	f640 0007 	movw	r0, #2055	@ 0x807
 80196b2:	f7ff fdc7 	bl	8019244 <SUBGRF_ReadRegister>
 80196b6:	4603      	mov	r3, r0
 80196b8:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 80196ba:	7ffb      	ldrb	r3, [r7, #31]
 80196bc:	08db      	lsrs	r3, r3, #3
 80196be:	b2db      	uxtb	r3, r3
 80196c0:	f003 0303 	and.w	r3, r3, #3
 80196c4:	3328      	adds	r3, #40	@ 0x28
 80196c6:	443b      	add	r3, r7
 80196c8:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80196cc:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 80196ce:	7ffb      	ldrb	r3, [r7, #31]
 80196d0:	f003 0307 	and.w	r3, r3, #7
 80196d4:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 80196d6:	7fba      	ldrb	r2, [r7, #30]
 80196d8:	7f7b      	ldrb	r3, [r7, #29]
 80196da:	3301      	adds	r3, #1
 80196dc:	fa02 f303 	lsl.w	r3, r2, r3
 80196e0:	461a      	mov	r2, r3
 80196e2:	4b28      	ldr	r3, [pc, #160]	@ (8019784 <SUBGRF_GetCFO+0xe4>)
 80196e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80196e8:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 80196ea:	69ba      	ldr	r2, [r7, #24]
 80196ec:	687b      	ldr	r3, [r7, #4]
 80196ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80196f2:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 80196f4:	2301      	movs	r3, #1
 80196f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 80196fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80196fe:	697a      	ldr	r2, [r7, #20]
 8019700:	fb02 f303 	mul.w	r3, r2, r3
 8019704:	2b07      	cmp	r3, #7
 8019706:	d802      	bhi.n	801970e <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 8019708:	2302      	movs	r3, #2
 801970a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if (cf_osr * interp < 4)
 801970e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019712:	697a      	ldr	r2, [r7, #20]
 8019714:	fb02 f303 	mul.w	r3, r2, r3
 8019718:	2b03      	cmp	r3, #3
 801971a:	d802      	bhi.n	8019722 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 801971c:	2304      	movs	r3, #4
 801971e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8019722:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8019726:	69bb      	ldr	r3, [r7, #24]
 8019728:	fb02 f303 	mul.w	r3, r2, r3
 801972c:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801972e:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 8019732:	f7ff fd87 	bl	8019244 <SUBGRF_ReadRegister>
 8019736:	4603      	mov	r3, r0
 8019738:	021b      	lsls	r3, r3, #8
 801973a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 801973e:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 8019740:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 8019744:	f7ff fd7e 	bl	8019244 <SUBGRF_ReadRegister>
 8019748:	4603      	mov	r3, r0
 801974a:	461a      	mov	r2, r3
 801974c:	6a3b      	ldr	r3, [r7, #32]
 801974e:	4313      	orrs	r3, r2
 8019750:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8019752:	6a3b      	ldr	r3, [r7, #32]
 8019754:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8019758:	2b00      	cmp	r3, #0
 801975a:	d005      	beq.n	8019768 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 801975c:	6a3b      	ldr	r3, [r7, #32]
 801975e:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8019762:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8019766:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8019768:	693b      	ldr	r3, [r7, #16]
 801976a:	095b      	lsrs	r3, r3, #5
 801976c:	6a3a      	ldr	r2, [r7, #32]
 801976e:	fb02 f303 	mul.w	r3, r2, r3
 8019772:	11da      	asrs	r2, r3, #7
 8019774:	683b      	ldr	r3, [r7, #0]
 8019776:	601a      	str	r2, [r3, #0]
}
 8019778:	bf00      	nop
 801977a:	3728      	adds	r7, #40	@ 0x28
 801977c:	46bd      	mov	sp, r7
 801977e:	bd80      	pop	{r7, pc}
 8019780:	0c0a0804 	.word	0x0c0a0804
 8019784:	01e84800 	.word	0x01e84800

08019788 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 8019788:	b480      	push	{r7}
 801978a:	b087      	sub	sp, #28
 801978c:	af00      	add	r7, sp, #0
 801978e:	4603      	mov	r3, r0
 8019790:	60b9      	str	r1, [r7, #8]
 8019792:	607a      	str	r2, [r7, #4]
 8019794:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 8019796:	2300      	movs	r3, #0
 8019798:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 801979a:	f04f 33ff 	mov.w	r3, #4294967295
 801979e:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 80197a0:	697b      	ldr	r3, [r7, #20]
}
 80197a2:	4618      	mov	r0, r3
 80197a4:	371c      	adds	r7, #28
 80197a6:	46bd      	mov	sp, r7
 80197a8:	bc80      	pop	{r7}
 80197aa:	4770      	bx	lr

080197ac <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 80197ac:	b480      	push	{r7}
 80197ae:	b087      	sub	sp, #28
 80197b0:	af00      	add	r7, sp, #0
 80197b2:	4603      	mov	r3, r0
 80197b4:	60b9      	str	r1, [r7, #8]
 80197b6:	607a      	str	r2, [r7, #4]
 80197b8:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 80197ba:	2300      	movs	r3, #0
 80197bc:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 80197be:	f04f 33ff 	mov.w	r3, #4294967295
 80197c2:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 80197c4:	697b      	ldr	r3, [r7, #20]
}
 80197c6:	4618      	mov	r0, r3
 80197c8:	371c      	adds	r7, #28
 80197ca:	46bd      	mov	sp, r7
 80197cc:	bc80      	pop	{r7}
 80197ce:	4770      	bx	lr

080197d0 <RFW_DeInit>:
    return -1;
#endif /* RFW_ENABLE == 1 */
}

void RFW_DeInit( void )
{
 80197d0:	b480      	push	{r7}
 80197d2:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 80197d4:	bf00      	nop
 80197d6:	46bd      	mov	sp, r7
 80197d8:	bc80      	pop	{r7}
 80197da:	4770      	bx	lr

080197dc <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 80197dc:	b480      	push	{r7}
 80197de:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 80197e0:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 80197e2:	4618      	mov	r0, r3
 80197e4:	46bd      	mov	sp, r7
 80197e6:	bc80      	pop	{r7}
 80197e8:	4770      	bx	lr

080197ea <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 80197ea:	b480      	push	{r7}
 80197ec:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 80197ee:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 80197f0:	4618      	mov	r0, r3
 80197f2:	46bd      	mov	sp, r7
 80197f4:	bc80      	pop	{r7}
 80197f6:	4770      	bx	lr

080197f8 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 80197f8:	b480      	push	{r7}
 80197fa:	b083      	sub	sp, #12
 80197fc:	af00      	add	r7, sp, #0
 80197fe:	4603      	mov	r3, r0
 8019800:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 8019802:	bf00      	nop
 8019804:	370c      	adds	r7, #12
 8019806:	46bd      	mov	sp, r7
 8019808:	bc80      	pop	{r7}
 801980a:	4770      	bx	lr

0801980c <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 801980c:	b480      	push	{r7}
 801980e:	b087      	sub	sp, #28
 8019810:	af00      	add	r7, sp, #0
 8019812:	60f8      	str	r0, [r7, #12]
 8019814:	460b      	mov	r3, r1
 8019816:	607a      	str	r2, [r7, #4]
 8019818:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 801981a:	f04f 33ff 	mov.w	r3, #4294967295
 801981e:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 8019820:	697b      	ldr	r3, [r7, #20]
}
 8019822:	4618      	mov	r0, r3
 8019824:	371c      	adds	r7, #28
 8019826:	46bd      	mov	sp, r7
 8019828:	bc80      	pop	{r7}
 801982a:	4770      	bx	lr

0801982c <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 801982c:	b480      	push	{r7}
 801982e:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 8019830:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 8019834:	4618      	mov	r0, r3
 8019836:	46bd      	mov	sp, r7
 8019838:	bc80      	pop	{r7}
 801983a:	4770      	bx	lr

0801983c <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 801983c:	b480      	push	{r7}
 801983e:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 8019840:	bf00      	nop
 8019842:	46bd      	mov	sp, r7
 8019844:	bc80      	pop	{r7}
 8019846:	4770      	bx	lr

08019848 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 8019848:	b480      	push	{r7}
 801984a:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 801984c:	bf00      	nop
 801984e:	46bd      	mov	sp, r7
 8019850:	bc80      	pop	{r7}
 8019852:	4770      	bx	lr

08019854 <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 8019854:	b480      	push	{r7}
 8019856:	b083      	sub	sp, #12
 8019858:	af00      	add	r7, sp, #0
 801985a:	4603      	mov	r3, r0
 801985c:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 801985e:	bf00      	nop
 8019860:	370c      	adds	r7, #12
 8019862:	46bd      	mov	sp, r7
 8019864:	bc80      	pop	{r7}
 8019866:	4770      	bx	lr

08019868 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 8019868:	b580      	push	{r7, lr}
 801986a:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801986c:	2218      	movs	r2, #24
 801986e:	2100      	movs	r1, #0
 8019870:	4807      	ldr	r0, [pc, #28]	@ (8019890 <UTIL_ADV_TRACE_Init+0x28>)
 8019872:	f000 fb45 	bl	8019f00 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 8019876:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801987a:	2100      	movs	r1, #0
 801987c:	4805      	ldr	r0, [pc, #20]	@ (8019894 <UTIL_ADV_TRACE_Init+0x2c>)
 801987e:	f000 fb3f 	bl	8019f00 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 8019882:	4b05      	ldr	r3, [pc, #20]	@ (8019898 <UTIL_ADV_TRACE_Init+0x30>)
 8019884:	681b      	ldr	r3, [r3, #0]
 8019886:	4805      	ldr	r0, [pc, #20]	@ (801989c <UTIL_ADV_TRACE_Init+0x34>)
 8019888:	4798      	blx	r3
 801988a:	4603      	mov	r3, r0
}
 801988c:	4618      	mov	r0, r3
 801988e:	bd80      	pop	{r7, pc}
 8019890:	200013d8 	.word	0x200013d8
 8019894:	200013f0 	.word	0x200013f0
 8019898:	08020f44 	.word	0x08020f44
 801989c:	08019b09 	.word	0x08019b09

080198a0 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 80198a0:	b480      	push	{r7}
 80198a2:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 80198a4:	4b06      	ldr	r3, [pc, #24]	@ (80198c0 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 80198a6:	8a5a      	ldrh	r2, [r3, #18]
 80198a8:	4b05      	ldr	r3, [pc, #20]	@ (80198c0 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 80198aa:	8a1b      	ldrh	r3, [r3, #16]
 80198ac:	429a      	cmp	r2, r3
 80198ae:	d101      	bne.n	80198b4 <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 80198b0:	2301      	movs	r3, #1
 80198b2:	e000      	b.n	80198b6 <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 80198b4:	2300      	movs	r3, #0
}
 80198b6:	4618      	mov	r0, r3
 80198b8:	46bd      	mov	sp, r7
 80198ba:	bc80      	pop	{r7}
 80198bc:	4770      	bx	lr
 80198be:	bf00      	nop
 80198c0:	200013d8 	.word	0x200013d8

080198c4 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 80198c4:	b408      	push	{r3}
 80198c6:	b580      	push	{r7, lr}
 80198c8:	b08d      	sub	sp, #52	@ 0x34
 80198ca:	af00      	add	r7, sp, #0
 80198cc:	60f8      	str	r0, [r7, #12]
 80198ce:	60b9      	str	r1, [r7, #8]
 80198d0:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 80198d2:	2300      	movs	r3, #0
 80198d4:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 80198d6:	2300      	movs	r3, #0
 80198d8:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 80198da:	4b37      	ldr	r3, [pc, #220]	@ (80199b8 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 80198dc:	7a1b      	ldrb	r3, [r3, #8]
 80198de:	461a      	mov	r2, r3
 80198e0:	68fb      	ldr	r3, [r7, #12]
 80198e2:	4293      	cmp	r3, r2
 80198e4:	d902      	bls.n	80198ec <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 80198e6:	f06f 0304 	mvn.w	r3, #4
 80198ea:	e05e      	b.n	80199aa <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 80198ec:	4b32      	ldr	r3, [pc, #200]	@ (80199b8 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 80198ee:	68da      	ldr	r2, [r3, #12]
 80198f0:	68bb      	ldr	r3, [r7, #8]
 80198f2:	4013      	ands	r3, r2
 80198f4:	68ba      	ldr	r2, [r7, #8]
 80198f6:	429a      	cmp	r2, r3
 80198f8:	d002      	beq.n	8019900 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 80198fa:	f06f 0305 	mvn.w	r3, #5
 80198fe:	e054      	b.n	80199aa <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 8019900:	4b2d      	ldr	r3, [pc, #180]	@ (80199b8 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 8019902:	685b      	ldr	r3, [r3, #4]
 8019904:	2b00      	cmp	r3, #0
 8019906:	d00a      	beq.n	801991e <UTIL_ADV_TRACE_COND_FSend+0x5a>
 8019908:	687b      	ldr	r3, [r7, #4]
 801990a:	2b00      	cmp	r3, #0
 801990c:	d007      	beq.n	801991e <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801990e:	4b2a      	ldr	r3, [pc, #168]	@ (80199b8 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 8019910:	685b      	ldr	r3, [r3, #4]
 8019912:	f107 0116 	add.w	r1, r7, #22
 8019916:	f107 0218 	add.w	r2, r7, #24
 801991a:	4610      	mov	r0, r2
 801991c:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801991e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8019922:	62bb      	str	r3, [r7, #40]	@ 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8019924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019926:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8019928:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801992c:	4823      	ldr	r0, [pc, #140]	@ (80199bc <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801992e:	f001 f913 	bl	801ab58 <tiny_vsnprintf_like>
 8019932:	4603      	mov	r3, r0
 8019934:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  TRACE_Lock();
 8019936:	f000 f9f1 	bl	8019d1c <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801993a:	8afa      	ldrh	r2, [r7, #22]
 801993c:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801993e:	4413      	add	r3, r2
 8019940:	b29b      	uxth	r3, r3
 8019942:	f107 0214 	add.w	r2, r7, #20
 8019946:	4611      	mov	r1, r2
 8019948:	4618      	mov	r0, r3
 801994a:	f000 f969 	bl	8019c20 <TRACE_AllocateBufer>
 801994e:	4603      	mov	r3, r0
 8019950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019954:	d025      	beq.n	80199a2 <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 8019956:	2300      	movs	r3, #0
 8019958:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801995a:	e00e      	b.n	801997a <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801995c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801995e:	8aba      	ldrh	r2, [r7, #20]
 8019960:	3330      	adds	r3, #48	@ 0x30
 8019962:	443b      	add	r3, r7
 8019964:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 8019968:	4b15      	ldr	r3, [pc, #84]	@ (80199c0 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801996a:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801996c:	8abb      	ldrh	r3, [r7, #20]
 801996e:	3301      	adds	r3, #1
 8019970:	b29b      	uxth	r3, r3
 8019972:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 8019974:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8019976:	3301      	adds	r3, #1
 8019978:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801997a:	8afb      	ldrh	r3, [r7, #22]
 801997c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801997e:	429a      	cmp	r2, r3
 8019980:	d3ec      	bcc.n	801995c <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8019982:	8abb      	ldrh	r3, [r7, #20]
 8019984:	461a      	mov	r2, r3
 8019986:	4b0e      	ldr	r3, [pc, #56]	@ (80199c0 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 8019988:	18d0      	adds	r0, r2, r3
 801998a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801998c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801998e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8019992:	f001 f8e1 	bl	801ab58 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 8019996:	f000 f9df 	bl	8019d58 <TRACE_UnLock>

    return TRACE_Send();
 801999a:	f000 f831 	bl	8019a00 <TRACE_Send>
 801999e:	4603      	mov	r3, r0
 80199a0:	e003      	b.n	80199aa <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 80199a2:	f000 f9d9 	bl	8019d58 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 80199a6:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 80199aa:	4618      	mov	r0, r3
 80199ac:	3734      	adds	r7, #52	@ 0x34
 80199ae:	46bd      	mov	sp, r7
 80199b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80199b4:	b001      	add	sp, #4
 80199b6:	4770      	bx	lr
 80199b8:	200013d8 	.word	0x200013d8
 80199bc:	200017f0 	.word	0x200017f0
 80199c0:	200013f0 	.word	0x200013f0

080199c4 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 80199c4:	b480      	push	{r7}
 80199c6:	b083      	sub	sp, #12
 80199c8:	af00      	add	r7, sp, #0
 80199ca:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 80199cc:	4a03      	ldr	r2, [pc, #12]	@ (80199dc <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 80199ce:	687b      	ldr	r3, [r7, #4]
 80199d0:	6053      	str	r3, [r2, #4]
}
 80199d2:	bf00      	nop
 80199d4:	370c      	adds	r7, #12
 80199d6:	46bd      	mov	sp, r7
 80199d8:	bc80      	pop	{r7}
 80199da:	4770      	bx	lr
 80199dc:	200013d8 	.word	0x200013d8

080199e0 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 80199e0:	b480      	push	{r7}
 80199e2:	b083      	sub	sp, #12
 80199e4:	af00      	add	r7, sp, #0
 80199e6:	4603      	mov	r3, r0
 80199e8:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 80199ea:	4a04      	ldr	r2, [pc, #16]	@ (80199fc <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 80199ec:	79fb      	ldrb	r3, [r7, #7]
 80199ee:	7213      	strb	r3, [r2, #8]
}
 80199f0:	bf00      	nop
 80199f2:	370c      	adds	r7, #12
 80199f4:	46bd      	mov	sp, r7
 80199f6:	bc80      	pop	{r7}
 80199f8:	4770      	bx	lr
 80199fa:	bf00      	nop
 80199fc:	200013d8 	.word	0x200013d8

08019a00 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 8019a00:	b580      	push	{r7, lr}
 8019a02:	b088      	sub	sp, #32
 8019a04:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8019a06:	2300      	movs	r3, #0
 8019a08:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 8019a0a:	2300      	movs	r3, #0
 8019a0c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019a0e:	f3ef 8310 	mrs	r3, PRIMASK
 8019a12:	613b      	str	r3, [r7, #16]
  return(result);
 8019a14:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 8019a16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019a18:	b672      	cpsid	i
}
 8019a1a:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 8019a1c:	f000 f9ba 	bl	8019d94 <TRACE_IsLocked>
 8019a20:	4603      	mov	r3, r0
 8019a22:	2b00      	cmp	r3, #0
 8019a24:	d15d      	bne.n	8019ae2 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 8019a26:	f000 f979 	bl	8019d1c <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 8019a2a:	4b34      	ldr	r3, [pc, #208]	@ (8019afc <TRACE_Send+0xfc>)
 8019a2c:	8a1a      	ldrh	r2, [r3, #16]
 8019a2e:	4b33      	ldr	r3, [pc, #204]	@ (8019afc <TRACE_Send+0xfc>)
 8019a30:	8a5b      	ldrh	r3, [r3, #18]
 8019a32:	429a      	cmp	r2, r3
 8019a34:	d04d      	beq.n	8019ad2 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8019a36:	4b31      	ldr	r3, [pc, #196]	@ (8019afc <TRACE_Send+0xfc>)
 8019a38:	789b      	ldrb	r3, [r3, #2]
 8019a3a:	2b01      	cmp	r3, #1
 8019a3c:	d117      	bne.n	8019a6e <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 8019a3e:	4b2f      	ldr	r3, [pc, #188]	@ (8019afc <TRACE_Send+0xfc>)
 8019a40:	881a      	ldrh	r2, [r3, #0]
 8019a42:	4b2e      	ldr	r3, [pc, #184]	@ (8019afc <TRACE_Send+0xfc>)
 8019a44:	8a1b      	ldrh	r3, [r3, #16]
 8019a46:	1ad3      	subs	r3, r2, r3
 8019a48:	b29a      	uxth	r2, r3
 8019a4a:	4b2c      	ldr	r3, [pc, #176]	@ (8019afc <TRACE_Send+0xfc>)
 8019a4c:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8019a4e:	4b2b      	ldr	r3, [pc, #172]	@ (8019afc <TRACE_Send+0xfc>)
 8019a50:	2202      	movs	r2, #2
 8019a52:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 8019a54:	4b29      	ldr	r3, [pc, #164]	@ (8019afc <TRACE_Send+0xfc>)
 8019a56:	2200      	movs	r2, #0
 8019a58:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8019a5a:	4b28      	ldr	r3, [pc, #160]	@ (8019afc <TRACE_Send+0xfc>)
 8019a5c:	8a9b      	ldrh	r3, [r3, #20]
 8019a5e:	2b00      	cmp	r3, #0
 8019a60:	d105      	bne.n	8019a6e <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8019a62:	4b26      	ldr	r3, [pc, #152]	@ (8019afc <TRACE_Send+0xfc>)
 8019a64:	2200      	movs	r2, #0
 8019a66:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 8019a68:	4b24      	ldr	r3, [pc, #144]	@ (8019afc <TRACE_Send+0xfc>)
 8019a6a:	2200      	movs	r2, #0
 8019a6c:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8019a6e:	4b23      	ldr	r3, [pc, #140]	@ (8019afc <TRACE_Send+0xfc>)
 8019a70:	789b      	ldrb	r3, [r3, #2]
 8019a72:	2b00      	cmp	r3, #0
 8019a74:	d115      	bne.n	8019aa2 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8019a76:	4b21      	ldr	r3, [pc, #132]	@ (8019afc <TRACE_Send+0xfc>)
 8019a78:	8a5a      	ldrh	r2, [r3, #18]
 8019a7a:	4b20      	ldr	r3, [pc, #128]	@ (8019afc <TRACE_Send+0xfc>)
 8019a7c:	8a1b      	ldrh	r3, [r3, #16]
 8019a7e:	429a      	cmp	r2, r3
 8019a80:	d908      	bls.n	8019a94 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8019a82:	4b1e      	ldr	r3, [pc, #120]	@ (8019afc <TRACE_Send+0xfc>)
 8019a84:	8a5a      	ldrh	r2, [r3, #18]
 8019a86:	4b1d      	ldr	r3, [pc, #116]	@ (8019afc <TRACE_Send+0xfc>)
 8019a88:	8a1b      	ldrh	r3, [r3, #16]
 8019a8a:	1ad3      	subs	r3, r2, r3
 8019a8c:	b29a      	uxth	r2, r3
 8019a8e:	4b1b      	ldr	r3, [pc, #108]	@ (8019afc <TRACE_Send+0xfc>)
 8019a90:	829a      	strh	r2, [r3, #20]
 8019a92:	e006      	b.n	8019aa2 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8019a94:	4b19      	ldr	r3, [pc, #100]	@ (8019afc <TRACE_Send+0xfc>)
 8019a96:	8a1b      	ldrh	r3, [r3, #16]
 8019a98:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 8019a9c:	b29a      	uxth	r2, r3
 8019a9e:	4b17      	ldr	r3, [pc, #92]	@ (8019afc <TRACE_Send+0xfc>)
 8019aa0:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8019aa2:	4b16      	ldr	r3, [pc, #88]	@ (8019afc <TRACE_Send+0xfc>)
 8019aa4:	8a1b      	ldrh	r3, [r3, #16]
 8019aa6:	461a      	mov	r2, r3
 8019aa8:	4b15      	ldr	r3, [pc, #84]	@ (8019b00 <TRACE_Send+0x100>)
 8019aaa:	4413      	add	r3, r2
 8019aac:	61bb      	str	r3, [r7, #24]
 8019aae:	697b      	ldr	r3, [r7, #20]
 8019ab0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019ab2:	68fb      	ldr	r3, [r7, #12]
 8019ab4:	f383 8810 	msr	PRIMASK, r3
}
 8019ab8:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 8019aba:	f7e7 fe09 	bl	80016d0 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8019abe:	4b11      	ldr	r3, [pc, #68]	@ (8019b04 <TRACE_Send+0x104>)
 8019ac0:	68db      	ldr	r3, [r3, #12]
 8019ac2:	4a0e      	ldr	r2, [pc, #56]	@ (8019afc <TRACE_Send+0xfc>)
 8019ac4:	8a92      	ldrh	r2, [r2, #20]
 8019ac6:	4611      	mov	r1, r2
 8019ac8:	69b8      	ldr	r0, [r7, #24]
 8019aca:	4798      	blx	r3
 8019acc:	4603      	mov	r3, r0
 8019ace:	77fb      	strb	r3, [r7, #31]
 8019ad0:	e00d      	b.n	8019aee <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 8019ad2:	f000 f941 	bl	8019d58 <TRACE_UnLock>
 8019ad6:	697b      	ldr	r3, [r7, #20]
 8019ad8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019ada:	68bb      	ldr	r3, [r7, #8]
 8019adc:	f383 8810 	msr	PRIMASK, r3
}
 8019ae0:	e005      	b.n	8019aee <TRACE_Send+0xee>
 8019ae2:	697b      	ldr	r3, [r7, #20]
 8019ae4:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019ae6:	687b      	ldr	r3, [r7, #4]
 8019ae8:	f383 8810 	msr	PRIMASK, r3
}
 8019aec:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 8019aee:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019af2:	4618      	mov	r0, r3
 8019af4:	3720      	adds	r7, #32
 8019af6:	46bd      	mov	sp, r7
 8019af8:	bd80      	pop	{r7, pc}
 8019afa:	bf00      	nop
 8019afc:	200013d8 	.word	0x200013d8
 8019b00:	200013f0 	.word	0x200013f0
 8019b04:	08020f44 	.word	0x08020f44

08019b08 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 8019b08:	b580      	push	{r7, lr}
 8019b0a:	b088      	sub	sp, #32
 8019b0c:	af00      	add	r7, sp, #0
 8019b0e:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 8019b10:	2300      	movs	r3, #0
 8019b12:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019b14:	f3ef 8310 	mrs	r3, PRIMASK
 8019b18:	617b      	str	r3, [r7, #20]
  return(result);
 8019b1a:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 8019b1c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 8019b1e:	b672      	cpsid	i
}
 8019b20:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 8019b22:	4b3c      	ldr	r3, [pc, #240]	@ (8019c14 <TRACE_TxCpltCallback+0x10c>)
 8019b24:	789b      	ldrb	r3, [r3, #2]
 8019b26:	2b02      	cmp	r3, #2
 8019b28:	d106      	bne.n	8019b38 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8019b2a:	4b3a      	ldr	r3, [pc, #232]	@ (8019c14 <TRACE_TxCpltCallback+0x10c>)
 8019b2c:	2200      	movs	r2, #0
 8019b2e:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 8019b30:	4b38      	ldr	r3, [pc, #224]	@ (8019c14 <TRACE_TxCpltCallback+0x10c>)
 8019b32:	2200      	movs	r2, #0
 8019b34:	821a      	strh	r2, [r3, #16]
 8019b36:	e00a      	b.n	8019b4e <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 8019b38:	4b36      	ldr	r3, [pc, #216]	@ (8019c14 <TRACE_TxCpltCallback+0x10c>)
 8019b3a:	8a1a      	ldrh	r2, [r3, #16]
 8019b3c:	4b35      	ldr	r3, [pc, #212]	@ (8019c14 <TRACE_TxCpltCallback+0x10c>)
 8019b3e:	8a9b      	ldrh	r3, [r3, #20]
 8019b40:	4413      	add	r3, r2
 8019b42:	b29b      	uxth	r3, r3
 8019b44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8019b48:	b29a      	uxth	r2, r3
 8019b4a:	4b32      	ldr	r3, [pc, #200]	@ (8019c14 <TRACE_TxCpltCallback+0x10c>)
 8019b4c:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 8019b4e:	4b31      	ldr	r3, [pc, #196]	@ (8019c14 <TRACE_TxCpltCallback+0x10c>)
 8019b50:	8a1a      	ldrh	r2, [r3, #16]
 8019b52:	4b30      	ldr	r3, [pc, #192]	@ (8019c14 <TRACE_TxCpltCallback+0x10c>)
 8019b54:	8a5b      	ldrh	r3, [r3, #18]
 8019b56:	429a      	cmp	r2, r3
 8019b58:	d04d      	beq.n	8019bf6 <TRACE_TxCpltCallback+0xee>
 8019b5a:	4b2e      	ldr	r3, [pc, #184]	@ (8019c14 <TRACE_TxCpltCallback+0x10c>)
 8019b5c:	8adb      	ldrh	r3, [r3, #22]
 8019b5e:	2b01      	cmp	r3, #1
 8019b60:	d149      	bne.n	8019bf6 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8019b62:	4b2c      	ldr	r3, [pc, #176]	@ (8019c14 <TRACE_TxCpltCallback+0x10c>)
 8019b64:	789b      	ldrb	r3, [r3, #2]
 8019b66:	2b01      	cmp	r3, #1
 8019b68:	d117      	bne.n	8019b9a <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 8019b6a:	4b2a      	ldr	r3, [pc, #168]	@ (8019c14 <TRACE_TxCpltCallback+0x10c>)
 8019b6c:	881a      	ldrh	r2, [r3, #0]
 8019b6e:	4b29      	ldr	r3, [pc, #164]	@ (8019c14 <TRACE_TxCpltCallback+0x10c>)
 8019b70:	8a1b      	ldrh	r3, [r3, #16]
 8019b72:	1ad3      	subs	r3, r2, r3
 8019b74:	b29a      	uxth	r2, r3
 8019b76:	4b27      	ldr	r3, [pc, #156]	@ (8019c14 <TRACE_TxCpltCallback+0x10c>)
 8019b78:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8019b7a:	4b26      	ldr	r3, [pc, #152]	@ (8019c14 <TRACE_TxCpltCallback+0x10c>)
 8019b7c:	2202      	movs	r2, #2
 8019b7e:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 8019b80:	4b24      	ldr	r3, [pc, #144]	@ (8019c14 <TRACE_TxCpltCallback+0x10c>)
 8019b82:	2200      	movs	r2, #0
 8019b84:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8019b86:	4b23      	ldr	r3, [pc, #140]	@ (8019c14 <TRACE_TxCpltCallback+0x10c>)
 8019b88:	8a9b      	ldrh	r3, [r3, #20]
 8019b8a:	2b00      	cmp	r3, #0
 8019b8c:	d105      	bne.n	8019b9a <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8019b8e:	4b21      	ldr	r3, [pc, #132]	@ (8019c14 <TRACE_TxCpltCallback+0x10c>)
 8019b90:	2200      	movs	r2, #0
 8019b92:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 8019b94:	4b1f      	ldr	r3, [pc, #124]	@ (8019c14 <TRACE_TxCpltCallback+0x10c>)
 8019b96:	2200      	movs	r2, #0
 8019b98:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8019b9a:	4b1e      	ldr	r3, [pc, #120]	@ (8019c14 <TRACE_TxCpltCallback+0x10c>)
 8019b9c:	789b      	ldrb	r3, [r3, #2]
 8019b9e:	2b00      	cmp	r3, #0
 8019ba0:	d115      	bne.n	8019bce <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8019ba2:	4b1c      	ldr	r3, [pc, #112]	@ (8019c14 <TRACE_TxCpltCallback+0x10c>)
 8019ba4:	8a5a      	ldrh	r2, [r3, #18]
 8019ba6:	4b1b      	ldr	r3, [pc, #108]	@ (8019c14 <TRACE_TxCpltCallback+0x10c>)
 8019ba8:	8a1b      	ldrh	r3, [r3, #16]
 8019baa:	429a      	cmp	r2, r3
 8019bac:	d908      	bls.n	8019bc0 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8019bae:	4b19      	ldr	r3, [pc, #100]	@ (8019c14 <TRACE_TxCpltCallback+0x10c>)
 8019bb0:	8a5a      	ldrh	r2, [r3, #18]
 8019bb2:	4b18      	ldr	r3, [pc, #96]	@ (8019c14 <TRACE_TxCpltCallback+0x10c>)
 8019bb4:	8a1b      	ldrh	r3, [r3, #16]
 8019bb6:	1ad3      	subs	r3, r2, r3
 8019bb8:	b29a      	uxth	r2, r3
 8019bba:	4b16      	ldr	r3, [pc, #88]	@ (8019c14 <TRACE_TxCpltCallback+0x10c>)
 8019bbc:	829a      	strh	r2, [r3, #20]
 8019bbe:	e006      	b.n	8019bce <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8019bc0:	4b14      	ldr	r3, [pc, #80]	@ (8019c14 <TRACE_TxCpltCallback+0x10c>)
 8019bc2:	8a1b      	ldrh	r3, [r3, #16]
 8019bc4:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 8019bc8:	b29a      	uxth	r2, r3
 8019bca:	4b12      	ldr	r3, [pc, #72]	@ (8019c14 <TRACE_TxCpltCallback+0x10c>)
 8019bcc:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8019bce:	4b11      	ldr	r3, [pc, #68]	@ (8019c14 <TRACE_TxCpltCallback+0x10c>)
 8019bd0:	8a1b      	ldrh	r3, [r3, #16]
 8019bd2:	461a      	mov	r2, r3
 8019bd4:	4b10      	ldr	r3, [pc, #64]	@ (8019c18 <TRACE_TxCpltCallback+0x110>)
 8019bd6:	4413      	add	r3, r2
 8019bd8:	61fb      	str	r3, [r7, #28]
 8019bda:	69bb      	ldr	r3, [r7, #24]
 8019bdc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019bde:	693b      	ldr	r3, [r7, #16]
 8019be0:	f383 8810 	msr	PRIMASK, r3
}
 8019be4:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8019be6:	4b0d      	ldr	r3, [pc, #52]	@ (8019c1c <TRACE_TxCpltCallback+0x114>)
 8019be8:	68db      	ldr	r3, [r3, #12]
 8019bea:	4a0a      	ldr	r2, [pc, #40]	@ (8019c14 <TRACE_TxCpltCallback+0x10c>)
 8019bec:	8a92      	ldrh	r2, [r2, #20]
 8019bee:	4611      	mov	r1, r2
 8019bf0:	69f8      	ldr	r0, [r7, #28]
 8019bf2:	4798      	blx	r3
 8019bf4:	e00a      	b.n	8019c0c <TRACE_TxCpltCallback+0x104>
 8019bf6:	69bb      	ldr	r3, [r7, #24]
 8019bf8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019bfa:	68fb      	ldr	r3, [r7, #12]
 8019bfc:	f383 8810 	msr	PRIMASK, r3
}
 8019c00:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 8019c02:	f7e7 fd6d 	bl	80016e0 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 8019c06:	f000 f8a7 	bl	8019d58 <TRACE_UnLock>
  }
}
 8019c0a:	bf00      	nop
 8019c0c:	bf00      	nop
 8019c0e:	3720      	adds	r7, #32
 8019c10:	46bd      	mov	sp, r7
 8019c12:	bd80      	pop	{r7, pc}
 8019c14:	200013d8 	.word	0x200013d8
 8019c18:	200013f0 	.word	0x200013f0
 8019c1c:	08020f44 	.word	0x08020f44

08019c20 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 8019c20:	b480      	push	{r7}
 8019c22:	b087      	sub	sp, #28
 8019c24:	af00      	add	r7, sp, #0
 8019c26:	4603      	mov	r3, r0
 8019c28:	6039      	str	r1, [r7, #0]
 8019c2a:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 8019c2c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019c30:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019c32:	f3ef 8310 	mrs	r3, PRIMASK
 8019c36:	60fb      	str	r3, [r7, #12]
  return(result);
 8019c38:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 8019c3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8019c3c:	b672      	cpsid	i
}
 8019c3e:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8019c40:	4b35      	ldr	r3, [pc, #212]	@ (8019d18 <TRACE_AllocateBufer+0xf8>)
 8019c42:	8a5a      	ldrh	r2, [r3, #18]
 8019c44:	4b34      	ldr	r3, [pc, #208]	@ (8019d18 <TRACE_AllocateBufer+0xf8>)
 8019c46:	8a1b      	ldrh	r3, [r3, #16]
 8019c48:	429a      	cmp	r2, r3
 8019c4a:	d11b      	bne.n	8019c84 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8019c4c:	4b32      	ldr	r3, [pc, #200]	@ (8019d18 <TRACE_AllocateBufer+0xf8>)
 8019c4e:	8a5b      	ldrh	r3, [r3, #18]
 8019c50:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 8019c54:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 8019c56:	88fa      	ldrh	r2, [r7, #6]
 8019c58:	8afb      	ldrh	r3, [r7, #22]
 8019c5a:	429a      	cmp	r2, r3
 8019c5c:	d33a      	bcc.n	8019cd4 <TRACE_AllocateBufer+0xb4>
 8019c5e:	4b2e      	ldr	r3, [pc, #184]	@ (8019d18 <TRACE_AllocateBufer+0xf8>)
 8019c60:	8a1b      	ldrh	r3, [r3, #16]
 8019c62:	88fa      	ldrh	r2, [r7, #6]
 8019c64:	429a      	cmp	r2, r3
 8019c66:	d235      	bcs.n	8019cd4 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8019c68:	4b2b      	ldr	r3, [pc, #172]	@ (8019d18 <TRACE_AllocateBufer+0xf8>)
 8019c6a:	2201      	movs	r2, #1
 8019c6c:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8019c6e:	4b2a      	ldr	r3, [pc, #168]	@ (8019d18 <TRACE_AllocateBufer+0xf8>)
 8019c70:	8a5a      	ldrh	r2, [r3, #18]
 8019c72:	4b29      	ldr	r3, [pc, #164]	@ (8019d18 <TRACE_AllocateBufer+0xf8>)
 8019c74:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8019c76:	4b28      	ldr	r3, [pc, #160]	@ (8019d18 <TRACE_AllocateBufer+0xf8>)
 8019c78:	8a1b      	ldrh	r3, [r3, #16]
 8019c7a:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 8019c7c:	4b26      	ldr	r3, [pc, #152]	@ (8019d18 <TRACE_AllocateBufer+0xf8>)
 8019c7e:	2200      	movs	r2, #0
 8019c80:	825a      	strh	r2, [r3, #18]
 8019c82:	e027      	b.n	8019cd4 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8019c84:	4b24      	ldr	r3, [pc, #144]	@ (8019d18 <TRACE_AllocateBufer+0xf8>)
 8019c86:	8a5a      	ldrh	r2, [r3, #18]
 8019c88:	4b23      	ldr	r3, [pc, #140]	@ (8019d18 <TRACE_AllocateBufer+0xf8>)
 8019c8a:	8a1b      	ldrh	r3, [r3, #16]
 8019c8c:	429a      	cmp	r2, r3
 8019c8e:	d91b      	bls.n	8019cc8 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8019c90:	4b21      	ldr	r3, [pc, #132]	@ (8019d18 <TRACE_AllocateBufer+0xf8>)
 8019c92:	8a5b      	ldrh	r3, [r3, #18]
 8019c94:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 8019c98:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 8019c9a:	88fa      	ldrh	r2, [r7, #6]
 8019c9c:	8afb      	ldrh	r3, [r7, #22]
 8019c9e:	429a      	cmp	r2, r3
 8019ca0:	d318      	bcc.n	8019cd4 <TRACE_AllocateBufer+0xb4>
 8019ca2:	4b1d      	ldr	r3, [pc, #116]	@ (8019d18 <TRACE_AllocateBufer+0xf8>)
 8019ca4:	8a1b      	ldrh	r3, [r3, #16]
 8019ca6:	88fa      	ldrh	r2, [r7, #6]
 8019ca8:	429a      	cmp	r2, r3
 8019caa:	d213      	bcs.n	8019cd4 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8019cac:	4b1a      	ldr	r3, [pc, #104]	@ (8019d18 <TRACE_AllocateBufer+0xf8>)
 8019cae:	2201      	movs	r2, #1
 8019cb0:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8019cb2:	4b19      	ldr	r3, [pc, #100]	@ (8019d18 <TRACE_AllocateBufer+0xf8>)
 8019cb4:	8a5a      	ldrh	r2, [r3, #18]
 8019cb6:	4b18      	ldr	r3, [pc, #96]	@ (8019d18 <TRACE_AllocateBufer+0xf8>)
 8019cb8:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8019cba:	4b17      	ldr	r3, [pc, #92]	@ (8019d18 <TRACE_AllocateBufer+0xf8>)
 8019cbc:	8a1b      	ldrh	r3, [r3, #16]
 8019cbe:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8019cc0:	4b15      	ldr	r3, [pc, #84]	@ (8019d18 <TRACE_AllocateBufer+0xf8>)
 8019cc2:	2200      	movs	r2, #0
 8019cc4:	825a      	strh	r2, [r3, #18]
 8019cc6:	e005      	b.n	8019cd4 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 8019cc8:	4b13      	ldr	r3, [pc, #76]	@ (8019d18 <TRACE_AllocateBufer+0xf8>)
 8019cca:	8a1a      	ldrh	r2, [r3, #16]
 8019ccc:	4b12      	ldr	r3, [pc, #72]	@ (8019d18 <TRACE_AllocateBufer+0xf8>)
 8019cce:	8a5b      	ldrh	r3, [r3, #18]
 8019cd0:	1ad3      	subs	r3, r2, r3
 8019cd2:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 8019cd4:	8afa      	ldrh	r2, [r7, #22]
 8019cd6:	88fb      	ldrh	r3, [r7, #6]
 8019cd8:	429a      	cmp	r2, r3
 8019cda:	d90f      	bls.n	8019cfc <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 8019cdc:	4b0e      	ldr	r3, [pc, #56]	@ (8019d18 <TRACE_AllocateBufer+0xf8>)
 8019cde:	8a5a      	ldrh	r2, [r3, #18]
 8019ce0:	683b      	ldr	r3, [r7, #0]
 8019ce2:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 8019ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8019d18 <TRACE_AllocateBufer+0xf8>)
 8019ce6:	8a5a      	ldrh	r2, [r3, #18]
 8019ce8:	88fb      	ldrh	r3, [r7, #6]
 8019cea:	4413      	add	r3, r2
 8019cec:	b29b      	uxth	r3, r3
 8019cee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8019cf2:	b29a      	uxth	r2, r3
 8019cf4:	4b08      	ldr	r3, [pc, #32]	@ (8019d18 <TRACE_AllocateBufer+0xf8>)
 8019cf6:	825a      	strh	r2, [r3, #18]
    ret = 0;
 8019cf8:	2300      	movs	r3, #0
 8019cfa:	82bb      	strh	r3, [r7, #20]
 8019cfc:	693b      	ldr	r3, [r7, #16]
 8019cfe:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019d00:	68bb      	ldr	r3, [r7, #8]
 8019d02:	f383 8810 	msr	PRIMASK, r3
}
 8019d06:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 8019d08:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 8019d0c:	4618      	mov	r0, r3
 8019d0e:	371c      	adds	r7, #28
 8019d10:	46bd      	mov	sp, r7
 8019d12:	bc80      	pop	{r7}
 8019d14:	4770      	bx	lr
 8019d16:	bf00      	nop
 8019d18:	200013d8 	.word	0x200013d8

08019d1c <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 8019d1c:	b480      	push	{r7}
 8019d1e:	b085      	sub	sp, #20
 8019d20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019d22:	f3ef 8310 	mrs	r3, PRIMASK
 8019d26:	607b      	str	r3, [r7, #4]
  return(result);
 8019d28:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 8019d2a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8019d2c:	b672      	cpsid	i
}
 8019d2e:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 8019d30:	4b08      	ldr	r3, [pc, #32]	@ (8019d54 <TRACE_Lock+0x38>)
 8019d32:	8adb      	ldrh	r3, [r3, #22]
 8019d34:	3301      	adds	r3, #1
 8019d36:	b29a      	uxth	r2, r3
 8019d38:	4b06      	ldr	r3, [pc, #24]	@ (8019d54 <TRACE_Lock+0x38>)
 8019d3a:	82da      	strh	r2, [r3, #22]
 8019d3c:	68fb      	ldr	r3, [r7, #12]
 8019d3e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019d40:	68bb      	ldr	r3, [r7, #8]
 8019d42:	f383 8810 	msr	PRIMASK, r3
}
 8019d46:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8019d48:	bf00      	nop
 8019d4a:	3714      	adds	r7, #20
 8019d4c:	46bd      	mov	sp, r7
 8019d4e:	bc80      	pop	{r7}
 8019d50:	4770      	bx	lr
 8019d52:	bf00      	nop
 8019d54:	200013d8 	.word	0x200013d8

08019d58 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 8019d58:	b480      	push	{r7}
 8019d5a:	b085      	sub	sp, #20
 8019d5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019d5e:	f3ef 8310 	mrs	r3, PRIMASK
 8019d62:	607b      	str	r3, [r7, #4]
  return(result);
 8019d64:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 8019d66:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8019d68:	b672      	cpsid	i
}
 8019d6a:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 8019d6c:	4b08      	ldr	r3, [pc, #32]	@ (8019d90 <TRACE_UnLock+0x38>)
 8019d6e:	8adb      	ldrh	r3, [r3, #22]
 8019d70:	3b01      	subs	r3, #1
 8019d72:	b29a      	uxth	r2, r3
 8019d74:	4b06      	ldr	r3, [pc, #24]	@ (8019d90 <TRACE_UnLock+0x38>)
 8019d76:	82da      	strh	r2, [r3, #22]
 8019d78:	68fb      	ldr	r3, [r7, #12]
 8019d7a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019d7c:	68bb      	ldr	r3, [r7, #8]
 8019d7e:	f383 8810 	msr	PRIMASK, r3
}
 8019d82:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8019d84:	bf00      	nop
 8019d86:	3714      	adds	r7, #20
 8019d88:	46bd      	mov	sp, r7
 8019d8a:	bc80      	pop	{r7}
 8019d8c:	4770      	bx	lr
 8019d8e:	bf00      	nop
 8019d90:	200013d8 	.word	0x200013d8

08019d94 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 8019d94:	b480      	push	{r7}
 8019d96:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 8019d98:	4b05      	ldr	r3, [pc, #20]	@ (8019db0 <TRACE_IsLocked+0x1c>)
 8019d9a:	8adb      	ldrh	r3, [r3, #22]
 8019d9c:	2b00      	cmp	r3, #0
 8019d9e:	bf14      	ite	ne
 8019da0:	2301      	movne	r3, #1
 8019da2:	2300      	moveq	r3, #0
 8019da4:	b2db      	uxtb	r3, r3
}
 8019da6:	4618      	mov	r0, r3
 8019da8:	46bd      	mov	sp, r7
 8019daa:	bc80      	pop	{r7}
 8019dac:	4770      	bx	lr
 8019dae:	bf00      	nop
 8019db0:	200013d8 	.word	0x200013d8

08019db4 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8019db4:	b480      	push	{r7}
 8019db6:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8019db8:	4b04      	ldr	r3, [pc, #16]	@ (8019dcc <UTIL_LPM_Init+0x18>)
 8019dba:	2200      	movs	r2, #0
 8019dbc:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8019dbe:	4b04      	ldr	r3, [pc, #16]	@ (8019dd0 <UTIL_LPM_Init+0x1c>)
 8019dc0:	2200      	movs	r2, #0
 8019dc2:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8019dc4:	bf00      	nop
 8019dc6:	46bd      	mov	sp, r7
 8019dc8:	bc80      	pop	{r7}
 8019dca:	4770      	bx	lr
 8019dcc:	200019f0 	.word	0x200019f0
 8019dd0:	200019f4 	.word	0x200019f4

08019dd4 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8019dd4:	b480      	push	{r7}
 8019dd6:	b087      	sub	sp, #28
 8019dd8:	af00      	add	r7, sp, #0
 8019dda:	6078      	str	r0, [r7, #4]
 8019ddc:	460b      	mov	r3, r1
 8019dde:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019de0:	f3ef 8310 	mrs	r3, PRIMASK
 8019de4:	613b      	str	r3, [r7, #16]
  return(result);
 8019de6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8019de8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019dea:	b672      	cpsid	i
}
 8019dec:	bf00      	nop
  
  switch( state )
 8019dee:	78fb      	ldrb	r3, [r7, #3]
 8019df0:	2b00      	cmp	r3, #0
 8019df2:	d008      	beq.n	8019e06 <UTIL_LPM_SetStopMode+0x32>
 8019df4:	2b01      	cmp	r3, #1
 8019df6:	d10e      	bne.n	8019e16 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8019df8:	4b0d      	ldr	r3, [pc, #52]	@ (8019e30 <UTIL_LPM_SetStopMode+0x5c>)
 8019dfa:	681a      	ldr	r2, [r3, #0]
 8019dfc:	687b      	ldr	r3, [r7, #4]
 8019dfe:	4313      	orrs	r3, r2
 8019e00:	4a0b      	ldr	r2, [pc, #44]	@ (8019e30 <UTIL_LPM_SetStopMode+0x5c>)
 8019e02:	6013      	str	r3, [r2, #0]
      break;
 8019e04:	e008      	b.n	8019e18 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 8019e06:	687b      	ldr	r3, [r7, #4]
 8019e08:	43da      	mvns	r2, r3
 8019e0a:	4b09      	ldr	r3, [pc, #36]	@ (8019e30 <UTIL_LPM_SetStopMode+0x5c>)
 8019e0c:	681b      	ldr	r3, [r3, #0]
 8019e0e:	4013      	ands	r3, r2
 8019e10:	4a07      	ldr	r2, [pc, #28]	@ (8019e30 <UTIL_LPM_SetStopMode+0x5c>)
 8019e12:	6013      	str	r3, [r2, #0]
      break;
 8019e14:	e000      	b.n	8019e18 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 8019e16:	bf00      	nop
 8019e18:	697b      	ldr	r3, [r7, #20]
 8019e1a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019e1c:	68fb      	ldr	r3, [r7, #12]
 8019e1e:	f383 8810 	msr	PRIMASK, r3
}
 8019e22:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8019e24:	bf00      	nop
 8019e26:	371c      	adds	r7, #28
 8019e28:	46bd      	mov	sp, r7
 8019e2a:	bc80      	pop	{r7}
 8019e2c:	4770      	bx	lr
 8019e2e:	bf00      	nop
 8019e30:	200019f0 	.word	0x200019f0

08019e34 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8019e34:	b480      	push	{r7}
 8019e36:	b087      	sub	sp, #28
 8019e38:	af00      	add	r7, sp, #0
 8019e3a:	6078      	str	r0, [r7, #4]
 8019e3c:	460b      	mov	r3, r1
 8019e3e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019e40:	f3ef 8310 	mrs	r3, PRIMASK
 8019e44:	613b      	str	r3, [r7, #16]
  return(result);
 8019e46:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8019e48:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019e4a:	b672      	cpsid	i
}
 8019e4c:	bf00      	nop
  
  switch(state)
 8019e4e:	78fb      	ldrb	r3, [r7, #3]
 8019e50:	2b00      	cmp	r3, #0
 8019e52:	d008      	beq.n	8019e66 <UTIL_LPM_SetOffMode+0x32>
 8019e54:	2b01      	cmp	r3, #1
 8019e56:	d10e      	bne.n	8019e76 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8019e58:	4b0d      	ldr	r3, [pc, #52]	@ (8019e90 <UTIL_LPM_SetOffMode+0x5c>)
 8019e5a:	681a      	ldr	r2, [r3, #0]
 8019e5c:	687b      	ldr	r3, [r7, #4]
 8019e5e:	4313      	orrs	r3, r2
 8019e60:	4a0b      	ldr	r2, [pc, #44]	@ (8019e90 <UTIL_LPM_SetOffMode+0x5c>)
 8019e62:	6013      	str	r3, [r2, #0]
      break;
 8019e64:	e008      	b.n	8019e78 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8019e66:	687b      	ldr	r3, [r7, #4]
 8019e68:	43da      	mvns	r2, r3
 8019e6a:	4b09      	ldr	r3, [pc, #36]	@ (8019e90 <UTIL_LPM_SetOffMode+0x5c>)
 8019e6c:	681b      	ldr	r3, [r3, #0]
 8019e6e:	4013      	ands	r3, r2
 8019e70:	4a07      	ldr	r2, [pc, #28]	@ (8019e90 <UTIL_LPM_SetOffMode+0x5c>)
 8019e72:	6013      	str	r3, [r2, #0]
      break;
 8019e74:	e000      	b.n	8019e78 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8019e76:	bf00      	nop
 8019e78:	697b      	ldr	r3, [r7, #20]
 8019e7a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019e7c:	68fb      	ldr	r3, [r7, #12]
 8019e7e:	f383 8810 	msr	PRIMASK, r3
}
 8019e82:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8019e84:	bf00      	nop
 8019e86:	371c      	adds	r7, #28
 8019e88:	46bd      	mov	sp, r7
 8019e8a:	bc80      	pop	{r7}
 8019e8c:	4770      	bx	lr
 8019e8e:	bf00      	nop
 8019e90:	200019f4 	.word	0x200019f4

08019e94 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8019e94:	b580      	push	{r7, lr}
 8019e96:	b084      	sub	sp, #16
 8019e98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019e9a:	f3ef 8310 	mrs	r3, PRIMASK
 8019e9e:	60bb      	str	r3, [r7, #8]
  return(result);
 8019ea0:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 8019ea2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8019ea4:	b672      	cpsid	i
}
 8019ea6:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8019ea8:	4b12      	ldr	r3, [pc, #72]	@ (8019ef4 <UTIL_LPM_EnterLowPower+0x60>)
 8019eaa:	681b      	ldr	r3, [r3, #0]
 8019eac:	2b00      	cmp	r3, #0
 8019eae:	d006      	beq.n	8019ebe <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8019eb0:	4b11      	ldr	r3, [pc, #68]	@ (8019ef8 <UTIL_LPM_EnterLowPower+0x64>)
 8019eb2:	681b      	ldr	r3, [r3, #0]
 8019eb4:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8019eb6:	4b10      	ldr	r3, [pc, #64]	@ (8019ef8 <UTIL_LPM_EnterLowPower+0x64>)
 8019eb8:	685b      	ldr	r3, [r3, #4]
 8019eba:	4798      	blx	r3
 8019ebc:	e010      	b.n	8019ee0 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8019ebe:	4b0f      	ldr	r3, [pc, #60]	@ (8019efc <UTIL_LPM_EnterLowPower+0x68>)
 8019ec0:	681b      	ldr	r3, [r3, #0]
 8019ec2:	2b00      	cmp	r3, #0
 8019ec4:	d006      	beq.n	8019ed4 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 8019ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8019ef8 <UTIL_LPM_EnterLowPower+0x64>)
 8019ec8:	689b      	ldr	r3, [r3, #8]
 8019eca:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8019ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8019ef8 <UTIL_LPM_EnterLowPower+0x64>)
 8019ece:	68db      	ldr	r3, [r3, #12]
 8019ed0:	4798      	blx	r3
 8019ed2:	e005      	b.n	8019ee0 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 8019ed4:	4b08      	ldr	r3, [pc, #32]	@ (8019ef8 <UTIL_LPM_EnterLowPower+0x64>)
 8019ed6:	691b      	ldr	r3, [r3, #16]
 8019ed8:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8019eda:	4b07      	ldr	r3, [pc, #28]	@ (8019ef8 <UTIL_LPM_EnterLowPower+0x64>)
 8019edc:	695b      	ldr	r3, [r3, #20]
 8019ede:	4798      	blx	r3
 8019ee0:	68fb      	ldr	r3, [r7, #12]
 8019ee2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019ee4:	687b      	ldr	r3, [r7, #4]
 8019ee6:	f383 8810 	msr	PRIMASK, r3
}
 8019eea:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8019eec:	bf00      	nop
 8019eee:	3710      	adds	r7, #16
 8019ef0:	46bd      	mov	sp, r7
 8019ef2:	bd80      	pop	{r7, pc}
 8019ef4:	200019f0 	.word	0x200019f0
 8019ef8:	08020eec 	.word	0x08020eec
 8019efc:	200019f4 	.word	0x200019f4

08019f00 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 8019f00:	b480      	push	{r7}
 8019f02:	b085      	sub	sp, #20
 8019f04:	af00      	add	r7, sp, #0
 8019f06:	6078      	str	r0, [r7, #4]
 8019f08:	460b      	mov	r3, r1
 8019f0a:	70fb      	strb	r3, [r7, #3]
 8019f0c:	4613      	mov	r3, r2
 8019f0e:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 8019f10:	687b      	ldr	r3, [r7, #4]
 8019f12:	60fb      	str	r3, [r7, #12]
  while( size-- )
 8019f14:	e004      	b.n	8019f20 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 8019f16:	68fb      	ldr	r3, [r7, #12]
 8019f18:	1c5a      	adds	r2, r3, #1
 8019f1a:	60fa      	str	r2, [r7, #12]
 8019f1c:	78fa      	ldrb	r2, [r7, #3]
 8019f1e:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8019f20:	883b      	ldrh	r3, [r7, #0]
 8019f22:	1e5a      	subs	r2, r3, #1
 8019f24:	803a      	strh	r2, [r7, #0]
 8019f26:	2b00      	cmp	r3, #0
 8019f28:	d1f5      	bne.n	8019f16 <UTIL_MEM_set_8+0x16>
  }
}
 8019f2a:	bf00      	nop
 8019f2c:	bf00      	nop
 8019f2e:	3714      	adds	r7, #20
 8019f30:	46bd      	mov	sp, r7
 8019f32:	bc80      	pop	{r7}
 8019f34:	4770      	bx	lr
	...

08019f38 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8019f38:	b580      	push	{r7, lr}
 8019f3a:	b090      	sub	sp, #64	@ 0x40
 8019f3c:	af00      	add	r7, sp, #0
 8019f3e:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8019f40:	4b73      	ldr	r3, [pc, #460]	@ (801a110 <UTIL_SEQ_Run+0x1d8>)
 8019f42:	681b      	ldr	r3, [r3, #0]
 8019f44:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 8019f46:	4b72      	ldr	r3, [pc, #456]	@ (801a110 <UTIL_SEQ_Run+0x1d8>)
 8019f48:	681a      	ldr	r2, [r3, #0]
 8019f4a:	687b      	ldr	r3, [r7, #4]
 8019f4c:	4013      	ands	r3, r2
 8019f4e:	4a70      	ldr	r2, [pc, #448]	@ (801a110 <UTIL_SEQ_Run+0x1d8>)
 8019f50:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8019f52:	4b70      	ldr	r3, [pc, #448]	@ (801a114 <UTIL_SEQ_Run+0x1dc>)
 8019f54:	681b      	ldr	r3, [r3, #0]
 8019f56:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8019f58:	4b6f      	ldr	r3, [pc, #444]	@ (801a118 <UTIL_SEQ_Run+0x1e0>)
 8019f5a:	681b      	ldr	r3, [r3, #0]
 8019f5c:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8019f5e:	4b6f      	ldr	r3, [pc, #444]	@ (801a11c <UTIL_SEQ_Run+0x1e4>)
 8019f60:	681b      	ldr	r3, [r3, #0]
 8019f62:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 8019f64:	4b6e      	ldr	r3, [pc, #440]	@ (801a120 <UTIL_SEQ_Run+0x1e8>)
 8019f66:	681b      	ldr	r3, [r3, #0]
 8019f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8019f6a:	e08d      	b.n	801a088 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8019f6c:	2300      	movs	r3, #0
 8019f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8019f70:	e002      	b.n	8019f78 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8019f72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019f74:	3301      	adds	r3, #1
 8019f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8019f78:	4a6a      	ldr	r2, [pc, #424]	@ (801a124 <UTIL_SEQ_Run+0x1ec>)
 8019f7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019f7c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8019f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019f82:	401a      	ands	r2, r3
 8019f84:	4b62      	ldr	r3, [pc, #392]	@ (801a110 <UTIL_SEQ_Run+0x1d8>)
 8019f86:	681b      	ldr	r3, [r3, #0]
 8019f88:	4013      	ands	r3, r2
 8019f8a:	2b00      	cmp	r3, #0
 8019f8c:	d0f1      	beq.n	8019f72 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8019f8e:	4a65      	ldr	r2, [pc, #404]	@ (801a124 <UTIL_SEQ_Run+0x1ec>)
 8019f90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019f92:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8019f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019f98:	401a      	ands	r2, r3
 8019f9a:	4b5d      	ldr	r3, [pc, #372]	@ (801a110 <UTIL_SEQ_Run+0x1d8>)
 8019f9c:	681b      	ldr	r3, [r3, #0]
 8019f9e:	4013      	ands	r3, r2
 8019fa0:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8019fa2:	4a60      	ldr	r2, [pc, #384]	@ (801a124 <UTIL_SEQ_Run+0x1ec>)
 8019fa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019fa6:	00db      	lsls	r3, r3, #3
 8019fa8:	4413      	add	r3, r2
 8019faa:	685a      	ldr	r2, [r3, #4]
 8019fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019fae:	4013      	ands	r3, r2
 8019fb0:	2b00      	cmp	r3, #0
 8019fb2:	d106      	bne.n	8019fc2 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8019fb4:	4a5b      	ldr	r2, [pc, #364]	@ (801a124 <UTIL_SEQ_Run+0x1ec>)
 8019fb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019fb8:	00db      	lsls	r3, r3, #3
 8019fba:	4413      	add	r3, r2
 8019fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8019fc0:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8019fc2:	4a58      	ldr	r2, [pc, #352]	@ (801a124 <UTIL_SEQ_Run+0x1ec>)
 8019fc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019fc6:	00db      	lsls	r3, r3, #3
 8019fc8:	4413      	add	r3, r2
 8019fca:	685a      	ldr	r2, [r3, #4]
 8019fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019fce:	4013      	ands	r3, r2
 8019fd0:	4618      	mov	r0, r3
 8019fd2:	f000 f907 	bl	801a1e4 <SEQ_BitPosition>
 8019fd6:	4603      	mov	r3, r0
 8019fd8:	461a      	mov	r2, r3
 8019fda:	4b53      	ldr	r3, [pc, #332]	@ (801a128 <UTIL_SEQ_Run+0x1f0>)
 8019fdc:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8019fde:	4a51      	ldr	r2, [pc, #324]	@ (801a124 <UTIL_SEQ_Run+0x1ec>)
 8019fe0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019fe2:	00db      	lsls	r3, r3, #3
 8019fe4:	4413      	add	r3, r2
 8019fe6:	685a      	ldr	r2, [r3, #4]
 8019fe8:	4b4f      	ldr	r3, [pc, #316]	@ (801a128 <UTIL_SEQ_Run+0x1f0>)
 8019fea:	681b      	ldr	r3, [r3, #0]
 8019fec:	2101      	movs	r1, #1
 8019fee:	fa01 f303 	lsl.w	r3, r1, r3
 8019ff2:	43db      	mvns	r3, r3
 8019ff4:	401a      	ands	r2, r3
 8019ff6:	494b      	ldr	r1, [pc, #300]	@ (801a124 <UTIL_SEQ_Run+0x1ec>)
 8019ff8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019ffa:	00db      	lsls	r3, r3, #3
 8019ffc:	440b      	add	r3, r1
 8019ffe:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a000:	f3ef 8310 	mrs	r3, PRIMASK
 801a004:	61bb      	str	r3, [r7, #24]
  return(result);
 801a006:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801a008:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801a00a:	b672      	cpsid	i
}
 801a00c:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801a00e:	4b46      	ldr	r3, [pc, #280]	@ (801a128 <UTIL_SEQ_Run+0x1f0>)
 801a010:	681b      	ldr	r3, [r3, #0]
 801a012:	2201      	movs	r2, #1
 801a014:	fa02 f303 	lsl.w	r3, r2, r3
 801a018:	43da      	mvns	r2, r3
 801a01a:	4b3e      	ldr	r3, [pc, #248]	@ (801a114 <UTIL_SEQ_Run+0x1dc>)
 801a01c:	681b      	ldr	r3, [r3, #0]
 801a01e:	4013      	ands	r3, r2
 801a020:	4a3c      	ldr	r2, [pc, #240]	@ (801a114 <UTIL_SEQ_Run+0x1dc>)
 801a022:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801a024:	2301      	movs	r3, #1
 801a026:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a028:	e013      	b.n	801a052 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801a02a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a02c:	3b01      	subs	r3, #1
 801a02e:	4a3d      	ldr	r2, [pc, #244]	@ (801a124 <UTIL_SEQ_Run+0x1ec>)
 801a030:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801a034:	4b3c      	ldr	r3, [pc, #240]	@ (801a128 <UTIL_SEQ_Run+0x1f0>)
 801a036:	681b      	ldr	r3, [r3, #0]
 801a038:	2201      	movs	r2, #1
 801a03a:	fa02 f303 	lsl.w	r3, r2, r3
 801a03e:	43da      	mvns	r2, r3
 801a040:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a042:	3b01      	subs	r3, #1
 801a044:	400a      	ands	r2, r1
 801a046:	4937      	ldr	r1, [pc, #220]	@ (801a124 <UTIL_SEQ_Run+0x1ec>)
 801a048:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801a04c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a04e:	3b01      	subs	r3, #1
 801a050:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a052:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a054:	2b00      	cmp	r3, #0
 801a056:	d1e8      	bne.n	801a02a <UTIL_SEQ_Run+0xf2>
 801a058:	6a3b      	ldr	r3, [r7, #32]
 801a05a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a05c:	697b      	ldr	r3, [r7, #20]
 801a05e:	f383 8810 	msr	PRIMASK, r3
}
 801a062:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801a064:	4b30      	ldr	r3, [pc, #192]	@ (801a128 <UTIL_SEQ_Run+0x1f0>)
 801a066:	681b      	ldr	r3, [r3, #0]
 801a068:	4a30      	ldr	r2, [pc, #192]	@ (801a12c <UTIL_SEQ_Run+0x1f4>)
 801a06a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a06e:	4798      	blx	r3

    local_taskset = TaskSet;
 801a070:	4b28      	ldr	r3, [pc, #160]	@ (801a114 <UTIL_SEQ_Run+0x1dc>)
 801a072:	681b      	ldr	r3, [r3, #0]
 801a074:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 801a076:	4b28      	ldr	r3, [pc, #160]	@ (801a118 <UTIL_SEQ_Run+0x1e0>)
 801a078:	681b      	ldr	r3, [r3, #0]
 801a07a:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 801a07c:	4b27      	ldr	r3, [pc, #156]	@ (801a11c <UTIL_SEQ_Run+0x1e4>)
 801a07e:	681b      	ldr	r3, [r3, #0]
 801a080:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 801a082:	4b27      	ldr	r3, [pc, #156]	@ (801a120 <UTIL_SEQ_Run+0x1e8>)
 801a084:	681b      	ldr	r3, [r3, #0]
 801a086:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801a088:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801a08a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a08c:	401a      	ands	r2, r3
 801a08e:	4b20      	ldr	r3, [pc, #128]	@ (801a110 <UTIL_SEQ_Run+0x1d8>)
 801a090:	681b      	ldr	r3, [r3, #0]
 801a092:	4013      	ands	r3, r2
 801a094:	2b00      	cmp	r3, #0
 801a096:	d005      	beq.n	801a0a4 <UTIL_SEQ_Run+0x16c>
 801a098:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a09a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a09c:	4013      	ands	r3, r2
 801a09e:	2b00      	cmp	r3, #0
 801a0a0:	f43f af64 	beq.w	8019f6c <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801a0a4:	4b20      	ldr	r3, [pc, #128]	@ (801a128 <UTIL_SEQ_Run+0x1f0>)
 801a0a6:	f04f 32ff 	mov.w	r2, #4294967295
 801a0aa:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801a0ac:	f000 f88e 	bl	801a1cc <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a0b0:	f3ef 8310 	mrs	r3, PRIMASK
 801a0b4:	613b      	str	r3, [r7, #16]
  return(result);
 801a0b6:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801a0b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801a0ba:	b672      	cpsid	i
}
 801a0bc:	bf00      	nop
  local_taskset = TaskSet;
 801a0be:	4b15      	ldr	r3, [pc, #84]	@ (801a114 <UTIL_SEQ_Run+0x1dc>)
 801a0c0:	681b      	ldr	r3, [r3, #0]
 801a0c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801a0c4:	4b14      	ldr	r3, [pc, #80]	@ (801a118 <UTIL_SEQ_Run+0x1e0>)
 801a0c6:	681b      	ldr	r3, [r3, #0]
 801a0c8:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801a0ca:	4b14      	ldr	r3, [pc, #80]	@ (801a11c <UTIL_SEQ_Run+0x1e4>)
 801a0cc:	681b      	ldr	r3, [r3, #0]
 801a0ce:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801a0d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801a0d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a0d4:	401a      	ands	r2, r3
 801a0d6:	4b0e      	ldr	r3, [pc, #56]	@ (801a110 <UTIL_SEQ_Run+0x1d8>)
 801a0d8:	681b      	ldr	r3, [r3, #0]
 801a0da:	4013      	ands	r3, r2
 801a0dc:	2b00      	cmp	r3, #0
 801a0de:	d107      	bne.n	801a0f0 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801a0e0:	4b0f      	ldr	r3, [pc, #60]	@ (801a120 <UTIL_SEQ_Run+0x1e8>)
 801a0e2:	681a      	ldr	r2, [r3, #0]
 801a0e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a0e6:	4013      	ands	r3, r2
 801a0e8:	2b00      	cmp	r3, #0
 801a0ea:	d101      	bne.n	801a0f0 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801a0ec:	f7e7 faca 	bl	8001684 <UTIL_SEQ_Idle>
 801a0f0:	69fb      	ldr	r3, [r7, #28]
 801a0f2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a0f4:	68fb      	ldr	r3, [r7, #12]
 801a0f6:	f383 8810 	msr	PRIMASK, r3
}
 801a0fa:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801a0fc:	f000 f86c 	bl	801a1d8 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801a100:	4a03      	ldr	r2, [pc, #12]	@ (801a110 <UTIL_SEQ_Run+0x1d8>)
 801a102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a104:	6013      	str	r3, [r2, #0]

  return;
 801a106:	bf00      	nop
}
 801a108:	3740      	adds	r7, #64	@ 0x40
 801a10a:	46bd      	mov	sp, r7
 801a10c:	bd80      	pop	{r7, pc}
 801a10e:	bf00      	nop
 801a110:	200000e0 	.word	0x200000e0
 801a114:	200019f8 	.word	0x200019f8
 801a118:	200019fc 	.word	0x200019fc
 801a11c:	200000dc 	.word	0x200000dc
 801a120:	20001a00 	.word	0x20001a00
 801a124:	20001a30 	.word	0x20001a30
 801a128:	20001a04 	.word	0x20001a04
 801a12c:	20001a08 	.word	0x20001a08

0801a130 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801a130:	b580      	push	{r7, lr}
 801a132:	b088      	sub	sp, #32
 801a134:	af00      	add	r7, sp, #0
 801a136:	60f8      	str	r0, [r7, #12]
 801a138:	60b9      	str	r1, [r7, #8]
 801a13a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a13c:	f3ef 8310 	mrs	r3, PRIMASK
 801a140:	617b      	str	r3, [r7, #20]
  return(result);
 801a142:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801a144:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801a146:	b672      	cpsid	i
}
 801a148:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801a14a:	68f8      	ldr	r0, [r7, #12]
 801a14c:	f000 f84a 	bl	801a1e4 <SEQ_BitPosition>
 801a150:	4603      	mov	r3, r0
 801a152:	4619      	mov	r1, r3
 801a154:	4a06      	ldr	r2, [pc, #24]	@ (801a170 <UTIL_SEQ_RegTask+0x40>)
 801a156:	687b      	ldr	r3, [r7, #4]
 801a158:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801a15c:	69fb      	ldr	r3, [r7, #28]
 801a15e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a160:	69bb      	ldr	r3, [r7, #24]
 801a162:	f383 8810 	msr	PRIMASK, r3
}
 801a166:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801a168:	bf00      	nop
}
 801a16a:	3720      	adds	r7, #32
 801a16c:	46bd      	mov	sp, r7
 801a16e:	bd80      	pop	{r7, pc}
 801a170:	20001a08 	.word	0x20001a08

0801a174 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801a174:	b480      	push	{r7}
 801a176:	b087      	sub	sp, #28
 801a178:	af00      	add	r7, sp, #0
 801a17a:	6078      	str	r0, [r7, #4]
 801a17c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a17e:	f3ef 8310 	mrs	r3, PRIMASK
 801a182:	60fb      	str	r3, [r7, #12]
  return(result);
 801a184:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801a186:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801a188:	b672      	cpsid	i
}
 801a18a:	bf00      	nop

  TaskSet |= TaskId_bm;
 801a18c:	4b0d      	ldr	r3, [pc, #52]	@ (801a1c4 <UTIL_SEQ_SetTask+0x50>)
 801a18e:	681a      	ldr	r2, [r3, #0]
 801a190:	687b      	ldr	r3, [r7, #4]
 801a192:	4313      	orrs	r3, r2
 801a194:	4a0b      	ldr	r2, [pc, #44]	@ (801a1c4 <UTIL_SEQ_SetTask+0x50>)
 801a196:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801a198:	4a0b      	ldr	r2, [pc, #44]	@ (801a1c8 <UTIL_SEQ_SetTask+0x54>)
 801a19a:	683b      	ldr	r3, [r7, #0]
 801a19c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801a1a0:	687b      	ldr	r3, [r7, #4]
 801a1a2:	431a      	orrs	r2, r3
 801a1a4:	4908      	ldr	r1, [pc, #32]	@ (801a1c8 <UTIL_SEQ_SetTask+0x54>)
 801a1a6:	683b      	ldr	r3, [r7, #0]
 801a1a8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801a1ac:	697b      	ldr	r3, [r7, #20]
 801a1ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a1b0:	693b      	ldr	r3, [r7, #16]
 801a1b2:	f383 8810 	msr	PRIMASK, r3
}
 801a1b6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801a1b8:	bf00      	nop
}
 801a1ba:	371c      	adds	r7, #28
 801a1bc:	46bd      	mov	sp, r7
 801a1be:	bc80      	pop	{r7}
 801a1c0:	4770      	bx	lr
 801a1c2:	bf00      	nop
 801a1c4:	200019f8 	.word	0x200019f8
 801a1c8:	20001a30 	.word	0x20001a30

0801a1cc <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801a1cc:	b480      	push	{r7}
 801a1ce:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801a1d0:	bf00      	nop
}
 801a1d2:	46bd      	mov	sp, r7
 801a1d4:	bc80      	pop	{r7}
 801a1d6:	4770      	bx	lr

0801a1d8 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801a1d8:	b480      	push	{r7}
 801a1da:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801a1dc:	bf00      	nop
}
 801a1de:	46bd      	mov	sp, r7
 801a1e0:	bc80      	pop	{r7}
 801a1e2:	4770      	bx	lr

0801a1e4 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801a1e4:	b480      	push	{r7}
 801a1e6:	b085      	sub	sp, #20
 801a1e8:	af00      	add	r7, sp, #0
 801a1ea:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801a1ec:	2300      	movs	r3, #0
 801a1ee:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801a1f0:	687b      	ldr	r3, [r7, #4]
 801a1f2:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801a1f4:	68bb      	ldr	r3, [r7, #8]
 801a1f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801a1fa:	d204      	bcs.n	801a206 <SEQ_BitPosition+0x22>
 801a1fc:	2310      	movs	r3, #16
 801a1fe:	73fb      	strb	r3, [r7, #15]
 801a200:	68bb      	ldr	r3, [r7, #8]
 801a202:	041b      	lsls	r3, r3, #16
 801a204:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801a206:	68bb      	ldr	r3, [r7, #8]
 801a208:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801a20c:	d205      	bcs.n	801a21a <SEQ_BitPosition+0x36>
 801a20e:	7bfb      	ldrb	r3, [r7, #15]
 801a210:	3308      	adds	r3, #8
 801a212:	73fb      	strb	r3, [r7, #15]
 801a214:	68bb      	ldr	r3, [r7, #8]
 801a216:	021b      	lsls	r3, r3, #8
 801a218:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801a21a:	68bb      	ldr	r3, [r7, #8]
 801a21c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801a220:	d205      	bcs.n	801a22e <SEQ_BitPosition+0x4a>
 801a222:	7bfb      	ldrb	r3, [r7, #15]
 801a224:	3304      	adds	r3, #4
 801a226:	73fb      	strb	r3, [r7, #15]
 801a228:	68bb      	ldr	r3, [r7, #8]
 801a22a:	011b      	lsls	r3, r3, #4
 801a22c:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801a22e:	68bb      	ldr	r3, [r7, #8]
 801a230:	0f1b      	lsrs	r3, r3, #28
 801a232:	4a07      	ldr	r2, [pc, #28]	@ (801a250 <SEQ_BitPosition+0x6c>)
 801a234:	5cd2      	ldrb	r2, [r2, r3]
 801a236:	7bfb      	ldrb	r3, [r7, #15]
 801a238:	4413      	add	r3, r2
 801a23a:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801a23c:	7bfb      	ldrb	r3, [r7, #15]
 801a23e:	f1c3 031f 	rsb	r3, r3, #31
 801a242:	b2db      	uxtb	r3, r3
}
 801a244:	4618      	mov	r0, r3
 801a246:	3714      	adds	r7, #20
 801a248:	46bd      	mov	sp, r7
 801a24a:	bc80      	pop	{r7}
 801a24c:	4770      	bx	lr
 801a24e:	bf00      	nop
 801a250:	080215ac 	.word	0x080215ac

0801a254 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801a254:	b082      	sub	sp, #8
 801a256:	b480      	push	{r7}
 801a258:	b087      	sub	sp, #28
 801a25a:	af00      	add	r7, sp, #0
 801a25c:	60f8      	str	r0, [r7, #12]
 801a25e:	1d38      	adds	r0, r7, #4
 801a260:	e880 0006 	stmia.w	r0, {r1, r2}
 801a264:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801a266:	2300      	movs	r3, #0
 801a268:	613b      	str	r3, [r7, #16]
 801a26a:	2300      	movs	r3, #0
 801a26c:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801a26e:	687a      	ldr	r2, [r7, #4]
 801a270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a272:	4413      	add	r3, r2
 801a274:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801a276:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801a27a:	b29a      	uxth	r2, r3
 801a27c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801a280:	b29b      	uxth	r3, r3
 801a282:	4413      	add	r3, r2
 801a284:	b29b      	uxth	r3, r3
 801a286:	b21b      	sxth	r3, r3
 801a288:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801a28a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a28e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801a292:	db0a      	blt.n	801a2aa <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801a294:	693b      	ldr	r3, [r7, #16]
 801a296:	3301      	adds	r3, #1
 801a298:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801a29a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a29e:	b29b      	uxth	r3, r3
 801a2a0:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 801a2a4:	b29b      	uxth	r3, r3
 801a2a6:	b21b      	sxth	r3, r3
 801a2a8:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801a2aa:	68fb      	ldr	r3, [r7, #12]
 801a2ac:	461a      	mov	r2, r3
 801a2ae:	f107 0310 	add.w	r3, r7, #16
 801a2b2:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a2b6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801a2ba:	68f8      	ldr	r0, [r7, #12]
 801a2bc:	371c      	adds	r7, #28
 801a2be:	46bd      	mov	sp, r7
 801a2c0:	bc80      	pop	{r7}
 801a2c2:	b002      	add	sp, #8
 801a2c4:	4770      	bx	lr

0801a2c6 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801a2c6:	b082      	sub	sp, #8
 801a2c8:	b480      	push	{r7}
 801a2ca:	b087      	sub	sp, #28
 801a2cc:	af00      	add	r7, sp, #0
 801a2ce:	60f8      	str	r0, [r7, #12]
 801a2d0:	1d38      	adds	r0, r7, #4
 801a2d2:	e880 0006 	stmia.w	r0, {r1, r2}
 801a2d6:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801a2d8:	2300      	movs	r3, #0
 801a2da:	613b      	str	r3, [r7, #16]
 801a2dc:	2300      	movs	r3, #0
 801a2de:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801a2e0:	687a      	ldr	r2, [r7, #4]
 801a2e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a2e4:	1ad3      	subs	r3, r2, r3
 801a2e6:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801a2e8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801a2ec:	b29a      	uxth	r2, r3
 801a2ee:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801a2f2:	b29b      	uxth	r3, r3
 801a2f4:	1ad3      	subs	r3, r2, r3
 801a2f6:	b29b      	uxth	r3, r3
 801a2f8:	b21b      	sxth	r3, r3
 801a2fa:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801a2fc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a300:	2b00      	cmp	r3, #0
 801a302:	da0a      	bge.n	801a31a <SysTimeSub+0x54>
  {
    c.Seconds--;
 801a304:	693b      	ldr	r3, [r7, #16]
 801a306:	3b01      	subs	r3, #1
 801a308:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801a30a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a30e:	b29b      	uxth	r3, r3
 801a310:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 801a314:	b29b      	uxth	r3, r3
 801a316:	b21b      	sxth	r3, r3
 801a318:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801a31a:	68fb      	ldr	r3, [r7, #12]
 801a31c:	461a      	mov	r2, r3
 801a31e:	f107 0310 	add.w	r3, r7, #16
 801a322:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a326:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801a32a:	68f8      	ldr	r0, [r7, #12]
 801a32c:	371c      	adds	r7, #28
 801a32e:	46bd      	mov	sp, r7
 801a330:	bc80      	pop	{r7}
 801a332:	b002      	add	sp, #8
 801a334:	4770      	bx	lr
	...

0801a338 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801a338:	b580      	push	{r7, lr}
 801a33a:	b088      	sub	sp, #32
 801a33c:	af02      	add	r7, sp, #8
 801a33e:	463b      	mov	r3, r7
 801a340:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801a344:	2300      	movs	r3, #0
 801a346:	60bb      	str	r3, [r7, #8]
 801a348:	2300      	movs	r3, #0
 801a34a:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801a34c:	4b10      	ldr	r3, [pc, #64]	@ (801a390 <SysTimeSet+0x58>)
 801a34e:	691b      	ldr	r3, [r3, #16]
 801a350:	f107 0208 	add.w	r2, r7, #8
 801a354:	3204      	adds	r2, #4
 801a356:	4610      	mov	r0, r2
 801a358:	4798      	blx	r3
 801a35a:	4603      	mov	r3, r0
 801a35c:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801a35e:	f107 0010 	add.w	r0, r7, #16
 801a362:	68fb      	ldr	r3, [r7, #12]
 801a364:	9300      	str	r3, [sp, #0]
 801a366:	68bb      	ldr	r3, [r7, #8]
 801a368:	463a      	mov	r2, r7
 801a36a:	ca06      	ldmia	r2, {r1, r2}
 801a36c:	f7ff ffab 	bl	801a2c6 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801a370:	4b07      	ldr	r3, [pc, #28]	@ (801a390 <SysTimeSet+0x58>)
 801a372:	681b      	ldr	r3, [r3, #0]
 801a374:	693a      	ldr	r2, [r7, #16]
 801a376:	4610      	mov	r0, r2
 801a378:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801a37a:	4b05      	ldr	r3, [pc, #20]	@ (801a390 <SysTimeSet+0x58>)
 801a37c:	689b      	ldr	r3, [r3, #8]
 801a37e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801a382:	4610      	mov	r0, r2
 801a384:	4798      	blx	r3
}
 801a386:	bf00      	nop
 801a388:	3718      	adds	r7, #24
 801a38a:	46bd      	mov	sp, r7
 801a38c:	bd80      	pop	{r7, pc}
 801a38e:	bf00      	nop
 801a390:	08020f30 	.word	0x08020f30

0801a394 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801a394:	b580      	push	{r7, lr}
 801a396:	b08a      	sub	sp, #40	@ 0x28
 801a398:	af02      	add	r7, sp, #8
 801a39a:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801a39c:	2300      	movs	r3, #0
 801a39e:	61bb      	str	r3, [r7, #24]
 801a3a0:	2300      	movs	r3, #0
 801a3a2:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801a3a4:	2300      	movs	r3, #0
 801a3a6:	613b      	str	r3, [r7, #16]
 801a3a8:	2300      	movs	r3, #0
 801a3aa:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801a3ac:	4b14      	ldr	r3, [pc, #80]	@ (801a400 <SysTimeGet+0x6c>)
 801a3ae:	691b      	ldr	r3, [r3, #16]
 801a3b0:	f107 0218 	add.w	r2, r7, #24
 801a3b4:	3204      	adds	r2, #4
 801a3b6:	4610      	mov	r0, r2
 801a3b8:	4798      	blx	r3
 801a3ba:	4603      	mov	r3, r0
 801a3bc:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801a3be:	4b10      	ldr	r3, [pc, #64]	@ (801a400 <SysTimeGet+0x6c>)
 801a3c0:	68db      	ldr	r3, [r3, #12]
 801a3c2:	4798      	blx	r3
 801a3c4:	4603      	mov	r3, r0
 801a3c6:	b21b      	sxth	r3, r3
 801a3c8:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801a3ca:	4b0d      	ldr	r3, [pc, #52]	@ (801a400 <SysTimeGet+0x6c>)
 801a3cc:	685b      	ldr	r3, [r3, #4]
 801a3ce:	4798      	blx	r3
 801a3d0:	4603      	mov	r3, r0
 801a3d2:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801a3d4:	f107 0010 	add.w	r0, r7, #16
 801a3d8:	69fb      	ldr	r3, [r7, #28]
 801a3da:	9300      	str	r3, [sp, #0]
 801a3dc:	69bb      	ldr	r3, [r7, #24]
 801a3de:	f107 0208 	add.w	r2, r7, #8
 801a3e2:	ca06      	ldmia	r2, {r1, r2}
 801a3e4:	f7ff ff36 	bl	801a254 <SysTimeAdd>

  return sysTime;
 801a3e8:	687b      	ldr	r3, [r7, #4]
 801a3ea:	461a      	mov	r2, r3
 801a3ec:	f107 0310 	add.w	r3, r7, #16
 801a3f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a3f4:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801a3f8:	6878      	ldr	r0, [r7, #4]
 801a3fa:	3720      	adds	r7, #32
 801a3fc:	46bd      	mov	sp, r7
 801a3fe:	bd80      	pop	{r7, pc}
 801a400:	08020f30 	.word	0x08020f30

0801a404 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801a404:	b580      	push	{r7, lr}
 801a406:	b084      	sub	sp, #16
 801a408:	af00      	add	r7, sp, #0
 801a40a:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801a40c:	2300      	movs	r3, #0
 801a40e:	60bb      	str	r3, [r7, #8]
 801a410:	2300      	movs	r3, #0
 801a412:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801a414:	4b0a      	ldr	r3, [pc, #40]	@ (801a440 <SysTimeGetMcuTime+0x3c>)
 801a416:	691b      	ldr	r3, [r3, #16]
 801a418:	f107 0208 	add.w	r2, r7, #8
 801a41c:	3204      	adds	r2, #4
 801a41e:	4610      	mov	r0, r2
 801a420:	4798      	blx	r3
 801a422:	4603      	mov	r3, r0
 801a424:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801a426:	687b      	ldr	r3, [r7, #4]
 801a428:	461a      	mov	r2, r3
 801a42a:	f107 0308 	add.w	r3, r7, #8
 801a42e:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a432:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801a436:	6878      	ldr	r0, [r7, #4]
 801a438:	3710      	adds	r7, #16
 801a43a:	46bd      	mov	sp, r7
 801a43c:	bd80      	pop	{r7, pc}
 801a43e:	bf00      	nop
 801a440:	08020f30 	.word	0x08020f30

0801a444 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801a444:	b580      	push	{r7, lr}
 801a446:	b088      	sub	sp, #32
 801a448:	af02      	add	r7, sp, #8
 801a44a:	463b      	mov	r3, r7
 801a44c:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801a450:	4b0f      	ldr	r3, [pc, #60]	@ (801a490 <SysTimeToMs+0x4c>)
 801a452:	68db      	ldr	r3, [r3, #12]
 801a454:	4798      	blx	r3
 801a456:	4603      	mov	r3, r0
 801a458:	b21b      	sxth	r3, r3
 801a45a:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801a45c:	4b0c      	ldr	r3, [pc, #48]	@ (801a490 <SysTimeToMs+0x4c>)
 801a45e:	685b      	ldr	r3, [r3, #4]
 801a460:	4798      	blx	r3
 801a462:	4603      	mov	r3, r0
 801a464:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801a466:	f107 0008 	add.w	r0, r7, #8
 801a46a:	697b      	ldr	r3, [r7, #20]
 801a46c:	9300      	str	r3, [sp, #0]
 801a46e:	693b      	ldr	r3, [r7, #16]
 801a470:	463a      	mov	r2, r7
 801a472:	ca06      	ldmia	r2, {r1, r2}
 801a474:	f7ff ff27 	bl	801a2c6 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801a478:	68bb      	ldr	r3, [r7, #8]
 801a47a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801a47e:	fb02 f303 	mul.w	r3, r2, r3
 801a482:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801a486:	4413      	add	r3, r2
}
 801a488:	4618      	mov	r0, r3
 801a48a:	3718      	adds	r7, #24
 801a48c:	46bd      	mov	sp, r7
 801a48e:	bd80      	pop	{r7, pc}
 801a490:	08020f30 	.word	0x08020f30

0801a494 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801a494:	b580      	push	{r7, lr}
 801a496:	b08a      	sub	sp, #40	@ 0x28
 801a498:	af02      	add	r7, sp, #8
 801a49a:	6078      	str	r0, [r7, #4]
 801a49c:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801a49e:	683b      	ldr	r3, [r7, #0]
 801a4a0:	4a19      	ldr	r2, [pc, #100]	@ (801a508 <SysTimeFromMs+0x74>)
 801a4a2:	fba2 2303 	umull	r2, r3, r2, r3
 801a4a6:	099b      	lsrs	r3, r3, #6
 801a4a8:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801a4aa:	69fb      	ldr	r3, [r7, #28]
 801a4ac:	617b      	str	r3, [r7, #20]
 801a4ae:	683b      	ldr	r3, [r7, #0]
 801a4b0:	b29a      	uxth	r2, r3
 801a4b2:	69fb      	ldr	r3, [r7, #28]
 801a4b4:	b29b      	uxth	r3, r3
 801a4b6:	4619      	mov	r1, r3
 801a4b8:	0149      	lsls	r1, r1, #5
 801a4ba:	1ac9      	subs	r1, r1, r3
 801a4bc:	0089      	lsls	r1, r1, #2
 801a4be:	440b      	add	r3, r1
 801a4c0:	00db      	lsls	r3, r3, #3
 801a4c2:	b29b      	uxth	r3, r3
 801a4c4:	1ad3      	subs	r3, r2, r3
 801a4c6:	b29b      	uxth	r3, r3
 801a4c8:	b21b      	sxth	r3, r3
 801a4ca:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801a4cc:	f107 030c 	add.w	r3, r7, #12
 801a4d0:	2200      	movs	r2, #0
 801a4d2:	601a      	str	r2, [r3, #0]
 801a4d4:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801a4d6:	4b0d      	ldr	r3, [pc, #52]	@ (801a50c <SysTimeFromMs+0x78>)
 801a4d8:	68db      	ldr	r3, [r3, #12]
 801a4da:	4798      	blx	r3
 801a4dc:	4603      	mov	r3, r0
 801a4de:	b21b      	sxth	r3, r3
 801a4e0:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801a4e2:	4b0a      	ldr	r3, [pc, #40]	@ (801a50c <SysTimeFromMs+0x78>)
 801a4e4:	685b      	ldr	r3, [r3, #4]
 801a4e6:	4798      	blx	r3
 801a4e8:	4603      	mov	r3, r0
 801a4ea:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801a4ec:	6878      	ldr	r0, [r7, #4]
 801a4ee:	693b      	ldr	r3, [r7, #16]
 801a4f0:	9300      	str	r3, [sp, #0]
 801a4f2:	68fb      	ldr	r3, [r7, #12]
 801a4f4:	f107 0214 	add.w	r2, r7, #20
 801a4f8:	ca06      	ldmia	r2, {r1, r2}
 801a4fa:	f7ff feab 	bl	801a254 <SysTimeAdd>
}
 801a4fe:	6878      	ldr	r0, [r7, #4]
 801a500:	3720      	adds	r7, #32
 801a502:	46bd      	mov	sp, r7
 801a504:	bd80      	pop	{r7, pc}
 801a506:	bf00      	nop
 801a508:	10624dd3 	.word	0x10624dd3
 801a50c:	08020f30 	.word	0x08020f30

0801a510 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801a510:	b580      	push	{r7, lr}
 801a512:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801a514:	4b04      	ldr	r3, [pc, #16]	@ (801a528 <UTIL_TIMER_Init+0x18>)
 801a516:	2200      	movs	r2, #0
 801a518:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801a51a:	4b04      	ldr	r3, [pc, #16]	@ (801a52c <UTIL_TIMER_Init+0x1c>)
 801a51c:	681b      	ldr	r3, [r3, #0]
 801a51e:	4798      	blx	r3
 801a520:	4603      	mov	r3, r0
}
 801a522:	4618      	mov	r0, r3
 801a524:	bd80      	pop	{r7, pc}
 801a526:	bf00      	nop
 801a528:	20001a38 	.word	0x20001a38
 801a52c:	08020f04 	.word	0x08020f04

0801a530 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801a530:	b580      	push	{r7, lr}
 801a532:	b084      	sub	sp, #16
 801a534:	af00      	add	r7, sp, #0
 801a536:	60f8      	str	r0, [r7, #12]
 801a538:	60b9      	str	r1, [r7, #8]
 801a53a:	603b      	str	r3, [r7, #0]
 801a53c:	4613      	mov	r3, r2
 801a53e:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801a540:	68fb      	ldr	r3, [r7, #12]
 801a542:	2b00      	cmp	r3, #0
 801a544:	d023      	beq.n	801a58e <UTIL_TIMER_Create+0x5e>
 801a546:	683b      	ldr	r3, [r7, #0]
 801a548:	2b00      	cmp	r3, #0
 801a54a:	d020      	beq.n	801a58e <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801a54c:	68fb      	ldr	r3, [r7, #12]
 801a54e:	2200      	movs	r2, #0
 801a550:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801a552:	4b11      	ldr	r3, [pc, #68]	@ (801a598 <UTIL_TIMER_Create+0x68>)
 801a554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a556:	68b8      	ldr	r0, [r7, #8]
 801a558:	4798      	blx	r3
 801a55a:	4602      	mov	r2, r0
 801a55c:	68fb      	ldr	r3, [r7, #12]
 801a55e:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801a560:	68fb      	ldr	r3, [r7, #12]
 801a562:	2200      	movs	r2, #0
 801a564:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801a566:	68fb      	ldr	r3, [r7, #12]
 801a568:	2200      	movs	r2, #0
 801a56a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801a56c:	68fb      	ldr	r3, [r7, #12]
 801a56e:	2200      	movs	r2, #0
 801a570:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801a572:	68fb      	ldr	r3, [r7, #12]
 801a574:	683a      	ldr	r2, [r7, #0]
 801a576:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801a578:	68fb      	ldr	r3, [r7, #12]
 801a57a:	69ba      	ldr	r2, [r7, #24]
 801a57c:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801a57e:	68fb      	ldr	r3, [r7, #12]
 801a580:	79fa      	ldrb	r2, [r7, #7]
 801a582:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801a584:	68fb      	ldr	r3, [r7, #12]
 801a586:	2200      	movs	r2, #0
 801a588:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801a58a:	2300      	movs	r3, #0
 801a58c:	e000      	b.n	801a590 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801a58e:	2301      	movs	r3, #1
  }
}
 801a590:	4618      	mov	r0, r3
 801a592:	3710      	adds	r7, #16
 801a594:	46bd      	mov	sp, r7
 801a596:	bd80      	pop	{r7, pc}
 801a598:	08020f04 	.word	0x08020f04

0801a59c <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801a59c:	b580      	push	{r7, lr}
 801a59e:	b08a      	sub	sp, #40	@ 0x28
 801a5a0:	af00      	add	r7, sp, #0
 801a5a2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801a5a4:	2300      	movs	r3, #0
 801a5a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801a5aa:	687b      	ldr	r3, [r7, #4]
 801a5ac:	2b00      	cmp	r3, #0
 801a5ae:	d056      	beq.n	801a65e <UTIL_TIMER_Start+0xc2>
 801a5b0:	6878      	ldr	r0, [r7, #4]
 801a5b2:	f000 f929 	bl	801a808 <TimerExists>
 801a5b6:	4603      	mov	r3, r0
 801a5b8:	f083 0301 	eor.w	r3, r3, #1
 801a5bc:	b2db      	uxtb	r3, r3
 801a5be:	2b00      	cmp	r3, #0
 801a5c0:	d04d      	beq.n	801a65e <UTIL_TIMER_Start+0xc2>
 801a5c2:	687b      	ldr	r3, [r7, #4]
 801a5c4:	7a5b      	ldrb	r3, [r3, #9]
 801a5c6:	2b00      	cmp	r3, #0
 801a5c8:	d149      	bne.n	801a65e <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a5ca:	f3ef 8310 	mrs	r3, PRIMASK
 801a5ce:	613b      	str	r3, [r7, #16]
  return(result);
 801a5d0:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801a5d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801a5d4:	b672      	cpsid	i
}
 801a5d6:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801a5d8:	687b      	ldr	r3, [r7, #4]
 801a5da:	685b      	ldr	r3, [r3, #4]
 801a5dc:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801a5de:	4b24      	ldr	r3, [pc, #144]	@ (801a670 <UTIL_TIMER_Start+0xd4>)
 801a5e0:	6a1b      	ldr	r3, [r3, #32]
 801a5e2:	4798      	blx	r3
 801a5e4:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801a5e6:	6a3a      	ldr	r2, [r7, #32]
 801a5e8:	69bb      	ldr	r3, [r7, #24]
 801a5ea:	429a      	cmp	r2, r3
 801a5ec:	d201      	bcs.n	801a5f2 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801a5ee:	69bb      	ldr	r3, [r7, #24]
 801a5f0:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801a5f2:	687b      	ldr	r3, [r7, #4]
 801a5f4:	6a3a      	ldr	r2, [r7, #32]
 801a5f6:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801a5f8:	687b      	ldr	r3, [r7, #4]
 801a5fa:	2200      	movs	r2, #0
 801a5fc:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801a5fe:	687b      	ldr	r3, [r7, #4]
 801a600:	2201      	movs	r2, #1
 801a602:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801a604:	687b      	ldr	r3, [r7, #4]
 801a606:	2200      	movs	r2, #0
 801a608:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801a60a:	4b1a      	ldr	r3, [pc, #104]	@ (801a674 <UTIL_TIMER_Start+0xd8>)
 801a60c:	681b      	ldr	r3, [r3, #0]
 801a60e:	2b00      	cmp	r3, #0
 801a610:	d106      	bne.n	801a620 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801a612:	4b17      	ldr	r3, [pc, #92]	@ (801a670 <UTIL_TIMER_Start+0xd4>)
 801a614:	691b      	ldr	r3, [r3, #16]
 801a616:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801a618:	6878      	ldr	r0, [r7, #4]
 801a61a:	f000 f96b 	bl	801a8f4 <TimerInsertNewHeadTimer>
 801a61e:	e017      	b.n	801a650 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801a620:	4b13      	ldr	r3, [pc, #76]	@ (801a670 <UTIL_TIMER_Start+0xd4>)
 801a622:	699b      	ldr	r3, [r3, #24]
 801a624:	4798      	blx	r3
 801a626:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801a628:	687b      	ldr	r3, [r7, #4]
 801a62a:	681a      	ldr	r2, [r3, #0]
 801a62c:	697b      	ldr	r3, [r7, #20]
 801a62e:	441a      	add	r2, r3
 801a630:	687b      	ldr	r3, [r7, #4]
 801a632:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801a634:	687b      	ldr	r3, [r7, #4]
 801a636:	681a      	ldr	r2, [r3, #0]
 801a638:	4b0e      	ldr	r3, [pc, #56]	@ (801a674 <UTIL_TIMER_Start+0xd8>)
 801a63a:	681b      	ldr	r3, [r3, #0]
 801a63c:	681b      	ldr	r3, [r3, #0]
 801a63e:	429a      	cmp	r2, r3
 801a640:	d203      	bcs.n	801a64a <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801a642:	6878      	ldr	r0, [r7, #4]
 801a644:	f000 f956 	bl	801a8f4 <TimerInsertNewHeadTimer>
 801a648:	e002      	b.n	801a650 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801a64a:	6878      	ldr	r0, [r7, #4]
 801a64c:	f000 f922 	bl	801a894 <TimerInsertTimer>
 801a650:	69fb      	ldr	r3, [r7, #28]
 801a652:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a654:	68fb      	ldr	r3, [r7, #12]
 801a656:	f383 8810 	msr	PRIMASK, r3
}
 801a65a:	bf00      	nop
  {
 801a65c:	e002      	b.n	801a664 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801a65e:	2301      	movs	r3, #1
 801a660:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 801a664:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801a668:	4618      	mov	r0, r3
 801a66a:	3728      	adds	r7, #40	@ 0x28
 801a66c:	46bd      	mov	sp, r7
 801a66e:	bd80      	pop	{r7, pc}
 801a670:	08020f04 	.word	0x08020f04
 801a674:	20001a38 	.word	0x20001a38

0801a678 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801a678:	b580      	push	{r7, lr}
 801a67a:	b088      	sub	sp, #32
 801a67c:	af00      	add	r7, sp, #0
 801a67e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801a680:	2300      	movs	r3, #0
 801a682:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801a684:	687b      	ldr	r3, [r7, #4]
 801a686:	2b00      	cmp	r3, #0
 801a688:	d05b      	beq.n	801a742 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a68a:	f3ef 8310 	mrs	r3, PRIMASK
 801a68e:	60fb      	str	r3, [r7, #12]
  return(result);
 801a690:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801a692:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801a694:	b672      	cpsid	i
}
 801a696:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801a698:	4b2d      	ldr	r3, [pc, #180]	@ (801a750 <UTIL_TIMER_Stop+0xd8>)
 801a69a:	681b      	ldr	r3, [r3, #0]
 801a69c:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801a69e:	4b2c      	ldr	r3, [pc, #176]	@ (801a750 <UTIL_TIMER_Stop+0xd8>)
 801a6a0:	681b      	ldr	r3, [r3, #0]
 801a6a2:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801a6a4:	687b      	ldr	r3, [r7, #4]
 801a6a6:	2201      	movs	r2, #1
 801a6a8:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801a6aa:	4b29      	ldr	r3, [pc, #164]	@ (801a750 <UTIL_TIMER_Stop+0xd8>)
 801a6ac:	681b      	ldr	r3, [r3, #0]
 801a6ae:	2b00      	cmp	r3, #0
 801a6b0:	d041      	beq.n	801a736 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801a6b2:	687b      	ldr	r3, [r7, #4]
 801a6b4:	2200      	movs	r2, #0
 801a6b6:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801a6b8:	4b25      	ldr	r3, [pc, #148]	@ (801a750 <UTIL_TIMER_Stop+0xd8>)
 801a6ba:	681b      	ldr	r3, [r3, #0]
 801a6bc:	687a      	ldr	r2, [r7, #4]
 801a6be:	429a      	cmp	r2, r3
 801a6c0:	d134      	bne.n	801a72c <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801a6c2:	4b23      	ldr	r3, [pc, #140]	@ (801a750 <UTIL_TIMER_Stop+0xd8>)
 801a6c4:	681b      	ldr	r3, [r3, #0]
 801a6c6:	2200      	movs	r2, #0
 801a6c8:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801a6ca:	4b21      	ldr	r3, [pc, #132]	@ (801a750 <UTIL_TIMER_Stop+0xd8>)
 801a6cc:	681b      	ldr	r3, [r3, #0]
 801a6ce:	695b      	ldr	r3, [r3, #20]
 801a6d0:	2b00      	cmp	r3, #0
 801a6d2:	d00a      	beq.n	801a6ea <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801a6d4:	4b1e      	ldr	r3, [pc, #120]	@ (801a750 <UTIL_TIMER_Stop+0xd8>)
 801a6d6:	681b      	ldr	r3, [r3, #0]
 801a6d8:	695b      	ldr	r3, [r3, #20]
 801a6da:	4a1d      	ldr	r2, [pc, #116]	@ (801a750 <UTIL_TIMER_Stop+0xd8>)
 801a6dc:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801a6de:	4b1c      	ldr	r3, [pc, #112]	@ (801a750 <UTIL_TIMER_Stop+0xd8>)
 801a6e0:	681b      	ldr	r3, [r3, #0]
 801a6e2:	4618      	mov	r0, r3
 801a6e4:	f000 f8ac 	bl	801a840 <TimerSetTimeout>
 801a6e8:	e023      	b.n	801a732 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801a6ea:	4b1a      	ldr	r3, [pc, #104]	@ (801a754 <UTIL_TIMER_Stop+0xdc>)
 801a6ec:	68db      	ldr	r3, [r3, #12]
 801a6ee:	4798      	blx	r3
            TimerListHead = NULL;
 801a6f0:	4b17      	ldr	r3, [pc, #92]	@ (801a750 <UTIL_TIMER_Stop+0xd8>)
 801a6f2:	2200      	movs	r2, #0
 801a6f4:	601a      	str	r2, [r3, #0]
 801a6f6:	e01c      	b.n	801a732 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801a6f8:	697a      	ldr	r2, [r7, #20]
 801a6fa:	687b      	ldr	r3, [r7, #4]
 801a6fc:	429a      	cmp	r2, r3
 801a6fe:	d110      	bne.n	801a722 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801a700:	697b      	ldr	r3, [r7, #20]
 801a702:	695b      	ldr	r3, [r3, #20]
 801a704:	2b00      	cmp	r3, #0
 801a706:	d006      	beq.n	801a716 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801a708:	697b      	ldr	r3, [r7, #20]
 801a70a:	695b      	ldr	r3, [r3, #20]
 801a70c:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801a70e:	69bb      	ldr	r3, [r7, #24]
 801a710:	697a      	ldr	r2, [r7, #20]
 801a712:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801a714:	e00d      	b.n	801a732 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801a716:	2300      	movs	r3, #0
 801a718:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801a71a:	69bb      	ldr	r3, [r7, #24]
 801a71c:	697a      	ldr	r2, [r7, #20]
 801a71e:	615a      	str	r2, [r3, #20]
            break;
 801a720:	e007      	b.n	801a732 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801a722:	697b      	ldr	r3, [r7, #20]
 801a724:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801a726:	697b      	ldr	r3, [r7, #20]
 801a728:	695b      	ldr	r3, [r3, #20]
 801a72a:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801a72c:	697b      	ldr	r3, [r7, #20]
 801a72e:	2b00      	cmp	r3, #0
 801a730:	d1e2      	bne.n	801a6f8 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801a732:	2300      	movs	r3, #0
 801a734:	77fb      	strb	r3, [r7, #31]
 801a736:	693b      	ldr	r3, [r7, #16]
 801a738:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a73a:	68bb      	ldr	r3, [r7, #8]
 801a73c:	f383 8810 	msr	PRIMASK, r3
}
 801a740:	e001      	b.n	801a746 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801a742:	2301      	movs	r3, #1
 801a744:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801a746:	7ffb      	ldrb	r3, [r7, #31]
}
 801a748:	4618      	mov	r0, r3
 801a74a:	3720      	adds	r7, #32
 801a74c:	46bd      	mov	sp, r7
 801a74e:	bd80      	pop	{r7, pc}
 801a750:	20001a38 	.word	0x20001a38
 801a754:	08020f04 	.word	0x08020f04

0801a758 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801a758:	b580      	push	{r7, lr}
 801a75a:	b084      	sub	sp, #16
 801a75c:	af00      	add	r7, sp, #0
 801a75e:	6078      	str	r0, [r7, #4]
 801a760:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801a762:	2300      	movs	r3, #0
 801a764:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801a766:	687b      	ldr	r3, [r7, #4]
 801a768:	2b00      	cmp	r3, #0
 801a76a:	d102      	bne.n	801a772 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801a76c:	2301      	movs	r3, #1
 801a76e:	73fb      	strb	r3, [r7, #15]
 801a770:	e014      	b.n	801a79c <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801a772:	4b0d      	ldr	r3, [pc, #52]	@ (801a7a8 <UTIL_TIMER_SetPeriod+0x50>)
 801a774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a776:	6838      	ldr	r0, [r7, #0]
 801a778:	4798      	blx	r3
 801a77a:	4602      	mov	r2, r0
 801a77c:	687b      	ldr	r3, [r7, #4]
 801a77e:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801a780:	6878      	ldr	r0, [r7, #4]
 801a782:	f000 f841 	bl	801a808 <TimerExists>
 801a786:	4603      	mov	r3, r0
 801a788:	2b00      	cmp	r3, #0
 801a78a:	d007      	beq.n	801a79c <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801a78c:	6878      	ldr	r0, [r7, #4]
 801a78e:	f7ff ff73 	bl	801a678 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801a792:	6878      	ldr	r0, [r7, #4]
 801a794:	f7ff ff02 	bl	801a59c <UTIL_TIMER_Start>
 801a798:	4603      	mov	r3, r0
 801a79a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801a79c:	7bfb      	ldrb	r3, [r7, #15]
}
 801a79e:	4618      	mov	r0, r3
 801a7a0:	3710      	adds	r7, #16
 801a7a2:	46bd      	mov	sp, r7
 801a7a4:	bd80      	pop	{r7, pc}
 801a7a6:	bf00      	nop
 801a7a8:	08020f04 	.word	0x08020f04

0801a7ac <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801a7ac:	b580      	push	{r7, lr}
 801a7ae:	b082      	sub	sp, #8
 801a7b0:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801a7b2:	4b06      	ldr	r3, [pc, #24]	@ (801a7cc <UTIL_TIMER_GetCurrentTime+0x20>)
 801a7b4:	69db      	ldr	r3, [r3, #28]
 801a7b6:	4798      	blx	r3
 801a7b8:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801a7ba:	4b04      	ldr	r3, [pc, #16]	@ (801a7cc <UTIL_TIMER_GetCurrentTime+0x20>)
 801a7bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a7be:	6878      	ldr	r0, [r7, #4]
 801a7c0:	4798      	blx	r3
 801a7c2:	4603      	mov	r3, r0
}
 801a7c4:	4618      	mov	r0, r3
 801a7c6:	3708      	adds	r7, #8
 801a7c8:	46bd      	mov	sp, r7
 801a7ca:	bd80      	pop	{r7, pc}
 801a7cc:	08020f04 	.word	0x08020f04

0801a7d0 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801a7d0:	b580      	push	{r7, lr}
 801a7d2:	b084      	sub	sp, #16
 801a7d4:	af00      	add	r7, sp, #0
 801a7d6:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801a7d8:	4b0a      	ldr	r3, [pc, #40]	@ (801a804 <UTIL_TIMER_GetElapsedTime+0x34>)
 801a7da:	69db      	ldr	r3, [r3, #28]
 801a7dc:	4798      	blx	r3
 801a7de:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801a7e0:	4b08      	ldr	r3, [pc, #32]	@ (801a804 <UTIL_TIMER_GetElapsedTime+0x34>)
 801a7e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a7e4:	6878      	ldr	r0, [r7, #4]
 801a7e6:	4798      	blx	r3
 801a7e8:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801a7ea:	4b06      	ldr	r3, [pc, #24]	@ (801a804 <UTIL_TIMER_GetElapsedTime+0x34>)
 801a7ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a7ee:	68f9      	ldr	r1, [r7, #12]
 801a7f0:	68ba      	ldr	r2, [r7, #8]
 801a7f2:	1a8a      	subs	r2, r1, r2
 801a7f4:	4610      	mov	r0, r2
 801a7f6:	4798      	blx	r3
 801a7f8:	4603      	mov	r3, r0
}
 801a7fa:	4618      	mov	r0, r3
 801a7fc:	3710      	adds	r7, #16
 801a7fe:	46bd      	mov	sp, r7
 801a800:	bd80      	pop	{r7, pc}
 801a802:	bf00      	nop
 801a804:	08020f04 	.word	0x08020f04

0801a808 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801a808:	b480      	push	{r7}
 801a80a:	b085      	sub	sp, #20
 801a80c:	af00      	add	r7, sp, #0
 801a80e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801a810:	4b0a      	ldr	r3, [pc, #40]	@ (801a83c <TimerExists+0x34>)
 801a812:	681b      	ldr	r3, [r3, #0]
 801a814:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801a816:	e008      	b.n	801a82a <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801a818:	68fa      	ldr	r2, [r7, #12]
 801a81a:	687b      	ldr	r3, [r7, #4]
 801a81c:	429a      	cmp	r2, r3
 801a81e:	d101      	bne.n	801a824 <TimerExists+0x1c>
    {
      return true;
 801a820:	2301      	movs	r3, #1
 801a822:	e006      	b.n	801a832 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801a824:	68fb      	ldr	r3, [r7, #12]
 801a826:	695b      	ldr	r3, [r3, #20]
 801a828:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801a82a:	68fb      	ldr	r3, [r7, #12]
 801a82c:	2b00      	cmp	r3, #0
 801a82e:	d1f3      	bne.n	801a818 <TimerExists+0x10>
  }
  return false;
 801a830:	2300      	movs	r3, #0
}
 801a832:	4618      	mov	r0, r3
 801a834:	3714      	adds	r7, #20
 801a836:	46bd      	mov	sp, r7
 801a838:	bc80      	pop	{r7}
 801a83a:	4770      	bx	lr
 801a83c:	20001a38 	.word	0x20001a38

0801a840 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801a840:	b590      	push	{r4, r7, lr}
 801a842:	b085      	sub	sp, #20
 801a844:	af00      	add	r7, sp, #0
 801a846:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801a848:	4b11      	ldr	r3, [pc, #68]	@ (801a890 <TimerSetTimeout+0x50>)
 801a84a:	6a1b      	ldr	r3, [r3, #32]
 801a84c:	4798      	blx	r3
 801a84e:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801a850:	687b      	ldr	r3, [r7, #4]
 801a852:	2201      	movs	r2, #1
 801a854:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801a856:	687b      	ldr	r3, [r7, #4]
 801a858:	681c      	ldr	r4, [r3, #0]
 801a85a:	4b0d      	ldr	r3, [pc, #52]	@ (801a890 <TimerSetTimeout+0x50>)
 801a85c:	699b      	ldr	r3, [r3, #24]
 801a85e:	4798      	blx	r3
 801a860:	4602      	mov	r2, r0
 801a862:	68fb      	ldr	r3, [r7, #12]
 801a864:	4413      	add	r3, r2
 801a866:	429c      	cmp	r4, r3
 801a868:	d207      	bcs.n	801a87a <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801a86a:	4b09      	ldr	r3, [pc, #36]	@ (801a890 <TimerSetTimeout+0x50>)
 801a86c:	699b      	ldr	r3, [r3, #24]
 801a86e:	4798      	blx	r3
 801a870:	4602      	mov	r2, r0
 801a872:	68fb      	ldr	r3, [r7, #12]
 801a874:	441a      	add	r2, r3
 801a876:	687b      	ldr	r3, [r7, #4]
 801a878:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801a87a:	4b05      	ldr	r3, [pc, #20]	@ (801a890 <TimerSetTimeout+0x50>)
 801a87c:	689b      	ldr	r3, [r3, #8]
 801a87e:	687a      	ldr	r2, [r7, #4]
 801a880:	6812      	ldr	r2, [r2, #0]
 801a882:	4610      	mov	r0, r2
 801a884:	4798      	blx	r3
}
 801a886:	bf00      	nop
 801a888:	3714      	adds	r7, #20
 801a88a:	46bd      	mov	sp, r7
 801a88c:	bd90      	pop	{r4, r7, pc}
 801a88e:	bf00      	nop
 801a890:	08020f04 	.word	0x08020f04

0801a894 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801a894:	b480      	push	{r7}
 801a896:	b085      	sub	sp, #20
 801a898:	af00      	add	r7, sp, #0
 801a89a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801a89c:	4b14      	ldr	r3, [pc, #80]	@ (801a8f0 <TimerInsertTimer+0x5c>)
 801a89e:	681b      	ldr	r3, [r3, #0]
 801a8a0:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801a8a2:	4b13      	ldr	r3, [pc, #76]	@ (801a8f0 <TimerInsertTimer+0x5c>)
 801a8a4:	681b      	ldr	r3, [r3, #0]
 801a8a6:	695b      	ldr	r3, [r3, #20]
 801a8a8:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801a8aa:	e012      	b.n	801a8d2 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801a8ac:	687b      	ldr	r3, [r7, #4]
 801a8ae:	681a      	ldr	r2, [r3, #0]
 801a8b0:	68bb      	ldr	r3, [r7, #8]
 801a8b2:	681b      	ldr	r3, [r3, #0]
 801a8b4:	429a      	cmp	r2, r3
 801a8b6:	d905      	bls.n	801a8c4 <TimerInsertTimer+0x30>
    {
        cur = next;
 801a8b8:	68bb      	ldr	r3, [r7, #8]
 801a8ba:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801a8bc:	68bb      	ldr	r3, [r7, #8]
 801a8be:	695b      	ldr	r3, [r3, #20]
 801a8c0:	60bb      	str	r3, [r7, #8]
 801a8c2:	e006      	b.n	801a8d2 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801a8c4:	68fb      	ldr	r3, [r7, #12]
 801a8c6:	687a      	ldr	r2, [r7, #4]
 801a8c8:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801a8ca:	687b      	ldr	r3, [r7, #4]
 801a8cc:	68ba      	ldr	r2, [r7, #8]
 801a8ce:	615a      	str	r2, [r3, #20]
        return;
 801a8d0:	e009      	b.n	801a8e6 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801a8d2:	68fb      	ldr	r3, [r7, #12]
 801a8d4:	695b      	ldr	r3, [r3, #20]
 801a8d6:	2b00      	cmp	r3, #0
 801a8d8:	d1e8      	bne.n	801a8ac <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801a8da:	68fb      	ldr	r3, [r7, #12]
 801a8dc:	687a      	ldr	r2, [r7, #4]
 801a8de:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801a8e0:	687b      	ldr	r3, [r7, #4]
 801a8e2:	2200      	movs	r2, #0
 801a8e4:	615a      	str	r2, [r3, #20]
}
 801a8e6:	3714      	adds	r7, #20
 801a8e8:	46bd      	mov	sp, r7
 801a8ea:	bc80      	pop	{r7}
 801a8ec:	4770      	bx	lr
 801a8ee:	bf00      	nop
 801a8f0:	20001a38 	.word	0x20001a38

0801a8f4 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801a8f4:	b580      	push	{r7, lr}
 801a8f6:	b084      	sub	sp, #16
 801a8f8:	af00      	add	r7, sp, #0
 801a8fa:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801a8fc:	4b0b      	ldr	r3, [pc, #44]	@ (801a92c <TimerInsertNewHeadTimer+0x38>)
 801a8fe:	681b      	ldr	r3, [r3, #0]
 801a900:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801a902:	68fb      	ldr	r3, [r7, #12]
 801a904:	2b00      	cmp	r3, #0
 801a906:	d002      	beq.n	801a90e <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801a908:	68fb      	ldr	r3, [r7, #12]
 801a90a:	2200      	movs	r2, #0
 801a90c:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801a90e:	687b      	ldr	r3, [r7, #4]
 801a910:	68fa      	ldr	r2, [r7, #12]
 801a912:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801a914:	4a05      	ldr	r2, [pc, #20]	@ (801a92c <TimerInsertNewHeadTimer+0x38>)
 801a916:	687b      	ldr	r3, [r7, #4]
 801a918:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801a91a:	4b04      	ldr	r3, [pc, #16]	@ (801a92c <TimerInsertNewHeadTimer+0x38>)
 801a91c:	681b      	ldr	r3, [r3, #0]
 801a91e:	4618      	mov	r0, r3
 801a920:	f7ff ff8e 	bl	801a840 <TimerSetTimeout>
}
 801a924:	bf00      	nop
 801a926:	3710      	adds	r7, #16
 801a928:	46bd      	mov	sp, r7
 801a92a:	bd80      	pop	{r7, pc}
 801a92c:	20001a38 	.word	0x20001a38

0801a930 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801a930:	b480      	push	{r7}
 801a932:	b085      	sub	sp, #20
 801a934:	af00      	add	r7, sp, #0
 801a936:	6078      	str	r0, [r7, #4]
  int i = 0;
 801a938:	2300      	movs	r3, #0
 801a93a:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801a93c:	e00e      	b.n	801a95c <ee_skip_atoi+0x2c>
 801a93e:	68fa      	ldr	r2, [r7, #12]
 801a940:	4613      	mov	r3, r2
 801a942:	009b      	lsls	r3, r3, #2
 801a944:	4413      	add	r3, r2
 801a946:	005b      	lsls	r3, r3, #1
 801a948:	4618      	mov	r0, r3
 801a94a:	687b      	ldr	r3, [r7, #4]
 801a94c:	681b      	ldr	r3, [r3, #0]
 801a94e:	1c59      	adds	r1, r3, #1
 801a950:	687a      	ldr	r2, [r7, #4]
 801a952:	6011      	str	r1, [r2, #0]
 801a954:	781b      	ldrb	r3, [r3, #0]
 801a956:	4403      	add	r3, r0
 801a958:	3b30      	subs	r3, #48	@ 0x30
 801a95a:	60fb      	str	r3, [r7, #12]
 801a95c:	687b      	ldr	r3, [r7, #4]
 801a95e:	681b      	ldr	r3, [r3, #0]
 801a960:	781b      	ldrb	r3, [r3, #0]
 801a962:	2b2f      	cmp	r3, #47	@ 0x2f
 801a964:	d904      	bls.n	801a970 <ee_skip_atoi+0x40>
 801a966:	687b      	ldr	r3, [r7, #4]
 801a968:	681b      	ldr	r3, [r3, #0]
 801a96a:	781b      	ldrb	r3, [r3, #0]
 801a96c:	2b39      	cmp	r3, #57	@ 0x39
 801a96e:	d9e6      	bls.n	801a93e <ee_skip_atoi+0xe>
  return i;
 801a970:	68fb      	ldr	r3, [r7, #12]
}
 801a972:	4618      	mov	r0, r3
 801a974:	3714      	adds	r7, #20
 801a976:	46bd      	mov	sp, r7
 801a978:	bc80      	pop	{r7}
 801a97a:	4770      	bx	lr

0801a97c <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801a97c:	b480      	push	{r7}
 801a97e:	b099      	sub	sp, #100	@ 0x64
 801a980:	af00      	add	r7, sp, #0
 801a982:	60f8      	str	r0, [r7, #12]
 801a984:	60b9      	str	r1, [r7, #8]
 801a986:	607a      	str	r2, [r7, #4]
 801a988:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801a98a:	4b71      	ldr	r3, [pc, #452]	@ (801ab50 <ee_number+0x1d4>)
 801a98c:	681b      	ldr	r3, [r3, #0]
 801a98e:	65bb      	str	r3, [r7, #88]	@ 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801a990:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a996:	2b00      	cmp	r3, #0
 801a998:	d002      	beq.n	801a9a0 <ee_number+0x24>
 801a99a:	4b6e      	ldr	r3, [pc, #440]	@ (801ab54 <ee_number+0x1d8>)
 801a99c:	681b      	ldr	r3, [r3, #0]
 801a99e:	65bb      	str	r3, [r7, #88]	@ 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801a9a0:	683b      	ldr	r3, [r7, #0]
 801a9a2:	2b01      	cmp	r3, #1
 801a9a4:	dd02      	ble.n	801a9ac <ee_number+0x30>
 801a9a6:	683b      	ldr	r3, [r7, #0]
 801a9a8:	2b24      	cmp	r3, #36	@ 0x24
 801a9aa:	dd01      	ble.n	801a9b0 <ee_number+0x34>
 801a9ac:	2300      	movs	r3, #0
 801a9ae:	e0ca      	b.n	801ab46 <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801a9b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a9b2:	f003 0301 	and.w	r3, r3, #1
 801a9b6:	2b00      	cmp	r3, #0
 801a9b8:	d001      	beq.n	801a9be <ee_number+0x42>
 801a9ba:	2330      	movs	r3, #48	@ 0x30
 801a9bc:	e000      	b.n	801a9c0 <ee_number+0x44>
 801a9be:	2320      	movs	r3, #32
 801a9c0:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  sign = 0;
 801a9c4:	2300      	movs	r3, #0
 801a9c6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (type & SIGN)
 801a9ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a9cc:	f003 0302 	and.w	r3, r3, #2
 801a9d0:	2b00      	cmp	r3, #0
 801a9d2:	d00b      	beq.n	801a9ec <ee_number+0x70>
  {
    if (num < 0)
 801a9d4:	687b      	ldr	r3, [r7, #4]
 801a9d6:	2b00      	cmp	r3, #0
 801a9d8:	da08      	bge.n	801a9ec <ee_number+0x70>
    {
      sign = '-';
 801a9da:	232d      	movs	r3, #45	@ 0x2d
 801a9dc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      num = -num;
 801a9e0:	687b      	ldr	r3, [r7, #4]
 801a9e2:	425b      	negs	r3, r3
 801a9e4:	607b      	str	r3, [r7, #4]
      size--;
 801a9e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a9e8:	3b01      	subs	r3, #1
 801a9ea:	66bb      	str	r3, [r7, #104]	@ 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801a9ec:	2300      	movs	r3, #0
 801a9ee:	657b      	str	r3, [r7, #84]	@ 0x54

  if (num == 0)
 801a9f0:	687b      	ldr	r3, [r7, #4]
 801a9f2:	2b00      	cmp	r3, #0
 801a9f4:	d11e      	bne.n	801aa34 <ee_number+0xb8>
    tmp[i++] = '0';
 801a9f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a9f8:	1c5a      	adds	r2, r3, #1
 801a9fa:	657a      	str	r2, [r7, #84]	@ 0x54
 801a9fc:	3360      	adds	r3, #96	@ 0x60
 801a9fe:	443b      	add	r3, r7
 801aa00:	2230      	movs	r2, #48	@ 0x30
 801aa02:	f803 2c50 	strb.w	r2, [r3, #-80]
 801aa06:	e018      	b.n	801aa3a <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801aa08:	687b      	ldr	r3, [r7, #4]
 801aa0a:	683a      	ldr	r2, [r7, #0]
 801aa0c:	fbb3 f1f2 	udiv	r1, r3, r2
 801aa10:	fb01 f202 	mul.w	r2, r1, r2
 801aa14:	1a9b      	subs	r3, r3, r2
 801aa16:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801aa18:	441a      	add	r2, r3
 801aa1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801aa1c:	1c59      	adds	r1, r3, #1
 801aa1e:	6579      	str	r1, [r7, #84]	@ 0x54
 801aa20:	7812      	ldrb	r2, [r2, #0]
 801aa22:	3360      	adds	r3, #96	@ 0x60
 801aa24:	443b      	add	r3, r7
 801aa26:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801aa2a:	687a      	ldr	r2, [r7, #4]
 801aa2c:	683b      	ldr	r3, [r7, #0]
 801aa2e:	fbb2 f3f3 	udiv	r3, r2, r3
 801aa32:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801aa34:	687b      	ldr	r3, [r7, #4]
 801aa36:	2b00      	cmp	r3, #0
 801aa38:	d1e6      	bne.n	801aa08 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801aa3a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801aa3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801aa3e:	429a      	cmp	r2, r3
 801aa40:	dd01      	ble.n	801aa46 <ee_number+0xca>
 801aa42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801aa44:	66fb      	str	r3, [r7, #108]	@ 0x6c
  size -= precision;
 801aa46:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801aa48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801aa4a:	1ad3      	subs	r3, r2, r3
 801aa4c:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801aa4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801aa50:	f003 0301 	and.w	r3, r3, #1
 801aa54:	2b00      	cmp	r3, #0
 801aa56:	d112      	bne.n	801aa7e <ee_number+0x102>
 801aa58:	e00c      	b.n	801aa74 <ee_number+0xf8>
 801aa5a:	68fb      	ldr	r3, [r7, #12]
 801aa5c:	1c5a      	adds	r2, r3, #1
 801aa5e:	60fa      	str	r2, [r7, #12]
 801aa60:	2220      	movs	r2, #32
 801aa62:	701a      	strb	r2, [r3, #0]
 801aa64:	68bb      	ldr	r3, [r7, #8]
 801aa66:	3b01      	subs	r3, #1
 801aa68:	60bb      	str	r3, [r7, #8]
 801aa6a:	68bb      	ldr	r3, [r7, #8]
 801aa6c:	2b00      	cmp	r3, #0
 801aa6e:	d101      	bne.n	801aa74 <ee_number+0xf8>
 801aa70:	68fb      	ldr	r3, [r7, #12]
 801aa72:	e068      	b.n	801ab46 <ee_number+0x1ca>
 801aa74:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801aa76:	1e5a      	subs	r2, r3, #1
 801aa78:	66ba      	str	r2, [r7, #104]	@ 0x68
 801aa7a:	2b00      	cmp	r3, #0
 801aa7c:	dced      	bgt.n	801aa5a <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801aa7e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801aa82:	2b00      	cmp	r3, #0
 801aa84:	d01b      	beq.n	801aabe <ee_number+0x142>
 801aa86:	68fb      	ldr	r3, [r7, #12]
 801aa88:	1c5a      	adds	r2, r3, #1
 801aa8a:	60fa      	str	r2, [r7, #12]
 801aa8c:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 801aa90:	701a      	strb	r2, [r3, #0]
 801aa92:	68bb      	ldr	r3, [r7, #8]
 801aa94:	3b01      	subs	r3, #1
 801aa96:	60bb      	str	r3, [r7, #8]
 801aa98:	68bb      	ldr	r3, [r7, #8]
 801aa9a:	2b00      	cmp	r3, #0
 801aa9c:	d10f      	bne.n	801aabe <ee_number+0x142>
 801aa9e:	68fb      	ldr	r3, [r7, #12]
 801aaa0:	e051      	b.n	801ab46 <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801aaa2:	68fb      	ldr	r3, [r7, #12]
 801aaa4:	1c5a      	adds	r2, r3, #1
 801aaa6:	60fa      	str	r2, [r7, #12]
 801aaa8:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 801aaac:	701a      	strb	r2, [r3, #0]
 801aaae:	68bb      	ldr	r3, [r7, #8]
 801aab0:	3b01      	subs	r3, #1
 801aab2:	60bb      	str	r3, [r7, #8]
 801aab4:	68bb      	ldr	r3, [r7, #8]
 801aab6:	2b00      	cmp	r3, #0
 801aab8:	d101      	bne.n	801aabe <ee_number+0x142>
 801aaba:	68fb      	ldr	r3, [r7, #12]
 801aabc:	e043      	b.n	801ab46 <ee_number+0x1ca>
 801aabe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801aac0:	1e5a      	subs	r2, r3, #1
 801aac2:	66ba      	str	r2, [r7, #104]	@ 0x68
 801aac4:	2b00      	cmp	r3, #0
 801aac6:	dcec      	bgt.n	801aaa2 <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801aac8:	e00c      	b.n	801aae4 <ee_number+0x168>
 801aaca:	68fb      	ldr	r3, [r7, #12]
 801aacc:	1c5a      	adds	r2, r3, #1
 801aace:	60fa      	str	r2, [r7, #12]
 801aad0:	2230      	movs	r2, #48	@ 0x30
 801aad2:	701a      	strb	r2, [r3, #0]
 801aad4:	68bb      	ldr	r3, [r7, #8]
 801aad6:	3b01      	subs	r3, #1
 801aad8:	60bb      	str	r3, [r7, #8]
 801aada:	68bb      	ldr	r3, [r7, #8]
 801aadc:	2b00      	cmp	r3, #0
 801aade:	d101      	bne.n	801aae4 <ee_number+0x168>
 801aae0:	68fb      	ldr	r3, [r7, #12]
 801aae2:	e030      	b.n	801ab46 <ee_number+0x1ca>
 801aae4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801aae6:	1e5a      	subs	r2, r3, #1
 801aae8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801aaea:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801aaec:	429a      	cmp	r2, r3
 801aaee:	dbec      	blt.n	801aaca <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801aaf0:	e010      	b.n	801ab14 <ee_number+0x198>
 801aaf2:	68fb      	ldr	r3, [r7, #12]
 801aaf4:	1c5a      	adds	r2, r3, #1
 801aaf6:	60fa      	str	r2, [r7, #12]
 801aaf8:	f107 0110 	add.w	r1, r7, #16
 801aafc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801aafe:	440a      	add	r2, r1
 801ab00:	7812      	ldrb	r2, [r2, #0]
 801ab02:	701a      	strb	r2, [r3, #0]
 801ab04:	68bb      	ldr	r3, [r7, #8]
 801ab06:	3b01      	subs	r3, #1
 801ab08:	60bb      	str	r3, [r7, #8]
 801ab0a:	68bb      	ldr	r3, [r7, #8]
 801ab0c:	2b00      	cmp	r3, #0
 801ab0e:	d101      	bne.n	801ab14 <ee_number+0x198>
 801ab10:	68fb      	ldr	r3, [r7, #12]
 801ab12:	e018      	b.n	801ab46 <ee_number+0x1ca>
 801ab14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801ab16:	1e5a      	subs	r2, r3, #1
 801ab18:	657a      	str	r2, [r7, #84]	@ 0x54
 801ab1a:	2b00      	cmp	r3, #0
 801ab1c:	dce9      	bgt.n	801aaf2 <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801ab1e:	e00c      	b.n	801ab3a <ee_number+0x1be>
 801ab20:	68fb      	ldr	r3, [r7, #12]
 801ab22:	1c5a      	adds	r2, r3, #1
 801ab24:	60fa      	str	r2, [r7, #12]
 801ab26:	2220      	movs	r2, #32
 801ab28:	701a      	strb	r2, [r3, #0]
 801ab2a:	68bb      	ldr	r3, [r7, #8]
 801ab2c:	3b01      	subs	r3, #1
 801ab2e:	60bb      	str	r3, [r7, #8]
 801ab30:	68bb      	ldr	r3, [r7, #8]
 801ab32:	2b00      	cmp	r3, #0
 801ab34:	d101      	bne.n	801ab3a <ee_number+0x1be>
 801ab36:	68fb      	ldr	r3, [r7, #12]
 801ab38:	e005      	b.n	801ab46 <ee_number+0x1ca>
 801ab3a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801ab3c:	1e5a      	subs	r2, r3, #1
 801ab3e:	66ba      	str	r2, [r7, #104]	@ 0x68
 801ab40:	2b00      	cmp	r3, #0
 801ab42:	dced      	bgt.n	801ab20 <ee_number+0x1a4>

  return str;
 801ab44:	68fb      	ldr	r3, [r7, #12]
}
 801ab46:	4618      	mov	r0, r3
 801ab48:	3764      	adds	r7, #100	@ 0x64
 801ab4a:	46bd      	mov	sp, r7
 801ab4c:	bc80      	pop	{r7}
 801ab4e:	4770      	bx	lr
 801ab50:	200000e4 	.word	0x200000e4
 801ab54:	200000e8 	.word	0x200000e8

0801ab58 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801ab58:	b580      	push	{r7, lr}
 801ab5a:	b092      	sub	sp, #72	@ 0x48
 801ab5c:	af04      	add	r7, sp, #16
 801ab5e:	60f8      	str	r0, [r7, #12]
 801ab60:	60b9      	str	r1, [r7, #8]
 801ab62:	607a      	str	r2, [r7, #4]
 801ab64:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801ab66:	68bb      	ldr	r3, [r7, #8]
 801ab68:	2b00      	cmp	r3, #0
 801ab6a:	dc01      	bgt.n	801ab70 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801ab6c:	2300      	movs	r3, #0
 801ab6e:	e13e      	b.n	801adee <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801ab70:	68fb      	ldr	r3, [r7, #12]
 801ab72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801ab74:	e128      	b.n	801adc8 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801ab76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ab78:	68fb      	ldr	r3, [r7, #12]
 801ab7a:	1ad2      	subs	r2, r2, r3
 801ab7c:	68bb      	ldr	r3, [r7, #8]
 801ab7e:	3b01      	subs	r3, #1
 801ab80:	429a      	cmp	r2, r3
 801ab82:	f280 812e 	bge.w	801ade2 <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801ab86:	687b      	ldr	r3, [r7, #4]
 801ab88:	781b      	ldrb	r3, [r3, #0]
 801ab8a:	2b25      	cmp	r3, #37	@ 0x25
 801ab8c:	d006      	beq.n	801ab9c <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801ab8e:	687a      	ldr	r2, [r7, #4]
 801ab90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ab92:	1c59      	adds	r1, r3, #1
 801ab94:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801ab96:	7812      	ldrb	r2, [r2, #0]
 801ab98:	701a      	strb	r2, [r3, #0]
      continue;
 801ab9a:	e112      	b.n	801adc2 <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801ab9c:	2300      	movs	r3, #0
 801ab9e:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801aba0:	687b      	ldr	r3, [r7, #4]
 801aba2:	3301      	adds	r3, #1
 801aba4:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801aba6:	687b      	ldr	r3, [r7, #4]
 801aba8:	781b      	ldrb	r3, [r3, #0]
 801abaa:	2b30      	cmp	r3, #48	@ 0x30
 801abac:	d103      	bne.n	801abb6 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801abae:	6a3b      	ldr	r3, [r7, #32]
 801abb0:	f043 0301 	orr.w	r3, r3, #1
 801abb4:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801abb6:	f04f 33ff 	mov.w	r3, #4294967295
 801abba:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801abbc:	687b      	ldr	r3, [r7, #4]
 801abbe:	781b      	ldrb	r3, [r3, #0]
 801abc0:	2b2f      	cmp	r3, #47	@ 0x2f
 801abc2:	d908      	bls.n	801abd6 <tiny_vsnprintf_like+0x7e>
 801abc4:	687b      	ldr	r3, [r7, #4]
 801abc6:	781b      	ldrb	r3, [r3, #0]
 801abc8:	2b39      	cmp	r3, #57	@ 0x39
 801abca:	d804      	bhi.n	801abd6 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801abcc:	1d3b      	adds	r3, r7, #4
 801abce:	4618      	mov	r0, r3
 801abd0:	f7ff feae 	bl	801a930 <ee_skip_atoi>
 801abd4:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801abd6:	f04f 33ff 	mov.w	r3, #4294967295
 801abda:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801abdc:	f04f 33ff 	mov.w	r3, #4294967295
 801abe0:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801abe2:	230a      	movs	r3, #10
 801abe4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (*fmt)
 801abe6:	687b      	ldr	r3, [r7, #4]
 801abe8:	781b      	ldrb	r3, [r3, #0]
 801abea:	3b58      	subs	r3, #88	@ 0x58
 801abec:	2b20      	cmp	r3, #32
 801abee:	f200 8094 	bhi.w	801ad1a <tiny_vsnprintf_like+0x1c2>
 801abf2:	a201      	add	r2, pc, #4	@ (adr r2, 801abf8 <tiny_vsnprintf_like+0xa0>)
 801abf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801abf8:	0801ad03 	.word	0x0801ad03
 801abfc:	0801ad1b 	.word	0x0801ad1b
 801ac00:	0801ad1b 	.word	0x0801ad1b
 801ac04:	0801ad1b 	.word	0x0801ad1b
 801ac08:	0801ad1b 	.word	0x0801ad1b
 801ac0c:	0801ad1b 	.word	0x0801ad1b
 801ac10:	0801ad1b 	.word	0x0801ad1b
 801ac14:	0801ad1b 	.word	0x0801ad1b
 801ac18:	0801ad1b 	.word	0x0801ad1b
 801ac1c:	0801ad1b 	.word	0x0801ad1b
 801ac20:	0801ad1b 	.word	0x0801ad1b
 801ac24:	0801ac87 	.word	0x0801ac87
 801ac28:	0801ad11 	.word	0x0801ad11
 801ac2c:	0801ad1b 	.word	0x0801ad1b
 801ac30:	0801ad1b 	.word	0x0801ad1b
 801ac34:	0801ad1b 	.word	0x0801ad1b
 801ac38:	0801ad1b 	.word	0x0801ad1b
 801ac3c:	0801ad11 	.word	0x0801ad11
 801ac40:	0801ad1b 	.word	0x0801ad1b
 801ac44:	0801ad1b 	.word	0x0801ad1b
 801ac48:	0801ad1b 	.word	0x0801ad1b
 801ac4c:	0801ad1b 	.word	0x0801ad1b
 801ac50:	0801ad1b 	.word	0x0801ad1b
 801ac54:	0801ad1b 	.word	0x0801ad1b
 801ac58:	0801ad1b 	.word	0x0801ad1b
 801ac5c:	0801ad1b 	.word	0x0801ad1b
 801ac60:	0801ad1b 	.word	0x0801ad1b
 801ac64:	0801aca7 	.word	0x0801aca7
 801ac68:	0801ad1b 	.word	0x0801ad1b
 801ac6c:	0801ad67 	.word	0x0801ad67
 801ac70:	0801ad1b 	.word	0x0801ad1b
 801ac74:	0801ad1b 	.word	0x0801ad1b
 801ac78:	0801ad0b 	.word	0x0801ad0b
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801ac7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ac7e:	1c5a      	adds	r2, r3, #1
 801ac80:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801ac82:	2220      	movs	r2, #32
 801ac84:	701a      	strb	r2, [r3, #0]
 801ac86:	69fb      	ldr	r3, [r7, #28]
 801ac88:	3b01      	subs	r3, #1
 801ac8a:	61fb      	str	r3, [r7, #28]
 801ac8c:	69fb      	ldr	r3, [r7, #28]
 801ac8e:	2b00      	cmp	r3, #0
 801ac90:	dcf4      	bgt.n	801ac7c <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801ac92:	683b      	ldr	r3, [r7, #0]
 801ac94:	1d1a      	adds	r2, r3, #4
 801ac96:	603a      	str	r2, [r7, #0]
 801ac98:	6819      	ldr	r1, [r3, #0]
 801ac9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ac9c:	1c5a      	adds	r2, r3, #1
 801ac9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801aca0:	b2ca      	uxtb	r2, r1
 801aca2:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801aca4:	e08d      	b.n	801adc2 <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801aca6:	683b      	ldr	r3, [r7, #0]
 801aca8:	1d1a      	adds	r2, r3, #4
 801acaa:	603a      	str	r2, [r7, #0]
 801acac:	681b      	ldr	r3, [r3, #0]
 801acae:	627b      	str	r3, [r7, #36]	@ 0x24
        if (!s) s = "<NULL>";
 801acb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801acb2:	2b00      	cmp	r3, #0
 801acb4:	d101      	bne.n	801acba <tiny_vsnprintf_like+0x162>
 801acb6:	4b50      	ldr	r3, [pc, #320]	@ (801adf8 <tiny_vsnprintf_like+0x2a0>)
 801acb8:	627b      	str	r3, [r7, #36]	@ 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801acba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801acbc:	f7e5 fa60 	bl	8000180 <strlen>
 801acc0:	4603      	mov	r3, r0
 801acc2:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801acc4:	e004      	b.n	801acd0 <tiny_vsnprintf_like+0x178>
 801acc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801acc8:	1c5a      	adds	r2, r3, #1
 801acca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801accc:	2220      	movs	r2, #32
 801acce:	701a      	strb	r2, [r3, #0]
 801acd0:	69fb      	ldr	r3, [r7, #28]
 801acd2:	1e5a      	subs	r2, r3, #1
 801acd4:	61fa      	str	r2, [r7, #28]
 801acd6:	693a      	ldr	r2, [r7, #16]
 801acd8:	429a      	cmp	r2, r3
 801acda:	dbf4      	blt.n	801acc6 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801acdc:	2300      	movs	r3, #0
 801acde:	62bb      	str	r3, [r7, #40]	@ 0x28
 801ace0:	e00a      	b.n	801acf8 <tiny_vsnprintf_like+0x1a0>
 801ace2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ace4:	1c53      	adds	r3, r2, #1
 801ace6:	627b      	str	r3, [r7, #36]	@ 0x24
 801ace8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801acea:	1c59      	adds	r1, r3, #1
 801acec:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801acee:	7812      	ldrb	r2, [r2, #0]
 801acf0:	701a      	strb	r2, [r3, #0]
 801acf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801acf4:	3301      	adds	r3, #1
 801acf6:	62bb      	str	r3, [r7, #40]	@ 0x28
 801acf8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801acfa:	693b      	ldr	r3, [r7, #16]
 801acfc:	429a      	cmp	r2, r3
 801acfe:	dbf0      	blt.n	801ace2 <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801ad00:	e05f      	b.n	801adc2 <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801ad02:	6a3b      	ldr	r3, [r7, #32]
 801ad04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ad08:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801ad0a:	2310      	movs	r3, #16
 801ad0c:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 801ad0e:	e02b      	b.n	801ad68 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801ad10:	6a3b      	ldr	r3, [r7, #32]
 801ad12:	f043 0302 	orr.w	r3, r3, #2
 801ad16:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801ad18:	e025      	b.n	801ad66 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801ad1a:	687b      	ldr	r3, [r7, #4]
 801ad1c:	781b      	ldrb	r3, [r3, #0]
 801ad1e:	2b25      	cmp	r3, #37	@ 0x25
 801ad20:	d004      	beq.n	801ad2c <tiny_vsnprintf_like+0x1d4>
 801ad22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ad24:	1c5a      	adds	r2, r3, #1
 801ad26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801ad28:	2225      	movs	r2, #37	@ 0x25
 801ad2a:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801ad2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ad2e:	68fb      	ldr	r3, [r7, #12]
 801ad30:	1ad2      	subs	r2, r2, r3
 801ad32:	68bb      	ldr	r3, [r7, #8]
 801ad34:	3b01      	subs	r3, #1
 801ad36:	429a      	cmp	r2, r3
 801ad38:	da16      	bge.n	801ad68 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801ad3a:	687b      	ldr	r3, [r7, #4]
 801ad3c:	781b      	ldrb	r3, [r3, #0]
 801ad3e:	2b00      	cmp	r3, #0
 801ad40:	d006      	beq.n	801ad50 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801ad42:	687a      	ldr	r2, [r7, #4]
 801ad44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ad46:	1c59      	adds	r1, r3, #1
 801ad48:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801ad4a:	7812      	ldrb	r2, [r2, #0]
 801ad4c:	701a      	strb	r2, [r3, #0]
 801ad4e:	e002      	b.n	801ad56 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801ad50:	687b      	ldr	r3, [r7, #4]
 801ad52:	3b01      	subs	r3, #1
 801ad54:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801ad56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ad58:	68fb      	ldr	r3, [r7, #12]
 801ad5a:	1ad2      	subs	r2, r2, r3
 801ad5c:	68bb      	ldr	r3, [r7, #8]
 801ad5e:	3b01      	subs	r3, #1
 801ad60:	429a      	cmp	r2, r3
 801ad62:	db2d      	blt.n	801adc0 <tiny_vsnprintf_like+0x268>
 801ad64:	e000      	b.n	801ad68 <tiny_vsnprintf_like+0x210>
        break;
 801ad66:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801ad68:	697b      	ldr	r3, [r7, #20]
 801ad6a:	2b6c      	cmp	r3, #108	@ 0x6c
 801ad6c:	d105      	bne.n	801ad7a <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801ad6e:	683b      	ldr	r3, [r7, #0]
 801ad70:	1d1a      	adds	r2, r3, #4
 801ad72:	603a      	str	r2, [r7, #0]
 801ad74:	681b      	ldr	r3, [r3, #0]
 801ad76:	637b      	str	r3, [r7, #52]	@ 0x34
 801ad78:	e00f      	b.n	801ad9a <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801ad7a:	6a3b      	ldr	r3, [r7, #32]
 801ad7c:	f003 0302 	and.w	r3, r3, #2
 801ad80:	2b00      	cmp	r3, #0
 801ad82:	d005      	beq.n	801ad90 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801ad84:	683b      	ldr	r3, [r7, #0]
 801ad86:	1d1a      	adds	r2, r3, #4
 801ad88:	603a      	str	r2, [r7, #0]
 801ad8a:	681b      	ldr	r3, [r3, #0]
 801ad8c:	637b      	str	r3, [r7, #52]	@ 0x34
 801ad8e:	e004      	b.n	801ad9a <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801ad90:	683b      	ldr	r3, [r7, #0]
 801ad92:	1d1a      	adds	r2, r3, #4
 801ad94:	603a      	str	r2, [r7, #0]
 801ad96:	681b      	ldr	r3, [r3, #0]
 801ad98:	637b      	str	r3, [r7, #52]	@ 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801ad9a:	68bb      	ldr	r3, [r7, #8]
 801ad9c:	1e5a      	subs	r2, r3, #1
 801ad9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801ada0:	68fb      	ldr	r3, [r7, #12]
 801ada2:	1acb      	subs	r3, r1, r3
 801ada4:	1ad1      	subs	r1, r2, r3
 801ada6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801ada8:	6a3b      	ldr	r3, [r7, #32]
 801adaa:	9302      	str	r3, [sp, #8]
 801adac:	69bb      	ldr	r3, [r7, #24]
 801adae:	9301      	str	r3, [sp, #4]
 801adb0:	69fb      	ldr	r3, [r7, #28]
 801adb2:	9300      	str	r3, [sp, #0]
 801adb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801adb6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801adb8:	f7ff fde0 	bl	801a97c <ee_number>
 801adbc:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801adbe:	e000      	b.n	801adc2 <tiny_vsnprintf_like+0x26a>
        continue;
 801adc0:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801adc2:	687b      	ldr	r3, [r7, #4]
 801adc4:	3301      	adds	r3, #1
 801adc6:	607b      	str	r3, [r7, #4]
 801adc8:	687b      	ldr	r3, [r7, #4]
 801adca:	781b      	ldrb	r3, [r3, #0]
 801adcc:	2b00      	cmp	r3, #0
 801adce:	f47f aed2 	bne.w	801ab76 <tiny_vsnprintf_like+0x1e>
 801add2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801add4:	68fb      	ldr	r3, [r7, #12]
 801add6:	1ad2      	subs	r2, r2, r3
 801add8:	68bb      	ldr	r3, [r7, #8]
 801adda:	3b01      	subs	r3, #1
 801addc:	429a      	cmp	r2, r3
 801adde:	f6bf aeca 	bge.w	801ab76 <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801ade2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ade4:	2200      	movs	r2, #0
 801ade6:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801ade8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801adea:	68fb      	ldr	r3, [r7, #12]
 801adec:	1ad3      	subs	r3, r2, r3
}
 801adee:	4618      	mov	r0, r3
 801adf0:	3738      	adds	r7, #56	@ 0x38
 801adf2:	46bd      	mov	sp, r7
 801adf4:	bd80      	pop	{r7, pc}
 801adf6:	bf00      	nop
 801adf8:	08020dd0 	.word	0x08020dd0

0801adfc <ai_log_err>:

static ai_buffer* ai_input;
static ai_buffer* ai_output;

static void ai_log_err(const ai_error err, const char *fct)
{
 801adfc:	b580      	push	{r7, lr}
 801adfe:	b082      	sub	sp, #8
 801ae00:	af00      	add	r7, sp, #0
 801ae02:	6078      	str	r0, [r7, #4]
 801ae04:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 801ae06:	683b      	ldr	r3, [r7, #0]
 801ae08:	2b00      	cmp	r3, #0
 801ae0a:	d009      	beq.n	801ae20 <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 801ae0c:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 801ae0e:	461a      	mov	r2, r3
        err.type, err.code);
 801ae10:	687b      	ldr	r3, [r7, #4]
 801ae12:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 801ae16:	6839      	ldr	r1, [r7, #0]
 801ae18:	4807      	ldr	r0, [pc, #28]	@ (801ae38 <ai_log_err+0x3c>)
 801ae1a:	f004 fde9 	bl	801f9f0 <iprintf>
 801ae1e:	e009      	b.n	801ae34 <ai_log_err+0x38>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 801ae20:	793b      	ldrb	r3, [r7, #4]
 801ae22:	4619      	mov	r1, r3
 801ae24:	687b      	ldr	r3, [r7, #4]
 801ae26:	f3c3 2317 	ubfx	r3, r3, #8, #24
 801ae2a:	461a      	mov	r2, r3
 801ae2c:	4803      	ldr	r0, [pc, #12]	@ (801ae3c <ai_log_err+0x40>)
 801ae2e:	f004 fddf 	bl	801f9f0 <iprintf>

  do {} while (1);
 801ae32:	bf00      	nop
 801ae34:	bf00      	nop
 801ae36:	e7fd      	b.n	801ae34 <ai_log_err+0x38>
 801ae38:	08020dd8 	.word	0x08020dd8
 801ae3c:	08020e0c 	.word	0x08020e0c

0801ae40 <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle *act_addr)
{
 801ae40:	b580      	push	{r7, lr}
 801ae42:	b086      	sub	sp, #24
 801ae44:	af00      	add	r7, sp, #0
 801ae46:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* Create and initialize an instance of the model */
  err = ai_network_appltemp_0506_create_and_init(&network_appltemp_0506, act_addr, NULL);
 801ae48:	2200      	movs	r2, #0
 801ae4a:	6879      	ldr	r1, [r7, #4]
 801ae4c:	4828      	ldr	r0, [pc, #160]	@ (801aef0 <ai_boostrap+0xb0>)
 801ae4e:	f000 f9e3 	bl	801b218 <ai_network_appltemp_0506_create_and_init>
 801ae52:	4603      	mov	r3, r0
 801ae54:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 801ae56:	7b3b      	ldrb	r3, [r7, #12]
 801ae58:	2b00      	cmp	r3, #0
 801ae5a:	d006      	beq.n	801ae6a <ai_boostrap+0x2a>
    ai_log_err(err, "ai_network_appltemp_0506_create_and_init");
 801ae5c:	4925      	ldr	r1, [pc, #148]	@ (801aef4 <ai_boostrap+0xb4>)
 801ae5e:	68f8      	ldr	r0, [r7, #12]
 801ae60:	f7ff ffcc 	bl	801adfc <ai_log_err>
    return -1;
 801ae64:	f04f 33ff 	mov.w	r3, #4294967295
 801ae68:	e03e      	b.n	801aee8 <ai_boostrap+0xa8>
  }

  ai_input = ai_network_appltemp_0506_inputs_get(network_appltemp_0506, NULL);
 801ae6a:	4b21      	ldr	r3, [pc, #132]	@ (801aef0 <ai_boostrap+0xb0>)
 801ae6c:	681b      	ldr	r3, [r3, #0]
 801ae6e:	2100      	movs	r1, #0
 801ae70:	4618      	mov	r0, r3
 801ae72:	f000 fa4f 	bl	801b314 <ai_network_appltemp_0506_inputs_get>
 801ae76:	4603      	mov	r3, r0
 801ae78:	4a1f      	ldr	r2, [pc, #124]	@ (801aef8 <ai_boostrap+0xb8>)
 801ae7a:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_appltemp_0506_outputs_get(network_appltemp_0506, NULL);
 801ae7c:	4b1c      	ldr	r3, [pc, #112]	@ (801aef0 <ai_boostrap+0xb0>)
 801ae7e:	681b      	ldr	r3, [r3, #0]
 801ae80:	2100      	movs	r1, #0
 801ae82:	4618      	mov	r0, r3
 801ae84:	f000 fa60 	bl	801b348 <ai_network_appltemp_0506_outputs_get>
 801ae88:	4603      	mov	r3, r0
 801ae8a:	4a1c      	ldr	r2, [pc, #112]	@ (801aefc <ai_boostrap+0xbc>)
 801ae8c:	6013      	str	r3, [r2, #0]

#if defined(AI_NETWORK_APPLTEMP_0506_INPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-inputs" option is used, memory buffer can be
   *  used from the activations buffer. This is not mandatory.
   */
  for (int idx=0; idx < AI_NETWORK_APPLTEMP_0506_IN_NUM; idx++) {
 801ae8e:	2300      	movs	r3, #0
 801ae90:	617b      	str	r3, [r7, #20]
 801ae92:	e00f      	b.n	801aeb4 <ai_boostrap+0x74>
	data_ins[idx] = ai_input[idx].data;
 801ae94:	4b18      	ldr	r3, [pc, #96]	@ (801aef8 <ai_boostrap+0xb8>)
 801ae96:	6819      	ldr	r1, [r3, #0]
 801ae98:	697a      	ldr	r2, [r7, #20]
 801ae9a:	4613      	mov	r3, r2
 801ae9c:	00db      	lsls	r3, r3, #3
 801ae9e:	1a9b      	subs	r3, r3, r2
 801aea0:	009b      	lsls	r3, r3, #2
 801aea2:	440b      	add	r3, r1
 801aea4:	685a      	ldr	r2, [r3, #4]
 801aea6:	4916      	ldr	r1, [pc, #88]	@ (801af00 <ai_boostrap+0xc0>)
 801aea8:	697b      	ldr	r3, [r7, #20]
 801aeaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_NETWORK_APPLTEMP_0506_IN_NUM; idx++) {
 801aeae:	697b      	ldr	r3, [r7, #20]
 801aeb0:	3301      	adds	r3, #1
 801aeb2:	617b      	str	r3, [r7, #20]
 801aeb4:	697b      	ldr	r3, [r7, #20]
 801aeb6:	2b00      	cmp	r3, #0
 801aeb8:	ddec      	ble.n	801ae94 <ai_boostrap+0x54>

#if defined(AI_NETWORK_APPLTEMP_0506_OUTPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-outputs" option is used, memory buffer can be
   *  used from the activations buffer. This is no mandatory.
   */
  for (int idx=0; idx < AI_NETWORK_APPLTEMP_0506_OUT_NUM; idx++) {
 801aeba:	2300      	movs	r3, #0
 801aebc:	613b      	str	r3, [r7, #16]
 801aebe:	e00f      	b.n	801aee0 <ai_boostrap+0xa0>
	data_outs[idx] = ai_output[idx].data;
 801aec0:	4b0e      	ldr	r3, [pc, #56]	@ (801aefc <ai_boostrap+0xbc>)
 801aec2:	6819      	ldr	r1, [r3, #0]
 801aec4:	693a      	ldr	r2, [r7, #16]
 801aec6:	4613      	mov	r3, r2
 801aec8:	00db      	lsls	r3, r3, #3
 801aeca:	1a9b      	subs	r3, r3, r2
 801aecc:	009b      	lsls	r3, r3, #2
 801aece:	440b      	add	r3, r1
 801aed0:	685a      	ldr	r2, [r3, #4]
 801aed2:	490c      	ldr	r1, [pc, #48]	@ (801af04 <ai_boostrap+0xc4>)
 801aed4:	693b      	ldr	r3, [r7, #16]
 801aed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_NETWORK_APPLTEMP_0506_OUT_NUM; idx++) {
 801aeda:	693b      	ldr	r3, [r7, #16]
 801aedc:	3301      	adds	r3, #1
 801aede:	613b      	str	r3, [r7, #16]
 801aee0:	693b      	ldr	r3, [r7, #16]
 801aee2:	2b00      	cmp	r3, #0
 801aee4:	ddec      	ble.n	801aec0 <ai_boostrap+0x80>
  for (int idx=0; idx < AI_NETWORK_APPLTEMP_0506_OUT_NUM; idx++) {
	ai_output[idx].data = data_outs[idx];
  }
#endif

  return 0;
 801aee6:	2300      	movs	r3, #0
}
 801aee8:	4618      	mov	r0, r3
 801aeea:	3718      	adds	r7, #24
 801aeec:	46bd      	mov	sp, r7
 801aeee:	bd80      	pop	{r7, pc}
 801aef0:	20001a54 	.word	0x20001a54
 801aef4:	08020e3c 	.word	0x08020e3c
 801aef8:	20001a58 	.word	0x20001a58
 801aefc:	20001a5c 	.word	0x20001a5c
 801af00:	20001a4c 	.word	0x20001a4c
 801af04:	20001a50 	.word	0x20001a50

0801af08 <ai_run>:

static int ai_run(void)
{
 801af08:	b580      	push	{r7, lr}
 801af0a:	b082      	sub	sp, #8
 801af0c:	af00      	add	r7, sp, #0
  ai_i32 batch;

  batch = ai_network_appltemp_0506_run(network_appltemp_0506, ai_input, ai_output);
 801af0e:	4b0f      	ldr	r3, [pc, #60]	@ (801af4c <ai_run+0x44>)
 801af10:	681b      	ldr	r3, [r3, #0]
 801af12:	4a0f      	ldr	r2, [pc, #60]	@ (801af50 <ai_run+0x48>)
 801af14:	6811      	ldr	r1, [r2, #0]
 801af16:	4a0f      	ldr	r2, [pc, #60]	@ (801af54 <ai_run+0x4c>)
 801af18:	6812      	ldr	r2, [r2, #0]
 801af1a:	4618      	mov	r0, r3
 801af1c:	f000 fa6a 	bl	801b3f4 <ai_network_appltemp_0506_run>
 801af20:	6078      	str	r0, [r7, #4]
  if (batch != 1) {
 801af22:	687b      	ldr	r3, [r7, #4]
 801af24:	2b01      	cmp	r3, #1
 801af26:	d00c      	beq.n	801af42 <ai_run+0x3a>
    ai_log_err(ai_network_appltemp_0506_get_error(network_appltemp_0506),
 801af28:	4b08      	ldr	r3, [pc, #32]	@ (801af4c <ai_run+0x44>)
 801af2a:	681b      	ldr	r3, [r3, #0]
 801af2c:	4618      	mov	r0, r3
 801af2e:	f000 f951 	bl	801b1d4 <ai_network_appltemp_0506_get_error>
 801af32:	4603      	mov	r3, r0
 801af34:	4908      	ldr	r1, [pc, #32]	@ (801af58 <ai_run+0x50>)
 801af36:	4618      	mov	r0, r3
 801af38:	f7ff ff60 	bl	801adfc <ai_log_err>
        "ai_network_appltemp_0506_run");
    return -1;
 801af3c:	f04f 33ff 	mov.w	r3, #4294967295
 801af40:	e000      	b.n	801af44 <ai_run+0x3c>
  }

  return 0;
 801af42:	2300      	movs	r3, #0
}
 801af44:	4618      	mov	r0, r3
 801af46:	3708      	adds	r7, #8
 801af48:	46bd      	mov	sp, r7
 801af4a:	bd80      	pop	{r7, pc}
 801af4c:	20001a54 	.word	0x20001a54
 801af50:	20001a58 	.word	0x20001a58
 801af54:	20001a5c 	.word	0x20001a5c
 801af58:	08020e68 	.word	0x08020e68

0801af5c <acquire_and_process_data>:

/* USER CODE BEGIN 2 */
int acquire_and_process_data(ai_i8* data[])
{
 801af5c:	b480      	push	{r7}
 801af5e:	b083      	sub	sp, #12
 801af60:	af00      	add	r7, sp, #0
 801af62:	6078      	str	r0, [r7, #4]

  */
	extern float my_SoilSensor;
	extern float my_SHT40_Temp_Float;
	extern float my_SHT40_Humid_Float;
	data_sensors[0] = 44.33;					// Soil Moisture Sensor
 801af64:	4b0a      	ldr	r3, [pc, #40]	@ (801af90 <acquire_and_process_data+0x34>)
 801af66:	4a0b      	ldr	r2, [pc, #44]	@ (801af94 <acquire_and_process_data+0x38>)
 801af68:	601a      	str	r2, [r3, #0]
	data_sensors[1] = my_SHT40_Temp_Float;				// Temp Sensor
 801af6a:	4b0b      	ldr	r3, [pc, #44]	@ (801af98 <acquire_and_process_data+0x3c>)
 801af6c:	681b      	ldr	r3, [r3, #0]
 801af6e:	4a08      	ldr	r2, [pc, #32]	@ (801af90 <acquire_and_process_data+0x34>)
 801af70:	6053      	str	r3, [r2, #4]
	data_sensors[2] = my_SHT40_Humid_Float;				// Hum Sensor
 801af72:	4b0a      	ldr	r3, [pc, #40]	@ (801af9c <acquire_and_process_data+0x40>)
 801af74:	681b      	ldr	r3, [r3, #0]
 801af76:	4a06      	ldr	r2, [pc, #24]	@ (801af90 <acquire_and_process_data+0x34>)
 801af78:	6093      	str	r3, [r2, #8]
	ai_input[0].data = AI_HANDLE_PTR(data_sensors);
 801af7a:	4b09      	ldr	r3, [pc, #36]	@ (801afa0 <acquire_and_process_data+0x44>)
 801af7c:	681b      	ldr	r3, [r3, #0]
 801af7e:	4a04      	ldr	r2, [pc, #16]	@ (801af90 <acquire_and_process_data+0x34>)
 801af80:	605a      	str	r2, [r3, #4]
  return 0;
 801af82:	2300      	movs	r3, #0
}
 801af84:	4618      	mov	r0, r3
 801af86:	370c      	adds	r7, #12
 801af88:	46bd      	mov	sp, r7
 801af8a:	bc80      	pop	{r7}
 801af8c:	4770      	bx	lr
 801af8e:	bf00      	nop
 801af90:	20001a3c 	.word	0x20001a3c
 801af94:	423151ec 	.word	0x423151ec
 801af98:	20001bec 	.word	0x20001bec
 801af9c:	20001bf0 	.word	0x20001bf0
 801afa0:	20001a58 	.word	0x20001a58

0801afa4 <post_process>:

int post_process(ai_i8* data[])
{
 801afa4:	b580      	push	{r7, lr}
 801afa6:	b084      	sub	sp, #16
 801afa8:	af00      	add	r7, sp, #0
 801afaa:	6078      	str	r0, [r7, #4]
  {
      data[idx] = ....
  }

  */
	float result = *((float*)data[0]);
 801afac:	687b      	ldr	r3, [r7, #4]
 801afae:	681b      	ldr	r3, [r3, #0]
 801afb0:	681b      	ldr	r3, [r3, #0]
 801afb2:	60fb      	str	r3, [r7, #12]
		if (result > 0.5f)
 801afb4:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 801afb8:	68f8      	ldr	r0, [r7, #12]
 801afba:	f7e5 fe6f 	bl	8000c9c <__aeabi_fcmpgt>
 801afbe:	4603      	mov	r3, r0
 801afc0:	2b00      	cmp	r3, #0
 801afc2:	d003      	beq.n	801afcc <post_process+0x28>
		{
			result_nn = 1;
 801afc4:	4b05      	ldr	r3, [pc, #20]	@ (801afdc <post_process+0x38>)
 801afc6:	2201      	movs	r2, #1
 801afc8:	701a      	strb	r2, [r3, #0]
 801afca:	e002      	b.n	801afd2 <post_process+0x2e>
		}
		else
		{
			result_nn = 0;
 801afcc:	4b03      	ldr	r3, [pc, #12]	@ (801afdc <post_process+0x38>)
 801afce:	2200      	movs	r2, #0
 801afd0:	701a      	strb	r2, [r3, #0]
		}
	  return 0;
 801afd2:	2300      	movs	r3, #0
}
 801afd4:	4618      	mov	r0, r3
 801afd6:	3710      	adds	r7, #16
 801afd8:	46bd      	mov	sp, r7
 801afda:	bd80      	pop	{r7, pc}
 801afdc:	20001a48 	.word	0x20001a48

0801afe0 <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 801afe0:	b580      	push	{r7, lr}
 801afe2:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 801afe4:	4803      	ldr	r0, [pc, #12]	@ (801aff4 <MX_X_CUBE_AI_Init+0x14>)
 801afe6:	f004 fd6b 	bl	801fac0 <puts>

  ai_boostrap(data_activations0);
 801afea:	4803      	ldr	r0, [pc, #12]	@ (801aff8 <MX_X_CUBE_AI_Init+0x18>)
 801afec:	f7ff ff28 	bl	801ae40 <ai_boostrap>
    /* USER CODE END 5 */
}
 801aff0:	bf00      	nop
 801aff2:	bd80      	pop	{r7, pc}
 801aff4:	08020e88 	.word	0x08020e88
 801aff8:	200000ec 	.word	0x200000ec

0801affc <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 801affc:	b580      	push	{r7, lr}
 801affe:	b082      	sub	sp, #8
 801b000:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 6 */
  int res = -1;
 801b002:	f04f 33ff 	mov.w	r3, #4294967295
 801b006:	607b      	str	r3, [r7, #4]

  //printf("TEMPLATE - run - main loop\r\n");

  if (network_appltemp_0506) {
 801b008:	4b13      	ldr	r3, [pc, #76]	@ (801b058 <MX_X_CUBE_AI_Process+0x5c>)
 801b00a:	681b      	ldr	r3, [r3, #0]
 801b00c:	2b00      	cmp	r3, #0
 801b00e:	d010      	beq.n	801b032 <MX_X_CUBE_AI_Process+0x36>

    //do {
      /* 1 - acquire and pre-process input data */
      res = acquire_and_process_data(data_ins);
 801b010:	4812      	ldr	r0, [pc, #72]	@ (801b05c <MX_X_CUBE_AI_Process+0x60>)
 801b012:	f7ff ffa3 	bl	801af5c <acquire_and_process_data>
 801b016:	6078      	str	r0, [r7, #4]
      /* 2 - process the data - call inference engine */
      if (res == 0)
 801b018:	687b      	ldr	r3, [r7, #4]
 801b01a:	2b00      	cmp	r3, #0
 801b01c:	d102      	bne.n	801b024 <MX_X_CUBE_AI_Process+0x28>
        res = ai_run();
 801b01e:	f7ff ff73 	bl	801af08 <ai_run>
 801b022:	6078      	str	r0, [r7, #4]
      /* 3- post-process the predictions */
      if (res == 0)
 801b024:	687b      	ldr	r3, [r7, #4]
 801b026:	2b00      	cmp	r3, #0
 801b028:	d103      	bne.n	801b032 <MX_X_CUBE_AI_Process+0x36>
        res = post_process(data_outs);
 801b02a:	480d      	ldr	r0, [pc, #52]	@ (801b060 <MX_X_CUBE_AI_Process+0x64>)
 801b02c:	f7ff ffba 	bl	801afa4 <post_process>
 801b030:	6078      	str	r0, [r7, #4]
    //} while (res==0);
  }

  if (res) {
 801b032:	687b      	ldr	r3, [r7, #4]
 801b034:	2b00      	cmp	r3, #0
 801b036:	d00a      	beq.n	801b04e <MX_X_CUBE_AI_Process+0x52>
    ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
 801b038:	2311      	movs	r3, #17
 801b03a:	703b      	strb	r3, [r7, #0]
 801b03c:	683b      	ldr	r3, [r7, #0]
 801b03e:	2210      	movs	r2, #16
 801b040:	f362 231f 	bfi	r3, r2, #8, #24
 801b044:	603b      	str	r3, [r7, #0]
    ai_log_err(err, "Process has FAILED");
 801b046:	4907      	ldr	r1, [pc, #28]	@ (801b064 <MX_X_CUBE_AI_Process+0x68>)
 801b048:	6838      	ldr	r0, [r7, #0]
 801b04a:	f7ff fed7 	bl	801adfc <ai_log_err>
  }
    /* USER CODE END 6 */
}
 801b04e:	bf00      	nop
 801b050:	3708      	adds	r7, #8
 801b052:	46bd      	mov	sp, r7
 801b054:	bd80      	pop	{r7, pc}
 801b056:	bf00      	nop
 801b058:	20001a54 	.word	0x20001a54
 801b05c:	20001a4c 	.word	0x20001a4c
 801b060:	20001a50 	.word	0x20001a50
 801b064:	08020ea8 	.word	0x08020ea8

0801b068 <network_appltemp_0506_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_appltemp_0506_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 801b068:	b580      	push	{r7, lr}
 801b06a:	b082      	sub	sp, #8
 801b06c:	af00      	add	r7, sp, #0
 801b06e:	6078      	str	r0, [r7, #4]
 801b070:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_appltemp_0506_activations_map, 1, params)) {
 801b072:	683a      	ldr	r2, [r7, #0]
 801b074:	2101      	movs	r1, #1
 801b076:	4820      	ldr	r0, [pc, #128]	@ (801b0f8 <network_appltemp_0506_configure_activations+0x90>)
 801b078:	f002 fe1c 	bl	801dcb4 <ai_platform_get_activations_map>
 801b07c:	4603      	mov	r3, r0
 801b07e:	2b00      	cmp	r3, #0
 801b080:	d02f      	beq.n	801b0e2 <network_appltemp_0506_configure_activations+0x7a>
    /* Updating activations (byte) offsets */
    
    input_0_output_array.data = AI_PTR(g_network_appltemp_0506_activations_map[0] + 0);
 801b082:	4b1d      	ldr	r3, [pc, #116]	@ (801b0f8 <network_appltemp_0506_configure_activations+0x90>)
 801b084:	681b      	ldr	r3, [r3, #0]
 801b086:	4a1d      	ldr	r2, [pc, #116]	@ (801b0fc <network_appltemp_0506_configure_activations+0x94>)
 801b088:	6093      	str	r3, [r2, #8]
    input_0_output_array.data_start = AI_PTR(g_network_appltemp_0506_activations_map[0] + 0);
 801b08a:	4b1b      	ldr	r3, [pc, #108]	@ (801b0f8 <network_appltemp_0506_configure_activations+0x90>)
 801b08c:	681b      	ldr	r3, [r3, #0]
 801b08e:	4a1b      	ldr	r2, [pc, #108]	@ (801b0fc <network_appltemp_0506_configure_activations+0x94>)
 801b090:	60d3      	str	r3, [r2, #12]
    dense_dense_output_array.data = AI_PTR(g_network_appltemp_0506_activations_map[0] + 12);
 801b092:	4b19      	ldr	r3, [pc, #100]	@ (801b0f8 <network_appltemp_0506_configure_activations+0x90>)
 801b094:	681b      	ldr	r3, [r3, #0]
 801b096:	330c      	adds	r3, #12
 801b098:	4a19      	ldr	r2, [pc, #100]	@ (801b100 <network_appltemp_0506_configure_activations+0x98>)
 801b09a:	6093      	str	r3, [r2, #8]
    dense_dense_output_array.data_start = AI_PTR(g_network_appltemp_0506_activations_map[0] + 12);
 801b09c:	4b16      	ldr	r3, [pc, #88]	@ (801b0f8 <network_appltemp_0506_configure_activations+0x90>)
 801b09e:	681b      	ldr	r3, [r3, #0]
 801b0a0:	330c      	adds	r3, #12
 801b0a2:	4a17      	ldr	r2, [pc, #92]	@ (801b100 <network_appltemp_0506_configure_activations+0x98>)
 801b0a4:	60d3      	str	r3, [r2, #12]
    dense_output_array.data = AI_PTR(g_network_appltemp_0506_activations_map[0] + 12);
 801b0a6:	4b14      	ldr	r3, [pc, #80]	@ (801b0f8 <network_appltemp_0506_configure_activations+0x90>)
 801b0a8:	681b      	ldr	r3, [r3, #0]
 801b0aa:	330c      	adds	r3, #12
 801b0ac:	4a15      	ldr	r2, [pc, #84]	@ (801b104 <network_appltemp_0506_configure_activations+0x9c>)
 801b0ae:	6093      	str	r3, [r2, #8]
    dense_output_array.data_start = AI_PTR(g_network_appltemp_0506_activations_map[0] + 12);
 801b0b0:	4b11      	ldr	r3, [pc, #68]	@ (801b0f8 <network_appltemp_0506_configure_activations+0x90>)
 801b0b2:	681b      	ldr	r3, [r3, #0]
 801b0b4:	330c      	adds	r3, #12
 801b0b6:	4a13      	ldr	r2, [pc, #76]	@ (801b104 <network_appltemp_0506_configure_activations+0x9c>)
 801b0b8:	60d3      	str	r3, [r2, #12]
    dense_1_dense_output_array.data = AI_PTR(g_network_appltemp_0506_activations_map[0] + 0);
 801b0ba:	4b0f      	ldr	r3, [pc, #60]	@ (801b0f8 <network_appltemp_0506_configure_activations+0x90>)
 801b0bc:	681b      	ldr	r3, [r3, #0]
 801b0be:	4a12      	ldr	r2, [pc, #72]	@ (801b108 <network_appltemp_0506_configure_activations+0xa0>)
 801b0c0:	6093      	str	r3, [r2, #8]
    dense_1_dense_output_array.data_start = AI_PTR(g_network_appltemp_0506_activations_map[0] + 0);
 801b0c2:	4b0d      	ldr	r3, [pc, #52]	@ (801b0f8 <network_appltemp_0506_configure_activations+0x90>)
 801b0c4:	681b      	ldr	r3, [r3, #0]
 801b0c6:	4a10      	ldr	r2, [pc, #64]	@ (801b108 <network_appltemp_0506_configure_activations+0xa0>)
 801b0c8:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(g_network_appltemp_0506_activations_map[0] + 4);
 801b0ca:	4b0b      	ldr	r3, [pc, #44]	@ (801b0f8 <network_appltemp_0506_configure_activations+0x90>)
 801b0cc:	681b      	ldr	r3, [r3, #0]
 801b0ce:	3304      	adds	r3, #4
 801b0d0:	4a0e      	ldr	r2, [pc, #56]	@ (801b10c <network_appltemp_0506_configure_activations+0xa4>)
 801b0d2:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(g_network_appltemp_0506_activations_map[0] + 4);
 801b0d4:	4b08      	ldr	r3, [pc, #32]	@ (801b0f8 <network_appltemp_0506_configure_activations+0x90>)
 801b0d6:	681b      	ldr	r3, [r3, #0]
 801b0d8:	3304      	adds	r3, #4
 801b0da:	4a0c      	ldr	r2, [pc, #48]	@ (801b10c <network_appltemp_0506_configure_activations+0xa4>)
 801b0dc:	60d3      	str	r3, [r2, #12]
    return true;
 801b0de:	2301      	movs	r3, #1
 801b0e0:	e005      	b.n	801b0ee <network_appltemp_0506_configure_activations+0x86>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 801b0e2:	2213      	movs	r2, #19
 801b0e4:	2130      	movs	r1, #48	@ 0x30
 801b0e6:	6878      	ldr	r0, [r7, #4]
 801b0e8:	f002 fe64 	bl	801ddb4 <ai_platform_network_set_error>
  return false;
 801b0ec:	2300      	movs	r3, #0
}
 801b0ee:	4618      	mov	r0, r3
 801b0f0:	3708      	adds	r7, #8
 801b0f2:	46bd      	mov	sp, r7
 801b0f4:	bd80      	pop	{r7, pc}
 801b0f6:	bf00      	nop
 801b0f8:	20001a60 	.word	0x20001a60
 801b0fc:	200000f0 	.word	0x200000f0
 801b100:	20000100 	.word	0x20000100
 801b104:	20000110 	.word	0x20000110
 801b108:	20000120 	.word	0x20000120
 801b10c:	20000130 	.word	0x20000130

0801b110 <network_appltemp_0506_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_appltemp_0506_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 801b110:	b580      	push	{r7, lr}
 801b112:	b082      	sub	sp, #8
 801b114:	af00      	add	r7, sp, #0
 801b116:	6078      	str	r0, [r7, #4]
 801b118:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_appltemp_0506_weights_map, 1, params)) {
 801b11a:	683a      	ldr	r2, [r7, #0]
 801b11c:	2101      	movs	r1, #1
 801b11e:	4828      	ldr	r0, [pc, #160]	@ (801b1c0 <network_appltemp_0506_configure_weights+0xb0>)
 801b120:	f002 fd76 	bl	801dc10 <ai_platform_get_weights_map>
 801b124:	4603      	mov	r3, r0
 801b126:	2b00      	cmp	r3, #0
 801b128:	d03f      	beq.n	801b1aa <network_appltemp_0506_configure_weights+0x9a>
    /* Updating weights (byte) offsets */
    
    dense_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 801b12a:	4b26      	ldr	r3, [pc, #152]	@ (801b1c4 <network_appltemp_0506_configure_weights+0xb4>)
 801b12c:	681b      	ldr	r3, [r3, #0]
 801b12e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801b132:	4a24      	ldr	r2, [pc, #144]	@ (801b1c4 <network_appltemp_0506_configure_weights+0xb4>)
 801b134:	6013      	str	r3, [r2, #0]
    dense_dense_weights_array.data = AI_PTR(g_network_appltemp_0506_weights_map[0] + 0);
 801b136:	4b22      	ldr	r3, [pc, #136]	@ (801b1c0 <network_appltemp_0506_configure_weights+0xb0>)
 801b138:	681b      	ldr	r3, [r3, #0]
 801b13a:	4a22      	ldr	r2, [pc, #136]	@ (801b1c4 <network_appltemp_0506_configure_weights+0xb4>)
 801b13c:	6093      	str	r3, [r2, #8]
    dense_dense_weights_array.data_start = AI_PTR(g_network_appltemp_0506_weights_map[0] + 0);
 801b13e:	4b20      	ldr	r3, [pc, #128]	@ (801b1c0 <network_appltemp_0506_configure_weights+0xb0>)
 801b140:	681b      	ldr	r3, [r3, #0]
 801b142:	4a20      	ldr	r2, [pc, #128]	@ (801b1c4 <network_appltemp_0506_configure_weights+0xb4>)
 801b144:	60d3      	str	r3, [r2, #12]
    dense_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 801b146:	4b20      	ldr	r3, [pc, #128]	@ (801b1c8 <network_appltemp_0506_configure_weights+0xb8>)
 801b148:	681b      	ldr	r3, [r3, #0]
 801b14a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801b14e:	4a1e      	ldr	r2, [pc, #120]	@ (801b1c8 <network_appltemp_0506_configure_weights+0xb8>)
 801b150:	6013      	str	r3, [r2, #0]
    dense_dense_bias_array.data = AI_PTR(g_network_appltemp_0506_weights_map[0] + 96);
 801b152:	4b1b      	ldr	r3, [pc, #108]	@ (801b1c0 <network_appltemp_0506_configure_weights+0xb0>)
 801b154:	681b      	ldr	r3, [r3, #0]
 801b156:	3360      	adds	r3, #96	@ 0x60
 801b158:	4a1b      	ldr	r2, [pc, #108]	@ (801b1c8 <network_appltemp_0506_configure_weights+0xb8>)
 801b15a:	6093      	str	r3, [r2, #8]
    dense_dense_bias_array.data_start = AI_PTR(g_network_appltemp_0506_weights_map[0] + 96);
 801b15c:	4b18      	ldr	r3, [pc, #96]	@ (801b1c0 <network_appltemp_0506_configure_weights+0xb0>)
 801b15e:	681b      	ldr	r3, [r3, #0]
 801b160:	3360      	adds	r3, #96	@ 0x60
 801b162:	4a19      	ldr	r2, [pc, #100]	@ (801b1c8 <network_appltemp_0506_configure_weights+0xb8>)
 801b164:	60d3      	str	r3, [r2, #12]
    dense_1_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 801b166:	4b19      	ldr	r3, [pc, #100]	@ (801b1cc <network_appltemp_0506_configure_weights+0xbc>)
 801b168:	681b      	ldr	r3, [r3, #0]
 801b16a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801b16e:	4a17      	ldr	r2, [pc, #92]	@ (801b1cc <network_appltemp_0506_configure_weights+0xbc>)
 801b170:	6013      	str	r3, [r2, #0]
    dense_1_dense_weights_array.data = AI_PTR(g_network_appltemp_0506_weights_map[0] + 128);
 801b172:	4b13      	ldr	r3, [pc, #76]	@ (801b1c0 <network_appltemp_0506_configure_weights+0xb0>)
 801b174:	681b      	ldr	r3, [r3, #0]
 801b176:	3380      	adds	r3, #128	@ 0x80
 801b178:	4a14      	ldr	r2, [pc, #80]	@ (801b1cc <network_appltemp_0506_configure_weights+0xbc>)
 801b17a:	6093      	str	r3, [r2, #8]
    dense_1_dense_weights_array.data_start = AI_PTR(g_network_appltemp_0506_weights_map[0] + 128);
 801b17c:	4b10      	ldr	r3, [pc, #64]	@ (801b1c0 <network_appltemp_0506_configure_weights+0xb0>)
 801b17e:	681b      	ldr	r3, [r3, #0]
 801b180:	3380      	adds	r3, #128	@ 0x80
 801b182:	4a12      	ldr	r2, [pc, #72]	@ (801b1cc <network_appltemp_0506_configure_weights+0xbc>)
 801b184:	60d3      	str	r3, [r2, #12]
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 801b186:	4b12      	ldr	r3, [pc, #72]	@ (801b1d0 <network_appltemp_0506_configure_weights+0xc0>)
 801b188:	681b      	ldr	r3, [r3, #0]
 801b18a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801b18e:	4a10      	ldr	r2, [pc, #64]	@ (801b1d0 <network_appltemp_0506_configure_weights+0xc0>)
 801b190:	6013      	str	r3, [r2, #0]
    dense_1_dense_bias_array.data = AI_PTR(g_network_appltemp_0506_weights_map[0] + 160);
 801b192:	4b0b      	ldr	r3, [pc, #44]	@ (801b1c0 <network_appltemp_0506_configure_weights+0xb0>)
 801b194:	681b      	ldr	r3, [r3, #0]
 801b196:	33a0      	adds	r3, #160	@ 0xa0
 801b198:	4a0d      	ldr	r2, [pc, #52]	@ (801b1d0 <network_appltemp_0506_configure_weights+0xc0>)
 801b19a:	6093      	str	r3, [r2, #8]
    dense_1_dense_bias_array.data_start = AI_PTR(g_network_appltemp_0506_weights_map[0] + 160);
 801b19c:	4b08      	ldr	r3, [pc, #32]	@ (801b1c0 <network_appltemp_0506_configure_weights+0xb0>)
 801b19e:	681b      	ldr	r3, [r3, #0]
 801b1a0:	33a0      	adds	r3, #160	@ 0xa0
 801b1a2:	4a0b      	ldr	r2, [pc, #44]	@ (801b1d0 <network_appltemp_0506_configure_weights+0xc0>)
 801b1a4:	60d3      	str	r3, [r2, #12]
    return true;
 801b1a6:	2301      	movs	r3, #1
 801b1a8:	e005      	b.n	801b1b6 <network_appltemp_0506_configure_weights+0xa6>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 801b1aa:	2212      	movs	r2, #18
 801b1ac:	2130      	movs	r1, #48	@ 0x30
 801b1ae:	6878      	ldr	r0, [r7, #4]
 801b1b0:	f002 fe00 	bl	801ddb4 <ai_platform_network_set_error>
  return false;
 801b1b4:	2300      	movs	r3, #0
}
 801b1b6:	4618      	mov	r0, r3
 801b1b8:	3708      	adds	r7, #8
 801b1ba:	46bd      	mov	sp, r7
 801b1bc:	bd80      	pop	{r7, pc}
 801b1be:	bf00      	nop
 801b1c0:	20001a64 	.word	0x20001a64
 801b1c4:	20000140 	.word	0x20000140
 801b1c8:	20000150 	.word	0x20000150
 801b1cc:	20000160 	.word	0x20000160
 801b1d0:	20000170 	.word	0x20000170

0801b1d4 <ai_network_appltemp_0506_get_error>:
}


AI_API_ENTRY
ai_error ai_network_appltemp_0506_get_error(ai_handle network)
{
 801b1d4:	b580      	push	{r7, lr}
 801b1d6:	b082      	sub	sp, #8
 801b1d8:	af00      	add	r7, sp, #0
 801b1da:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 801b1dc:	6878      	ldr	r0, [r7, #4]
 801b1de:	f002 fddd 	bl	801dd9c <ai_platform_network_get_error>
 801b1e2:	4603      	mov	r3, r0
}
 801b1e4:	4618      	mov	r0, r3
 801b1e6:	3708      	adds	r7, #8
 801b1e8:	46bd      	mov	sp, r7
 801b1ea:	bd80      	pop	{r7, pc}

0801b1ec <ai_network_appltemp_0506_create>:


AI_API_ENTRY
ai_error ai_network_appltemp_0506_create(
  ai_handle* network, const ai_buffer* network_config)
{
 801b1ec:	b580      	push	{r7, lr}
 801b1ee:	b084      	sub	sp, #16
 801b1f0:	af02      	add	r7, sp, #8
 801b1f2:	6078      	str	r0, [r7, #4]
 801b1f4:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 801b1f6:	2300      	movs	r3, #0
 801b1f8:	9301      	str	r3, [sp, #4]
 801b1fa:	2305      	movs	r3, #5
 801b1fc:	9300      	str	r3, [sp, #0]
 801b1fe:	2301      	movs	r3, #1
 801b200:	4a04      	ldr	r2, [pc, #16]	@ (801b214 <ai_network_appltemp_0506_create+0x28>)
 801b202:	6839      	ldr	r1, [r7, #0]
 801b204:	6878      	ldr	r0, [r7, #4]
 801b206:	f002 fec3 	bl	801df90 <ai_platform_network_create>
 801b20a:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 801b20c:	4618      	mov	r0, r3
 801b20e:	3708      	adds	r7, #8
 801b210:	46bd      	mov	sp, r7
 801b212:	bd80      	pop	{r7, pc}
 801b214:	20000594 	.word	0x20000594

0801b218 <ai_network_appltemp_0506_create_and_init>:


AI_API_ENTRY
ai_error ai_network_appltemp_0506_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 801b218:	b580      	push	{r7, lr}
 801b21a:	b094      	sub	sp, #80	@ 0x50
 801b21c:	af00      	add	r7, sp, #0
 801b21e:	60f8      	str	r0, [r7, #12]
 801b220:	60b9      	str	r1, [r7, #8]
 801b222:	607a      	str	r2, [r7, #4]
  ai_error err;
  ai_network_params params;

  err = ai_network_appltemp_0506_create(network, AI_NETWORK_APPLTEMP_0506_DATA_CONFIG);
 801b224:	2100      	movs	r1, #0
 801b226:	68f8      	ldr	r0, [r7, #12]
 801b228:	f7ff ffe0 	bl	801b1ec <ai_network_appltemp_0506_create>
 801b22c:	4603      	mov	r3, r0
 801b22e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (err.type != AI_ERROR_NONE) {
 801b230:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 801b234:	2b00      	cmp	r3, #0
 801b236:	d001      	beq.n	801b23c <ai_network_appltemp_0506_create_and_init+0x24>
    return err;
 801b238:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b23a:	e067      	b.n	801b30c <ai_network_appltemp_0506_create_and_init+0xf4>
  }
  
  if (ai_network_appltemp_0506_data_params_get(&params) != true) {
 801b23c:	f107 0310 	add.w	r3, r7, #16
 801b240:	4618      	mov	r0, r3
 801b242:	f000 f8e7 	bl	801b414 <ai_network_appltemp_0506_data_params_get>
 801b246:	4603      	mov	r3, r0
 801b248:	f083 0301 	eor.w	r3, r3, #1
 801b24c:	b2db      	uxtb	r3, r3
 801b24e:	2b00      	cmp	r3, #0
 801b250:	d008      	beq.n	801b264 <ai_network_appltemp_0506_create_and_init+0x4c>
    err = ai_network_appltemp_0506_get_error(*network);
 801b252:	68fb      	ldr	r3, [r7, #12]
 801b254:	681b      	ldr	r3, [r3, #0]
 801b256:	4618      	mov	r0, r3
 801b258:	f7ff ffbc 	bl	801b1d4 <ai_network_appltemp_0506_get_error>
 801b25c:	4603      	mov	r3, r0
 801b25e:	64bb      	str	r3, [r7, #72]	@ 0x48
    return err;
 801b260:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b262:	e053      	b.n	801b30c <ai_network_appltemp_0506_create_and_init+0xf4>
  }
#if defined(AI_NETWORK_APPLTEMP_0506_DATA_ACTIVATIONS_COUNT)
  /* set the addresses of the activations buffers */
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 801b264:	2300      	movs	r3, #0
 801b266:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 801b26a:	e012      	b.n	801b292 <ai_network_appltemp_0506_create_and_init+0x7a>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 801b26c:	f8b7 104e 	ldrh.w	r1, [r7, #78]	@ 0x4e
 801b270:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801b274:	009b      	lsls	r3, r3, #2
 801b276:	68ba      	ldr	r2, [r7, #8]
 801b278:	4413      	add	r3, r2
 801b27a:	681a      	ldr	r2, [r3, #0]
 801b27c:	f107 0310 	add.w	r3, r7, #16
 801b280:	330c      	adds	r3, #12
 801b282:	4618      	mov	r0, r3
 801b284:	f002 fcb6 	bl	801dbf4 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 801b288:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801b28c:	3301      	adds	r3, #1
 801b28e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 801b292:	68bb      	ldr	r3, [r7, #8]
 801b294:	2b00      	cmp	r3, #0
 801b296:	d004      	beq.n	801b2a2 <ai_network_appltemp_0506_create_and_init+0x8a>
 801b298:	8bfb      	ldrh	r3, [r7, #30]
 801b29a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801b29e:	429a      	cmp	r2, r3
 801b2a0:	d3e4      	bcc.n	801b26c <ai_network_appltemp_0506_create_and_init+0x54>
  }
#endif
#if defined(AI_NETWORK_APPLTEMP_0506_DATA_WEIGHTS_COUNT)
  /* set the addresses of the weight buffers */
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 801b2a2:	2300      	movs	r3, #0
 801b2a4:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 801b2a8:	e012      	b.n	801b2d0 <ai_network_appltemp_0506_create_and_init+0xb8>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 801b2aa:	f8b7 104c 	ldrh.w	r1, [r7, #76]	@ 0x4c
 801b2ae:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 801b2b2:	009b      	lsls	r3, r3, #2
 801b2b4:	687a      	ldr	r2, [r7, #4]
 801b2b6:	4413      	add	r3, r2
 801b2b8:	681a      	ldr	r2, [r3, #0]
 801b2ba:	f107 0310 	add.w	r3, r7, #16
 801b2be:	3304      	adds	r3, #4
 801b2c0:	4618      	mov	r0, r3
 801b2c2:	f002 fc97 	bl	801dbf4 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 801b2c6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 801b2ca:	3301      	adds	r3, #1
 801b2cc:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 801b2d0:	687b      	ldr	r3, [r7, #4]
 801b2d2:	2b00      	cmp	r3, #0
 801b2d4:	d004      	beq.n	801b2e0 <ai_network_appltemp_0506_create_and_init+0xc8>
 801b2d6:	8afb      	ldrh	r3, [r7, #22]
 801b2d8:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 801b2dc:	429a      	cmp	r2, r3
 801b2de:	d3e4      	bcc.n	801b2aa <ai_network_appltemp_0506_create_and_init+0x92>
  }
#endif
  if (ai_network_appltemp_0506_init(*network, &params) != true) {
 801b2e0:	68fb      	ldr	r3, [r7, #12]
 801b2e2:	681b      	ldr	r3, [r3, #0]
 801b2e4:	f107 0210 	add.w	r2, r7, #16
 801b2e8:	4611      	mov	r1, r2
 801b2ea:	4618      	mov	r0, r3
 801b2ec:	f000 f846 	bl	801b37c <ai_network_appltemp_0506_init>
 801b2f0:	4603      	mov	r3, r0
 801b2f2:	f083 0301 	eor.w	r3, r3, #1
 801b2f6:	b2db      	uxtb	r3, r3
 801b2f8:	2b00      	cmp	r3, #0
 801b2fa:	d006      	beq.n	801b30a <ai_network_appltemp_0506_create_and_init+0xf2>
    err = ai_network_appltemp_0506_get_error(*network);
 801b2fc:	68fb      	ldr	r3, [r7, #12]
 801b2fe:	681b      	ldr	r3, [r3, #0]
 801b300:	4618      	mov	r0, r3
 801b302:	f7ff ff67 	bl	801b1d4 <ai_network_appltemp_0506_get_error>
 801b306:	4603      	mov	r3, r0
 801b308:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  return err;
 801b30a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 801b30c:	4618      	mov	r0, r3
 801b30e:	3750      	adds	r7, #80	@ 0x50
 801b310:	46bd      	mov	sp, r7
 801b312:	bd80      	pop	{r7, pc}

0801b314 <ai_network_appltemp_0506_inputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_appltemp_0506_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 801b314:	b580      	push	{r7, lr}
 801b316:	b082      	sub	sp, #8
 801b318:	af00      	add	r7, sp, #0
 801b31a:	6078      	str	r0, [r7, #4]
 801b31c:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 801b31e:	687b      	ldr	r3, [r7, #4]
 801b320:	2b00      	cmp	r3, #0
 801b322:	d104      	bne.n	801b32e <ai_network_appltemp_0506_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 801b324:	4b06      	ldr	r3, [pc, #24]	@ (801b340 <ai_network_appltemp_0506_inputs_get+0x2c>)
 801b326:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 801b328:	687b      	ldr	r3, [r7, #4]
 801b32a:	4a06      	ldr	r2, [pc, #24]	@ (801b344 <ai_network_appltemp_0506_inputs_get+0x30>)
 801b32c:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 801b32e:	6839      	ldr	r1, [r7, #0]
 801b330:	6878      	ldr	r0, [r7, #4]
 801b332:	f002 fd45 	bl	801ddc0 <ai_platform_inputs_get>
 801b336:	4603      	mov	r3, r0
}
 801b338:	4618      	mov	r0, r3
 801b33a:	3708      	adds	r7, #8
 801b33c:	46bd      	mov	sp, r7
 801b33e:	bd80      	pop	{r7, pc}
 801b340:	20000594 	.word	0x20000594
 801b344:	a1c00100 	.word	0xa1c00100

0801b348 <ai_network_appltemp_0506_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_appltemp_0506_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 801b348:	b580      	push	{r7, lr}
 801b34a:	b082      	sub	sp, #8
 801b34c:	af00      	add	r7, sp, #0
 801b34e:	6078      	str	r0, [r7, #4]
 801b350:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 801b352:	687b      	ldr	r3, [r7, #4]
 801b354:	2b00      	cmp	r3, #0
 801b356:	d104      	bne.n	801b362 <ai_network_appltemp_0506_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 801b358:	4b06      	ldr	r3, [pc, #24]	@ (801b374 <ai_network_appltemp_0506_outputs_get+0x2c>)
 801b35a:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 801b35c:	687b      	ldr	r3, [r7, #4]
 801b35e:	4a06      	ldr	r2, [pc, #24]	@ (801b378 <ai_network_appltemp_0506_outputs_get+0x30>)
 801b360:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 801b362:	6839      	ldr	r1, [r7, #0]
 801b364:	6878      	ldr	r0, [r7, #4]
 801b366:	f002 fda1 	bl	801deac <ai_platform_outputs_get>
 801b36a:	4603      	mov	r3, r0
}
 801b36c:	4618      	mov	r0, r3
 801b36e:	3708      	adds	r7, #8
 801b370:	46bd      	mov	sp, r7
 801b372:	bd80      	pop	{r7, pc}
 801b374:	20000594 	.word	0x20000594
 801b378:	a1c00100 	.word	0xa1c00100

0801b37c <ai_network_appltemp_0506_init>:


AI_API_ENTRY
ai_bool ai_network_appltemp_0506_init(
  ai_handle network, const ai_network_params* params)
{
 801b37c:	b580      	push	{r7, lr}
 801b37e:	b084      	sub	sp, #16
 801b380:	af00      	add	r7, sp, #0
 801b382:	6078      	str	r0, [r7, #4]
 801b384:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 801b386:	6839      	ldr	r1, [r7, #0]
 801b388:	6878      	ldr	r0, [r7, #4]
 801b38a:	f002 fe43 	bl	801e014 <ai_platform_network_init>
 801b38e:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 801b390:	2301      	movs	r3, #1
 801b392:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 801b394:	68fb      	ldr	r3, [r7, #12]
 801b396:	2b00      	cmp	r3, #0
 801b398:	d101      	bne.n	801b39e <ai_network_appltemp_0506_init+0x22>
 801b39a:	2300      	movs	r3, #0
 801b39c:	e026      	b.n	801b3ec <ai_network_appltemp_0506_init+0x70>
  ok &= network_appltemp_0506_configure_weights(net_ctx, params);
 801b39e:	6839      	ldr	r1, [r7, #0]
 801b3a0:	68f8      	ldr	r0, [r7, #12]
 801b3a2:	f7ff feb5 	bl	801b110 <network_appltemp_0506_configure_weights>
 801b3a6:	4603      	mov	r3, r0
 801b3a8:	461a      	mov	r2, r3
 801b3aa:	7afb      	ldrb	r3, [r7, #11]
 801b3ac:	4013      	ands	r3, r2
 801b3ae:	2b00      	cmp	r3, #0
 801b3b0:	bf14      	ite	ne
 801b3b2:	2301      	movne	r3, #1
 801b3b4:	2300      	moveq	r3, #0
 801b3b6:	72fb      	strb	r3, [r7, #11]
  ok &= network_appltemp_0506_configure_activations(net_ctx, params);
 801b3b8:	6839      	ldr	r1, [r7, #0]
 801b3ba:	68f8      	ldr	r0, [r7, #12]
 801b3bc:	f7ff fe54 	bl	801b068 <network_appltemp_0506_configure_activations>
 801b3c0:	4603      	mov	r3, r0
 801b3c2:	461a      	mov	r2, r3
 801b3c4:	7afb      	ldrb	r3, [r7, #11]
 801b3c6:	4013      	ands	r3, r2
 801b3c8:	2b00      	cmp	r3, #0
 801b3ca:	bf14      	ite	ne
 801b3cc:	2301      	movne	r3, #1
 801b3ce:	2300      	moveq	r3, #0
 801b3d0:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 801b3d2:	6878      	ldr	r0, [r7, #4]
 801b3d4:	f002 feb6 	bl	801e144 <ai_platform_network_post_init>
 801b3d8:	4603      	mov	r3, r0
 801b3da:	461a      	mov	r2, r3
 801b3dc:	7afb      	ldrb	r3, [r7, #11]
 801b3de:	4013      	ands	r3, r2
 801b3e0:	2b00      	cmp	r3, #0
 801b3e2:	bf14      	ite	ne
 801b3e4:	2301      	movne	r3, #1
 801b3e6:	2300      	moveq	r3, #0
 801b3e8:	72fb      	strb	r3, [r7, #11]

  return ok;
 801b3ea:	7afb      	ldrb	r3, [r7, #11]
}
 801b3ec:	4618      	mov	r0, r3
 801b3ee:	3710      	adds	r7, #16
 801b3f0:	46bd      	mov	sp, r7
 801b3f2:	bd80      	pop	{r7, pc}

0801b3f4 <ai_network_appltemp_0506_run>:


AI_API_ENTRY
ai_i32 ai_network_appltemp_0506_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 801b3f4:	b580      	push	{r7, lr}
 801b3f6:	b084      	sub	sp, #16
 801b3f8:	af00      	add	r7, sp, #0
 801b3fa:	60f8      	str	r0, [r7, #12]
 801b3fc:	60b9      	str	r1, [r7, #8]
 801b3fe:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 801b400:	687a      	ldr	r2, [r7, #4]
 801b402:	68b9      	ldr	r1, [r7, #8]
 801b404:	68f8      	ldr	r0, [r7, #12]
 801b406:	f002 fecb 	bl	801e1a0 <ai_platform_network_process>
 801b40a:	4603      	mov	r3, r0
}
 801b40c:	4618      	mov	r0, r3
 801b40e:	3710      	adds	r7, #16
 801b410:	46bd      	mov	sp, r7
 801b412:	bd80      	pop	{r7, pc}

0801b414 <ai_network_appltemp_0506_data_params_get>:
 * @ingroup network_appltemp_0506_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_appltemp_0506_data_params_get(ai_network_params* params)
{
 801b414:	b580      	push	{r7, lr}
 801b416:	b086      	sub	sp, #24
 801b418:	af00      	add	r7, sp, #0
 801b41a:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 801b41c:	687b      	ldr	r3, [r7, #4]
 801b41e:	2b00      	cmp	r3, #0
 801b420:	d101      	bne.n	801b426 <ai_network_appltemp_0506_data_params_get+0x12>
 801b422:	2300      	movs	r3, #0
 801b424:	e016      	b.n	801b454 <ai_network_appltemp_0506_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 801b426:	4a0d      	ldr	r2, [pc, #52]	@ (801b45c <ai_network_appltemp_0506_data_params_get+0x48>)
 801b428:	f107 0310 	add.w	r3, r7, #16
 801b42c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b430:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_APPLTEMP_0506_DATA_ACTIVATIONS_COUNT, g_network_appltemp_0506_data_map_activations);
  
  const ai_buffer_array map_weights = 
 801b434:	4a0a      	ldr	r2, [pc, #40]	@ (801b460 <ai_network_appltemp_0506_data_params_get+0x4c>)
 801b436:	f107 0308 	add.w	r3, r7, #8
 801b43a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b43e:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_APPLTEMP_0506_DATA_WEIGHTS_COUNT, g_network_appltemp_0506_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 801b442:	f107 0210 	add.w	r2, r7, #16
 801b446:	f107 0308 	add.w	r3, r7, #8
 801b44a:	4619      	mov	r1, r3
 801b44c:	6878      	ldr	r0, [r7, #4]
 801b44e:	f002 fc85 	bl	801dd5c <ai_platform_bind_network_params>
 801b452:	4603      	mov	r3, r0
}
 801b454:	4618      	mov	r0, r3
 801b456:	3718      	adds	r7, #24
 801b458:	46bd      	mov	sp, r7
 801b45a:	bd80      	pop	{r7, pc}
 801b45c:	08020edc 	.word	0x08020edc
 801b460:	08020ee4 	.word	0x08020ee4

0801b464 <LL_APB1_GRP1_EnableClock>:
{
 801b464:	b480      	push	{r7}
 801b466:	b085      	sub	sp, #20
 801b468:	af00      	add	r7, sp, #0
 801b46a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 801b46c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801b470:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801b472:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801b476:	687b      	ldr	r3, [r7, #4]
 801b478:	4313      	orrs	r3, r2
 801b47a:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 801b47c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801b480:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801b482:	687b      	ldr	r3, [r7, #4]
 801b484:	4013      	ands	r3, r2
 801b486:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801b488:	68fb      	ldr	r3, [r7, #12]
}
 801b48a:	bf00      	nop
 801b48c:	3714      	adds	r7, #20
 801b48e:	46bd      	mov	sp, r7
 801b490:	bc80      	pop	{r7}
 801b492:	4770      	bx	lr

0801b494 <LL_APB1_GRP2_EnableClock>:
{
 801b494:	b480      	push	{r7}
 801b496:	b085      	sub	sp, #20
 801b498:	af00      	add	r7, sp, #0
 801b49a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 801b49c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801b4a0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801b4a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801b4a6:	687b      	ldr	r3, [r7, #4]
 801b4a8:	4313      	orrs	r3, r2
 801b4aa:	65cb      	str	r3, [r1, #92]	@ 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 801b4ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801b4b0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801b4b2:	687b      	ldr	r3, [r7, #4]
 801b4b4:	4013      	ands	r3, r2
 801b4b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801b4b8:	68fb      	ldr	r3, [r7, #12]
}
 801b4ba:	bf00      	nop
 801b4bc:	3714      	adds	r7, #20
 801b4be:	46bd      	mov	sp, r7
 801b4c0:	bc80      	pop	{r7}
 801b4c2:	4770      	bx	lr

0801b4c4 <MX_LPTIM1_Init>:
LPTIM_HandleTypeDef hlptim1;
LPTIM_HandleTypeDef hlptim2;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 801b4c4:	b580      	push	{r7, lr}
 801b4c6:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 801b4c8:	4b13      	ldr	r3, [pc, #76]	@ (801b518 <MX_LPTIM1_Init+0x54>)
 801b4ca:	4a14      	ldr	r2, [pc, #80]	@ (801b51c <MX_LPTIM1_Init+0x58>)
 801b4cc:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 801b4ce:	4b12      	ldr	r3, [pc, #72]	@ (801b518 <MX_LPTIM1_Init+0x54>)
 801b4d0:	2200      	movs	r2, #0
 801b4d2:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 801b4d4:	4b10      	ldr	r3, [pc, #64]	@ (801b518 <MX_LPTIM1_Init+0x54>)
 801b4d6:	f44f 6260 	mov.w	r2, #3584	@ 0xe00
 801b4da:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 801b4dc:	4b0e      	ldr	r3, [pc, #56]	@ (801b518 <MX_LPTIM1_Init+0x54>)
 801b4de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801b4e2:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 801b4e4:	4b0c      	ldr	r3, [pc, #48]	@ (801b518 <MX_LPTIM1_Init+0x54>)
 801b4e6:	2200      	movs	r2, #0
 801b4e8:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 801b4ea:	4b0b      	ldr	r3, [pc, #44]	@ (801b518 <MX_LPTIM1_Init+0x54>)
 801b4ec:	2200      	movs	r2, #0
 801b4ee:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 801b4f0:	4b09      	ldr	r3, [pc, #36]	@ (801b518 <MX_LPTIM1_Init+0x54>)
 801b4f2:	2200      	movs	r2, #0
 801b4f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 801b4f6:	4b08      	ldr	r3, [pc, #32]	@ (801b518 <MX_LPTIM1_Init+0x54>)
 801b4f8:	2200      	movs	r2, #0
 801b4fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 801b4fc:	4b06      	ldr	r3, [pc, #24]	@ (801b518 <MX_LPTIM1_Init+0x54>)
 801b4fe:	2200      	movs	r2, #0
 801b500:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 801b502:	4805      	ldr	r0, [pc, #20]	@ (801b518 <MX_LPTIM1_Init+0x54>)
 801b504:	f001 fe78 	bl	801d1f8 <HAL_LPTIM_Init>
 801b508:	4603      	mov	r3, r0
 801b50a:	2b00      	cmp	r3, #0
 801b50c:	d001      	beq.n	801b512 <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 801b50e:	f7e5 fef1 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 801b512:	bf00      	nop
 801b514:	bd80      	pop	{r7, pc}
 801b516:	bf00      	nop
 801b518:	20001b40 	.word	0x20001b40
 801b51c:	40007c00 	.word	0x40007c00

0801b520 <HAL_LPTIM_MspInit>:

}


void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 801b520:	b580      	push	{r7, lr}
 801b522:	b090      	sub	sp, #64	@ 0x40
 801b524:	af00      	add	r7, sp, #0
 801b526:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801b528:	f107 0308 	add.w	r3, r7, #8
 801b52c:	2238      	movs	r2, #56	@ 0x38
 801b52e:	2100      	movs	r1, #0
 801b530:	4618      	mov	r0, r3
 801b532:	f004 fba5 	bl	801fc80 <memset>
  if(lptimHandle->Instance==LPTIM1)
 801b536:	687b      	ldr	r3, [r7, #4]
 801b538:	681b      	ldr	r3, [r3, #0]
 801b53a:	4a21      	ldr	r2, [pc, #132]	@ (801b5c0 <HAL_LPTIM_MspInit+0xa0>)
 801b53c:	4293      	cmp	r3, r2
 801b53e:	d11c      	bne.n	801b57a <HAL_LPTIM_MspInit+0x5a>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 801b540:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801b544:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 801b546:	f04f 130c 	mov.w	r3, #786444	@ 0xc000c
 801b54a:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801b54c:	f107 0308 	add.w	r3, r7, #8
 801b550:	4618      	mov	r0, r3
 801b552:	f7ea ffc9 	bl	80064e8 <HAL_RCCEx_PeriphCLKConfig>
 801b556:	4603      	mov	r3, r0
 801b558:	2b00      	cmp	r3, #0
 801b55a:	d001      	beq.n	801b560 <HAL_LPTIM_MspInit+0x40>
    {
      Error_Handler();
 801b55c:	f7e5 feca 	bl	80012f4 <Error_Handler>
    }

    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 801b560:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 801b564:	f7ff ff7e 	bl	801b464 <LL_APB1_GRP1_EnableClock>

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 801b568:	2200      	movs	r2, #0
 801b56a:	2100      	movs	r1, #0
 801b56c:	2027      	movs	r0, #39	@ 0x27
 801b56e:	f7e7 ff28 	bl	80033c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 801b572:	2027      	movs	r0, #39	@ 0x27
 801b574:	f7e7 ff3f 	bl	80033f6 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN LPTIM2_MspInit 1 */

    /* USER CODE END LPTIM2_MspInit 1 */
    }

}
 801b578:	e01e      	b.n	801b5b8 <HAL_LPTIM_MspInit+0x98>
  else if(lptimHandle->Instance==LPTIM2)
 801b57a:	687b      	ldr	r3, [r7, #4]
 801b57c:	681b      	ldr	r3, [r3, #0]
 801b57e:	4a11      	ldr	r2, [pc, #68]	@ (801b5c4 <HAL_LPTIM_MspInit+0xa4>)
 801b580:	4293      	cmp	r3, r2
 801b582:	d119      	bne.n	801b5b8 <HAL_LPTIM_MspInit+0x98>
	  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 801b584:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801b588:	60bb      	str	r3, [r7, #8]
	  PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_HSI;
 801b58a:	4b0f      	ldr	r3, [pc, #60]	@ (801b5c8 <HAL_LPTIM_MspInit+0xa8>)
 801b58c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801b58e:	f107 0308 	add.w	r3, r7, #8
 801b592:	4618      	mov	r0, r3
 801b594:	f7ea ffa8 	bl	80064e8 <HAL_RCCEx_PeriphCLKConfig>
 801b598:	4603      	mov	r3, r0
 801b59a:	2b00      	cmp	r3, #0
 801b59c:	d001      	beq.n	801b5a2 <HAL_LPTIM_MspInit+0x82>
		  Error_Handler();
 801b59e:	f7e5 fea9 	bl	80012f4 <Error_Handler>
	  __HAL_RCC_LPTIM2_CLK_ENABLE();
 801b5a2:	2020      	movs	r0, #32
 801b5a4:	f7ff ff76 	bl	801b494 <LL_APB1_GRP2_EnableClock>
	  HAL_NVIC_SetPriority(LPTIM2_IRQn, 0, 0);
 801b5a8:	2200      	movs	r2, #0
 801b5aa:	2100      	movs	r1, #0
 801b5ac:	2028      	movs	r0, #40	@ 0x28
 801b5ae:	f7e7 ff08 	bl	80033c2 <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(LPTIM2_IRQn);
 801b5b2:	2028      	movs	r0, #40	@ 0x28
 801b5b4:	f7e7 ff1f 	bl	80033f6 <HAL_NVIC_EnableIRQ>
}
 801b5b8:	bf00      	nop
 801b5ba:	3740      	adds	r7, #64	@ 0x40
 801b5bc:	46bd      	mov	sp, r7
 801b5be:	bd80      	pop	{r7, pc}
 801b5c0:	40007c00 	.word	0x40007c00
 801b5c4:	40009400 	.word	0x40009400
 801b5c8:	00300020 	.word	0x00300020

0801b5cc <LL_PWR_SetPowerMode>:
{
 801b5cc:	b480      	push	{r7}
 801b5ce:	b083      	sub	sp, #12
 801b5d0:	af00      	add	r7, sp, #0
 801b5d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 801b5d4:	4b06      	ldr	r3, [pc, #24]	@ (801b5f0 <LL_PWR_SetPowerMode+0x24>)
 801b5d6:	681b      	ldr	r3, [r3, #0]
 801b5d8:	f023 0207 	bic.w	r2, r3, #7
 801b5dc:	4904      	ldr	r1, [pc, #16]	@ (801b5f0 <LL_PWR_SetPowerMode+0x24>)
 801b5de:	687b      	ldr	r3, [r7, #4]
 801b5e0:	4313      	orrs	r3, r2
 801b5e2:	600b      	str	r3, [r1, #0]
}
 801b5e4:	bf00      	nop
 801b5e6:	370c      	adds	r7, #12
 801b5e8:	46bd      	mov	sp, r7
 801b5ea:	bc80      	pop	{r7}
 801b5ec:	4770      	bx	lr
 801b5ee:	bf00      	nop
 801b5f0:	58000400 	.word	0x58000400

0801b5f4 <LL_C2_PWR_SetPowerMode>:
{
 801b5f4:	b480      	push	{r7}
 801b5f6:	b083      	sub	sp, #12
 801b5f8:	af00      	add	r7, sp, #0
 801b5fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 801b5fc:	4b07      	ldr	r3, [pc, #28]	@ (801b61c <LL_C2_PWR_SetPowerMode+0x28>)
 801b5fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801b602:	f023 0207 	bic.w	r2, r3, #7
 801b606:	4905      	ldr	r1, [pc, #20]	@ (801b61c <LL_C2_PWR_SetPowerMode+0x28>)
 801b608:	687b      	ldr	r3, [r7, #4]
 801b60a:	4313      	orrs	r3, r2
 801b60c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 801b610:	bf00      	nop
 801b612:	370c      	adds	r7, #12
 801b614:	46bd      	mov	sp, r7
 801b616:	bc80      	pop	{r7}
 801b618:	4770      	bx	lr
 801b61a:	bf00      	nop
 801b61c:	58000400 	.word	0x58000400

0801b620 <LL_PWR_IsActiveFlag_C1SB>:
{
 801b620:	b480      	push	{r7}
 801b622:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C1SBF) == (PWR_EXTSCR_C1SBF)) ? 1UL : 0UL);
 801b624:	4b07      	ldr	r3, [pc, #28]	@ (801b644 <LL_PWR_IsActiveFlag_C1SB+0x24>)
 801b626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801b62a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801b62e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b632:	d101      	bne.n	801b638 <LL_PWR_IsActiveFlag_C1SB+0x18>
 801b634:	2301      	movs	r3, #1
 801b636:	e000      	b.n	801b63a <LL_PWR_IsActiveFlag_C1SB+0x1a>
 801b638:	2300      	movs	r3, #0
}
 801b63a:	4618      	mov	r0, r3
 801b63c:	46bd      	mov	sp, r7
 801b63e:	bc80      	pop	{r7}
 801b640:	4770      	bx	lr
 801b642:	bf00      	nop
 801b644:	58000400 	.word	0x58000400

0801b648 <LL_PWR_IsActiveFlag_C2SB>:
{
 801b648:	b480      	push	{r7}
 801b64a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2SBF) == (PWR_EXTSCR_C2SBF)) ? 1UL : 0UL);
 801b64c:	4b07      	ldr	r3, [pc, #28]	@ (801b66c <LL_PWR_IsActiveFlag_C2SB+0x24>)
 801b64e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801b652:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801b656:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801b65a:	d101      	bne.n	801b660 <LL_PWR_IsActiveFlag_C2SB+0x18>
 801b65c:	2301      	movs	r3, #1
 801b65e:	e000      	b.n	801b662 <LL_PWR_IsActiveFlag_C2SB+0x1a>
 801b660:	2300      	movs	r3, #0
}
 801b662:	4618      	mov	r0, r3
 801b664:	46bd      	mov	sp, r7
 801b666:	bc80      	pop	{r7}
 801b668:	4770      	bx	lr
 801b66a:	bf00      	nop
 801b66c:	58000400 	.word	0x58000400

0801b670 <LL_PWR_ClearFlag_C1STOP_C1STB>:
{
 801b670:	b480      	push	{r7}
 801b672:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 801b674:	4b03      	ldr	r3, [pc, #12]	@ (801b684 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 801b676:	2201      	movs	r2, #1
 801b678:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 801b67c:	bf00      	nop
 801b67e:	46bd      	mov	sp, r7
 801b680:	bc80      	pop	{r7}
 801b682:	4770      	bx	lr
 801b684:	58000400 	.word	0x58000400

0801b688 <LL_PWR_ClearFlag_C2STOP_C2STB>:
  * @brief  Clear standby and stop flags for CPU2
  * @rmtoll EXTSCR       C2CSSF        LL_PWR_ClearFlag_C2STOP_C2STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C2STOP_C2STB(void)
{
 801b688:	b480      	push	{r7}
 801b68a:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C2CSSF);
 801b68c:	4b03      	ldr	r3, [pc, #12]	@ (801b69c <LL_PWR_ClearFlag_C2STOP_C2STB+0x14>)
 801b68e:	2202      	movs	r2, #2
 801b690:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 801b694:	bf00      	nop
 801b696:	46bd      	mov	sp, r7
 801b698:	bc80      	pop	{r7}
 801b69a:	4770      	bx	lr
 801b69c:	58000400 	.word	0x58000400

0801b6a0 <LL_RCC_LSE_SetDriveCapability>:
{
 801b6a0:	b480      	push	{r7}
 801b6a2:	b083      	sub	sp, #12
 801b6a4:	af00      	add	r7, sp, #0
 801b6a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 801b6a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801b6ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801b6b0:	f023 0218 	bic.w	r2, r3, #24
 801b6b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801b6b8:	687b      	ldr	r3, [r7, #4]
 801b6ba:	4313      	orrs	r3, r2
 801b6bc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 801b6c0:	bf00      	nop
 801b6c2:	370c      	adds	r7, #12
 801b6c4:	46bd      	mov	sp, r7
 801b6c6:	bc80      	pop	{r7}
 801b6c8:	4770      	bx	lr

0801b6ca <LL_RCC_SetClkAfterWakeFromStop>:
{
 801b6ca:	b480      	push	{r7}
 801b6cc:	b083      	sub	sp, #12
 801b6ce:	af00      	add	r7, sp, #0
 801b6d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 801b6d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801b6d6:	689b      	ldr	r3, [r3, #8]
 801b6d8:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 801b6dc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801b6e0:	687b      	ldr	r3, [r7, #4]
 801b6e2:	4313      	orrs	r3, r2
 801b6e4:	608b      	str	r3, [r1, #8]
}
 801b6e6:	bf00      	nop
 801b6e8:	370c      	adds	r7, #12
 801b6ea:	46bd      	mov	sp, r7
 801b6ec:	bc80      	pop	{r7}
 801b6ee:	4770      	bx	lr

0801b6f0 <LL_AHB2_GRP1_EnableClock>:
{
 801b6f0:	b480      	push	{r7}
 801b6f2:	b085      	sub	sp, #20
 801b6f4:	af00      	add	r7, sp, #0
 801b6f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 801b6f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801b6fc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801b6fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801b702:	687b      	ldr	r3, [r7, #4]
 801b704:	4313      	orrs	r3, r2
 801b706:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 801b708:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801b70c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801b70e:	687b      	ldr	r3, [r7, #4]
 801b710:	4013      	ands	r3, r2
 801b712:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801b714:	68fb      	ldr	r3, [r7, #12]
}
 801b716:	bf00      	nop
 801b718:	3714      	adds	r7, #20
 801b71a:	46bd      	mov	sp, r7
 801b71c:	bc80      	pop	{r7}
 801b71e:	4770      	bx	lr

0801b720 <LL_AHB2_GRP1_DisableClock>:
{
 801b720:	b480      	push	{r7}
 801b722:	b083      	sub	sp, #12
 801b724:	af00      	add	r7, sp, #0
 801b726:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 801b728:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801b72c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801b72e:	687b      	ldr	r3, [r7, #4]
 801b730:	43db      	mvns	r3, r3
 801b732:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801b736:	4013      	ands	r3, r2
 801b738:	64cb      	str	r3, [r1, #76]	@ 0x4c
}
 801b73a:	bf00      	nop
 801b73c:	370c      	adds	r7, #12
 801b73e:	46bd      	mov	sp, r7
 801b740:	bc80      	pop	{r7}
 801b742:	4770      	bx	lr

0801b744 <LL_APB1_GRP1_EnableClock>:
{
 801b744:	b480      	push	{r7}
 801b746:	b085      	sub	sp, #20
 801b748:	af00      	add	r7, sp, #0
 801b74a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 801b74c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801b750:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801b752:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801b756:	687b      	ldr	r3, [r7, #4]
 801b758:	4313      	orrs	r3, r2
 801b75a:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 801b75c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801b760:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801b762:	687b      	ldr	r3, [r7, #4]
 801b764:	4013      	ands	r3, r2
 801b766:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801b768:	68fb      	ldr	r3, [r7, #12]
}
 801b76a:	bf00      	nop
 801b76c:	3714      	adds	r7, #20
 801b76e:	46bd      	mov	sp, r7
 801b770:	bc80      	pop	{r7}
 801b772:	4770      	bx	lr

0801b774 <LL_APB1_GRP1_DisableClock>:
{
 801b774:	b480      	push	{r7}
 801b776:	b083      	sub	sp, #12
 801b778:	af00      	add	r7, sp, #0
 801b77a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 801b77c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801b780:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801b782:	687b      	ldr	r3, [r7, #4]
 801b784:	43db      	mvns	r3, r3
 801b786:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801b78a:	4013      	ands	r3, r2
 801b78c:	658b      	str	r3, [r1, #88]	@ 0x58
}
 801b78e:	bf00      	nop
 801b790:	370c      	adds	r7, #12
 801b792:	46bd      	mov	sp, r7
 801b794:	bc80      	pop	{r7}
 801b796:	4770      	bx	lr

0801b798 <HAL_PWR_PVDCallback>:
extern RTC_HandleTypeDef hrtc;

/* CallBack Section Begin */

void HAL_PWR_PVDCallback(void)	// PVD CallBack
{
 801b798:	b580      	push	{r7, lr}
 801b79a:	af00      	add	r7, sp, #0
	if(my_SystemClock_Config_done == 0)											// Check if the PS Detection has been executed
 801b79c:	4b8e      	ldr	r3, [pc, #568]	@ (801b9d8 <HAL_PWR_PVDCallback+0x240>)
 801b79e:	781b      	ldrb	r3, [r3, #0]
 801b7a0:	2b00      	cmp	r3, #0
 801b7a2:	d103      	bne.n	801b7ac <HAL_PWR_PVDCallback+0x14>
	{
		my_Next_State = RTS;
 801b7a4:	4b8d      	ldr	r3, [pc, #564]	@ (801b9dc <HAL_PWR_PVDCallback+0x244>)
 801b7a6:	2202      	movs	r2, #2
 801b7a8:	701a      	strb	r2, [r3, #0]
			break;
		}

		}
	}
}
 801b7aa:	e113      	b.n	801b9d4 <HAL_PWR_PVDCallback+0x23c>
		switch(my_Current_State)
 801b7ac:	4b8c      	ldr	r3, [pc, #560]	@ (801b9e0 <HAL_PWR_PVDCallback+0x248>)
 801b7ae:	781b      	ldrb	r3, [r3, #0]
 801b7b0:	3b03      	subs	r3, #3
 801b7b2:	2b04      	cmp	r3, #4
 801b7b4:	f200 8102 	bhi.w	801b9bc <HAL_PWR_PVDCallback+0x224>
 801b7b8:	a201      	add	r2, pc, #4	@ (adr r2, 801b7c0 <HAL_PWR_PVDCallback+0x28>)
 801b7ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b7be:	bf00      	nop
 801b7c0:	0801b7d5 	.word	0x0801b7d5
 801b7c4:	0801b869 	.word	0x0801b869
 801b7c8:	0801b94f 	.word	0x0801b94f
 801b7cc:	0801b983 	.word	0x0801b983
 801b7d0:	0801b8d7 	.word	0x0801b8d7
			My_EHS_to_EMS_Timer(STOP_TIMER);									// Stop EHS_to_EMS Timer
 801b7d4:	2001      	movs	r0, #1
 801b7d6:	f000 fd4f 	bl	801c278 <My_EHS_to_EMS_Timer>
			switch(my_Next_State)
 801b7da:	4b80      	ldr	r3, [pc, #512]	@ (801b9dc <HAL_PWR_PVDCallback+0x244>)
 801b7dc:	781b      	ldrb	r3, [r3, #0]
 801b7de:	3b02      	subs	r3, #2
 801b7e0:	2b07      	cmp	r3, #7
 801b7e2:	d836      	bhi.n	801b852 <HAL_PWR_PVDCallback+0xba>
 801b7e4:	a201      	add	r2, pc, #4	@ (adr r2, 801b7ec <HAL_PWR_PVDCallback+0x54>)
 801b7e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b7ea:	bf00      	nop
 801b7ec:	0801b80d 	.word	0x0801b80d
 801b7f0:	0801b853 	.word	0x0801b853
 801b7f4:	0801b831 	.word	0x0801b831
 801b7f8:	0801b853 	.word	0x0801b853
 801b7fc:	0801b853 	.word	0x0801b853
 801b800:	0801b83b 	.word	0x0801b83b
 801b804:	0801b853 	.word	0x0801b853
 801b808:	0801b847 	.word	0x0801b847
				if (my_SubghzApp_Init_done == 1) 								// Check if Radio Initialization is done
 801b80c:	4b75      	ldr	r3, [pc, #468]	@ (801b9e4 <HAL_PWR_PVDCallback+0x24c>)
 801b80e:	781b      	ldrb	r3, [r3, #0]
 801b810:	2b01      	cmp	r3, #1
 801b812:	d127      	bne.n	801b864 <HAL_PWR_PVDCallback+0xcc>
					if (my_RTS_cnt == 0)
 801b814:	4b74      	ldr	r3, [pc, #464]	@ (801b9e8 <HAL_PWR_PVDCallback+0x250>)
 801b816:	781b      	ldrb	r3, [r3, #0]
 801b818:	2b00      	cmp	r3, #0
 801b81a:	d104      	bne.n	801b826 <HAL_PWR_PVDCallback+0x8e>
						My_Trise_Meas();										// Measure the Trise Time
 801b81c:	f001 fab2 	bl	801cd84 <My_Trise_Meas>
						My_SMW_Timer(STOP_TIMER);								// Stop the SMW Timer
 801b820:	2001      	movs	r0, #1
 801b822:	f000 fce9 	bl	801c1f8 <My_SMW_Timer>
					UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_RTF), CFG_SEQ_Prio_0);	// SendTxData
 801b826:	2100      	movs	r1, #0
 801b828:	2010      	movs	r0, #16
 801b82a:	f7fe fca3 	bl	801a174 <UTIL_SEQ_SetTask>
				break;
 801b82e:	e019      	b.n	801b864 <HAL_PWR_PVDCallback+0xcc>
				UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_ESF), CFG_SEQ_Prio_0);  	// My_ESF -- ESF = Energy Storage Function
 801b830:	2100      	movs	r1, #0
 801b832:	2040      	movs	r0, #64	@ 0x40
 801b834:	f7fe fc9e 	bl	801a174 <UTIL_SEQ_SetTask>
				break;
 801b838:	e015      	b.n	801b866 <HAL_PWR_PVDCallback+0xce>
				UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SMF), CFG_SEQ_Prio_0);  	// My_SMF -- SMF = Sensors Measurement Function
 801b83a:	2100      	movs	r1, #0
 801b83c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801b840:	f7fe fc98 	bl	801a174 <UTIL_SEQ_SetTask>
				break;
 801b844:	e00f      	b.n	801b866 <HAL_PWR_PVDCallback+0xce>
				UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_AIF), CFG_SEQ_Prio_0);  	// My_AIF -- AIF = Artificial Intelligence Function
 801b846:	2100      	movs	r1, #0
 801b848:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801b84c:	f7fe fc92 	bl	801a174 <UTIL_SEQ_SetTask>
				break;
 801b850:	e009      	b.n	801b866 <HAL_PWR_PVDCallback+0xce>
				my_Next_State = SMS;											// Set Next State as SMS
 801b852:	4b62      	ldr	r3, [pc, #392]	@ (801b9dc <HAL_PWR_PVDCallback+0x244>)
 801b854:	2207      	movs	r2, #7
 801b856:	701a      	strb	r2, [r3, #0]
				UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SMF), CFG_SEQ_Prio_0);  	// My_SMF -- SMF = Sensors Measurement Function
 801b858:	2100      	movs	r1, #0
 801b85a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801b85e:	f7fe fc89 	bl	801a174 <UTIL_SEQ_SetTask>
				break;
 801b862:	e000      	b.n	801b866 <HAL_PWR_PVDCallback+0xce>
				break;
 801b864:	bf00      	nop
			break;
 801b866:	e0b5      	b.n	801b9d4 <HAL_PWR_PVDCallback+0x23c>
			switch (my_Cmode)
 801b868:	4b60      	ldr	r3, [pc, #384]	@ (801b9ec <HAL_PWR_PVDCallback+0x254>)
 801b86a:	781b      	ldrb	r3, [r3, #0]
 801b86c:	2b00      	cmp	r3, #0
 801b86e:	d002      	beq.n	801b876 <HAL_PWR_PVDCallback+0xde>
 801b870:	2b02      	cmp	r3, #2
 801b872:	d00b      	beq.n	801b88c <HAL_PWR_PVDCallback+0xf4>
 801b874:	e022      	b.n	801b8bc <HAL_PWR_PVDCallback+0x124>
				my_Current_State = EHS;  										// Set Current State as EHS: 	ESS --> EHS
 801b876:	4b5a      	ldr	r3, [pc, #360]	@ (801b9e0 <HAL_PWR_PVDCallback+0x248>)
 801b878:	2203      	movs	r2, #3
 801b87a:	701a      	strb	r2, [r3, #0]
				My_DCM_to_CCM_Timer(STOP_TIMER);  								// Stop the DCM to CCM Timer
 801b87c:	2001      	movs	r0, #1
 801b87e:	f000 fd1d 	bl	801c2bc <My_DCM_to_CCM_Timer>
				UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_EHF), CFG_SEQ_Prio_0);		// My_EHF - Back to Harvest
 801b882:	2100      	movs	r1, #0
 801b884:	2020      	movs	r0, #32
 801b886:	f7fe fc75 	bl	801a174 <UTIL_SEQ_SetTask>
				break;
 801b88a:	e023      	b.n	801b8d4 <HAL_PWR_PVDCallback+0x13c>
				if (my_Check_ESD == 0)
 801b88c:	4b58      	ldr	r3, [pc, #352]	@ (801b9f0 <HAL_PWR_PVDCallback+0x258>)
 801b88e:	781b      	ldrb	r3, [r3, #0]
 801b890:	2b00      	cmp	r3, #0
 801b892:	d102      	bne.n	801b89a <HAL_PWR_PVDCallback+0x102>
					my_Cmode = EOC;  											// End of Charge Mode has been met
 801b894:	4b55      	ldr	r3, [pc, #340]	@ (801b9ec <HAL_PWR_PVDCallback+0x254>)
 801b896:	2202      	movs	r2, #2
 801b898:	701a      	strb	r2, [r3, #0]
				My_ESW_CCM_Timer(STOP_TIMER);  									// Stop the Energy Storage Window Timer
 801b89a:	2001      	movs	r0, #1
 801b89c:	f000 fc86 	bl	801c1ac <My_ESW_CCM_Timer>
				My_EHS_to_EMS_Timer(STOP_TIMER);  								// Stop the EHS to EMS Timer
 801b8a0:	2001      	movs	r0, #1
 801b8a2:	f000 fce9 	bl	801c278 <My_EHS_to_EMS_Timer>
				my_Current_State = EHS;  										// Set Current State as EHS: 	ESS --> EHS
 801b8a6:	4b4e      	ldr	r3, [pc, #312]	@ (801b9e0 <HAL_PWR_PVDCallback+0x248>)
 801b8a8:	2203      	movs	r2, #3
 801b8aa:	701a      	strb	r2, [r3, #0]
				my_Next_State = SMS;											// Set Next State as RTS:	 	ESS --> EHS --> SMS
 801b8ac:	4b4b      	ldr	r3, [pc, #300]	@ (801b9dc <HAL_PWR_PVDCallback+0x244>)
 801b8ae:	2207      	movs	r2, #7
 801b8b0:	701a      	strb	r2, [r3, #0]
				UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_EHF), CFG_SEQ_Prio_0);  	// My_EHF - Back to Harvest
 801b8b2:	2100      	movs	r1, #0
 801b8b4:	2020      	movs	r0, #32
 801b8b6:	f7fe fc5d 	bl	801a174 <UTIL_SEQ_SetTask>
				break;
 801b8ba:	e00b      	b.n	801b8d4 <HAL_PWR_PVDCallback+0x13c>
				my_Current_State = EHS;  										// Set Current State as EHS
 801b8bc:	4b48      	ldr	r3, [pc, #288]	@ (801b9e0 <HAL_PWR_PVDCallback+0x248>)
 801b8be:	2203      	movs	r2, #3
 801b8c0:	701a      	strb	r2, [r3, #0]
				my_Next_State = SMS;											// Set Next State as SMS
 801b8c2:	4b46      	ldr	r3, [pc, #280]	@ (801b9dc <HAL_PWR_PVDCallback+0x244>)
 801b8c4:	2207      	movs	r2, #7
 801b8c6:	701a      	strb	r2, [r3, #0]
				UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SMF), CFG_SEQ_Prio_0);  	// My_SMF -- SMF = Sensors Measurement Function
 801b8c8:	2100      	movs	r1, #0
 801b8ca:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801b8ce:	f7fe fc51 	bl	801a174 <UTIL_SEQ_SetTask>
				break;
 801b8d2:	bf00      	nop
			break;
 801b8d4:	e07e      	b.n	801b9d4 <HAL_PWR_PVDCallback+0x23c>
			My_VDD_to_VDDS2_Switch(Switch_OPEN);								// unBias the Sensors: Open the switch between VDD and VDDS2
 801b8d6:	2000      	movs	r0, #0
 801b8d8:	f001 fb50 	bl	801cf7c <My_VDD_to_VDDS2_Switch>
			if (!((my_Cmode == DCM) && (my_Check_ESD == 0)))
 801b8dc:	4b43      	ldr	r3, [pc, #268]	@ (801b9ec <HAL_PWR_PVDCallback+0x254>)
 801b8de:	781b      	ldrb	r3, [r3, #0]
 801b8e0:	2b00      	cmp	r3, #0
 801b8e2:	d103      	bne.n	801b8ec <HAL_PWR_PVDCallback+0x154>
 801b8e4:	4b42      	ldr	r3, [pc, #264]	@ (801b9f0 <HAL_PWR_PVDCallback+0x258>)
 801b8e6:	781b      	ldrb	r3, [r3, #0]
 801b8e8:	2b00      	cmp	r3, #0
 801b8ea:	d002      	beq.n	801b8f2 <HAL_PWR_PVDCallback+0x15a>
				Radio.Sleep();													// Switch the Radio Off
 801b8ec:	4b41      	ldr	r3, [pc, #260]	@ (801b9f4 <HAL_PWR_PVDCallback+0x25c>)
 801b8ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b8f0:	4798      	blx	r3
			my_Current_State = EHS;												// Set Current State as EHS
 801b8f2:	4b3b      	ldr	r3, [pc, #236]	@ (801b9e0 <HAL_PWR_PVDCallback+0x248>)
 801b8f4:	2203      	movs	r2, #3
 801b8f6:	701a      	strb	r2, [r3, #0]
			if ((my_Cmode == EOC && HAL_LPTIM_ReadCounter(&hlptim1) > (T_ESW + T_SMW)) ||
 801b8f8:	4b3c      	ldr	r3, [pc, #240]	@ (801b9ec <HAL_PWR_PVDCallback+0x254>)
 801b8fa:	781b      	ldrb	r3, [r3, #0]
 801b8fc:	2b02      	cmp	r3, #2
 801b8fe:	d107      	bne.n	801b910 <HAL_PWR_PVDCallback+0x178>
 801b900:	483d      	ldr	r0, [pc, #244]	@ (801b9f8 <HAL_PWR_PVDCallback+0x260>)
 801b902:	f001 fea9 	bl	801d658 <HAL_LPTIM_ReadCounter>
 801b906:	4603      	mov	r3, r0
 801b908:	f642 0210 	movw	r2, #10256	@ 0x2810
 801b90c:	4293      	cmp	r3, r2
 801b90e:	d80f      	bhi.n	801b930 <HAL_PWR_PVDCallback+0x198>
					(my_Cmode != EOC && HAL_LPTIM_ReadCounter(&hlptim1) > T_SMW) ||
 801b910:	4b36      	ldr	r3, [pc, #216]	@ (801b9ec <HAL_PWR_PVDCallback+0x254>)
 801b912:	781b      	ldrb	r3, [r3, #0]
			if ((my_Cmode == EOC && HAL_LPTIM_ReadCounter(&hlptim1) > (T_ESW + T_SMW)) ||
 801b914:	2b02      	cmp	r3, #2
 801b916:	d007      	beq.n	801b928 <HAL_PWR_PVDCallback+0x190>
					(my_Cmode != EOC && HAL_LPTIM_ReadCounter(&hlptim1) > T_SMW) ||
 801b918:	4837      	ldr	r0, [pc, #220]	@ (801b9f8 <HAL_PWR_PVDCallback+0x260>)
 801b91a:	f001 fe9d 	bl	801d658 <HAL_LPTIM_ReadCounter>
 801b91e:	4603      	mov	r3, r0
 801b920:	f241 4208 	movw	r2, #5128	@ 0x1408
 801b924:	4293      	cmp	r3, r2
 801b926:	d803      	bhi.n	801b930 <HAL_PWR_PVDCallback+0x198>
					(my_SMS_cnt > SMS_MAX))
 801b928:	4b34      	ldr	r3, [pc, #208]	@ (801b9fc <HAL_PWR_PVDCallback+0x264>)
 801b92a:	781b      	ldrb	r3, [r3, #0]
					(my_Cmode != EOC && HAL_LPTIM_ReadCounter(&hlptim1) > T_SMW) ||
 801b92c:	2b05      	cmp	r3, #5
 801b92e:	d909      	bls.n	801b944 <HAL_PWR_PVDCallback+0x1ac>
				my_Trise_time_start = HAL_LPTIM_ReadCounter(&hlptim1);  		// Measure Starting Trise Time
 801b930:	4831      	ldr	r0, [pc, #196]	@ (801b9f8 <HAL_PWR_PVDCallback+0x260>)
 801b932:	f001 fe91 	bl	801d658 <HAL_LPTIM_ReadCounter>
 801b936:	4603      	mov	r3, r0
 801b938:	b29a      	uxth	r2, r3
 801b93a:	4b31      	ldr	r3, [pc, #196]	@ (801ba00 <HAL_PWR_PVDCallback+0x268>)
 801b93c:	801a      	strh	r2, [r3, #0]
				my_Next_State = AIS;  											// SMS --> AIS
 801b93e:	4b27      	ldr	r3, [pc, #156]	@ (801b9dc <HAL_PWR_PVDCallback+0x244>)
 801b940:	2209      	movs	r2, #9
 801b942:	701a      	strb	r2, [r3, #0]
			UTIL_SEQ_SetTask((1 <<CFG_SEQ_Task_EHF ), CFG_SEQ_Prio_0); 			// My_EHF
 801b944:	2100      	movs	r1, #0
 801b946:	2020      	movs	r0, #32
 801b948:	f7fe fc14 	bl	801a174 <UTIL_SEQ_SetTask>
			break;
 801b94c:	e042      	b.n	801b9d4 <HAL_PWR_PVDCallback+0x23c>
			My_VDD_to_ES_Switch(Switch_OPEN);									// Open the Switch between Vdd and ES
 801b94e:	2000      	movs	r0, #0
 801b950:	f001 fa96 	bl	801ce80 <My_VDD_to_ES_Switch>
			my_Cmode = EOC;  													// The Storage Element is in EOC since the PVD has been triggered with the VEOC threshold while in EMS.
 801b954:	4b25      	ldr	r3, [pc, #148]	@ (801b9ec <HAL_PWR_PVDCallback+0x254>)
 801b956:	2202      	movs	r2, #2
 801b958:	701a      	strb	r2, [r3, #0]
			My_EMS_to_EDS_Timer(STOP_TIMER);  									// Stop the EMS to EDS Timer
 801b95a:	2001      	movs	r0, #1
 801b95c:	f000 fcd0 	bl	801c300 <My_EMS_to_EDS_Timer>
			My_EMS_to_SMS_Timer(STOP_TIMER);  									// Stop the EMS to SMS Timer
 801b960:	2001      	movs	r0, #1
 801b962:	f000 fcef 	bl	801c344 <My_EMS_to_SMS_Timer>
			my_ems_index = 0;  													// Reset the index used to fill the buffer that contains the measurements performed during the ems state
 801b966:	4b27      	ldr	r3, [pc, #156]	@ (801ba04 <HAL_PWR_PVDCallback+0x26c>)
 801b968:	2200      	movs	r2, #0
 801b96a:	701a      	strb	r2, [r3, #0]
			my_Current_State = EHS;  											// Set Current State as EHS: 	EMS --> EHS
 801b96c:	4b1c      	ldr	r3, [pc, #112]	@ (801b9e0 <HAL_PWR_PVDCallback+0x248>)
 801b96e:	2203      	movs	r2, #3
 801b970:	701a      	strb	r2, [r3, #0]
			my_Next_State = RTS;  												// Set Next State as RTS: 		EMS --> EHS --> RTS
 801b972:	4b1a      	ldr	r3, [pc, #104]	@ (801b9dc <HAL_PWR_PVDCallback+0x244>)
 801b974:	2202      	movs	r2, #2
 801b976:	701a      	strb	r2, [r3, #0]
			UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_EHF), CFG_SEQ_Prio_0);  		// My_EHF - Back to Harvest
 801b978:	2100      	movs	r1, #0
 801b97a:	2020      	movs	r0, #32
 801b97c:	f7fe fbfa 	bl	801a174 <UTIL_SEQ_SetTask>
			break;
 801b980:	e028      	b.n	801b9d4 <HAL_PWR_PVDCallback+0x23c>
			My_VDD_to_ES_Switch(Switch_OPEN);  									// Open the Switch connected to the Storage element
 801b982:	2000      	movs	r0, #0
 801b984:	f001 fa7c 	bl	801ce80 <My_VDD_to_ES_Switch>
			my_Cmode = DCM;  													// Assume that the Energy Storage Device (ESD) is discharged
 801b988:	4b18      	ldr	r3, [pc, #96]	@ (801b9ec <HAL_PWR_PVDCallback+0x254>)
 801b98a:	2200      	movs	r2, #0
 801b98c:	701a      	strb	r2, [r3, #0]
			My_EDS_Timer(STOP_TIMER);  											// Stop the EDS Timer
 801b98e:	2001      	movs	r0, #1
 801b990:	f000 fc58 	bl	801c244 <My_EDS_Timer>
			My_EMS_to_SMS_Timer(STOP_TIMER);									// Stop the EMS_to_SMS Timer
 801b994:	2001      	movs	r0, #1
 801b996:	f000 fcd5 	bl	801c344 <My_EMS_to_SMS_Timer>
			my_rtc_A_ems_flag = 0;
 801b99a:	4b1b      	ldr	r3, [pc, #108]	@ (801ba08 <HAL_PWR_PVDCallback+0x270>)
 801b99c:	2200      	movs	r2, #0
 801b99e:	701a      	strb	r2, [r3, #0]
			my_rtc_B_ems_flag = 0;
 801b9a0:	4b1a      	ldr	r3, [pc, #104]	@ (801ba0c <HAL_PWR_PVDCallback+0x274>)
 801b9a2:	2200      	movs	r2, #0
 801b9a4:	701a      	strb	r2, [r3, #0]
			my_RTS_cnt = 0;  													// Resets the transmissions counter
 801b9a6:	4b10      	ldr	r3, [pc, #64]	@ (801b9e8 <HAL_PWR_PVDCallback+0x250>)
 801b9a8:	2200      	movs	r2, #0
 801b9aa:	701a      	strb	r2, [r3, #0]
			my_ems_index = 0;  													// Reset the index used to fill the buffer that contains the measurements performed during the ems state
 801b9ac:	4b15      	ldr	r3, [pc, #84]	@ (801ba04 <HAL_PWR_PVDCallback+0x26c>)
 801b9ae:	2200      	movs	r2, #0
 801b9b0:	701a      	strb	r2, [r3, #0]
			UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_RTF), CFG_SEQ_Prio_0);  		// SendTxData
 801b9b2:	2100      	movs	r1, #0
 801b9b4:	2010      	movs	r0, #16
 801b9b6:	f7fe fbdd 	bl	801a174 <UTIL_SEQ_SetTask>
			break;
 801b9ba:	e00b      	b.n	801b9d4 <HAL_PWR_PVDCallback+0x23c>
			my_Current_State = EHS;  											// Set Current State as EHS
 801b9bc:	4b08      	ldr	r3, [pc, #32]	@ (801b9e0 <HAL_PWR_PVDCallback+0x248>)
 801b9be:	2203      	movs	r2, #3
 801b9c0:	701a      	strb	r2, [r3, #0]
			my_Next_State = SMS;												// Set Next State as SMS
 801b9c2:	4b06      	ldr	r3, [pc, #24]	@ (801b9dc <HAL_PWR_PVDCallback+0x244>)
 801b9c4:	2207      	movs	r2, #7
 801b9c6:	701a      	strb	r2, [r3, #0]
			UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SMF), CFG_SEQ_Prio_0);  		// My_SMF -- SMF = Sensors Measurement Function
 801b9c8:	2100      	movs	r1, #0
 801b9ca:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801b9ce:	f7fe fbd1 	bl	801a174 <UTIL_SEQ_SetTask>
			break;
 801b9d2:	bf00      	nop
}
 801b9d4:	bf00      	nop
 801b9d6:	bd80      	pop	{r7, pc}
 801b9d8:	2000074c 	.word	0x2000074c
 801b9dc:	20000638 	.word	0x20000638
 801b9e0:	20001be9 	.word	0x20001be9
 801b9e4:	200008a7 	.word	0x200008a7
 801b9e8:	20001bba 	.word	0x20001bba
 801b9ec:	20001bea 	.word	0x20001bea
 801b9f0:	20001bc0 	.word	0x20001bc0
 801b9f4:	0802146c 	.word	0x0802146c
 801b9f8:	20001b40 	.word	0x20001b40
 801b9fc:	20001bbc 	.word	0x20001bbc
 801ba00:	20001bc2 	.word	0x20001bc2
 801ba04:	20001bbd 	.word	0x20001bbd
 801ba08:	20001bbe 	.word	0x20001bbe
 801ba0c:	20001bbf 	.word	0x20001bbf

0801ba10 <HAL_LPTIM_AutoReloadMatchCallback>:

void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)	// LPTIM Callback
{
 801ba10:	b580      	push	{r7, lr}
 801ba12:	b082      	sub	sp, #8
 801ba14:	af00      	add	r7, sp, #0
 801ba16:	6078      	str	r0, [r7, #4]
	if(hlptim->Instance == LPTIM1)
 801ba18:	687b      	ldr	r3, [r7, #4]
 801ba1a:	681b      	ldr	r3, [r3, #0]
 801ba1c:	4a36      	ldr	r2, [pc, #216]	@ (801baf8 <HAL_LPTIM_AutoReloadMatchCallback+0xe8>)
 801ba1e:	4293      	cmp	r3, r2
 801ba20:	d166      	bne.n	801baf0 <HAL_LPTIM_AutoReloadMatchCallback+0xe0>
	{
		switch(my_Current_State)
 801ba22:	4b36      	ldr	r3, [pc, #216]	@ (801bafc <HAL_LPTIM_AutoReloadMatchCallback+0xec>)
 801ba24:	781b      	ldrb	r3, [r3, #0]
 801ba26:	3b03      	subs	r3, #3
 801ba28:	2b03      	cmp	r3, #3
 801ba2a:	d854      	bhi.n	801bad6 <HAL_LPTIM_AutoReloadMatchCallback+0xc6>
 801ba2c:	a201      	add	r2, pc, #4	@ (adr r2, 801ba34 <HAL_LPTIM_AutoReloadMatchCallback+0x24>)
 801ba2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ba32:	bf00      	nop
 801ba34:	0801ba45 	.word	0x0801ba45
 801ba38:	0801ba83 	.word	0x0801ba83
 801ba3c:	0801baad 	.word	0x0801baad
 801ba40:	0801babb 	.word	0x0801babb
		{
		case EHS: 															// EHS = Energy Harvesting State
		{
			switch (my_Next_State)
 801ba44:	4b2e      	ldr	r3, [pc, #184]	@ (801bb00 <HAL_LPTIM_AutoReloadMatchCallback+0xf0>)
 801ba46:	781b      	ldrb	r3, [r3, #0]
 801ba48:	2b04      	cmp	r3, #4
 801ba4a:	d10d      	bne.n	801ba68 <HAL_LPTIM_AutoReloadMatchCallback+0x58>
			{
			case ESS:
			{

#if MY_SM_FEATURE_ENABLE
				my_Next_State = SMS; 										// 	ESS --> SMS
 801ba4c:	4b2c      	ldr	r3, [pc, #176]	@ (801bb00 <HAL_LPTIM_AutoReloadMatchCallback+0xf0>)
 801ba4e:	2207      	movs	r2, #7
 801ba50:	701a      	strb	r2, [r3, #0]
#else
				my_Next_State = RTS; 										// ESS -->  RTS
#endif

				My_DCM_to_CCM_Timer(STOP_TIMER);							// Stop the DCM to CCM Timer
 801ba52:	2001      	movs	r0, #1
 801ba54:	f000 fc32 	bl	801c2bc <My_DCM_to_CCM_Timer>
				My_ESW_CCM_Timer(STOP_TIMER);								// Stop ESW Timer
 801ba58:	2001      	movs	r0, #1
 801ba5a:	f000 fba7 	bl	801c1ac <My_ESW_CCM_Timer>

				UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_EHF), CFG_SEQ_Prio_0);	// My_EHF -- Back to Harvest
 801ba5e:	2100      	movs	r1, #0
 801ba60:	2020      	movs	r0, #32
 801ba62:	f7fe fb87 	bl	801a174 <UTIL_SEQ_SetTask>
				break;
 801ba66:	e00b      	b.n	801ba80 <HAL_LPTIM_AutoReloadMatchCallback+0x70>
			}

			default:
			{
				my_Current_State = EHS;  									// Set Current State as EHS
 801ba68:	4b24      	ldr	r3, [pc, #144]	@ (801bafc <HAL_LPTIM_AutoReloadMatchCallback+0xec>)
 801ba6a:	2203      	movs	r2, #3
 801ba6c:	701a      	strb	r2, [r3, #0]
				my_Next_State = SMS;										// Set Next State as SMS
 801ba6e:	4b24      	ldr	r3, [pc, #144]	@ (801bb00 <HAL_LPTIM_AutoReloadMatchCallback+0xf0>)
 801ba70:	2207      	movs	r2, #7
 801ba72:	701a      	strb	r2, [r3, #0]
				UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SMF), CFG_SEQ_Prio_0);  // My_SMF -- SMF = Sensors Measurement Function
 801ba74:	2100      	movs	r1, #0
 801ba76:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801ba7a:	f7fe fb7b 	bl	801a174 <UTIL_SEQ_SetTask>
				break;
 801ba7e:	bf00      	nop
			}
			}

			break;
 801ba80:	e036      	b.n	801baf0 <HAL_LPTIM_AutoReloadMatchCallback+0xe0>
		}

		case ESS:															// ESS = Energy Storage State
		{
			if (my_Cmode != DCM)
 801ba82:	4b20      	ldr	r3, [pc, #128]	@ (801bb04 <HAL_LPTIM_AutoReloadMatchCallback+0xf4>)
 801ba84:	781b      	ldrb	r3, [r3, #0]
 801ba86:	2b00      	cmp	r3, #0
 801ba88:	d031      	beq.n	801baee <HAL_LPTIM_AutoReloadMatchCallback+0xde>
			{
#if MY_SM_FEATURE_ENABLE
				my_Next_State = SMS;										// Set Next State as SMS: ESS --> EHS --> SMS
 801ba8a:	4b1d      	ldr	r3, [pc, #116]	@ (801bb00 <HAL_LPTIM_AutoReloadMatchCallback+0xf0>)
 801ba8c:	2207      	movs	r2, #7
 801ba8e:	701a      	strb	r2, [r3, #0]
#else
				my_Next_State = RTS;										// Set Next State as RTS: ESS --> EHS --> RTS
#endif

				my_Current_State = EHS;										// Set Current State as EHS: ESS --> EHS
 801ba90:	4b1a      	ldr	r3, [pc, #104]	@ (801bafc <HAL_LPTIM_AutoReloadMatchCallback+0xec>)
 801ba92:	2203      	movs	r2, #3
 801ba94:	701a      	strb	r2, [r3, #0]

				My_DCM_to_CCM_Timer(STOP_TIMER);							// Stop the DCM to CCM Timer
 801ba96:	2001      	movs	r0, #1
 801ba98:	f000 fc10 	bl	801c2bc <My_DCM_to_CCM_Timer>
				My_ESW_CCM_Timer(STOP_TIMER);									// Stop ESW Timer
 801ba9c:	2001      	movs	r0, #1
 801ba9e:	f000 fb85 	bl	801c1ac <My_ESW_CCM_Timer>

				UTIL_SEQ_SetTask((1 <<CFG_SEQ_Task_EHF ), CFG_SEQ_Prio_0);	// My_EHF -- Back to Harvest
 801baa2:	2100      	movs	r1, #0
 801baa4:	2020      	movs	r0, #32
 801baa6:	f7fe fb65 	bl	801a174 <UTIL_SEQ_SetTask>
			}
			break;
 801baaa:	e020      	b.n	801baee <HAL_LPTIM_AutoReloadMatchCallback+0xde>
		}

		case EMS:															// EMS = Energy Missing State
		{
			My_EDS_Timer(STOP_TIMER); 										// Stop the Energy Detection Timer
 801baac:	2001      	movs	r0, #1
 801baae:	f000 fbc9 	bl	801c244 <My_EDS_Timer>
			my_rm_failure_flag = 1; 										// Resistance Measurement in EMS State has failed because the LPTIM1 Interrupt has been triggered earlier than the COMP Interrupt
 801bab2:	4b15      	ldr	r3, [pc, #84]	@ (801bb08 <HAL_LPTIM_AutoReloadMatchCallback+0xf8>)
 801bab4:	2201      	movs	r2, #1
 801bab6:	701a      	strb	r2, [r3, #0]
			break;
 801bab8:	e01a      	b.n	801baf0 <HAL_LPTIM_AutoReloadMatchCallback+0xe0>
		}

		case EDS:															// EDS = Energy Detection State
		{
			My_EMS_to_EDS_Timer(START_TIMER); 								// Start the Timer for the Energy Presence Check (EDC)
 801baba:	2000      	movs	r0, #0
 801babc:	f000 fc20 	bl	801c300 <My_EMS_to_EDS_Timer>
			My_VDD_to_ES_Switch(Switch_CLOSED);								// Close the switch Between Vdd and ES Start Supplying from the Energy Storage Device (ESD)
 801bac0:	2001      	movs	r0, #1
 801bac2:	f001 f9dd 	bl	801ce80 <My_VDD_to_ES_Switch>

#if MY_SHT40 && MY_STHS34PF80 && MY_STTS22H && STEVAL_HARVEST1
			My_VDD_to_VDDS2_Switch(Switch_OPEN);							// unBias the Sensors: Open the switch between VDD and VDDS2
#endif

			my_Current_State = EMS; 										// Set Current State as EMS: EDS --> EMS
 801bac6:	4b0d      	ldr	r3, [pc, #52]	@ (801bafc <HAL_LPTIM_AutoReloadMatchCallback+0xec>)
 801bac8:	2205      	movs	r2, #5
 801baca:	701a      	strb	r2, [r3, #0]
			UTIL_SEQ_SetTask((1 <<CFG_SEQ_Task_EHF), CFG_SEQ_Prio_0);		// My_EHF -- Back to Harvest
 801bacc:	2100      	movs	r1, #0
 801bace:	2020      	movs	r0, #32
 801bad0:	f7fe fb50 	bl	801a174 <UTIL_SEQ_SetTask>
			break;
 801bad4:	e00c      	b.n	801baf0 <HAL_LPTIM_AutoReloadMatchCallback+0xe0>
		}

		default:
		{
			my_Current_State = EHS;  										// Set Current State as EHS
 801bad6:	4b09      	ldr	r3, [pc, #36]	@ (801bafc <HAL_LPTIM_AutoReloadMatchCallback+0xec>)
 801bad8:	2203      	movs	r2, #3
 801bada:	701a      	strb	r2, [r3, #0]
			my_Next_State = SMS;											// Set Next State as SMS
 801badc:	4b08      	ldr	r3, [pc, #32]	@ (801bb00 <HAL_LPTIM_AutoReloadMatchCallback+0xf0>)
 801bade:	2207      	movs	r2, #7
 801bae0:	701a      	strb	r2, [r3, #0]
			UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SMF), CFG_SEQ_Prio_0);  	// My_SMF -- SMF = Sensors Measurement Function
 801bae2:	2100      	movs	r1, #0
 801bae4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801bae8:	f7fe fb44 	bl	801a174 <UTIL_SEQ_SetTask>
			break;
 801baec:	e000      	b.n	801baf0 <HAL_LPTIM_AutoReloadMatchCallback+0xe0>
			break;
 801baee:	bf00      	nop
		}
		}
	}
}
 801baf0:	bf00      	nop
 801baf2:	3708      	adds	r7, #8
 801baf4:	46bd      	mov	sp, r7
 801baf6:	bd80      	pop	{r7, pc}
 801baf8:	40007c00 	.word	0x40007c00
 801bafc:	20001be9 	.word	0x20001be9
 801bb00:	20000638 	.word	0x20000638
 801bb04:	20001bea 	.word	0x20001bea
 801bb08:	20001bc8 	.word	0x20001bc8

0801bb0c <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)			// RTC Alarm A CallBack
{
 801bb0c:	b580      	push	{r7, lr}
 801bb0e:	b082      	sub	sp, #8
 801bb10:	af00      	add	r7, sp, #0
 801bb12:	6078      	str	r0, [r7, #4]

	switch(my_Current_State)
 801bb14:	4b11      	ldr	r3, [pc, #68]	@ (801bb5c <HAL_RTC_AlarmAEventCallback+0x50>)
 801bb16:	781b      	ldrb	r3, [r3, #0]
 801bb18:	2b05      	cmp	r3, #5
 801bb1a:	d002      	beq.n	801bb22 <HAL_RTC_AlarmAEventCallback+0x16>
 801bb1c:	2b07      	cmp	r3, #7
 801bb1e:	d00e      	beq.n	801bb3e <HAL_RTC_AlarmAEventCallback+0x32>
	default:
	{
#if MY_TX_OTAA
		UTIL_TIMER_IRQ_Handler();
#endif
		break;
 801bb20:	e018      	b.n	801bb54 <HAL_RTC_AlarmAEventCallback+0x48>
		My_EMS_to_SMS_Timer(STOP_TIMER);							// Stop EMS to SMS Timer
 801bb22:	2001      	movs	r0, #1
 801bb24:	f000 fc0e 	bl	801c344 <My_EMS_to_SMS_Timer>
		my_rtc_A_ems_flag = 0;
 801bb28:	4b0d      	ldr	r3, [pc, #52]	@ (801bb60 <HAL_RTC_AlarmAEventCallback+0x54>)
 801bb2a:	2200      	movs	r2, #0
 801bb2c:	701a      	strb	r2, [r3, #0]
		my_Current_State = EMS;										// Set Current State as EMS
 801bb2e:	4b0b      	ldr	r3, [pc, #44]	@ (801bb5c <HAL_RTC_AlarmAEventCallback+0x50>)
 801bb30:	2205      	movs	r2, #5
 801bb32:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask((1 <<CFG_SEQ_Task_EHF ), CFG_SEQ_Prio_0); 	// My_EHF
 801bb34:	2100      	movs	r1, #0
 801bb36:	2020      	movs	r0, #32
 801bb38:	f7fe fb1c 	bl	801a174 <UTIL_SEQ_SetTask>
		break;
 801bb3c:	e00a      	b.n	801bb54 <HAL_RTC_AlarmAEventCallback+0x48>
		My_VDD_to_VDDS2_Switch(Switch_OPEN);						// unBias the Sensors: Open the switch between VDD and VDDS2
 801bb3e:	2000      	movs	r0, #0
 801bb40:	f001 fa1c 	bl	801cf7c <My_VDD_to_VDDS2_Switch>
		my_Current_State = EHS;										// Set Current State as EHS
 801bb44:	4b05      	ldr	r3, [pc, #20]	@ (801bb5c <HAL_RTC_AlarmAEventCallback+0x50>)
 801bb46:	2203      	movs	r2, #3
 801bb48:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask((1 <<CFG_SEQ_Task_EHF ), CFG_SEQ_Prio_0); 	// My_EHF
 801bb4a:	2100      	movs	r1, #0
 801bb4c:	2020      	movs	r0, #32
 801bb4e:	f7fe fb11 	bl	801a174 <UTIL_SEQ_SetTask>
		break;
 801bb52:	bf00      	nop
	}
	}
}
 801bb54:	bf00      	nop
 801bb56:	3708      	adds	r7, #8
 801bb58:	46bd      	mov	sp, r7
 801bb5a:	bd80      	pop	{r7, pc}
 801bb5c:	20001be9 	.word	0x20001be9
 801bb60:	20001bbe 	.word	0x20001bbe

0801bb64 <HAL_RTCEx_AlarmBEventCallback>:

void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)	// RTC Alarm B CallBack
{
 801bb64:	b580      	push	{r7, lr}
 801bb66:	b082      	sub	sp, #8
 801bb68:	af00      	add	r7, sp, #0
 801bb6a:	6078      	str	r0, [r7, #4]
	switch (my_Current_State)
 801bb6c:	4b3e      	ldr	r3, [pc, #248]	@ (801bc68 <HAL_RTCEx_AlarmBEventCallback+0x104>)
 801bb6e:	781b      	ldrb	r3, [r3, #0]
 801bb70:	2b05      	cmp	r3, #5
 801bb72:	d04e      	beq.n	801bc12 <HAL_RTCEx_AlarmBEventCallback+0xae>
 801bb74:	2b05      	cmp	r3, #5
 801bb76:	dc67      	bgt.n	801bc48 <HAL_RTCEx_AlarmBEventCallback+0xe4>
 801bb78:	2b03      	cmp	r3, #3
 801bb7a:	d034      	beq.n	801bbe6 <HAL_RTCEx_AlarmBEventCallback+0x82>
 801bb7c:	2b04      	cmp	r3, #4
 801bb7e:	d163      	bne.n	801bc48 <HAL_RTCEx_AlarmBEventCallback+0xe4>
		/* The Time Measured by the RTC Alarm B Timer has gone beyond T_DCM_CCM
		 * The system switches from Discontinuous Charge Mode (DCM) to Continuous Charge Mode (CCM)
		 */

	{
		My_Set_PVD(VPS_CHECK, PWR_PVD_MODE_NORMAL);						// Configures PVD at the Highest Voltage and Normal Mode
 801bb80:	2100      	movs	r1, #0
 801bb82:	200c      	movs	r0, #12
 801bb84:	f000 fee0 	bl	801c948 <My_Set_PVD>
		My_HAL_Delay(100);												// Add Delay to settle PVD
 801bb88:	2064      	movs	r0, #100	@ 0x64
 801bb8a:	f001 fa3f 	bl	801d00c <My_HAL_Delay>

		if (__HAL_PWR_GET_FLAG(PWR_FLAG_PVDO) == 0)						// If VDD is > VPS_CHECK and Internal Reference is Ready
 801bb8e:	4b37      	ldr	r3, [pc, #220]	@ (801bc6c <HAL_RTCEx_AlarmBEventCallback+0x108>)
 801bb90:	695b      	ldr	r3, [r3, #20]
 801bb92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801bb96:	2b00      	cmp	r3, #0
 801bb98:	d111      	bne.n	801bbbe <HAL_RTCEx_AlarmBEventCallback+0x5a>
		{
			my_Check_ESD = 1;
 801bb9a:	4b35      	ldr	r3, [pc, #212]	@ (801bc70 <HAL_RTCEx_AlarmBEventCallback+0x10c>)
 801bb9c:	2201      	movs	r2, #1
 801bb9e:	701a      	strb	r2, [r3, #0]
			My_VDD_to_ES_Switch(Switch_OPEN);							// Open the VDD to ES Switch
 801bba0:	2000      	movs	r0, #0
 801bba2:	f001 f96d 	bl	801ce80 <My_VDD_to_ES_Switch>
			my_Current_State = SMS;										// Set Current State as SMS
 801bba6:	4b30      	ldr	r3, [pc, #192]	@ (801bc68 <HAL_RTCEx_AlarmBEventCallback+0x104>)
 801bba8:	2207      	movs	r2, #7
 801bbaa:	701a      	strb	r2, [r3, #0]
			my_Next_State = SMS;										// Set Next State as SMS
 801bbac:	4b31      	ldr	r3, [pc, #196]	@ (801bc74 <HAL_RTCEx_AlarmBEventCallback+0x110>)
 801bbae:	2207      	movs	r2, #7
 801bbb0:	701a      	strb	r2, [r3, #0]
			UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SMF), CFG_SEQ_Prio_0); 	// My_SMF = Sensors Measurement Function
 801bbb2:	2100      	movs	r1, #0
 801bbb4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801bbb8:	f7fe fadc 	bl	801a174 <UTIL_SEQ_SetTask>
 801bbbc:	e00f      	b.n	801bbde <HAL_RTCEx_AlarmBEventCallback+0x7a>
		}
		else
		{
			my_Cmode = CCM;												// Switch to Continuous Charge Mode
 801bbbe:	4b2e      	ldr	r3, [pc, #184]	@ (801bc78 <HAL_RTCEx_AlarmBEventCallback+0x114>)
 801bbc0:	2201      	movs	r2, #1
 801bbc2:	701a      	strb	r2, [r3, #0]
			My_ESW_DCM_Timer(STOP_TIMER);								// Stop ESW DCM Timer
 801bbc4:	2001      	movs	r0, #1
 801bbc6:	f000 facb 	bl	801c160 <My_ESW_DCM_Timer>
			My_ESW_CCM_Timer(START_TIMER);								// Start ESW CCM Timer
 801bbca:	2000      	movs	r0, #0
 801bbcc:	f000 faee 	bl	801c1ac <My_ESW_CCM_Timer>

			my_Current_State = ESS;										// System keeps Staying in Energy Storage State (ESS)
 801bbd0:	4b25      	ldr	r3, [pc, #148]	@ (801bc68 <HAL_RTCEx_AlarmBEventCallback+0x104>)
 801bbd2:	2204      	movs	r2, #4
 801bbd4:	701a      	strb	r2, [r3, #0]
			UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_ESF), CFG_SEQ_Prio_0); 	// My_ESF = Energy Storage Function
 801bbd6:	2100      	movs	r1, #0
 801bbd8:	2040      	movs	r0, #64	@ 0x40
 801bbda:	f7fe facb 	bl	801a174 <UTIL_SEQ_SetTask>
		}

		My_DCM_to_CCM_Timer(STOP_TIMER);								// Stop DCM to CCM Timer
 801bbde:	2001      	movs	r0, #1
 801bbe0:	f000 fb6c 	bl	801c2bc <My_DCM_to_CCM_Timer>

		break;
 801bbe4:	e03c      	b.n	801bc60 <HAL_RTCEx_AlarmBEventCallback+0xfc>
	}

	/* If RTC ALARM B is triggered during EHS: EHS --> EMS to manage Energy absence*/
	case EHS: 														// EHS = Energy Harvesting State
	{
		My_EHS_to_EMS_Timer(STOP_TIMER); 							// Stop EHS_to_EMS Timer
 801bbe6:	2001      	movs	r0, #1
 801bbe8:	f000 fb46 	bl	801c278 <My_EHS_to_EMS_Timer>
		HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_A);					// Stop RTC A Alarm
 801bbec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801bbf0:	6878      	ldr	r0, [r7, #4]
 801bbf2:	f7eb f8a5 	bl	8006d40 <HAL_RTC_DeactivateAlarm>

		my_rtc_B_ems_flag = 0;
 801bbf6:	4b21      	ldr	r3, [pc, #132]	@ (801bc7c <HAL_RTCEx_AlarmBEventCallback+0x118>)
 801bbf8:	2200      	movs	r2, #0
 801bbfa:	701a      	strb	r2, [r3, #0]
		my_rtc_A_ems_flag = 0;
 801bbfc:	4b20      	ldr	r3, [pc, #128]	@ (801bc80 <HAL_RTCEx_AlarmBEventCallback+0x11c>)
 801bbfe:	2200      	movs	r2, #0
 801bc00:	701a      	strb	r2, [r3, #0]

		my_Current_State = EMS;										// Set Current State as EMS: EHS --> EMS
 801bc02:	4b19      	ldr	r3, [pc, #100]	@ (801bc68 <HAL_RTCEx_AlarmBEventCallback+0x104>)
 801bc04:	2205      	movs	r2, #5
 801bc06:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask((1 <<CFG_SEQ_Task_EHF ), CFG_SEQ_Prio_0);  // My_EHF -- Back to Harvest
 801bc08:	2100      	movs	r1, #0
 801bc0a:	2020      	movs	r0, #32
 801bc0c:	f7fe fab2 	bl	801a174 <UTIL_SEQ_SetTask>
		break;
 801bc10:	e026      	b.n	801bc60 <HAL_RTCEx_AlarmBEventCallback+0xfc>
	}

	/*If the Alarm B has been Triggered during the EMS a EDS is performed */
	case EMS: 														// EMS = Energy missing State
	{
		My_VDD_to_ES_Switch(Switch_OPEN);							// Open The Switch Beteween Vdd and ES
 801bc12:	2000      	movs	r0, #0
 801bc14:	f001 f934 	bl	801ce80 <My_VDD_to_ES_Switch>

		HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_A);					// Deactivate Alarm A
 801bc18:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801bc1c:	6878      	ldr	r0, [r7, #4]
 801bc1e:	f7eb f88f 	bl	8006d40 <HAL_RTC_DeactivateAlarm>
		HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_B);					// Deactivate Alarm B
 801bc22:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801bc26:	6878      	ldr	r0, [r7, #4]
 801bc28:	f7eb f88a 	bl	8006d40 <HAL_RTC_DeactivateAlarm>

		my_rtc_B_ems_flag = 0;
 801bc2c:	4b13      	ldr	r3, [pc, #76]	@ (801bc7c <HAL_RTCEx_AlarmBEventCallback+0x118>)
 801bc2e:	2200      	movs	r2, #0
 801bc30:	701a      	strb	r2, [r3, #0]
		my_rtc_A_ems_flag = 0;
 801bc32:	4b13      	ldr	r3, [pc, #76]	@ (801bc80 <HAL_RTCEx_AlarmBEventCallback+0x11c>)
 801bc34:	2200      	movs	r2, #0
 801bc36:	701a      	strb	r2, [r3, #0]

		my_Current_State = EDS; 									// Set Current State as EDS: EMS --> EDS
 801bc38:	4b0b      	ldr	r3, [pc, #44]	@ (801bc68 <HAL_RTCEx_AlarmBEventCallback+0x104>)
 801bc3a:	2206      	movs	r2, #6
 801bc3c:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask((1 <<CFG_SEQ_Task_EHF ), CFG_SEQ_Prio_0);	// My_EHF
 801bc3e:	2100      	movs	r1, #0
 801bc40:	2020      	movs	r0, #32
 801bc42:	f7fe fa97 	bl	801a174 <UTIL_SEQ_SetTask>
		break;
 801bc46:	e00b      	b.n	801bc60 <HAL_RTCEx_AlarmBEventCallback+0xfc>

	default:
	{

#if MY_TX_ABP
		my_Current_State = EHS;  									// Set Current State as EHS
 801bc48:	4b07      	ldr	r3, [pc, #28]	@ (801bc68 <HAL_RTCEx_AlarmBEventCallback+0x104>)
 801bc4a:	2203      	movs	r2, #3
 801bc4c:	701a      	strb	r2, [r3, #0]
		my_Next_State = SMS;										// Set Next State as SMS
 801bc4e:	4b09      	ldr	r3, [pc, #36]	@ (801bc74 <HAL_RTCEx_AlarmBEventCallback+0x110>)
 801bc50:	2207      	movs	r2, #7
 801bc52:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SMF), CFG_SEQ_Prio_0);  // My_SMF -- SMF = Sensors Measurement Function
 801bc54:	2100      	movs	r1, #0
 801bc56:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801bc5a:	f7fe fa8b 	bl	801a174 <UTIL_SEQ_SetTask>
#endif
		break;
 801bc5e:	bf00      	nop
	}

	}
}
 801bc60:	bf00      	nop
 801bc62:	3708      	adds	r7, #8
 801bc64:	46bd      	mov	sp, r7
 801bc66:	bd80      	pop	{r7, pc}
 801bc68:	20001be9 	.word	0x20001be9
 801bc6c:	58000400 	.word	0x58000400
 801bc70:	20001bc0 	.word	0x20001bc0
 801bc74:	20000638 	.word	0x20000638
 801bc78:	20001bea 	.word	0x20001bea
 801bc7c:	20001bbf 	.word	0x20001bbf
 801bc80:	20001bbe 	.word	0x20001bbe

0801bc84 <My_RTC_Init>:

/* CallBack Section End */
/*my rtc init*/
void My_RTC_Init(void)
{
 801bc84:	b580      	push	{r7, lr}
 801bc86:	b092      	sub	sp, #72	@ 0x48
 801bc88:	af00      	add	r7, sp, #0
#if MY_RTC_INIT
	HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);								// Disable Interrupt for RTC Alarms (A and B) Interrupt
 801bc8a:	202a      	movs	r0, #42	@ 0x2a
 801bc8c:	f7e7 fbc1 	bl	8003412 <HAL_NVIC_DisableIRQ>

	RTC_TimeTypeDef sTime = {0};
 801bc90:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801bc94:	2200      	movs	r2, #0
 801bc96:	601a      	str	r2, [r3, #0]
 801bc98:	605a      	str	r2, [r3, #4]
 801bc9a:	609a      	str	r2, [r3, #8]
 801bc9c:	60da      	str	r2, [r3, #12]
 801bc9e:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 801bca0:	2300      	movs	r3, #0
 801bca2:	633b      	str	r3, [r7, #48]	@ 0x30
	RTC_AlarmTypeDef sAlarm = {0};
 801bca4:	1d3b      	adds	r3, r7, #4
 801bca6:	222c      	movs	r2, #44	@ 0x2c
 801bca8:	2100      	movs	r1, #0
 801bcaa:	4618      	mov	r0, r3
 801bcac:	f003 ffe8 	bl	801fc80 <memset>
#define CFG_RTC_SYNCH_PRESCALER     (DIVR( LSE_VALUE, (CFG_RTC_ASYNCH_PRESCALER+1) ) - 1 )
	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 801bcb0:	4b3f      	ldr	r3, [pc, #252]	@ (801bdb0 <My_RTC_Init+0x12c>)
 801bcb2:	4a40      	ldr	r2, [pc, #256]	@ (801bdb4 <My_RTC_Init+0x130>)
 801bcb4:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 801bcb6:	4b3e      	ldr	r3, [pc, #248]	@ (801bdb0 <My_RTC_Init+0x12c>)
 801bcb8:	2200      	movs	r2, #0
 801bcba:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 801bcbc:	4b3c      	ldr	r3, [pc, #240]	@ (801bdb0 <My_RTC_Init+0x12c>)
 801bcbe:	220f      	movs	r2, #15
 801bcc0:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 801bcc2:	4b3b      	ldr	r3, [pc, #236]	@ (801bdb0 <My_RTC_Init+0x12c>)
 801bcc4:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801bcc8:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 801bcca:	4b39      	ldr	r3, [pc, #228]	@ (801bdb0 <My_RTC_Init+0x12c>)
 801bccc:	2200      	movs	r2, #0
 801bcce:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 801bcd0:	4b37      	ldr	r3, [pc, #220]	@ (801bdb0 <My_RTC_Init+0x12c>)
 801bcd2:	2200      	movs	r2, #0
 801bcd4:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 801bcd6:	4b36      	ldr	r3, [pc, #216]	@ (801bdb0 <My_RTC_Init+0x12c>)
 801bcd8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 801bcdc:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 801bcde:	4b34      	ldr	r3, [pc, #208]	@ (801bdb0 <My_RTC_Init+0x12c>)
 801bce0:	2200      	movs	r2, #0
 801bce2:	615a      	str	r2, [r3, #20]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 801bce4:	4832      	ldr	r0, [pc, #200]	@ (801bdb0 <My_RTC_Init+0x12c>)
 801bce6:	f7ea fd19 	bl	800671c <HAL_RTC_Init>
 801bcea:	4603      	mov	r3, r0
 801bcec:	2b00      	cmp	r3, #0
 801bcee:	d001      	beq.n	801bcf4 <My_RTC_Init+0x70>
	{
		Error_Handler();
 801bcf0:	f7e5 fb00 	bl	80012f4 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0;
 801bcf4:	2300      	movs	r3, #0
 801bcf6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	sTime.Minutes = 0;
 801bcfa:	2300      	movs	r3, #0
 801bcfc:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	sTime.Seconds = 0;
 801bd00:	2300      	movs	r3, #0
 801bd02:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	sTime.SubSeconds = 0x0;
 801bd06:	2300      	movs	r3, #0
 801bd08:	63bb      	str	r3, [r7, #56]	@ 0x38
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 801bd0a:	2300      	movs	r3, #0
 801bd0c:	643b      	str	r3, [r7, #64]	@ 0x40
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 801bd0e:	2300      	movs	r3, #0
 801bd10:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 801bd12:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801bd16:	2200      	movs	r2, #0
 801bd18:	4619      	mov	r1, r3
 801bd1a:	4825      	ldr	r0, [pc, #148]	@ (801bdb0 <My_RTC_Init+0x12c>)
 801bd1c:	f7ea fd80 	bl	8006820 <HAL_RTC_SetTime>
 801bd20:	4603      	mov	r3, r0
 801bd22:	2b00      	cmp	r3, #0
 801bd24:	d001      	beq.n	801bd2a <My_RTC_Init+0xa6>
	{
		Error_Handler();
 801bd26:	f7e5 fae5 	bl	80012f4 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 801bd2a:	2301      	movs	r3, #1
 801bd2c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	sDate.Month = RTC_MONTH_JANUARY;
 801bd30:	2301      	movs	r3, #1
 801bd32:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	sDate.Date = 1;
 801bd36:	2301      	movs	r3, #1
 801bd38:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	sDate.Year = 0;
 801bd3c:	2300      	movs	r3, #0
 801bd3e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 801bd42:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801bd46:	2200      	movs	r2, #0
 801bd48:	4619      	mov	r1, r3
 801bd4a:	4819      	ldr	r0, [pc, #100]	@ (801bdb0 <My_RTC_Init+0x12c>)
 801bd4c:	f7ea fe66 	bl	8006a1c <HAL_RTC_SetDate>
 801bd50:	4603      	mov	r3, r0
 801bd52:	2b00      	cmp	r3, #0
 801bd54:	d001      	beq.n	801bd5a <My_RTC_Init+0xd6>
	{
		Error_Handler();
 801bd56:	f7e5 facd 	bl	80012f4 <Error_Handler>
	}

	/** Enable the Alarm A
	 */
	sAlarm.AlarmTime.Hours = 0;
 801bd5a:	2300      	movs	r3, #0
 801bd5c:	713b      	strb	r3, [r7, #4]
	sAlarm.AlarmTime.Minutes = 0;
 801bd5e:	2300      	movs	r3, #0
 801bd60:	717b      	strb	r3, [r7, #5]
	sAlarm.AlarmTime.Seconds = 0;
 801bd62:	2300      	movs	r3, #0
 801bd64:	71bb      	strb	r3, [r7, #6]
	sAlarm.AlarmTime.SubSeconds = 0;
 801bd66:	2300      	movs	r3, #0
 801bd68:	60bb      	str	r3, [r7, #8]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 801bd6a:	2300      	movs	r3, #0
 801bd6c:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 801bd6e:	2300      	movs	r3, #0
 801bd70:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 801bd72:	2300      	movs	r3, #0
 801bd74:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 801bd76:	2300      	movs	r3, #0
 801bd78:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 801bd7a:	2300      	movs	r3, #0
 801bd7c:	627b      	str	r3, [r7, #36]	@ 0x24
	sAlarm.AlarmDateWeekDay = 1;
 801bd7e:	2301      	movs	r3, #1
 801bd80:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	sAlarm.Alarm = RTC_ALARM_A;
 801bd84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801bd88:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 801bd8a:	1d3b      	adds	r3, r7, #4
 801bd8c:	2200      	movs	r2, #0
 801bd8e:	4619      	mov	r1, r3
 801bd90:	4807      	ldr	r0, [pc, #28]	@ (801bdb0 <My_RTC_Init+0x12c>)
 801bd92:	f7ea fec9 	bl	8006b28 <HAL_RTC_SetAlarm_IT>
 801bd96:	4603      	mov	r3, r0
 801bd98:	2b00      	cmp	r3, #0
 801bd9a:	d001      	beq.n	801bda0 <My_RTC_Init+0x11c>
	{
		Error_Handler();
 801bd9c:	f7e5 faaa 	bl	80012f4 <Error_Handler>
	}

	HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);								// Disable Interrupt for RTC Alarms (A and B) Interrupt
 801bda0:	202a      	movs	r0, #42	@ 0x2a
 801bda2:	f7e7 fb36 	bl	8003412 <HAL_NVIC_DisableIRQ>
#endif
}
 801bda6:	bf00      	nop
 801bda8:	3748      	adds	r7, #72	@ 0x48
 801bdaa:	46bd      	mov	sp, r7
 801bdac:	bd80      	pop	{r7, pc}
 801bdae:	bf00      	nop
 801bdb0:	20000750 	.word	0x20000750
 801bdb4:	40002800 	.word	0x40002800

0801bdb8 <My_EHF>:

/* FSM Function Begin */

void My_EHF(void)	// EHF = Energy Harvesting Function
{
 801bdb8:	b580      	push	{r7, lr}
 801bdba:	af00      	add	r7, sp, #0
	/*
	 * The EHF Function manages the Energy Harvesting feature of the system
	 */

#if !(MY_DEBUGGER_ENABLED || MY_LPTIM_Monitor || MY_RTCB_Monitor)
	My_Set_All_GPIO_To_Analog_Mode();										// Set all GPIO in Analog Mode
 801bdbc:	f000 fcf6 	bl	801c7ac <My_Set_All_GPIO_To_Analog_Mode>
	My_Interrupts_Manager(NVIC_CLEAR); 										// Clear all Pending Interrupts
 801bdc0:	2002      	movs	r0, #2
 801bdc2:	f000 fddf 	bl	801c984 <My_Interrupts_Manager>
#endif

#if MY_ES_FEATURE_ENABLE
	My_VDD_to_ES_Switch(Switch_OPEN);										// Open VDD to ES Switch
 801bdc6:	2000      	movs	r0, #0
 801bdc8:	f001 f85a 	bl	801ce80 <My_VDD_to_ES_Switch>
#endif

	switch (my_Current_State)
 801bdcc:	4b5e      	ldr	r3, [pc, #376]	@ (801bf48 <My_EHF+0x190>)
 801bdce:	781b      	ldrb	r3, [r3, #0]
 801bdd0:	3b02      	subs	r3, #2
 801bdd2:	2b05      	cmp	r3, #5
 801bdd4:	f200 80ae 	bhi.w	801bf34 <My_EHF+0x17c>
 801bdd8:	a201      	add	r2, pc, #4	@ (adr r2, 801bde0 <My_EHF+0x28>)
 801bdda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bdde:	bf00      	nop
 801bde0:	0801be47 	.word	0x0801be47
 801bde4:	0801bdf9 	.word	0x0801bdf9
 801bde8:	0801bea9 	.word	0x0801bea9
 801bdec:	0801becf 	.word	0x0801becf
 801bdf0:	0801bf23 	.word	0x0801bf23
 801bdf4:	0801bebd 	.word	0x0801bebd
	{
	case EHS:  																// EHS = Energy Harvesting State
	{
		My_EHS_to_EMS_Timer(START_TIMER);  									// Start the EHS to EMS timer
 801bdf8:	2000      	movs	r0, #0
 801bdfa:	f000 fa3d 	bl	801c278 <My_EHS_to_EMS_Timer>

		switch (my_Next_State)
 801bdfe:	4b53      	ldr	r3, [pc, #332]	@ (801bf4c <My_EHF+0x194>)
 801be00:	781b      	ldrb	r3, [r3, #0]
 801be02:	2b09      	cmp	r3, #9
 801be04:	d012      	beq.n	801be2c <My_EHF+0x74>
 801be06:	2b09      	cmp	r3, #9
 801be08:	dc16      	bgt.n	801be38 <My_EHF+0x80>
 801be0a:	2b04      	cmp	r3, #4
 801be0c:	d002      	beq.n	801be14 <My_EHF+0x5c>
 801be0e:	2b07      	cmp	r3, #7
 801be10:	d006      	beq.n	801be20 <My_EHF+0x68>
 801be12:	e011      	b.n	801be38 <My_EHF+0x80>
		{

		case ESS:
		{
			My_Enter_Stop2_Mode_WFI(VESS_HIGH, PWR_PVD_MODE_IT_RISING); 	// Set Enter Stop2 Mode and WFI
 801be14:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801be18:	2008      	movs	r0, #8
 801be1a:	f000 fd0f 	bl	801c83c <My_Enter_Stop2_Mode_WFI>
			break;
 801be1e:	e011      	b.n	801be44 <My_EHF+0x8c>
		}

		case SMS:
		{
			My_Enter_Stop2_Mode_WFI(VSMS_HIGH, PWR_PVD_MODE_IT_RISING); 	// Set Enter Stop2 Mode and WFI
 801be20:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801be24:	200c      	movs	r0, #12
 801be26:	f000 fd09 	bl	801c83c <My_Enter_Stop2_Mode_WFI>
			break;
 801be2a:	e00b      	b.n	801be44 <My_EHF+0x8c>
		}
#if AI
		case AIS:
		{
			My_Enter_Stop2_Mode_WFI(VAIS_HIGH, PWR_PVD_MODE_IT_RISING); 	// Set Enter Stop2 Mode and WFI
 801be2c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801be30:	200c      	movs	r0, #12
 801be32:	f000 fd03 	bl	801c83c <My_Enter_Stop2_Mode_WFI>
			break;
 801be36:	e005      	b.n	801be44 <My_EHF+0x8c>
		}
#endif

		default:
		{
			My_Enter_Stop2_Mode_WFI(VRTS, PWR_PVD_MODE_IT_RISING); 			// Set Enter Stop2 Mode and WFI
 801be38:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801be3c:	200c      	movs	r0, #12
 801be3e:	f000 fcfd 	bl	801c83c <My_Enter_Stop2_Mode_WFI>
			break;
 801be42:	bf00      	nop
		}
		}

		break;
 801be44:	e07d      	b.n	801bf42 <My_EHF+0x18a>
	}

	case RTS:  																// RTS = Radio Transmission State
	{
#if MY_ES_FEATURE_ENABLE  													// If the Energy Storage Feature is enabled
		if (++my_RTS_cnt >= N_LORA_TX)  									// If the number of transmissions has reached the threshold
 801be46:	4b42      	ldr	r3, [pc, #264]	@ (801bf50 <My_EHF+0x198>)
 801be48:	781b      	ldrb	r3, [r3, #0]
 801be4a:	3301      	adds	r3, #1
 801be4c:	b2da      	uxtb	r2, r3
 801be4e:	4b40      	ldr	r3, [pc, #256]	@ (801bf50 <My_EHF+0x198>)
 801be50:	701a      	strb	r2, [r3, #0]
 801be52:	4b3f      	ldr	r3, [pc, #252]	@ (801bf50 <My_EHF+0x198>)
 801be54:	781b      	ldrb	r3, [r3, #0]
 801be56:	2b00      	cmp	r3, #0
 801be58:	d017      	beq.n	801be8a <My_EHF+0xd2>
		{
			if (my_Cmode != EOC)											// If the Energy Storage Device (ESD) is NOT in End of Charge (EOC)
 801be5a:	4b3e      	ldr	r3, [pc, #248]	@ (801bf54 <My_EHF+0x19c>)
 801be5c:	781b      	ldrb	r3, [r3, #0]
 801be5e:	2b02      	cmp	r3, #2
 801be60:	d006      	beq.n	801be70 <My_EHF+0xb8>
			{
				my_Current_State = EHS;  									// RTS --> EHS
 801be62:	4b39      	ldr	r3, [pc, #228]	@ (801bf48 <My_EHF+0x190>)
 801be64:	2203      	movs	r2, #3
 801be66:	701a      	strb	r2, [r3, #0]
				my_Next_State = ESS;  										// RTS --> EHS --> ESS
 801be68:	4b38      	ldr	r3, [pc, #224]	@ (801bf4c <My_EHF+0x194>)
 801be6a:	2204      	movs	r2, #4
 801be6c:	701a      	strb	r2, [r3, #0]
 801be6e:	e008      	b.n	801be82 <My_EHF+0xca>
			}
			else  															// If Energy Storage Device (ESD) is in End of Charge (EOC)
			{
				My_VDD_to_ES_Switch(Switch_OPEN);  							// Open the Vdd to ES Switch
 801be70:	2000      	movs	r0, #0
 801be72:	f001 f805 	bl	801ce80 <My_VDD_to_ES_Switch>
				my_Current_State = EHS;  									// RTS --> EHS
 801be76:	4b34      	ldr	r3, [pc, #208]	@ (801bf48 <My_EHF+0x190>)
 801be78:	2203      	movs	r2, #3
 801be7a:	701a      	strb	r2, [r3, #0]

#if MY_SM_FEATURE_ENABLE  													// If the Sensor Measurements Feature is enabled
				my_Next_State = SMS;										// RTS --> EHS --> SMS
 801be7c:	4b33      	ldr	r3, [pc, #204]	@ (801bf4c <My_EHF+0x194>)
 801be7e:	2207      	movs	r2, #7
 801be80:	701a      	strb	r2, [r3, #0]
#else
				my_Next_State = RTS;  										// RTS --> EHS --> RTS
#endif
			}
			my_RTS_cnt = 0;  												// Reset the transmissions counter
 801be82:	4b33      	ldr	r3, [pc, #204]	@ (801bf50 <My_EHF+0x198>)
 801be84:	2200      	movs	r2, #0
 801be86:	701a      	strb	r2, [r3, #0]
 801be88:	e005      	b.n	801be96 <My_EHF+0xde>
		}
		else  																// If the number of Radio transmissions is lower than N_LORA_TX
		{
			my_Current_State = EHS;  										// RTS --> EHS
 801be8a:	4b2f      	ldr	r3, [pc, #188]	@ (801bf48 <My_EHF+0x190>)
 801be8c:	2203      	movs	r2, #3
 801be8e:	701a      	strb	r2, [r3, #0]
			my_Next_State = RTS;  											// RTS --> EHS --> RTS
 801be90:	4b2e      	ldr	r3, [pc, #184]	@ (801bf4c <My_EHF+0x194>)
 801be92:	2202      	movs	r2, #2
 801be94:	701a      	strb	r2, [r3, #0]
#else
		my_Next_State = RTS;  												// Set Following State as RTS
#endif
#endif

		My_EHS_to_EMS_Timer(START_TIMER);  									// Start the EHS to EMS Timer
 801be96:	2000      	movs	r0, #0
 801be98:	f000 f9ee 	bl	801c278 <My_EHS_to_EMS_Timer>
		My_Enter_Stop2_Mode_WFI(VRTS, PWR_PVD_MODE_IT_RISING);  			// Enter Stop2 Power Mode and Wait for Interrupt
 801be9c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801bea0:	200c      	movs	r0, #12
 801bea2:	f000 fccb 	bl	801c83c <My_Enter_Stop2_Mode_WFI>
		break;
 801bea6:	e04c      	b.n	801bf42 <My_EHF+0x18a>
	}

	case ESS:
	{
		if (my_Next_State == SMS)
 801bea8:	4b28      	ldr	r3, [pc, #160]	@ (801bf4c <My_EHF+0x194>)
 801beaa:	781b      	ldrb	r3, [r3, #0]
 801beac:	2b07      	cmp	r3, #7
 801beae:	d147      	bne.n	801bf40 <My_EHF+0x188>
		{
			My_Enter_Stop2_Mode_WFI(VSMS_HIGH, PWR_PVD_MODE_IT_RISING);  	// Enter Stop2 Power Mode and Wait for Interrupt
 801beb0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801beb4:	200c      	movs	r0, #12
 801beb6:	f000 fcc1 	bl	801c83c <My_Enter_Stop2_Mode_WFI>
		}
		break;
 801beba:	e041      	b.n	801bf40 <My_EHF+0x188>
	}

	case SMS:
	{
		My_EHS_to_EMS_Timer(START_TIMER);  									// Start the EHS to EMS Timer
 801bebc:	2000      	movs	r0, #0
 801bebe:	f000 f9db 	bl	801c278 <My_EHS_to_EMS_Timer>
		My_Enter_Stop2_Mode_WFI(VSMS_HIGH, PWR_PVD_MODE_IT_RISING);  		// Enter Stop2 Power Mode and Wait for Interrupt
 801bec2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801bec6:	200c      	movs	r0, #12
 801bec8:	f000 fcb8 	bl	801c83c <My_Enter_Stop2_Mode_WFI>
		break;
 801becc:	e039      	b.n	801bf42 <My_EHF+0x18a>
	}

	case EMS:  																// EMS = Energy Missing State
	{
		My_ESW_DCM_Timer(STOP_TIMER);  										// Stop the ESW Timer
 801bece:	2001      	movs	r0, #1
 801bed0:	f000 f946 	bl	801c160 <My_ESW_DCM_Timer>
		My_ESW_CCM_Timer(STOP_TIMER);  										// Stop the ESW Timer
 801bed4:	2001      	movs	r0, #1
 801bed6:	f000 f969 	bl	801c1ac <My_ESW_CCM_Timer>
#if MY_LIS2DU12 && STEVAL_HARVEST1
		My_VDD_to_VDDS1_Switch(Switch_OPEN);								// unBias the Sensors: Open the switch between VDD and VDDS1
#endif

#if (MY_SHT40 || MY_STHS34PF80 || MY_STTS22H) && STEVAL_HARVEST1
		My_VDD_to_VDDS2_Switch(Switch_OPEN);								// unBias the Sensors: Open the switch between VDD and VDDS2
 801beda:	2000      	movs	r0, #0
 801bedc:	f001 f84e 	bl	801cf7c <My_VDD_to_VDDS2_Switch>
#endif

#endif

		My_VDD_to_ES_Switch(Switch_CLOSED);  								// The system is supplied by the Energy Storage Device (ESD)
 801bee0:	2001      	movs	r0, #1
 801bee2:	f000 ffcd 	bl	801ce80 <My_VDD_to_ES_Switch>

		My_PVD_Delay();														// 2 sec delay
 801bee6:	f000 ff8f 	bl	801ce08 <My_PVD_Delay>
		My_PVD_Delay();														// 2 sec delay
 801beea:	f000 ff8d 	bl	801ce08 <My_PVD_Delay>

		if (my_rtc_B_ems_flag == 0)  										// Flag the occurrence of EDS
 801beee:	4b1a      	ldr	r3, [pc, #104]	@ (801bf58 <My_EHF+0x1a0>)
 801bef0:	781b      	ldrb	r3, [r3, #0]
 801bef2:	2b00      	cmp	r3, #0
 801bef4:	d105      	bne.n	801bf02 <My_EHF+0x14a>
		{
			My_EMS_to_EDS_Timer(START_TIMER);  								// Start an Energy Presence Check
 801bef6:	2000      	movs	r0, #0
 801bef8:	f000 fa02 	bl	801c300 <My_EMS_to_EDS_Timer>
			my_rtc_B_ems_flag = 1;
 801befc:	4b16      	ldr	r3, [pc, #88]	@ (801bf58 <My_EHF+0x1a0>)
 801befe:	2201      	movs	r2, #1
 801bf00:	701a      	strb	r2, [r3, #0]
		}

		if (my_rtc_A_ems_flag == 0)  										// Flag the occurrence of ems Measurement
 801bf02:	4b16      	ldr	r3, [pc, #88]	@ (801bf5c <My_EHF+0x1a4>)
 801bf04:	781b      	ldrb	r3, [r3, #0]
 801bf06:	2b00      	cmp	r3, #0
 801bf08:	d105      	bne.n	801bf16 <My_EHF+0x15e>
		{
			My_EMS_to_SMS_Timer(START_TIMER);  								// Start the timer to move from EMS to SMS
 801bf0a:	2000      	movs	r0, #0
 801bf0c:	f000 fa1a 	bl	801c344 <My_EMS_to_SMS_Timer>
			my_rtc_A_ems_flag = 1;
 801bf10:	4b12      	ldr	r3, [pc, #72]	@ (801bf5c <My_EHF+0x1a4>)
 801bf12:	2201      	movs	r2, #1
 801bf14:	701a      	strb	r2, [r3, #0]
		}

		My_Enter_Stop2_Mode_WFI(PVD_EMS, PWR_PVD_MODE_IT_RISING);  			// Enter Stop2 Power Mode and Wait for Interrupt
 801bf16:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801bf1a:	2008      	movs	r0, #8
 801bf1c:	f000 fc8e 	bl	801c83c <My_Enter_Stop2_Mode_WFI>
		break;
 801bf20:	e00f      	b.n	801bf42 <My_EHF+0x18a>
	}

	case EDS:  																// EDS = Energy Detection State
	{
		My_EDS_Timer(START_TIMER);  										// Start the EDS Timer
 801bf22:	2000      	movs	r0, #0
 801bf24:	f000 f98e 	bl	801c244 <My_EDS_Timer>
		My_Enter_Stop2_Mode_WFI(VRTS, PWR_PVD_MODE_IT_RISING);				// Enter Stop2 Power Mode and Wait for Interrupt
 801bf28:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801bf2c:	200c      	movs	r0, #12
 801bf2e:	f000 fc85 	bl	801c83c <My_Enter_Stop2_Mode_WFI>
		break;
 801bf32:	e006      	b.n	801bf42 <My_EHF+0x18a>
	}

	default:
	{
		My_Enter_Stop2_Mode_WFI(VRTS, PWR_PVD_MODE_IT_RISING);				// Enter Stop2 Power Mode and Wait for Interrupt
 801bf34:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801bf38:	200c      	movs	r0, #12
 801bf3a:	f000 fc7f 	bl	801c83c <My_Enter_Stop2_Mode_WFI>
		break;
 801bf3e:	e000      	b.n	801bf42 <My_EHF+0x18a>
		break;
 801bf40:	bf00      	nop
	}
	}
}
 801bf42:	bf00      	nop
 801bf44:	bd80      	pop	{r7, pc}
 801bf46:	bf00      	nop
 801bf48:	20001be9 	.word	0x20001be9
 801bf4c:	20000638 	.word	0x20000638
 801bf50:	20001bba 	.word	0x20001bba
 801bf54:	20001bea 	.word	0x20001bea
 801bf58:	20001bbf 	.word	0x20001bbf
 801bf5c:	20001bbe 	.word	0x20001bbe

0801bf60 <My_ESF>:
/*
 * The ESF Function performs the actions executed during the Energy Storage State (ESS).
 * In the Energy Storage State (ESS) the additional Energy Storage Device (ESD) gets charged.
 */

{
 801bf60:	b580      	push	{r7, lr}
 801bf62:	af00      	add	r7, sp, #0

#if !(MY_DEBUGGER_ENABLED || MY_LPTIM_Monitor || MY_RTCB_Monitor)
	My_Set_All_GPIO_To_Analog_Mode();									// Set all GPIO in Analog Mode
 801bf64:	f000 fc22 	bl	801c7ac <My_Set_All_GPIO_To_Analog_Mode>
	My_Interrupts_Manager(NVIC_CLEAR); 									// Clear all Pending Interrupts
 801bf68:	2002      	movs	r0, #2
 801bf6a:	f000 fd0b 	bl	801c984 <My_Interrupts_Manager>
#endif

	my_Check_ESD = 0;													// Reset my_Check_ESD
 801bf6e:	4b43      	ldr	r3, [pc, #268]	@ (801c07c <My_ESF+0x11c>)
 801bf70:	2200      	movs	r2, #0
 801bf72:	701a      	strb	r2, [r3, #0]

	my_Current_State = ESS;												// Set Current State as Energy Storage State (ESS)
 801bf74:	4b42      	ldr	r3, [pc, #264]	@ (801c080 <My_ESF+0x120>)
 801bf76:	2204      	movs	r2, #4
 801bf78:	701a      	strb	r2, [r3, #0]

	switch (my_Cmode)
 801bf7a:	4b42      	ldr	r3, [pc, #264]	@ (801c084 <My_ESF+0x124>)
 801bf7c:	781b      	ldrb	r3, [r3, #0]
 801bf7e:	2b00      	cmp	r3, #0
 801bf80:	d002      	beq.n	801bf88 <My_ESF+0x28>
 801bf82:	2b01      	cmp	r3, #1
 801bf84:	d027      	beq.n	801bfd6 <My_ESF+0x76>
		break;
	}

	default:
	{
		break;
 801bf86:	e077      	b.n	801c078 <My_ESF+0x118>
		My_Interrupts_Manager(NVIC_DISABLE);							// Disable all the interrupts
 801bf88:	2001      	movs	r0, #1
 801bf8a:	f000 fcfb 	bl	801c984 <My_Interrupts_Manager>
		HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);								// Enable only interrupts for PVD During DCM
 801bf8e:	2001      	movs	r0, #1
 801bf90:	f7e7 fa31 	bl	80033f6 <HAL_NVIC_EnableIRQ>
		if (HAL_LPTIM_ReadCounter(&hlptim1) > T_ESW || (my_ESS_cnt >= DCM_MAX))
 801bf94:	483c      	ldr	r0, [pc, #240]	@ (801c088 <My_ESF+0x128>)
 801bf96:	f001 fb5f 	bl	801d658 <HAL_LPTIM_ReadCounter>
 801bf9a:	4603      	mov	r3, r0
 801bf9c:	f241 4208 	movw	r2, #5128	@ 0x1408
 801bfa0:	4293      	cmp	r3, r2
 801bfa2:	d803      	bhi.n	801bfac <My_ESF+0x4c>
 801bfa4:	4b39      	ldr	r3, [pc, #228]	@ (801c08c <My_ESF+0x12c>)
 801bfa6:	781b      	ldrb	r3, [r3, #0]
 801bfa8:	2b04      	cmp	r3, #4
 801bfaa:	d906      	bls.n	801bfba <My_ESF+0x5a>
			My_ESW_DCM_Timer(STOP_TIMER);
 801bfac:	2001      	movs	r0, #1
 801bfae:	f000 f8d7 	bl	801c160 <My_ESW_DCM_Timer>
			my_Next_State = SMS;
 801bfb2:	4b37      	ldr	r3, [pc, #220]	@ (801c090 <My_ESF+0x130>)
 801bfb4:	2207      	movs	r2, #7
 801bfb6:	701a      	strb	r2, [r3, #0]
 801bfb8:	e002      	b.n	801bfc0 <My_ESF+0x60>
			My_ESW_DCM_Timer(START_TIMER);								// Start the EWS DCM Timer
 801bfba:	2000      	movs	r0, #0
 801bfbc:	f000 f8d0 	bl	801c160 <My_ESW_DCM_Timer>
		My_DCM_to_CCM_Timer(START_TIMER); 								// Start Timer to monitor DCM to CCM.
 801bfc0:	2000      	movs	r0, #0
 801bfc2:	f000 f97b 	bl	801c2bc <My_DCM_to_CCM_Timer>
		My_VDD_to_ES_Switch(Switch_CLOSED);								// Close the Switch (High side of a GPIO) between Vdd and ES
 801bfc6:	2001      	movs	r0, #1
 801bfc8:	f000 ff5a 	bl	801ce80 <My_VDD_to_ES_Switch>
		My_Enter_Stop2_Mode_WFI(VESS_LOW, PWR_PVD_MODE_IT_FALLING); 	// Set PVD to level VESS_LOW with Interrupt for Falling Vdd and Enter Stop2 Mode and Wait for Interrupt
 801bfcc:	4931      	ldr	r1, [pc, #196]	@ (801c094 <My_ESF+0x134>)
 801bfce:	2002      	movs	r0, #2
 801bfd0:	f000 fc34 	bl	801c83c <My_Enter_Stop2_Mode_WFI>
		break;
 801bfd4:	e050      	b.n	801c078 <My_ESF+0x118>
		My_ESW_CCM_Timer(START_TIMER);									// Start the EWS CCM Timer
 801bfd6:	2000      	movs	r0, #0
 801bfd8:	f000 f8e8 	bl	801c1ac <My_ESW_CCM_Timer>
		My_VDD_to_ES_Switch(Switch_CLOSED);								// Close the Switch (High side of a GPIO) between Vdd and ES
 801bfdc:	2001      	movs	r0, #1
 801bfde:	f000 ff4f 	bl	801ce80 <My_VDD_to_ES_Switch>
		My_Set_PVD(VEOC, PWR_PVD_MODE_NORMAL); 							// Set PVD in Normal Mode and VEOC
 801bfe2:	2100      	movs	r1, #0
 801bfe4:	2008      	movs	r0, #8
 801bfe6:	f000 fcaf 	bl	801c948 <My_Set_PVD>
		My_PVD_Delay(); 												// Delay to allow the PVD to Settle
 801bfea:	f000 ff0d 	bl	801ce08 <My_PVD_Delay>
		if (__HAL_PWR_GET_FLAG(PWR_FLAG_PVDO) == 0) 					// If the voltage across the Energy Storage Device (ESD) is higher than VEOC the System is in End of Charge (EOC)
 801bfee:	4b2a      	ldr	r3, [pc, #168]	@ (801c098 <My_ESF+0x138>)
 801bff0:	695b      	ldr	r3, [r3, #20]
 801bff2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801bff6:	2b00      	cmp	r3, #0
 801bff8:	d11a      	bne.n	801c030 <My_ESF+0xd0>
			my_Cmode = EOC; 											// Set Charging Mode in End of Charge (EOC)
 801bffa:	4b22      	ldr	r3, [pc, #136]	@ (801c084 <My_ESF+0x124>)
 801bffc:	2202      	movs	r2, #2
 801bffe:	701a      	strb	r2, [r3, #0]
			my_Current_State = EHS;										// Set Current State as Energy Harvesting State (EHS): ESS --> EHS
 801c000:	4b1f      	ldr	r3, [pc, #124]	@ (801c080 <My_ESF+0x120>)
 801c002:	2203      	movs	r2, #3
 801c004:	701a      	strb	r2, [r3, #0]
			My_EBK_status = 100;
 801c006:	4b25      	ldr	r3, [pc, #148]	@ (801c09c <My_ESF+0x13c>)
 801c008:	2264      	movs	r2, #100	@ 0x64
 801c00a:	701a      	strb	r2, [r3, #0]
			my_Next_State = SMS; 										// Set Next State as Radio Transmission State (RTS): ESS --> EHS --> SMS
 801c00c:	4b20      	ldr	r3, [pc, #128]	@ (801c090 <My_ESF+0x130>)
 801c00e:	2207      	movs	r2, #7
 801c010:	701a      	strb	r2, [r3, #0]
			My_VDD_to_ES_Switch(Switch_OPEN); 							// Stop Charging: Open the Switch between Vdd and ES
 801c012:	2000      	movs	r0, #0
 801c014:	f000 ff34 	bl	801ce80 <My_VDD_to_ES_Switch>
			My_ESW_CCM_Timer(STOP_TIMER);								// Stop the Energy Storage Window (ESW) Timer
 801c018:	2001      	movs	r0, #1
 801c01a:	f000 f8c7 	bl	801c1ac <My_ESW_CCM_Timer>
			My_EHS_to_EMS_Timer(START_TIMER); 							// Start the EHS to EMS Timer (Detects if Energy to Harvest is Missing)
 801c01e:	2000      	movs	r0, #0
 801c020:	f000 f92a 	bl	801c278 <My_EHS_to_EMS_Timer>
			My_Enter_Stop2_Mode_WFI(VRTS, PWR_PVD_MODE_IT_RISING); 		// Enter Stop 2 Power Mode and Wait for Interrupt
 801c024:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801c028:	200c      	movs	r0, #12
 801c02a:	f000 fc07 	bl	801c83c <My_Enter_Stop2_Mode_WFI>
		break;
 801c02e:	e022      	b.n	801c076 <My_ESF+0x116>
				My_Set_PVD(V2P2, PWR_PVD_MODE_NORMAL); 					// Set PVD in Normal Mode and VEOC
 801c030:	2100      	movs	r1, #0
 801c032:	2002      	movs	r0, #2
 801c034:	f000 fc88 	bl	801c948 <My_Set_PVD>
				My_PVD_Delay(); 										// Delay to allow the PVD to Settle
 801c038:	f000 fee6 	bl	801ce08 <My_PVD_Delay>
				if (__HAL_PWR_GET_FLAG(PWR_FLAG_PVDO) == 0) 			// Check if the voltage across the Energy Storage Device (ESD) is higher than V2P2
 801c03c:	4b16      	ldr	r3, [pc, #88]	@ (801c098 <My_ESF+0x138>)
 801c03e:	695b      	ldr	r3, [r3, #20]
 801c040:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801c044:	2b00      	cmp	r3, #0
 801c046:	d102      	bne.n	801c04e <My_ESF+0xee>
					My_EBK_status = 33;
 801c048:	4b14      	ldr	r3, [pc, #80]	@ (801c09c <My_ESF+0x13c>)
 801c04a:	2221      	movs	r2, #33	@ 0x21
 801c04c:	701a      	strb	r2, [r3, #0]
				My_Set_PVD(V2P4, PWR_PVD_MODE_NORMAL); 					// Set PVD in Normal Mode and VEOC
 801c04e:	2100      	movs	r1, #0
 801c050:	2004      	movs	r0, #4
 801c052:	f000 fc79 	bl	801c948 <My_Set_PVD>
				My_PVD_Delay();
 801c056:	f000 fed7 	bl	801ce08 <My_PVD_Delay>
				if (__HAL_PWR_GET_FLAG(PWR_FLAG_PVDO) == 0) 			// Check if the voltage across the Energy Storage Device (ESD) is higher than V2P4
 801c05a:	4b0f      	ldr	r3, [pc, #60]	@ (801c098 <My_ESF+0x138>)
 801c05c:	695b      	ldr	r3, [r3, #20]
 801c05e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801c062:	2b00      	cmp	r3, #0
 801c064:	d102      	bne.n	801c06c <My_ESF+0x10c>
					My_EBK_status = 66;
 801c066:	4b0d      	ldr	r3, [pc, #52]	@ (801c09c <My_ESF+0x13c>)
 801c068:	2242      	movs	r2, #66	@ 0x42
 801c06a:	701a      	strb	r2, [r3, #0]
				My_Enter_Stop2_Mode_WFI(VEOC, PWR_PVD_MODE_IT_RISING);	// Enter Stop2 Mode and Wait for Interrupt and wait for the charging to be completed
 801c06c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801c070:	2008      	movs	r0, #8
 801c072:	f000 fbe3 	bl	801c83c <My_Enter_Stop2_Mode_WFI>
		break;
 801c076:	bf00      	nop
	}
	}
}
 801c078:	bf00      	nop
 801c07a:	bd80      	pop	{r7, pc}
 801c07c:	20001bc0 	.word	0x20001bc0
 801c080:	20001be9 	.word	0x20001be9
 801c084:	20001bea 	.word	0x20001bea
 801c088:	20001b40 	.word	0x20001b40
 801c08c:	20001bbb 	.word	0x20001bbb
 801c090:	20000638 	.word	0x20000638
 801c094:	00010002 	.word	0x00010002
 801c098:	58000400 	.word	0x58000400
 801c09c:	20001bb9 	.word	0x20001bb9

0801c0a0 <My_SMF>:

void My_SMF(void)	// SMF = Sensor Measurement Function
{
 801c0a0:	b580      	push	{r7, lr}
 801c0a2:	af00      	add	r7, sp, #0
	 * SMF = Sensor Measurement Function
	 * The SMF Function Manages the Sensors
	 */

#if !(MY_DEBUGGER_ENABLED || MY_LPTIM_Monitor || MY_RTCB_Monitor)
	My_Set_All_GPIO_To_Analog_Mode();								// Set all GPIO in Analog Mode
 801c0a4:	f000 fb82 	bl	801c7ac <My_Set_All_GPIO_To_Analog_Mode>
	My_Interrupts_Manager(NVIC_CLEAR); 								// Clear all Pending Interrupts
 801c0a8:	2002      	movs	r0, #2
 801c0aa:	f000 fc6b 	bl	801c984 <My_Interrupts_Manager>
#endif

	HAL_NVIC_DisableIRQ(RTC_WKUP_IRQn);								// Disable Interrupt for RTC_WKUP
 801c0ae:	2003      	movs	r0, #3
 801c0b0:	f7e7 f9af 	bl	8003412 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);							// Disable Interrupt for RTC_Alarm_IRQn
 801c0b4:	202a      	movs	r0, #42	@ 0x2a
 801c0b6:	f7e7 f9ac 	bl	8003412 <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(LPTIM1_IRQn);								// Disable Interrupt for LPTIM1
 801c0ba:	2027      	movs	r0, #39	@ 0x27
 801c0bc:	f7e7 f9a9 	bl	8003412 <HAL_NVIC_DisableIRQ>

	my_Current_State = SMS;											// Set Current State as SMS
 801c0c0:	4b1a      	ldr	r3, [pc, #104]	@ (801c12c <My_SMF+0x8c>)
 801c0c2:	2207      	movs	r2, #7
 801c0c4:	701a      	strb	r2, [r3, #0]
	My_SMW_Timer(START_TIMER);										// Start Sensor Measurement Window Timer
 801c0c6:	2000      	movs	r0, #0
 801c0c8:	f000 f896 	bl	801c1f8 <My_SMW_Timer>

	My_Set_PVD(VSMS_LOW, PWR_PVD_MODE_IT_FALLING);					// Set PVD
 801c0cc:	4918      	ldr	r1, [pc, #96]	@ (801c130 <My_SMF+0x90>)
 801c0ce:	2004      	movs	r0, #4
 801c0d0:	f000 fc3a 	bl	801c948 <My_Set_PVD>

	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);	// Set Internal Voltage Regulator at 1.2 V
 801c0d4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801c0d8:	f7e8 ff00 	bl	8004edc <HAL_PWREx_ControlVoltageScaling>
	My_HAL_Delay(10);												// Add a Delay
	My_I2C_Init(MY_I2C1);											// Initialize I2C1
#endif

#if (MY_SHT40 || MY_STHS34PF80 || MY_STTS22H) && STEVAL_HARVEST1
	My_VDD_to_VDDS2_Switch(Switch_CLOSED);							// Bias the Sensors: Close the switch between VDD and VDDS2 to Power Sensors
 801c0dc:	2001      	movs	r0, #1
 801c0de:	f000 ff4d 	bl	801cf7c <My_VDD_to_VDDS2_Switch>
	My_HAL_Delay(10);												// Add a Delay
 801c0e2:	200a      	movs	r0, #10
 801c0e4:	f000 ff92 	bl	801d00c <My_HAL_Delay>
	My_I2C_Init(MY_I2C2);											// Initialize I2C2
 801c0e8:	2001      	movs	r0, #1
 801c0ea:	f000 fa6b 	bl	801c5c4 <My_I2C_Init>
#endif

#if MY_SHT40 && STEVAL_HARVEST1
	My_SHT40_Get_Data();											// SHT40 Get Data
 801c0ee:	f000 faa7 	bl	801c640 <My_SHT40_Get_Data>
#if MY_LIS2DU12 && STEVAL_HARVEST1
	My_I2C_Deinit(MY_I2C1);											// Initialize I2C1
#endif

#if (MY_SHT40 || MY_STHS34PF80 || MY_STTS22H) && STEVAL_HARVEST1
	My_I2C_Deinit(MY_I2C2);											// DeInitialize I2C2
 801c0f2:	2001      	movs	r0, #1
 801c0f4:	f000 fa88 	bl	801c608 <My_I2C_Deinit>
#endif

#endif

	if (my_Cmode == DCM && my_Check_ESD == 0)						// If in DCM Mode --> Charge the Energy Backup Device
 801c0f8:	4b0e      	ldr	r3, [pc, #56]	@ (801c134 <My_SMF+0x94>)
 801c0fa:	781b      	ldrb	r3, [r3, #0]
 801c0fc:	2b00      	cmp	r3, #0
 801c0fe:	d107      	bne.n	801c110 <My_SMF+0x70>
 801c100:	4b0d      	ldr	r3, [pc, #52]	@ (801c138 <My_SMF+0x98>)
 801c102:	781b      	ldrb	r3, [r3, #0]
 801c104:	2b00      	cmp	r3, #0
 801c106:	d103      	bne.n	801c110 <My_SMF+0x70>
	{
		My_VDD_to_ES_Switch(Switch_CLOSED);							// Charge the Energy Backup Device
 801c108:	2001      	movs	r0, #1
 801c10a:	f000 feb9 	bl	801ce80 <My_VDD_to_ES_Switch>
 801c10e:	e003      	b.n	801c118 <My_SMF+0x78>
	}
	else
	{
		Radio.Rx(1);												// Turn the Radio in RX Mode
 801c110:	4b0a      	ldr	r3, [pc, #40]	@ (801c13c <My_SMF+0x9c>)
 801c112:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c114:	2001      	movs	r0, #1
 801c116:	4798      	blx	r3
	}

	My_Interrupts_Manager(NVIC_DISABLE);							// Disable and Clear All Pending Interrupts
 801c118:	2001      	movs	r0, #1
 801c11a:	f000 fc33 	bl	801c984 <My_Interrupts_Manager>
	HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);								// Enable Interrupt for PVD
 801c11e:	2001      	movs	r0, #1
 801c120:	f7e7 f969 	bl	80033f6 <HAL_NVIC_EnableIRQ>
	__WFI();														// Wait for Interrupt From PVD
 801c124:	bf30      	wfi
}
 801c126:	bf00      	nop
 801c128:	bd80      	pop	{r7, pc}
 801c12a:	bf00      	nop
 801c12c:	20001be9 	.word	0x20001be9
 801c130:	00010002 	.word	0x00010002
 801c134:	20001bea 	.word	0x20001bea
 801c138:	20001bc0 	.word	0x20001bc0
 801c13c:	0802146c 	.word	0x0802146c

0801c140 <My_AIF>:

void My_AIF(void)
{
 801c140:	b580      	push	{r7, lr}
 801c142:	af00      	add	r7, sp, #0
	My_Set_PVD(VAIS_LOW, PWR_PVD_MODE_IT_FALLING);					// Set PVD
 801c144:	4905      	ldr	r1, [pc, #20]	@ (801c15c <My_AIF+0x1c>)
 801c146:	2006      	movs	r0, #6
 801c148:	f000 fbfe 	bl	801c948 <My_Set_PVD>
	//My_PVD_Delay();

	MX_X_CUBE_AI_Process();
 801c14c:	f7fe ff56 	bl	801affc <MX_X_CUBE_AI_Process>
	UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_RTF), CFG_SEQ_Prio_0);	// SendTxData
 801c150:	2100      	movs	r1, #0
 801c152:	2010      	movs	r0, #16
 801c154:	f7fe f80e 	bl	801a174 <UTIL_SEQ_SetTask>
}
 801c158:	bf00      	nop
 801c15a:	bd80      	pop	{r7, pc}
 801c15c:	00010002 	.word	0x00010002

0801c160 <My_ESW_DCM_Timer>:


/* Timer Section Begin */

void My_ESW_DCM_Timer(My_Timer_td mode)
{
 801c160:	b580      	push	{r7, lr}
 801c162:	b082      	sub	sp, #8
 801c164:	af00      	add	r7, sp, #0
 801c166:	4603      	mov	r3, r0
 801c168:	71fb      	strb	r3, [r7, #7]
	/* This Function Starts and Stops the LPTIM1 timer to measure the time T_ESW that defines the Energy Storage Window (ESW) in DCM */

	if ((mode == START_TIMER) && (my_ESS_cnt++ == 0))	// Start the Energy Storage Window (ESW) Timer
 801c16a:	79fb      	ldrb	r3, [r7, #7]
 801c16c:	2b00      	cmp	r3, #0
 801c16e:	d10c      	bne.n	801c18a <My_ESW_DCM_Timer+0x2a>
 801c170:	4b0c      	ldr	r3, [pc, #48]	@ (801c1a4 <My_ESW_DCM_Timer+0x44>)
 801c172:	781b      	ldrb	r3, [r3, #0]
 801c174:	1c5a      	adds	r2, r3, #1
 801c176:	b2d1      	uxtb	r1, r2
 801c178:	4a0a      	ldr	r2, [pc, #40]	@ (801c1a4 <My_ESW_DCM_Timer+0x44>)
 801c17a:	7011      	strb	r1, [r2, #0]
 801c17c:	2b00      	cmp	r3, #0
 801c17e:	d104      	bne.n	801c18a <My_ESW_DCM_Timer+0x2a>
	{
		HAL_LPTIM_Counter_Start(&hlptim1, (0XFFFF));	// Start the lptim1 timer used for the Energy Storage Window (ESW)
 801c180:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801c184:	4808      	ldr	r0, [pc, #32]	@ (801c1a8 <My_ESW_DCM_Timer+0x48>)
 801c186:	f001 f8ff 	bl	801d388 <HAL_LPTIM_Counter_Start>
#if MY_LPTIM_Monitor
		My_LPTIM1_Monitor(Switch_CLOSED);
#endif
	}

	if (mode == STOP_TIMER) 							// Stop the Energy Storage Window (ESW) Timer
 801c18a:	79fb      	ldrb	r3, [r7, #7]
 801c18c:	2b01      	cmp	r3, #1
 801c18e:	d105      	bne.n	801c19c <My_ESW_DCM_Timer+0x3c>
	{
		my_ESS_cnt = 0;									// Reset ESS Counter
 801c190:	4b04      	ldr	r3, [pc, #16]	@ (801c1a4 <My_ESW_DCM_Timer+0x44>)
 801c192:	2200      	movs	r2, #0
 801c194:	701a      	strb	r2, [r3, #0]
		HAL_LPTIM_Counter_Stop(&hlptim1); 				// Stop the lptim1 timer used for the Energy Storage Window (ESW)
 801c196:	4804      	ldr	r0, [pc, #16]	@ (801c1a8 <My_ESW_DCM_Timer+0x48>)
 801c198:	f001 f93a 	bl	801d410 <HAL_LPTIM_Counter_Stop>

#if MY_LPTIM_Monitor
		My_LPTIM1_Monitor(Switch_OPEN);
#endif
	}
}
 801c19c:	bf00      	nop
 801c19e:	3708      	adds	r7, #8
 801c1a0:	46bd      	mov	sp, r7
 801c1a2:	bd80      	pop	{r7, pc}
 801c1a4:	20001bbb 	.word	0x20001bbb
 801c1a8:	20001b40 	.word	0x20001b40

0801c1ac <My_ESW_CCM_Timer>:

void My_ESW_CCM_Timer(My_Timer_td mode)
{
 801c1ac:	b580      	push	{r7, lr}
 801c1ae:	b082      	sub	sp, #8
 801c1b0:	af00      	add	r7, sp, #0
 801c1b2:	4603      	mov	r3, r0
 801c1b4:	71fb      	strb	r3, [r7, #7]
	/* This Function Starts and Stops the LPTIM1 timer to measure the time T_ESW that defines the Energy Storage Window (ESW) in CCM */

	if ((mode == START_TIMER) && (my_ESS_cnt++ == 0))	// Start the Energy Storage Window (ESW) Timer
 801c1b6:	79fb      	ldrb	r3, [r7, #7]
 801c1b8:	2b00      	cmp	r3, #0
 801c1ba:	d10c      	bne.n	801c1d6 <My_ESW_CCM_Timer+0x2a>
 801c1bc:	4b0c      	ldr	r3, [pc, #48]	@ (801c1f0 <My_ESW_CCM_Timer+0x44>)
 801c1be:	781b      	ldrb	r3, [r3, #0]
 801c1c0:	1c5a      	adds	r2, r3, #1
 801c1c2:	b2d1      	uxtb	r1, r2
 801c1c4:	4a0a      	ldr	r2, [pc, #40]	@ (801c1f0 <My_ESW_CCM_Timer+0x44>)
 801c1c6:	7011      	strb	r1, [r2, #0]
 801c1c8:	2b00      	cmp	r3, #0
 801c1ca:	d104      	bne.n	801c1d6 <My_ESW_CCM_Timer+0x2a>
	{
		HAL_LPTIM_Counter_Start_IT(&hlptim1, T_ESW);
 801c1cc:	f241 4108 	movw	r1, #5128	@ 0x1408
 801c1d0:	4808      	ldr	r0, [pc, #32]	@ (801c1f4 <My_ESW_CCM_Timer+0x48>)
 801c1d2:	f001 f939 	bl	801d448 <HAL_LPTIM_Counter_Start_IT>
		My_LPTIM1_Monitor(Switch_CLOSED);
#endif

	}

	if (mode == STOP_TIMER) 							// Stop the Energy Storage Window (ESW) Timer
 801c1d6:	79fb      	ldrb	r3, [r7, #7]
 801c1d8:	2b01      	cmp	r3, #1
 801c1da:	d105      	bne.n	801c1e8 <My_ESW_CCM_Timer+0x3c>
	{
		my_ESS_cnt = 0;									// Reset ESS Counter
 801c1dc:	4b04      	ldr	r3, [pc, #16]	@ (801c1f0 <My_ESW_CCM_Timer+0x44>)
 801c1de:	2200      	movs	r2, #0
 801c1e0:	701a      	strb	r2, [r3, #0]
		HAL_LPTIM_Counter_Stop_IT(&hlptim1); 			// Stop the lptim1 timer used for the Energy Storage Window (ESW)
 801c1e2:	4804      	ldr	r0, [pc, #16]	@ (801c1f4 <My_ESW_CCM_Timer+0x48>)
 801c1e4:	f001 f9d2 	bl	801d58c <HAL_LPTIM_Counter_Stop_IT>

#if MY_LPTIM_Monitor
		My_LPTIM1_Monitor(Switch_OPEN);
#endif
	}
}
 801c1e8:	bf00      	nop
 801c1ea:	3708      	adds	r7, #8
 801c1ec:	46bd      	mov	sp, r7
 801c1ee:	bd80      	pop	{r7, pc}
 801c1f0:	20001bbb 	.word	0x20001bbb
 801c1f4:	20001b40 	.word	0x20001b40

0801c1f8 <My_SMW_Timer>:

void My_SMW_Timer(My_Timer_td mode)
{
 801c1f8:	b580      	push	{r7, lr}
 801c1fa:	b082      	sub	sp, #8
 801c1fc:	af00      	add	r7, sp, #0
 801c1fe:	4603      	mov	r3, r0
 801c200:	71fb      	strb	r3, [r7, #7]
	/* This Function Starts and Stops the LPTIM1 timer to measure the time T_SMW that defines the Sensor Measure Window (SMW) */

	if ((mode == START_TIMER) && (my_SMS_cnt++ == 0))	// Start the Sensor Measurement Window (SMW) Timer
 801c202:	79fb      	ldrb	r3, [r7, #7]
 801c204:	2b00      	cmp	r3, #0
 801c206:	d10c      	bne.n	801c222 <My_SMW_Timer+0x2a>
 801c208:	4b0c      	ldr	r3, [pc, #48]	@ (801c23c <My_SMW_Timer+0x44>)
 801c20a:	781b      	ldrb	r3, [r3, #0]
 801c20c:	1c5a      	adds	r2, r3, #1
 801c20e:	b2d1      	uxtb	r1, r2
 801c210:	4a0a      	ldr	r2, [pc, #40]	@ (801c23c <My_SMW_Timer+0x44>)
 801c212:	7011      	strb	r1, [r2, #0]
 801c214:	2b00      	cmp	r3, #0
 801c216:	d104      	bne.n	801c222 <My_SMW_Timer+0x2a>
	{
		HAL_LPTIM_Counter_Start(&hlptim1, (0XFFFF));	// Start the lptim1 timer used for the Sensor Measurement Window (SMW)
 801c218:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801c21c:	4808      	ldr	r0, [pc, #32]	@ (801c240 <My_SMW_Timer+0x48>)
 801c21e:	f001 f8b3 	bl	801d388 <HAL_LPTIM_Counter_Start>
#if MY_LPTIM_Monitor
		My_LPTIM1_Monitor(Switch_CLOSED);
#endif
	}

	if (mode == STOP_TIMER) 							// Stop the Sensor Measurement Window (SMW) Timer
 801c222:	79fb      	ldrb	r3, [r7, #7]
 801c224:	2b01      	cmp	r3, #1
 801c226:	d105      	bne.n	801c234 <My_SMW_Timer+0x3c>
	{
		my_SMS_cnt = 0;									// Reset my_SMS_cnt
 801c228:	4b04      	ldr	r3, [pc, #16]	@ (801c23c <My_SMW_Timer+0x44>)
 801c22a:	2200      	movs	r2, #0
 801c22c:	701a      	strb	r2, [r3, #0]
		HAL_LPTIM_Counter_Stop(&hlptim1); 				// Stop the lptim1 timer used for the Sensor Measurement Window (SMW)
 801c22e:	4804      	ldr	r0, [pc, #16]	@ (801c240 <My_SMW_Timer+0x48>)
 801c230:	f001 f8ee 	bl	801d410 <HAL_LPTIM_Counter_Stop>

#if MY_LPTIM_Monitor
		My_LPTIM1_Monitor(Switch_OPEN);
#endif
	}
}
 801c234:	bf00      	nop
 801c236:	3708      	adds	r7, #8
 801c238:	46bd      	mov	sp, r7
 801c23a:	bd80      	pop	{r7, pc}
 801c23c:	20001bbc 	.word	0x20001bbc
 801c240:	20001b40 	.word	0x20001b40

0801c244 <My_EDS_Timer>:

void My_EDS_Timer(My_Timer_td mode)
{
 801c244:	b580      	push	{r7, lr}
 801c246:	b082      	sub	sp, #8
 801c248:	af00      	add	r7, sp, #0
 801c24a:	4603      	mov	r3, r0
 801c24c:	71fb      	strb	r3, [r7, #7]
	/* This Function Starts and Stops the LPTIM1 timer to measure the time T_EDS that defines the Energy Detection State time Window */

	if (mode == START_TIMER) // Start the Energy Detection State (EDS) Timer
 801c24e:	79fb      	ldrb	r3, [r7, #7]
 801c250:	2b00      	cmp	r3, #0
 801c252:	d104      	bne.n	801c25e <My_EDS_Timer+0x1a>
	{
		HAL_LPTIM_Counter_Start_IT(&hlptim1, T_EDS);
 801c254:	f643 2198 	movw	r1, #15000	@ 0x3a98
 801c258:	4806      	ldr	r0, [pc, #24]	@ (801c274 <My_EDS_Timer+0x30>)
 801c25a:	f001 f8f5 	bl	801d448 <HAL_LPTIM_Counter_Start_IT>
#if MY_LPTIM_Monitor
		My_LPTIM1_Monitor(Switch_CLOSED);
#endif
	}

	if (mode == STOP_TIMER)	// Stop the Energy Detection State (EDS) Timer
 801c25e:	79fb      	ldrb	r3, [r7, #7]
 801c260:	2b01      	cmp	r3, #1
 801c262:	d102      	bne.n	801c26a <My_EDS_Timer+0x26>
	{
		HAL_LPTIM_Counter_Stop_IT(&hlptim1);
 801c264:	4803      	ldr	r0, [pc, #12]	@ (801c274 <My_EDS_Timer+0x30>)
 801c266:	f001 f991 	bl	801d58c <HAL_LPTIM_Counter_Stop_IT>

#if MY_LPTIM_Monitor
		My_LPTIM1_Monitor(Switch_OPEN);
#endif
	}
}
 801c26a:	bf00      	nop
 801c26c:	3708      	adds	r7, #8
 801c26e:	46bd      	mov	sp, r7
 801c270:	bd80      	pop	{r7, pc}
 801c272:	bf00      	nop
 801c274:	20001b40 	.word	0x20001b40

0801c278 <My_EHS_to_EMS_Timer>:

void My_EHS_to_EMS_Timer(My_Timer_td mode)
{
 801c278:	b580      	push	{r7, lr}
 801c27a:	b082      	sub	sp, #8
 801c27c:	af00      	add	r7, sp, #0
 801c27e:	4603      	mov	r3, r0
 801c280:	71fb      	strb	r3, [r7, #7]
	 * This Function Starts and Stops the EHS to EMS Timer
	 * It starts an RCT Alarm B Timer to detect, if the energy to harvest is missing while the System is in Energy Harvesting State (EHS).
	 * If the Energy to Harvest is missing for a time longer than T_EHS_EMS the System switches from the Energy Harvesting State (EHS) into the Energy Missing State (EMS).
	 */

	if (mode == START_TIMER)
 801c282:	79fb      	ldrb	r3, [r7, #7]
 801c284:	2b00      	cmp	r3, #0
 801c286:	d10a      	bne.n	801c29e <My_EHS_to_EMS_Timer+0x26>
	{
		HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_B);	// Deactivate the RTC alarm B
 801c288:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801c28c:	480a      	ldr	r0, [pc, #40]	@ (801c2b8 <My_EHS_to_EMS_Timer+0x40>)
 801c28e:	f7ea fd57 	bl	8006d40 <HAL_RTC_DeactivateAlarm>

		My_Set_RTC_Alarm_B	// Start EHS to EMS Timer
 801c292:	2300      	movs	r3, #0
 801c294:	2200      	movs	r2, #0
 801c296:	2104      	movs	r1, #4
 801c298:	2000      	movs	r0, #0
 801c29a:	f000 fcc5 	bl	801cc28 <My_Set_RTC_Alarm_B>
#if MY_RTCB_Monitor
		My_RTCB_Monitor(Switch_CLOSED);
#endif
	}

	if (mode == STOP_TIMER)	// Stop EHS to EMS Timer
 801c29e:	79fb      	ldrb	r3, [r7, #7]
 801c2a0:	2b01      	cmp	r3, #1
 801c2a2:	d104      	bne.n	801c2ae <My_EHS_to_EMS_Timer+0x36>
	{
		HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_B);	// Deactivate the RTC alarm B
 801c2a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801c2a8:	4803      	ldr	r0, [pc, #12]	@ (801c2b8 <My_EHS_to_EMS_Timer+0x40>)
 801c2aa:	f7ea fd49 	bl	8006d40 <HAL_RTC_DeactivateAlarm>
#if MY_RTCB_Monitor
		My_RTCB_Monitor(Switch_OPEN);
#endif
	}

}
 801c2ae:	bf00      	nop
 801c2b0:	3708      	adds	r7, #8
 801c2b2:	46bd      	mov	sp, r7
 801c2b4:	bd80      	pop	{r7, pc}
 801c2b6:	bf00      	nop
 801c2b8:	20000750 	.word	0x20000750

0801c2bc <My_DCM_to_CCM_Timer>:

void My_DCM_to_CCM_Timer(My_Timer_td mode)
{
 801c2bc:	b580      	push	{r7, lr}
 801c2be:	b082      	sub	sp, #8
 801c2c0:	af00      	add	r7, sp, #0
 801c2c2:	4603      	mov	r3, r0
 801c2c4:	71fb      	strb	r3, [r7, #7]
	/*
	 * This Function Starts and Stops the RCT Alarm B Timer to detect, while in Energy Storage State (EHS), to measure the time T_DCM_CCM.
	 * The time T_DC_CCM, defines when to switch from Discontinuous Charge Mode (DCM) to Continuous Charge Mode (CCM).
	 */

	if (mode == START_TIMER)
 801c2c6:	79fb      	ldrb	r3, [r7, #7]
 801c2c8:	2b00      	cmp	r3, #0
 801c2ca:	d10a      	bne.n	801c2e2 <My_DCM_to_CCM_Timer+0x26>
	{
		HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_B);	// Deactivate the RTC alarm B
 801c2cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801c2d0:	480a      	ldr	r0, [pc, #40]	@ (801c2fc <My_DCM_to_CCM_Timer+0x40>)
 801c2d2:	f7ea fd35 	bl	8006d40 <HAL_RTC_DeactivateAlarm>

		My_Set_RTC_Alarm_B
 801c2d6:	2300      	movs	r3, #0
 801c2d8:	2207      	movs	r2, #7
 801c2da:	2100      	movs	r1, #0
 801c2dc:	2000      	movs	r0, #0
 801c2de:	f000 fca3 	bl	801cc28 <My_Set_RTC_Alarm_B>
#if MY_RTCB_Monitor
		My_RTCB_Monitor(Switch_CLOSED);
#endif
	}

	if (mode == STOP_TIMER)	// Stop EHS to EMS Timer
 801c2e2:	79fb      	ldrb	r3, [r7, #7]
 801c2e4:	2b01      	cmp	r3, #1
 801c2e6:	d104      	bne.n	801c2f2 <My_DCM_to_CCM_Timer+0x36>
	{
		HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_B);	// Deactivate the RTC alarm B
 801c2e8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801c2ec:	4803      	ldr	r0, [pc, #12]	@ (801c2fc <My_DCM_to_CCM_Timer+0x40>)
 801c2ee:	f7ea fd27 	bl	8006d40 <HAL_RTC_DeactivateAlarm>

#if MY_RTCB_Monitor
		My_RTCB_Monitor(Switch_OPEN);
#endif
	}
}
 801c2f2:	bf00      	nop
 801c2f4:	3708      	adds	r7, #8
 801c2f6:	46bd      	mov	sp, r7
 801c2f8:	bd80      	pop	{r7, pc}
 801c2fa:	bf00      	nop
 801c2fc:	20000750 	.word	0x20000750

0801c300 <My_EMS_to_EDS_Timer>:

void My_EMS_to_EDS_Timer(My_Timer_td mode)
{
 801c300:	b580      	push	{r7, lr}
 801c302:	b082      	sub	sp, #8
 801c304:	af00      	add	r7, sp, #0
 801c306:	4603      	mov	r3, r0
 801c308:	71fb      	strb	r3, [r7, #7]
	/*
	 * This Function Starts the RCT Alarm B Timer to detect, while in Energy Missing State (EMS), to measure the time T_EMS_EDS.
	 * The time T_EMS_EDS, defines When to switch from Energy Missing State (EMS) to Energy Detection State (EDS), to perform an Energy presence check.
	 */

	if (mode == START_TIMER)
 801c30a:	79fb      	ldrb	r3, [r7, #7]
 801c30c:	2b00      	cmp	r3, #0
 801c30e:	d10a      	bne.n	801c326 <My_EMS_to_EDS_Timer+0x26>
	{
		HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_B);	// Deactivate the RTC alarm B
 801c310:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801c314:	480a      	ldr	r0, [pc, #40]	@ (801c340 <My_EMS_to_EDS_Timer+0x40>)
 801c316:	f7ea fd13 	bl	8006d40 <HAL_RTC_DeactivateAlarm>

		My_Set_RTC_Alarm_B
 801c31a:	2300      	movs	r3, #0
 801c31c:	2200      	movs	r2, #0
 801c31e:	2102      	movs	r1, #2
 801c320:	2000      	movs	r0, #0
 801c322:	f000 fc81 	bl	801cc28 <My_Set_RTC_Alarm_B>
#if MY_RTCB_Monitor
		My_RTCB_Monitor(Switch_CLOSED);
#endif
	}

	if (mode == STOP_TIMER)	// Stop EHS to EMS Timer
 801c326:	79fb      	ldrb	r3, [r7, #7]
 801c328:	2b01      	cmp	r3, #1
 801c32a:	d104      	bne.n	801c336 <My_EMS_to_EDS_Timer+0x36>
	{
		HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_B);	// Deactivate the RTC alarm B
 801c32c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801c330:	4803      	ldr	r0, [pc, #12]	@ (801c340 <My_EMS_to_EDS_Timer+0x40>)
 801c332:	f7ea fd05 	bl	8006d40 <HAL_RTC_DeactivateAlarm>
#if MY_RTCB_Monitor
		My_RTCB_Monitor(Switch_OPEN);
#endif
	}
}
 801c336:	bf00      	nop
 801c338:	3708      	adds	r7, #8
 801c33a:	46bd      	mov	sp, r7
 801c33c:	bd80      	pop	{r7, pc}
 801c33e:	bf00      	nop
 801c340:	20000750 	.word	0x20000750

0801c344 <My_EMS_to_SMS_Timer>:

void My_EMS_to_SMS_Timer(My_Timer_td mode)
{
 801c344:	b580      	push	{r7, lr}
 801c346:	b082      	sub	sp, #8
 801c348:	af00      	add	r7, sp, #0
 801c34a:	4603      	mov	r3, r0
 801c34c:	71fb      	strb	r3, [r7, #7]
	/*
	 * This Function Starts the RTC Alarm A Timer to periodically switch into the Sensor Measurement State (SMS)
	 * while the system is in the Energy Missing State (EMS)
	 * */

	if (mode == START_TIMER)
 801c34e:	79fb      	ldrb	r3, [r7, #7]
 801c350:	2b00      	cmp	r3, #0
 801c352:	d10a      	bne.n	801c36a <My_EMS_to_SMS_Timer+0x26>
	{
		HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);	// Deactivate the RTC alarm A
 801c354:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801c358:	480a      	ldr	r0, [pc, #40]	@ (801c384 <My_EMS_to_SMS_Timer+0x40>)
 801c35a:	f7ea fcf1 	bl	8006d40 <HAL_RTC_DeactivateAlarm>
		My_Set_RTC_Alarm_A
 801c35e:	2300      	movs	r3, #0
 801c360:	221e      	movs	r2, #30
 801c362:	2100      	movs	r1, #0
 801c364:	2000      	movs	r0, #0
 801c366:	f000 fc0f 	bl	801cb88 <My_Set_RTC_Alarm_A>
#if MY_RTCA_Monitor
		My_RTCA_Monitor(Switch_CLOSED);
#endif
	}

	if (mode == STOP_TIMER)	// Stop EHS to SMS Timer
 801c36a:	79fb      	ldrb	r3, [r7, #7]
 801c36c:	2b01      	cmp	r3, #1
 801c36e:	d104      	bne.n	801c37a <My_EMS_to_SMS_Timer+0x36>
	{
		HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);	// Deactivate the RTC alarm A
 801c370:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801c374:	4803      	ldr	r0, [pc, #12]	@ (801c384 <My_EMS_to_SMS_Timer+0x40>)
 801c376:	f7ea fce3 	bl	8006d40 <HAL_RTC_DeactivateAlarm>
#if MY_RTCA_Monitor
		My_RTCA_Monitor(Switch_OPEN);
#endif
	}
}
 801c37a:	bf00      	nop
 801c37c:	3708      	adds	r7, #8
 801c37e:	46bd      	mov	sp, r7
 801c380:	bd80      	pop	{r7, pc}
 801c382:	bf00      	nop
 801c384:	20000750 	.word	0x20000750

0801c388 <My_MX_I2C1_Init>:


/* Sensor Section Begin */

HAL_StatusTypeDef My_MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 801c388:	b580      	push	{r7, lr}
 801c38a:	b084      	sub	sp, #16
 801c38c:	af00      	add	r7, sp, #0
 801c38e:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret = HAL_OK;
 801c390:	2300      	movs	r3, #0
 801c392:	73fb      	strb	r3, [r7, #15]

	hi2c->Instance = I2C1;
 801c394:	687b      	ldr	r3, [r7, #4]
 801c396:	4a1c      	ldr	r2, [pc, #112]	@ (801c408 <My_MX_I2C1_Init+0x80>)
 801c398:	601a      	str	r2, [r3, #0]
	hi2c->Init.Timing = I2C_CLOCK_SPEED;
 801c39a:	687b      	ldr	r3, [r7, #4]
 801c39c:	4a1b      	ldr	r2, [pc, #108]	@ (801c40c <My_MX_I2C1_Init+0x84>)
 801c39e:	605a      	str	r2, [r3, #4]
	hi2c->Init.OwnAddress1 = 0;
 801c3a0:	687b      	ldr	r3, [r7, #4]
 801c3a2:	2200      	movs	r2, #0
 801c3a4:	609a      	str	r2, [r3, #8]
	hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801c3a6:	687b      	ldr	r3, [r7, #4]
 801c3a8:	2201      	movs	r2, #1
 801c3aa:	60da      	str	r2, [r3, #12]
	hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 801c3ac:	687b      	ldr	r3, [r7, #4]
 801c3ae:	2200      	movs	r2, #0
 801c3b0:	611a      	str	r2, [r3, #16]
	hi2c->Init.OwnAddress2 = 0;
 801c3b2:	687b      	ldr	r3, [r7, #4]
 801c3b4:	2200      	movs	r2, #0
 801c3b6:	615a      	str	r2, [r3, #20]
	hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 801c3b8:	687b      	ldr	r3, [r7, #4]
 801c3ba:	2200      	movs	r2, #0
 801c3bc:	619a      	str	r2, [r3, #24]
	hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801c3be:	687b      	ldr	r3, [r7, #4]
 801c3c0:	2200      	movs	r2, #0
 801c3c2:	61da      	str	r2, [r3, #28]
	hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801c3c4:	687b      	ldr	r3, [r7, #4]
 801c3c6:	2200      	movs	r2, #0
 801c3c8:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(hi2c) != HAL_OK)
 801c3ca:	6878      	ldr	r0, [r7, #4]
 801c3cc:	f7e7 febe 	bl	800414c <HAL_I2C_Init>
 801c3d0:	4603      	mov	r3, r0
 801c3d2:	2b00      	cmp	r3, #0
 801c3d4:	d001      	beq.n	801c3da <My_MX_I2C1_Init+0x52>
	{
		ret = HAL_ERROR;
 801c3d6:	2301      	movs	r3, #1
 801c3d8:	73fb      	strb	r3, [r7, #15]
	}

	if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 801c3da:	2100      	movs	r1, #0
 801c3dc:	6878      	ldr	r0, [r7, #4]
 801c3de:	f7e8 fba1 	bl	8004b24 <HAL_I2CEx_ConfigAnalogFilter>
 801c3e2:	4603      	mov	r3, r0
 801c3e4:	2b00      	cmp	r3, #0
 801c3e6:	d001      	beq.n	801c3ec <My_MX_I2C1_Init+0x64>
	{
		ret = HAL_ERROR;
 801c3e8:	2301      	movs	r3, #1
 801c3ea:	73fb      	strb	r3, [r7, #15]
	}

	if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 801c3ec:	2100      	movs	r1, #0
 801c3ee:	6878      	ldr	r0, [r7, #4]
 801c3f0:	f7e8 fbe2 	bl	8004bb8 <HAL_I2CEx_ConfigDigitalFilter>
 801c3f4:	4603      	mov	r3, r0
 801c3f6:	2b00      	cmp	r3, #0
 801c3f8:	d001      	beq.n	801c3fe <My_MX_I2C1_Init+0x76>
	{
		ret = HAL_ERROR;
 801c3fa:	2301      	movs	r3, #1
 801c3fc:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 801c3fe:	7bfb      	ldrb	r3, [r7, #15]
}
 801c400:	4618      	mov	r0, r3
 801c402:	3710      	adds	r7, #16
 801c404:	46bd      	mov	sp, r7
 801c406:	bd80      	pop	{r7, pc}
 801c408:	40005400 	.word	0x40005400
 801c40c:	9010deff 	.word	0x9010deff

0801c410 <My_I2C1_MspInit>:

void My_I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 801c410:	b580      	push	{r7, lr}
 801c412:	b096      	sub	sp, #88	@ 0x58
 801c414:	af00      	add	r7, sp, #0
 801c416:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801c418:	f107 030c 	add.w	r3, r7, #12
 801c41c:	2238      	movs	r2, #56	@ 0x38
 801c41e:	2100      	movs	r1, #0
 801c420:	4618      	mov	r0, r3
 801c422:	f003 fc2d 	bl	801fc80 <memset>

	/* USER CODE END I2C1_MspInit 0 */

	/** Initializes the peripherals clocks
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 801c426:	2340      	movs	r3, #64	@ 0x40
 801c428:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 801c42a:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 801c42e:	623b      	str	r3, [r7, #32]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 801c430:	f107 030c 	add.w	r3, r7, #12
 801c434:	4618      	mov	r0, r3
 801c436:	f7ea f857 	bl	80064e8 <HAL_RCCEx_PeriphCLKConfig>

	__HAL_RCC_GPIOB_CLK_ENABLE();
 801c43a:	2002      	movs	r0, #2
 801c43c:	f7ff f958 	bl	801b6f0 <LL_AHB2_GRP1_EnableClock>
	/**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 801c440:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 801c444:	647b      	str	r3, [r7, #68]	@ 0x44

	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801c446:	2312      	movs	r3, #18
 801c448:	64bb      	str	r3, [r7, #72]	@ 0x48
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 801c44a:	2301      	movs	r3, #1
 801c44c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801c44e:	2303      	movs	r3, #3
 801c450:	653b      	str	r3, [r7, #80]	@ 0x50
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 801c452:	2304      	movs	r3, #4
 801c454:	657b      	str	r3, [r7, #84]	@ 0x54
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801c456:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801c45a:	4619      	mov	r1, r3
 801c45c:	4805      	ldr	r0, [pc, #20]	@ (801c474 <My_I2C1_MspInit+0x64>)
 801c45e:	f7e7 fc0d 	bl	8003c7c <HAL_GPIO_Init>

	/* Peripheral clock enable */
	__HAL_RCC_I2C1_CLK_ENABLE();
 801c462:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 801c466:	f7ff f96d 	bl	801b744 <LL_APB1_GRP1_EnableClock>
	/* USER CODE BEGIN I2C1_MspInit 1 */

	/* USER CODE END I2C1_MspInit 1 */
}
 801c46a:	bf00      	nop
 801c46c:	3758      	adds	r7, #88	@ 0x58
 801c46e:	46bd      	mov	sp, r7
 801c470:	bd80      	pop	{r7, pc}
 801c472:	bf00      	nop
 801c474:	48000400 	.word	0x48000400

0801c478 <My_I2C1_MspDeInit>:

void My_I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 801c478:	b580      	push	{r7, lr}
 801c47a:	b082      	sub	sp, #8
 801c47c:	af00      	add	r7, sp, #0
 801c47e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN I2C1_MspDeInit 0 */

	/* USER CODE END I2C1_MspDeInit 0 */
	/* Peripheral clock disable */
	__HAL_RCC_I2C1_CLK_DISABLE();
 801c480:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 801c484:	f7ff f976 	bl	801b774 <LL_APB1_GRP1_DisableClock>

	/**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
	 */
	HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 801c488:	2180      	movs	r1, #128	@ 0x80
 801c48a:	4806      	ldr	r0, [pc, #24]	@ (801c4a4 <My_I2C1_MspDeInit+0x2c>)
 801c48c:	f7e7 fd56 	bl	8003f3c <HAL_GPIO_DeInit>

	HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 801c490:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801c494:	4803      	ldr	r0, [pc, #12]	@ (801c4a4 <My_I2C1_MspDeInit+0x2c>)
 801c496:	f7e7 fd51 	bl	8003f3c <HAL_GPIO_DeInit>

	/* USER CODE BEGIN I2C1_MspDeInit 1 */

	/* USER CODE END I2C1_MspDeInit 1 */
}
 801c49a:	bf00      	nop
 801c49c:	3708      	adds	r7, #8
 801c49e:	46bd      	mov	sp, r7
 801c4a0:	bd80      	pop	{r7, pc}
 801c4a2:	bf00      	nop
 801c4a4:	48000400 	.word	0x48000400

0801c4a8 <My_MX_I2C2_Init>:


HAL_StatusTypeDef My_MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 801c4a8:	b580      	push	{r7, lr}
 801c4aa:	b084      	sub	sp, #16
 801c4ac:	af00      	add	r7, sp, #0
 801c4ae:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret = HAL_OK;
 801c4b0:	2300      	movs	r3, #0
 801c4b2:	73fb      	strb	r3, [r7, #15]

	hi2c->Instance = I2C2;
 801c4b4:	687b      	ldr	r3, [r7, #4]
 801c4b6:	4a1c      	ldr	r2, [pc, #112]	@ (801c528 <My_MX_I2C2_Init+0x80>)
 801c4b8:	601a      	str	r2, [r3, #0]
	hi2c->Init.Timing = I2C_CLOCK_SPEED;
 801c4ba:	687b      	ldr	r3, [r7, #4]
 801c4bc:	4a1b      	ldr	r2, [pc, #108]	@ (801c52c <My_MX_I2C2_Init+0x84>)
 801c4be:	605a      	str	r2, [r3, #4]
	hi2c->Init.OwnAddress1 = 0;
 801c4c0:	687b      	ldr	r3, [r7, #4]
 801c4c2:	2200      	movs	r2, #0
 801c4c4:	609a      	str	r2, [r3, #8]
	hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801c4c6:	687b      	ldr	r3, [r7, #4]
 801c4c8:	2201      	movs	r2, #1
 801c4ca:	60da      	str	r2, [r3, #12]
	hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 801c4cc:	687b      	ldr	r3, [r7, #4]
 801c4ce:	2200      	movs	r2, #0
 801c4d0:	611a      	str	r2, [r3, #16]
	hi2c->Init.OwnAddress2 = 0;
 801c4d2:	687b      	ldr	r3, [r7, #4]
 801c4d4:	2200      	movs	r2, #0
 801c4d6:	615a      	str	r2, [r3, #20]
	hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 801c4d8:	687b      	ldr	r3, [r7, #4]
 801c4da:	2200      	movs	r2, #0
 801c4dc:	619a      	str	r2, [r3, #24]
	hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801c4de:	687b      	ldr	r3, [r7, #4]
 801c4e0:	2200      	movs	r2, #0
 801c4e2:	61da      	str	r2, [r3, #28]
	hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801c4e4:	687b      	ldr	r3, [r7, #4]
 801c4e6:	2200      	movs	r2, #0
 801c4e8:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(hi2c) != HAL_OK)
 801c4ea:	6878      	ldr	r0, [r7, #4]
 801c4ec:	f7e7 fe2e 	bl	800414c <HAL_I2C_Init>
 801c4f0:	4603      	mov	r3, r0
 801c4f2:	2b00      	cmp	r3, #0
 801c4f4:	d001      	beq.n	801c4fa <My_MX_I2C2_Init+0x52>
	{
		ret = HAL_ERROR;
 801c4f6:	2301      	movs	r3, #1
 801c4f8:	73fb      	strb	r3, [r7, #15]
	}

	if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 801c4fa:	2100      	movs	r1, #0
 801c4fc:	6878      	ldr	r0, [r7, #4]
 801c4fe:	f7e8 fb11 	bl	8004b24 <HAL_I2CEx_ConfigAnalogFilter>
 801c502:	4603      	mov	r3, r0
 801c504:	2b00      	cmp	r3, #0
 801c506:	d001      	beq.n	801c50c <My_MX_I2C2_Init+0x64>
	{
		ret = HAL_ERROR;
 801c508:	2301      	movs	r3, #1
 801c50a:	73fb      	strb	r3, [r7, #15]
	}

	if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 801c50c:	2100      	movs	r1, #0
 801c50e:	6878      	ldr	r0, [r7, #4]
 801c510:	f7e8 fb52 	bl	8004bb8 <HAL_I2CEx_ConfigDigitalFilter>
 801c514:	4603      	mov	r3, r0
 801c516:	2b00      	cmp	r3, #0
 801c518:	d001      	beq.n	801c51e <My_MX_I2C2_Init+0x76>
	{
		ret = HAL_ERROR;
 801c51a:	2301      	movs	r3, #1
 801c51c:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 801c51e:	7bfb      	ldrb	r3, [r7, #15]
}
 801c520:	4618      	mov	r0, r3
 801c522:	3710      	adds	r7, #16
 801c524:	46bd      	mov	sp, r7
 801c526:	bd80      	pop	{r7, pc}
 801c528:	40005800 	.word	0x40005800
 801c52c:	9010deff 	.word	0x9010deff

0801c530 <My_I2C2_MspInit>:

void My_I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 801c530:	b580      	push	{r7, lr}
 801c532:	b096      	sub	sp, #88	@ 0x58
 801c534:	af00      	add	r7, sp, #0
 801c536:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801c538:	f107 030c 	add.w	r3, r7, #12
 801c53c:	2238      	movs	r2, #56	@ 0x38
 801c53e:	2100      	movs	r1, #0
 801c540:	4618      	mov	r0, r3
 801c542:	f003 fb9d 	bl	801fc80 <memset>

	/* USER CODE END I2C2_MspInit 0 */

	/** Initializes the peripherals clocks
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 801c546:	2380      	movs	r3, #128	@ 0x80
 801c548:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 801c54a:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 801c54e:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 801c550:	f107 030c 	add.w	r3, r7, #12
 801c554:	4618      	mov	r0, r3
 801c556:	f7e9 ffc7 	bl	80064e8 <HAL_RCCEx_PeriphCLKConfig>

	__HAL_RCC_GPIOA_CLK_ENABLE();
 801c55a:	2001      	movs	r0, #1
 801c55c:	f7ff f8c8 	bl	801b6f0 <LL_AHB2_GRP1_EnableClock>
	/**I2C2 GPIO Configuration
    PA12     ------> I2C2_SCL
    PA15     ------> I2C2_SDA
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15;
 801c560:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 801c564:	647b      	str	r3, [r7, #68]	@ 0x44
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801c566:	2312      	movs	r3, #18
 801c568:	64bb      	str	r3, [r7, #72]	@ 0x48
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 801c56a:	2301      	movs	r3, #1
 801c56c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801c56e:	2303      	movs	r3, #3
 801c570:	653b      	str	r3, [r7, #80]	@ 0x50
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 801c572:	2304      	movs	r3, #4
 801c574:	657b      	str	r3, [r7, #84]	@ 0x54
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801c576:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801c57a:	4619      	mov	r1, r3
 801c57c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801c580:	f7e7 fb7c 	bl	8003c7c <HAL_GPIO_Init>

	/* Peripheral clock enable */
	__HAL_RCC_I2C2_CLK_ENABLE();
 801c584:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 801c588:	f7ff f8dc 	bl	801b744 <LL_APB1_GRP1_EnableClock>
	/* USER CODE BEGIN I2C2_MspInit 1 */

	/* USER CODE END I2C2_MspInit 1 */
}
 801c58c:	bf00      	nop
 801c58e:	3758      	adds	r7, #88	@ 0x58
 801c590:	46bd      	mov	sp, r7
 801c592:	bd80      	pop	{r7, pc}

0801c594 <My_I2C2_MspDeInit>:

void My_I2C2_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 801c594:	b580      	push	{r7, lr}
 801c596:	b082      	sub	sp, #8
 801c598:	af00      	add	r7, sp, #0
 801c59a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN I2C2_MspDeInit 0 */

	/* USER CODE END I2C2_MspDeInit 0 */
	/* Peripheral clock disable */
	__HAL_RCC_I2C2_CLK_DISABLE();
 801c59c:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 801c5a0:	f7ff f8e8 	bl	801b774 <LL_APB1_GRP1_DisableClock>

	/**I2C2 GPIO Configuration
    PA12     ------> I2C2_SCL
    PA15     ------> I2C2_SDA
	 */
	HAL_GPIO_DeInit(GPIOA, GPIO_PIN_12);
 801c5a4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 801c5a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801c5ac:	f7e7 fcc6 	bl	8003f3c <HAL_GPIO_DeInit>

	HAL_GPIO_DeInit(GPIOA, GPIO_PIN_15);
 801c5b0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 801c5b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801c5b8:	f7e7 fcc0 	bl	8003f3c <HAL_GPIO_DeInit>

	/* USER CODE BEGIN I2C2_MspDeInit 1 */

	/* USER CODE END I2C2_MspDeInit 1 */
}
 801c5bc:	bf00      	nop
 801c5be:	3708      	adds	r7, #8
 801c5c0:	46bd      	mov	sp, r7
 801c5c2:	bd80      	pop	{r7, pc}

0801c5c4 <My_I2C_Init>:


void My_I2C_Init(My_I2C_td mode)
{
 801c5c4:	b580      	push	{r7, lr}
 801c5c6:	b082      	sub	sp, #8
 801c5c8:	af00      	add	r7, sp, #0
 801c5ca:	4603      	mov	r3, r0
 801c5cc:	71fb      	strb	r3, [r7, #7]
	switch (mode)
 801c5ce:	79fb      	ldrb	r3, [r7, #7]
 801c5d0:	2b00      	cmp	r3, #0
 801c5d2:	d002      	beq.n	801c5da <My_I2C_Init+0x16>
 801c5d4:	2b01      	cmp	r3, #1
 801c5d6:	d007      	beq.n	801c5e8 <My_I2C_Init+0x24>
		break;
	}

	default:
	{
		break;
 801c5d8:	e00d      	b.n	801c5f6 <My_I2C_Init+0x32>
		My_I2C1_MspInit(&hi2c1);
 801c5da:	4809      	ldr	r0, [pc, #36]	@ (801c600 <My_I2C_Init+0x3c>)
 801c5dc:	f7ff ff18 	bl	801c410 <My_I2C1_MspInit>
		My_MX_I2C1_Init(&hi2c1);
 801c5e0:	4807      	ldr	r0, [pc, #28]	@ (801c600 <My_I2C_Init+0x3c>)
 801c5e2:	f7ff fed1 	bl	801c388 <My_MX_I2C1_Init>
		break;
 801c5e6:	e006      	b.n	801c5f6 <My_I2C_Init+0x32>
		My_I2C2_MspInit(&hi2c2);
 801c5e8:	4806      	ldr	r0, [pc, #24]	@ (801c604 <My_I2C_Init+0x40>)
 801c5ea:	f7ff ffa1 	bl	801c530 <My_I2C2_MspInit>
		My_MX_I2C2_Init(&hi2c2);
 801c5ee:	4805      	ldr	r0, [pc, #20]	@ (801c604 <My_I2C_Init+0x40>)
 801c5f0:	f7ff ff5a 	bl	801c4a8 <My_MX_I2C2_Init>
		break;
 801c5f4:	bf00      	nop
	}
	}
}
 801c5f6:	bf00      	nop
 801c5f8:	3708      	adds	r7, #8
 801c5fa:	46bd      	mov	sp, r7
 801c5fc:	bd80      	pop	{r7, pc}
 801c5fe:	bf00      	nop
 801c600:	20001c3c 	.word	0x20001c3c
 801c604:	20001c90 	.word	0x20001c90

0801c608 <My_I2C_Deinit>:

void My_I2C_Deinit(My_I2C_td mode)
{
 801c608:	b580      	push	{r7, lr}
 801c60a:	b082      	sub	sp, #8
 801c60c:	af00      	add	r7, sp, #0
 801c60e:	4603      	mov	r3, r0
 801c610:	71fb      	strb	r3, [r7, #7]
	switch (mode)
 801c612:	79fb      	ldrb	r3, [r7, #7]
 801c614:	2b00      	cmp	r3, #0
 801c616:	d002      	beq.n	801c61e <My_I2C_Deinit+0x16>
 801c618:	2b01      	cmp	r3, #1
 801c61a:	d004      	beq.n	801c626 <My_I2C_Deinit+0x1e>
		break;
	}

	default:
	{
		break;
 801c61c:	e007      	b.n	801c62e <My_I2C_Deinit+0x26>
		My_I2C1_MspDeInit(&hi2c1);
 801c61e:	4806      	ldr	r0, [pc, #24]	@ (801c638 <My_I2C_Deinit+0x30>)
 801c620:	f7ff ff2a 	bl	801c478 <My_I2C1_MspDeInit>
		break;
 801c624:	e003      	b.n	801c62e <My_I2C_Deinit+0x26>
		My_I2C2_MspDeInit(&hi2c2);
 801c626:	4805      	ldr	r0, [pc, #20]	@ (801c63c <My_I2C_Deinit+0x34>)
 801c628:	f7ff ffb4 	bl	801c594 <My_I2C2_MspDeInit>
		break;
 801c62c:	bf00      	nop
	}
	}
}
 801c62e:	bf00      	nop
 801c630:	3708      	adds	r7, #8
 801c632:	46bd      	mov	sp, r7
 801c634:	bd80      	pop	{r7, pc}
 801c636:	bf00      	nop
 801c638:	20001c3c 	.word	0x20001c3c
 801c63c:	20001c90 	.word	0x20001c90

0801c640 <My_SHT40_Get_Data>:

#if MY_SHT40

void My_SHT40_Get_Data(void)
{
 801c640:	b580      	push	{r7, lr}
 801c642:	b086      	sub	sp, #24
 801c644:	af02      	add	r7, sp, #8
	my_SHT40_Temp = 0;																								// Reset my_SHT40_Temp
 801c646:	4b4d      	ldr	r3, [pc, #308]	@ (801c77c <My_SHT40_Get_Data+0x13c>)
 801c648:	2200      	movs	r2, #0
 801c64a:	601a      	str	r2, [r3, #0]
	my_SHT40_Humid = 0;																								// Reset my_SHT40_Humid
 801c64c:	4b4c      	ldr	r3, [pc, #304]	@ (801c780 <My_SHT40_Get_Data+0x140>)
 801c64e:	2200      	movs	r2, #0
 801c650:	601a      	str	r2, [r3, #0]

	uint8_t SHT40_Raw_Data[6];																						// Define raw data vector
	memset(SHT40_Raw_Data, 0, sizeof(SHT40_Raw_Data));																// Initialize raw data vector
 801c652:	1d3b      	adds	r3, r7, #4
 801c654:	2206      	movs	r2, #6
 801c656:	2100      	movs	r1, #0
 801c658:	4618      	mov	r0, r3
 801c65a:	f003 fb11 	bl	801fc80 <memset>

	uint8_t SHT40_Measure_Cmd = SHT40_MEASURE_CMD_HP;																// Initialize SHT40 Address
 801c65e:	23fd      	movs	r3, #253	@ 0xfd
 801c660:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Master_Transmit(&hi2c2, SHT40AD1B_I2C_ADDRESS, &SHT40_Measure_Cmd, 1, HAL_MAX_DELAY); 					// Transmit Data through I2C2
 801c662:	1cfa      	adds	r2, r7, #3
 801c664:	f04f 33ff 	mov.w	r3, #4294967295
 801c668:	9300      	str	r3, [sp, #0]
 801c66a:	2301      	movs	r3, #1
 801c66c:	2189      	movs	r1, #137	@ 0x89
 801c66e:	4845      	ldr	r0, [pc, #276]	@ (801c784 <My_SHT40_Get_Data+0x144>)
 801c670:	f7e7 fe04 	bl	800427c <HAL_I2C_Master_Transmit>

	My_HAL_Delay(25);																								// Add delay to ensure the sensor is ready to provide data
 801c674:	2019      	movs	r0, #25
 801c676:	f000 fcc9 	bl	801d00c <My_HAL_Delay>

	HAL_I2C_Master_Receive(&hi2c2, SHT40AD1B_I2C_ADDRESS, SHT40_Raw_Data, sizeof(SHT40_Raw_Data), HAL_MAX_DELAY);	// Receive Data through I2C2
 801c67a:	1d3a      	adds	r2, r7, #4
 801c67c:	f04f 33ff 	mov.w	r3, #4294967295
 801c680:	9300      	str	r3, [sp, #0]
 801c682:	2306      	movs	r3, #6
 801c684:	2189      	movs	r1, #137	@ 0x89
 801c686:	483f      	ldr	r0, [pc, #252]	@ (801c784 <My_SHT40_Get_Data+0x144>)
 801c688:	f7e7 feec 	bl	8004464 <HAL_I2C_Master_Receive>

	uint16_t SHT40_Raw_Temp = (SHT40_Raw_Data[0] << 8) | SHT40_Raw_Data[1];											// Temperature Data From SHT40
 801c68c:	793b      	ldrb	r3, [r7, #4]
 801c68e:	b21b      	sxth	r3, r3
 801c690:	021b      	lsls	r3, r3, #8
 801c692:	b21a      	sxth	r2, r3
 801c694:	797b      	ldrb	r3, [r7, #5]
 801c696:	b21b      	sxth	r3, r3
 801c698:	4313      	orrs	r3, r2
 801c69a:	b21b      	sxth	r3, r3
 801c69c:	81fb      	strh	r3, [r7, #14]
	uint16_t SHT40_Raw_Humid = (SHT40_Raw_Data[3] << 8) | SHT40_Raw_Data[4];										// Relative Humidity (RH) From SHT40
 801c69e:	79fb      	ldrb	r3, [r7, #7]
 801c6a0:	b21b      	sxth	r3, r3
 801c6a2:	021b      	lsls	r3, r3, #8
 801c6a4:	b21a      	sxth	r2, r3
 801c6a6:	7a3b      	ldrb	r3, [r7, #8]
 801c6a8:	b21b      	sxth	r3, r3
 801c6aa:	4313      	orrs	r3, r2
 801c6ac:	b21b      	sxth	r3, r3
 801c6ae:	81bb      	strh	r3, [r7, #12]

//	float my_SHT40_Temp_Float = -45 + 175 * ((float)SHT40_Raw_Temp / 65535);										// Temperature in Celsius
//	float my_SHT40_Humid_Float = -6 + 125 * ((float)SHT40_Raw_Humid / 65535);										// Humidity in %
	my_SHT40_Temp_Float = -45 + 175 * ((float)SHT40_Raw_Temp / 65535);										// Temperature in Celsius
 801c6b0:	89fb      	ldrh	r3, [r7, #14]
 801c6b2:	4618      	mov	r0, r3
 801c6b4:	f7e4 f8de 	bl	8000874 <__aeabi_ui2f>
 801c6b8:	4603      	mov	r3, r0
 801c6ba:	4933      	ldr	r1, [pc, #204]	@ (801c788 <My_SHT40_Get_Data+0x148>)
 801c6bc:	4618      	mov	r0, r3
 801c6be:	f7e4 f9e5 	bl	8000a8c <__aeabi_fdiv>
 801c6c2:	4603      	mov	r3, r0
 801c6c4:	4931      	ldr	r1, [pc, #196]	@ (801c78c <My_SHT40_Get_Data+0x14c>)
 801c6c6:	4618      	mov	r0, r3
 801c6c8:	f7e4 f92c 	bl	8000924 <__aeabi_fmul>
 801c6cc:	4603      	mov	r3, r0
 801c6ce:	4930      	ldr	r1, [pc, #192]	@ (801c790 <My_SHT40_Get_Data+0x150>)
 801c6d0:	4618      	mov	r0, r3
 801c6d2:	f7e4 f81d 	bl	8000710 <__aeabi_fsub>
 801c6d6:	4603      	mov	r3, r0
 801c6d8:	461a      	mov	r2, r3
 801c6da:	4b2e      	ldr	r3, [pc, #184]	@ (801c794 <My_SHT40_Get_Data+0x154>)
 801c6dc:	601a      	str	r2, [r3, #0]
	my_SHT40_Humid_Float = -6 + 125 * ((float)SHT40_Raw_Humid / 65535);										// Humidity in %
 801c6de:	89bb      	ldrh	r3, [r7, #12]
 801c6e0:	4618      	mov	r0, r3
 801c6e2:	f7e4 f8c7 	bl	8000874 <__aeabi_ui2f>
 801c6e6:	4603      	mov	r3, r0
 801c6e8:	4927      	ldr	r1, [pc, #156]	@ (801c788 <My_SHT40_Get_Data+0x148>)
 801c6ea:	4618      	mov	r0, r3
 801c6ec:	f7e4 f9ce 	bl	8000a8c <__aeabi_fdiv>
 801c6f0:	4603      	mov	r3, r0
 801c6f2:	4929      	ldr	r1, [pc, #164]	@ (801c798 <My_SHT40_Get_Data+0x158>)
 801c6f4:	4618      	mov	r0, r3
 801c6f6:	f7e4 f915 	bl	8000924 <__aeabi_fmul>
 801c6fa:	4603      	mov	r3, r0
 801c6fc:	4927      	ldr	r1, [pc, #156]	@ (801c79c <My_SHT40_Get_Data+0x15c>)
 801c6fe:	4618      	mov	r0, r3
 801c700:	f7e4 f806 	bl	8000710 <__aeabi_fsub>
 801c704:	4603      	mov	r3, r0
 801c706:	461a      	mov	r2, r3
 801c708:	4b25      	ldr	r3, [pc, #148]	@ (801c7a0 <My_SHT40_Get_Data+0x160>)
 801c70a:	601a      	str	r2, [r3, #0]

	if (my_SHT40_Humid_Float > 100.0f)																				// Clamp Humidity values to valid range (0-100%)
 801c70c:	4b24      	ldr	r3, [pc, #144]	@ (801c7a0 <My_SHT40_Get_Data+0x160>)
 801c70e:	681b      	ldr	r3, [r3, #0]
 801c710:	4924      	ldr	r1, [pc, #144]	@ (801c7a4 <My_SHT40_Get_Data+0x164>)
 801c712:	4618      	mov	r0, r3
 801c714:	f7e4 fac2 	bl	8000c9c <__aeabi_fcmpgt>
 801c718:	4603      	mov	r3, r0
 801c71a:	2b00      	cmp	r3, #0
 801c71c:	d002      	beq.n	801c724 <My_SHT40_Get_Data+0xe4>
	{
		my_SHT40_Humid_Float = 100.0f;
 801c71e:	4b20      	ldr	r3, [pc, #128]	@ (801c7a0 <My_SHT40_Get_Data+0x160>)
 801c720:	4a20      	ldr	r2, [pc, #128]	@ (801c7a4 <My_SHT40_Get_Data+0x164>)
 801c722:	601a      	str	r2, [r3, #0]
	}

	if (my_SHT40_Humid_Float < 0.0f)																				// Clamp Humidity values to valid range (0-100%)
 801c724:	4b1e      	ldr	r3, [pc, #120]	@ (801c7a0 <My_SHT40_Get_Data+0x160>)
 801c726:	681b      	ldr	r3, [r3, #0]
 801c728:	f04f 0100 	mov.w	r1, #0
 801c72c:	4618      	mov	r0, r3
 801c72e:	f7e4 fa97 	bl	8000c60 <__aeabi_fcmplt>
 801c732:	4603      	mov	r3, r0
 801c734:	2b00      	cmp	r3, #0
 801c736:	d003      	beq.n	801c740 <My_SHT40_Get_Data+0x100>
	{
		my_SHT40_Humid_Float = 0.0f;
 801c738:	4b19      	ldr	r3, [pc, #100]	@ (801c7a0 <My_SHT40_Get_Data+0x160>)
 801c73a:	f04f 0200 	mov.w	r2, #0
 801c73e:	601a      	str	r2, [r3, #0]
	}

	my_SHT40_Temp =  (uint32_t)(10*my_SHT40_Temp_Float);															// Scale Temperature Value and convert to integer values
 801c740:	4b14      	ldr	r3, [pc, #80]	@ (801c794 <My_SHT40_Get_Data+0x154>)
 801c742:	681b      	ldr	r3, [r3, #0]
 801c744:	4918      	ldr	r1, [pc, #96]	@ (801c7a8 <My_SHT40_Get_Data+0x168>)
 801c746:	4618      	mov	r0, r3
 801c748:	f7e4 f8ec 	bl	8000924 <__aeabi_fmul>
 801c74c:	4603      	mov	r3, r0
 801c74e:	4618      	mov	r0, r3
 801c750:	f7e4 fad4 	bl	8000cfc <__aeabi_f2uiz>
 801c754:	4603      	mov	r3, r0
 801c756:	4a09      	ldr	r2, [pc, #36]	@ (801c77c <My_SHT40_Get_Data+0x13c>)
 801c758:	6013      	str	r3, [r2, #0]
	my_SHT40_Humid = (uint32_t)(10*my_SHT40_Humid_Float);															// Scale Humidity Value and convert to integer values
 801c75a:	4b11      	ldr	r3, [pc, #68]	@ (801c7a0 <My_SHT40_Get_Data+0x160>)
 801c75c:	681b      	ldr	r3, [r3, #0]
 801c75e:	4912      	ldr	r1, [pc, #72]	@ (801c7a8 <My_SHT40_Get_Data+0x168>)
 801c760:	4618      	mov	r0, r3
 801c762:	f7e4 f8df 	bl	8000924 <__aeabi_fmul>
 801c766:	4603      	mov	r3, r0
 801c768:	4618      	mov	r0, r3
 801c76a:	f7e4 fac7 	bl	8000cfc <__aeabi_f2uiz>
 801c76e:	4603      	mov	r3, r0
 801c770:	4a03      	ldr	r2, [pc, #12]	@ (801c780 <My_SHT40_Get_Data+0x140>)
 801c772:	6013      	str	r3, [r2, #0]
}
 801c774:	bf00      	nop
 801c776:	3710      	adds	r7, #16
 801c778:	46bd      	mov	sp, r7
 801c77a:	bd80      	pop	{r7, pc}
 801c77c:	20001bf4 	.word	0x20001bf4
 801c780:	20001bf8 	.word	0x20001bf8
 801c784:	20001c90 	.word	0x20001c90
 801c788:	477fff00 	.word	0x477fff00
 801c78c:	432f0000 	.word	0x432f0000
 801c790:	42340000 	.word	0x42340000
 801c794:	20001bec 	.word	0x20001bec
 801c798:	42fa0000 	.word	0x42fa0000
 801c79c:	40c00000 	.word	0x40c00000
 801c7a0:	20001bf0 	.word	0x20001bf0
 801c7a4:	42c80000 	.word	0x42c80000
 801c7a8:	41200000 	.word	0x41200000

0801c7ac <My_Set_All_GPIO_To_Analog_Mode>:
#endif

/* Sensor Section End */

void My_Set_All_GPIO_To_Analog_Mode(void)
{
 801c7ac:	b580      	push	{r7, lr}
 801c7ae:	b086      	sub	sp, #24
 801c7b0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 801c7b2:	1d3b      	adds	r3, r7, #4
 801c7b4:	2200      	movs	r2, #0
 801c7b6:	601a      	str	r2, [r3, #0]
 801c7b8:	605a      	str	r2, [r3, #4]
 801c7ba:	609a      	str	r2, [r3, #8]
 801c7bc:	60da      	str	r2, [r3, #12]
 801c7be:	611a      	str	r2, [r3, #16]

	// Enable clocks for all available GPIO ports
	__HAL_RCC_GPIOA_CLK_ENABLE();
 801c7c0:	2001      	movs	r0, #1
 801c7c2:	f7fe ff95 	bl	801b6f0 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 801c7c6:	2002      	movs	r0, #2
 801c7c8:	f7fe ff92 	bl	801b6f0 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 801c7cc:	2004      	movs	r0, #4
 801c7ce:	f7fe ff8f 	bl	801b6f0 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOH_CLK_ENABLE();
 801c7d2:	2080      	movs	r0, #128	@ 0x80
 801c7d4:	f7fe ff8c 	bl	801b6f0 <LL_AHB2_GRP1_EnableClock>

	// Configure all pins of the GPIO ports as analog to reduce power consumption
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801c7d8:	2303      	movs	r3, #3
 801c7da:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c7dc:	2300      	movs	r3, #0
 801c7de:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pin = GPIO_PIN_All;
 801c7e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c7e4:	607b      	str	r3, [r7, #4]

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801c7e6:	1d3b      	adds	r3, r7, #4
 801c7e8:	4619      	mov	r1, r3
 801c7ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801c7ee:	f7e7 fa45 	bl	8003c7c <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801c7f2:	1d3b      	adds	r3, r7, #4
 801c7f4:	4619      	mov	r1, r3
 801c7f6:	480e      	ldr	r0, [pc, #56]	@ (801c830 <My_Set_All_GPIO_To_Analog_Mode+0x84>)
 801c7f8:	f7e7 fa40 	bl	8003c7c <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801c7fc:	1d3b      	adds	r3, r7, #4
 801c7fe:	4619      	mov	r1, r3
 801c800:	480c      	ldr	r0, [pc, #48]	@ (801c834 <My_Set_All_GPIO_To_Analog_Mode+0x88>)
 801c802:	f7e7 fa3b 	bl	8003c7c <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 801c806:	1d3b      	adds	r3, r7, #4
 801c808:	4619      	mov	r1, r3
 801c80a:	480b      	ldr	r0, [pc, #44]	@ (801c838 <My_Set_All_GPIO_To_Analog_Mode+0x8c>)
 801c80c:	f7e7 fa36 	bl	8003c7c <HAL_GPIO_Init>

	// Disable clocks to save power
	__HAL_RCC_GPIOA_CLK_DISABLE();
 801c810:	2001      	movs	r0, #1
 801c812:	f7fe ff85 	bl	801b720 <LL_AHB2_GRP1_DisableClock>
	__HAL_RCC_GPIOB_CLK_DISABLE();
 801c816:	2002      	movs	r0, #2
 801c818:	f7fe ff82 	bl	801b720 <LL_AHB2_GRP1_DisableClock>
	__HAL_RCC_GPIOC_CLK_DISABLE();
 801c81c:	2004      	movs	r0, #4
 801c81e:	f7fe ff7f 	bl	801b720 <LL_AHB2_GRP1_DisableClock>
	__HAL_RCC_GPIOH_CLK_DISABLE();
 801c822:	2080      	movs	r0, #128	@ 0x80
 801c824:	f7fe ff7c 	bl	801b720 <LL_AHB2_GRP1_DisableClock>
}
 801c828:	bf00      	nop
 801c82a:	3718      	adds	r7, #24
 801c82c:	46bd      	mov	sp, r7
 801c82e:	bd80      	pop	{r7, pc}
 801c830:	48000400 	.word	0x48000400
 801c834:	48000800 	.word	0x48000800
 801c838:	48001c00 	.word	0x48001c00

0801c83c <My_Enter_Stop2_Mode_WFI>:

void My_Enter_Stop2_Mode_WFI(uint32_t PWR_PVDLEVEL, uint32_t PWR_PVD_MODE_IT)	// Enter in STOP2 MODE and Wait for Interrupts (WFI)
{
 801c83c:	b580      	push	{r7, lr}
 801c83e:	b082      	sub	sp, #8
 801c840:	af00      	add	r7, sp, #0
 801c842:	6078      	str	r0, [r7, #4]
 801c844:	6039      	str	r1, [r7, #0]

	sConfigPVD.PVDLevel = PWR_PVDLEVEL; 							// Set PVD Threshold
 801c846:	4a31      	ldr	r2, [pc, #196]	@ (801c90c <My_Enter_Stop2_Mode_WFI+0xd0>)
 801c848:	687b      	ldr	r3, [r7, #4]
 801c84a:	6013      	str	r3, [r2, #0]
	sConfigPVD.Mode = PWR_PVD_MODE_IT;								// Config PVD to provide Interrupt
 801c84c:	4a2f      	ldr	r2, [pc, #188]	@ (801c90c <My_Enter_Stop2_Mode_WFI+0xd0>)
 801c84e:	683b      	ldr	r3, [r7, #0]
 801c850:	6053      	str	r3, [r2, #4]

	HAL_PWR_ConfigPVD(&sConfigPVD);									// Configure PVD
 801c852:	482e      	ldr	r0, [pc, #184]	@ (801c90c <My_Enter_Stop2_Mode_WFI+0xd0>)
 801c854:	f7e8 fa7a 	bl	8004d4c <HAL_PWR_ConfigPVD>

	if (my_MX_GPIO_Init_done == 1)
 801c858:	4b2d      	ldr	r3, [pc, #180]	@ (801c910 <My_Enter_Stop2_Mode_WFI+0xd4>)
 801c85a:	781b      	ldrb	r3, [r3, #0]
 801c85c:	2b01      	cmp	r3, #1
 801c85e:	d101      	bne.n	801c864 <My_Enter_Stop2_Mode_WFI+0x28>
	{
		BSP_RADIO_DeInit();											// Deinit the External Radio Amplifier
 801c860:	f7e5 ffc8 	bl	80027f4 <BSP_RADIO_DeInit>
	}

	if (my_SystemClock_Config_done == 1)							// Check if the Clock System has been configured
 801c864:	4b2b      	ldr	r3, [pc, #172]	@ (801c914 <My_Enter_Stop2_Mode_WFI+0xd8>)
 801c866:	781b      	ldrb	r3, [r3, #0]
 801c868:	2b01      	cmp	r3, #1
 801c86a:	d104      	bne.n	801c876 <My_Enter_Stop2_Mode_WFI+0x3a>
	{
		HAL_SuspendTick();											// Suspend Tick increment of System Clock
 801c86c:	f7e6 f8b6 	bl	80029dc <HAL_SuspendTick>
		__HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI); 	// Ensure that MSI is wake-up system clock
 801c870:	2000      	movs	r0, #0
 801c872:	f7fe ff2a 	bl	801b6ca <LL_RCC_SetClkAfterWakeFromStop>
	}

	if((LL_PWR_IsActiveFlag_C1SB() == 0) || (LL_PWR_IsActiveFlag_C2SB() == 0))
 801c876:	f7fe fed3 	bl	801b620 <LL_PWR_IsActiveFlag_C1SB>
 801c87a:	4603      	mov	r3, r0
 801c87c:	2b00      	cmp	r3, #0
 801c87e:	d004      	beq.n	801c88a <My_Enter_Stop2_Mode_WFI+0x4e>
 801c880:	f7fe fee2 	bl	801b648 <LL_PWR_IsActiveFlag_C2SB>
 801c884:	4603      	mov	r3, r0
 801c886:	2b00      	cmp	r3, #0
 801c888:	d109      	bne.n	801c89e <My_Enter_Stop2_Mode_WFI+0x62>
	{
		LL_PWR_ClearFlag_C1STOP_C1STB();			  				// Clear standby and stop flags for CPU1
 801c88a:	f7fe fef1 	bl	801b670 <LL_PWR_ClearFlag_C1STOP_C1STB>
		LL_PWR_ClearFlag_C2STOP_C2STB();							// Clear standby and stop flags for CPU2
 801c88e:	f7fe fefb 	bl	801b688 <LL_PWR_ClearFlag_C2STOP_C2STB>
		LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN); 				// Set the lowest low-power mode for CPU2: shutdown mode
 801c892:	2007      	movs	r0, #7
 801c894:	f7fe feae 	bl	801b5f4 <LL_C2_PWR_SetPowerMode>
		LL_PWR_SetPowerMode(LL_PWR_MODE_STOP2);						// Set Low-Power mode for CPU1
 801c898:	2002      	movs	r0, #2
 801c89a:	f7fe fe97 	bl	801b5cc <LL_PWR_SetPowerMode>
	}

	My_Interrupts_Manager(NVIC_DISABLE);							// Disable and Clear All Pending Interrupts
 801c89e:	2001      	movs	r0, #1
 801c8a0:	f000 f870 	bl	801c984 <My_Interrupts_Manager>
	HAL_NVIC_ClearPendingIRQ(PVD_PVM_IRQn);							// Clear Pending Bit for PVD
 801c8a4:	2001      	movs	r0, #1
 801c8a6:	f7e6 fdc2 	bl	800342e <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(RTC_Alarm_IRQn);						// Clear Pending Bit for RTC Alarms (A and B) Interrupt
 801c8aa:	202a      	movs	r0, #42	@ 0x2a
 801c8ac:	f7e6 fdbf 	bl	800342e <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(COMP_IRQn);							// Clear Pending Bit for Comparator
 801c8b0:	2015      	movs	r0, #21
 801c8b2:	f7e6 fdbc 	bl	800342e <HAL_NVIC_ClearPendingIRQ>

	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_PVDO);							// CLear Power Voltage Detector output Flag
 801c8b6:	4b18      	ldr	r3, [pc, #96]	@ (801c918 <My_Enter_Stop2_Mode_WFI+0xdc>)
 801c8b8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801c8bc:	619a      	str	r2, [r3, #24]
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);								// CLear Flag
 801c8be:	4b16      	ldr	r3, [pc, #88]	@ (801c918 <My_Enter_Stop2_Mode_WFI+0xdc>)
 801c8c0:	2207      	movs	r2, #7
 801c8c2:	619a      	str	r2, [r3, #24]
	HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);								// Enable Interrupt for PVD
 801c8c4:	2001      	movs	r0, #1
 801c8c6:	f7e6 fd96 	bl	80033f6 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);								// Enable Interrupt for Interrupt for RTC Alarms (A and B) Interrupt
 801c8ca:	202a      	movs	r0, #42	@ 0x2a
 801c8cc:	f7e6 fd93 	bl	80033f6 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(LPTIM1_IRQn);								// Enable Interrupt for LPTIM1
 801c8d0:	2027      	movs	r0, #39	@ 0x27
 801c8d2:	f7e6 fd90 	bl	80033f6 <HAL_NVIC_EnableIRQ>

	if (__HAL_PWR_GET_FLAG(PWR_CR1_LPR) == 1)						// Check if PWR_CR1_LPR is set (must be 0 in Stop2 Mode)
 801c8d6:	4b10      	ldr	r3, [pc, #64]	@ (801c918 <My_Enter_Stop2_Mode_WFI+0xdc>)
 801c8d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801c8dc:	f003 0301 	and.w	r3, r3, #1
 801c8e0:	2b01      	cmp	r3, #1
 801c8e2:	d105      	bne.n	801c8f0 <My_Enter_Stop2_Mode_WFI+0xb4>
	{
		CLEAR_BIT(PWR->CR1, PWR_CR1_LPR); 							// LPR bit must be cleared to enter stop 2 mode.
 801c8e4:	4b0c      	ldr	r3, [pc, #48]	@ (801c918 <My_Enter_Stop2_Mode_WFI+0xdc>)
 801c8e6:	681b      	ldr	r3, [r3, #0]
 801c8e8:	4a0b      	ldr	r2, [pc, #44]	@ (801c918 <My_Enter_Stop2_Mode_WFI+0xdc>)
 801c8ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801c8ee:	6013      	str	r3, [r2, #0]
	}

	HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);					// Enter STOP2 mode and WFI
 801c8f0:	2001      	movs	r0, #1
 801c8f2:	f7e8 fbb3 	bl	800505c <HAL_PWREx_EnterSTOP2Mode>

	if (my_SubghzApp_Init_done == 0)
 801c8f6:	4b09      	ldr	r3, [pc, #36]	@ (801c91c <My_Enter_Stop2_Mode_WFI+0xe0>)
 801c8f8:	781b      	ldrb	r3, [r3, #0]
 801c8fa:	2b00      	cmp	r3, #0
 801c8fc:	d101      	bne.n	801c902 <My_Enter_Stop2_Mode_WFI+0xc6>
	{
		My_Exit_Stop2_Mode_WFI();									// Exit From Stop2 Mode
 801c8fe:	f000 f80f 	bl	801c920 <My_Exit_Stop2_Mode_WFI>
	}
}
 801c902:	bf00      	nop
 801c904:	3708      	adds	r7, #8
 801c906:	46bd      	mov	sp, r7
 801c908:	bd80      	pop	{r7, pc}
 801c90a:	bf00      	nop
 801c90c:	20001be0 	.word	0x20001be0
 801c910:	200008a4 	.word	0x200008a4
 801c914:	2000074c 	.word	0x2000074c
 801c918:	58000400 	.word	0x58000400
 801c91c:	200008a7 	.word	0x200008a7

0801c920 <My_Exit_Stop2_Mode_WFI>:

void My_Exit_Stop2_Mode_WFI(void)	// Exit Stop2 Mode After Interrupt
{
 801c920:	b580      	push	{r7, lr}
 801c922:	af00      	add	r7, sp, #0
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2);		// Undervolting
 801c924:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 801c928:	f7e8 fad8 	bl	8004edc <HAL_PWREx_ControlVoltageScaling>
	My_Interrupts_Manager(NVIC_ENABLE);									// Re-Enable Interrupts
 801c92c:	2000      	movs	r0, #0
 801c92e:	f000 f829 	bl	801c984 <My_Interrupts_Manager>
	if (my_SystemClock_Config_done == 1)
 801c932:	4b04      	ldr	r3, [pc, #16]	@ (801c944 <My_Exit_Stop2_Mode_WFI+0x24>)
 801c934:	781b      	ldrb	r3, [r3, #0]
 801c936:	2b01      	cmp	r3, #1
 801c938:	d101      	bne.n	801c93e <My_Exit_Stop2_Mode_WFI+0x1e>
	{
		HAL_ResumeTick();												// Resume Tick Increment
 801c93a:	f7e6 f85d 	bl	80029f8 <HAL_ResumeTick>
	}
}
 801c93e:	bf00      	nop
 801c940:	bd80      	pop	{r7, pc}
 801c942:	bf00      	nop
 801c944:	2000074c 	.word	0x2000074c

0801c948 <My_Set_PVD>:

void My_Set_PVD(uint32_t PWR_PVDLEVEL, uint32_t PWR_PVD_MODE_IT)	// Sets PVD Threshold and Interrupt Modes
{
 801c948:	b580      	push	{r7, lr}
 801c94a:	b082      	sub	sp, #8
 801c94c:	af00      	add	r7, sp, #0
 801c94e:	6078      	str	r0, [r7, #4]
 801c950:	6039      	str	r1, [r7, #0]
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_PVDO);							// CLear Power Voltage Detector output Flag
 801c952:	4b0a      	ldr	r3, [pc, #40]	@ (801c97c <My_Set_PVD+0x34>)
 801c954:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801c958:	619a      	str	r2, [r3, #24]
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);								// CLear Flag
 801c95a:	4b08      	ldr	r3, [pc, #32]	@ (801c97c <My_Set_PVD+0x34>)
 801c95c:	2207      	movs	r2, #7
 801c95e:	619a      	str	r2, [r3, #24]
	sConfigPVD.PVDLevel = PWR_PVDLEVEL; 							// Set PVD Threshold
 801c960:	4a07      	ldr	r2, [pc, #28]	@ (801c980 <My_Set_PVD+0x38>)
 801c962:	687b      	ldr	r3, [r7, #4]
 801c964:	6013      	str	r3, [r2, #0]
	sConfigPVD.Mode = PWR_PVD_MODE_IT;								// Set PVD to provide Interrupt
 801c966:	4a06      	ldr	r2, [pc, #24]	@ (801c980 <My_Set_PVD+0x38>)
 801c968:	683b      	ldr	r3, [r7, #0]
 801c96a:	6053      	str	r3, [r2, #4]
	HAL_PWR_ConfigPVD(&sConfigPVD);									// Configure PVD
 801c96c:	4804      	ldr	r0, [pc, #16]	@ (801c980 <My_Set_PVD+0x38>)
 801c96e:	f7e8 f9ed 	bl	8004d4c <HAL_PWR_ConfigPVD>
}
 801c972:	bf00      	nop
 801c974:	3708      	adds	r7, #8
 801c976:	46bd      	mov	sp, r7
 801c978:	bd80      	pop	{r7, pc}
 801c97a:	bf00      	nop
 801c97c:	58000400 	.word	0x58000400
 801c980:	20001be0 	.word	0x20001be0

0801c984 <My_Interrupts_Manager>:

	__WFI(); 														// Wait for the Interrupt
}

void My_Interrupts_Manager(My_Interrupts_Manager_td My_Interrupts_Status)	// Enable or Disable IRQ
{
 801c984:	b580      	push	{r7, lr}
 801c986:	b082      	sub	sp, #8
 801c988:	af00      	add	r7, sp, #0
 801c98a:	4603      	mov	r3, r0
 801c98c:	71fb      	strb	r3, [r7, #7]
	switch (My_Interrupts_Status)
 801c98e:	79fb      	ldrb	r3, [r7, #7]
 801c990:	2b02      	cmp	r3, #2
 801c992:	f000 80aa 	beq.w	801caea <My_Interrupts_Manager+0x166>
 801c996:	2b02      	cmp	r3, #2
 801c998:	f300 80f0 	bgt.w	801cb7c <My_Interrupts_Manager+0x1f8>
 801c99c:	2b00      	cmp	r3, #0
 801c99e:	d033      	beq.n	801ca08 <My_Interrupts_Manager+0x84>
 801c9a0:	2b01      	cmp	r3, #1
 801c9a2:	f040 80eb 	bne.w	801cb7c <My_Interrupts_Manager+0x1f8>
	{
	case NVIC_DISABLE:
	{

		HAL_NVIC_DisableIRQ(PVD_PVM_IRQn);									// Disable Interrupt for PVD
 801c9a6:	2001      	movs	r0, #1
 801c9a8:	f7e6 fd33 	bl	8003412 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(RTC_WKUP_IRQn);									// Disable Interrupt for RTC_WKUP
 801c9ac:	2003      	movs	r0, #3
 801c9ae:	f7e6 fd30 	bl	8003412 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);					// Disable Interrupt for RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts
 801c9b2:	2002      	movs	r0, #2
 801c9b4:	f7e6 fd2d 	bl	8003412 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);							// Disable Interrupt for DMA1 Channel 5 Interrupt
 801c9b8:	200f      	movs	r0, #15
 801c9ba:	f7e6 fd2a 	bl	8003412 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(USART2_IRQn);									// Disable Interrupt for USART2
 801c9be:	2025      	movs	r0, #37	@ 0x25
 801c9c0:	f7e6 fd27 	bl	8003412 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);								// Disable Interrupt for RTC Alarms (A and B) Interrupt
 801c9c4:	202a      	movs	r0, #42	@ 0x2a
 801c9c6:	f7e6 fd24 	bl	8003412 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(SUBGHZ_Radio_IRQn);								// Disable Interrupt for SUBGHZ Radio Interrupt
 801c9ca:	2032      	movs	r0, #50	@ 0x32
 801c9cc:	f7e6 fd21 	bl	8003412 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(LPTIM1_IRQn);									// Disable Interrupt for LPTIM1
 801c9d0:	2027      	movs	r0, #39	@ 0x27
 801c9d2:	f7e6 fd1e 	bl	8003412 <HAL_NVIC_DisableIRQ>

		HAL_NVIC_ClearPendingIRQ(PVD_PVM_IRQn);								// Clear Pending Bit for PVD
 801c9d6:	2001      	movs	r0, #1
 801c9d8:	f7e6 fd29 	bl	800342e <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(RTC_WKUP_IRQn);							// Clear Pending Bit for RTC_WKUP
 801c9dc:	2003      	movs	r0, #3
 801c9de:	f7e6 fd26 	bl	800342e <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);				// Clear Pending Bit for RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts
 801c9e2:	2002      	movs	r0, #2
 801c9e4:	f7e6 fd23 	bl	800342e <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(DMA1_Channel5_IRQn);						// Clear Pending Bit for DMA1 Channel 5 Interrupt
 801c9e8:	200f      	movs	r0, #15
 801c9ea:	f7e6 fd20 	bl	800342e <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(USART2_IRQn);								// Clear Pending Bit for USART2
 801c9ee:	2025      	movs	r0, #37	@ 0x25
 801c9f0:	f7e6 fd1d 	bl	800342e <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(RTC_Alarm_IRQn);							// Clear Pending Bit for RTC Alarms (A and B) Interrupt
 801c9f4:	202a      	movs	r0, #42	@ 0x2a
 801c9f6:	f7e6 fd1a 	bl	800342e <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(SUBGHZ_Radio_IRQn);						// Clear Pending Bit for SUBGHZ Radio Interrupt
 801c9fa:	2032      	movs	r0, #50	@ 0x32
 801c9fc:	f7e6 fd17 	bl	800342e <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(LPTIM1_IRQn);								// Clear Pending Bit for LPTIM1 Interrupt
 801ca00:	2027      	movs	r0, #39	@ 0x27
 801ca02:	f7e6 fd14 	bl	800342e <HAL_NVIC_ClearPendingIRQ>

		break;
 801ca06:	e0ba      	b.n	801cb7e <My_Interrupts_Manager+0x1fa>
	}

	case NVIC_ENABLE:
	{
		HAL_NVIC_DisableIRQ(PVD_PVM_IRQn);									// Disable Interrupt for PVD
 801ca08:	2001      	movs	r0, #1
 801ca0a:	f7e6 fd02 	bl	8003412 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(RTC_WKUP_IRQn);									// Disable Interrupt for RTC_WKUP
 801ca0e:	2003      	movs	r0, #3
 801ca10:	f7e6 fcff 	bl	8003412 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);					// Disable Interrupt for RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts
 801ca14:	2002      	movs	r0, #2
 801ca16:	f7e6 fcfc 	bl	8003412 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);							// Disable Interrupt for DMA1 Channel 5 Interrupt
 801ca1a:	200f      	movs	r0, #15
 801ca1c:	f7e6 fcf9 	bl	8003412 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(USART2_IRQn);									// Disable Interrupt for USART2
 801ca20:	2025      	movs	r0, #37	@ 0x25
 801ca22:	f7e6 fcf6 	bl	8003412 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);								// Disable Interrupt for RTC Alarms (A and B) Interrupt
 801ca26:	202a      	movs	r0, #42	@ 0x2a
 801ca28:	f7e6 fcf3 	bl	8003412 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(SUBGHZ_Radio_IRQn);								// Disable Interrupt for SUBGHZ Radio Interrupt
 801ca2c:	2032      	movs	r0, #50	@ 0x32
 801ca2e:	f7e6 fcf0 	bl	8003412 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(LPTIM1_IRQn);									// Disable Interrupt for LPTIM1
 801ca32:	2027      	movs	r0, #39	@ 0x27
 801ca34:	f7e6 fced 	bl	8003412 <HAL_NVIC_DisableIRQ>

		HAL_NVIC_ClearPendingIRQ(PVD_PVM_IRQn);								// Clear Pending Bit for PVD
 801ca38:	2001      	movs	r0, #1
 801ca3a:	f7e6 fcf8 	bl	800342e <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(RTC_WKUP_IRQn);							// Clear Pending Bit for RTC_WKUP
 801ca3e:	2003      	movs	r0, #3
 801ca40:	f7e6 fcf5 	bl	800342e <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);				// Clear Pending Bit for RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts
 801ca44:	2002      	movs	r0, #2
 801ca46:	f7e6 fcf2 	bl	800342e <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(DMA1_Channel5_IRQn);						// Clear Pending Bit for DMA1 Channel 5 Interrupt
 801ca4a:	200f      	movs	r0, #15
 801ca4c:	f7e6 fcef 	bl	800342e <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(USART2_IRQn);								// Clear Pending Bit for USART2
 801ca50:	2025      	movs	r0, #37	@ 0x25
 801ca52:	f7e6 fcec 	bl	800342e <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(RTC_Alarm_IRQn);							// Clear Pending Bit for RTC Alarms (A and B) Interrupt
 801ca56:	202a      	movs	r0, #42	@ 0x2a
 801ca58:	f7e6 fce9 	bl	800342e <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(SUBGHZ_Radio_IRQn);						// Clear Pending Bit for SUBGHZ Radio Interrupt
 801ca5c:	2032      	movs	r0, #50	@ 0x32
 801ca5e:	f7e6 fce6 	bl	800342e <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(LPTIM1_IRQn);								// Clear Pending Bit for LPTIM1 Interrupt
 801ca62:	2027      	movs	r0, #39	@ 0x27
 801ca64:	f7e6 fce3 	bl	800342e <HAL_NVIC_ClearPendingIRQ>

		HAL_NVIC_SetPriority(PVD_PVM_IRQn, 0, 0);							// Set Interrupt Priority
 801ca68:	2200      	movs	r2, #0
 801ca6a:	2100      	movs	r1, #0
 801ca6c:	2001      	movs	r0, #1
 801ca6e:	f7e6 fca8 	bl	80033c2 <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 1, 0);							// Set Interrupt Priority
 801ca72:	2200      	movs	r2, #0
 801ca74:	2101      	movs	r1, #1
 801ca76:	2003      	movs	r0, #3
 801ca78:	f7e6 fca3 	bl	80033c2 <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 1, 0);			// Set Interrupt Priority
 801ca7c:	2200      	movs	r2, #0
 801ca7e:	2101      	movs	r1, #1
 801ca80:	2002      	movs	r0, #2
 801ca82:	f7e6 fc9e 	bl	80033c2 <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 1, 0);						// Set Interrupt Priority
 801ca86:	2200      	movs	r2, #0
 801ca88:	2101      	movs	r1, #1
 801ca8a:	200f      	movs	r0, #15
 801ca8c:	f7e6 fc99 	bl	80033c2 <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);							// Set Interrupt Priority
 801ca90:	2200      	movs	r2, #0
 801ca92:	2101      	movs	r1, #1
 801ca94:	2025      	movs	r0, #37	@ 0x25
 801ca96:	f7e6 fc94 	bl	80033c2 <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 1, 0);							// Set Interrupt Priority
 801ca9a:	2200      	movs	r2, #0
 801ca9c:	2101      	movs	r1, #1
 801ca9e:	202a      	movs	r0, #42	@ 0x2a
 801caa0:	f7e6 fc8f 	bl	80033c2 <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 1, 0);						// Set Interrupt Priority
 801caa4:	2200      	movs	r2, #0
 801caa6:	2101      	movs	r1, #1
 801caa8:	2032      	movs	r0, #50	@ 0x32
 801caaa:	f7e6 fc8a 	bl	80033c2 <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(LPTIM1_IRQn, 1, 0);							// Set Interrupt Priority
 801caae:	2200      	movs	r2, #0
 801cab0:	2101      	movs	r1, #1
 801cab2:	2027      	movs	r0, #39	@ 0x27
 801cab4:	f7e6 fc85 	bl	80033c2 <HAL_NVIC_SetPriority>

		HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);									// Enable Interrupt for PVD
 801cab8:	2001      	movs	r0, #1
 801caba:	f7e6 fc9c 	bl	80033f6 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);									// Enable Interrupt for RTC_WKUP
 801cabe:	2003      	movs	r0, #3
 801cac0:	f7e6 fc99 	bl	80033f6 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);					// Enable Interrupt for RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts
 801cac4:	2002      	movs	r0, #2
 801cac6:	f7e6 fc96 	bl	80033f6 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);								// Enable Interrupt for SUBGHZ Radio Interrupt
 801caca:	200f      	movs	r0, #15
 801cacc:	f7e6 fc93 	bl	80033f6 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(USART2_IRQn);									// Enable Interrupt for USART2
 801cad0:	2025      	movs	r0, #37	@ 0x25
 801cad2:	f7e6 fc90 	bl	80033f6 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);									// Enable Interrupt for Interrupt for RTC Alarms (A and B) Interrupt
 801cad6:	202a      	movs	r0, #42	@ 0x2a
 801cad8:	f7e6 fc8d 	bl	80033f6 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);								// Enable Interrupt for SUBGHZ Radio Interrupt
 801cadc:	2032      	movs	r0, #50	@ 0x32
 801cade:	f7e6 fc8a 	bl	80033f6 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(LPTIM1_IRQn);									// Enable Interrupt for LPTIM1
 801cae2:	2027      	movs	r0, #39	@ 0x27
 801cae4:	f7e6 fc87 	bl	80033f6 <HAL_NVIC_EnableIRQ>

		break;
 801cae8:	e049      	b.n	801cb7e <My_Interrupts_Manager+0x1fa>
	}

	case NVIC_CLEAR:
	{
		HAL_NVIC_DisableIRQ(PVD_PVM_IRQn);									// Disable Interrupt for PVD
 801caea:	2001      	movs	r0, #1
 801caec:	f7e6 fc91 	bl	8003412 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(RTC_WKUP_IRQn);									// Disable Interrupt for RTC_WKUP
 801caf0:	2003      	movs	r0, #3
 801caf2:	f7e6 fc8e 	bl	8003412 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);					// Disable Interrupt for RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts
 801caf6:	2002      	movs	r0, #2
 801caf8:	f7e6 fc8b 	bl	8003412 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);							// Disable Interrupt for DMA1 Channel 5 Interrupt
 801cafc:	200f      	movs	r0, #15
 801cafe:	f7e6 fc88 	bl	8003412 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(USART2_IRQn);									// Disable Interrupt for USART2
 801cb02:	2025      	movs	r0, #37	@ 0x25
 801cb04:	f7e6 fc85 	bl	8003412 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);								// Disable Interrupt for RTC Alarms (A and B) Interrupt
 801cb08:	202a      	movs	r0, #42	@ 0x2a
 801cb0a:	f7e6 fc82 	bl	8003412 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(SUBGHZ_Radio_IRQn);								// Disable Interrupt for SUBGHZ Radio Interrupt
 801cb0e:	2032      	movs	r0, #50	@ 0x32
 801cb10:	f7e6 fc7f 	bl	8003412 <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(LPTIM1_IRQn);									// Disable Interrupt for LPTIM1
 801cb14:	2027      	movs	r0, #39	@ 0x27
 801cb16:	f7e6 fc7c 	bl	8003412 <HAL_NVIC_DisableIRQ>

		HAL_NVIC_ClearPendingIRQ(PVD_PVM_IRQn);								// Clear Pending Bit for PVD
 801cb1a:	2001      	movs	r0, #1
 801cb1c:	f7e6 fc87 	bl	800342e <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(RTC_WKUP_IRQn);							// Clear Pending Bit for RTC_WKUP
 801cb20:	2003      	movs	r0, #3
 801cb22:	f7e6 fc84 	bl	800342e <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);				// Clear Pending Bit for RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts
 801cb26:	2002      	movs	r0, #2
 801cb28:	f7e6 fc81 	bl	800342e <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(DMA1_Channel5_IRQn);						// Clear Pending Bit for DMA1 Channel 5 Interrupt
 801cb2c:	200f      	movs	r0, #15
 801cb2e:	f7e6 fc7e 	bl	800342e <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(USART2_IRQn);								// Clear Pending Bit for USART2
 801cb32:	2025      	movs	r0, #37	@ 0x25
 801cb34:	f7e6 fc7b 	bl	800342e <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(RTC_Alarm_IRQn);							// Clear Pending Bit for RTC Alarms (A and B) Interrupt
 801cb38:	202a      	movs	r0, #42	@ 0x2a
 801cb3a:	f7e6 fc78 	bl	800342e <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(SUBGHZ_Radio_IRQn);						// Clear Pending Bit for SUBGHZ Radio Interrupt
 801cb3e:	2032      	movs	r0, #50	@ 0x32
 801cb40:	f7e6 fc75 	bl	800342e <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(LPTIM1_IRQn);								// Clear Pending Bit for LPTIM1 Interrupt
 801cb44:	2027      	movs	r0, #39	@ 0x27
 801cb46:	f7e6 fc72 	bl	800342e <HAL_NVIC_ClearPendingIRQ>

		HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);									// Enable Interrupt for PVD
 801cb4a:	2001      	movs	r0, #1
 801cb4c:	f7e6 fc53 	bl	80033f6 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);									// Enable Interrupt for RTC_WKUP
 801cb50:	2003      	movs	r0, #3
 801cb52:	f7e6 fc50 	bl	80033f6 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);					// Enable Interrupt for RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts
 801cb56:	2002      	movs	r0, #2
 801cb58:	f7e6 fc4d 	bl	80033f6 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);								// Enable Interrupt for SUBGHZ Radio Interrupt
 801cb5c:	200f      	movs	r0, #15
 801cb5e:	f7e6 fc4a 	bl	80033f6 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(USART2_IRQn);									// Enable Interrupt for USART2
 801cb62:	2025      	movs	r0, #37	@ 0x25
 801cb64:	f7e6 fc47 	bl	80033f6 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);									// Enable Interrupt for Interrupt for RTC Alarms (A and B) Interrupt
 801cb68:	202a      	movs	r0, #42	@ 0x2a
 801cb6a:	f7e6 fc44 	bl	80033f6 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);								// Enable Interrupt for SUBGHZ Radio Interrupt
 801cb6e:	2032      	movs	r0, #50	@ 0x32
 801cb70:	f7e6 fc41 	bl	80033f6 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(LPTIM1_IRQn);									// Enable Interrupt for LPTIM1
 801cb74:	2027      	movs	r0, #39	@ 0x27
 801cb76:	f7e6 fc3e 	bl	80033f6 <HAL_NVIC_EnableIRQ>

		break;
 801cb7a:	e000      	b.n	801cb7e <My_Interrupts_Manager+0x1fa>
	}

	default:
	{
		break;
 801cb7c:	bf00      	nop
	}

	}
}
 801cb7e:	bf00      	nop
 801cb80:	3708      	adds	r7, #8
 801cb82:	46bd      	mov	sp, r7
 801cb84:	bd80      	pop	{r7, pc}
	...

0801cb88 <My_Set_RTC_Alarm_A>:

void My_Set_RTC_Alarm_A(uint8_t my_hours, uint8_t my_minutes, uint8_t my_seconds, uint32_t my_subseconds)
{
 801cb88:	b580      	push	{r7, lr}
 801cb8a:	b082      	sub	sp, #8
 801cb8c:	af00      	add	r7, sp, #0
 801cb8e:	603b      	str	r3, [r7, #0]
 801cb90:	4603      	mov	r3, r0
 801cb92:	71fb      	strb	r3, [r7, #7]
 801cb94:	460b      	mov	r3, r1
 801cb96:	71bb      	strb	r3, [r7, #6]
 801cb98:	4613      	mov	r3, r2
 801cb9a:	717b      	strb	r3, [r7, #5]

	/* This function Sets the RTC ALARM A Timer */

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 801cb9c:	2200      	movs	r2, #0
 801cb9e:	491f      	ldr	r1, [pc, #124]	@ (801cc1c <My_Set_RTC_Alarm_A+0x94>)
 801cba0:	481f      	ldr	r0, [pc, #124]	@ (801cc20 <My_Set_RTC_Alarm_A+0x98>)
 801cba2:	f7e9 fed9 	bl	8006958 <HAL_RTC_GetTime>

	sAlarm.AlarmTime.Hours = sTime.Hours + my_hours;
 801cba6:	4b1d      	ldr	r3, [pc, #116]	@ (801cc1c <My_Set_RTC_Alarm_A+0x94>)
 801cba8:	781a      	ldrb	r2, [r3, #0]
 801cbaa:	79fb      	ldrb	r3, [r7, #7]
 801cbac:	4413      	add	r3, r2
 801cbae:	b2da      	uxtb	r2, r3
 801cbb0:	4b1c      	ldr	r3, [pc, #112]	@ (801cc24 <My_Set_RTC_Alarm_A+0x9c>)
 801cbb2:	701a      	strb	r2, [r3, #0]
	sAlarm.AlarmTime.Minutes = my_minutes + sTime.Minutes;
 801cbb4:	4b19      	ldr	r3, [pc, #100]	@ (801cc1c <My_Set_RTC_Alarm_A+0x94>)
 801cbb6:	785a      	ldrb	r2, [r3, #1]
 801cbb8:	79bb      	ldrb	r3, [r7, #6]
 801cbba:	4413      	add	r3, r2
 801cbbc:	b2da      	uxtb	r2, r3
 801cbbe:	4b19      	ldr	r3, [pc, #100]	@ (801cc24 <My_Set_RTC_Alarm_A+0x9c>)
 801cbc0:	705a      	strb	r2, [r3, #1]
	sAlarm.AlarmTime.Seconds = my_seconds + sTime.Seconds;
 801cbc2:	4b16      	ldr	r3, [pc, #88]	@ (801cc1c <My_Set_RTC_Alarm_A+0x94>)
 801cbc4:	789a      	ldrb	r2, [r3, #2]
 801cbc6:	797b      	ldrb	r3, [r7, #5]
 801cbc8:	4413      	add	r3, r2
 801cbca:	b2da      	uxtb	r2, r3
 801cbcc:	4b15      	ldr	r3, [pc, #84]	@ (801cc24 <My_Set_RTC_Alarm_A+0x9c>)
 801cbce:	709a      	strb	r2, [r3, #2]
	sAlarm.AlarmTime.SubSeconds = my_subseconds + sTime.SubSeconds;
 801cbd0:	4b12      	ldr	r3, [pc, #72]	@ (801cc1c <My_Set_RTC_Alarm_A+0x94>)
 801cbd2:	685a      	ldr	r2, [r3, #4]
 801cbd4:	683b      	ldr	r3, [r7, #0]
 801cbd6:	4413      	add	r3, r2
 801cbd8:	4a12      	ldr	r2, [pc, #72]	@ (801cc24 <My_Set_RTC_Alarm_A+0x9c>)
 801cbda:	6053      	str	r3, [r2, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 801cbdc:	4b11      	ldr	r3, [pc, #68]	@ (801cc24 <My_Set_RTC_Alarm_A+0x9c>)
 801cbde:	2200      	movs	r2, #0
 801cbe0:	60da      	str	r2, [r3, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 801cbe2:	4b10      	ldr	r3, [pc, #64]	@ (801cc24 <My_Set_RTC_Alarm_A+0x9c>)
 801cbe4:	2200      	movs	r2, #0
 801cbe6:	611a      	str	r2, [r3, #16]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 801cbe8:	4b0e      	ldr	r3, [pc, #56]	@ (801cc24 <My_Set_RTC_Alarm_A+0x9c>)
 801cbea:	2200      	movs	r2, #0
 801cbec:	615a      	str	r2, [r3, #20]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 801cbee:	4b0d      	ldr	r3, [pc, #52]	@ (801cc24 <My_Set_RTC_Alarm_A+0x9c>)
 801cbf0:	2200      	movs	r2, #0
 801cbf2:	619a      	str	r2, [r3, #24]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 801cbf4:	4b0b      	ldr	r3, [pc, #44]	@ (801cc24 <My_Set_RTC_Alarm_A+0x9c>)
 801cbf6:	2200      	movs	r2, #0
 801cbf8:	621a      	str	r2, [r3, #32]
	sAlarm.AlarmDateWeekDay = 0x1;
 801cbfa:	4b0a      	ldr	r3, [pc, #40]	@ (801cc24 <My_Set_RTC_Alarm_A+0x9c>)
 801cbfc:	2201      	movs	r2, #1
 801cbfe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	sAlarm.Alarm = RTC_ALARM_A;
 801cc02:	4b08      	ldr	r3, [pc, #32]	@ (801cc24 <My_Set_RTC_Alarm_A+0x9c>)
 801cc04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801cc08:	629a      	str	r2, [r3, #40]	@ 0x28

	HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);			// Set RTC Alarm Time with Interrupt
 801cc0a:	2200      	movs	r2, #0
 801cc0c:	4905      	ldr	r1, [pc, #20]	@ (801cc24 <My_Set_RTC_Alarm_A+0x9c>)
 801cc0e:	4804      	ldr	r0, [pc, #16]	@ (801cc20 <My_Set_RTC_Alarm_A+0x98>)
 801cc10:	f7e9 ff8a 	bl	8006b28 <HAL_RTC_SetAlarm_IT>
}
 801cc14:	bf00      	nop
 801cc16:	3708      	adds	r7, #8
 801cc18:	46bd      	mov	sp, r7
 801cc1a:	bd80      	pop	{r7, pc}
 801cc1c:	20001bfc 	.word	0x20001bfc
 801cc20:	20000750 	.word	0x20000750
 801cc24:	20001c10 	.word	0x20001c10

0801cc28 <My_Set_RTC_Alarm_B>:

void My_Set_RTC_Alarm_B(uint8_t my_hours, uint8_t my_minutes, uint8_t my_seconds, uint32_t my_subseconds)
{
 801cc28:	b580      	push	{r7, lr}
 801cc2a:	b082      	sub	sp, #8
 801cc2c:	af00      	add	r7, sp, #0
 801cc2e:	603b      	str	r3, [r7, #0]
 801cc30:	4603      	mov	r3, r0
 801cc32:	71fb      	strb	r3, [r7, #7]
 801cc34:	460b      	mov	r3, r1
 801cc36:	71bb      	strb	r3, [r7, #6]
 801cc38:	4613      	mov	r3, r2
 801cc3a:	717b      	strb	r3, [r7, #5]
	/* Set the RTC ALARM B Timer */

	sTime.Hours = 0x00; 														// Config Time Parameter RTC Struct Init
 801cc3c:	4b22      	ldr	r3, [pc, #136]	@ (801ccc8 <My_Set_RTC_Alarm_B+0xa0>)
 801cc3e:	2200      	movs	r2, #0
 801cc40:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = 0x00;
 801cc42:	4b21      	ldr	r3, [pc, #132]	@ (801ccc8 <My_Set_RTC_Alarm_B+0xa0>)
 801cc44:	2200      	movs	r2, #0
 801cc46:	705a      	strb	r2, [r3, #1]
	sTime.Seconds = 0x00;
 801cc48:	4b1f      	ldr	r3, [pc, #124]	@ (801ccc8 <My_Set_RTC_Alarm_B+0xa0>)
 801cc4a:	2200      	movs	r2, #0
 801cc4c:	709a      	strb	r2, [r3, #2]
	sTime.SubSeconds = 0x00;
 801cc4e:	4b1e      	ldr	r3, [pc, #120]	@ (801ccc8 <My_Set_RTC_Alarm_B+0xa0>)
 801cc50:	2200      	movs	r2, #0
 801cc52:	605a      	str	r2, [r3, #4]
	sTime.SecondFraction = 0x00;
 801cc54:	4b1c      	ldr	r3, [pc, #112]	@ (801ccc8 <My_Set_RTC_Alarm_B+0xa0>)
 801cc56:	2200      	movs	r2, #0
 801cc58:	609a      	str	r2, [r3, #8]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 801cc5a:	4b1b      	ldr	r3, [pc, #108]	@ (801ccc8 <My_Set_RTC_Alarm_B+0xa0>)
 801cc5c:	2200      	movs	r2, #0
 801cc5e:	60da      	str	r2, [r3, #12]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 801cc60:	4b19      	ldr	r3, [pc, #100]	@ (801ccc8 <My_Set_RTC_Alarm_B+0xa0>)
 801cc62:	2200      	movs	r2, #0
 801cc64:	611a      	str	r2, [r3, #16]

	sAlarm.AlarmTime.Hours = my_hours;											// Config Time Parameter of RTC_Alarm Struct
 801cc66:	4a19      	ldr	r2, [pc, #100]	@ (801cccc <My_Set_RTC_Alarm_B+0xa4>)
 801cc68:	79fb      	ldrb	r3, [r7, #7]
 801cc6a:	7013      	strb	r3, [r2, #0]
	sAlarm.AlarmTime.Minutes = my_minutes;
 801cc6c:	4a17      	ldr	r2, [pc, #92]	@ (801cccc <My_Set_RTC_Alarm_B+0xa4>)
 801cc6e:	79bb      	ldrb	r3, [r7, #6]
 801cc70:	7053      	strb	r3, [r2, #1]
	sAlarm.AlarmTime.Seconds = my_seconds;
 801cc72:	4a16      	ldr	r2, [pc, #88]	@ (801cccc <My_Set_RTC_Alarm_B+0xa4>)
 801cc74:	797b      	ldrb	r3, [r7, #5]
 801cc76:	7093      	strb	r3, [r2, #2]
	sAlarm.AlarmTime.SubSeconds = my_subseconds;
 801cc78:	4a14      	ldr	r2, [pc, #80]	@ (801cccc <My_Set_RTC_Alarm_B+0xa4>)
 801cc7a:	683b      	ldr	r3, [r7, #0]
 801cc7c:	6053      	str	r3, [r2, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 801cc7e:	4b13      	ldr	r3, [pc, #76]	@ (801cccc <My_Set_RTC_Alarm_B+0xa4>)
 801cc80:	2200      	movs	r2, #0
 801cc82:	60da      	str	r2, [r3, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 801cc84:	4b11      	ldr	r3, [pc, #68]	@ (801cccc <My_Set_RTC_Alarm_B+0xa4>)
 801cc86:	2200      	movs	r2, #0
 801cc88:	611a      	str	r2, [r3, #16]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 801cc8a:	4b10      	ldr	r3, [pc, #64]	@ (801cccc <My_Set_RTC_Alarm_B+0xa4>)
 801cc8c:	2200      	movs	r2, #0
 801cc8e:	615a      	str	r2, [r3, #20]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 801cc90:	4b0e      	ldr	r3, [pc, #56]	@ (801cccc <My_Set_RTC_Alarm_B+0xa4>)
 801cc92:	2200      	movs	r2, #0
 801cc94:	619a      	str	r2, [r3, #24]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 801cc96:	4b0d      	ldr	r3, [pc, #52]	@ (801cccc <My_Set_RTC_Alarm_B+0xa4>)
 801cc98:	2200      	movs	r2, #0
 801cc9a:	621a      	str	r2, [r3, #32]
	sAlarm.AlarmDateWeekDay = 0x1;
 801cc9c:	4b0b      	ldr	r3, [pc, #44]	@ (801cccc <My_Set_RTC_Alarm_B+0xa4>)
 801cc9e:	2201      	movs	r2, #1
 801cca0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	sAlarm.Alarm = RTC_ALARM_B;
 801cca4:	4b09      	ldr	r3, [pc, #36]	@ (801cccc <My_Set_RTC_Alarm_B+0xa4>)
 801cca6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801ccaa:	629a      	str	r2, [r3, #40]	@ 0x28

	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);								// Set RTC Time (this Command needed for Set Alarm)
 801ccac:	2200      	movs	r2, #0
 801ccae:	4906      	ldr	r1, [pc, #24]	@ (801ccc8 <My_Set_RTC_Alarm_B+0xa0>)
 801ccb0:	4807      	ldr	r0, [pc, #28]	@ (801ccd0 <My_Set_RTC_Alarm_B+0xa8>)
 801ccb2:	f7e9 fdb5 	bl	8006820 <HAL_RTC_SetTime>
	HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);						// Set RTC Alarm Time with Interrupt
 801ccb6:	2200      	movs	r2, #0
 801ccb8:	4904      	ldr	r1, [pc, #16]	@ (801cccc <My_Set_RTC_Alarm_B+0xa4>)
 801ccba:	4805      	ldr	r0, [pc, #20]	@ (801ccd0 <My_Set_RTC_Alarm_B+0xa8>)
 801ccbc:	f7e9 ff34 	bl	8006b28 <HAL_RTC_SetAlarm_IT>
}
 801ccc0:	bf00      	nop
 801ccc2:	3708      	adds	r7, #8
 801ccc4:	46bd      	mov	sp, r7
 801ccc6:	bd80      	pop	{r7, pc}
 801ccc8:	20001bfc 	.word	0x20001bfc
 801cccc:	20001c10 	.word	0x20001c10
 801ccd0:	20000750 	.word	0x20000750

0801ccd4 <My_SystemClock_Config>:

void My_SystemClock_Config(void)
{
 801ccd4:	b580      	push	{r7, lr}
 801ccd6:	b09a      	sub	sp, #104	@ 0x68
 801ccd8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801ccda:	f107 0320 	add.w	r3, r7, #32
 801ccde:	2248      	movs	r2, #72	@ 0x48
 801cce0:	2100      	movs	r1, #0
 801cce2:	4618      	mov	r0, r3
 801cce4:	f002 ffcc 	bl	801fc80 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 801cce8:	1d3b      	adds	r3, r7, #4
 801ccea:	2200      	movs	r2, #0
 801ccec:	601a      	str	r2, [r3, #0]
 801ccee:	605a      	str	r2, [r3, #4]
 801ccf0:	609a      	str	r2, [r3, #8]
 801ccf2:	60da      	str	r2, [r3, #12]
 801ccf4:	611a      	str	r2, [r3, #16]
 801ccf6:	615a      	str	r2, [r3, #20]
 801ccf8:	619a      	str	r2, [r3, #24]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 801ccfa:	f7e8 f819 	bl	8004d30 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 801ccfe:	2000      	movs	r0, #0
 801cd00:	f7fe fcce 	bl	801b6a0 <LL_RCC_LSE_SetDriveCapability>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 801cd04:	4b1e      	ldr	r3, [pc, #120]	@ (801cd80 <My_SystemClock_Config+0xac>)
 801cd06:	681b      	ldr	r3, [r3, #0]
 801cd08:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 801cd0c:	4a1c      	ldr	r2, [pc, #112]	@ (801cd80 <My_SystemClock_Config+0xac>)
 801cd0e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 801cd12:	6013      	str	r3, [r2, #0]
 801cd14:	4b1a      	ldr	r3, [pc, #104]	@ (801cd80 <My_SystemClock_Config+0xac>)
 801cd16:	681b      	ldr	r3, [r3, #0]
 801cd18:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801cd1c:	603b      	str	r3, [r7, #0]
 801cd1e:	683b      	ldr	r3, [r7, #0]

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 801cd20:	2324      	movs	r3, #36	@ 0x24
 801cd22:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 801cd24:	2381      	movs	r3, #129	@ 0x81
 801cd26:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 801cd28:	2301      	movs	r3, #1
 801cd2a:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 801cd2c:	2300      	movs	r3, #0
 801cd2e:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;				// Set Clock Frequency Below 16 MHz to allow Undervolting
 801cd30:	2370      	movs	r3, #112	@ 0x70
 801cd32:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 801cd34:	2300      	movs	r3, #0
 801cd36:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801cd38:	f107 0320 	add.w	r3, r7, #32
 801cd3c:	4618      	mov	r0, r3
 801cd3e:	f7e8 fc91 	bl	8005664 <HAL_RCC_OscConfig>
 801cd42:	4603      	mov	r3, r0
 801cd44:	2b00      	cmp	r3, #0
 801cd46:	d001      	beq.n	801cd4c <My_SystemClock_Config+0x78>
	{
		Error_Handler();
 801cd48:	f7e4 fad4 	bl	80012f4 <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 801cd4c:	234f      	movs	r3, #79	@ 0x4f
 801cd4e:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
			|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 801cd50:	2300      	movs	r3, #0
 801cd52:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801cd54:	2300      	movs	r3, #0
 801cd56:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 801cd58:	2300      	movs	r3, #0
 801cd5a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 801cd5c:	2300      	movs	r3, #0
 801cd5e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 801cd60:	2300      	movs	r3, #0
 801cd62:	61fb      	str	r3, [r7, #28]


	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 801cd64:	1d3b      	adds	r3, r7, #4
 801cd66:	2102      	movs	r1, #2
 801cd68:	4618      	mov	r0, r3
 801cd6a:	f7e8 fffd 	bl	8005d68 <HAL_RCC_ClockConfig>
 801cd6e:	4603      	mov	r3, r0
 801cd70:	2b00      	cmp	r3, #0
 801cd72:	d001      	beq.n	801cd78 <My_SystemClock_Config+0xa4>
	{
		Error_Handler();
 801cd74:	f7e4 fabe 	bl	80012f4 <Error_Handler>
	}
}
 801cd78:	bf00      	nop
 801cd7a:	3768      	adds	r7, #104	@ 0x68
 801cd7c:	46bd      	mov	sp, r7
 801cd7e:	bd80      	pop	{r7, pc}
 801cd80:	58000400 	.word	0x58000400

0801cd84 <My_Trise_Meas>:
	CLEAR_BIT(RCC->AHB2ENR, RCC_AHB2ENR_GPIOBEN);
	CLEAR_BIT(RCC->AHB2ENR, RCC_AHB2ENR_GPIOCEN);
}

void My_Trise_Meas(void)
{
 801cd84:	b580      	push	{r7, lr}
 801cd86:	af00      	add	r7, sp, #0
	/* This Function measures the charging time (Trise) during the Energy Harvesting State (EHS) from the last SMS State to the following RTS State */

	my_Trise_time_stop = HAL_LPTIM_ReadCounter(&hlptim1);// Stop Measuring Trise
 801cd88:	481a      	ldr	r0, [pc, #104]	@ (801cdf4 <My_Trise_Meas+0x70>)
 801cd8a:	f000 fc65 	bl	801d658 <HAL_LPTIM_ReadCounter>
 801cd8e:	4603      	mov	r3, r0
 801cd90:	b29a      	uxth	r2, r3
 801cd92:	4b19      	ldr	r3, [pc, #100]	@ (801cdf8 <My_Trise_Meas+0x74>)
 801cd94:	801a      	strh	r2, [r3, #0]

	if (my_Trise_time_stop > my_Trise_time_start)
 801cd96:	4b18      	ldr	r3, [pc, #96]	@ (801cdf8 <My_Trise_Meas+0x74>)
 801cd98:	881a      	ldrh	r2, [r3, #0]
 801cd9a:	4b18      	ldr	r3, [pc, #96]	@ (801cdfc <My_Trise_Meas+0x78>)
 801cd9c:	881b      	ldrh	r3, [r3, #0]
 801cd9e:	429a      	cmp	r2, r3
 801cda0:	d908      	bls.n	801cdb4 <My_Trise_Meas+0x30>
	{
		my_Trise_time = my_Trise_time_stop - my_Trise_time_start;
 801cda2:	4b15      	ldr	r3, [pc, #84]	@ (801cdf8 <My_Trise_Meas+0x74>)
 801cda4:	881a      	ldrh	r2, [r3, #0]
 801cda6:	4b15      	ldr	r3, [pc, #84]	@ (801cdfc <My_Trise_Meas+0x78>)
 801cda8:	881b      	ldrh	r3, [r3, #0]
 801cdaa:	1ad3      	subs	r3, r2, r3
 801cdac:	b29a      	uxth	r2, r3
 801cdae:	4b14      	ldr	r3, [pc, #80]	@ (801ce00 <My_Trise_Meas+0x7c>)
 801cdb0:	801a      	strh	r2, [r3, #0]
		else
		{
			my_Trise_time = my_Trise_time_stop + (T_SMW) - my_Trise_time_start;
		}
	}
}
 801cdb2:	e01c      	b.n	801cdee <My_Trise_Meas+0x6a>
		if (my_Cmode == EOC)
 801cdb4:	4b13      	ldr	r3, [pc, #76]	@ (801ce04 <My_Trise_Meas+0x80>)
 801cdb6:	781b      	ldrb	r3, [r3, #0]
 801cdb8:	2b02      	cmp	r3, #2
 801cdba:	d10c      	bne.n	801cdd6 <My_Trise_Meas+0x52>
			my_Trise_time = my_Trise_time_stop + (T_ESW + T_SMW) - my_Trise_time_start;
 801cdbc:	4b0e      	ldr	r3, [pc, #56]	@ (801cdf8 <My_Trise_Meas+0x74>)
 801cdbe:	881a      	ldrh	r2, [r3, #0]
 801cdc0:	4b0e      	ldr	r3, [pc, #56]	@ (801cdfc <My_Trise_Meas+0x78>)
 801cdc2:	881b      	ldrh	r3, [r3, #0]
 801cdc4:	1ad3      	subs	r3, r2, r3
 801cdc6:	b29b      	uxth	r3, r3
 801cdc8:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 801cdcc:	3310      	adds	r3, #16
 801cdce:	b29a      	uxth	r2, r3
 801cdd0:	4b0b      	ldr	r3, [pc, #44]	@ (801ce00 <My_Trise_Meas+0x7c>)
 801cdd2:	801a      	strh	r2, [r3, #0]
}
 801cdd4:	e00b      	b.n	801cdee <My_Trise_Meas+0x6a>
			my_Trise_time = my_Trise_time_stop + (T_SMW) - my_Trise_time_start;
 801cdd6:	4b08      	ldr	r3, [pc, #32]	@ (801cdf8 <My_Trise_Meas+0x74>)
 801cdd8:	881a      	ldrh	r2, [r3, #0]
 801cdda:	4b08      	ldr	r3, [pc, #32]	@ (801cdfc <My_Trise_Meas+0x78>)
 801cddc:	881b      	ldrh	r3, [r3, #0]
 801cdde:	1ad3      	subs	r3, r2, r3
 801cde0:	b29b      	uxth	r3, r3
 801cde2:	f503 53a0 	add.w	r3, r3, #5120	@ 0x1400
 801cde6:	3308      	adds	r3, #8
 801cde8:	b29a      	uxth	r2, r3
 801cdea:	4b05      	ldr	r3, [pc, #20]	@ (801ce00 <My_Trise_Meas+0x7c>)
 801cdec:	801a      	strh	r2, [r3, #0]
}
 801cdee:	bf00      	nop
 801cdf0:	bd80      	pop	{r7, pc}
 801cdf2:	bf00      	nop
 801cdf4:	20001b40 	.word	0x20001b40
 801cdf8:	20001bc4 	.word	0x20001bc4
 801cdfc:	20001bc2 	.word	0x20001bc2
 801ce00:	20001bc6 	.word	0x20001bc6
 801ce04:	20001bea 	.word	0x20001bea

0801ce08 <My_PVD_Delay>:

void My_PVD_Delay(void)
{
 801ce08:	b580      	push	{r7, lr}
 801ce0a:	af00      	add	r7, sp, #0
	/* This Function creates a Delay to allow the PVD to settle */

	HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A); 	// Deactivate the RTC Alarm A
 801ce0c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801ce10:	4808      	ldr	r0, [pc, #32]	@ (801ce34 <My_PVD_Delay+0x2c>)
 801ce12:	f7e9 ff95 	bl	8006d40 <HAL_RTC_DeactivateAlarm>

	My_Set_RTC_Alarm_A								// Sets the RTC Alarm A Timer to create a Delay of time T_Delay_PVD
 801ce16:	2300      	movs	r3, #0
 801ce18:	2202      	movs	r2, #2
 801ce1a:	2100      	movs	r1, #0
 801ce1c:	2000      	movs	r0, #0
 801ce1e:	f7ff feb3 	bl	801cb88 <My_Set_RTC_Alarm_A>
			T_Delay_PVD_hours,
			T_Delay_PVD_minutes,
			T_Delay_PVD_seconds,
			T_Delay_PVD_subseconds
	);
	__WFI(); 										// Wait for the Interrupt
 801ce22:	bf30      	wfi

	HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);   	// Deactivate the RTC Alarm A
 801ce24:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801ce28:	4802      	ldr	r0, [pc, #8]	@ (801ce34 <My_PVD_Delay+0x2c>)
 801ce2a:	f7e9 ff89 	bl	8006d40 <HAL_RTC_DeactivateAlarm>
}
 801ce2e:	bf00      	nop
 801ce30:	bd80      	pop	{r7, pc}
 801ce32:	bf00      	nop
 801ce34:	20000750 	.word	0x20000750

0801ce38 <My_PS_Detection>:

void My_PS_Detection(void)
{
 801ce38:	b580      	push	{r7, lr}
 801ce3a:	af00      	add	r7, sp, #0
	My_Set_PVD(VPS_CHECK, PWR_PVD_MODE_NORMAL);  	  					// Configures PVD at the Highest Voltage and Normal Mode
 801ce3c:	2100      	movs	r1, #0
 801ce3e:	200c      	movs	r0, #12
 801ce40:	f7ff fd82 	bl	801c948 <My_Set_PVD>

	if (__HAL_PWR_GET_FLAG(PWR_FLAG_PVDO) == 0)							// If VDD is > 2.9 Volt and and Internal Reference is Ready
 801ce44:	4b0b      	ldr	r3, [pc, #44]	@ (801ce74 <My_PS_Detection+0x3c>)
 801ce46:	695b      	ldr	r3, [r3, #20]
 801ce48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801ce4c:	2b00      	cmp	r3, #0
 801ce4e:	d103      	bne.n	801ce58 <My_PS_Detection+0x20>
	{
		my_Current_State = PSS;											// System is Supplied by a Power Supply with voltage > 3.0 V
 801ce50:	4b09      	ldr	r3, [pc, #36]	@ (801ce78 <My_PS_Detection+0x40>)
 801ce52:	2201      	movs	r2, #1
 801ce54:	701a      	strb	r2, [r3, #0]
		my_Current_State = EHS;											// Set Current State as Energy Harvesting State (EHS)
		my_Next_State = RTS;											// Set Next State as Radio Transmission State (RTS)
		My_Enter_Stop2_Mode_WFI(VRTS, PWR_PVD_MODE_IT_RISING);			// Enter STOP2 Mode and WFI
//		My_Enter_Stop2_Mode_WFI(V2P5, PWR_PVD_MODE_IT_RISING);
	}
}
 801ce56:	e00a      	b.n	801ce6e <My_PS_Detection+0x36>
		my_Current_State = EHS;											// Set Current State as Energy Harvesting State (EHS)
 801ce58:	4b07      	ldr	r3, [pc, #28]	@ (801ce78 <My_PS_Detection+0x40>)
 801ce5a:	2203      	movs	r2, #3
 801ce5c:	701a      	strb	r2, [r3, #0]
		my_Next_State = RTS;											// Set Next State as Radio Transmission State (RTS)
 801ce5e:	4b07      	ldr	r3, [pc, #28]	@ (801ce7c <My_PS_Detection+0x44>)
 801ce60:	2202      	movs	r2, #2
 801ce62:	701a      	strb	r2, [r3, #0]
		My_Enter_Stop2_Mode_WFI(VRTS, PWR_PVD_MODE_IT_RISING);			// Enter STOP2 Mode and WFI
 801ce64:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801ce68:	200c      	movs	r0, #12
 801ce6a:	f7ff fce7 	bl	801c83c <My_Enter_Stop2_Mode_WFI>
}
 801ce6e:	bf00      	nop
 801ce70:	bd80      	pop	{r7, pc}
 801ce72:	bf00      	nop
 801ce74:	58000400 	.word	0x58000400
 801ce78:	20001be9 	.word	0x20001be9
 801ce7c:	20000638 	.word	0x20000638

0801ce80 <My_VDD_to_ES_Switch>:


#if STEVAL_HARVEST1
void My_VDD_to_ES_Switch(My_Switch_td mode)	// Opens and Closes the switches (High side of a GPIO) between Vdd and ES net
{
 801ce80:	b580      	push	{r7, lr}
 801ce82:	b08c      	sub	sp, #48	@ 0x30
 801ce84:	af00      	add	r7, sp, #0
 801ce86:	4603      	mov	r3, r0
 801ce88:	71fb      	strb	r3, [r7, #7]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 801ce8a:	2001      	movs	r0, #1
 801ce8c:	f7fe fc30 	bl	801b6f0 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 801ce90:	2002      	movs	r0, #2
 801ce92:	f7fe fc2d 	bl	801b6f0 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 801ce96:	2004      	movs	r0, #4
 801ce98:	f7fe fc2a 	bl	801b6f0 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOH_CLK_ENABLE();
 801ce9c:	2080      	movs	r0, #128	@ 0x80
 801ce9e:	f7fe fc27 	bl	801b6f0 <LL_AHB2_GRP1_EnableClock>

	if (mode == Switch_OPEN)
 801cea2:	79fb      	ldrb	r3, [r7, #7]
 801cea4:	2b00      	cmp	r3, #0
 801cea6:	d11d      	bne.n	801cee4 <My_VDD_to_ES_Switch+0x64>
	{
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 801cea8:	f107 031c 	add.w	r3, r7, #28
 801ceac:	2200      	movs	r2, #0
 801ceae:	601a      	str	r2, [r3, #0]
 801ceb0:	605a      	str	r2, [r3, #4]
 801ceb2:	609a      	str	r2, [r3, #8]
 801ceb4:	60da      	str	r2, [r3, #12]
 801ceb6:	611a      	str	r2, [r3, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801ceb8:	2303      	movs	r3, #3
 801ceba:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 801cebc:	2300      	movs	r3, #0
 801cebe:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Configure GPIO Pins: PC13 */
		GPIO_InitStruct.Pin =  ES_Pin4;
 801cec0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801cec4:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(ES_PortC, &GPIO_InitStruct);
 801cec6:	f107 031c 	add.w	r3, r7, #28
 801ceca:	4619      	mov	r1, r3
 801cecc:	4829      	ldr	r0, [pc, #164]	@ (801cf74 <My_VDD_to_ES_Switch+0xf4>)
 801cece:	f7e6 fed5 	bl	8003c7c <HAL_GPIO_Init>

		/* Configure GPIO Pins: PB3, PB4, PB14 */
		GPIO_InitStruct.Pin = ES_Pin1 | ES_Pin2 | ES_Pin3;
 801ced2:	f244 0318 	movw	r3, #16408	@ 0x4018
 801ced6:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(ES_PortB, &GPIO_InitStruct);
 801ced8:	f107 031c 	add.w	r3, r7, #28
 801cedc:	4619      	mov	r1, r3
 801cede:	4826      	ldr	r0, [pc, #152]	@ (801cf78 <My_VDD_to_ES_Switch+0xf8>)
 801cee0:	f7e6 fecc 	bl	8003c7c <HAL_GPIO_Init>
	}

	if (mode == Switch_CLOSED)
 801cee4:	79fb      	ldrb	r3, [r7, #7]
 801cee6:	2b01      	cmp	r3, #1
 801cee8:	d133      	bne.n	801cf52 <My_VDD_to_ES_Switch+0xd2>
	{
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 801ceea:	f107 0308 	add.w	r3, r7, #8
 801ceee:	2200      	movs	r2, #0
 801cef0:	601a      	str	r2, [r3, #0]
 801cef2:	605a      	str	r2, [r3, #4]
 801cef4:	609a      	str	r2, [r3, #8]
 801cef6:	60da      	str	r2, [r3, #12]
 801cef8:	611a      	str	r2, [r3, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801cefa:	2301      	movs	r3, #1
 801cefc:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 801cefe:	2300      	movs	r3, #0
 801cf00:	613b      	str	r3, [r7, #16]

		/* Configure GPIO Pins: PC13 */
		GPIO_InitStruct.Pin =  ES_Pin4;
 801cf02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801cf06:	60bb      	str	r3, [r7, #8]
		HAL_GPIO_Init(ES_PortC, &GPIO_InitStruct);
 801cf08:	f107 0308 	add.w	r3, r7, #8
 801cf0c:	4619      	mov	r1, r3
 801cf0e:	4819      	ldr	r0, [pc, #100]	@ (801cf74 <My_VDD_to_ES_Switch+0xf4>)
 801cf10:	f7e6 feb4 	bl	8003c7c <HAL_GPIO_Init>
		HAL_GPIO_WritePin(ES_PortC, ES_Pin4, GPIO_PIN_SET); // Close the High Side of the GPIO to connect ES_Pin4 to Vdd
 801cf14:	2201      	movs	r2, #1
 801cf16:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 801cf1a:	4816      	ldr	r0, [pc, #88]	@ (801cf74 <My_VDD_to_ES_Switch+0xf4>)
 801cf1c:	f7e7 f8dc 	bl	80040d8 <HAL_GPIO_WritePin>

		/* Configure GPIO Pins: PB3, PB4, PB14 */
		GPIO_InitStruct.Pin = ES_Pin1 | ES_Pin2 | ES_Pin3;
 801cf20:	f244 0318 	movw	r3, #16408	@ 0x4018
 801cf24:	60bb      	str	r3, [r7, #8]
		HAL_GPIO_Init(ES_PortB, &GPIO_InitStruct);
 801cf26:	f107 0308 	add.w	r3, r7, #8
 801cf2a:	4619      	mov	r1, r3
 801cf2c:	4812      	ldr	r0, [pc, #72]	@ (801cf78 <My_VDD_to_ES_Switch+0xf8>)
 801cf2e:	f7e6 fea5 	bl	8003c7c <HAL_GPIO_Init>
		HAL_GPIO_WritePin(ES_PortB, ES_Pin1, GPIO_PIN_SET); // Close the High Side of the GPIO to connect ES_Pin1 to Vdd
 801cf32:	2201      	movs	r2, #1
 801cf34:	2108      	movs	r1, #8
 801cf36:	4810      	ldr	r0, [pc, #64]	@ (801cf78 <My_VDD_to_ES_Switch+0xf8>)
 801cf38:	f7e7 f8ce 	bl	80040d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ES_PortB, ES_Pin2, GPIO_PIN_SET); // Close the High Side of the GPIO to connect ES_Pin2 to Vdd
 801cf3c:	2201      	movs	r2, #1
 801cf3e:	2110      	movs	r1, #16
 801cf40:	480d      	ldr	r0, [pc, #52]	@ (801cf78 <My_VDD_to_ES_Switch+0xf8>)
 801cf42:	f7e7 f8c9 	bl	80040d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ES_PortB, ES_Pin3, GPIO_PIN_SET); // Close the High Side of the GPIO to connect ES_Pin3 to Vdd
 801cf46:	2201      	movs	r2, #1
 801cf48:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 801cf4c:	480a      	ldr	r0, [pc, #40]	@ (801cf78 <My_VDD_to_ES_Switch+0xf8>)
 801cf4e:	f7e7 f8c3 	bl	80040d8 <HAL_GPIO_WritePin>
	}

	__HAL_RCC_GPIOA_CLK_DISABLE();
 801cf52:	2001      	movs	r0, #1
 801cf54:	f7fe fbe4 	bl	801b720 <LL_AHB2_GRP1_DisableClock>
	__HAL_RCC_GPIOB_CLK_DISABLE();
 801cf58:	2002      	movs	r0, #2
 801cf5a:	f7fe fbe1 	bl	801b720 <LL_AHB2_GRP1_DisableClock>
	__HAL_RCC_GPIOC_CLK_DISABLE();
 801cf5e:	2004      	movs	r0, #4
 801cf60:	f7fe fbde 	bl	801b720 <LL_AHB2_GRP1_DisableClock>
	__HAL_RCC_GPIOH_CLK_DISABLE();
 801cf64:	2080      	movs	r0, #128	@ 0x80
 801cf66:	f7fe fbdb 	bl	801b720 <LL_AHB2_GRP1_DisableClock>
}
 801cf6a:	bf00      	nop
 801cf6c:	3730      	adds	r7, #48	@ 0x30
 801cf6e:	46bd      	mov	sp, r7
 801cf70:	bd80      	pop	{r7, pc}
 801cf72:	bf00      	nop
 801cf74:	48000800 	.word	0x48000800
 801cf78:	48000400 	.word	0x48000400

0801cf7c <My_VDD_to_VDDS2_Switch>:
	__HAL_RCC_GPIOC_CLK_DISABLE();
	__HAL_RCC_GPIOH_CLK_DISABLE();
}

void My_VDD_to_VDDS2_Switch(My_Switch_td mode)	// Opens and Closes the switches (High side of a GPIO) between Vdd and VDDS2
{
 801cf7c:	b580      	push	{r7, lr}
 801cf7e:	b088      	sub	sp, #32
 801cf80:	af00      	add	r7, sp, #0
 801cf82:	4603      	mov	r3, r0
 801cf84:	71fb      	strb	r3, [r7, #7]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 801cf86:	2001      	movs	r0, #1
 801cf88:	f7fe fbb2 	bl	801b6f0 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 801cf8c:	2002      	movs	r0, #2
 801cf8e:	f7fe fbaf 	bl	801b6f0 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 801cf92:	2004      	movs	r0, #4
 801cf94:	f7fe fbac 	bl	801b6f0 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOH_CLK_ENABLE();
 801cf98:	2080      	movs	r0, #128	@ 0x80
 801cf9a:	f7fe fba9 	bl	801b6f0 <LL_AHB2_GRP1_EnableClock>

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 801cf9e:	f107 030c 	add.w	r3, r7, #12
 801cfa2:	2200      	movs	r2, #0
 801cfa4:	601a      	str	r2, [r3, #0]
 801cfa6:	605a      	str	r2, [r3, #4]
 801cfa8:	609a      	str	r2, [r3, #8]
 801cfaa:	60da      	str	r2, [r3, #12]
 801cfac:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801cfae:	2301      	movs	r3, #1
 801cfb0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801cfb2:	2300      	movs	r3, #0
 801cfb4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801cfb6:	2303      	movs	r3, #3
 801cfb8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pin =  VDDS2_Pin;
 801cfba:	2310      	movs	r3, #16
 801cfbc:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(VDDS2_Port, &GPIO_InitStruct);
 801cfbe:	f107 030c 	add.w	r3, r7, #12
 801cfc2:	4619      	mov	r1, r3
 801cfc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801cfc8:	f7e6 fe58 	bl	8003c7c <HAL_GPIO_Init>

	if (mode == Switch_CLOSED)
 801cfcc:	79fb      	ldrb	r3, [r7, #7]
 801cfce:	2b01      	cmp	r3, #1
 801cfd0:	d106      	bne.n	801cfe0 <My_VDD_to_VDDS2_Switch+0x64>
	{
		HAL_GPIO_WritePin(VDDS2_Port, VDDS2_Pin, GPIO_PIN_SET); // Close the High Side of the GPIO to connect VDDS2 to Vdd
 801cfd2:	2201      	movs	r2, #1
 801cfd4:	2110      	movs	r1, #16
 801cfd6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801cfda:	f7e7 f87d 	bl	80040d8 <HAL_GPIO_WritePin>
 801cfde:	e005      	b.n	801cfec <My_VDD_to_VDDS2_Switch+0x70>
	}
	else
	{
		HAL_GPIO_WritePin(VDDS2_Port, VDDS2_Pin, GPIO_PIN_RESET); // Close the High Side of the GPIO to connect VDDS2 to Vdd
 801cfe0:	2200      	movs	r2, #0
 801cfe2:	2110      	movs	r1, #16
 801cfe4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801cfe8:	f7e7 f876 	bl	80040d8 <HAL_GPIO_WritePin>
	}

	__HAL_RCC_GPIOA_CLK_DISABLE();
 801cfec:	2001      	movs	r0, #1
 801cfee:	f7fe fb97 	bl	801b720 <LL_AHB2_GRP1_DisableClock>
	__HAL_RCC_GPIOB_CLK_DISABLE();
 801cff2:	2002      	movs	r0, #2
 801cff4:	f7fe fb94 	bl	801b720 <LL_AHB2_GRP1_DisableClock>
	__HAL_RCC_GPIOC_CLK_DISABLE();
 801cff8:	2004      	movs	r0, #4
 801cffa:	f7fe fb91 	bl	801b720 <LL_AHB2_GRP1_DisableClock>
	__HAL_RCC_GPIOH_CLK_DISABLE();
 801cffe:	2080      	movs	r0, #128	@ 0x80
 801d000:	f7fe fb8e 	bl	801b720 <LL_AHB2_GRP1_DisableClock>
}
 801d004:	bf00      	nop
 801d006:	3720      	adds	r7, #32
 801d008:	46bd      	mov	sp, r7
 801d00a:	bd80      	pop	{r7, pc}

0801d00c <My_HAL_Delay>:
#endif

void My_HAL_Delay(__IO uint32_t Delay)
{
 801d00c:	b580      	push	{r7, lr}
 801d00e:	b082      	sub	sp, #8
 801d010:	af00      	add	r7, sp, #0
 801d012:	6078      	str	r0, [r7, #4]
	/* TIMER_IF can be based on other counter the SysTick e.g. RTC */
	/* USER CODE BEGIN HAL_Delay_1 */

	/* USER CODE END HAL_Delay_1 */
	TIMER_IF_DelayMs(Delay);
 801d014:	687b      	ldr	r3, [r7, #4]
 801d016:	4618      	mov	r0, r3
 801d018:	f7e4 fde3 	bl	8001be2 <TIMER_IF_DelayMs>
	/* USER CODE BEGIN HAL_Delay_2 */

	/* USER CODE END HAL_Delay_2 */
}
 801d01c:	bf00      	nop
 801d01e:	3708      	adds	r7, #8
 801d020:	46bd      	mov	sp, r7
 801d022:	bd80      	pop	{r7, pc}

0801d024 <SystemInit>:
	return deviceAddress;
}

#if !MY_SYSTEM_INIT
void SystemInit(void)	// System Init Function
{
 801d024:	b580      	push	{r7, lr}
 801d026:	af00      	add	r7, sp, #0
	SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
#else
	//	My_Set_GPIO_ANALOG();							// Configure all GPIOs in Analog Mode (High Impedance)
#endif

	HAL_Init();										// Configure HAL
 801d028:	f7e5 fcb8 	bl	800299c <HAL_Init>

#if !(MY_DEBUGGER_ENABLED || MY_LPTIM_Monitor || MY_RTCB_Monitor)
	My_Set_All_GPIO_To_Analog_Mode();											// Set all GPIO in Analog Mode
 801d02c:	f7ff fbbe 	bl	801c7ac <My_Set_All_GPIO_To_Analog_Mode>
#endif

	HAL_PWR_EnablePVD();							// Enable PVD
 801d030:	f7e7 feca 	bl	8004dc8 <HAL_PWR_EnablePVD>

	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2); // Undervolting
 801d034:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 801d038:	f7e7 ff50 	bl	8004edc <HAL_PWREx_ControlVoltageScaling>

	My_Set_PVD(V2P0, PWR_PVD_MODE_IT_RISING);		// Configure PVD
 801d03c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801d040:	2000      	movs	r0, #0
 801d042:	f7ff fc81 	bl	801c948 <My_Set_PVD>
	HAL_PWREx_EnableLowPowerRunMode();				// Enter Low Power Run Mode
 801d046:	f7e7 ff9d 	bl	8004f84 <HAL_PWREx_EnableLowPowerRunMode>
	HAL_NVIC_EnableIRQ(PVD_PVM_IRQn); 				// Enable PVD Interrupt
 801d04a:	2001      	movs	r0, #1
 801d04c:	f7e6 f9d3 	bl	80033f6 <HAL_NVIC_EnableIRQ>
	HAL_PWREx_EnterSTOP0Mode(PWR_STOPENTRY_WFI);	// Enter STOP0 mode and WFI
 801d050:	2001      	movs	r0, #1
 801d052:	f7e7 ffdb 	bl	800500c <HAL_PWREx_EnterSTOP0Mode>
	HAL_PWREx_DisableLowPowerRunMode();				// Disable Low Power Run Mode
 801d056:	f7e7 ffa3 	bl	8004fa0 <HAL_PWREx_DisableLowPowerRunMode>
}
 801d05a:	bf00      	nop
 801d05c:	bd80      	pop	{r7, pc}
	...

0801d060 <LL_EXTI_IsActiveFlag_0_31>:
{
 801d060:	b480      	push	{r7}
 801d062:	b083      	sub	sp, #12
 801d064:	af00      	add	r7, sp, #0
 801d066:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 801d068:	4b07      	ldr	r3, [pc, #28]	@ (801d088 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 801d06a:	68da      	ldr	r2, [r3, #12]
 801d06c:	687b      	ldr	r3, [r7, #4]
 801d06e:	4013      	ands	r3, r2
 801d070:	687a      	ldr	r2, [r7, #4]
 801d072:	429a      	cmp	r2, r3
 801d074:	d101      	bne.n	801d07a <LL_EXTI_IsActiveFlag_0_31+0x1a>
 801d076:	2301      	movs	r3, #1
 801d078:	e000      	b.n	801d07c <LL_EXTI_IsActiveFlag_0_31+0x1c>
 801d07a:	2300      	movs	r3, #0
}
 801d07c:	4618      	mov	r0, r3
 801d07e:	370c      	adds	r7, #12
 801d080:	46bd      	mov	sp, r7
 801d082:	bc80      	pop	{r7}
 801d084:	4770      	bx	lr
 801d086:	bf00      	nop
 801d088:	58000800 	.word	0x58000800

0801d08c <LL_EXTI_ClearFlag_0_31>:
{
 801d08c:	b480      	push	{r7}
 801d08e:	b083      	sub	sp, #12
 801d090:	af00      	add	r7, sp, #0
 801d092:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 801d094:	4a03      	ldr	r2, [pc, #12]	@ (801d0a4 <LL_EXTI_ClearFlag_0_31+0x18>)
 801d096:	687b      	ldr	r3, [r7, #4]
 801d098:	60d3      	str	r3, [r2, #12]
}
 801d09a:	bf00      	nop
 801d09c:	370c      	adds	r7, #12
 801d09e:	46bd      	mov	sp, r7
 801d0a0:	bc80      	pop	{r7}
 801d0a2:	4770      	bx	lr
 801d0a4:	58000800 	.word	0x58000800

0801d0a8 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 801d0a8:	b580      	push	{r7, lr}
 801d0aa:	b084      	sub	sp, #16
 801d0ac:	af00      	add	r7, sp, #0
 801d0ae:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 801d0b0:	687b      	ldr	r3, [r7, #4]
 801d0b2:	681b      	ldr	r3, [r3, #0]
 801d0b4:	4a11      	ldr	r2, [pc, #68]	@ (801d0fc <HAL_COMP_IRQHandler+0x54>)
 801d0b6:	4293      	cmp	r3, r2
 801d0b8:	d102      	bne.n	801d0c0 <HAL_COMP_IRQHandler+0x18>
 801d0ba:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 801d0be:	e001      	b.n	801d0c4 <HAL_COMP_IRQHandler+0x1c>
 801d0c0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 801d0c4:	60fb      	str	r3, [r7, #12]

  /* Check COMP EXTI flag */
  if(LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 801d0c6:	68f8      	ldr	r0, [r7, #12]
 801d0c8:	f7ff ffca 	bl	801d060 <LL_EXTI_IsActiveFlag_0_31>
 801d0cc:	4603      	mov	r3, r0
 801d0ce:	2b00      	cmp	r3, #0
 801d0d0:	d010      	beq.n	801d0f4 <HAL_COMP_IRQHandler+0x4c>
  {
    /* Check whether comparator is in independent or window mode */
    if(READ_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE) != 0UL)
 801d0d2:	4b0b      	ldr	r3, [pc, #44]	@ (801d100 <HAL_COMP_IRQHandler+0x58>)
 801d0d4:	681b      	ldr	r3, [r3, #0]
 801d0d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801d0da:	2b00      	cmp	r3, #0
 801d0dc:	d004      	beq.n	801d0e8 <HAL_COMP_IRQHandler+0x40>
      /* Note: Pair of comparators in window mode can both trig IRQ when      */
      /*       input voltage is changing from "out of window" area            */
      /*       (low or high ) to the other "out of window" area (high or low).*/
      /*       Both flags must be cleared to call comparator trigger          */
      /*       callback is called once.                                       */
      LL_EXTI_ClearFlag_0_31((COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 801d0de:	f44f 00c0 	mov.w	r0, #6291456	@ 0x600000
 801d0e2:	f7ff ffd3 	bl	801d08c <LL_EXTI_ClearFlag_0_31>
 801d0e6:	e002      	b.n	801d0ee <HAL_COMP_IRQHandler+0x46>
    }
    else
    {
      /* Clear COMP EXTI line pending bit */
      LL_EXTI_ClearFlag_0_31(exti_line);
 801d0e8:	68f8      	ldr	r0, [r7, #12]
 801d0ea:	f7ff ffcf 	bl	801d08c <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 801d0ee:	6878      	ldr	r0, [r7, #4]
 801d0f0:	f000 f808 	bl	801d104 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 801d0f4:	bf00      	nop
 801d0f6:	3710      	adds	r7, #16
 801d0f8:	46bd      	mov	sp, r7
 801d0fa:	bd80      	pop	{r7, pc}
 801d0fc:	40010200 	.word	0x40010200
 801d100:	40010204 	.word	0x40010204

0801d104 <HAL_COMP_TriggerCallback>:
  * @brief  Comparator trigger callback.
  * @param  hcomp  COMP handle
  * @retval None
  */
__weak void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp)
{
 801d104:	b480      	push	{r7}
 801d106:	b083      	sub	sp, #12
 801d108:	af00      	add	r7, sp, #0
 801d10a:	6078      	str	r0, [r7, #4]
  UNUSED(hcomp);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_COMP_TriggerCallback should be implemented in the user file
   */
}
 801d10c:	bf00      	nop
 801d10e:	370c      	adds	r7, #12
 801d110:	46bd      	mov	sp, r7
 801d112:	bc80      	pop	{r7}
 801d114:	4770      	bx	lr

0801d116 <LL_RCC_SetLPTIMClockSource>:
{
 801d116:	b480      	push	{r7}
 801d118:	b083      	sub	sp, #12
 801d11a:	af00      	add	r7, sp, #0
 801d11c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 801d11e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801d122:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 801d126:	687b      	ldr	r3, [r7, #4]
 801d128:	0c1b      	lsrs	r3, r3, #16
 801d12a:	041b      	lsls	r3, r3, #16
 801d12c:	43db      	mvns	r3, r3
 801d12e:	401a      	ands	r2, r3
 801d130:	687b      	ldr	r3, [r7, #4]
 801d132:	041b      	lsls	r3, r3, #16
 801d134:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801d138:	4313      	orrs	r3, r2
 801d13a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 801d13e:	bf00      	nop
 801d140:	370c      	adds	r7, #12
 801d142:	46bd      	mov	sp, r7
 801d144:	bc80      	pop	{r7}
 801d146:	4770      	bx	lr

0801d148 <LL_RCC_GetLPTIMClockSource>:
{
 801d148:	b480      	push	{r7}
 801d14a:	b083      	sub	sp, #12
 801d14c:	af00      	add	r7, sp, #0
 801d14e:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 801d150:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801d154:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 801d158:	687b      	ldr	r3, [r7, #4]
 801d15a:	4013      	ands	r3, r2
 801d15c:	0c1a      	lsrs	r2, r3, #16
 801d15e:	687b      	ldr	r3, [r7, #4]
 801d160:	4313      	orrs	r3, r2
}
 801d162:	4618      	mov	r0, r3
 801d164:	370c      	adds	r7, #12
 801d166:	46bd      	mov	sp, r7
 801d168:	bc80      	pop	{r7}
 801d16a:	4770      	bx	lr

0801d16c <LL_APB1_GRP1_ForceReset>:
{
 801d16c:	b480      	push	{r7}
 801d16e:	b083      	sub	sp, #12
 801d170:	af00      	add	r7, sp, #0
 801d172:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 801d174:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801d178:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801d17a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801d17e:	687b      	ldr	r3, [r7, #4]
 801d180:	4313      	orrs	r3, r2
 801d182:	638b      	str	r3, [r1, #56]	@ 0x38
}
 801d184:	bf00      	nop
 801d186:	370c      	adds	r7, #12
 801d188:	46bd      	mov	sp, r7
 801d18a:	bc80      	pop	{r7}
 801d18c:	4770      	bx	lr

0801d18e <LL_APB1_GRP2_ForceReset>:
{
 801d18e:	b480      	push	{r7}
 801d190:	b083      	sub	sp, #12
 801d192:	af00      	add	r7, sp, #0
 801d194:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR2, Periphs);
 801d196:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801d19a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801d19c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801d1a0:	687b      	ldr	r3, [r7, #4]
 801d1a2:	4313      	orrs	r3, r2
 801d1a4:	63cb      	str	r3, [r1, #60]	@ 0x3c
}
 801d1a6:	bf00      	nop
 801d1a8:	370c      	adds	r7, #12
 801d1aa:	46bd      	mov	sp, r7
 801d1ac:	bc80      	pop	{r7}
 801d1ae:	4770      	bx	lr

0801d1b0 <LL_APB1_GRP1_ReleaseReset>:
{
 801d1b0:	b480      	push	{r7}
 801d1b2:	b083      	sub	sp, #12
 801d1b4:	af00      	add	r7, sp, #0
 801d1b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 801d1b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801d1bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801d1be:	687b      	ldr	r3, [r7, #4]
 801d1c0:	43db      	mvns	r3, r3
 801d1c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801d1c6:	4013      	ands	r3, r2
 801d1c8:	638b      	str	r3, [r1, #56]	@ 0x38
}
 801d1ca:	bf00      	nop
 801d1cc:	370c      	adds	r7, #12
 801d1ce:	46bd      	mov	sp, r7
 801d1d0:	bc80      	pop	{r7}
 801d1d2:	4770      	bx	lr

0801d1d4 <LL_APB1_GRP2_ReleaseReset>:
{
 801d1d4:	b480      	push	{r7}
 801d1d6:	b083      	sub	sp, #12
 801d1d8:	af00      	add	r7, sp, #0
 801d1da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 801d1dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801d1e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801d1e2:	687b      	ldr	r3, [r7, #4]
 801d1e4:	43db      	mvns	r3, r3
 801d1e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801d1ea:	4013      	ands	r3, r2
 801d1ec:	63cb      	str	r3, [r1, #60]	@ 0x3c
}
 801d1ee:	bf00      	nop
 801d1f0:	370c      	adds	r7, #12
 801d1f2:	46bd      	mov	sp, r7
 801d1f4:	bc80      	pop	{r7}
 801d1f6:	4770      	bx	lr

0801d1f8 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 801d1f8:	b580      	push	{r7, lr}
 801d1fa:	b084      	sub	sp, #16
 801d1fc:	af00      	add	r7, sp, #0
 801d1fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 801d200:	687b      	ldr	r3, [r7, #4]
 801d202:	2b00      	cmp	r3, #0
 801d204:	d101      	bne.n	801d20a <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 801d206:	2301      	movs	r3, #1
 801d208:	e0b6      	b.n	801d378 <HAL_LPTIM_Init+0x180>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 801d20a:	687b      	ldr	r3, [r7, #4]
 801d20c:	685b      	ldr	r3, [r3, #4]
 801d20e:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 801d210:	687b      	ldr	r3, [r7, #4]
 801d212:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 801d216:	b2db      	uxtb	r3, r3
 801d218:	2b00      	cmp	r3, #0
 801d21a:	d106      	bne.n	801d22a <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 801d21c:	687b      	ldr	r3, [r7, #4]
 801d21e:	2200      	movs	r2, #0
 801d220:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 801d224:	6878      	ldr	r0, [r7, #4]
 801d226:	f7fe f97b 	bl	801b520 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 801d22a:	687b      	ldr	r3, [r7, #4]
 801d22c:	2202      	movs	r2, #2
 801d22e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 801d232:	687b      	ldr	r3, [r7, #4]
 801d234:	681b      	ldr	r3, [r3, #0]
 801d236:	691a      	ldr	r2, [r3, #16]
 801d238:	687b      	ldr	r3, [r7, #4]
 801d23a:	681b      	ldr	r3, [r3, #0]
 801d23c:	f042 0201 	orr.w	r2, r2, #1
 801d240:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 801d242:	687b      	ldr	r3, [r7, #4]
 801d244:	681b      	ldr	r3, [r3, #0]
 801d246:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801d24a:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 801d24c:	687b      	ldr	r3, [r7, #4]
 801d24e:	681b      	ldr	r3, [r3, #0]
 801d250:	687a      	ldr	r2, [r7, #4]
 801d252:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 801d254:	629a      	str	r2, [r3, #40]	@ 0x28
//  if(hlptim -> Instance == LPTIM2)
//  {
//	  RCC->CCIPR |= (1 << 21) | (1 << 20);
//  }
  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 801d256:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801d25a:	6878      	ldr	r0, [r7, #4]
 801d25c:	f000 fb26 	bl	801d8ac <LPTIM_WaitForFlag>
 801d260:	4603      	mov	r3, r0
 801d262:	2b03      	cmp	r3, #3
 801d264:	d101      	bne.n	801d26a <HAL_LPTIM_Init+0x72>
  {
    return HAL_TIMEOUT;
 801d266:	2303      	movs	r3, #3
 801d268:	e086      	b.n	801d378 <HAL_LPTIM_Init+0x180>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 801d26a:	6878      	ldr	r0, [r7, #4]
 801d26c:	f000 fb4e 	bl	801d90c <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 801d270:	6878      	ldr	r0, [r7, #4]
 801d272:	f000 fb0d 	bl	801d890 <HAL_LPTIM_GetState>
 801d276:	4603      	mov	r3, r0
 801d278:	2b03      	cmp	r3, #3
 801d27a:	d101      	bne.n	801d280 <HAL_LPTIM_Init+0x88>
  {
    return HAL_TIMEOUT;
 801d27c:	2303      	movs	r3, #3
 801d27e:	e07b      	b.n	801d378 <HAL_LPTIM_Init+0x180>
  }


  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 801d280:	687b      	ldr	r3, [r7, #4]
 801d282:	681b      	ldr	r3, [r3, #0]
 801d284:	68db      	ldr	r3, [r3, #12]
 801d286:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 801d288:	687b      	ldr	r3, [r7, #4]
 801d28a:	685b      	ldr	r3, [r3, #4]
 801d28c:	2b01      	cmp	r3, #1
 801d28e:	d004      	beq.n	801d29a <HAL_LPTIM_Init+0xa2>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 801d290:	687b      	ldr	r3, [r7, #4]
 801d292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d294:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801d298:	d103      	bne.n	801d2a2 <HAL_LPTIM_Init+0xaa>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 801d29a:	68fb      	ldr	r3, [r7, #12]
 801d29c:	f023 031e 	bic.w	r3, r3, #30
 801d2a0:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 801d2a2:	687b      	ldr	r3, [r7, #4]
 801d2a4:	695b      	ldr	r3, [r3, #20]
 801d2a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801d2aa:	4293      	cmp	r3, r2
 801d2ac:	d005      	beq.n	801d2ba <HAL_LPTIM_Init+0xc2>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 801d2ae:	68fb      	ldr	r3, [r7, #12]
 801d2b0:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 801d2b4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 801d2b8:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 801d2ba:	68fa      	ldr	r2, [r7, #12]
 801d2bc:	4b30      	ldr	r3, [pc, #192]	@ (801d380 <HAL_LPTIM_Init+0x188>)
 801d2be:	4013      	ands	r3, r2
 801d2c0:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 801d2c2:	687b      	ldr	r3, [r7, #4]
 801d2c4:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 801d2c6:	687b      	ldr	r3, [r7, #4]
 801d2c8:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 801d2ca:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 801d2cc:	687b      	ldr	r3, [r7, #4]
 801d2ce:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 801d2d0:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 801d2d2:	687b      	ldr	r3, [r7, #4]
 801d2d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 801d2d6:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 801d2d8:	687b      	ldr	r3, [r7, #4]
 801d2da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 801d2dc:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 801d2de:	68fa      	ldr	r2, [r7, #12]
 801d2e0:	4313      	orrs	r3, r2
 801d2e2:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 801d2e4:	687b      	ldr	r3, [r7, #4]
 801d2e6:	685b      	ldr	r3, [r3, #4]
 801d2e8:	2b00      	cmp	r3, #0
 801d2ea:	d107      	bne.n	801d2fc <HAL_LPTIM_Init+0x104>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 801d2ec:	687b      	ldr	r3, [r7, #4]
 801d2ee:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 801d2f0:	687b      	ldr	r3, [r7, #4]
 801d2f2:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 801d2f4:	4313      	orrs	r3, r2
 801d2f6:	68fa      	ldr	r2, [r7, #12]
 801d2f8:	4313      	orrs	r3, r2
 801d2fa:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 801d2fc:	687b      	ldr	r3, [r7, #4]
 801d2fe:	685b      	ldr	r3, [r3, #4]
 801d300:	2b01      	cmp	r3, #1
 801d302:	d004      	beq.n	801d30e <HAL_LPTIM_Init+0x116>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 801d304:	687b      	ldr	r3, [r7, #4]
 801d306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d308:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801d30c:	d107      	bne.n	801d31e <HAL_LPTIM_Init+0x126>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 801d30e:	687b      	ldr	r3, [r7, #4]
 801d310:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 801d312:	687b      	ldr	r3, [r7, #4]
 801d314:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 801d316:	4313      	orrs	r3, r2
 801d318:	68fa      	ldr	r2, [r7, #12]
 801d31a:	4313      	orrs	r3, r2
 801d31c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 801d31e:	687b      	ldr	r3, [r7, #4]
 801d320:	695b      	ldr	r3, [r3, #20]
 801d322:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801d326:	4293      	cmp	r3, r2
 801d328:	d00a      	beq.n	801d340 <HAL_LPTIM_Init+0x148>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 801d32a:	687b      	ldr	r3, [r7, #4]
 801d32c:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 801d32e:	687b      	ldr	r3, [r7, #4]
 801d330:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 801d332:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 801d334:	687b      	ldr	r3, [r7, #4]
 801d336:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 801d338:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 801d33a:	68fa      	ldr	r2, [r7, #12]
 801d33c:	4313      	orrs	r3, r2
 801d33e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 801d340:	687b      	ldr	r3, [r7, #4]
 801d342:	681b      	ldr	r3, [r3, #0]
 801d344:	68fa      	ldr	r2, [r7, #12]
 801d346:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 801d348:	687b      	ldr	r3, [r7, #4]
 801d34a:	681b      	ldr	r3, [r3, #0]
 801d34c:	4a0d      	ldr	r2, [pc, #52]	@ (801d384 <HAL_LPTIM_Init+0x18c>)
 801d34e:	4293      	cmp	r3, r2
 801d350:	d108      	bne.n	801d364 <HAL_LPTIM_Init+0x16c>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 801d352:	687b      	ldr	r3, [r7, #4]
 801d354:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801d356:	687b      	ldr	r3, [r7, #4]
 801d358:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801d35a:	687b      	ldr	r3, [r7, #4]
 801d35c:	681b      	ldr	r3, [r3, #0]
 801d35e:	430a      	orrs	r2, r1
 801d360:	621a      	str	r2, [r3, #32]
 801d362:	e004      	b.n	801d36e <HAL_LPTIM_Init+0x176>
  {
    /* Check LPTIM2 and LPTIM3 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 and LPTIM3 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 801d364:	687b      	ldr	r3, [r7, #4]
 801d366:	681b      	ldr	r3, [r3, #0]
 801d368:	687a      	ldr	r2, [r7, #4]
 801d36a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801d36c:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 801d36e:	687b      	ldr	r3, [r7, #4]
 801d370:	2201      	movs	r2, #1
 801d372:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* Return function status */
  return HAL_OK;
 801d376:	2300      	movs	r3, #0
}
 801d378:	4618      	mov	r0, r3
 801d37a:	3710      	adds	r7, #16
 801d37c:	46bd      	mov	sp, r7
 801d37e:	bd80      	pop	{r7, pc}
 801d380:	ff19f1fe 	.word	0xff19f1fe
 801d384:	40007c00 	.word	0x40007c00

0801d388 <HAL_LPTIM_Counter_Start>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 801d388:	b580      	push	{r7, lr}
 801d38a:	b082      	sub	sp, #8
 801d38c:	af00      	add	r7, sp, #0
 801d38e:	6078      	str	r0, [r7, #4]
 801d390:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 801d392:	687b      	ldr	r3, [r7, #4]
 801d394:	2202      	movs	r2, #2
 801d396:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 801d39a:	687b      	ldr	r3, [r7, #4]
 801d39c:	685b      	ldr	r3, [r3, #4]
 801d39e:	2b01      	cmp	r3, #1
 801d3a0:	d00c      	beq.n	801d3bc <HAL_LPTIM_Counter_Start+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 801d3a2:	687b      	ldr	r3, [r7, #4]
 801d3a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d3a6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801d3aa:	d107      	bne.n	801d3bc <HAL_LPTIM_Counter_Start+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 801d3ac:	687b      	ldr	r3, [r7, #4]
 801d3ae:	681b      	ldr	r3, [r3, #0]
 801d3b0:	68da      	ldr	r2, [r3, #12]
 801d3b2:	687b      	ldr	r3, [r7, #4]
 801d3b4:	681b      	ldr	r3, [r3, #0]
 801d3b6:	f422 6260 	bic.w	r2, r2, #3584	@ 0xe00
 801d3ba:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 801d3bc:	687b      	ldr	r3, [r7, #4]
 801d3be:	681b      	ldr	r3, [r3, #0]
 801d3c0:	691a      	ldr	r2, [r3, #16]
 801d3c2:	687b      	ldr	r3, [r7, #4]
 801d3c4:	681b      	ldr	r3, [r3, #0]
 801d3c6:	f042 0201 	orr.w	r2, r2, #1
 801d3ca:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 801d3cc:	687b      	ldr	r3, [r7, #4]
 801d3ce:	681b      	ldr	r3, [r3, #0]
 801d3d0:	2210      	movs	r2, #16
 801d3d2:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 801d3d4:	687b      	ldr	r3, [r7, #4]
 801d3d6:	681b      	ldr	r3, [r3, #0]
 801d3d8:	683a      	ldr	r2, [r7, #0]
 801d3da:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 801d3dc:	2110      	movs	r1, #16
 801d3de:	6878      	ldr	r0, [r7, #4]
 801d3e0:	f000 fa64 	bl	801d8ac <LPTIM_WaitForFlag>
 801d3e4:	4603      	mov	r3, r0
 801d3e6:	2b03      	cmp	r3, #3
 801d3e8:	d101      	bne.n	801d3ee <HAL_LPTIM_Counter_Start+0x66>
  {
    return HAL_TIMEOUT;
 801d3ea:	2303      	movs	r3, #3
 801d3ec:	e00c      	b.n	801d408 <HAL_LPTIM_Counter_Start+0x80>
  }

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 801d3ee:	687b      	ldr	r3, [r7, #4]
 801d3f0:	681b      	ldr	r3, [r3, #0]
 801d3f2:	691a      	ldr	r2, [r3, #16]
 801d3f4:	687b      	ldr	r3, [r7, #4]
 801d3f6:	681b      	ldr	r3, [r3, #0]
 801d3f8:	f042 0204 	orr.w	r2, r2, #4
 801d3fc:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 801d3fe:	687b      	ldr	r3, [r7, #4]
 801d400:	2201      	movs	r2, #1
 801d402:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* Return function status */
  return HAL_OK;
 801d406:	2300      	movs	r3, #0
}
 801d408:	4618      	mov	r0, r3
 801d40a:	3708      	adds	r7, #8
 801d40c:	46bd      	mov	sp, r7
 801d40e:	bd80      	pop	{r7, pc}

0801d410 <HAL_LPTIM_Counter_Stop>:
  * @brief  Stop the Counter mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Stop(LPTIM_HandleTypeDef *hlptim)
{
 801d410:	b580      	push	{r7, lr}
 801d412:	b082      	sub	sp, #8
 801d414:	af00      	add	r7, sp, #0
 801d416:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 801d418:	687b      	ldr	r3, [r7, #4]
 801d41a:	2202      	movs	r2, #2
 801d41c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 801d420:	6878      	ldr	r0, [r7, #4]
 801d422:	f000 fa73 	bl	801d90c <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 801d426:	6878      	ldr	r0, [r7, #4]
 801d428:	f000 fa32 	bl	801d890 <HAL_LPTIM_GetState>
 801d42c:	4603      	mov	r3, r0
 801d42e:	2b03      	cmp	r3, #3
 801d430:	d101      	bne.n	801d436 <HAL_LPTIM_Counter_Stop+0x26>
  {
    return HAL_TIMEOUT;
 801d432:	2303      	movs	r3, #3
 801d434:	e004      	b.n	801d440 <HAL_LPTIM_Counter_Stop+0x30>
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 801d436:	687b      	ldr	r3, [r7, #4]
 801d438:	2201      	movs	r2, #1
 801d43a:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* Return function status */
  return HAL_OK;
 801d43e:	2300      	movs	r3, #0
}
 801d440:	4618      	mov	r0, r3
 801d442:	3708      	adds	r7, #8
 801d444:	46bd      	mov	sp, r7
 801d446:	bd80      	pop	{r7, pc}

0801d448 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 801d448:	b580      	push	{r7, lr}
 801d44a:	b082      	sub	sp, #8
 801d44c:	af00      	add	r7, sp, #0
 801d44e:	6078      	str	r0, [r7, #4]
 801d450:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 801d452:	687b      	ldr	r3, [r7, #4]
 801d454:	2202      	movs	r2, #2
 801d456:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT(hlptim->Instance);
 801d45a:	687b      	ldr	r3, [r7, #4]
 801d45c:	681b      	ldr	r3, [r3, #0]
 801d45e:	4a48      	ldr	r2, [pc, #288]	@ (801d580 <HAL_LPTIM_Counter_Start_IT+0x138>)
 801d460:	4293      	cmp	r3, r2
 801d462:	d108      	bne.n	801d476 <HAL_LPTIM_Counter_Start_IT+0x2e>
 801d464:	4b47      	ldr	r3, [pc, #284]	@ (801d584 <HAL_LPTIM_Counter_Start_IT+0x13c>)
 801d466:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801d46a:	4a46      	ldr	r2, [pc, #280]	@ (801d584 <HAL_LPTIM_Counter_Start_IT+0x13c>)
 801d46c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801d470:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 801d474:	e015      	b.n	801d4a2 <HAL_LPTIM_Counter_Start_IT+0x5a>
 801d476:	687b      	ldr	r3, [r7, #4]
 801d478:	681b      	ldr	r3, [r3, #0]
 801d47a:	4a43      	ldr	r2, [pc, #268]	@ (801d588 <HAL_LPTIM_Counter_Start_IT+0x140>)
 801d47c:	4293      	cmp	r3, r2
 801d47e:	d108      	bne.n	801d492 <HAL_LPTIM_Counter_Start_IT+0x4a>
 801d480:	4b40      	ldr	r3, [pc, #256]	@ (801d584 <HAL_LPTIM_Counter_Start_IT+0x13c>)
 801d482:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801d486:	4a3f      	ldr	r2, [pc, #252]	@ (801d584 <HAL_LPTIM_Counter_Start_IT+0x13c>)
 801d488:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801d48c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 801d490:	e007      	b.n	801d4a2 <HAL_LPTIM_Counter_Start_IT+0x5a>
 801d492:	4b3c      	ldr	r3, [pc, #240]	@ (801d584 <HAL_LPTIM_Counter_Start_IT+0x13c>)
 801d494:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801d498:	4a3a      	ldr	r2, [pc, #232]	@ (801d584 <HAL_LPTIM_Counter_Start_IT+0x13c>)
 801d49a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801d49e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 801d4a2:	687b      	ldr	r3, [r7, #4]
 801d4a4:	685b      	ldr	r3, [r3, #4]
 801d4a6:	2b01      	cmp	r3, #1
 801d4a8:	d00c      	beq.n	801d4c4 <HAL_LPTIM_Counter_Start_IT+0x7c>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 801d4aa:	687b      	ldr	r3, [r7, #4]
 801d4ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d4ae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801d4b2:	d107      	bne.n	801d4c4 <HAL_LPTIM_Counter_Start_IT+0x7c>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 801d4b4:	687b      	ldr	r3, [r7, #4]
 801d4b6:	681b      	ldr	r3, [r3, #0]
 801d4b8:	68da      	ldr	r2, [r3, #12]
 801d4ba:	687b      	ldr	r3, [r7, #4]
 801d4bc:	681b      	ldr	r3, [r3, #0]
 801d4be:	f422 6260 	bic.w	r2, r2, #3584	@ 0xe00
 801d4c2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 801d4c4:	687b      	ldr	r3, [r7, #4]
 801d4c6:	681b      	ldr	r3, [r3, #0]
 801d4c8:	691a      	ldr	r2, [r3, #16]
 801d4ca:	687b      	ldr	r3, [r7, #4]
 801d4cc:	681b      	ldr	r3, [r3, #0]
 801d4ce:	f042 0201 	orr.w	r2, r2, #1
 801d4d2:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 801d4d4:	687b      	ldr	r3, [r7, #4]
 801d4d6:	681b      	ldr	r3, [r3, #0]
 801d4d8:	2210      	movs	r2, #16
 801d4da:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 801d4dc:	687b      	ldr	r3, [r7, #4]
 801d4de:	681b      	ldr	r3, [r3, #0]
 801d4e0:	683a      	ldr	r2, [r7, #0]
 801d4e2:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 801d4e4:	2110      	movs	r1, #16
 801d4e6:	6878      	ldr	r0, [r7, #4]
 801d4e8:	f000 f9e0 	bl	801d8ac <LPTIM_WaitForFlag>
 801d4ec:	4603      	mov	r3, r0
 801d4ee:	2b03      	cmp	r3, #3
 801d4f0:	d101      	bne.n	801d4f6 <HAL_LPTIM_Counter_Start_IT+0xae>
  {
    return HAL_TIMEOUT;
 801d4f2:	2303      	movs	r3, #3
 801d4f4:	e03f      	b.n	801d576 <HAL_LPTIM_Counter_Start_IT+0x12e>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 801d4f6:	6878      	ldr	r0, [r7, #4]
 801d4f8:	f000 fa08 	bl	801d90c <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 801d4fc:	6878      	ldr	r0, [r7, #4]
 801d4fe:	f000 f9c7 	bl	801d890 <HAL_LPTIM_GetState>
 801d502:	4603      	mov	r3, r0
 801d504:	2b03      	cmp	r3, #3
 801d506:	d101      	bne.n	801d50c <HAL_LPTIM_Counter_Start_IT+0xc4>
  {
    return HAL_TIMEOUT;
 801d508:	2303      	movs	r3, #3
 801d50a:	e034      	b.n	801d576 <HAL_LPTIM_Counter_Start_IT+0x12e>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 801d50c:	687b      	ldr	r3, [r7, #4]
 801d50e:	681b      	ldr	r3, [r3, #0]
 801d510:	689a      	ldr	r2, [r3, #8]
 801d512:	687b      	ldr	r3, [r7, #4]
 801d514:	681b      	ldr	r3, [r3, #0]
 801d516:	f042 0210 	orr.w	r2, r2, #16
 801d51a:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 801d51c:	687b      	ldr	r3, [r7, #4]
 801d51e:	681b      	ldr	r3, [r3, #0]
 801d520:	689a      	ldr	r2, [r3, #8]
 801d522:	687b      	ldr	r3, [r7, #4]
 801d524:	681b      	ldr	r3, [r3, #0]
 801d526:	f042 0202 	orr.w	r2, r2, #2
 801d52a:	609a      	str	r2, [r3, #8]

  /* Enable Rep Update Ok interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_REPOK);
 801d52c:	687b      	ldr	r3, [r7, #4]
 801d52e:	681b      	ldr	r3, [r3, #0]
 801d530:	689a      	ldr	r2, [r3, #8]
 801d532:	687b      	ldr	r3, [r7, #4]
 801d534:	681b      	ldr	r3, [r3, #0]
 801d536:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801d53a:	609a      	str	r2, [r3, #8]

  /* Enable Update Event interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_UPDATE);
 801d53c:	687b      	ldr	r3, [r7, #4]
 801d53e:	681b      	ldr	r3, [r3, #0]
 801d540:	689a      	ldr	r2, [r3, #8]
 801d542:	687b      	ldr	r3, [r7, #4]
 801d544:	681b      	ldr	r3, [r3, #0]
 801d546:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 801d54a:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 801d54c:	687b      	ldr	r3, [r7, #4]
 801d54e:	681b      	ldr	r3, [r3, #0]
 801d550:	691a      	ldr	r2, [r3, #16]
 801d552:	687b      	ldr	r3, [r7, #4]
 801d554:	681b      	ldr	r3, [r3, #0]
 801d556:	f042 0201 	orr.w	r2, r2, #1
 801d55a:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 801d55c:	687b      	ldr	r3, [r7, #4]
 801d55e:	681b      	ldr	r3, [r3, #0]
 801d560:	691a      	ldr	r2, [r3, #16]
 801d562:	687b      	ldr	r3, [r7, #4]
 801d564:	681b      	ldr	r3, [r3, #0]
 801d566:	f042 0204 	orr.w	r2, r2, #4
 801d56a:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 801d56c:	687b      	ldr	r3, [r7, #4]
 801d56e:	2201      	movs	r2, #1
 801d570:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* Return function status */
  return HAL_OK;
 801d574:	2300      	movs	r3, #0
}
 801d576:	4618      	mov	r0, r3
 801d578:	3708      	adds	r7, #8
 801d57a:	46bd      	mov	sp, r7
 801d57c:	bd80      	pop	{r7, pc}
 801d57e:	bf00      	nop
 801d580:	40007c00 	.word	0x40007c00
 801d584:	58000800 	.word	0x58000800
 801d588:	40009400 	.word	0x40009400

0801d58c <HAL_LPTIM_Counter_Stop_IT>:
  * @brief  Stop the Counter mode in interrupt mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Stop_IT(LPTIM_HandleTypeDef *hlptim)
{
 801d58c:	b580      	push	{r7, lr}
 801d58e:	b082      	sub	sp, #8
 801d590:	af00      	add	r7, sp, #0
 801d592:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));


  /* Disable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_DISABLE_IT(hlptim->Instance);
 801d594:	687b      	ldr	r3, [r7, #4]
 801d596:	681b      	ldr	r3, [r3, #0]
 801d598:	4a2c      	ldr	r2, [pc, #176]	@ (801d64c <HAL_LPTIM_Counter_Stop_IT+0xc0>)
 801d59a:	4293      	cmp	r3, r2
 801d59c:	d108      	bne.n	801d5b0 <HAL_LPTIM_Counter_Stop_IT+0x24>
 801d59e:	4b2c      	ldr	r3, [pc, #176]	@ (801d650 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 801d5a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801d5a4:	4a2a      	ldr	r2, [pc, #168]	@ (801d650 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 801d5a6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801d5aa:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 801d5ae:	e015      	b.n	801d5dc <HAL_LPTIM_Counter_Stop_IT+0x50>
 801d5b0:	687b      	ldr	r3, [r7, #4]
 801d5b2:	681b      	ldr	r3, [r3, #0]
 801d5b4:	4a27      	ldr	r2, [pc, #156]	@ (801d654 <HAL_LPTIM_Counter_Stop_IT+0xc8>)
 801d5b6:	4293      	cmp	r3, r2
 801d5b8:	d108      	bne.n	801d5cc <HAL_LPTIM_Counter_Stop_IT+0x40>
 801d5ba:	4b25      	ldr	r3, [pc, #148]	@ (801d650 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 801d5bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801d5c0:	4a23      	ldr	r2, [pc, #140]	@ (801d650 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 801d5c2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 801d5c6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 801d5ca:	e007      	b.n	801d5dc <HAL_LPTIM_Counter_Stop_IT+0x50>
 801d5cc:	4b20      	ldr	r3, [pc, #128]	@ (801d650 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 801d5ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801d5d2:	4a1f      	ldr	r2, [pc, #124]	@ (801d650 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 801d5d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801d5d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 801d5dc:	687b      	ldr	r3, [r7, #4]
 801d5de:	2202      	movs	r2, #2
 801d5e0:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 801d5e4:	6878      	ldr	r0, [r7, #4]
 801d5e6:	f000 f991 	bl	801d90c <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 801d5ea:	6878      	ldr	r0, [r7, #4]
 801d5ec:	f000 f950 	bl	801d890 <HAL_LPTIM_GetState>
 801d5f0:	4603      	mov	r3, r0
 801d5f2:	2b03      	cmp	r3, #3
 801d5f4:	d101      	bne.n	801d5fa <HAL_LPTIM_Counter_Stop_IT+0x6e>
  {
    return HAL_TIMEOUT;
 801d5f6:	2303      	movs	r3, #3
 801d5f8:	e024      	b.n	801d644 <HAL_LPTIM_Counter_Stop_IT+0xb8>
  }

  /* Disable Autoreload write complete interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARROK);
 801d5fa:	687b      	ldr	r3, [r7, #4]
 801d5fc:	681b      	ldr	r3, [r3, #0]
 801d5fe:	689a      	ldr	r2, [r3, #8]
 801d600:	687b      	ldr	r3, [r7, #4]
 801d602:	681b      	ldr	r3, [r3, #0]
 801d604:	f022 0210 	bic.w	r2, r2, #16
 801d608:	609a      	str	r2, [r3, #8]

  /* Disable Autoreload match interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARRM);
 801d60a:	687b      	ldr	r3, [r7, #4]
 801d60c:	681b      	ldr	r3, [r3, #0]
 801d60e:	689a      	ldr	r2, [r3, #8]
 801d610:	687b      	ldr	r3, [r7, #4]
 801d612:	681b      	ldr	r3, [r3, #0]
 801d614:	f022 0202 	bic.w	r2, r2, #2
 801d618:	609a      	str	r2, [r3, #8]

  /* Disable Rep Update Ok interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_REPOK);
 801d61a:	687b      	ldr	r3, [r7, #4]
 801d61c:	681b      	ldr	r3, [r3, #0]
 801d61e:	689a      	ldr	r2, [r3, #8]
 801d620:	687b      	ldr	r3, [r7, #4]
 801d622:	681b      	ldr	r3, [r3, #0]
 801d624:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801d628:	609a      	str	r2, [r3, #8]

  /* Disable Update Event interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_UPDATE);
 801d62a:	687b      	ldr	r3, [r7, #4]
 801d62c:	681b      	ldr	r3, [r3, #0]
 801d62e:	689a      	ldr	r2, [r3, #8]
 801d630:	687b      	ldr	r3, [r7, #4]
 801d632:	681b      	ldr	r3, [r3, #0]
 801d634:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801d638:	609a      	str	r2, [r3, #8]
  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 801d63a:	687b      	ldr	r3, [r7, #4]
 801d63c:	2201      	movs	r2, #1
 801d63e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* Return function status */
  return HAL_OK;
 801d642:	2300      	movs	r3, #0
}
 801d644:	4618      	mov	r0, r3
 801d646:	3708      	adds	r7, #8
 801d648:	46bd      	mov	sp, r7
 801d64a:	bd80      	pop	{r7, pc}
 801d64c:	40007c00 	.word	0x40007c00
 801d650:	58000800 	.word	0x58000800
 801d654:	40009400 	.word	0x40009400

0801d658 <HAL_LPTIM_ReadCounter>:
  * @brief  Return the current counter value.
  * @param  hlptim LPTIM handle
  * @retval Counter value.
  */
uint32_t HAL_LPTIM_ReadCounter(const LPTIM_HandleTypeDef *hlptim)
{
 801d658:	b480      	push	{r7}
 801d65a:	b083      	sub	sp, #12
 801d65c:	af00      	add	r7, sp, #0
 801d65e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  return (hlptim->Instance->CNT);
 801d660:	687b      	ldr	r3, [r7, #4]
 801d662:	681b      	ldr	r3, [r3, #0]
 801d664:	69db      	ldr	r3, [r3, #28]
}
 801d666:	4618      	mov	r0, r3
 801d668:	370c      	adds	r7, #12
 801d66a:	46bd      	mov	sp, r7
 801d66c:	bc80      	pop	{r7}
 801d66e:	4770      	bx	lr

0801d670 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 801d670:	b580      	push	{r7, lr}
 801d672:	b082      	sub	sp, #8
 801d674:	af00      	add	r7, sp, #0
 801d676:	6078      	str	r0, [r7, #4]

  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 801d678:	687b      	ldr	r3, [r7, #4]
 801d67a:	681b      	ldr	r3, [r3, #0]
 801d67c:	681b      	ldr	r3, [r3, #0]
 801d67e:	f003 0301 	and.w	r3, r3, #1
 801d682:	2b01      	cmp	r3, #1
 801d684:	d10d      	bne.n	801d6a2 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 801d686:	687b      	ldr	r3, [r7, #4]
 801d688:	681b      	ldr	r3, [r3, #0]
 801d68a:	689b      	ldr	r3, [r3, #8]
 801d68c:	f003 0301 	and.w	r3, r3, #1
 801d690:	2b01      	cmp	r3, #1
 801d692:	d106      	bne.n	801d6a2 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 801d694:	687b      	ldr	r3, [r7, #4]
 801d696:	681b      	ldr	r3, [r3, #0]
 801d698:	2201      	movs	r2, #1
 801d69a:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 801d69c:	6878      	ldr	r0, [r7, #4]
 801d69e:	f000 f8af 	bl	801d800 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 801d6a2:	687b      	ldr	r3, [r7, #4]
 801d6a4:	681b      	ldr	r3, [r3, #0]
 801d6a6:	681b      	ldr	r3, [r3, #0]
 801d6a8:	f003 0302 	and.w	r3, r3, #2
 801d6ac:	2b02      	cmp	r3, #2
 801d6ae:	d10d      	bne.n	801d6cc <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 801d6b0:	687b      	ldr	r3, [r7, #4]
 801d6b2:	681b      	ldr	r3, [r3, #0]
 801d6b4:	689b      	ldr	r3, [r3, #8]
 801d6b6:	f003 0302 	and.w	r3, r3, #2
 801d6ba:	2b02      	cmp	r3, #2
 801d6bc:	d106      	bne.n	801d6cc <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 801d6be:	687b      	ldr	r3, [r7, #4]
 801d6c0:	681b      	ldr	r3, [r3, #0]
 801d6c2:	2202      	movs	r2, #2
 801d6c4:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 801d6c6:	6878      	ldr	r0, [r7, #4]
 801d6c8:	f7fe f9a2 	bl	801ba10 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 801d6cc:	687b      	ldr	r3, [r7, #4]
 801d6ce:	681b      	ldr	r3, [r3, #0]
 801d6d0:	681b      	ldr	r3, [r3, #0]
 801d6d2:	f003 0304 	and.w	r3, r3, #4
 801d6d6:	2b04      	cmp	r3, #4
 801d6d8:	d10d      	bne.n	801d6f6 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 801d6da:	687b      	ldr	r3, [r7, #4]
 801d6dc:	681b      	ldr	r3, [r3, #0]
 801d6de:	689b      	ldr	r3, [r3, #8]
 801d6e0:	f003 0304 	and.w	r3, r3, #4
 801d6e4:	2b04      	cmp	r3, #4
 801d6e6:	d106      	bne.n	801d6f6 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 801d6e8:	687b      	ldr	r3, [r7, #4]
 801d6ea:	681b      	ldr	r3, [r3, #0]
 801d6ec:	2204      	movs	r2, #4
 801d6ee:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 801d6f0:	6878      	ldr	r0, [r7, #4]
 801d6f2:	f000 f88e 	bl	801d812 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 801d6f6:	687b      	ldr	r3, [r7, #4]
 801d6f8:	681b      	ldr	r3, [r3, #0]
 801d6fa:	681b      	ldr	r3, [r3, #0]
 801d6fc:	f003 0308 	and.w	r3, r3, #8
 801d700:	2b08      	cmp	r3, #8
 801d702:	d10d      	bne.n	801d720 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 801d704:	687b      	ldr	r3, [r7, #4]
 801d706:	681b      	ldr	r3, [r3, #0]
 801d708:	689b      	ldr	r3, [r3, #8]
 801d70a:	f003 0308 	and.w	r3, r3, #8
 801d70e:	2b08      	cmp	r3, #8
 801d710:	d106      	bne.n	801d720 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 801d712:	687b      	ldr	r3, [r7, #4]
 801d714:	681b      	ldr	r3, [r3, #0]
 801d716:	2208      	movs	r2, #8
 801d718:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 801d71a:	6878      	ldr	r0, [r7, #4]
 801d71c:	f000 f882 	bl	801d824 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 801d720:	687b      	ldr	r3, [r7, #4]
 801d722:	681b      	ldr	r3, [r3, #0]
 801d724:	681b      	ldr	r3, [r3, #0]
 801d726:	f003 0310 	and.w	r3, r3, #16
 801d72a:	2b10      	cmp	r3, #16
 801d72c:	d10d      	bne.n	801d74a <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 801d72e:	687b      	ldr	r3, [r7, #4]
 801d730:	681b      	ldr	r3, [r3, #0]
 801d732:	689b      	ldr	r3, [r3, #8]
 801d734:	f003 0310 	and.w	r3, r3, #16
 801d738:	2b10      	cmp	r3, #16
 801d73a:	d106      	bne.n	801d74a <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 801d73c:	687b      	ldr	r3, [r7, #4]
 801d73e:	681b      	ldr	r3, [r3, #0]
 801d740:	2210      	movs	r2, #16
 801d742:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 801d744:	6878      	ldr	r0, [r7, #4]
 801d746:	f000 f876 	bl	801d836 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 801d74a:	687b      	ldr	r3, [r7, #4]
 801d74c:	681b      	ldr	r3, [r3, #0]
 801d74e:	681b      	ldr	r3, [r3, #0]
 801d750:	f003 0320 	and.w	r3, r3, #32
 801d754:	2b20      	cmp	r3, #32
 801d756:	d10d      	bne.n	801d774 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 801d758:	687b      	ldr	r3, [r7, #4]
 801d75a:	681b      	ldr	r3, [r3, #0]
 801d75c:	689b      	ldr	r3, [r3, #8]
 801d75e:	f003 0320 	and.w	r3, r3, #32
 801d762:	2b20      	cmp	r3, #32
 801d764:	d106      	bne.n	801d774 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 801d766:	687b      	ldr	r3, [r7, #4]
 801d768:	681b      	ldr	r3, [r3, #0]
 801d76a:	2220      	movs	r2, #32
 801d76c:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 801d76e:	6878      	ldr	r0, [r7, #4]
 801d770:	f000 f86a 	bl	801d848 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 801d774:	687b      	ldr	r3, [r7, #4]
 801d776:	681b      	ldr	r3, [r3, #0]
 801d778:	681b      	ldr	r3, [r3, #0]
 801d77a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801d77e:	2b40      	cmp	r3, #64	@ 0x40
 801d780:	d10d      	bne.n	801d79e <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 801d782:	687b      	ldr	r3, [r7, #4]
 801d784:	681b      	ldr	r3, [r3, #0]
 801d786:	689b      	ldr	r3, [r3, #8]
 801d788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801d78c:	2b40      	cmp	r3, #64	@ 0x40
 801d78e:	d106      	bne.n	801d79e <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 801d790:	687b      	ldr	r3, [r7, #4]
 801d792:	681b      	ldr	r3, [r3, #0]
 801d794:	2240      	movs	r2, #64	@ 0x40
 801d796:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 801d798:	6878      	ldr	r0, [r7, #4]
 801d79a:	f000 f85e 	bl	801d85a <HAL_LPTIM_DirectionDownCallback>
    }
  }

  /* Repetition counter underflowed (or contains zero) and the LPTIM counter
     overflowed */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UPDATE) != RESET)
 801d79e:	687b      	ldr	r3, [r7, #4]
 801d7a0:	681b      	ldr	r3, [r3, #0]
 801d7a2:	681b      	ldr	r3, [r3, #0]
 801d7a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801d7a8:	2b80      	cmp	r3, #128	@ 0x80
 801d7aa:	d10d      	bne.n	801d7c8 <HAL_LPTIM_IRQHandler+0x158>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UPDATE) != RESET)
 801d7ac:	687b      	ldr	r3, [r7, #4]
 801d7ae:	681b      	ldr	r3, [r3, #0]
 801d7b0:	689b      	ldr	r3, [r3, #8]
 801d7b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801d7b6:	2b80      	cmp	r3, #128	@ 0x80
 801d7b8:	d106      	bne.n	801d7c8 <HAL_LPTIM_IRQHandler+0x158>
    {
      /* Clear update event flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UPDATE);
 801d7ba:	687b      	ldr	r3, [r7, #4]
 801d7bc:	681b      	ldr	r3, [r3, #0]
 801d7be:	2280      	movs	r2, #128	@ 0x80
 801d7c0:	605a      	str	r2, [r3, #4]

      /* Update event Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->UpdateEventCallback(hlptim);
#else
      HAL_LPTIM_UpdateEventCallback(hlptim);
 801d7c2:	6878      	ldr	r0, [r7, #4]
 801d7c4:	f000 f852 	bl	801d86c <HAL_LPTIM_UpdateEventCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Successful APB bus write to repetition counter register */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_REPOK) != RESET)
 801d7c8:	687b      	ldr	r3, [r7, #4]
 801d7ca:	681b      	ldr	r3, [r3, #0]
 801d7cc:	681b      	ldr	r3, [r3, #0]
 801d7ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d7d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801d7d6:	d10f      	bne.n	801d7f8 <HAL_LPTIM_IRQHandler+0x188>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_REPOK) != RESET)
 801d7d8:	687b      	ldr	r3, [r7, #4]
 801d7da:	681b      	ldr	r3, [r3, #0]
 801d7dc:	689b      	ldr	r3, [r3, #8]
 801d7de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d7e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801d7e6:	d107      	bne.n	801d7f8 <HAL_LPTIM_IRQHandler+0x188>
    {
      /* Clear successful APB bus write to repetition counter flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 801d7e8:	687b      	ldr	r3, [r7, #4]
 801d7ea:	681b      	ldr	r3, [r3, #0]
 801d7ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801d7f0:	605a      	str	r2, [r3, #4]

      /* Successful APB bus write to repetition counter Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->RepCounterWriteCallback(hlptim);
#else
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
 801d7f2:	6878      	ldr	r0, [r7, #4]
 801d7f4:	f000 f843 	bl	801d87e <HAL_LPTIM_RepCounterWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 801d7f8:	bf00      	nop
 801d7fa:	3708      	adds	r7, #8
 801d7fc:	46bd      	mov	sp, r7
 801d7fe:	bd80      	pop	{r7, pc}

0801d800 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 801d800:	b480      	push	{r7}
 801d802:	b083      	sub	sp, #12
 801d804:	af00      	add	r7, sp, #0
 801d806:	6078      	str	r0, [r7, #4]


  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 801d808:	bf00      	nop
 801d80a:	370c      	adds	r7, #12
 801d80c:	46bd      	mov	sp, r7
 801d80e:	bc80      	pop	{r7}
 801d810:	4770      	bx	lr

0801d812 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 801d812:	b480      	push	{r7}
 801d814:	b083      	sub	sp, #12
 801d816:	af00      	add	r7, sp, #0
 801d818:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 801d81a:	bf00      	nop
 801d81c:	370c      	adds	r7, #12
 801d81e:	46bd      	mov	sp, r7
 801d820:	bc80      	pop	{r7}
 801d822:	4770      	bx	lr

0801d824 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 801d824:	b480      	push	{r7}
 801d826:	b083      	sub	sp, #12
 801d828:	af00      	add	r7, sp, #0
 801d82a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 801d82c:	bf00      	nop
 801d82e:	370c      	adds	r7, #12
 801d830:	46bd      	mov	sp, r7
 801d832:	bc80      	pop	{r7}
 801d834:	4770      	bx	lr

0801d836 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 801d836:	b480      	push	{r7}
 801d838:	b083      	sub	sp, #12
 801d83a:	af00      	add	r7, sp, #0
 801d83c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 801d83e:	bf00      	nop
 801d840:	370c      	adds	r7, #12
 801d842:	46bd      	mov	sp, r7
 801d844:	bc80      	pop	{r7}
 801d846:	4770      	bx	lr

0801d848 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 801d848:	b480      	push	{r7}
 801d84a:	b083      	sub	sp, #12
 801d84c:	af00      	add	r7, sp, #0
 801d84e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 801d850:	bf00      	nop
 801d852:	370c      	adds	r7, #12
 801d854:	46bd      	mov	sp, r7
 801d856:	bc80      	pop	{r7}
 801d858:	4770      	bx	lr

0801d85a <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 801d85a:	b480      	push	{r7}
 801d85c:	b083      	sub	sp, #12
 801d85e:	af00      	add	r7, sp, #0
 801d860:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 801d862:	bf00      	nop
 801d864:	370c      	adds	r7, #12
 801d866:	46bd      	mov	sp, r7
 801d868:	bc80      	pop	{r7}
 801d86a:	4770      	bx	lr

0801d86c <HAL_LPTIM_UpdateEventCallback>:
  * @brief Repetition counter underflowed (or contains zero) and LPTIM counter overflowed callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_UpdateEventCallback(LPTIM_HandleTypeDef *hlptim)
{
 801d86c:	b480      	push	{r7}
 801d86e:	b083      	sub	sp, #12
 801d870:	af00      	add	r7, sp, #0
 801d872:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_UpdateEventCallback could be implemented in the user file
   */
}
 801d874:	bf00      	nop
 801d876:	370c      	adds	r7, #12
 801d878:	46bd      	mov	sp, r7
 801d87a:	bc80      	pop	{r7}
 801d87c:	4770      	bx	lr

0801d87e <HAL_LPTIM_RepCounterWriteCallback>:
  * @brief  Successful APB bus write to repetition counter register callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_RepCounterWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 801d87e:	b480      	push	{r7}
 801d880:	b083      	sub	sp, #12
 801d882:	af00      	add	r7, sp, #0
 801d884:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_RepCounterWriteCallback could be implemented in the user file
   */
}
 801d886:	bf00      	nop
 801d888:	370c      	adds	r7, #12
 801d88a:	46bd      	mov	sp, r7
 801d88c:	bc80      	pop	{r7}
 801d88e:	4770      	bx	lr

0801d890 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 801d890:	b480      	push	{r7}
 801d892:	b083      	sub	sp, #12
 801d894:	af00      	add	r7, sp, #0
 801d896:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 801d898:	687b      	ldr	r3, [r7, #4]
 801d89a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 801d89e:	b2db      	uxtb	r3, r3
}
 801d8a0:	4618      	mov	r0, r3
 801d8a2:	370c      	adds	r7, #12
 801d8a4:	46bd      	mov	sp, r7
 801d8a6:	bc80      	pop	{r7}
 801d8a8:	4770      	bx	lr
	...

0801d8ac <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 801d8ac:	b480      	push	{r7}
 801d8ae:	b085      	sub	sp, #20
 801d8b0:	af00      	add	r7, sp, #0
 801d8b2:	6078      	str	r0, [r7, #4]
 801d8b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 801d8b6:	2300      	movs	r3, #0
 801d8b8:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 801d8ba:	4b12      	ldr	r3, [pc, #72]	@ (801d904 <LPTIM_WaitForFlag+0x58>)
 801d8bc:	681b      	ldr	r3, [r3, #0]
 801d8be:	4a12      	ldr	r2, [pc, #72]	@ (801d908 <LPTIM_WaitForFlag+0x5c>)
 801d8c0:	fba2 2303 	umull	r2, r3, r2, r3
 801d8c4:	0b9b      	lsrs	r3, r3, #14
 801d8c6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801d8ca:	fb02 f303 	mul.w	r3, r2, r3
 801d8ce:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 801d8d0:	68bb      	ldr	r3, [r7, #8]
 801d8d2:	3b01      	subs	r3, #1
 801d8d4:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 801d8d6:	68bb      	ldr	r3, [r7, #8]
 801d8d8:	2b00      	cmp	r3, #0
 801d8da:	d101      	bne.n	801d8e0 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 801d8dc:	2303      	movs	r3, #3
 801d8de:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 801d8e0:	687b      	ldr	r3, [r7, #4]
 801d8e2:	681b      	ldr	r3, [r3, #0]
 801d8e4:	681a      	ldr	r2, [r3, #0]
 801d8e6:	683b      	ldr	r3, [r7, #0]
 801d8e8:	4013      	ands	r3, r2
 801d8ea:	683a      	ldr	r2, [r7, #0]
 801d8ec:	429a      	cmp	r2, r3
 801d8ee:	d002      	beq.n	801d8f6 <LPTIM_WaitForFlag+0x4a>
 801d8f0:	68bb      	ldr	r3, [r7, #8]
 801d8f2:	2b00      	cmp	r3, #0
 801d8f4:	d1ec      	bne.n	801d8d0 <LPTIM_WaitForFlag+0x24>

  return result;
 801d8f6:	7bfb      	ldrb	r3, [r7, #15]
}
 801d8f8:	4618      	mov	r0, r3
 801d8fa:	3714      	adds	r7, #20
 801d8fc:	46bd      	mov	sp, r7
 801d8fe:	bc80      	pop	{r7}
 801d900:	4770      	bx	lr
 801d902:	bf00      	nop
 801d904:	20000070 	.word	0x20000070
 801d908:	d1b71759 	.word	0xd1b71759

0801d90c <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 801d90c:	b580      	push	{r7, lr}
 801d90e:	b08e      	sub	sp, #56	@ 0x38
 801d910:	af00      	add	r7, sp, #0
 801d912:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 801d914:	2300      	movs	r3, #0
 801d916:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d918:	f3ef 8310 	mrs	r3, PRIMASK
 801d91c:	613b      	str	r3, [r7, #16]
  return(result);
 801d91e:	693b      	ldr	r3, [r7, #16]
  uint32_t primask_bit;
  uint32_t tmpOR;
  uint32_t tmpRCR;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 801d920:	633b      	str	r3, [r7, #48]	@ 0x30
 801d922:	2301      	movs	r3, #1
 801d924:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d926:	697b      	ldr	r3, [r7, #20]
 801d928:	f383 8810 	msr	PRIMASK, r3
}
 801d92c:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 801d92e:	687b      	ldr	r3, [r7, #4]
 801d930:	681b      	ldr	r3, [r3, #0]
 801d932:	4a8f      	ldr	r2, [pc, #572]	@ (801db70 <LPTIM_Disable+0x264>)
 801d934:	4293      	cmp	r3, r2
 801d936:	d015      	beq.n	801d964 <LPTIM_Disable+0x58>
 801d938:	4a8d      	ldr	r2, [pc, #564]	@ (801db70 <LPTIM_Disable+0x264>)
 801d93a:	4293      	cmp	r3, r2
 801d93c:	d818      	bhi.n	801d970 <LPTIM_Disable+0x64>
 801d93e:	4a8d      	ldr	r2, [pc, #564]	@ (801db74 <LPTIM_Disable+0x268>)
 801d940:	4293      	cmp	r3, r2
 801d942:	d003      	beq.n	801d94c <LPTIM_Disable+0x40>
 801d944:	4a8c      	ldr	r2, [pc, #560]	@ (801db78 <LPTIM_Disable+0x26c>)
 801d946:	4293      	cmp	r3, r2
 801d948:	d006      	beq.n	801d958 <LPTIM_Disable+0x4c>
      break;
    case LPTIM3_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
      break;
    default:
      break;
 801d94a:	e011      	b.n	801d970 <LPTIM_Disable+0x64>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 801d94c:	f44f 2040 	mov.w	r0, #786432	@ 0xc0000
 801d950:	f7ff fbfa 	bl	801d148 <LL_RCC_GetLPTIMClockSource>
 801d954:	6378      	str	r0, [r7, #52]	@ 0x34
      break;
 801d956:	e00c      	b.n	801d972 <LPTIM_Disable+0x66>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 801d958:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
 801d95c:	f7ff fbf4 	bl	801d148 <LL_RCC_GetLPTIMClockSource>
 801d960:	6378      	str	r0, [r7, #52]	@ 0x34
      break;
 801d962:	e006      	b.n	801d972 <LPTIM_Disable+0x66>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 801d964:	f44f 0040 	mov.w	r0, #12582912	@ 0xc00000
 801d968:	f7ff fbee 	bl	801d148 <LL_RCC_GetLPTIMClockSource>
 801d96c:	6378      	str	r0, [r7, #52]	@ 0x34
      break;
 801d96e:	e000      	b.n	801d972 <LPTIM_Disable+0x66>
      break;
 801d970:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 801d972:	687b      	ldr	r3, [r7, #4]
 801d974:	681b      	ldr	r3, [r3, #0]
 801d976:	689b      	ldr	r3, [r3, #8]
 801d978:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpCFGR = hlptim->Instance->CFGR;
 801d97a:	687b      	ldr	r3, [r7, #4]
 801d97c:	681b      	ldr	r3, [r3, #0]
 801d97e:	68db      	ldr	r3, [r3, #12]
 801d980:	62bb      	str	r3, [r7, #40]	@ 0x28
  tmpCMP = hlptim->Instance->CMP;
 801d982:	687b      	ldr	r3, [r7, #4]
 801d984:	681b      	ldr	r3, [r3, #0]
 801d986:	695b      	ldr	r3, [r3, #20]
 801d988:	627b      	str	r3, [r7, #36]	@ 0x24
  tmpARR = hlptim->Instance->ARR;
 801d98a:	687b      	ldr	r3, [r7, #4]
 801d98c:	681b      	ldr	r3, [r3, #0]
 801d98e:	699b      	ldr	r3, [r3, #24]
 801d990:	623b      	str	r3, [r7, #32]
  tmpOR = hlptim->Instance->OR;
 801d992:	687b      	ldr	r3, [r7, #4]
 801d994:	681b      	ldr	r3, [r3, #0]
 801d996:	6a1b      	ldr	r3, [r3, #32]
 801d998:	61fb      	str	r3, [r7, #28]
  tmpRCR = hlptim->Instance->RCR;
 801d99a:	687b      	ldr	r3, [r7, #4]
 801d99c:	681b      	ldr	r3, [r3, #0]
 801d99e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d9a0:	61bb      	str	r3, [r7, #24]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 801d9a2:	687b      	ldr	r3, [r7, #4]
 801d9a4:	681b      	ldr	r3, [r3, #0]
 801d9a6:	4a72      	ldr	r2, [pc, #456]	@ (801db70 <LPTIM_Disable+0x264>)
 801d9a8:	4293      	cmp	r3, r2
 801d9aa:	d019      	beq.n	801d9e0 <LPTIM_Disable+0xd4>
 801d9ac:	4a70      	ldr	r2, [pc, #448]	@ (801db70 <LPTIM_Disable+0x264>)
 801d9ae:	4293      	cmp	r3, r2
 801d9b0:	d81d      	bhi.n	801d9ee <LPTIM_Disable+0xe2>
 801d9b2:	4a70      	ldr	r2, [pc, #448]	@ (801db74 <LPTIM_Disable+0x268>)
 801d9b4:	4293      	cmp	r3, r2
 801d9b6:	d003      	beq.n	801d9c0 <LPTIM_Disable+0xb4>
 801d9b8:	4a6f      	ldr	r2, [pc, #444]	@ (801db78 <LPTIM_Disable+0x26c>)
 801d9ba:	4293      	cmp	r3, r2
 801d9bc:	d009      	beq.n	801d9d2 <LPTIM_Disable+0xc6>
    case LPTIM3_BASE:
      __HAL_RCC_LPTIM3_FORCE_RESET();
      __HAL_RCC_LPTIM3_RELEASE_RESET();
      break;
    default:
      break;
 801d9be:	e016      	b.n	801d9ee <LPTIM_Disable+0xe2>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 801d9c0:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 801d9c4:	f7ff fbd2 	bl	801d16c <LL_APB1_GRP1_ForceReset>
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 801d9c8:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 801d9cc:	f7ff fbf0 	bl	801d1b0 <LL_APB1_GRP1_ReleaseReset>
      break;
 801d9d0:	e00e      	b.n	801d9f0 <LPTIM_Disable+0xe4>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 801d9d2:	2020      	movs	r0, #32
 801d9d4:	f7ff fbdb 	bl	801d18e <LL_APB1_GRP2_ForceReset>
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 801d9d8:	2020      	movs	r0, #32
 801d9da:	f7ff fbfb 	bl	801d1d4 <LL_APB1_GRP2_ReleaseReset>
      break;
 801d9de:	e007      	b.n	801d9f0 <LPTIM_Disable+0xe4>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 801d9e0:	2040      	movs	r0, #64	@ 0x40
 801d9e2:	f7ff fbd4 	bl	801d18e <LL_APB1_GRP2_ForceReset>
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 801d9e6:	2040      	movs	r0, #64	@ 0x40
 801d9e8:	f7ff fbf4 	bl	801d1d4 <LL_APB1_GRP2_ReleaseReset>
      break;
 801d9ec:	e000      	b.n	801d9f0 <LPTIM_Disable+0xe4>
      break;
 801d9ee:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
 801d9f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d9f2:	2b00      	cmp	r3, #0
 801d9f4:	d106      	bne.n	801da04 <LPTIM_Disable+0xf8>
 801d9f6:	6a3b      	ldr	r3, [r7, #32]
 801d9f8:	2b00      	cmp	r3, #0
 801d9fa:	d103      	bne.n	801da04 <LPTIM_Disable+0xf8>
 801d9fc:	69bb      	ldr	r3, [r7, #24]
 801d9fe:	2b00      	cmp	r3, #0
 801da00:	f000 8097 	beq.w	801db32 <LPTIM_Disable+0x226>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 801da04:	687b      	ldr	r3, [r7, #4]
 801da06:	681b      	ldr	r3, [r3, #0]
 801da08:	4a59      	ldr	r2, [pc, #356]	@ (801db70 <LPTIM_Disable+0x264>)
 801da0a:	4293      	cmp	r3, r2
 801da0c:	d013      	beq.n	801da36 <LPTIM_Disable+0x12a>
 801da0e:	4a58      	ldr	r2, [pc, #352]	@ (801db70 <LPTIM_Disable+0x264>)
 801da10:	4293      	cmp	r3, r2
 801da12:	d815      	bhi.n	801da40 <LPTIM_Disable+0x134>
 801da14:	4a57      	ldr	r2, [pc, #348]	@ (801db74 <LPTIM_Disable+0x268>)
 801da16:	4293      	cmp	r3, r2
 801da18:	d003      	beq.n	801da22 <LPTIM_Disable+0x116>
 801da1a:	4a57      	ldr	r2, [pc, #348]	@ (801db78 <LPTIM_Disable+0x26c>)
 801da1c:	4293      	cmp	r3, r2
 801da1e:	d005      	beq.n	801da2c <LPTIM_Disable+0x120>
        break;
      case LPTIM3_BASE:
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_PCLK1);
        break;
      default:
        break;
 801da20:	e00e      	b.n	801da40 <LPTIM_Disable+0x134>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 801da22:	f44f 2040 	mov.w	r0, #786432	@ 0xc0000
 801da26:	f7ff fb76 	bl	801d116 <LL_RCC_SetLPTIMClockSource>
        break;
 801da2a:	e00a      	b.n	801da42 <LPTIM_Disable+0x136>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 801da2c:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
 801da30:	f7ff fb71 	bl	801d116 <LL_RCC_SetLPTIMClockSource>
        break;
 801da34:	e005      	b.n	801da42 <LPTIM_Disable+0x136>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_PCLK1);
 801da36:	f44f 0040 	mov.w	r0, #12582912	@ 0xc00000
 801da3a:	f7ff fb6c 	bl	801d116 <LL_RCC_SetLPTIMClockSource>
        break;
 801da3e:	e000      	b.n	801da42 <LPTIM_Disable+0x136>
        break;
 801da40:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 801da42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801da44:	2b00      	cmp	r3, #0
 801da46:	d01a      	beq.n	801da7e <LPTIM_Disable+0x172>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 801da48:	687b      	ldr	r3, [r7, #4]
 801da4a:	681b      	ldr	r3, [r3, #0]
 801da4c:	691a      	ldr	r2, [r3, #16]
 801da4e:	687b      	ldr	r3, [r7, #4]
 801da50:	681b      	ldr	r3, [r3, #0]
 801da52:	f042 0201 	orr.w	r2, r2, #1
 801da56:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 801da58:	687b      	ldr	r3, [r7, #4]
 801da5a:	681b      	ldr	r3, [r3, #0]
 801da5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801da5e:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 801da60:	2108      	movs	r1, #8
 801da62:	6878      	ldr	r0, [r7, #4]
 801da64:	f7ff ff22 	bl	801d8ac <LPTIM_WaitForFlag>
 801da68:	4603      	mov	r3, r0
 801da6a:	2b03      	cmp	r3, #3
 801da6c:	d103      	bne.n	801da76 <LPTIM_Disable+0x16a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 801da6e:	687b      	ldr	r3, [r7, #4]
 801da70:	2203      	movs	r2, #3
 801da72:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 801da76:	687b      	ldr	r3, [r7, #4]
 801da78:	681b      	ldr	r3, [r3, #0]
 801da7a:	2208      	movs	r2, #8
 801da7c:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 801da7e:	6a3b      	ldr	r3, [r7, #32]
 801da80:	2b00      	cmp	r3, #0
 801da82:	d01a      	beq.n	801daba <LPTIM_Disable+0x1ae>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 801da84:	687b      	ldr	r3, [r7, #4]
 801da86:	681b      	ldr	r3, [r3, #0]
 801da88:	691a      	ldr	r2, [r3, #16]
 801da8a:	687b      	ldr	r3, [r7, #4]
 801da8c:	681b      	ldr	r3, [r3, #0]
 801da8e:	f042 0201 	orr.w	r2, r2, #1
 801da92:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 801da94:	687b      	ldr	r3, [r7, #4]
 801da96:	681b      	ldr	r3, [r3, #0]
 801da98:	6a3a      	ldr	r2, [r7, #32]
 801da9a:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 801da9c:	2110      	movs	r1, #16
 801da9e:	6878      	ldr	r0, [r7, #4]
 801daa0:	f7ff ff04 	bl	801d8ac <LPTIM_WaitForFlag>
 801daa4:	4603      	mov	r3, r0
 801daa6:	2b03      	cmp	r3, #3
 801daa8:	d103      	bne.n	801dab2 <LPTIM_Disable+0x1a6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 801daaa:	687b      	ldr	r3, [r7, #4]
 801daac:	2203      	movs	r2, #3
 801daae:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 801dab2:	687b      	ldr	r3, [r7, #4]
 801dab4:	681b      	ldr	r3, [r3, #0]
 801dab6:	2210      	movs	r2, #16
 801dab8:	605a      	str	r2, [r3, #4]
    }

    if (tmpRCR != 0UL)
 801daba:	69bb      	ldr	r3, [r7, #24]
 801dabc:	2b00      	cmp	r3, #0
 801dabe:	d01c      	beq.n	801dafa <LPTIM_Disable+0x1ee>
    {
      /* Restore RCR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 801dac0:	687b      	ldr	r3, [r7, #4]
 801dac2:	681b      	ldr	r3, [r3, #0]
 801dac4:	691a      	ldr	r2, [r3, #16]
 801dac6:	687b      	ldr	r3, [r7, #4]
 801dac8:	681b      	ldr	r3, [r3, #0]
 801daca:	f042 0201 	orr.w	r2, r2, #1
 801dace:	611a      	str	r2, [r3, #16]
      hlptim->Instance->RCR = tmpRCR;
 801dad0:	687b      	ldr	r3, [r7, #4]
 801dad2:	681b      	ldr	r3, [r3, #0]
 801dad4:	69ba      	ldr	r2, [r7, #24]
 801dad6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Wait for the completion of the write operation to the LPTIM_RCR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 801dad8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801dadc:	6878      	ldr	r0, [r7, #4]
 801dade:	f7ff fee5 	bl	801d8ac <LPTIM_WaitForFlag>
 801dae2:	4603      	mov	r3, r0
 801dae4:	2b03      	cmp	r3, #3
 801dae6:	d103      	bne.n	801daf0 <LPTIM_Disable+0x1e4>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 801dae8:	687b      	ldr	r3, [r7, #4]
 801daea:	2203      	movs	r2, #3
 801daec:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 801daf0:	687b      	ldr	r3, [r7, #4]
 801daf2:	681b      	ldr	r3, [r3, #0]
 801daf4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801daf8:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 801dafa:	687b      	ldr	r3, [r7, #4]
 801dafc:	681b      	ldr	r3, [r3, #0]
 801dafe:	4a1c      	ldr	r2, [pc, #112]	@ (801db70 <LPTIM_Disable+0x264>)
 801db00:	4293      	cmp	r3, r2
 801db02:	d011      	beq.n	801db28 <LPTIM_Disable+0x21c>
 801db04:	4a1a      	ldr	r2, [pc, #104]	@ (801db70 <LPTIM_Disable+0x264>)
 801db06:	4293      	cmp	r3, r2
 801db08:	d812      	bhi.n	801db30 <LPTIM_Disable+0x224>
 801db0a:	4a1a      	ldr	r2, [pc, #104]	@ (801db74 <LPTIM_Disable+0x268>)
 801db0c:	4293      	cmp	r3, r2
 801db0e:	d003      	beq.n	801db18 <LPTIM_Disable+0x20c>
 801db10:	4a19      	ldr	r2, [pc, #100]	@ (801db78 <LPTIM_Disable+0x26c>)
 801db12:	4293      	cmp	r3, r2
 801db14:	d004      	beq.n	801db20 <LPTIM_Disable+0x214>
        break;
      case LPTIM3_BASE:
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
        break;
      default:
        break;
 801db16:	e00b      	b.n	801db30 <LPTIM_Disable+0x224>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 801db18:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801db1a:	f7ff fafc 	bl	801d116 <LL_RCC_SetLPTIMClockSource>
        break;
 801db1e:	e008      	b.n	801db32 <LPTIM_Disable+0x226>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 801db20:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801db22:	f7ff faf8 	bl	801d116 <LL_RCC_SetLPTIMClockSource>
        break;
 801db26:	e004      	b.n	801db32 <LPTIM_Disable+0x226>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 801db28:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801db2a:	f7ff faf4 	bl	801d116 <LL_RCC_SetLPTIMClockSource>
        break;
 801db2e:	e000      	b.n	801db32 <LPTIM_Disable+0x226>
        break;
 801db30:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 801db32:	687b      	ldr	r3, [r7, #4]
 801db34:	681b      	ldr	r3, [r3, #0]
 801db36:	691a      	ldr	r2, [r3, #16]
 801db38:	687b      	ldr	r3, [r7, #4]
 801db3a:	681b      	ldr	r3, [r3, #0]
 801db3c:	f022 0201 	bic.w	r2, r2, #1
 801db40:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 801db42:	687b      	ldr	r3, [r7, #4]
 801db44:	681b      	ldr	r3, [r3, #0]
 801db46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801db48:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 801db4a:	687b      	ldr	r3, [r7, #4]
 801db4c:	681b      	ldr	r3, [r3, #0]
 801db4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801db50:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 801db52:	687b      	ldr	r3, [r7, #4]
 801db54:	681b      	ldr	r3, [r3, #0]
 801db56:	69fa      	ldr	r2, [r7, #28]
 801db58:	621a      	str	r2, [r3, #32]
 801db5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801db5c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801db5e:	68fb      	ldr	r3, [r7, #12]
 801db60:	f383 8810 	msr	PRIMASK, r3
}
 801db64:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 801db66:	bf00      	nop
 801db68:	3738      	adds	r7, #56	@ 0x38
 801db6a:	46bd      	mov	sp, r7
 801db6c:	bd80      	pop	{r7, pc}
 801db6e:	bf00      	nop
 801db70:	40009800 	.word	0x40009800
 801db74:	40007c00 	.word	0x40007c00
 801db78:	40009400 	.word	0x40009400

0801db7c <ai_buffer_get_size>:
 801db7c:	b360      	cbz	r0, 801dbd8 <ai_buffer_get_size+0x5c>
 801db7e:	b430      	push	{r4, r5}
 801db80:	6803      	ldr	r3, [r0, #0]
 801db82:	4d16      	ldr	r5, [pc, #88]	@ (801dbdc <ai_buffer_get_size+0x60>)
 801db84:	6984      	ldr	r4, [r0, #24]
 801db86:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 801db8a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 801db8e:	42ab      	cmp	r3, r5
 801db90:	6862      	ldr	r2, [r4, #4]
 801db92:	d01b      	beq.n	801dbcc <ai_buffer_get_size+0x50>
 801db94:	7d03      	ldrb	r3, [r0, #20]
 801db96:	6941      	ldr	r1, [r0, #20]
 801db98:	f1a3 0301 	sub.w	r3, r3, #1
 801db9c:	fab3 f383 	clz	r3, r3
 801dba0:	095b      	lsrs	r3, r3, #5
 801dba2:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 801dba6:	f3c1 2017 	ubfx	r0, r1, #8, #24
 801dbaa:	da0b      	bge.n	801dbc4 <ai_buffer_get_size+0x48>
 801dbac:	2b01      	cmp	r3, #1
 801dbae:	d102      	bne.n	801dbb6 <ai_buffer_get_size+0x3a>
 801dbb0:	2802      	cmp	r0, #2
 801dbb2:	d007      	beq.n	801dbc4 <ai_buffer_get_size+0x48>
 801dbb4:	2302      	movs	r3, #2
 801dbb6:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 801dbba:	3301      	adds	r3, #1
 801dbbc:	4298      	cmp	r0, r3
 801dbbe:	fb01 f202 	mul.w	r2, r1, r2
 801dbc2:	d1f3      	bne.n	801dbac <ai_buffer_get_size+0x30>
 801dbc4:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 801dbc8:	bc30      	pop	{r4, r5}
 801dbca:	4770      	bx	lr
 801dbcc:	2900      	cmp	r1, #0
 801dbce:	d0e1      	beq.n	801db94 <ai_buffer_get_size+0x18>
 801dbd0:	321f      	adds	r2, #31
 801dbd2:	f022 021f 	bic.w	r2, r2, #31
 801dbd6:	e7dd      	b.n	801db94 <ai_buffer_get_size+0x18>
 801dbd8:	4770      	bx	lr
 801dbda:	bf00      	nop
 801dbdc:	000400c0 	.word	0x000400c0

0801dbe0 <ai_buffer_array_sane>:
 801dbe0:	b138      	cbz	r0, 801dbf2 <ai_buffer_array_sane+0x12>
 801dbe2:	6843      	ldr	r3, [r0, #4]
 801dbe4:	b123      	cbz	r3, 801dbf0 <ai_buffer_array_sane+0x10>
 801dbe6:	8840      	ldrh	r0, [r0, #2]
 801dbe8:	3800      	subs	r0, #0
 801dbea:	bf18      	it	ne
 801dbec:	2001      	movne	r0, #1
 801dbee:	4770      	bx	lr
 801dbf0:	4618      	mov	r0, r3
 801dbf2:	4770      	bx	lr

0801dbf4 <ai_buffer_array_item_set_address>:
 801dbf4:	b158      	cbz	r0, 801dc0e <ai_buffer_array_item_set_address+0x1a>
 801dbf6:	6843      	ldr	r3, [r0, #4]
 801dbf8:	b143      	cbz	r3, 801dc0c <ai_buffer_array_item_set_address+0x18>
 801dbfa:	8840      	ldrh	r0, [r0, #2]
 801dbfc:	b138      	cbz	r0, 801dc0e <ai_buffer_array_item_set_address+0x1a>
 801dbfe:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 801dc02:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801dc06:	2001      	movs	r0, #1
 801dc08:	605a      	str	r2, [r3, #4]
 801dc0a:	4770      	bx	lr
 801dc0c:	4618      	mov	r0, r3
 801dc0e:	4770      	bx	lr

0801dc10 <ai_platform_get_weights_map>:
 801dc10:	b1f2      	cbz	r2, 801dc50 <ai_platform_get_weights_map+0x40>
 801dc12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dc14:	4605      	mov	r5, r0
 801dc16:	b1c8      	cbz	r0, 801dc4c <ai_platform_get_weights_map+0x3c>
 801dc18:	460c      	mov	r4, r1
 801dc1a:	b1b9      	cbz	r1, 801dc4c <ai_platform_get_weights_map+0x3c>
 801dc1c:	4b24      	ldr	r3, [pc, #144]	@ (801dcb0 <ai_platform_get_weights_map+0xa0>)
 801dc1e:	6811      	ldr	r1, [r2, #0]
 801dc20:	4299      	cmp	r1, r3
 801dc22:	4616      	mov	r6, r2
 801dc24:	d00b      	beq.n	801dc3e <ai_platform_get_weights_map+0x2e>
 801dc26:	6856      	ldr	r6, [r2, #4]
 801dc28:	b186      	cbz	r6, 801dc4c <ai_platform_get_weights_map+0x3c>
 801dc2a:	6837      	ldr	r7, [r6, #0]
 801dc2c:	429f      	cmp	r7, r3
 801dc2e:	d011      	beq.n	801dc54 <ai_platform_get_weights_map+0x44>
 801dc30:	6006      	str	r6, [r0, #0]
 801dc32:	f1a4 0001 	sub.w	r0, r4, #1
 801dc36:	fab0 f080 	clz	r0, r0
 801dc3a:	0940      	lsrs	r0, r0, #5
 801dc3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dc3e:	1d10      	adds	r0, r2, #4
 801dc40:	f7ff ffce 	bl	801dbe0 <ai_buffer_array_sane>
 801dc44:	b110      	cbz	r0, 801dc4c <ai_platform_get_weights_map+0x3c>
 801dc46:	88f3      	ldrh	r3, [r6, #6]
 801dc48:	429c      	cmp	r4, r3
 801dc4a:	d01b      	beq.n	801dc84 <ai_platform_get_weights_map+0x74>
 801dc4c:	2000      	movs	r0, #0
 801dc4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dc50:	2000      	movs	r0, #0
 801dc52:	4770      	bx	lr
 801dc54:	4631      	mov	r1, r6
 801dc56:	3804      	subs	r0, #4
 801dc58:	2300      	movs	r3, #0
 801dc5a:	e004      	b.n	801dc66 <ai_platform_get_weights_map+0x56>
 801dc5c:	3301      	adds	r3, #1
 801dc5e:	429c      	cmp	r4, r3
 801dc60:	f840 2f04 	str.w	r2, [r0, #4]!
 801dc64:	d005      	beq.n	801dc72 <ai_platform_get_weights_map+0x62>
 801dc66:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801dc6a:	42ba      	cmp	r2, r7
 801dc6c:	d1f6      	bne.n	801dc5c <ai_platform_get_weights_map+0x4c>
 801dc6e:	429c      	cmp	r4, r3
 801dc70:	d1ec      	bne.n	801dc4c <ai_platform_get_weights_map+0x3c>
 801dc72:	3401      	adds	r4, #1
 801dc74:	4b0e      	ldr	r3, [pc, #56]	@ (801dcb0 <ai_platform_get_weights_map+0xa0>)
 801dc76:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801dc7a:	1ac0      	subs	r0, r0, r3
 801dc7c:	fab0 f080 	clz	r0, r0
 801dc80:	0940      	lsrs	r0, r0, #5
 801dc82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dc84:	2100      	movs	r1, #0
 801dc86:	1f28      	subs	r0, r5, #4
 801dc88:	468c      	mov	ip, r1
 801dc8a:	e005      	b.n	801dc98 <ai_platform_get_weights_map+0x88>
 801dc8c:	f10c 0c01 	add.w	ip, ip, #1
 801dc90:	4564      	cmp	r4, ip
 801dc92:	f840 3f04 	str.w	r3, [r0, #4]!
 801dc96:	d005      	beq.n	801dca4 <ai_platform_get_weights_map+0x94>
 801dc98:	68b3      	ldr	r3, [r6, #8]
 801dc9a:	440b      	add	r3, r1
 801dc9c:	311c      	adds	r1, #28
 801dc9e:	685b      	ldr	r3, [r3, #4]
 801dca0:	2b00      	cmp	r3, #0
 801dca2:	d1f3      	bne.n	801dc8c <ai_platform_get_weights_map+0x7c>
 801dca4:	eba4 000c 	sub.w	r0, r4, ip
 801dca8:	fab0 f080 	clz	r0, r0
 801dcac:	0940      	lsrs	r0, r0, #5
 801dcae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dcb0:	a1facade 	.word	0xa1facade

0801dcb4 <ai_platform_get_activations_map>:
 801dcb4:	b1fa      	cbz	r2, 801dcf6 <ai_platform_get_activations_map+0x42>
 801dcb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dcb8:	4605      	mov	r5, r0
 801dcba:	b1d0      	cbz	r0, 801dcf2 <ai_platform_get_activations_map+0x3e>
 801dcbc:	460c      	mov	r4, r1
 801dcbe:	b1c1      	cbz	r1, 801dcf2 <ai_platform_get_activations_map+0x3e>
 801dcc0:	4b25      	ldr	r3, [pc, #148]	@ (801dd58 <ai_platform_get_activations_map+0xa4>)
 801dcc2:	6811      	ldr	r1, [r2, #0]
 801dcc4:	4299      	cmp	r1, r3
 801dcc6:	4616      	mov	r6, r2
 801dcc8:	d00b      	beq.n	801dce2 <ai_platform_get_activations_map+0x2e>
 801dcca:	6a16      	ldr	r6, [r2, #32]
 801dccc:	b18e      	cbz	r6, 801dcf2 <ai_platform_get_activations_map+0x3e>
 801dcce:	6837      	ldr	r7, [r6, #0]
 801dcd0:	429f      	cmp	r7, r3
 801dcd2:	d012      	beq.n	801dcfa <ai_platform_get_activations_map+0x46>
 801dcd4:	6006      	str	r6, [r0, #0]
 801dcd6:	f1a4 0001 	sub.w	r0, r4, #1
 801dcda:	fab0 f080 	clz	r0, r0
 801dcde:	0940      	lsrs	r0, r0, #5
 801dce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dce2:	f102 000c 	add.w	r0, r2, #12
 801dce6:	f7ff ff7b 	bl	801dbe0 <ai_buffer_array_sane>
 801dcea:	b110      	cbz	r0, 801dcf2 <ai_platform_get_activations_map+0x3e>
 801dcec:	89f3      	ldrh	r3, [r6, #14]
 801dcee:	429c      	cmp	r4, r3
 801dcf0:	d01b      	beq.n	801dd2a <ai_platform_get_activations_map+0x76>
 801dcf2:	2000      	movs	r0, #0
 801dcf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dcf6:	2000      	movs	r0, #0
 801dcf8:	4770      	bx	lr
 801dcfa:	4631      	mov	r1, r6
 801dcfc:	3804      	subs	r0, #4
 801dcfe:	2300      	movs	r3, #0
 801dd00:	e004      	b.n	801dd0c <ai_platform_get_activations_map+0x58>
 801dd02:	3301      	adds	r3, #1
 801dd04:	429c      	cmp	r4, r3
 801dd06:	f840 2f04 	str.w	r2, [r0, #4]!
 801dd0a:	d005      	beq.n	801dd18 <ai_platform_get_activations_map+0x64>
 801dd0c:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801dd10:	42ba      	cmp	r2, r7
 801dd12:	d1f6      	bne.n	801dd02 <ai_platform_get_activations_map+0x4e>
 801dd14:	429c      	cmp	r4, r3
 801dd16:	d1ec      	bne.n	801dcf2 <ai_platform_get_activations_map+0x3e>
 801dd18:	3401      	adds	r4, #1
 801dd1a:	4b0f      	ldr	r3, [pc, #60]	@ (801dd58 <ai_platform_get_activations_map+0xa4>)
 801dd1c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801dd20:	1ac0      	subs	r0, r0, r3
 801dd22:	fab0 f080 	clz	r0, r0
 801dd26:	0940      	lsrs	r0, r0, #5
 801dd28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dd2a:	2100      	movs	r1, #0
 801dd2c:	1f28      	subs	r0, r5, #4
 801dd2e:	468c      	mov	ip, r1
 801dd30:	e005      	b.n	801dd3e <ai_platform_get_activations_map+0x8a>
 801dd32:	f10c 0c01 	add.w	ip, ip, #1
 801dd36:	4564      	cmp	r4, ip
 801dd38:	f840 3f04 	str.w	r3, [r0, #4]!
 801dd3c:	d005      	beq.n	801dd4a <ai_platform_get_activations_map+0x96>
 801dd3e:	6933      	ldr	r3, [r6, #16]
 801dd40:	440b      	add	r3, r1
 801dd42:	311c      	adds	r1, #28
 801dd44:	685b      	ldr	r3, [r3, #4]
 801dd46:	2b00      	cmp	r3, #0
 801dd48:	d1f3      	bne.n	801dd32 <ai_platform_get_activations_map+0x7e>
 801dd4a:	eba4 000c 	sub.w	r0, r4, ip
 801dd4e:	fab0 f080 	clz	r0, r0
 801dd52:	0940      	lsrs	r0, r0, #5
 801dd54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dd56:	bf00      	nop
 801dd58:	a1facade 	.word	0xa1facade

0801dd5c <ai_platform_bind_network_params>:
 801dd5c:	b198      	cbz	r0, 801dd86 <ai_platform_bind_network_params+0x2a>
 801dd5e:	b1a9      	cbz	r1, 801dd8c <ai_platform_bind_network_params+0x30>
 801dd60:	b1ba      	cbz	r2, 801dd92 <ai_platform_bind_network_params+0x36>
 801dd62:	b410      	push	{r4}
 801dd64:	4603      	mov	r3, r0
 801dd66:	4c0c      	ldr	r4, [pc, #48]	@ (801dd98 <ai_platform_bind_network_params+0x3c>)
 801dd68:	f843 4b04 	str.w	r4, [r3], #4
 801dd6c:	f100 0c0c 	add.w	ip, r0, #12
 801dd70:	c903      	ldmia	r1, {r0, r1}
 801dd72:	e883 0003 	stmia.w	r3, {r0, r1}
 801dd76:	e892 0003 	ldmia.w	r2, {r0, r1}
 801dd7a:	e88c 0003 	stmia.w	ip, {r0, r1}
 801dd7e:	2301      	movs	r3, #1
 801dd80:	4618      	mov	r0, r3
 801dd82:	bc10      	pop	{r4}
 801dd84:	4770      	bx	lr
 801dd86:	4603      	mov	r3, r0
 801dd88:	4618      	mov	r0, r3
 801dd8a:	4770      	bx	lr
 801dd8c:	460b      	mov	r3, r1
 801dd8e:	4618      	mov	r0, r3
 801dd90:	4770      	bx	lr
 801dd92:	4613      	mov	r3, r2
 801dd94:	4618      	mov	r0, r3
 801dd96:	4770      	bx	lr
 801dd98:	a1facade 	.word	0xa1facade

0801dd9c <ai_platform_network_get_error>:
 801dd9c:	4b04      	ldr	r3, [pc, #16]	@ (801ddb0 <ai_platform_network_get_error+0x14>)
 801dd9e:	6802      	ldr	r2, [r0, #0]
 801dda0:	4393      	bics	r3, r2
 801dda2:	d102      	bne.n	801ddaa <ai_platform_network_get_error+0xe>
 801dda4:	300c      	adds	r0, #12
 801dda6:	f000 bc19 	b.w	801e5dc <core_get_error>
 801ddaa:	f241 0010 	movw	r0, #4112	@ 0x1010
 801ddae:	4770      	bx	lr
 801ddb0:	a1c00100 	.word	0xa1c00100

0801ddb4 <ai_platform_network_set_error>:
 801ddb4:	b110      	cbz	r0, 801ddbc <ai_platform_network_set_error+0x8>
 801ddb6:	300c      	adds	r0, #12
 801ddb8:	f000 bc16 	b.w	801e5e8 <core_set_error>
 801ddbc:	4770      	bx	lr
 801ddbe:	bf00      	nop

0801ddc0 <ai_platform_inputs_get>:
 801ddc0:	4b39      	ldr	r3, [pc, #228]	@ (801dea8 <ai_platform_inputs_get+0xe8>)
 801ddc2:	6802      	ldr	r2, [r0, #0]
 801ddc4:	4393      	bics	r3, r2
 801ddc6:	d163      	bne.n	801de90 <ai_platform_inputs_get+0xd0>
 801ddc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ddcc:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 801ddce:	b085      	sub	sp, #20
 801ddd0:	4605      	mov	r5, r0
 801ddd2:	460c      	mov	r4, r1
 801ddd4:	2b00      	cmp	r3, #0
 801ddd6:	d04e      	beq.n	801de76 <ai_platform_inputs_get+0xb6>
 801ddd8:	6b47      	ldr	r7, [r0, #52]	@ 0x34
 801ddda:	2f00      	cmp	r7, #0
 801dddc:	d04b      	beq.n	801de76 <ai_platform_inputs_get+0xb6>
 801ddde:	f04f 0b00 	mov.w	fp, #0
 801dde2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801dde6:	465e      	mov	r6, fp
 801dde8:	46ba      	mov	sl, r7
 801ddea:	e017      	b.n	801de1c <ai_platform_inputs_get+0x5c>
 801ddec:	9901      	ldr	r1, [sp, #4]
 801ddee:	f04f 0c01 	mov.w	ip, #1
 801ddf2:	f847 c001 	str.w	ip, [r7, r1]
 801ddf6:	69a1      	ldr	r1, [r4, #24]
 801ddf8:	684c      	ldr	r4, [r1, #4]
 801ddfa:	6028      	str	r0, [r5, #0]
 801ddfc:	f04f 0101 	mov.w	r1, #1
 801de00:	7529      	strb	r1, [r5, #20]
 801de02:	6968      	ldr	r0, [r5, #20]
 801de04:	60ab      	str	r3, [r5, #8]
 801de06:	f368 201f 	bfi	r0, r8, #8, #24
 801de0a:	2300      	movs	r3, #0
 801de0c:	e9c5 3403 	strd	r3, r4, [r5, #12]
 801de10:	e9c5 0905 	strd	r0, r9, [r5, #20]
 801de14:	606a      	str	r2, [r5, #4]
 801de16:	3601      	adds	r6, #1
 801de18:	f10b 0b1c 	add.w	fp, fp, #28
 801de1c:	f8ba 3000 	ldrh.w	r3, [sl]
 801de20:	00f2      	lsls	r2, r6, #3
 801de22:	42b3      	cmp	r3, r6
 801de24:	9201      	str	r2, [sp, #4]
 801de26:	d935      	bls.n	801de94 <ai_platform_inputs_get+0xd4>
 801de28:	f8da 3004 	ldr.w	r3, [sl, #4]
 801de2c:	2b00      	cmp	r3, #0
 801de2e:	d031      	beq.n	801de94 <ai_platform_inputs_get+0xd4>
 801de30:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 801de34:	b374      	cbz	r4, 801de94 <ai_platform_inputs_get+0xd4>
 801de36:	f8da 3008 	ldr.w	r3, [sl, #8]
 801de3a:	69a2      	ldr	r2, [r4, #24]
 801de3c:	f8d4 900c 	ldr.w	r9, [r4, #12]
 801de40:	6810      	ldr	r0, [r2, #0]
 801de42:	e9d3 5701 	ldrd	r5, r7, [r3, #4]
 801de46:	68a3      	ldr	r3, [r4, #8]
 801de48:	f3c3 2817 	ubfx	r8, r3, #8, #24
 801de4c:	f001 fbc2 	bl	801f5d4 <ai_array_to_buffer_fmt>
 801de50:	69a1      	ldr	r1, [r4, #24]
 801de52:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
 801de56:	688a      	ldr	r2, [r1, #8]
 801de58:	445d      	add	r5, fp
 801de5a:	2b00      	cmp	r3, #0
 801de5c:	d0cc      	beq.n	801ddf8 <ai_platform_inputs_get+0x38>
 801de5e:	2100      	movs	r1, #0
 801de60:	f847 1036 	str.w	r1, [r7, r6, lsl #3]
 801de64:	6821      	ldr	r1, [r4, #0]
 801de66:	6059      	str	r1, [r3, #4]
 801de68:	b111      	cbz	r1, 801de70 <ai_platform_inputs_get+0xb0>
 801de6a:	8849      	ldrh	r1, [r1, #2]
 801de6c:	2900      	cmp	r1, #0
 801de6e:	d1bd      	bne.n	801ddec <ai_platform_inputs_get+0x2c>
 801de70:	69a1      	ldr	r1, [r4, #24]
 801de72:	2300      	movs	r3, #0
 801de74:	e7c0      	b.n	801ddf8 <ai_platform_inputs_get+0x38>
 801de76:	2218      	movs	r2, #24
 801de78:	2111      	movs	r1, #17
 801de7a:	f105 000c 	add.w	r0, r5, #12
 801de7e:	2600      	movs	r6, #0
 801de80:	f000 fbb2 	bl	801e5e8 <core_set_error>
 801de84:	4630      	mov	r0, r6
 801de86:	b104      	cbz	r4, 801de8a <ai_platform_inputs_get+0xca>
 801de88:	8026      	strh	r6, [r4, #0]
 801de8a:	b005      	add	sp, #20
 801de8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801de90:	2000      	movs	r0, #0
 801de92:	4770      	bx	lr
 801de94:	b2b6      	uxth	r6, r6
 801de96:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 801de9a:	2e00      	cmp	r6, #0
 801de9c:	d0eb      	beq.n	801de76 <ai_platform_inputs_get+0xb6>
 801de9e:	f8da 3008 	ldr.w	r3, [sl, #8]
 801dea2:	6858      	ldr	r0, [r3, #4]
 801dea4:	e7ef      	b.n	801de86 <ai_platform_inputs_get+0xc6>
 801dea6:	bf00      	nop
 801dea8:	a1c00100 	.word	0xa1c00100

0801deac <ai_platform_outputs_get>:
 801deac:	4b37      	ldr	r3, [pc, #220]	@ (801df8c <ai_platform_outputs_get+0xe0>)
 801deae:	6802      	ldr	r2, [r0, #0]
 801deb0:	4393      	bics	r3, r2
 801deb2:	d169      	bne.n	801df88 <ai_platform_outputs_get+0xdc>
 801deb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801deb8:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 801deba:	2b01      	cmp	r3, #1
 801debc:	b085      	sub	sp, #20
 801debe:	4605      	mov	r5, r0
 801dec0:	460c      	mov	r4, r1
 801dec2:	d94b      	bls.n	801df5c <ai_platform_outputs_get+0xb0>
 801dec4:	6b47      	ldr	r7, [r0, #52]	@ 0x34
 801dec6:	f04f 0b00 	mov.w	fp, #0
 801deca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801dece:	465e      	mov	r6, fp
 801ded0:	46d8      	mov	r8, fp
 801ded2:	46ba      	mov	sl, r7
 801ded4:	e017      	b.n	801df06 <ai_platform_outputs_get+0x5a>
 801ded6:	9901      	ldr	r1, [sp, #4]
 801ded8:	f04f 0c01 	mov.w	ip, #1
 801dedc:	f847 c001 	str.w	ip, [r7, r1]
 801dee0:	69a9      	ldr	r1, [r5, #24]
 801dee2:	684d      	ldr	r5, [r1, #4]
 801dee4:	6020      	str	r0, [r4, #0]
 801dee6:	f04f 0101 	mov.w	r1, #1
 801deea:	7521      	strb	r1, [r4, #20]
 801deec:	6960      	ldr	r0, [r4, #20]
 801deee:	6062      	str	r2, [r4, #4]
 801def0:	f369 201f 	bfi	r0, r9, #8, #24
 801def4:	e9c4 5004 	strd	r5, r0, [r4, #16]
 801def8:	e9c4 3802 	strd	r3, r8, [r4, #8]
 801defc:	9b00      	ldr	r3, [sp, #0]
 801defe:	61a3      	str	r3, [r4, #24]
 801df00:	3601      	adds	r6, #1
 801df02:	f10b 0b1c 	add.w	fp, fp, #28
 801df06:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801df0a:	00f2      	lsls	r2, r6, #3
 801df0c:	42b3      	cmp	r3, r6
 801df0e:	9201      	str	r2, [sp, #4]
 801df10:	d931      	bls.n	801df76 <ai_platform_outputs_get+0xca>
 801df12:	f8da 3010 	ldr.w	r3, [sl, #16]
 801df16:	b373      	cbz	r3, 801df76 <ai_platform_outputs_get+0xca>
 801df18:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
 801df1c:	b35d      	cbz	r5, 801df76 <ai_platform_outputs_get+0xca>
 801df1e:	f8da 3014 	ldr.w	r3, [sl, #20]
 801df22:	69aa      	ldr	r2, [r5, #24]
 801df24:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 801df28:	68ab      	ldr	r3, [r5, #8]
 801df2a:	6810      	ldr	r0, [r2, #0]
 801df2c:	f3c3 2917 	ubfx	r9, r3, #8, #24
 801df30:	68eb      	ldr	r3, [r5, #12]
 801df32:	9300      	str	r3, [sp, #0]
 801df34:	f001 fb4e 	bl	801f5d4 <ai_array_to_buffer_fmt>
 801df38:	69a9      	ldr	r1, [r5, #24]
 801df3a:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
 801df3e:	688a      	ldr	r2, [r1, #8]
 801df40:	445c      	add	r4, fp
 801df42:	2b00      	cmp	r3, #0
 801df44:	d0cd      	beq.n	801dee2 <ai_platform_outputs_get+0x36>
 801df46:	f847 8036 	str.w	r8, [r7, r6, lsl #3]
 801df4a:	6829      	ldr	r1, [r5, #0]
 801df4c:	6059      	str	r1, [r3, #4]
 801df4e:	b111      	cbz	r1, 801df56 <ai_platform_outputs_get+0xaa>
 801df50:	8849      	ldrh	r1, [r1, #2]
 801df52:	2900      	cmp	r1, #0
 801df54:	d1bf      	bne.n	801ded6 <ai_platform_outputs_get+0x2a>
 801df56:	69a9      	ldr	r1, [r5, #24]
 801df58:	2300      	movs	r3, #0
 801df5a:	e7c2      	b.n	801dee2 <ai_platform_outputs_get+0x36>
 801df5c:	2218      	movs	r2, #24
 801df5e:	2111      	movs	r1, #17
 801df60:	f105 000c 	add.w	r0, r5, #12
 801df64:	2600      	movs	r6, #0
 801df66:	f000 fb3f 	bl	801e5e8 <core_set_error>
 801df6a:	4630      	mov	r0, r6
 801df6c:	b104      	cbz	r4, 801df70 <ai_platform_outputs_get+0xc4>
 801df6e:	8026      	strh	r6, [r4, #0]
 801df70:	b005      	add	sp, #20
 801df72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df76:	b2b6      	uxth	r6, r6
 801df78:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 801df7c:	2e00      	cmp	r6, #0
 801df7e:	d0ed      	beq.n	801df5c <ai_platform_outputs_get+0xb0>
 801df80:	f8da 3014 	ldr.w	r3, [sl, #20]
 801df84:	6858      	ldr	r0, [r3, #4]
 801df86:	e7f1      	b.n	801df6c <ai_platform_outputs_get+0xc0>
 801df88:	2000      	movs	r0, #0
 801df8a:	4770      	bx	lr
 801df8c:	a1c00100 	.word	0xa1c00100

0801df90 <ai_platform_network_create>:
 801df90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801df94:	b083      	sub	sp, #12
 801df96:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 801df9a:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 801df9e:	b320      	cbz	r0, 801dfea <ai_platform_network_create+0x5a>
 801dfa0:	6002      	str	r2, [r0, #0]
 801dfa2:	4616      	mov	r6, r2
 801dfa4:	461f      	mov	r7, r3
 801dfa6:	4604      	mov	r4, r0
 801dfa8:	f000 fb16 	bl	801e5d8 <core_init>
 801dfac:	b970      	cbnz	r0, 801dfcc <ai_platform_network_create+0x3c>
 801dfae:	2530      	movs	r5, #48	@ 0x30
 801dfb0:	2300      	movs	r3, #0
 801dfb2:	6023      	str	r3, [r4, #0]
 801dfb4:	2410      	movs	r4, #16
 801dfb6:	464a      	mov	r2, r9
 801dfb8:	4641      	mov	r1, r8
 801dfba:	4638      	mov	r0, r7
 801dfbc:	f001 fb8c 	bl	801f6d8 <ai_version_get>
 801dfc0:	60b0      	str	r0, [r6, #8]
 801dfc2:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 801dfc6:	b003      	add	sp, #12
 801dfc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801dfcc:	2200      	movs	r2, #0
 801dfce:	4641      	mov	r1, r8
 801dfd0:	4638      	mov	r0, r7
 801dfd2:	f001 fb81 	bl	801f6d8 <ai_version_get>
 801dfd6:	2200      	movs	r2, #0
 801dfd8:	4605      	mov	r5, r0
 801dfda:	2105      	movs	r1, #5
 801dfdc:	2001      	movs	r0, #1
 801dfde:	f001 fb7b 	bl	801f6d8 <ai_version_get>
 801dfe2:	4285      	cmp	r5, r0
 801dfe4:	d008      	beq.n	801dff8 <ai_platform_network_create+0x68>
 801dfe6:	2501      	movs	r5, #1
 801dfe8:	e7e2      	b.n	801dfb0 <ai_platform_network_create+0x20>
 801dfea:	2510      	movs	r5, #16
 801dfec:	462c      	mov	r4, r5
 801dfee:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 801dff2:	b003      	add	sp, #12
 801dff4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801dff8:	4b05      	ldr	r3, [pc, #20]	@ (801e010 <ai_platform_network_create+0x80>)
 801dffa:	9301      	str	r3, [sp, #4]
 801dffc:	a801      	add	r0, sp, #4
 801dffe:	f000 faff 	bl	801e600 <ai_check_custom_types>
 801e002:	b110      	cbz	r0, 801e00a <ai_platform_network_create+0x7a>
 801e004:	2400      	movs	r4, #0
 801e006:	4625      	mov	r5, r4
 801e008:	e7d5      	b.n	801dfb6 <ai_platform_network_create+0x26>
 801e00a:	2502      	movs	r5, #2
 801e00c:	e7d0      	b.n	801dfb0 <ai_platform_network_create+0x20>
 801e00e:	bf00      	nop
 801e010:	84048403 	.word	0x84048403

0801e014 <ai_platform_network_init>:
 801e014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e018:	4a48      	ldr	r2, [pc, #288]	@ (801e13c <ai_platform_network_init+0x128>)
 801e01a:	4604      	mov	r4, r0
 801e01c:	6800      	ldr	r0, [r0, #0]
 801e01e:	460b      	mov	r3, r1
 801e020:	ea00 0102 	and.w	r1, r0, r2
 801e024:	4382      	bics	r2, r0
 801e026:	d13b      	bne.n	801e0a0 <ai_platform_network_init+0x8c>
 801e028:	2b00      	cmp	r3, #0
 801e02a:	d078      	beq.n	801e11e <ai_platform_network_init+0x10a>
 801e02c:	4a44      	ldr	r2, [pc, #272]	@ (801e140 <ai_platform_network_init+0x12c>)
 801e02e:	681d      	ldr	r5, [r3, #0]
 801e030:	4295      	cmp	r5, r2
 801e032:	d10a      	bne.n	801e04a <ai_platform_network_init+0x36>
 801e034:	4288      	cmp	r0, r1
 801e036:	e9d3 2503 	ldrd	r2, r5, [r3, #12]
 801e03a:	e9d3 6301 	ldrd	r6, r3, [r3, #4]
 801e03e:	d03d      	beq.n	801e0bc <ai_platform_network_init+0xa8>
 801e040:	2303      	movs	r3, #3
 801e042:	6123      	str	r3, [r4, #16]
 801e044:	4620      	mov	r0, r4
 801e046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e04a:	2101      	movs	r1, #1
 801e04c:	4618      	mov	r0, r3
 801e04e:	461d      	mov	r5, r3
 801e050:	f8d3 8004 	ldr.w	r8, [r3, #4]
 801e054:	f7ff fd92 	bl	801db7c <ai_buffer_get_size>
 801e058:	f105 071c 	add.w	r7, r5, #28
 801e05c:	4606      	mov	r6, r0
 801e05e:	2101      	movs	r1, #1
 801e060:	4638      	mov	r0, r7
 801e062:	f8d5 9020 	ldr.w	r9, [r5, #32]
 801e066:	f7ff fd89 	bl	801db7c <ai_buffer_get_size>
 801e06a:	2e00      	cmp	r6, #0
 801e06c:	bf0a      	itet	eq
 801e06e:	4631      	moveq	r1, r6
 801e070:	2101      	movne	r1, #1
 801e072:	4635      	moveq	r5, r6
 801e074:	b1b0      	cbz	r0, 801e0a4 <ai_platform_network_init+0x90>
 801e076:	f1b9 0f00 	cmp.w	r9, #0
 801e07a:	d057      	beq.n	801e12c <ai_platform_network_init+0x118>
 801e07c:	f04f 0e01 	mov.w	lr, #1
 801e080:	f1b8 0f00 	cmp.w	r8, #0
 801e084:	d011      	beq.n	801e0aa <ai_platform_network_init+0x96>
 801e086:	4b2d      	ldr	r3, [pc, #180]	@ (801e13c <ai_platform_network_init+0x128>)
 801e088:	6822      	ldr	r2, [r4, #0]
 801e08a:	429a      	cmp	r2, r3
 801e08c:	d1d8      	bne.n	801e040 <ai_platform_network_init+0x2c>
 801e08e:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 801e090:	428b      	cmp	r3, r1
 801e092:	d21b      	bcs.n	801e0cc <ai_platform_network_init+0xb8>
 801e094:	2212      	movs	r2, #18
 801e096:	2116      	movs	r1, #22
 801e098:	f104 000c 	add.w	r0, r4, #12
 801e09c:	f000 faa4 	bl	801e5e8 <core_set_error>
 801e0a0:	2000      	movs	r0, #0
 801e0a2:	e7d0      	b.n	801e046 <ai_platform_network_init+0x32>
 801e0a4:	4607      	mov	r7, r0
 801e0a6:	4686      	mov	lr, r0
 801e0a8:	e7ea      	b.n	801e080 <ai_platform_network_init+0x6c>
 801e0aa:	2e00      	cmp	r6, #0
 801e0ac:	d0eb      	beq.n	801e086 <ai_platform_network_init+0x72>
 801e0ae:	2212      	movs	r2, #18
 801e0b0:	2110      	movs	r1, #16
 801e0b2:	f104 000c 	add.w	r0, r4, #12
 801e0b6:	f000 fa97 	bl	801e5e8 <core_set_error>
 801e0ba:	e7f1      	b.n	801e0a0 <ai_platform_network_init+0x8c>
 801e0bc:	e9c4 6308 	strd	r6, r3, [r4, #32]
 801e0c0:	62e5      	str	r5, [r4, #44]	@ 0x2c
 801e0c2:	62a2      	str	r2, [r4, #40]	@ 0x28
 801e0c4:	4620      	mov	r0, r4
 801e0c6:	f000 fac5 	bl	801e654 <ai_layers_init_all>
 801e0ca:	e7b9      	b.n	801e040 <ai_platform_network_init+0x2c>
 801e0cc:	b1e1      	cbz	r1, 801e108 <ai_platform_network_init+0xf4>
 801e0ce:	46ac      	mov	ip, r5
 801e0d0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801e0d4:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 801e0d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801e0d8:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 801e0dc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 801e0e0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 801e0e2:	f44f 3680 	mov.w	r6, #65536	@ 0x10000
 801e0e6:	4573      	cmp	r3, lr
 801e0e8:	6226      	str	r6, [r4, #32]
 801e0ea:	d311      	bcc.n	801e110 <ai_platform_network_init+0xfc>
 801e0ec:	f1be 0f00 	cmp.w	lr, #0
 801e0f0:	d007      	beq.n	801e102 <ai_platform_network_init+0xee>
 801e0f2:	463e      	mov	r6, r7
 801e0f4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801e0f6:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 801e0f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801e0fa:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801e0fe:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 801e102:	ea4f 420e 	mov.w	r2, lr, lsl #16
 801e106:	e7dc      	b.n	801e0c2 <ai_platform_network_init+0xae>
 801e108:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 801e10a:	6221      	str	r1, [r4, #32]
 801e10c:	4573      	cmp	r3, lr
 801e10e:	d2ed      	bcs.n	801e0ec <ai_platform_network_init+0xd8>
 801e110:	2213      	movs	r2, #19
 801e112:	2116      	movs	r1, #22
 801e114:	f104 000c 	add.w	r0, r4, #12
 801e118:	f000 fa66 	bl	801e5e8 <core_set_error>
 801e11c:	e7c0      	b.n	801e0a0 <ai_platform_network_init+0x8c>
 801e11e:	2211      	movs	r2, #17
 801e120:	2110      	movs	r1, #16
 801e122:	f104 000c 	add.w	r0, r4, #12
 801e126:	f000 fa5f 	bl	801e5e8 <core_set_error>
 801e12a:	e7b9      	b.n	801e0a0 <ai_platform_network_init+0x8c>
 801e12c:	2213      	movs	r2, #19
 801e12e:	2110      	movs	r1, #16
 801e130:	f104 000c 	add.w	r0, r4, #12
 801e134:	f000 fa58 	bl	801e5e8 <core_set_error>
 801e138:	e7b2      	b.n	801e0a0 <ai_platform_network_init+0x8c>
 801e13a:	bf00      	nop
 801e13c:	a1c00100 	.word	0xa1c00100
 801e140:	a1facade 	.word	0xa1facade

0801e144 <ai_platform_network_post_init>:
 801e144:	4b15      	ldr	r3, [pc, #84]	@ (801e19c <ai_platform_network_post_init+0x58>)
 801e146:	6802      	ldr	r2, [r0, #0]
 801e148:	ea02 0103 	and.w	r1, r2, r3
 801e14c:	4393      	bics	r3, r2
 801e14e:	d123      	bne.n	801e198 <ai_platform_network_post_init+0x54>
 801e150:	b570      	push	{r4, r5, r6, lr}
 801e152:	6903      	ldr	r3, [r0, #16]
 801e154:	079b      	lsls	r3, r3, #30
 801e156:	4604      	mov	r4, r0
 801e158:	d503      	bpl.n	801e162 <ai_platform_network_post_init+0x1e>
 801e15a:	428a      	cmp	r2, r1
 801e15c:	d008      	beq.n	801e170 <ai_platform_network_post_init+0x2c>
 801e15e:	2001      	movs	r0, #1
 801e160:	bd70      	pop	{r4, r5, r6, pc}
 801e162:	2210      	movs	r2, #16
 801e164:	2111      	movs	r1, #17
 801e166:	300c      	adds	r0, #12
 801e168:	f000 fa3e 	bl	801e5e8 <core_set_error>
 801e16c:	2000      	movs	r0, #0
 801e16e:	bd70      	pop	{r4, r5, r6, pc}
 801e170:	f000 fa80 	bl	801e674 <ai_layers_post_init_all>
 801e174:	6c26      	ldr	r6, [r4, #64]	@ 0x40
 801e176:	2e00      	cmp	r6, #0
 801e178:	d0f1      	beq.n	801e15e <ai_platform_network_post_init+0x1a>
 801e17a:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 801e17c:	2d00      	cmp	r5, #0
 801e17e:	d0ee      	beq.n	801e15e <ai_platform_network_post_init+0x1a>
 801e180:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 801e182:	4629      	mov	r1, r5
 801e184:	2000      	movs	r0, #0
 801e186:	47b0      	blx	r6
 801e188:	692b      	ldr	r3, [r5, #16]
 801e18a:	42ab      	cmp	r3, r5
 801e18c:	d0e7      	beq.n	801e15e <ai_platform_network_post_init+0x1a>
 801e18e:	2b00      	cmp	r3, #0
 801e190:	d0e5      	beq.n	801e15e <ai_platform_network_post_init+0x1a>
 801e192:	6c26      	ldr	r6, [r4, #64]	@ 0x40
 801e194:	461d      	mov	r5, r3
 801e196:	e7f3      	b.n	801e180 <ai_platform_network_post_init+0x3c>
 801e198:	2000      	movs	r0, #0
 801e19a:	4770      	bx	lr
 801e19c:	a1c00100 	.word	0xa1c00100

0801e1a0 <ai_platform_network_process>:
 801e1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e1a4:	4bb7      	ldr	r3, [pc, #732]	@ (801e484 <ai_platform_network_process+0x2e4>)
 801e1a6:	4607      	mov	r7, r0
 801e1a8:	6800      	ldr	r0, [r0, #0]
 801e1aa:	4383      	bics	r3, r0
 801e1ac:	b085      	sub	sp, #20
 801e1ae:	f040 812d 	bne.w	801e40c <ai_platform_network_process+0x26c>
 801e1b2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801e1b4:	2b00      	cmp	r3, #0
 801e1b6:	f000 811d 	beq.w	801e3f4 <ai_platform_network_process+0x254>
 801e1ba:	693b      	ldr	r3, [r7, #16]
 801e1bc:	f8d7 9034 	ldr.w	r9, [r7, #52]	@ 0x34
 801e1c0:	f003 0303 	and.w	r3, r3, #3
 801e1c4:	2600      	movs	r6, #0
 801e1c6:	2b03      	cmp	r3, #3
 801e1c8:	61be      	str	r6, [r7, #24]
 801e1ca:	f040 8129 	bne.w	801e420 <ai_platform_network_process+0x280>
 801e1ce:	2900      	cmp	r1, #0
 801e1d0:	f000 8116 	beq.w	801e400 <ai_platform_network_process+0x260>
 801e1d4:	f1b9 0f00 	cmp.w	r9, #0
 801e1d8:	f000 8112 	beq.w	801e400 <ai_platform_network_process+0x260>
 801e1dc:	f8b9 3000 	ldrh.w	r3, [r9]
 801e1e0:	2b00      	cmp	r3, #0
 801e1e2:	f000 810d 	beq.w	801e400 <ai_platform_network_process+0x260>
 801e1e6:	698b      	ldr	r3, [r1, #24]
 801e1e8:	e9cd 7202 	strd	r7, r2, [sp, #8]
 801e1ec:	f8d3 b000 	ldr.w	fp, [r3]
 801e1f0:	460c      	mov	r4, r1
 801e1f2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801e1f6:	2b00      	cmp	r3, #0
 801e1f8:	d072      	beq.n	801e2e0 <ai_platform_network_process+0x140>
 801e1fa:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
 801e1fe:	2d00      	cmp	r5, #0
 801e200:	d06e      	beq.n	801e2e0 <ai_platform_network_process+0x140>
 801e202:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801e206:	f8d3 a000 	ldr.w	sl, [r3]
 801e20a:	0133      	lsls	r3, r6, #4
 801e20c:	eb1a 1806 	adds.w	r8, sl, r6, lsl #4
 801e210:	9301      	str	r3, [sp, #4]
 801e212:	f000 81ba 	beq.w	801e58a <ai_platform_network_process+0x3ea>
 801e216:	69ab      	ldr	r3, [r5, #24]
 801e218:	2101      	movs	r1, #1
 801e21a:	4620      	mov	r0, r4
 801e21c:	685f      	ldr	r7, [r3, #4]
 801e21e:	f7ff fcad 	bl	801db7c <ai_buffer_get_size>
 801e222:	4287      	cmp	r7, r0
 801e224:	f0c0 8103 	bcc.w	801e42e <ai_platform_network_process+0x28e>
 801e228:	68e8      	ldr	r0, [r5, #12]
 801e22a:	69a1      	ldr	r1, [r4, #24]
 801e22c:	68c2      	ldr	r2, [r0, #12]
 801e22e:	68cb      	ldr	r3, [r1, #12]
 801e230:	429a      	cmp	r2, r3
 801e232:	f040 80fc 	bne.w	801e42e <ai_platform_network_process+0x28e>
 801e236:	6882      	ldr	r2, [r0, #8]
 801e238:	688b      	ldr	r3, [r1, #8]
 801e23a:	429a      	cmp	r2, r3
 801e23c:	f040 80f7 	bne.w	801e42e <ai_platform_network_process+0x28e>
 801e240:	6842      	ldr	r2, [r0, #4]
 801e242:	684b      	ldr	r3, [r1, #4]
 801e244:	429a      	cmp	r2, r3
 801e246:	f040 80f2 	bne.w	801e42e <ai_platform_network_process+0x28e>
 801e24a:	69ab      	ldr	r3, [r5, #24]
 801e24c:	e9d3 0100 	ldrd	r0, r1, [r3]
 801e250:	f001 fa30 	bl	801f6b4 <ai_array_get_data_byte_size>
 801e254:	9001      	str	r0, [sp, #4]
 801e256:	4628      	mov	r0, r5
 801e258:	f001 fa44 	bl	801f6e4 <get_tensor_byte_size>
 801e25c:	9b01      	ldr	r3, [sp, #4]
 801e25e:	4283      	cmp	r3, r0
 801e260:	f0c0 80e5 	bcc.w	801e42e <ai_platform_network_process+0x28e>
 801e264:	69ab      	ldr	r3, [r5, #24]
 801e266:	6818      	ldr	r0, [r3, #0]
 801e268:	f001 f9b4 	bl	801f5d4 <ai_array_to_buffer_fmt>
 801e26c:	6823      	ldr	r3, [r4, #0]
 801e26e:	4058      	eors	r0, r3
 801e270:	f030 437e 	bics.w	r3, r0, #4261412864	@ 0xfe000000
 801e274:	f040 8193 	bne.w	801e59e <ai_platform_network_process+0x3fe>
 801e278:	6863      	ldr	r3, [r4, #4]
 801e27a:	2b00      	cmp	r3, #0
 801e27c:	f000 8185 	beq.w	801e58a <ai_platform_network_process+0x3ea>
 801e280:	69a3      	ldr	r3, [r4, #24]
 801e282:	681b      	ldr	r3, [r3, #0]
 801e284:	2b00      	cmp	r3, #0
 801e286:	f000 8182 	beq.w	801e58e <ai_platform_network_process+0x3ee>
 801e28a:	459b      	cmp	fp, r3
 801e28c:	4628      	mov	r0, r5
 801e28e:	bf38      	it	cc
 801e290:	469b      	movcc	fp, r3
 801e292:	f001 fa27 	bl	801f6e4 <get_tensor_byte_size>
 801e296:	f8c8 0008 	str.w	r0, [r8, #8]
 801e29a:	69a3      	ldr	r3, [r4, #24]
 801e29c:	681b      	ldr	r3, [r3, #0]
 801e29e:	fb00 f303 	mul.w	r3, r0, r3
 801e2a2:	f8c8 300c 	str.w	r3, [r8, #12]
 801e2a6:	6861      	ldr	r1, [r4, #4]
 801e2a8:	f8c8 1004 	str.w	r1, [r8, #4]
 801e2ac:	0132      	lsls	r2, r6, #4
 801e2ae:	440b      	add	r3, r1
 801e2b0:	f84a 3002 	str.w	r3, [sl, r2]
 801e2b4:	69a8      	ldr	r0, [r5, #24]
 801e2b6:	6803      	ldr	r3, [r0, #0]
 801e2b8:	009a      	lsls	r2, r3, #2
 801e2ba:	f106 0601 	add.w	r6, r6, #1
 801e2be:	f104 041c 	add.w	r4, r4, #28
 801e2c2:	f100 80a7 	bmi.w	801e414 <ai_platform_network_process+0x274>
 801e2c6:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 801e2ca:	1a9b      	subs	r3, r3, r2
 801e2cc:	4419      	add	r1, r3
 801e2ce:	6081      	str	r1, [r0, #8]
 801e2d0:	69ab      	ldr	r3, [r5, #24]
 801e2d2:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801e2d6:	60da      	str	r2, [r3, #12]
 801e2d8:	f8b9 3000 	ldrh.w	r3, [r9]
 801e2dc:	42b3      	cmp	r3, r6
 801e2de:	d888      	bhi.n	801e1f2 <ai_platform_network_process+0x52>
 801e2e0:	e9dd 7802 	ldrd	r7, r8, [sp, #8]
 801e2e4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801e2e6:	f1b8 0f00 	cmp.w	r8, #0
 801e2ea:	f000 80b5 	beq.w	801e458 <ai_platform_network_process+0x2b8>
 801e2ee:	2b01      	cmp	r3, #1
 801e2f0:	f240 80a5 	bls.w	801e43e <ai_platform_network_process+0x29e>
 801e2f4:	f8d7 9034 	ldr.w	r9, [r7, #52]	@ 0x34
 801e2f8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801e2fc:	2b00      	cmp	r3, #0
 801e2fe:	f000 809e 	beq.w	801e43e <ai_platform_network_process+0x29e>
 801e302:	4645      	mov	r5, r8
 801e304:	2600      	movs	r6, #0
 801e306:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801e30a:	2b00      	cmp	r3, #0
 801e30c:	f000 80a3 	beq.w	801e456 <ai_platform_network_process+0x2b6>
 801e310:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 801e314:	2c00      	cmp	r4, #0
 801e316:	f000 809e 	beq.w	801e456 <ai_platform_network_process+0x2b6>
 801e31a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801e31e:	f8d3 a000 	ldr.w	sl, [r3]
 801e322:	0133      	lsls	r3, r6, #4
 801e324:	eb1a 1806 	adds.w	r8, sl, r6, lsl #4
 801e328:	9301      	str	r3, [sp, #4]
 801e32a:	f000 8140 	beq.w	801e5ae <ai_platform_network_process+0x40e>
 801e32e:	69a3      	ldr	r3, [r4, #24]
 801e330:	2101      	movs	r1, #1
 801e332:	685b      	ldr	r3, [r3, #4]
 801e334:	9301      	str	r3, [sp, #4]
 801e336:	4628      	mov	r0, r5
 801e338:	f7ff fc20 	bl	801db7c <ai_buffer_get_size>
 801e33c:	9b01      	ldr	r3, [sp, #4]
 801e33e:	4283      	cmp	r3, r0
 801e340:	d37d      	bcc.n	801e43e <ai_platform_network_process+0x29e>
 801e342:	68e0      	ldr	r0, [r4, #12]
 801e344:	69a9      	ldr	r1, [r5, #24]
 801e346:	68c2      	ldr	r2, [r0, #12]
 801e348:	68cb      	ldr	r3, [r1, #12]
 801e34a:	429a      	cmp	r2, r3
 801e34c:	d177      	bne.n	801e43e <ai_platform_network_process+0x29e>
 801e34e:	6882      	ldr	r2, [r0, #8]
 801e350:	688b      	ldr	r3, [r1, #8]
 801e352:	429a      	cmp	r2, r3
 801e354:	d173      	bne.n	801e43e <ai_platform_network_process+0x29e>
 801e356:	6842      	ldr	r2, [r0, #4]
 801e358:	684b      	ldr	r3, [r1, #4]
 801e35a:	429a      	cmp	r2, r3
 801e35c:	d16f      	bne.n	801e43e <ai_platform_network_process+0x29e>
 801e35e:	69a3      	ldr	r3, [r4, #24]
 801e360:	e9d3 0100 	ldrd	r0, r1, [r3]
 801e364:	f001 f9a6 	bl	801f6b4 <ai_array_get_data_byte_size>
 801e368:	9001      	str	r0, [sp, #4]
 801e36a:	4620      	mov	r0, r4
 801e36c:	f001 f9ba 	bl	801f6e4 <get_tensor_byte_size>
 801e370:	9b01      	ldr	r3, [sp, #4]
 801e372:	4283      	cmp	r3, r0
 801e374:	d363      	bcc.n	801e43e <ai_platform_network_process+0x29e>
 801e376:	69a3      	ldr	r3, [r4, #24]
 801e378:	6818      	ldr	r0, [r3, #0]
 801e37a:	f001 f92b 	bl	801f5d4 <ai_array_to_buffer_fmt>
 801e37e:	682b      	ldr	r3, [r5, #0]
 801e380:	4043      	eors	r3, r0
 801e382:	f033 437e 	bics.w	r3, r3, #4261412864	@ 0xfe000000
 801e386:	f040 8119 	bne.w	801e5bc <ai_platform_network_process+0x41c>
 801e38a:	686b      	ldr	r3, [r5, #4]
 801e38c:	2b00      	cmp	r3, #0
 801e38e:	f000 810e 	beq.w	801e5ae <ai_platform_network_process+0x40e>
 801e392:	69ab      	ldr	r3, [r5, #24]
 801e394:	681b      	ldr	r3, [r3, #0]
 801e396:	2b00      	cmp	r3, #0
 801e398:	f000 8117 	beq.w	801e5ca <ai_platform_network_process+0x42a>
 801e39c:	459b      	cmp	fp, r3
 801e39e:	4620      	mov	r0, r4
 801e3a0:	bf38      	it	cc
 801e3a2:	469b      	movcc	fp, r3
 801e3a4:	f001 f99e 	bl	801f6e4 <get_tensor_byte_size>
 801e3a8:	f8c8 0008 	str.w	r0, [r8, #8]
 801e3ac:	69aa      	ldr	r2, [r5, #24]
 801e3ae:	6812      	ldr	r2, [r2, #0]
 801e3b0:	4603      	mov	r3, r0
 801e3b2:	fb02 f303 	mul.w	r3, r2, r3
 801e3b6:	f8c8 300c 	str.w	r3, [r8, #12]
 801e3ba:	6869      	ldr	r1, [r5, #4]
 801e3bc:	f8c8 1004 	str.w	r1, [r8, #4]
 801e3c0:	0132      	lsls	r2, r6, #4
 801e3c2:	440b      	add	r3, r1
 801e3c4:	f84a 3002 	str.w	r3, [sl, r2]
 801e3c8:	69a0      	ldr	r0, [r4, #24]
 801e3ca:	6803      	ldr	r3, [r0, #0]
 801e3cc:	009b      	lsls	r3, r3, #2
 801e3ce:	f106 0601 	add.w	r6, r6, #1
 801e3d2:	f105 051c 	add.w	r5, r5, #28
 801e3d6:	d439      	bmi.n	801e44c <ai_platform_network_process+0x2ac>
 801e3d8:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 801e3dc:	1a9b      	subs	r3, r3, r2
 801e3de:	4419      	add	r1, r3
 801e3e0:	6081      	str	r1, [r0, #8]
 801e3e2:	69a3      	ldr	r3, [r4, #24]
 801e3e4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801e3e8:	60da      	str	r2, [r3, #12]
 801e3ea:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801e3ee:	429e      	cmp	r6, r3
 801e3f0:	d389      	bcc.n	801e306 <ai_platform_network_process+0x166>
 801e3f2:	e030      	b.n	801e456 <ai_platform_network_process+0x2b6>
 801e3f4:	693a      	ldr	r2, [r7, #16]
 801e3f6:	61bb      	str	r3, [r7, #24]
 801e3f8:	f002 0203 	and.w	r2, r2, #3
 801e3fc:	2a03      	cmp	r2, #3
 801e3fe:	d10f      	bne.n	801e420 <ai_platform_network_process+0x280>
 801e400:	2217      	movs	r2, #23
 801e402:	2112      	movs	r1, #18
 801e404:	f107 000c 	add.w	r0, r7, #12
 801e408:	f000 f8ee 	bl	801e5e8 <core_set_error>
 801e40c:	2000      	movs	r0, #0
 801e40e:	b005      	add	sp, #20
 801e410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e414:	f8b9 3000 	ldrh.w	r3, [r9]
 801e418:	429e      	cmp	r6, r3
 801e41a:	f4ff aeea 	bcc.w	801e1f2 <ai_platform_network_process+0x52>
 801e41e:	e75f      	b.n	801e2e0 <ai_platform_network_process+0x140>
 801e420:	2230      	movs	r2, #48	@ 0x30
 801e422:	2111      	movs	r1, #17
 801e424:	f107 000c 	add.w	r0, r7, #12
 801e428:	f000 f8de 	bl	801e5e8 <core_set_error>
 801e42c:	e7ee      	b.n	801e40c <ai_platform_network_process+0x26c>
 801e42e:	9f02      	ldr	r7, [sp, #8]
 801e430:	2218      	movs	r2, #24
 801e432:	2112      	movs	r1, #18
 801e434:	f107 000c 	add.w	r0, r7, #12
 801e438:	f000 f8d6 	bl	801e5e8 <core_set_error>
 801e43c:	e7e6      	b.n	801e40c <ai_platform_network_process+0x26c>
 801e43e:	2218      	movs	r2, #24
 801e440:	2113      	movs	r1, #19
 801e442:	f107 000c 	add.w	r0, r7, #12
 801e446:	f000 f8cf 	bl	801e5e8 <core_set_error>
 801e44a:	e7df      	b.n	801e40c <ai_platform_network_process+0x26c>
 801e44c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801e450:	429e      	cmp	r6, r3
 801e452:	f4ff af58 	bcc.w	801e306 <ai_platform_network_process+0x166>
 801e456:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801e458:	fa1f fb8b 	uxth.w	fp, fp
 801e45c:	f8a7 b018 	strh.w	fp, [r7, #24]
 801e460:	2b00      	cmp	r3, #0
 801e462:	f000 808c 	beq.w	801e57e <ai_platform_network_process+0x3de>
 801e466:	2b01      	cmp	r3, #1
 801e468:	6b7e      	ldr	r6, [r7, #52]	@ 0x34
 801e46a:	f000 808b 	beq.w	801e584 <ai_platform_network_process+0x3e4>
 801e46e:	f106 080c 	add.w	r8, r6, #12
 801e472:	8b78      	ldrh	r0, [r7, #26]
 801e474:	4583      	cmp	fp, r0
 801e476:	d9ca      	bls.n	801e40e <ai_platform_network_process+0x26e>
 801e478:	4645      	mov	r5, r8
 801e47a:	46bb      	mov	fp, r7
 801e47c:	f04f 0800 	mov.w	r8, #0
 801e480:	b9ae      	cbnz	r6, 801e4ae <ai_platform_network_process+0x30e>
 801e482:	e02d      	b.n	801e4e0 <ai_platform_network_process+0x340>
 801e484:	a1c00100 	.word	0xa1c00100
 801e488:	68df      	ldr	r7, [r3, #12]
 801e48a:	1bc9      	subs	r1, r1, r7
 801e48c:	4408      	add	r0, r1
 801e48e:	6098      	str	r0, [r3, #8]
 801e490:	6993      	ldr	r3, [r2, #24]
 801e492:	6862      	ldr	r2, [r4, #4]
 801e494:	60da      	str	r2, [r3, #12]
 801e496:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 801e49a:	f859 200a 	ldr.w	r2, [r9, sl]
 801e49e:	440b      	add	r3, r1
 801e4a0:	4293      	cmp	r3, r2
 801e4a2:	bf24      	itt	cs
 801e4a4:	68e3      	ldrcs	r3, [r4, #12]
 801e4a6:	1ad3      	subcs	r3, r2, r3
 801e4a8:	6063      	str	r3, [r4, #4]
 801e4aa:	f108 0801 	add.w	r8, r8, #1
 801e4ae:	8833      	ldrh	r3, [r6, #0]
 801e4b0:	4543      	cmp	r3, r8
 801e4b2:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 801e4b6:	d913      	bls.n	801e4e0 <ai_platform_network_process+0x340>
 801e4b8:	6873      	ldr	r3, [r6, #4]
 801e4ba:	b18b      	cbz	r3, 801e4e0 <ai_platform_network_process+0x340>
 801e4bc:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
 801e4c0:	b172      	cbz	r2, 801e4e0 <ai_platform_network_process+0x340>
 801e4c2:	68b1      	ldr	r1, [r6, #8]
 801e4c4:	6993      	ldr	r3, [r2, #24]
 801e4c6:	f8d1 9000 	ldr.w	r9, [r1]
 801e4ca:	681f      	ldr	r7, [r3, #0]
 801e4cc:	6899      	ldr	r1, [r3, #8]
 801e4ce:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 801e4d2:	00bf      	lsls	r7, r7, #2
 801e4d4:	6860      	ldr	r0, [r4, #4]
 801e4d6:	d5d7      	bpl.n	801e488 <ai_platform_network_process+0x2e8>
 801e4d8:	68a2      	ldr	r2, [r4, #8]
 801e4da:	f000 ffdd 	bl	801f498 <st_int8_copy>
 801e4de:	e7da      	b.n	801e496 <ai_platform_network_process+0x2f6>
 801e4e0:	4658      	mov	r0, fp
 801e4e2:	f000 f8e5 	bl	801e6b0 <ai_layers_forward_all>
 801e4e6:	2400      	movs	r4, #0
 801e4e8:	b9b5      	cbnz	r5, 801e518 <ai_platform_network_process+0x378>
 801e4ea:	e03b      	b.n	801e564 <ai_platform_network_process+0x3c4>
 801e4ec:	f859 300a 	ldr.w	r3, [r9, sl]
 801e4f0:	eb01 020c 	add.w	r2, r1, ip
 801e4f4:	429a      	cmp	r2, r3
 801e4f6:	bf24      	itt	cs
 801e4f8:	f8d8 200c 	ldrcs.w	r2, [r8, #12]
 801e4fc:	1a9a      	subcs	r2, r3, r2
 801e4fe:	f8c8 2004 	str.w	r2, [r8, #4]
 801e502:	6981      	ldr	r1, [r0, #24]
 801e504:	e9d1 3702 	ldrd	r3, r7, [r1, #8]
 801e508:	1bdb      	subs	r3, r3, r7
 801e50a:	441a      	add	r2, r3
 801e50c:	608a      	str	r2, [r1, #8]
 801e50e:	6983      	ldr	r3, [r0, #24]
 801e510:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801e514:	60da      	str	r2, [r3, #12]
 801e516:	3401      	adds	r4, #1
 801e518:	882b      	ldrh	r3, [r5, #0]
 801e51a:	42a3      	cmp	r3, r4
 801e51c:	d922      	bls.n	801e564 <ai_platform_network_process+0x3c4>
 801e51e:	686b      	ldr	r3, [r5, #4]
 801e520:	b303      	cbz	r3, 801e564 <ai_platform_network_process+0x3c4>
 801e522:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801e526:	b1e8      	cbz	r0, 801e564 <ai_platform_network_process+0x3c4>
 801e528:	68ab      	ldr	r3, [r5, #8]
 801e52a:	6982      	ldr	r2, [r0, #24]
 801e52c:	f8d3 9000 	ldr.w	r9, [r3]
 801e530:	6813      	ldr	r3, [r2, #0]
 801e532:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 801e536:	009b      	lsls	r3, r3, #2
 801e538:	e9d8 1c01 	ldrd	r1, ip, [r8, #4]
 801e53c:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 801e540:	d5d4      	bpl.n	801e4ec <ai_platform_network_process+0x34c>
 801e542:	6890      	ldr	r0, [r2, #8]
 801e544:	4662      	mov	r2, ip
 801e546:	f000 ffa7 	bl	801f498 <st_int8_copy>
 801e54a:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 801e54e:	f859 200a 	ldr.w	r2, [r9, sl]
 801e552:	440b      	add	r3, r1
 801e554:	4293      	cmp	r3, r2
 801e556:	bf24      	itt	cs
 801e558:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 801e55c:	1ad3      	subcs	r3, r2, r3
 801e55e:	f8c8 3004 	str.w	r3, [r8, #4]
 801e562:	e7d8      	b.n	801e516 <ai_platform_network_process+0x376>
 801e564:	f8bb 001a 	ldrh.w	r0, [fp, #26]
 801e568:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 801e56c:	3001      	adds	r0, #1
 801e56e:	b280      	uxth	r0, r0
 801e570:	4283      	cmp	r3, r0
 801e572:	f8ab 001a 	strh.w	r0, [fp, #26]
 801e576:	d881      	bhi.n	801e47c <ai_platform_network_process+0x2dc>
 801e578:	b005      	add	sp, #20
 801e57a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e57e:	461e      	mov	r6, r3
 801e580:	4698      	mov	r8, r3
 801e582:	e776      	b.n	801e472 <ai_platform_network_process+0x2d2>
 801e584:	f04f 0800 	mov.w	r8, #0
 801e588:	e773      	b.n	801e472 <ai_platform_network_process+0x2d2>
 801e58a:	9f02      	ldr	r7, [sp, #8]
 801e58c:	e738      	b.n	801e400 <ai_platform_network_process+0x260>
 801e58e:	9f02      	ldr	r7, [sp, #8]
 801e590:	2221      	movs	r2, #33	@ 0x21
 801e592:	2112      	movs	r1, #18
 801e594:	f107 000c 	add.w	r0, r7, #12
 801e598:	f000 f826 	bl	801e5e8 <core_set_error>
 801e59c:	e736      	b.n	801e40c <ai_platform_network_process+0x26c>
 801e59e:	9f02      	ldr	r7, [sp, #8]
 801e5a0:	2219      	movs	r2, #25
 801e5a2:	2112      	movs	r1, #18
 801e5a4:	f107 000c 	add.w	r0, r7, #12
 801e5a8:	f000 f81e 	bl	801e5e8 <core_set_error>
 801e5ac:	e72e      	b.n	801e40c <ai_platform_network_process+0x26c>
 801e5ae:	2217      	movs	r2, #23
 801e5b0:	2113      	movs	r1, #19
 801e5b2:	f107 000c 	add.w	r0, r7, #12
 801e5b6:	f000 f817 	bl	801e5e8 <core_set_error>
 801e5ba:	e727      	b.n	801e40c <ai_platform_network_process+0x26c>
 801e5bc:	2219      	movs	r2, #25
 801e5be:	2113      	movs	r1, #19
 801e5c0:	f107 000c 	add.w	r0, r7, #12
 801e5c4:	f000 f810 	bl	801e5e8 <core_set_error>
 801e5c8:	e720      	b.n	801e40c <ai_platform_network_process+0x26c>
 801e5ca:	2221      	movs	r2, #33	@ 0x21
 801e5cc:	2113      	movs	r1, #19
 801e5ce:	f107 000c 	add.w	r0, r7, #12
 801e5d2:	f000 f809 	bl	801e5e8 <core_set_error>
 801e5d6:	e719      	b.n	801e40c <ai_platform_network_process+0x26c>

0801e5d8 <core_init>:
 801e5d8:	2001      	movs	r0, #1
 801e5da:	4770      	bx	lr

0801e5dc <core_get_error>:
 801e5dc:	4603      	mov	r3, r0
 801e5de:	2200      	movs	r2, #0
 801e5e0:	6800      	ldr	r0, [r0, #0]
 801e5e2:	601a      	str	r2, [r3, #0]
 801e5e4:	4770      	bx	lr
 801e5e6:	bf00      	nop

0801e5e8 <core_set_error>:
 801e5e8:	4603      	mov	r3, r0
 801e5ea:	7800      	ldrb	r0, [r0, #0]
 801e5ec:	b108      	cbz	r0, 801e5f2 <core_set_error+0xa>
 801e5ee:	2000      	movs	r0, #0
 801e5f0:	4770      	bx	lr
 801e5f2:	7019      	strb	r1, [r3, #0]
 801e5f4:	6819      	ldr	r1, [r3, #0]
 801e5f6:	f362 211f 	bfi	r1, r2, #8, #24
 801e5fa:	2001      	movs	r0, #1
 801e5fc:	6019      	str	r1, [r3, #0]
 801e5fe:	4770      	bx	lr

0801e600 <ai_check_custom_types>:
 801e600:	b082      	sub	sp, #8
 801e602:	4b13      	ldr	r3, [pc, #76]	@ (801e650 <ai_check_custom_types+0x50>)
 801e604:	9301      	str	r3, [sp, #4]
 801e606:	b118      	cbz	r0, 801e610 <ai_check_custom_types+0x10>
 801e608:	7803      	ldrb	r3, [r0, #0]
 801e60a:	2b03      	cmp	r3, #3
 801e60c:	d002      	beq.n	801e614 <ai_check_custom_types+0x14>
 801e60e:	2000      	movs	r0, #0
 801e610:	b002      	add	sp, #8
 801e612:	4770      	bx	lr
 801e614:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801e618:	4293      	cmp	r3, r2
 801e61a:	d004      	beq.n	801e626 <ai_check_custom_types+0x26>
 801e61c:	2001      	movs	r0, #1
 801e61e:	f080 0001 	eor.w	r0, r0, #1
 801e622:	b002      	add	sp, #8
 801e624:	4770      	bx	lr
 801e626:	7842      	ldrb	r2, [r0, #1]
 801e628:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801e62c:	429a      	cmp	r2, r3
 801e62e:	f100 0001 	add.w	r0, r0, #1
 801e632:	d1f3      	bne.n	801e61c <ai_check_custom_types+0x1c>
 801e634:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 801e638:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801e63c:	429a      	cmp	r2, r3
 801e63e:	d1ed      	bne.n	801e61c <ai_check_custom_types+0x1c>
 801e640:	7842      	ldrb	r2, [r0, #1]
 801e642:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801e646:	429a      	cmp	r2, r3
 801e648:	d1e8      	bne.n	801e61c <ai_check_custom_types+0x1c>
 801e64a:	2000      	movs	r0, #0
 801e64c:	e7e7      	b.n	801e61e <ai_check_custom_types+0x1e>
 801e64e:	bf00      	nop
 801e650:	84048403 	.word	0x84048403

0801e654 <ai_layers_init_all>:
 801e654:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801e656:	4601      	mov	r1, r0
 801e658:	b153      	cbz	r3, 801e670 <ai_layers_init_all+0x1c>
 801e65a:	2000      	movs	r0, #0
 801e65c:	461a      	mov	r2, r3
 801e65e:	60d9      	str	r1, [r3, #12]
 801e660:	691b      	ldr	r3, [r3, #16]
 801e662:	4293      	cmp	r3, r2
 801e664:	f100 0001 	add.w	r0, r0, #1
 801e668:	d003      	beq.n	801e672 <ai_layers_init_all+0x1e>
 801e66a:	2b00      	cmp	r3, #0
 801e66c:	d1f6      	bne.n	801e65c <ai_layers_init_all+0x8>
 801e66e:	4770      	bx	lr
 801e670:	4618      	mov	r0, r3
 801e672:	4770      	bx	lr

0801e674 <ai_layers_post_init_all>:
 801e674:	b538      	push	{r3, r4, r5, lr}
 801e676:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 801e678:	b1b4      	cbz	r4, 801e6a8 <ai_layers_post_init_all+0x34>
 801e67a:	6863      	ldr	r3, [r4, #4]
 801e67c:	07db      	lsls	r3, r3, #31
 801e67e:	f04f 0500 	mov.w	r5, #0
 801e682:	d504      	bpl.n	801e68e <ai_layers_post_init_all+0x1a>
 801e684:	6a23      	ldr	r3, [r4, #32]
 801e686:	4620      	mov	r0, r4
 801e688:	b10b      	cbz	r3, 801e68e <ai_layers_post_init_all+0x1a>
 801e68a:	4798      	blx	r3
 801e68c:	3501      	adds	r5, #1
 801e68e:	6923      	ldr	r3, [r4, #16]
 801e690:	42a3      	cmp	r3, r4
 801e692:	d007      	beq.n	801e6a4 <ai_layers_post_init_all+0x30>
 801e694:	b133      	cbz	r3, 801e6a4 <ai_layers_post_init_all+0x30>
 801e696:	461c      	mov	r4, r3
 801e698:	6863      	ldr	r3, [r4, #4]
 801e69a:	07db      	lsls	r3, r3, #31
 801e69c:	d4f2      	bmi.n	801e684 <ai_layers_post_init_all+0x10>
 801e69e:	6923      	ldr	r3, [r4, #16]
 801e6a0:	42a3      	cmp	r3, r4
 801e6a2:	d1f7      	bne.n	801e694 <ai_layers_post_init_all+0x20>
 801e6a4:	4628      	mov	r0, r5
 801e6a6:	bd38      	pop	{r3, r4, r5, pc}
 801e6a8:	4625      	mov	r5, r4
 801e6aa:	4628      	mov	r0, r5
 801e6ac:	bd38      	pop	{r3, r4, r5, pc}
 801e6ae:	bf00      	nop

0801e6b0 <ai_layers_forward_all>:
 801e6b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e6b4:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 801e6b8:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 801e6ba:	63c5      	str	r5, [r0, #60]	@ 0x3c
 801e6bc:	4604      	mov	r4, r0
 801e6be:	f1b8 0f00 	cmp.w	r8, #0
 801e6c2:	d02a      	beq.n	801e71a <ai_layers_forward_all+0x6a>
 801e6c4:	b32d      	cbz	r5, 801e712 <ai_layers_forward_all+0x62>
 801e6c6:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 801e6c8:	4629      	mov	r1, r5
 801e6ca:	2001      	movs	r0, #1
 801e6cc:	47c0      	blx	r8
 801e6ce:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 801e6d0:	b1fe      	cbz	r6, 801e712 <ai_layers_forward_all+0x62>
 801e6d2:	2700      	movs	r7, #0
 801e6d4:	4631      	mov	r1, r6
 801e6d6:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 801e6d8:	2002      	movs	r0, #2
 801e6da:	47c0      	blx	r8
 801e6dc:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 801e6de:	4628      	mov	r0, r5
 801e6e0:	696b      	ldr	r3, [r5, #20]
 801e6e2:	4798      	blx	r3
 801e6e4:	692e      	ldr	r6, [r5, #16]
 801e6e6:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 801e6e8:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 801e6ea:	42b5      	cmp	r5, r6
 801e6ec:	f04f 0003 	mov.w	r0, #3
 801e6f0:	d007      	beq.n	801e702 <ai_layers_forward_all+0x52>
 801e6f2:	47c0      	blx	r8
 801e6f4:	3701      	adds	r7, #1
 801e6f6:	63e6      	str	r6, [r4, #60]	@ 0x3c
 801e6f8:	2e00      	cmp	r6, #0
 801e6fa:	d1eb      	bne.n	801e6d4 <ai_layers_forward_all+0x24>
 801e6fc:	4638      	mov	r0, r7
 801e6fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e702:	2003      	movs	r0, #3
 801e704:	47c0      	blx	r8
 801e706:	2300      	movs	r3, #0
 801e708:	3701      	adds	r7, #1
 801e70a:	63e3      	str	r3, [r4, #60]	@ 0x3c
 801e70c:	4638      	mov	r0, r7
 801e70e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e712:	2700      	movs	r7, #0
 801e714:	4638      	mov	r0, r7
 801e716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e71a:	2d00      	cmp	r5, #0
 801e71c:	d0f9      	beq.n	801e712 <ai_layers_forward_all+0x62>
 801e71e:	4647      	mov	r7, r8
 801e720:	696b      	ldr	r3, [r5, #20]
 801e722:	4628      	mov	r0, r5
 801e724:	4798      	blx	r3
 801e726:	462b      	mov	r3, r5
 801e728:	692d      	ldr	r5, [r5, #16]
 801e72a:	429d      	cmp	r5, r3
 801e72c:	d004      	beq.n	801e738 <ai_layers_forward_all+0x88>
 801e72e:	63e5      	str	r5, [r4, #60]	@ 0x3c
 801e730:	3701      	adds	r7, #1
 801e732:	2d00      	cmp	r5, #0
 801e734:	d1f4      	bne.n	801e720 <ai_layers_forward_all+0x70>
 801e736:	e7e1      	b.n	801e6fc <ai_layers_forward_all+0x4c>
 801e738:	2300      	movs	r3, #0
 801e73a:	63e3      	str	r3, [r4, #60]	@ 0x3c
 801e73c:	3701      	adds	r7, #1
 801e73e:	e7dd      	b.n	801e6fc <ai_layers_forward_all+0x4c>

0801e740 <forward_dense>:
 801e740:	6982      	ldr	r2, [r0, #24]
 801e742:	8813      	ldrh	r3, [r2, #0]
 801e744:	b90b      	cbnz	r3, 801e74a <forward_dense+0xa>
 801e746:	685b      	ldr	r3, [r3, #4]
 801e748:	deff      	udf	#255	@ 0xff
 801e74a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e74e:	6857      	ldr	r7, [r2, #4]
 801e750:	6878      	ldr	r0, [r7, #4]
 801e752:	b08f      	sub	sp, #60	@ 0x3c
 801e754:	b100      	cbz	r0, 801e758 <forward_dense+0x18>
 801e756:	6800      	ldr	r0, [r0, #0]
 801e758:	2b01      	cmp	r3, #1
 801e75a:	d05d      	beq.n	801e818 <forward_dense+0xd8>
 801e75c:	693a      	ldr	r2, [r7, #16]
 801e75e:	b102      	cbz	r2, 801e762 <forward_dense+0x22>
 801e760:	6812      	ldr	r2, [r2, #0]
 801e762:	2b02      	cmp	r3, #2
 801e764:	d032      	beq.n	801e7cc <forward_dense+0x8c>
 801e766:	69fd      	ldr	r5, [r7, #28]
 801e768:	2d00      	cmp	r5, #0
 801e76a:	d053      	beq.n	801e814 <forward_dense+0xd4>
 801e76c:	8b3c      	ldrh	r4, [r7, #24]
 801e76e:	6829      	ldr	r1, [r5, #0]
 801e770:	2c01      	cmp	r4, #1
 801e772:	d954      	bls.n	801e81e <forward_dense+0xde>
 801e774:	686d      	ldr	r5, [r5, #4]
 801e776:	698e      	ldr	r6, [r1, #24]
 801e778:	68c4      	ldr	r4, [r0, #12]
 801e77a:	68d1      	ldr	r1, [r2, #12]
 801e77c:	f8d4 e004 	ldr.w	lr, [r4, #4]
 801e780:	f8d1 9004 	ldr.w	r9, [r1, #4]
 801e784:	e9d1 4c02 	ldrd	r4, ip, [r1, #8]
 801e788:	6831      	ldr	r1, [r6, #0]
 801e78a:	2b03      	cmp	r3, #3
 801e78c:	fb0c f804 	mul.w	r8, ip, r4
 801e790:	f021 4c7e 	bic.w	ip, r1, #4261412864	@ 0xfe000000
 801e794:	d045      	beq.n	801e822 <forward_dense+0xe2>
 801e796:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 801e798:	b11c      	cbz	r4, 801e7a2 <forward_dense+0x62>
 801e79a:	6824      	ldr	r4, [r4, #0]
 801e79c:	b10c      	cbz	r4, 801e7a2 <forward_dense+0x62>
 801e79e:	69a3      	ldr	r3, [r4, #24]
 801e7a0:	689c      	ldr	r4, [r3, #8]
 801e7a2:	6983      	ldr	r3, [r0, #24]
 801e7a4:	6992      	ldr	r2, [r2, #24]
 801e7a6:	6899      	ldr	r1, [r3, #8]
 801e7a8:	6890      	ldr	r0, [r2, #8]
 801e7aa:	b10d      	cbz	r5, 801e7b0 <forward_dense+0x70>
 801e7ac:	69ab      	ldr	r3, [r5, #24]
 801e7ae:	689d      	ldr	r5, [r3, #8]
 801e7b0:	4f1d      	ldr	r7, [pc, #116]	@ (801e828 <forward_dense+0xe8>)
 801e7b2:	45bc      	cmp	ip, r7
 801e7b4:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
 801e7b8:	d022      	beq.n	801e800 <forward_dense+0xc0>
 801e7ba:	4e1c      	ldr	r6, [pc, #112]	@ (801e82c <forward_dense+0xec>)
 801e7bc:	45b4      	cmp	ip, r6
 801e7be:	d015      	beq.n	801e7ec <forward_dense+0xac>
 801e7c0:	4b1b      	ldr	r3, [pc, #108]	@ (801e830 <forward_dense+0xf0>)
 801e7c2:	459c      	cmp	ip, r3
 801e7c4:	d005      	beq.n	801e7d2 <forward_dense+0x92>
 801e7c6:	b00f      	add	sp, #60	@ 0x3c
 801e7c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e7cc:	2300      	movs	r3, #0
 801e7ce:	685b      	ldr	r3, [r3, #4]
 801e7d0:	deff      	udf	#255	@ 0xff
 801e7d2:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801e7d6:	a807      	add	r0, sp, #28
 801e7d8:	e9cd 5e0a 	strd	r5, lr, [sp, #40]	@ 0x28
 801e7dc:	e9cd 980c 	strd	r9, r8, [sp, #48]	@ 0x30
 801e7e0:	9209      	str	r2, [sp, #36]	@ 0x24
 801e7e2:	f000 f965 	bl	801eab0 <forward_lite_dense_if32of32wf32>
 801e7e6:	b00f      	add	sp, #60	@ 0x3c
 801e7e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e7ec:	e9cd 9803 	strd	r9, r8, [sp, #12]
 801e7f0:	e9cd 5e01 	strd	r5, lr, [sp, #4]
 801e7f4:	9400      	str	r4, [sp, #0]
 801e7f6:	f000 fb35 	bl	801ee64 <forward_lite_dense_if32of32wf32_lut4>
 801e7fa:	b00f      	add	sp, #60	@ 0x3c
 801e7fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e800:	e9cd 9803 	strd	r9, r8, [sp, #12]
 801e804:	e9cd 5e01 	strd	r5, lr, [sp, #4]
 801e808:	9400      	str	r4, [sp, #0]
 801e80a:	f000 fca7 	bl	801f15c <forward_lite_dense_if32of32wf32_lut8>
 801e80e:	b00f      	add	sp, #60	@ 0x3c
 801e810:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e814:	4629      	mov	r1, r5
 801e816:	e7ae      	b.n	801e776 <forward_dense+0x36>
 801e818:	2300      	movs	r3, #0
 801e81a:	685b      	ldr	r3, [r3, #4]
 801e81c:	deff      	udf	#255	@ 0xff
 801e81e:	2500      	movs	r5, #0
 801e820:	e7a9      	b.n	801e776 <forward_dense+0x36>
 801e822:	2300      	movs	r3, #0
 801e824:	685b      	ldr	r3, [r3, #4]
 801e826:	deff      	udf	#255	@ 0xff
 801e828:	00d01040 	.word	0x00d01040
 801e82c:	00f01040 	.word	0x00f01040
 801e830:	00821040 	.word	0x00821040

0801e834 <forward_sigmoid>:
 801e834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e836:	6982      	ldr	r2, [r0, #24]
 801e838:	8813      	ldrh	r3, [r2, #0]
 801e83a:	2b00      	cmp	r3, #0
 801e83c:	d038      	beq.n	801e8b0 <forward_sigmoid+0x7c>
 801e83e:	6852      	ldr	r2, [r2, #4]
 801e840:	6854      	ldr	r4, [r2, #4]
 801e842:	b104      	cbz	r4, 801e846 <forward_sigmoid+0x12>
 801e844:	6824      	ldr	r4, [r4, #0]
 801e846:	2b01      	cmp	r3, #1
 801e848:	d031      	beq.n	801e8ae <forward_sigmoid+0x7a>
 801e84a:	6915      	ldr	r5, [r2, #16]
 801e84c:	b105      	cbz	r5, 801e850 <forward_sigmoid+0x1c>
 801e84e:	682d      	ldr	r5, [r5, #0]
 801e850:	68a3      	ldr	r3, [r4, #8]
 801e852:	0a1b      	lsrs	r3, r3, #8
 801e854:	d02e      	beq.n	801e8b4 <forward_sigmoid+0x80>
 801e856:	68e0      	ldr	r0, [r4, #12]
 801e858:	2201      	movs	r2, #1
 801e85a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801e85e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801e862:	4298      	cmp	r0, r3
 801e864:	fb01 f202 	mul.w	r2, r1, r2
 801e868:	d1f9      	bne.n	801e85e <forward_sigmoid+0x2a>
 801e86a:	69a7      	ldr	r7, [r4, #24]
 801e86c:	69a9      	ldr	r1, [r5, #24]
 801e86e:	68bb      	ldr	r3, [r7, #8]
 801e870:	688d      	ldr	r5, [r1, #8]
 801e872:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 801e876:	3a01      	subs	r2, #1
 801e878:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801e87c:	42a3      	cmp	r3, r4
 801e87e:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 801e882:	d813      	bhi.n	801e8ac <forward_sigmoid+0x78>
 801e884:	f04f 567e 	mov.w	r6, #1065353216	@ 0x3f800000
 801e888:	f854 0904 	ldr.w	r0, [r4], #-4
 801e88c:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 801e890:	f001 fec4 	bl	802061c <expf>
 801e894:	4631      	mov	r1, r6
 801e896:	f7e1 ff3d 	bl	8000714 <__addsf3>
 801e89a:	4601      	mov	r1, r0
 801e89c:	4630      	mov	r0, r6
 801e89e:	f7e2 f8f5 	bl	8000a8c <__aeabi_fdiv>
 801e8a2:	f845 0904 	str.w	r0, [r5], #-4
 801e8a6:	68bb      	ldr	r3, [r7, #8]
 801e8a8:	42a3      	cmp	r3, r4
 801e8aa:	d9ed      	bls.n	801e888 <forward_sigmoid+0x54>
 801e8ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e8ae:	2300      	movs	r3, #0
 801e8b0:	685b      	ldr	r3, [r3, #4]
 801e8b2:	deff      	udf	#255	@ 0xff
 801e8b4:	69a7      	ldr	r7, [r4, #24]
 801e8b6:	69ab      	ldr	r3, [r5, #24]
 801e8b8:	68bc      	ldr	r4, [r7, #8]
 801e8ba:	689d      	ldr	r5, [r3, #8]
 801e8bc:	e7e2      	b.n	801e884 <forward_sigmoid+0x50>
 801e8be:	bf00      	nop

0801e8c0 <forward_relu>:
 801e8c0:	6982      	ldr	r2, [r0, #24]
 801e8c2:	8813      	ldrh	r3, [r2, #0]
 801e8c4:	b90b      	cbnz	r3, 801e8ca <forward_relu+0xa>
 801e8c6:	685b      	ldr	r3, [r3, #4]
 801e8c8:	deff      	udf	#255	@ 0xff
 801e8ca:	6852      	ldr	r2, [r2, #4]
 801e8cc:	6851      	ldr	r1, [r2, #4]
 801e8ce:	b101      	cbz	r1, 801e8d2 <forward_relu+0x12>
 801e8d0:	6809      	ldr	r1, [r1, #0]
 801e8d2:	2b01      	cmp	r3, #1
 801e8d4:	d07a      	beq.n	801e9cc <forward_relu+0x10c>
 801e8d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e8da:	6913      	ldr	r3, [r2, #16]
 801e8dc:	b103      	cbz	r3, 801e8e0 <forward_relu+0x20>
 801e8de:	681b      	ldr	r3, [r3, #0]
 801e8e0:	699c      	ldr	r4, [r3, #24]
 801e8e2:	698a      	ldr	r2, [r1, #24]
 801e8e4:	688b      	ldr	r3, [r1, #8]
 801e8e6:	69c6      	ldr	r6, [r0, #28]
 801e8e8:	68a4      	ldr	r4, [r4, #8]
 801e8ea:	6895      	ldr	r5, [r2, #8]
 801e8ec:	f3c3 2317 	ubfx	r3, r3, #8, #24
 801e8f0:	b1ae      	cbz	r6, 801e91e <forward_relu+0x5e>
 801e8f2:	6872      	ldr	r2, [r6, #4]
 801e8f4:	2a01      	cmp	r2, #1
 801e8f6:	d037      	beq.n	801e968 <forward_relu+0xa8>
 801e8f8:	2b00      	cmp	r3, #0
 801e8fa:	d05e      	beq.n	801e9ba <forward_relu+0xfa>
 801e8fc:	68c8      	ldr	r0, [r1, #12]
 801e8fe:	2201      	movs	r2, #1
 801e900:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801e904:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801e908:	4298      	cmp	r0, r3
 801e90a:	fb01 f202 	mul.w	r2, r1, r2
 801e90e:	d1f9      	bne.n	801e904 <forward_relu+0x44>
 801e910:	68b3      	ldr	r3, [r6, #8]
 801e912:	4629      	mov	r1, r5
 801e914:	4620      	mov	r0, r4
 801e916:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e91a:	f000 b85b 	b.w	801e9d4 <forward_lite_nl_relu_generic_if32of32_kernel>
 801e91e:	2b00      	cmp	r3, #0
 801e920:	d04d      	beq.n	801e9be <forward_relu+0xfe>
 801e922:	68c8      	ldr	r0, [r1, #12]
 801e924:	2201      	movs	r2, #1
 801e926:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801e92a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801e92e:	4283      	cmp	r3, r0
 801e930:	fb01 f202 	mul.w	r2, r1, r2
 801e934:	d1f9      	bne.n	801e92a <forward_relu+0x6a>
 801e936:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 801e93a:	3a01      	subs	r2, #1
 801e93c:	eb05 0782 	add.w	r7, r5, r2, lsl #2
 801e940:	42af      	cmp	r7, r5
 801e942:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801e946:	d30d      	bcc.n	801e964 <forward_relu+0xa4>
 801e948:	f04f 0800 	mov.w	r8, #0
 801e94c:	f857 6904 	ldr.w	r6, [r7], #-4
 801e950:	4641      	mov	r1, r8
 801e952:	4630      	mov	r0, r6
 801e954:	f7e2 f998 	bl	8000c88 <__aeabi_fcmpge>
 801e958:	b900      	cbnz	r0, 801e95c <forward_relu+0x9c>
 801e95a:	4646      	mov	r6, r8
 801e95c:	42bd      	cmp	r5, r7
 801e95e:	f844 6904 	str.w	r6, [r4], #-4
 801e962:	d9f3      	bls.n	801e94c <forward_relu+0x8c>
 801e964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e968:	b35b      	cbz	r3, 801e9c2 <forward_relu+0x102>
 801e96a:	68c8      	ldr	r0, [r1, #12]
 801e96c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801e970:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801e974:	4298      	cmp	r0, r3
 801e976:	fb01 f202 	mul.w	r2, r1, r2
 801e97a:	d1f9      	bne.n	801e970 <forward_relu+0xb0>
 801e97c:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 801e980:	3a01      	subs	r2, #1
 801e982:	68b3      	ldr	r3, [r6, #8]
 801e984:	eb05 0682 	add.w	r6, r5, r2, lsl #2
 801e988:	42ae      	cmp	r6, r5
 801e98a:	f8d3 8000 	ldr.w	r8, [r3]
 801e98e:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801e992:	d3e7      	bcc.n	801e964 <forward_relu+0xa4>
 801e994:	f04f 0900 	mov.w	r9, #0
 801e998:	f856 7904 	ldr.w	r7, [r6], #-4
 801e99c:	4640      	mov	r0, r8
 801e99e:	4639      	mov	r1, r7
 801e9a0:	f7e2 f95e 	bl	8000c60 <__aeabi_fcmplt>
 801e9a4:	b120      	cbz	r0, 801e9b0 <forward_relu+0xf0>
 801e9a6:	42b5      	cmp	r5, r6
 801e9a8:	f844 7904 	str.w	r7, [r4], #-4
 801e9ac:	d9f4      	bls.n	801e998 <forward_relu+0xd8>
 801e9ae:	e7d9      	b.n	801e964 <forward_relu+0xa4>
 801e9b0:	42b5      	cmp	r5, r6
 801e9b2:	f844 9904 	str.w	r9, [r4], #-4
 801e9b6:	d9ef      	bls.n	801e998 <forward_relu+0xd8>
 801e9b8:	e7d4      	b.n	801e964 <forward_relu+0xa4>
 801e9ba:	2201      	movs	r2, #1
 801e9bc:	e7a8      	b.n	801e910 <forward_relu+0x50>
 801e9be:	462f      	mov	r7, r5
 801e9c0:	e7c2      	b.n	801e948 <forward_relu+0x88>
 801e9c2:	68b3      	ldr	r3, [r6, #8]
 801e9c4:	462e      	mov	r6, r5
 801e9c6:	f8d3 8000 	ldr.w	r8, [r3]
 801e9ca:	e7e3      	b.n	801e994 <forward_relu+0xd4>
 801e9cc:	2300      	movs	r3, #0
 801e9ce:	685b      	ldr	r3, [r3, #4]
 801e9d0:	deff      	udf	#255	@ 0xff
 801e9d2:	bf00      	nop

0801e9d4 <forward_lite_nl_relu_generic_if32of32_kernel>:
 801e9d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e9d8:	f102 4480 	add.w	r4, r2, #1073741824	@ 0x40000000
 801e9dc:	f8d3 a008 	ldr.w	sl, [r3, #8]
 801e9e0:	681f      	ldr	r7, [r3, #0]
 801e9e2:	f8d3 9004 	ldr.w	r9, [r3, #4]
 801e9e6:	3c01      	subs	r4, #1
 801e9e8:	eb00 0684 	add.w	r6, r0, r4, lsl #2
 801e9ec:	4688      	mov	r8, r1
 801e9ee:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801e9f2:	4650      	mov	r0, sl
 801e9f4:	2100      	movs	r1, #0
 801e9f6:	f7e2 f933 	bl	8000c60 <__aeabi_fcmplt>
 801e9fa:	bb20      	cbnz	r0, 801ea46 <forward_lite_nl_relu_generic_if32of32_kernel+0x72>
 801e9fc:	4544      	cmp	r4, r8
 801e9fe:	d210      	bcs.n	801ea22 <forward_lite_nl_relu_generic_if32of32_kernel+0x4e>
 801ea00:	e01f      	b.n	801ea42 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 801ea02:	f7e2 f941 	bl	8000c88 <__aeabi_fcmpge>
 801ea06:	4603      	mov	r3, r0
 801ea08:	4639      	mov	r1, r7
 801ea0a:	4628      	mov	r0, r5
 801ea0c:	b12b      	cbz	r3, 801ea1a <forward_lite_nl_relu_generic_if32of32_kernel+0x46>
 801ea0e:	f7e1 fe7f 	bl	8000710 <__aeabi_fsub>
 801ea12:	4649      	mov	r1, r9
 801ea14:	f7e1 ff86 	bl	8000924 <__aeabi_fmul>
 801ea18:	4605      	mov	r5, r0
 801ea1a:	45a0      	cmp	r8, r4
 801ea1c:	f846 5904 	str.w	r5, [r6], #-4
 801ea20:	d80f      	bhi.n	801ea42 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 801ea22:	f854 5904 	ldr.w	r5, [r4], #-4
 801ea26:	4650      	mov	r0, sl
 801ea28:	4629      	mov	r1, r5
 801ea2a:	f7e2 f92d 	bl	8000c88 <__aeabi_fcmpge>
 801ea2e:	4603      	mov	r3, r0
 801ea30:	4629      	mov	r1, r5
 801ea32:	4638      	mov	r0, r7
 801ea34:	2b00      	cmp	r3, #0
 801ea36:	d1e4      	bne.n	801ea02 <forward_lite_nl_relu_generic_if32of32_kernel+0x2e>
 801ea38:	4655      	mov	r5, sl
 801ea3a:	45a0      	cmp	r8, r4
 801ea3c:	f846 5904 	str.w	r5, [r6], #-4
 801ea40:	d9ef      	bls.n	801ea22 <forward_lite_nl_relu_generic_if32of32_kernel+0x4e>
 801ea42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ea46:	2100      	movs	r1, #0
 801ea48:	4648      	mov	r0, r9
 801ea4a:	f7e2 f8ff 	bl	8000c4c <__aeabi_fcmpeq>
 801ea4e:	b9d0      	cbnz	r0, 801ea86 <forward_lite_nl_relu_generic_if32of32_kernel+0xb2>
 801ea50:	4544      	cmp	r4, r8
 801ea52:	d3f6      	bcc.n	801ea42 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 801ea54:	f854 5904 	ldr.w	r5, [r4], #-4
 801ea58:	4639      	mov	r1, r7
 801ea5a:	4628      	mov	r0, r5
 801ea5c:	f7e2 f90a 	bl	8000c74 <__aeabi_fcmple>
 801ea60:	4603      	mov	r3, r0
 801ea62:	4639      	mov	r1, r7
 801ea64:	4628      	mov	r0, r5
 801ea66:	b14b      	cbz	r3, 801ea7c <forward_lite_nl_relu_generic_if32of32_kernel+0xa8>
 801ea68:	f7e1 fe52 	bl	8000710 <__aeabi_fsub>
 801ea6c:	4649      	mov	r1, r9
 801ea6e:	f7e1 ff59 	bl	8000924 <__aeabi_fmul>
 801ea72:	45a0      	cmp	r8, r4
 801ea74:	f846 0904 	str.w	r0, [r6], #-4
 801ea78:	d9ec      	bls.n	801ea54 <forward_lite_nl_relu_generic_if32of32_kernel+0x80>
 801ea7a:	e7e2      	b.n	801ea42 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 801ea7c:	45a0      	cmp	r8, r4
 801ea7e:	f846 5904 	str.w	r5, [r6], #-4
 801ea82:	d9e7      	bls.n	801ea54 <forward_lite_nl_relu_generic_if32of32_kernel+0x80>
 801ea84:	e7dd      	b.n	801ea42 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 801ea86:	4544      	cmp	r4, r8
 801ea88:	d3db      	bcc.n	801ea42 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 801ea8a:	f04f 0900 	mov.w	r9, #0
 801ea8e:	f854 5904 	ldr.w	r5, [r4], #-4
 801ea92:	4639      	mov	r1, r7
 801ea94:	4628      	mov	r0, r5
 801ea96:	f7e2 f901 	bl	8000c9c <__aeabi_fcmpgt>
 801ea9a:	b120      	cbz	r0, 801eaa6 <forward_lite_nl_relu_generic_if32of32_kernel+0xd2>
 801ea9c:	45a0      	cmp	r8, r4
 801ea9e:	f846 5904 	str.w	r5, [r6], #-4
 801eaa2:	d9f4      	bls.n	801ea8e <forward_lite_nl_relu_generic_if32of32_kernel+0xba>
 801eaa4:	e7cd      	b.n	801ea42 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 801eaa6:	45a0      	cmp	r8, r4
 801eaa8:	f846 9904 	str.w	r9, [r6], #-4
 801eaac:	d9ef      	bls.n	801ea8e <forward_lite_nl_relu_generic_if32of32_kernel+0xba>
 801eaae:	e7c8      	b.n	801ea42 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>

0801eab0 <forward_lite_dense_if32of32wf32>:
 801eab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eab4:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 801eab8:	6805      	ldr	r5, [r0, #0]
 801eaba:	6841      	ldr	r1, [r0, #4]
 801eabc:	fb03 f202 	mul.w	r2, r3, r2
 801eac0:	b08b      	sub	sp, #44	@ 0x2c
 801eac2:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 801eac6:	4295      	cmp	r5, r2
 801eac8:	9209      	str	r2, [sp, #36]	@ 0x24
 801eaca:	9101      	str	r1, [sp, #4]
 801eacc:	f080 81a8 	bcs.w	801ee20 <forward_lite_dense_if32of32wf32+0x370>
 801ead0:	f8d0 b010 	ldr.w	fp, [r0, #16]
 801ead4:	4604      	mov	r4, r0
 801ead6:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 801eada:	462e      	mov	r6, r5
 801eadc:	4619      	mov	r1, r3
 801eade:	44b6      	add	lr, r6
 801eae0:	45b6      	cmp	lr, r6
 801eae2:	f8d4 9008 	ldr.w	r9, [r4, #8]
 801eae6:	f240 818b 	bls.w	801ee00 <forward_lite_dense_if32of32wf32+0x350>
 801eaea:	f1ab 0110 	sub.w	r1, fp, #16
 801eaee:	0909      	lsrs	r1, r1, #4
 801eaf0:	3101      	adds	r1, #1
 801eaf2:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801eaf6:	9302      	str	r3, [sp, #8]
 801eaf8:	018b      	lsls	r3, r1, #6
 801eafa:	9305      	str	r3, [sp, #20]
 801eafc:	9b01      	ldr	r3, [sp, #4]
 801eafe:	f8cd e00c 	str.w	lr, [sp, #12]
 801eb02:	e9cd 6407 	strd	r6, r4, [sp, #28]
 801eb06:	eb03 1381 	add.w	r3, r3, r1, lsl #6
 801eb0a:	9306      	str	r3, [sp, #24]
 801eb0c:	46b0      	mov	r8, r6
 801eb0e:	f1bb 0f0f 	cmp.w	fp, #15
 801eb12:	f240 8188 	bls.w	801ee26 <forward_lite_dense_if32of32wf32+0x376>
 801eb16:	9b01      	ldr	r3, [sp, #4]
 801eb18:	f109 0440 	add.w	r4, r9, #64	@ 0x40
 801eb1c:	f103 0540 	add.w	r5, r3, #64	@ 0x40
 801eb20:	46da      	mov	sl, fp
 801eb22:	2600      	movs	r6, #0
 801eb24:	f854 1c40 	ldr.w	r1, [r4, #-64]
 801eb28:	f855 0c40 	ldr.w	r0, [r5, #-64]
 801eb2c:	f7e1 fefa 	bl	8000924 <__aeabi_fmul>
 801eb30:	f854 1c3c 	ldr.w	r1, [r4, #-60]
 801eb34:	4607      	mov	r7, r0
 801eb36:	f855 0c3c 	ldr.w	r0, [r5, #-60]
 801eb3a:	f7e1 fef3 	bl	8000924 <__aeabi_fmul>
 801eb3e:	4601      	mov	r1, r0
 801eb40:	4638      	mov	r0, r7
 801eb42:	f7e1 fde7 	bl	8000714 <__addsf3>
 801eb46:	f854 1c38 	ldr.w	r1, [r4, #-56]
 801eb4a:	4607      	mov	r7, r0
 801eb4c:	f855 0c38 	ldr.w	r0, [r5, #-56]
 801eb50:	f7e1 fee8 	bl	8000924 <__aeabi_fmul>
 801eb54:	4601      	mov	r1, r0
 801eb56:	4638      	mov	r0, r7
 801eb58:	f7e1 fddc 	bl	8000714 <__addsf3>
 801eb5c:	f854 1c34 	ldr.w	r1, [r4, #-52]
 801eb60:	4607      	mov	r7, r0
 801eb62:	f855 0c34 	ldr.w	r0, [r5, #-52]
 801eb66:	f7e1 fedd 	bl	8000924 <__aeabi_fmul>
 801eb6a:	4601      	mov	r1, r0
 801eb6c:	4638      	mov	r0, r7
 801eb6e:	f7e1 fdd1 	bl	8000714 <__addsf3>
 801eb72:	f854 1c30 	ldr.w	r1, [r4, #-48]
 801eb76:	4607      	mov	r7, r0
 801eb78:	f855 0c30 	ldr.w	r0, [r5, #-48]
 801eb7c:	f7e1 fed2 	bl	8000924 <__aeabi_fmul>
 801eb80:	4601      	mov	r1, r0
 801eb82:	4638      	mov	r0, r7
 801eb84:	f7e1 fdc6 	bl	8000714 <__addsf3>
 801eb88:	f854 1c2c 	ldr.w	r1, [r4, #-44]
 801eb8c:	4607      	mov	r7, r0
 801eb8e:	f855 0c2c 	ldr.w	r0, [r5, #-44]
 801eb92:	f7e1 fec7 	bl	8000924 <__aeabi_fmul>
 801eb96:	4601      	mov	r1, r0
 801eb98:	4638      	mov	r0, r7
 801eb9a:	f7e1 fdbb 	bl	8000714 <__addsf3>
 801eb9e:	f854 1c28 	ldr.w	r1, [r4, #-40]
 801eba2:	4607      	mov	r7, r0
 801eba4:	f855 0c28 	ldr.w	r0, [r5, #-40]
 801eba8:	f7e1 febc 	bl	8000924 <__aeabi_fmul>
 801ebac:	4601      	mov	r1, r0
 801ebae:	4638      	mov	r0, r7
 801ebb0:	f7e1 fdb0 	bl	8000714 <__addsf3>
 801ebb4:	f854 1c24 	ldr.w	r1, [r4, #-36]
 801ebb8:	4607      	mov	r7, r0
 801ebba:	f855 0c24 	ldr.w	r0, [r5, #-36]
 801ebbe:	f7e1 feb1 	bl	8000924 <__aeabi_fmul>
 801ebc2:	4601      	mov	r1, r0
 801ebc4:	4638      	mov	r0, r7
 801ebc6:	f7e1 fda5 	bl	8000714 <__addsf3>
 801ebca:	f854 1c20 	ldr.w	r1, [r4, #-32]
 801ebce:	4607      	mov	r7, r0
 801ebd0:	f855 0c20 	ldr.w	r0, [r5, #-32]
 801ebd4:	f7e1 fea6 	bl	8000924 <__aeabi_fmul>
 801ebd8:	4601      	mov	r1, r0
 801ebda:	4638      	mov	r0, r7
 801ebdc:	f7e1 fd9a 	bl	8000714 <__addsf3>
 801ebe0:	f854 1c1c 	ldr.w	r1, [r4, #-28]
 801ebe4:	4607      	mov	r7, r0
 801ebe6:	f855 0c1c 	ldr.w	r0, [r5, #-28]
 801ebea:	f7e1 fe9b 	bl	8000924 <__aeabi_fmul>
 801ebee:	4601      	mov	r1, r0
 801ebf0:	4638      	mov	r0, r7
 801ebf2:	f7e1 fd8f 	bl	8000714 <__addsf3>
 801ebf6:	f854 1c18 	ldr.w	r1, [r4, #-24]
 801ebfa:	4607      	mov	r7, r0
 801ebfc:	f855 0c18 	ldr.w	r0, [r5, #-24]
 801ec00:	f7e1 fe90 	bl	8000924 <__aeabi_fmul>
 801ec04:	4601      	mov	r1, r0
 801ec06:	4638      	mov	r0, r7
 801ec08:	f7e1 fd84 	bl	8000714 <__addsf3>
 801ec0c:	f854 1c14 	ldr.w	r1, [r4, #-20]
 801ec10:	4607      	mov	r7, r0
 801ec12:	f855 0c14 	ldr.w	r0, [r5, #-20]
 801ec16:	f7e1 fe85 	bl	8000924 <__aeabi_fmul>
 801ec1a:	4601      	mov	r1, r0
 801ec1c:	4638      	mov	r0, r7
 801ec1e:	f7e1 fd79 	bl	8000714 <__addsf3>
 801ec22:	f854 1c10 	ldr.w	r1, [r4, #-16]
 801ec26:	4607      	mov	r7, r0
 801ec28:	f855 0c10 	ldr.w	r0, [r5, #-16]
 801ec2c:	f7e1 fe7a 	bl	8000924 <__aeabi_fmul>
 801ec30:	4601      	mov	r1, r0
 801ec32:	4638      	mov	r0, r7
 801ec34:	f7e1 fd6e 	bl	8000714 <__addsf3>
 801ec38:	f854 1c0c 	ldr.w	r1, [r4, #-12]
 801ec3c:	4607      	mov	r7, r0
 801ec3e:	f855 0c0c 	ldr.w	r0, [r5, #-12]
 801ec42:	f7e1 fe6f 	bl	8000924 <__aeabi_fmul>
 801ec46:	4601      	mov	r1, r0
 801ec48:	4638      	mov	r0, r7
 801ec4a:	f7e1 fd63 	bl	8000714 <__addsf3>
 801ec4e:	f854 1c08 	ldr.w	r1, [r4, #-8]
 801ec52:	4607      	mov	r7, r0
 801ec54:	f855 0c08 	ldr.w	r0, [r5, #-8]
 801ec58:	f7e1 fe64 	bl	8000924 <__aeabi_fmul>
 801ec5c:	4601      	mov	r1, r0
 801ec5e:	4638      	mov	r0, r7
 801ec60:	f7e1 fd58 	bl	8000714 <__addsf3>
 801ec64:	f854 1c04 	ldr.w	r1, [r4, #-4]
 801ec68:	4607      	mov	r7, r0
 801ec6a:	f855 0c04 	ldr.w	r0, [r5, #-4]
 801ec6e:	f7e1 fe59 	bl	8000924 <__aeabi_fmul>
 801ec72:	4601      	mov	r1, r0
 801ec74:	4638      	mov	r0, r7
 801ec76:	f7e1 fd4d 	bl	8000714 <__addsf3>
 801ec7a:	4601      	mov	r1, r0
 801ec7c:	4630      	mov	r0, r6
 801ec7e:	f7e1 fd49 	bl	8000714 <__addsf3>
 801ec82:	f1aa 0a10 	sub.w	sl, sl, #16
 801ec86:	f1ba 0f0f 	cmp.w	sl, #15
 801ec8a:	f104 0440 	add.w	r4, r4, #64	@ 0x40
 801ec8e:	4606      	mov	r6, r0
 801ec90:	f105 0540 	add.w	r5, r5, #64	@ 0x40
 801ec94:	f63f af46 	bhi.w	801eb24 <forward_lite_dense_if32of32wf32+0x74>
 801ec98:	9b05      	ldr	r3, [sp, #20]
 801ec9a:	9c06      	ldr	r4, [sp, #24]
 801ec9c:	eb09 0503 	add.w	r5, r9, r3
 801eca0:	f00b 0a0f 	and.w	sl, fp, #15
 801eca4:	f1ba 0f03 	cmp.w	sl, #3
 801eca8:	d97b      	bls.n	801eda2 <forward_lite_dense_if32of32wf32+0x2f2>
 801ecaa:	6869      	ldr	r1, [r5, #4]
 801ecac:	6860      	ldr	r0, [r4, #4]
 801ecae:	f7e1 fe39 	bl	8000924 <__aeabi_fmul>
 801ecb2:	6829      	ldr	r1, [r5, #0]
 801ecb4:	4607      	mov	r7, r0
 801ecb6:	6820      	ldr	r0, [r4, #0]
 801ecb8:	f7e1 fe34 	bl	8000924 <__aeabi_fmul>
 801ecbc:	4601      	mov	r1, r0
 801ecbe:	4638      	mov	r0, r7
 801ecc0:	f7e1 fd28 	bl	8000714 <__addsf3>
 801ecc4:	4631      	mov	r1, r6
 801ecc6:	f7e1 fd25 	bl	8000714 <__addsf3>
 801ecca:	68a9      	ldr	r1, [r5, #8]
 801eccc:	4606      	mov	r6, r0
 801ecce:	68a0      	ldr	r0, [r4, #8]
 801ecd0:	f7e1 fe28 	bl	8000924 <__aeabi_fmul>
 801ecd4:	4631      	mov	r1, r6
 801ecd6:	f7e1 fd1d 	bl	8000714 <__addsf3>
 801ecda:	68e9      	ldr	r1, [r5, #12]
 801ecdc:	4606      	mov	r6, r0
 801ecde:	68e0      	ldr	r0, [r4, #12]
 801ece0:	f7e1 fe20 	bl	8000924 <__aeabi_fmul>
 801ece4:	4631      	mov	r1, r6
 801ece6:	f7e1 fd15 	bl	8000714 <__addsf3>
 801ecea:	f1aa 0204 	sub.w	r2, sl, #4
 801ecee:	2a03      	cmp	r2, #3
 801ecf0:	4606      	mov	r6, r0
 801ecf2:	d94e      	bls.n	801ed92 <forward_lite_dense_if32of32wf32+0x2e2>
 801ecf4:	6969      	ldr	r1, [r5, #20]
 801ecf6:	6960      	ldr	r0, [r4, #20]
 801ecf8:	9204      	str	r2, [sp, #16]
 801ecfa:	f7e1 fe13 	bl	8000924 <__aeabi_fmul>
 801ecfe:	6929      	ldr	r1, [r5, #16]
 801ed00:	4607      	mov	r7, r0
 801ed02:	6920      	ldr	r0, [r4, #16]
 801ed04:	f7e1 fe0e 	bl	8000924 <__aeabi_fmul>
 801ed08:	4601      	mov	r1, r0
 801ed0a:	4638      	mov	r0, r7
 801ed0c:	f7e1 fd02 	bl	8000714 <__addsf3>
 801ed10:	69a9      	ldr	r1, [r5, #24]
 801ed12:	4607      	mov	r7, r0
 801ed14:	69a0      	ldr	r0, [r4, #24]
 801ed16:	f7e1 fe05 	bl	8000924 <__aeabi_fmul>
 801ed1a:	4601      	mov	r1, r0
 801ed1c:	4638      	mov	r0, r7
 801ed1e:	f7e1 fcf9 	bl	8000714 <__addsf3>
 801ed22:	69e9      	ldr	r1, [r5, #28]
 801ed24:	4607      	mov	r7, r0
 801ed26:	69e0      	ldr	r0, [r4, #28]
 801ed28:	f7e1 fdfc 	bl	8000924 <__aeabi_fmul>
 801ed2c:	4601      	mov	r1, r0
 801ed2e:	4638      	mov	r0, r7
 801ed30:	f7e1 fcf0 	bl	8000714 <__addsf3>
 801ed34:	4601      	mov	r1, r0
 801ed36:	4630      	mov	r0, r6
 801ed38:	f7e1 fcec 	bl	8000714 <__addsf3>
 801ed3c:	f1aa 0108 	sub.w	r1, sl, #8
 801ed40:	2903      	cmp	r1, #3
 801ed42:	9a04      	ldr	r2, [sp, #16]
 801ed44:	4606      	mov	r6, r0
 801ed46:	d924      	bls.n	801ed92 <forward_lite_dense_if32of32wf32+0x2e2>
 801ed48:	6a21      	ldr	r1, [r4, #32]
 801ed4a:	6a28      	ldr	r0, [r5, #32]
 801ed4c:	f7e1 fdea 	bl	8000924 <__aeabi_fmul>
 801ed50:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801ed52:	4607      	mov	r7, r0
 801ed54:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 801ed56:	f7e1 fde5 	bl	8000924 <__aeabi_fmul>
 801ed5a:	4601      	mov	r1, r0
 801ed5c:	4638      	mov	r0, r7
 801ed5e:	f7e1 fcd9 	bl	8000714 <__addsf3>
 801ed62:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801ed64:	4607      	mov	r7, r0
 801ed66:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801ed68:	f7e1 fddc 	bl	8000924 <__aeabi_fmul>
 801ed6c:	4601      	mov	r1, r0
 801ed6e:	4638      	mov	r0, r7
 801ed70:	f7e1 fcd0 	bl	8000714 <__addsf3>
 801ed74:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801ed76:	4607      	mov	r7, r0
 801ed78:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801ed7a:	f7e1 fdd3 	bl	8000924 <__aeabi_fmul>
 801ed7e:	4601      	mov	r1, r0
 801ed80:	4638      	mov	r0, r7
 801ed82:	f7e1 fcc7 	bl	8000714 <__addsf3>
 801ed86:	4601      	mov	r1, r0
 801ed88:	4630      	mov	r0, r6
 801ed8a:	f7e1 fcc3 	bl	8000714 <__addsf3>
 801ed8e:	9a04      	ldr	r2, [sp, #16]
 801ed90:	4606      	mov	r6, r0
 801ed92:	0892      	lsrs	r2, r2, #2
 801ed94:	3201      	adds	r2, #1
 801ed96:	eb05 1502 	add.w	r5, r5, r2, lsl #4
 801ed9a:	eb04 1402 	add.w	r4, r4, r2, lsl #4
 801ed9e:	f00a 0a03 	and.w	sl, sl, #3
 801eda2:	f1ba 0f00 	cmp.w	sl, #0
 801eda6:	d020      	beq.n	801edea <forward_lite_dense_if32of32wf32+0x33a>
 801eda8:	6829      	ldr	r1, [r5, #0]
 801edaa:	6820      	ldr	r0, [r4, #0]
 801edac:	f7e1 fdba 	bl	8000924 <__aeabi_fmul>
 801edb0:	4601      	mov	r1, r0
 801edb2:	4630      	mov	r0, r6
 801edb4:	f7e1 fcae 	bl	8000714 <__addsf3>
 801edb8:	f1ba 0f01 	cmp.w	sl, #1
 801edbc:	4606      	mov	r6, r0
 801edbe:	d014      	beq.n	801edea <forward_lite_dense_if32of32wf32+0x33a>
 801edc0:	6869      	ldr	r1, [r5, #4]
 801edc2:	6860      	ldr	r0, [r4, #4]
 801edc4:	f7e1 fdae 	bl	8000924 <__aeabi_fmul>
 801edc8:	4601      	mov	r1, r0
 801edca:	4630      	mov	r0, r6
 801edcc:	f7e1 fca2 	bl	8000714 <__addsf3>
 801edd0:	f1ba 0f02 	cmp.w	sl, #2
 801edd4:	4606      	mov	r6, r0
 801edd6:	d008      	beq.n	801edea <forward_lite_dense_if32of32wf32+0x33a>
 801edd8:	68a1      	ldr	r1, [r4, #8]
 801edda:	68a8      	ldr	r0, [r5, #8]
 801eddc:	f7e1 fda2 	bl	8000924 <__aeabi_fmul>
 801ede0:	4601      	mov	r1, r0
 801ede2:	4630      	mov	r0, r6
 801ede4:	f7e1 fc96 	bl	8000714 <__addsf3>
 801ede8:	4606      	mov	r6, r0
 801edea:	9b02      	ldr	r3, [sp, #8]
 801edec:	f848 6b04 	str.w	r6, [r8], #4
 801edf0:	4499      	add	r9, r3
 801edf2:	9b03      	ldr	r3, [sp, #12]
 801edf4:	4543      	cmp	r3, r8
 801edf6:	f63f ae8a 	bhi.w	801eb0e <forward_lite_dense_if32of32wf32+0x5e>
 801edfa:	e9dd 6407 	ldrd	r6, r4, [sp, #28]
 801edfe:	6961      	ldr	r1, [r4, #20]
 801ee00:	68e3      	ldr	r3, [r4, #12]
 801ee02:	b9ab      	cbnz	r3, 801ee30 <forward_lite_dense_if32of32wf32+0x380>
 801ee04:	9b01      	ldr	r3, [sp, #4]
 801ee06:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801ee0a:	eb03 038b 	add.w	r3, r3, fp, lsl #2
 801ee0e:	9301      	str	r3, [sp, #4]
 801ee10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ee12:	eb06 0681 	add.w	r6, r6, r1, lsl #2
 801ee16:	42b3      	cmp	r3, r6
 801ee18:	ea4f 0e81 	mov.w	lr, r1, lsl #2
 801ee1c:	f63f ae5f 	bhi.w	801eade <forward_lite_dense_if32of32wf32+0x2e>
 801ee20:	b00b      	add	sp, #44	@ 0x2c
 801ee22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee26:	9c01      	ldr	r4, [sp, #4]
 801ee28:	46da      	mov	sl, fp
 801ee2a:	464d      	mov	r5, r9
 801ee2c:	2600      	movs	r6, #0
 801ee2e:	e739      	b.n	801eca4 <forward_lite_dense_if32of32wf32+0x1f4>
 801ee30:	2900      	cmp	r1, #0
 801ee32:	d0e7      	beq.n	801ee04 <forward_lite_dense_if32of32wf32+0x354>
 801ee34:	6819      	ldr	r1, [r3, #0]
 801ee36:	6830      	ldr	r0, [r6, #0]
 801ee38:	f7e1 fc6c 	bl	8000714 <__addsf3>
 801ee3c:	6030      	str	r0, [r6, #0]
 801ee3e:	6961      	ldr	r1, [r4, #20]
 801ee40:	2901      	cmp	r1, #1
 801ee42:	d9df      	bls.n	801ee04 <forward_lite_dense_if32of32wf32+0x354>
 801ee44:	46b0      	mov	r8, r6
 801ee46:	2501      	movs	r5, #1
 801ee48:	68e3      	ldr	r3, [r4, #12]
 801ee4a:	f858 0f04 	ldr.w	r0, [r8, #4]!
 801ee4e:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 801ee52:	f7e1 fc5f 	bl	8000714 <__addsf3>
 801ee56:	f8c8 0000 	str.w	r0, [r8]
 801ee5a:	6961      	ldr	r1, [r4, #20]
 801ee5c:	3501      	adds	r5, #1
 801ee5e:	42a9      	cmp	r1, r5
 801ee60:	d8f2      	bhi.n	801ee48 <forward_lite_dense_if32of32wf32+0x398>
 801ee62:	e7cf      	b.n	801ee04 <forward_lite_dense_if32of32wf32+0x354>

0801ee64 <forward_lite_dense_if32of32wf32_lut4>:
 801ee64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ee68:	b095      	sub	sp, #84	@ 0x54
 801ee6a:	469b      	mov	fp, r3
 801ee6c:	9210      	str	r2, [sp, #64]	@ 0x40
 801ee6e:	e9dd 2321 	ldrd	r2, r3, [sp, #132]	@ 0x84
 801ee72:	9f1e      	ldr	r7, [sp, #120]	@ 0x78
 801ee74:	fb02 f303 	mul.w	r3, r2, r3
 801ee78:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801ee7c:	930c      	str	r3, [sp, #48]	@ 0x30
 801ee7e:	4606      	mov	r6, r0
 801ee80:	e9dd 351f 	ldrd	r3, r5, [sp, #124]	@ 0x7c
 801ee84:	460c      	mov	r4, r1
 801ee86:	b137      	cbz	r7, 801ee96 <forward_lite_dense_if32of32wf32_lut4+0x32>
 801ee88:	4658      	mov	r0, fp
 801ee8a:	2240      	movs	r2, #64	@ 0x40
 801ee8c:	4639      	mov	r1, r7
 801ee8e:	f000 fb03 	bl	801f498 <st_int8_copy>
 801ee92:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801ee94:	46bb      	mov	fp, r7
 801ee96:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ee98:	4296      	cmp	r6, r2
 801ee9a:	f080 813d 	bcs.w	801f118 <forward_lite_dense_if32of32wf32_lut4+0x2b4>
 801ee9e:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801eea0:	960a      	str	r6, [sp, #40]	@ 0x28
 801eea2:	f025 0101 	bic.w	r1, r5, #1
 801eea6:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801eeaa:	ea4f 0a82 	mov.w	sl, r2, lsl #2
 801eeae:	9102      	str	r1, [sp, #8]
 801eeb0:	f06f 0103 	mvn.w	r1, #3
 801eeb4:	eba1 010a 	sub.w	r1, r1, sl
 801eeb8:	9113      	str	r1, [sp, #76]	@ 0x4c
 801eeba:	f005 0101 	and.w	r1, r5, #1
 801eebe:	08ea      	lsrs	r2, r5, #3
 801eec0:	9107      	str	r1, [sp, #28]
 801eec2:	00a9      	lsls	r1, r5, #2
 801eec4:	9206      	str	r2, [sp, #24]
 801eec6:	910f      	str	r1, [sp, #60]	@ 0x3c
 801eec8:	eb04 1142 	add.w	r1, r4, r2, lsl #5
 801eecc:	0092      	lsls	r2, r2, #2
 801eece:	9209      	str	r2, [sp, #36]	@ 0x24
 801eed0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801eed2:	9105      	str	r1, [sp, #20]
 801eed4:	1f18      	subs	r0, r3, #4
 801eed6:	e9cd aa0d 	strd	sl, sl, [sp, #52]	@ 0x34
 801eeda:	f104 0120 	add.w	r1, r4, #32
 801eede:	eb00 0482 	add.w	r4, r0, r2, lsl #2
 801eee2:	9011      	str	r0, [sp, #68]	@ 0x44
 801eee4:	9104      	str	r1, [sp, #16]
 801eee6:	9412      	str	r4, [sp, #72]	@ 0x48
 801eee8:	931f      	str	r3, [sp, #124]	@ 0x7c
 801eeea:	4632      	mov	r2, r6
 801eeec:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801eeee:	9904      	ldr	r1, [sp, #16]
 801eef0:	18d3      	adds	r3, r2, r3
 801eef2:	3920      	subs	r1, #32
 801eef4:	4293      	cmp	r3, r2
 801eef6:	9303      	str	r3, [sp, #12]
 801eef8:	910b      	str	r1, [sp, #44]	@ 0x2c
 801eefa:	f240 8110 	bls.w	801f11e <forward_lite_dense_if32of32wf32_lut4+0x2ba>
 801eefe:	9b02      	ldr	r3, [sp, #8]
 801ef00:	f8dd 9040 	ldr.w	r9, [sp, #64]	@ 0x40
 801ef04:	9200      	str	r2, [sp, #0]
 801ef06:	3b01      	subs	r3, #1
 801ef08:	9308      	str	r3, [sp, #32]
 801ef0a:	9b06      	ldr	r3, [sp, #24]
 801ef0c:	2b00      	cmp	r3, #0
 801ef0e:	f000 80e7 	beq.w	801f0e0 <forward_lite_dense_if32of32wf32_lut4+0x27c>
 801ef12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ef14:	9c04      	ldr	r4, [sp, #16]
 801ef16:	eb09 0a03 	add.w	sl, r9, r3
 801ef1a:	2500      	movs	r5, #0
 801ef1c:	f899 6000 	ldrb.w	r6, [r9]
 801ef20:	f854 1c20 	ldr.w	r1, [r4, #-32]
 801ef24:	0933      	lsrs	r3, r6, #4
 801ef26:	f006 060f 	and.w	r6, r6, #15
 801ef2a:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
 801ef2e:	f7e1 fcf9 	bl	8000924 <__aeabi_fmul>
 801ef32:	f854 1c1c 	ldr.w	r1, [r4, #-28]
 801ef36:	4607      	mov	r7, r0
 801ef38:	f85b 0026 	ldr.w	r0, [fp, r6, lsl #2]
 801ef3c:	f899 6001 	ldrb.w	r6, [r9, #1]
 801ef40:	f7e1 fcf0 	bl	8000924 <__aeabi_fmul>
 801ef44:	4601      	mov	r1, r0
 801ef46:	4638      	mov	r0, r7
 801ef48:	f7e1 fbe4 	bl	8000714 <__addsf3>
 801ef4c:	0933      	lsrs	r3, r6, #4
 801ef4e:	f854 1c18 	ldr.w	r1, [r4, #-24]
 801ef52:	4607      	mov	r7, r0
 801ef54:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
 801ef58:	f7e1 fce4 	bl	8000924 <__aeabi_fmul>
 801ef5c:	4601      	mov	r1, r0
 801ef5e:	4638      	mov	r0, r7
 801ef60:	f7e1 fbd8 	bl	8000714 <__addsf3>
 801ef64:	f006 060f 	and.w	r6, r6, #15
 801ef68:	f854 1c14 	ldr.w	r1, [r4, #-20]
 801ef6c:	4607      	mov	r7, r0
 801ef6e:	f85b 0026 	ldr.w	r0, [fp, r6, lsl #2]
 801ef72:	f899 6002 	ldrb.w	r6, [r9, #2]
 801ef76:	f7e1 fcd5 	bl	8000924 <__aeabi_fmul>
 801ef7a:	4601      	mov	r1, r0
 801ef7c:	4638      	mov	r0, r7
 801ef7e:	f7e1 fbc9 	bl	8000714 <__addsf3>
 801ef82:	0933      	lsrs	r3, r6, #4
 801ef84:	f854 1c10 	ldr.w	r1, [r4, #-16]
 801ef88:	4607      	mov	r7, r0
 801ef8a:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
 801ef8e:	f7e1 fcc9 	bl	8000924 <__aeabi_fmul>
 801ef92:	4601      	mov	r1, r0
 801ef94:	4638      	mov	r0, r7
 801ef96:	f7e1 fbbd 	bl	8000714 <__addsf3>
 801ef9a:	f006 060f 	and.w	r6, r6, #15
 801ef9e:	f854 1c0c 	ldr.w	r1, [r4, #-12]
 801efa2:	4607      	mov	r7, r0
 801efa4:	f85b 0026 	ldr.w	r0, [fp, r6, lsl #2]
 801efa8:	f899 6003 	ldrb.w	r6, [r9, #3]
 801efac:	f7e1 fcba 	bl	8000924 <__aeabi_fmul>
 801efb0:	4601      	mov	r1, r0
 801efb2:	4638      	mov	r0, r7
 801efb4:	f7e1 fbae 	bl	8000714 <__addsf3>
 801efb8:	0933      	lsrs	r3, r6, #4
 801efba:	f854 1c08 	ldr.w	r1, [r4, #-8]
 801efbe:	4607      	mov	r7, r0
 801efc0:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
 801efc4:	f7e1 fcae 	bl	8000924 <__aeabi_fmul>
 801efc8:	4601      	mov	r1, r0
 801efca:	4638      	mov	r0, r7
 801efcc:	f7e1 fba2 	bl	8000714 <__addsf3>
 801efd0:	f006 060f 	and.w	r6, r6, #15
 801efd4:	f854 1c04 	ldr.w	r1, [r4, #-4]
 801efd8:	4607      	mov	r7, r0
 801efda:	f85b 0026 	ldr.w	r0, [fp, r6, lsl #2]
 801efde:	f7e1 fca1 	bl	8000924 <__aeabi_fmul>
 801efe2:	4601      	mov	r1, r0
 801efe4:	4638      	mov	r0, r7
 801efe6:	f7e1 fb95 	bl	8000714 <__addsf3>
 801efea:	4601      	mov	r1, r0
 801efec:	4628      	mov	r0, r5
 801efee:	f7e1 fb91 	bl	8000714 <__addsf3>
 801eff2:	f109 0904 	add.w	r9, r9, #4
 801eff6:	45d1      	cmp	r9, sl
 801eff8:	4605      	mov	r5, r0
 801effa:	f104 0420 	add.w	r4, r4, #32
 801effe:	d18d      	bne.n	801ef1c <forward_lite_dense_if32of32wf32_lut4+0xb8>
 801f000:	9c05      	ldr	r4, [sp, #20]
 801f002:	9b02      	ldr	r3, [sp, #8]
 801f004:	429c      	cmp	r4, r3
 801f006:	d272      	bcs.n	801f0ee <forward_lite_dense_if32of32wf32_lut4+0x28a>
 801f008:	9b08      	ldr	r3, [sp, #32]
 801f00a:	9401      	str	r4, [sp, #4]
 801f00c:	eba3 0804 	sub.w	r8, r3, r4
 801f010:	f104 0608 	add.w	r6, r4, #8
 801f014:	f10a 37ff 	add.w	r7, sl, #4294967295
 801f018:	ea4f 09d8 	mov.w	r9, r8, lsr #3
 801f01c:	463c      	mov	r4, r7
 801f01e:	eb0a 08d8 	add.w	r8, sl, r8, lsr #3
 801f022:	4637      	mov	r7, r6
 801f024:	f814 6f01 	ldrb.w	r6, [r4, #1]!
 801f028:	f857 1c08 	ldr.w	r1, [r7, #-8]
 801f02c:	0932      	lsrs	r2, r6, #4
 801f02e:	3708      	adds	r7, #8
 801f030:	f85b 0022 	ldr.w	r0, [fp, r2, lsl #2]
 801f034:	f7e1 fc76 	bl	8000924 <__aeabi_fmul>
 801f038:	f006 020f 	and.w	r2, r6, #15
 801f03c:	f857 1c0c 	ldr.w	r1, [r7, #-12]
 801f040:	4606      	mov	r6, r0
 801f042:	f85b 0022 	ldr.w	r0, [fp, r2, lsl #2]
 801f046:	f7e1 fc6d 	bl	8000924 <__aeabi_fmul>
 801f04a:	4601      	mov	r1, r0
 801f04c:	4630      	mov	r0, r6
 801f04e:	f7e1 fb61 	bl	8000714 <__addsf3>
 801f052:	4601      	mov	r1, r0
 801f054:	4628      	mov	r0, r5
 801f056:	f7e1 fb5d 	bl	8000714 <__addsf3>
 801f05a:	4544      	cmp	r4, r8
 801f05c:	4605      	mov	r5, r0
 801f05e:	d1e1      	bne.n	801f024 <forward_lite_dense_if32of32wf32_lut4+0x1c0>
 801f060:	9c01      	ldr	r4, [sp, #4]
 801f062:	f109 0301 	add.w	r3, r9, #1
 801f066:	eb0a 0903 	add.w	r9, sl, r3
 801f06a:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 801f06e:	9b07      	ldr	r3, [sp, #28]
 801f070:	b35b      	cbz	r3, 801f0ca <forward_lite_dense_if32of32wf32_lut4+0x266>
 801f072:	f819 3b01 	ldrb.w	r3, [r9], #1
 801f076:	6821      	ldr	r1, [r4, #0]
 801f078:	091b      	lsrs	r3, r3, #4
 801f07a:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
 801f07e:	f7e1 fc51 	bl	8000924 <__aeabi_fmul>
 801f082:	4629      	mov	r1, r5
 801f084:	f7e1 fb46 	bl	8000714 <__addsf3>
 801f088:	9b00      	ldr	r3, [sp, #0]
 801f08a:	9a03      	ldr	r2, [sp, #12]
 801f08c:	f843 0b04 	str.w	r0, [r3], #4
 801f090:	429a      	cmp	r2, r3
 801f092:	9300      	str	r3, [sp, #0]
 801f094:	f63f af39 	bhi.w	801ef0a <forward_lite_dense_if32of32wf32_lut4+0xa6>
 801f098:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f09a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f09c:	189c      	adds	r4, r3, r2
 801f09e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801f0a0:	bb3b      	cbnz	r3, 801f0f2 <forward_lite_dense_if32of32wf32_lut4+0x28e>
 801f0a2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f0a4:	42a3      	cmp	r3, r4
 801f0a6:	d937      	bls.n	801f118 <forward_lite_dense_if32of32wf32_lut4+0x2b4>
 801f0a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f0aa:	9a02      	ldr	r2, [sp, #8]
 801f0ac:	441a      	add	r2, r3
 801f0ae:	9202      	str	r2, [sp, #8]
 801f0b0:	9a05      	ldr	r2, [sp, #20]
 801f0b2:	441a      	add	r2, r3
 801f0b4:	9205      	str	r2, [sp, #20]
 801f0b6:	9a04      	ldr	r2, [sp, #16]
 801f0b8:	441a      	add	r2, r3
 801f0ba:	9204      	str	r2, [sp, #16]
 801f0bc:	9b03      	ldr	r3, [sp, #12]
 801f0be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f0c0:	4293      	cmp	r3, r2
 801f0c2:	d92e      	bls.n	801f122 <forward_lite_dense_if32of32wf32_lut4+0x2be>
 801f0c4:	940a      	str	r4, [sp, #40]	@ 0x28
 801f0c6:	4622      	mov	r2, r4
 801f0c8:	e710      	b.n	801eeec <forward_lite_dense_if32of32wf32_lut4+0x88>
 801f0ca:	9b00      	ldr	r3, [sp, #0]
 801f0cc:	9a03      	ldr	r2, [sp, #12]
 801f0ce:	f843 5b04 	str.w	r5, [r3], #4
 801f0d2:	429a      	cmp	r2, r3
 801f0d4:	9300      	str	r3, [sp, #0]
 801f0d6:	d9df      	bls.n	801f098 <forward_lite_dense_if32of32wf32_lut4+0x234>
 801f0d8:	9b06      	ldr	r3, [sp, #24]
 801f0da:	2b00      	cmp	r3, #0
 801f0dc:	f47f af19 	bne.w	801ef12 <forward_lite_dense_if32of32wf32_lut4+0xae>
 801f0e0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801f0e2:	9b02      	ldr	r3, [sp, #8]
 801f0e4:	429c      	cmp	r4, r3
 801f0e6:	46ca      	mov	sl, r9
 801f0e8:	f04f 0500 	mov.w	r5, #0
 801f0ec:	d38c      	bcc.n	801f008 <forward_lite_dense_if32of32wf32_lut4+0x1a4>
 801f0ee:	46d1      	mov	r9, sl
 801f0f0:	e7bd      	b.n	801f06e <forward_lite_dense_if32of32wf32_lut4+0x20a>
 801f0f2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801f0f4:	2b00      	cmp	r3, #0
 801f0f6:	d0d4      	beq.n	801f0a2 <forward_lite_dense_if32of32wf32_lut4+0x23e>
 801f0f8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f0fa:	e9dd 5a11 	ldrd	r5, sl, [sp, #68]	@ 0x44
 801f0fe:	18e6      	adds	r6, r4, r3
 801f100:	f855 1f04 	ldr.w	r1, [r5, #4]!
 801f104:	f856 0f04 	ldr.w	r0, [r6, #4]!
 801f108:	f7e1 fb04 	bl	8000714 <__addsf3>
 801f10c:	4555      	cmp	r5, sl
 801f10e:	6030      	str	r0, [r6, #0]
 801f110:	d1f6      	bne.n	801f100 <forward_lite_dense_if32of32wf32_lut4+0x29c>
 801f112:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f114:	42a3      	cmp	r3, r4
 801f116:	d8c7      	bhi.n	801f0a8 <forward_lite_dense_if32of32wf32_lut4+0x244>
 801f118:	b015      	add	sp, #84	@ 0x54
 801f11a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f11e:	4614      	mov	r4, r2
 801f120:	e7bd      	b.n	801f09e <forward_lite_dense_if32of32wf32_lut4+0x23a>
 801f122:	46a1      	mov	r9, r4
 801f124:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 801f128:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801f12a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801f12c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801f12e:	b903      	cbnz	r3, 801f132 <forward_lite_dense_if32of32wf32_lut4+0x2ce>
 801f130:	e7fe      	b.n	801f130 <forward_lite_dense_if32of32wf32_lut4+0x2cc>
 801f132:	2a00      	cmp	r2, #0
 801f134:	d0fb      	beq.n	801f12e <forward_lite_dense_if32of32wf32_lut4+0x2ca>
 801f136:	f06f 0703 	mvn.w	r7, #3
 801f13a:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 801f13e:	eba7 070a 	sub.w	r7, r7, sl
 801f142:	eb09 0607 	add.w	r6, r9, r7
 801f146:	4645      	mov	r5, r8
 801f148:	f855 1f04 	ldr.w	r1, [r5, #4]!
 801f14c:	f856 0f04 	ldr.w	r0, [r6, #4]!
 801f150:	f7e1 fae0 	bl	8000714 <__addsf3>
 801f154:	42ac      	cmp	r4, r5
 801f156:	6030      	str	r0, [r6, #0]
 801f158:	d1f6      	bne.n	801f148 <forward_lite_dense_if32of32wf32_lut4+0x2e4>
 801f15a:	e7f2      	b.n	801f142 <forward_lite_dense_if32of32wf32_lut4+0x2de>

0801f15c <forward_lite_dense_if32of32wf32_lut8>:
 801f15c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f160:	b091      	sub	sp, #68	@ 0x44
 801f162:	461d      	mov	r5, r3
 801f164:	920c      	str	r2, [sp, #48]	@ 0x30
 801f166:	e9dd 231d 	ldrd	r2, r3, [sp, #116]	@ 0x74
 801f16a:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801f16c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 801f16e:	fb02 f303 	mul.w	r3, r2, r3
 801f172:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801f176:	4682      	mov	sl, r0
 801f178:	460c      	mov	r4, r1
 801f17a:	9309      	str	r3, [sp, #36]	@ 0x24
 801f17c:	b137      	cbz	r7, 801f18c <forward_lite_dense_if32of32wf32_lut8+0x30>
 801f17e:	4628      	mov	r0, r5
 801f180:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801f184:	4639      	mov	r1, r7
 801f186:	f000 f987 	bl	801f498 <st_int8_copy>
 801f18a:	463d      	mov	r5, r7
 801f18c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f18e:	459a      	cmp	sl, r3
 801f190:	f080 8163 	bcs.w	801f45a <forward_lite_dense_if32of32wf32_lut8+0x2fe>
 801f194:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801f196:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 801f198:	0099      	lsls	r1, r3, #2
 801f19a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801f19c:	9108      	str	r1, [sp, #32]
 801f19e:	1f18      	subs	r0, r3, #4
 801f1a0:	f06f 0303 	mvn.w	r3, #3
 801f1a4:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
 801f1a8:	08f2      	lsrs	r2, r6, #3
 801f1aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f1ac:	00b3      	lsls	r3, r6, #2
 801f1ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f1b0:	eb04 1342 	add.w	r3, r4, r2, lsl #5
 801f1b4:	9303      	str	r3, [sp, #12]
 801f1b6:	00d3      	lsls	r3, r2, #3
 801f1b8:	9305      	str	r3, [sp, #20]
 801f1ba:	9b08      	ldr	r3, [sp, #32]
 801f1bc:	9204      	str	r2, [sp, #16]
 801f1be:	4652      	mov	r2, sl
 801f1c0:	eb02 0e03 	add.w	lr, r2, r3
 801f1c4:	f104 0c20 	add.w	ip, r4, #32
 801f1c8:	eb00 0887 	add.w	r8, r0, r7, lsl #2
 801f1cc:	4596      	cmp	lr, r2
 801f1ce:	900d      	str	r0, [sp, #52]	@ 0x34
 801f1d0:	f006 0907 	and.w	r9, r6, #7
 801f1d4:	910a      	str	r1, [sp, #40]	@ 0x28
 801f1d6:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
 801f1da:	f1ac 0320 	sub.w	r3, ip, #32
 801f1de:	f240 810a 	bls.w	801f3f6 <forward_lite_dense_if32of32wf32_lut8+0x29a>
 801f1e2:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801f1e4:	f8cd e004 	str.w	lr, [sp, #4]
 801f1e8:	46b8      	mov	r8, r7
 801f1ea:	4693      	mov	fp, r2
 801f1ec:	9306      	str	r3, [sp, #24]
 801f1ee:	464f      	mov	r7, r9
 801f1f0:	f8cd c008 	str.w	ip, [sp, #8]
 801f1f4:	9207      	str	r2, [sp, #28]
 801f1f6:	9b04      	ldr	r3, [sp, #16]
 801f1f8:	2b00      	cmp	r3, #0
 801f1fa:	f000 810b 	beq.w	801f414 <forward_lite_dense_if32of32wf32_lut8+0x2b8>
 801f1fe:	9b05      	ldr	r3, [sp, #20]
 801f200:	9c02      	ldr	r4, [sp, #8]
 801f202:	9700      	str	r7, [sp, #0]
 801f204:	eb08 0a03 	add.w	sl, r8, r3
 801f208:	2600      	movs	r6, #0
 801f20a:	f898 2000 	ldrb.w	r2, [r8]
 801f20e:	f854 1c20 	ldr.w	r1, [r4, #-32]
 801f212:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
 801f216:	f7e1 fb85 	bl	8000924 <__aeabi_fmul>
 801f21a:	f898 2001 	ldrb.w	r2, [r8, #1]
 801f21e:	f854 1c1c 	ldr.w	r1, [r4, #-28]
 801f222:	4607      	mov	r7, r0
 801f224:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
 801f228:	f7e1 fb7c 	bl	8000924 <__aeabi_fmul>
 801f22c:	4601      	mov	r1, r0
 801f22e:	4638      	mov	r0, r7
 801f230:	f7e1 fa70 	bl	8000714 <__addsf3>
 801f234:	f898 2002 	ldrb.w	r2, [r8, #2]
 801f238:	f854 1c18 	ldr.w	r1, [r4, #-24]
 801f23c:	4607      	mov	r7, r0
 801f23e:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
 801f242:	f7e1 fb6f 	bl	8000924 <__aeabi_fmul>
 801f246:	4601      	mov	r1, r0
 801f248:	4638      	mov	r0, r7
 801f24a:	f7e1 fa63 	bl	8000714 <__addsf3>
 801f24e:	f898 2003 	ldrb.w	r2, [r8, #3]
 801f252:	f854 1c14 	ldr.w	r1, [r4, #-20]
 801f256:	4607      	mov	r7, r0
 801f258:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
 801f25c:	f7e1 fb62 	bl	8000924 <__aeabi_fmul>
 801f260:	4601      	mov	r1, r0
 801f262:	4638      	mov	r0, r7
 801f264:	f7e1 fa56 	bl	8000714 <__addsf3>
 801f268:	f898 2004 	ldrb.w	r2, [r8, #4]
 801f26c:	f854 1c10 	ldr.w	r1, [r4, #-16]
 801f270:	4607      	mov	r7, r0
 801f272:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
 801f276:	f7e1 fb55 	bl	8000924 <__aeabi_fmul>
 801f27a:	4639      	mov	r1, r7
 801f27c:	f7e1 fa4a 	bl	8000714 <__addsf3>
 801f280:	f898 2005 	ldrb.w	r2, [r8, #5]
 801f284:	f854 1c0c 	ldr.w	r1, [r4, #-12]
 801f288:	4607      	mov	r7, r0
 801f28a:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
 801f28e:	f7e1 fb49 	bl	8000924 <__aeabi_fmul>
 801f292:	4601      	mov	r1, r0
 801f294:	4638      	mov	r0, r7
 801f296:	f7e1 fa3d 	bl	8000714 <__addsf3>
 801f29a:	4607      	mov	r7, r0
 801f29c:	f898 0006 	ldrb.w	r0, [r8, #6]
 801f2a0:	f898 9007 	ldrb.w	r9, [r8, #7]
 801f2a4:	f854 1c08 	ldr.w	r1, [r4, #-8]
 801f2a8:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801f2ac:	f7e1 fb3a 	bl	8000924 <__aeabi_fmul>
 801f2b0:	4601      	mov	r1, r0
 801f2b2:	4638      	mov	r0, r7
 801f2b4:	f7e1 fa2e 	bl	8000714 <__addsf3>
 801f2b8:	f854 1c04 	ldr.w	r1, [r4, #-4]
 801f2bc:	4607      	mov	r7, r0
 801f2be:	f855 0029 	ldr.w	r0, [r5, r9, lsl #2]
 801f2c2:	f7e1 fb2f 	bl	8000924 <__aeabi_fmul>
 801f2c6:	4601      	mov	r1, r0
 801f2c8:	4638      	mov	r0, r7
 801f2ca:	f7e1 fa23 	bl	8000714 <__addsf3>
 801f2ce:	4601      	mov	r1, r0
 801f2d0:	4630      	mov	r0, r6
 801f2d2:	f7e1 fa1f 	bl	8000714 <__addsf3>
 801f2d6:	f108 0808 	add.w	r8, r8, #8
 801f2da:	45d0      	cmp	r8, sl
 801f2dc:	4606      	mov	r6, r0
 801f2de:	f104 0420 	add.w	r4, r4, #32
 801f2e2:	d192      	bne.n	801f20a <forward_lite_dense_if32of32wf32_lut8+0xae>
 801f2e4:	9f00      	ldr	r7, [sp, #0]
 801f2e6:	9c03      	ldr	r4, [sp, #12]
 801f2e8:	2f00      	cmp	r7, #0
 801f2ea:	f000 8091 	beq.w	801f410 <forward_lite_dense_if32of32wf32_lut8+0x2b4>
 801f2ee:	f89a 3000 	ldrb.w	r3, [sl]
 801f2f2:	6821      	ldr	r1, [r4, #0]
 801f2f4:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 801f2f8:	f7e1 fb14 	bl	8000924 <__aeabi_fmul>
 801f2fc:	4601      	mov	r1, r0
 801f2fe:	4630      	mov	r0, r6
 801f300:	f7e1 fa08 	bl	8000714 <__addsf3>
 801f304:	2f01      	cmp	r7, #1
 801f306:	4606      	mov	r6, r0
 801f308:	d051      	beq.n	801f3ae <forward_lite_dense_if32of32wf32_lut8+0x252>
 801f30a:	f89a 3001 	ldrb.w	r3, [sl, #1]
 801f30e:	6861      	ldr	r1, [r4, #4]
 801f310:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 801f314:	f7e1 fb06 	bl	8000924 <__aeabi_fmul>
 801f318:	4601      	mov	r1, r0
 801f31a:	4630      	mov	r0, r6
 801f31c:	f7e1 f9fa 	bl	8000714 <__addsf3>
 801f320:	2f02      	cmp	r7, #2
 801f322:	4606      	mov	r6, r0
 801f324:	d043      	beq.n	801f3ae <forward_lite_dense_if32of32wf32_lut8+0x252>
 801f326:	f89a 3002 	ldrb.w	r3, [sl, #2]
 801f32a:	68a1      	ldr	r1, [r4, #8]
 801f32c:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 801f330:	f7e1 faf8 	bl	8000924 <__aeabi_fmul>
 801f334:	4601      	mov	r1, r0
 801f336:	4630      	mov	r0, r6
 801f338:	f7e1 f9ec 	bl	8000714 <__addsf3>
 801f33c:	2f03      	cmp	r7, #3
 801f33e:	4606      	mov	r6, r0
 801f340:	d035      	beq.n	801f3ae <forward_lite_dense_if32of32wf32_lut8+0x252>
 801f342:	f89a 3003 	ldrb.w	r3, [sl, #3]
 801f346:	68e1      	ldr	r1, [r4, #12]
 801f348:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 801f34c:	f7e1 faea 	bl	8000924 <__aeabi_fmul>
 801f350:	4601      	mov	r1, r0
 801f352:	4630      	mov	r0, r6
 801f354:	f7e1 f9de 	bl	8000714 <__addsf3>
 801f358:	2f04      	cmp	r7, #4
 801f35a:	4606      	mov	r6, r0
 801f35c:	d027      	beq.n	801f3ae <forward_lite_dense_if32of32wf32_lut8+0x252>
 801f35e:	f89a 3004 	ldrb.w	r3, [sl, #4]
 801f362:	6921      	ldr	r1, [r4, #16]
 801f364:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 801f368:	f7e1 fadc 	bl	8000924 <__aeabi_fmul>
 801f36c:	4601      	mov	r1, r0
 801f36e:	4630      	mov	r0, r6
 801f370:	f7e1 f9d0 	bl	8000714 <__addsf3>
 801f374:	2f05      	cmp	r7, #5
 801f376:	4606      	mov	r6, r0
 801f378:	d019      	beq.n	801f3ae <forward_lite_dense_if32of32wf32_lut8+0x252>
 801f37a:	f89a 3005 	ldrb.w	r3, [sl, #5]
 801f37e:	6961      	ldr	r1, [r4, #20]
 801f380:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 801f384:	f7e1 face 	bl	8000924 <__aeabi_fmul>
 801f388:	4601      	mov	r1, r0
 801f38a:	4630      	mov	r0, r6
 801f38c:	f7e1 f9c2 	bl	8000714 <__addsf3>
 801f390:	2f06      	cmp	r7, #6
 801f392:	4606      	mov	r6, r0
 801f394:	d00b      	beq.n	801f3ae <forward_lite_dense_if32of32wf32_lut8+0x252>
 801f396:	f89a 3006 	ldrb.w	r3, [sl, #6]
 801f39a:	69a1      	ldr	r1, [r4, #24]
 801f39c:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 801f3a0:	f7e1 fac0 	bl	8000924 <__aeabi_fmul>
 801f3a4:	4601      	mov	r1, r0
 801f3a6:	4630      	mov	r0, r6
 801f3a8:	f7e1 f9b4 	bl	8000714 <__addsf3>
 801f3ac:	4606      	mov	r6, r0
 801f3ae:	eb0a 0807 	add.w	r8, sl, r7
 801f3b2:	f84b 6b04 	str.w	r6, [fp], #4
 801f3b6:	9b01      	ldr	r3, [sp, #4]
 801f3b8:	455b      	cmp	r3, fp
 801f3ba:	f63f af1c 	bhi.w	801f1f6 <forward_lite_dense_if32of32wf32_lut8+0x9a>
 801f3be:	9a07      	ldr	r2, [sp, #28]
 801f3c0:	f8dd c008 	ldr.w	ip, [sp, #8]
 801f3c4:	469e      	mov	lr, r3
 801f3c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f3c8:	46b9      	mov	r9, r7
 801f3ca:	18d7      	adds	r7, r2, r3
 801f3cc:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801f3ce:	bb33      	cbnz	r3, 801f41e <forward_lite_dense_if32of32wf32_lut8+0x2c2>
 801f3d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f3d2:	42bb      	cmp	r3, r7
 801f3d4:	d941      	bls.n	801f45a <forward_lite_dense_if32of32wf32_lut8+0x2fe>
 801f3d6:	9b03      	ldr	r3, [sp, #12]
 801f3d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801f3da:	4596      	cmp	lr, r2
 801f3dc:	440b      	add	r3, r1
 801f3de:	9303      	str	r3, [sp, #12]
 801f3e0:	448c      	add	ip, r1
 801f3e2:	d950      	bls.n	801f486 <forward_lite_dense_if32of32wf32_lut8+0x32a>
 801f3e4:	9b08      	ldr	r3, [sp, #32]
 801f3e6:	463a      	mov	r2, r7
 801f3e8:	eb02 0e03 	add.w	lr, r2, r3
 801f3ec:	4596      	cmp	lr, r2
 801f3ee:	f1ac 0320 	sub.w	r3, ip, #32
 801f3f2:	f63f aef6 	bhi.w	801f1e2 <forward_lite_dense_if32of32wf32_lut8+0x86>
 801f3f6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801f3f8:	b983      	cbnz	r3, 801f41c <forward_lite_dense_if32of32wf32_lut8+0x2c0>
 801f3fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f3fc:	9908      	ldr	r1, [sp, #32]
 801f3fe:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
 801f402:	4293      	cmp	r3, r2
 801f404:	4692      	mov	sl, r2
 801f406:	d928      	bls.n	801f45a <forward_lite_dense_if32of32wf32_lut8+0x2fe>
 801f408:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801f40a:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801f40c:	bb43      	cbnz	r3, 801f460 <forward_lite_dense_if32of32wf32_lut8+0x304>
 801f40e:	e7fe      	b.n	801f40e <forward_lite_dense_if32of32wf32_lut8+0x2b2>
 801f410:	46d0      	mov	r8, sl
 801f412:	e7ce      	b.n	801f3b2 <forward_lite_dense_if32of32wf32_lut8+0x256>
 801f414:	9c06      	ldr	r4, [sp, #24]
 801f416:	46c2      	mov	sl, r8
 801f418:	2600      	movs	r6, #0
 801f41a:	e765      	b.n	801f2e8 <forward_lite_dense_if32of32wf32_lut8+0x18c>
 801f41c:	4617      	mov	r7, r2
 801f41e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801f420:	2b00      	cmp	r3, #0
 801f422:	d0d5      	beq.n	801f3d0 <forward_lite_dense_if32of32wf32_lut8+0x274>
 801f424:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f426:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801f428:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
 801f42c:	9500      	str	r5, [sp, #0]
 801f42e:	18fe      	adds	r6, r7, r3
 801f430:	4625      	mov	r5, r4
 801f432:	46f3      	mov	fp, lr
 801f434:	4634      	mov	r4, r6
 801f436:	46e2      	mov	sl, ip
 801f438:	4616      	mov	r6, r2
 801f43a:	f855 1f04 	ldr.w	r1, [r5, #4]!
 801f43e:	f854 0f04 	ldr.w	r0, [r4, #4]!
 801f442:	f7e1 f967 	bl	8000714 <__addsf3>
 801f446:	4545      	cmp	r5, r8
 801f448:	6020      	str	r0, [r4, #0]
 801f44a:	d1f6      	bne.n	801f43a <forward_lite_dense_if32of32wf32_lut8+0x2de>
 801f44c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f44e:	9d00      	ldr	r5, [sp, #0]
 801f450:	42bb      	cmp	r3, r7
 801f452:	46de      	mov	lr, fp
 801f454:	46d4      	mov	ip, sl
 801f456:	4632      	mov	r2, r6
 801f458:	d8bd      	bhi.n	801f3d6 <forward_lite_dense_if32of32wf32_lut8+0x27a>
 801f45a:	b011      	add	sp, #68	@ 0x44
 801f45c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f460:	2a00      	cmp	r2, #0
 801f462:	d0d3      	beq.n	801f40c <forward_lite_dense_if32of32wf32_lut8+0x2b0>
 801f464:	f06f 0603 	mvn.w	r6, #3
 801f468:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801f46a:	1a76      	subs	r6, r6, r1
 801f46c:	eb0a 0506 	add.w	r5, sl, r6
 801f470:	463c      	mov	r4, r7
 801f472:	f854 1f04 	ldr.w	r1, [r4, #4]!
 801f476:	f855 0f04 	ldr.w	r0, [r5, #4]!
 801f47a:	f7e1 f94b 	bl	8000714 <__addsf3>
 801f47e:	4544      	cmp	r4, r8
 801f480:	6028      	str	r0, [r5, #0]
 801f482:	d1f6      	bne.n	801f472 <forward_lite_dense_if32of32wf32_lut8+0x316>
 801f484:	e7f2      	b.n	801f46c <forward_lite_dense_if32of32wf32_lut8+0x310>
 801f486:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801f488:	9908      	ldr	r1, [sp, #32]
 801f48a:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
 801f48e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801f490:	46ba      	mov	sl, r7
 801f492:	2b00      	cmp	r3, #0
 801f494:	d0bb      	beq.n	801f40e <forward_lite_dense_if32of32wf32_lut8+0x2b2>
 801f496:	e7e3      	b.n	801f460 <forward_lite_dense_if32of32wf32_lut8+0x304>

0801f498 <st_int8_copy>:
 801f498:	4288      	cmp	r0, r1
 801f49a:	d021      	beq.n	801f4e0 <st_int8_copy+0x48>
 801f49c:	b302      	cbz	r2, 801f4e0 <st_int8_copy+0x48>
 801f49e:	4288      	cmp	r0, r1
 801f4a0:	d313      	bcc.n	801f4ca <st_int8_copy+0x32>
 801f4a2:	2a03      	cmp	r2, #3
 801f4a4:	d81d      	bhi.n	801f4e2 <st_int8_copy+0x4a>
 801f4a6:	3a01      	subs	r2, #1
 801f4a8:	f810 3b01 	ldrb.w	r3, [r0], #1
 801f4ac:	f801 3b01 	strb.w	r3, [r1], #1
 801f4b0:	b1b2      	cbz	r2, 801f4e0 <st_int8_copy+0x48>
 801f4b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 801f4b6:	f801 3b01 	strb.w	r3, [r1], #1
 801f4ba:	2a01      	cmp	r2, #1
 801f4bc:	f000 8088 	beq.w	801f5d0 <st_int8_copy+0x138>
 801f4c0:	f810 3b01 	ldrb.w	r3, [r0], #1
 801f4c4:	f801 3b01 	strb.w	r3, [r1], #1
 801f4c8:	4770      	bx	lr
 801f4ca:	1883      	adds	r3, r0, r2
 801f4cc:	428b      	cmp	r3, r1
 801f4ce:	d9e8      	bls.n	801f4a2 <st_int8_copy+0xa>
 801f4d0:	440a      	add	r2, r1
 801f4d2:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 801f4d6:	f802 1d01 	strb.w	r1, [r2, #-1]!
 801f4da:	4298      	cmp	r0, r3
 801f4dc:	d1f9      	bne.n	801f4d2 <st_int8_copy+0x3a>
 801f4de:	4770      	bx	lr
 801f4e0:	4770      	bx	lr
 801f4e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f4e6:	f001 0e03 	and.w	lr, r1, #3
 801f4ea:	f1ce 0304 	rsb	r3, lr, #4
 801f4ee:	eba2 0c03 	sub.w	ip, r2, r3
 801f4f2:	f000 0803 	and.w	r8, r0, #3
 801f4f6:	f1ce 0203 	rsb	r2, lr, #3
 801f4fa:	f810 3b01 	ldrb.w	r3, [r0], #1
 801f4fe:	f801 3b01 	strb.w	r3, [r1], #1
 801f502:	b182      	cbz	r2, 801f526 <st_int8_copy+0x8e>
 801f504:	f810 3b01 	ldrb.w	r3, [r0], #1
 801f508:	f801 3b01 	strb.w	r3, [r1], #1
 801f50c:	2a01      	cmp	r2, #1
 801f50e:	d00a      	beq.n	801f526 <st_int8_copy+0x8e>
 801f510:	f810 3b01 	ldrb.w	r3, [r0], #1
 801f514:	f801 3b01 	strb.w	r3, [r1], #1
 801f518:	f1be 0f01 	cmp.w	lr, #1
 801f51c:	d003      	beq.n	801f526 <st_int8_copy+0x8e>
 801f51e:	f810 3b01 	ldrb.w	r3, [r0], #1
 801f522:	f801 3b01 	strb.w	r3, [r1], #1
 801f526:	45c6      	cmp	lr, r8
 801f528:	d02a      	beq.n	801f580 <st_int8_copy+0xe8>
 801f52a:	ea5f 121c 	movs.w	r2, ip, lsr #4
 801f52e:	d00a      	beq.n	801f546 <st_int8_copy+0xae>
 801f530:	f850 3b04 	ldr.w	r3, [r0], #4
 801f534:	f850 4b04 	ldr.w	r4, [r0], #4
 801f538:	f850 5b04 	ldr.w	r5, [r0], #4
 801f53c:	f850 6b04 	ldr.w	r6, [r0], #4
 801f540:	c178      	stmia	r1!, {r3, r4, r5, r6}
 801f542:	3a01      	subs	r2, #1
 801f544:	d1f4      	bne.n	801f530 <st_int8_copy+0x98>
 801f546:	f01c 0f08 	tst.w	ip, #8
 801f54a:	d004      	beq.n	801f556 <st_int8_copy+0xbe>
 801f54c:	f850 3b04 	ldr.w	r3, [r0], #4
 801f550:	f850 4b04 	ldr.w	r4, [r0], #4
 801f554:	c118      	stmia	r1!, {r3, r4}
 801f556:	f01c 0f04 	tst.w	ip, #4
 801f55a:	d003      	beq.n	801f564 <st_int8_copy+0xcc>
 801f55c:	f850 3b04 	ldr.w	r3, [r0], #4
 801f560:	f841 3b04 	str.w	r3, [r1], #4
 801f564:	f01c 0f02 	tst.w	ip, #2
 801f568:	d003      	beq.n	801f572 <st_int8_copy+0xda>
 801f56a:	f830 3b02 	ldrh.w	r3, [r0], #2
 801f56e:	f821 3b02 	strh.w	r3, [r1], #2
 801f572:	f01c 0f01 	tst.w	ip, #1
 801f576:	d001      	beq.n	801f57c <st_int8_copy+0xe4>
 801f578:	7803      	ldrb	r3, [r0, #0]
 801f57a:	700b      	strb	r3, [r1, #0]
 801f57c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f580:	ea5f 199c 	movs.w	r9, ip, lsr #6
 801f584:	d00e      	beq.n	801f5a4 <st_int8_copy+0x10c>
 801f586:	4688      	mov	r8, r1
 801f588:	4686      	mov	lr, r0
 801f58a:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 801f58e:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 801f592:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 801f596:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 801f59a:	f1b9 0901 	subs.w	r9, r9, #1
 801f59e:	4641      	mov	r1, r8
 801f5a0:	4670      	mov	r0, lr
 801f5a2:	d1f0      	bne.n	801f586 <st_int8_copy+0xee>
 801f5a4:	f01c 0f20 	tst.w	ip, #32
 801f5a8:	d007      	beq.n	801f5ba <st_int8_copy+0x122>
 801f5aa:	4688      	mov	r8, r1
 801f5ac:	4686      	mov	lr, r0
 801f5ae:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 801f5b2:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 801f5b6:	4641      	mov	r1, r8
 801f5b8:	4670      	mov	r0, lr
 801f5ba:	f01c 0f10 	tst.w	ip, #16
 801f5be:	d001      	beq.n	801f5c4 <st_int8_copy+0x12c>
 801f5c0:	c878      	ldmia	r0!, {r3, r4, r5, r6}
 801f5c2:	c178      	stmia	r1!, {r3, r4, r5, r6}
 801f5c4:	f01c 0f08 	tst.w	ip, #8
 801f5c8:	d0c5      	beq.n	801f556 <st_int8_copy+0xbe>
 801f5ca:	c818      	ldmia	r0!, {r3, r4}
 801f5cc:	c118      	stmia	r1!, {r3, r4}
 801f5ce:	e7c2      	b.n	801f556 <st_int8_copy+0xbe>
 801f5d0:	4770      	bx	lr
 801f5d2:	bf00      	nop

0801f5d4 <ai_array_to_buffer_fmt>:
 801f5d4:	f3c0 4343 	ubfx	r3, r0, #17, #4
 801f5d8:	2b02      	cmp	r3, #2
 801f5da:	d055      	beq.n	801f688 <ai_array_to_buffer_fmt+0xb4>
 801f5dc:	4a2d      	ldr	r2, [pc, #180]	@ (801f694 <ai_array_to_buffer_fmt+0xc0>)
 801f5de:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 801f5e2:	4293      	cmp	r3, r2
 801f5e4:	d010      	beq.n	801f608 <ai_array_to_buffer_fmt+0x34>
 801f5e6:	dc21      	bgt.n	801f62c <ai_array_to_buffer_fmt+0x58>
 801f5e8:	4a2b      	ldr	r2, [pc, #172]	@ (801f698 <ai_array_to_buffer_fmt+0xc4>)
 801f5ea:	4293      	cmp	r3, r2
 801f5ec:	d00c      	beq.n	801f608 <ai_array_to_buffer_fmt+0x34>
 801f5ee:	dd0f      	ble.n	801f610 <ai_array_to_buffer_fmt+0x3c>
 801f5f0:	4a2a      	ldr	r2, [pc, #168]	@ (801f69c <ai_array_to_buffer_fmt+0xc8>)
 801f5f2:	4293      	cmp	r3, r2
 801f5f4:	d008      	beq.n	801f608 <ai_array_to_buffer_fmt+0x34>
 801f5f6:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 801f5fa:	4293      	cmp	r3, r2
 801f5fc:	d004      	beq.n	801f608 <ai_array_to_buffer_fmt+0x34>
 801f5fe:	4a28      	ldr	r2, [pc, #160]	@ (801f6a0 <ai_array_to_buffer_fmt+0xcc>)
 801f600:	4293      	cmp	r3, r2
 801f602:	bf0c      	ite	eq
 801f604:	4613      	moveq	r3, r2
 801f606:	2340      	movne	r3, #64	@ 0x40
 801f608:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 801f60c:	4318      	orrs	r0, r3
 801f60e:	4770      	bx	lr
 801f610:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 801f614:	4293      	cmp	r3, r2
 801f616:	d0f7      	beq.n	801f608 <ai_array_to_buffer_fmt+0x34>
 801f618:	dd2c      	ble.n	801f674 <ai_array_to_buffer_fmt+0xa0>
 801f61a:	4a22      	ldr	r2, [pc, #136]	@ (801f6a4 <ai_array_to_buffer_fmt+0xd0>)
 801f61c:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 801f620:	4293      	cmp	r3, r2
 801f622:	bf0c      	ite	eq
 801f624:	4613      	moveq	r3, r2
 801f626:	2340      	movne	r3, #64	@ 0x40
 801f628:	4318      	orrs	r0, r3
 801f62a:	4770      	bx	lr
 801f62c:	4a1e      	ldr	r2, [pc, #120]	@ (801f6a8 <ai_array_to_buffer_fmt+0xd4>)
 801f62e:	4293      	cmp	r3, r2
 801f630:	d0ea      	beq.n	801f608 <ai_array_to_buffer_fmt+0x34>
 801f632:	dd10      	ble.n	801f656 <ai_array_to_buffer_fmt+0x82>
 801f634:	4a1d      	ldr	r2, [pc, #116]	@ (801f6ac <ai_array_to_buffer_fmt+0xd8>)
 801f636:	4293      	cmp	r3, r2
 801f638:	d0e6      	beq.n	801f608 <ai_array_to_buffer_fmt+0x34>
 801f63a:	f202 72f1 	addw	r2, r2, #2033	@ 0x7f1
 801f63e:	4293      	cmp	r3, r2
 801f640:	d0e2      	beq.n	801f608 <ai_array_to_buffer_fmt+0x34>
 801f642:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
 801f646:	4293      	cmp	r3, r2
 801f648:	bf0c      	ite	eq
 801f64a:	4613      	moveq	r3, r2
 801f64c:	2340      	movne	r3, #64	@ 0x40
 801f64e:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 801f652:	4318      	orrs	r0, r3
 801f654:	4770      	bx	lr
 801f656:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 801f65a:	4293      	cmp	r3, r2
 801f65c:	d0d4      	beq.n	801f608 <ai_array_to_buffer_fmt+0x34>
 801f65e:	f502 7260 	add.w	r2, r2, #896	@ 0x380
 801f662:	4293      	cmp	r3, r2
 801f664:	d0d0      	beq.n	801f608 <ai_array_to_buffer_fmt+0x34>
 801f666:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 801f66a:	4293      	cmp	r3, r2
 801f66c:	bf0c      	ite	eq
 801f66e:	4613      	moveq	r3, r2
 801f670:	2340      	movne	r3, #64	@ 0x40
 801f672:	e7c9      	b.n	801f608 <ai_array_to_buffer_fmt+0x34>
 801f674:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 801f678:	4293      	cmp	r3, r2
 801f67a:	d0c5      	beq.n	801f608 <ai_array_to_buffer_fmt+0x34>
 801f67c:	3280      	adds	r2, #128	@ 0x80
 801f67e:	4293      	cmp	r3, r2
 801f680:	bf0c      	ite	eq
 801f682:	4613      	moveq	r3, r2
 801f684:	2340      	movne	r3, #64	@ 0x40
 801f686:	e7bf      	b.n	801f608 <ai_array_to_buffer_fmt+0x34>
 801f688:	4b09      	ldr	r3, [pc, #36]	@ (801f6b0 <ai_array_to_buffer_fmt+0xdc>)
 801f68a:	4003      	ands	r3, r0
 801f68c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801f690:	e7ba      	b.n	801f608 <ai_array_to_buffer_fmt+0x34>
 801f692:	bf00      	nop
 801f694:	00821040 	.word	0x00821040
 801f698:	00040840 	.word	0x00040840
 801f69c:	00041040 	.word	0x00041040
 801f6a0:	0004084f 	.word	0x0004084f
 801f6a4:	00040447 	.word	0x00040447
 801f6a8:	00840447 	.word	0x00840447
 801f6ac:	0084084f 	.word	0x0084084f
 801f6b0:	00803fff 	.word	0x00803fff

0801f6b4 <ai_array_get_data_byte_size>:
 801f6b4:	b169      	cbz	r1, 801f6d2 <ai_array_get_data_byte_size+0x1e>
 801f6b6:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 801f6ba:	fb01 f303 	mul.w	r3, r1, r3
 801f6be:	3307      	adds	r3, #7
 801f6c0:	f023 0307 	bic.w	r3, r3, #7
 801f6c4:	f3c0 5041 	ubfx	r0, r0, #21, #2
 801f6c8:	fa23 f000 	lsr.w	r0, r3, r0
 801f6cc:	3007      	adds	r0, #7
 801f6ce:	08c0      	lsrs	r0, r0, #3
 801f6d0:	4770      	bx	lr
 801f6d2:	4608      	mov	r0, r1
 801f6d4:	4770      	bx	lr
 801f6d6:	bf00      	nop

0801f6d8 <ai_version_get>:
 801f6d8:	0212      	lsls	r2, r2, #8
 801f6da:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801f6de:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 801f6e2:	4770      	bx	lr

0801f6e4 <get_tensor_byte_size>:
 801f6e4:	b410      	push	{r4}
 801f6e6:	6983      	ldr	r3, [r0, #24]
 801f6e8:	68c4      	ldr	r4, [r0, #12]
 801f6ea:	6941      	ldr	r1, [r0, #20]
 801f6ec:	681b      	ldr	r3, [r3, #0]
 801f6ee:	68e0      	ldr	r0, [r4, #12]
 801f6f0:	4a06      	ldr	r2, [pc, #24]	@ (801f70c <get_tensor_byte_size+0x28>)
 801f6f2:	68c9      	ldr	r1, [r1, #12]
 801f6f4:	bc10      	pop	{r4}
 801f6f6:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 801f6fa:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 801f6fe:	fb01 f000 	mul.w	r0, r1, r0
 801f702:	4293      	cmp	r3, r2
 801f704:	bf04      	itt	eq
 801f706:	3007      	addeq	r0, #7
 801f708:	08c0      	lsreq	r0, r0, #3
 801f70a:	4770      	bx	lr
 801f70c:	000400c0 	.word	0x000400c0

0801f710 <sbrk_aligned>:
 801f710:	b570      	push	{r4, r5, r6, lr}
 801f712:	4e0f      	ldr	r6, [pc, #60]	@ (801f750 <sbrk_aligned+0x40>)
 801f714:	460c      	mov	r4, r1
 801f716:	6831      	ldr	r1, [r6, #0]
 801f718:	4605      	mov	r5, r0
 801f71a:	b911      	cbnz	r1, 801f722 <sbrk_aligned+0x12>
 801f71c:	f000 faec 	bl	801fcf8 <_sbrk_r>
 801f720:	6030      	str	r0, [r6, #0]
 801f722:	4621      	mov	r1, r4
 801f724:	4628      	mov	r0, r5
 801f726:	f000 fae7 	bl	801fcf8 <_sbrk_r>
 801f72a:	1c43      	adds	r3, r0, #1
 801f72c:	d103      	bne.n	801f736 <sbrk_aligned+0x26>
 801f72e:	f04f 34ff 	mov.w	r4, #4294967295
 801f732:	4620      	mov	r0, r4
 801f734:	bd70      	pop	{r4, r5, r6, pc}
 801f736:	1cc4      	adds	r4, r0, #3
 801f738:	f024 0403 	bic.w	r4, r4, #3
 801f73c:	42a0      	cmp	r0, r4
 801f73e:	d0f8      	beq.n	801f732 <sbrk_aligned+0x22>
 801f740:	1a21      	subs	r1, r4, r0
 801f742:	4628      	mov	r0, r5
 801f744:	f000 fad8 	bl	801fcf8 <_sbrk_r>
 801f748:	3001      	adds	r0, #1
 801f74a:	d1f2      	bne.n	801f732 <sbrk_aligned+0x22>
 801f74c:	e7ef      	b.n	801f72e <sbrk_aligned+0x1e>
 801f74e:	bf00      	nop
 801f750:	20001ce4 	.word	0x20001ce4

0801f754 <_malloc_r>:
 801f754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f758:	1ccd      	adds	r5, r1, #3
 801f75a:	f025 0503 	bic.w	r5, r5, #3
 801f75e:	3508      	adds	r5, #8
 801f760:	2d0c      	cmp	r5, #12
 801f762:	bf38      	it	cc
 801f764:	250c      	movcc	r5, #12
 801f766:	2d00      	cmp	r5, #0
 801f768:	4606      	mov	r6, r0
 801f76a:	db01      	blt.n	801f770 <_malloc_r+0x1c>
 801f76c:	42a9      	cmp	r1, r5
 801f76e:	d904      	bls.n	801f77a <_malloc_r+0x26>
 801f770:	230c      	movs	r3, #12
 801f772:	6033      	str	r3, [r6, #0]
 801f774:	2000      	movs	r0, #0
 801f776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f77a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801f850 <_malloc_r+0xfc>
 801f77e:	f000 f869 	bl	801f854 <__malloc_lock>
 801f782:	f8d8 3000 	ldr.w	r3, [r8]
 801f786:	461c      	mov	r4, r3
 801f788:	bb44      	cbnz	r4, 801f7dc <_malloc_r+0x88>
 801f78a:	4629      	mov	r1, r5
 801f78c:	4630      	mov	r0, r6
 801f78e:	f7ff ffbf 	bl	801f710 <sbrk_aligned>
 801f792:	1c43      	adds	r3, r0, #1
 801f794:	4604      	mov	r4, r0
 801f796:	d158      	bne.n	801f84a <_malloc_r+0xf6>
 801f798:	f8d8 4000 	ldr.w	r4, [r8]
 801f79c:	4627      	mov	r7, r4
 801f79e:	2f00      	cmp	r7, #0
 801f7a0:	d143      	bne.n	801f82a <_malloc_r+0xd6>
 801f7a2:	2c00      	cmp	r4, #0
 801f7a4:	d04b      	beq.n	801f83e <_malloc_r+0xea>
 801f7a6:	6823      	ldr	r3, [r4, #0]
 801f7a8:	4639      	mov	r1, r7
 801f7aa:	4630      	mov	r0, r6
 801f7ac:	eb04 0903 	add.w	r9, r4, r3
 801f7b0:	f000 faa2 	bl	801fcf8 <_sbrk_r>
 801f7b4:	4581      	cmp	r9, r0
 801f7b6:	d142      	bne.n	801f83e <_malloc_r+0xea>
 801f7b8:	6821      	ldr	r1, [r4, #0]
 801f7ba:	1a6d      	subs	r5, r5, r1
 801f7bc:	4629      	mov	r1, r5
 801f7be:	4630      	mov	r0, r6
 801f7c0:	f7ff ffa6 	bl	801f710 <sbrk_aligned>
 801f7c4:	3001      	adds	r0, #1
 801f7c6:	d03a      	beq.n	801f83e <_malloc_r+0xea>
 801f7c8:	6823      	ldr	r3, [r4, #0]
 801f7ca:	442b      	add	r3, r5
 801f7cc:	6023      	str	r3, [r4, #0]
 801f7ce:	f8d8 3000 	ldr.w	r3, [r8]
 801f7d2:	685a      	ldr	r2, [r3, #4]
 801f7d4:	bb62      	cbnz	r2, 801f830 <_malloc_r+0xdc>
 801f7d6:	f8c8 7000 	str.w	r7, [r8]
 801f7da:	e00f      	b.n	801f7fc <_malloc_r+0xa8>
 801f7dc:	6822      	ldr	r2, [r4, #0]
 801f7de:	1b52      	subs	r2, r2, r5
 801f7e0:	d420      	bmi.n	801f824 <_malloc_r+0xd0>
 801f7e2:	2a0b      	cmp	r2, #11
 801f7e4:	d917      	bls.n	801f816 <_malloc_r+0xc2>
 801f7e6:	1961      	adds	r1, r4, r5
 801f7e8:	42a3      	cmp	r3, r4
 801f7ea:	6025      	str	r5, [r4, #0]
 801f7ec:	bf18      	it	ne
 801f7ee:	6059      	strne	r1, [r3, #4]
 801f7f0:	6863      	ldr	r3, [r4, #4]
 801f7f2:	bf08      	it	eq
 801f7f4:	f8c8 1000 	streq.w	r1, [r8]
 801f7f8:	5162      	str	r2, [r4, r5]
 801f7fa:	604b      	str	r3, [r1, #4]
 801f7fc:	4630      	mov	r0, r6
 801f7fe:	f000 f82f 	bl	801f860 <__malloc_unlock>
 801f802:	f104 000b 	add.w	r0, r4, #11
 801f806:	1d23      	adds	r3, r4, #4
 801f808:	f020 0007 	bic.w	r0, r0, #7
 801f80c:	1ac2      	subs	r2, r0, r3
 801f80e:	bf1c      	itt	ne
 801f810:	1a1b      	subne	r3, r3, r0
 801f812:	50a3      	strne	r3, [r4, r2]
 801f814:	e7af      	b.n	801f776 <_malloc_r+0x22>
 801f816:	6862      	ldr	r2, [r4, #4]
 801f818:	42a3      	cmp	r3, r4
 801f81a:	bf0c      	ite	eq
 801f81c:	f8c8 2000 	streq.w	r2, [r8]
 801f820:	605a      	strne	r2, [r3, #4]
 801f822:	e7eb      	b.n	801f7fc <_malloc_r+0xa8>
 801f824:	4623      	mov	r3, r4
 801f826:	6864      	ldr	r4, [r4, #4]
 801f828:	e7ae      	b.n	801f788 <_malloc_r+0x34>
 801f82a:	463c      	mov	r4, r7
 801f82c:	687f      	ldr	r7, [r7, #4]
 801f82e:	e7b6      	b.n	801f79e <_malloc_r+0x4a>
 801f830:	461a      	mov	r2, r3
 801f832:	685b      	ldr	r3, [r3, #4]
 801f834:	42a3      	cmp	r3, r4
 801f836:	d1fb      	bne.n	801f830 <_malloc_r+0xdc>
 801f838:	2300      	movs	r3, #0
 801f83a:	6053      	str	r3, [r2, #4]
 801f83c:	e7de      	b.n	801f7fc <_malloc_r+0xa8>
 801f83e:	230c      	movs	r3, #12
 801f840:	6033      	str	r3, [r6, #0]
 801f842:	4630      	mov	r0, r6
 801f844:	f000 f80c 	bl	801f860 <__malloc_unlock>
 801f848:	e794      	b.n	801f774 <_malloc_r+0x20>
 801f84a:	6005      	str	r5, [r0, #0]
 801f84c:	e7d6      	b.n	801f7fc <_malloc_r+0xa8>
 801f84e:	bf00      	nop
 801f850:	20001ce8 	.word	0x20001ce8

0801f854 <__malloc_lock>:
 801f854:	4801      	ldr	r0, [pc, #4]	@ (801f85c <__malloc_lock+0x8>)
 801f856:	f000 ba9c 	b.w	801fd92 <__retarget_lock_acquire_recursive>
 801f85a:	bf00      	nop
 801f85c:	20001e2c 	.word	0x20001e2c

0801f860 <__malloc_unlock>:
 801f860:	4801      	ldr	r0, [pc, #4]	@ (801f868 <__malloc_unlock+0x8>)
 801f862:	f000 ba97 	b.w	801fd94 <__retarget_lock_release_recursive>
 801f866:	bf00      	nop
 801f868:	20001e2c 	.word	0x20001e2c

0801f86c <std>:
 801f86c:	2300      	movs	r3, #0
 801f86e:	b510      	push	{r4, lr}
 801f870:	4604      	mov	r4, r0
 801f872:	e9c0 3300 	strd	r3, r3, [r0]
 801f876:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801f87a:	6083      	str	r3, [r0, #8]
 801f87c:	8181      	strh	r1, [r0, #12]
 801f87e:	6643      	str	r3, [r0, #100]	@ 0x64
 801f880:	81c2      	strh	r2, [r0, #14]
 801f882:	6183      	str	r3, [r0, #24]
 801f884:	4619      	mov	r1, r3
 801f886:	2208      	movs	r2, #8
 801f888:	305c      	adds	r0, #92	@ 0x5c
 801f88a:	f000 f9f9 	bl	801fc80 <memset>
 801f88e:	4b0d      	ldr	r3, [pc, #52]	@ (801f8c4 <std+0x58>)
 801f890:	6263      	str	r3, [r4, #36]	@ 0x24
 801f892:	4b0d      	ldr	r3, [pc, #52]	@ (801f8c8 <std+0x5c>)
 801f894:	62a3      	str	r3, [r4, #40]	@ 0x28
 801f896:	4b0d      	ldr	r3, [pc, #52]	@ (801f8cc <std+0x60>)
 801f898:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801f89a:	4b0d      	ldr	r3, [pc, #52]	@ (801f8d0 <std+0x64>)
 801f89c:	6323      	str	r3, [r4, #48]	@ 0x30
 801f89e:	4b0d      	ldr	r3, [pc, #52]	@ (801f8d4 <std+0x68>)
 801f8a0:	6224      	str	r4, [r4, #32]
 801f8a2:	429c      	cmp	r4, r3
 801f8a4:	d006      	beq.n	801f8b4 <std+0x48>
 801f8a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801f8aa:	4294      	cmp	r4, r2
 801f8ac:	d002      	beq.n	801f8b4 <std+0x48>
 801f8ae:	33d0      	adds	r3, #208	@ 0xd0
 801f8b0:	429c      	cmp	r4, r3
 801f8b2:	d105      	bne.n	801f8c0 <std+0x54>
 801f8b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801f8b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f8bc:	f000 ba68 	b.w	801fd90 <__retarget_lock_init_recursive>
 801f8c0:	bd10      	pop	{r4, pc}
 801f8c2:	bf00      	nop
 801f8c4:	0801fad1 	.word	0x0801fad1
 801f8c8:	0801faf3 	.word	0x0801faf3
 801f8cc:	0801fb2b 	.word	0x0801fb2b
 801f8d0:	0801fb4f 	.word	0x0801fb4f
 801f8d4:	20001cec 	.word	0x20001cec

0801f8d8 <stdio_exit_handler>:
 801f8d8:	4a02      	ldr	r2, [pc, #8]	@ (801f8e4 <stdio_exit_handler+0xc>)
 801f8da:	4903      	ldr	r1, [pc, #12]	@ (801f8e8 <stdio_exit_handler+0x10>)
 801f8dc:	4803      	ldr	r0, [pc, #12]	@ (801f8ec <stdio_exit_handler+0x14>)
 801f8de:	f000 b869 	b.w	801f9b4 <_fwalk_sglue>
 801f8e2:	bf00      	nop
 801f8e4:	2000063c 	.word	0x2000063c
 801f8e8:	080204c5 	.word	0x080204c5
 801f8ec:	2000064c 	.word	0x2000064c

0801f8f0 <cleanup_stdio>:
 801f8f0:	6841      	ldr	r1, [r0, #4]
 801f8f2:	4b0c      	ldr	r3, [pc, #48]	@ (801f924 <cleanup_stdio+0x34>)
 801f8f4:	4299      	cmp	r1, r3
 801f8f6:	b510      	push	{r4, lr}
 801f8f8:	4604      	mov	r4, r0
 801f8fa:	d001      	beq.n	801f900 <cleanup_stdio+0x10>
 801f8fc:	f000 fde2 	bl	80204c4 <_fflush_r>
 801f900:	68a1      	ldr	r1, [r4, #8]
 801f902:	4b09      	ldr	r3, [pc, #36]	@ (801f928 <cleanup_stdio+0x38>)
 801f904:	4299      	cmp	r1, r3
 801f906:	d002      	beq.n	801f90e <cleanup_stdio+0x1e>
 801f908:	4620      	mov	r0, r4
 801f90a:	f000 fddb 	bl	80204c4 <_fflush_r>
 801f90e:	68e1      	ldr	r1, [r4, #12]
 801f910:	4b06      	ldr	r3, [pc, #24]	@ (801f92c <cleanup_stdio+0x3c>)
 801f912:	4299      	cmp	r1, r3
 801f914:	d004      	beq.n	801f920 <cleanup_stdio+0x30>
 801f916:	4620      	mov	r0, r4
 801f918:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f91c:	f000 bdd2 	b.w	80204c4 <_fflush_r>
 801f920:	bd10      	pop	{r4, pc}
 801f922:	bf00      	nop
 801f924:	20001cec 	.word	0x20001cec
 801f928:	20001d54 	.word	0x20001d54
 801f92c:	20001dbc 	.word	0x20001dbc

0801f930 <global_stdio_init.part.0>:
 801f930:	b510      	push	{r4, lr}
 801f932:	4b0b      	ldr	r3, [pc, #44]	@ (801f960 <global_stdio_init.part.0+0x30>)
 801f934:	4c0b      	ldr	r4, [pc, #44]	@ (801f964 <global_stdio_init.part.0+0x34>)
 801f936:	4a0c      	ldr	r2, [pc, #48]	@ (801f968 <global_stdio_init.part.0+0x38>)
 801f938:	601a      	str	r2, [r3, #0]
 801f93a:	4620      	mov	r0, r4
 801f93c:	2200      	movs	r2, #0
 801f93e:	2104      	movs	r1, #4
 801f940:	f7ff ff94 	bl	801f86c <std>
 801f944:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801f948:	2201      	movs	r2, #1
 801f94a:	2109      	movs	r1, #9
 801f94c:	f7ff ff8e 	bl	801f86c <std>
 801f950:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801f954:	2202      	movs	r2, #2
 801f956:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f95a:	2112      	movs	r1, #18
 801f95c:	f7ff bf86 	b.w	801f86c <std>
 801f960:	20001e24 	.word	0x20001e24
 801f964:	20001cec 	.word	0x20001cec
 801f968:	0801f8d9 	.word	0x0801f8d9

0801f96c <__sfp_lock_acquire>:
 801f96c:	4801      	ldr	r0, [pc, #4]	@ (801f974 <__sfp_lock_acquire+0x8>)
 801f96e:	f000 ba10 	b.w	801fd92 <__retarget_lock_acquire_recursive>
 801f972:	bf00      	nop
 801f974:	20001e2d 	.word	0x20001e2d

0801f978 <__sfp_lock_release>:
 801f978:	4801      	ldr	r0, [pc, #4]	@ (801f980 <__sfp_lock_release+0x8>)
 801f97a:	f000 ba0b 	b.w	801fd94 <__retarget_lock_release_recursive>
 801f97e:	bf00      	nop
 801f980:	20001e2d 	.word	0x20001e2d

0801f984 <__sinit>:
 801f984:	b510      	push	{r4, lr}
 801f986:	4604      	mov	r4, r0
 801f988:	f7ff fff0 	bl	801f96c <__sfp_lock_acquire>
 801f98c:	6a23      	ldr	r3, [r4, #32]
 801f98e:	b11b      	cbz	r3, 801f998 <__sinit+0x14>
 801f990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f994:	f7ff bff0 	b.w	801f978 <__sfp_lock_release>
 801f998:	4b04      	ldr	r3, [pc, #16]	@ (801f9ac <__sinit+0x28>)
 801f99a:	6223      	str	r3, [r4, #32]
 801f99c:	4b04      	ldr	r3, [pc, #16]	@ (801f9b0 <__sinit+0x2c>)
 801f99e:	681b      	ldr	r3, [r3, #0]
 801f9a0:	2b00      	cmp	r3, #0
 801f9a2:	d1f5      	bne.n	801f990 <__sinit+0xc>
 801f9a4:	f7ff ffc4 	bl	801f930 <global_stdio_init.part.0>
 801f9a8:	e7f2      	b.n	801f990 <__sinit+0xc>
 801f9aa:	bf00      	nop
 801f9ac:	0801f8f1 	.word	0x0801f8f1
 801f9b0:	20001e24 	.word	0x20001e24

0801f9b4 <_fwalk_sglue>:
 801f9b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f9b8:	4607      	mov	r7, r0
 801f9ba:	4688      	mov	r8, r1
 801f9bc:	4614      	mov	r4, r2
 801f9be:	2600      	movs	r6, #0
 801f9c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801f9c4:	f1b9 0901 	subs.w	r9, r9, #1
 801f9c8:	d505      	bpl.n	801f9d6 <_fwalk_sglue+0x22>
 801f9ca:	6824      	ldr	r4, [r4, #0]
 801f9cc:	2c00      	cmp	r4, #0
 801f9ce:	d1f7      	bne.n	801f9c0 <_fwalk_sglue+0xc>
 801f9d0:	4630      	mov	r0, r6
 801f9d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f9d6:	89ab      	ldrh	r3, [r5, #12]
 801f9d8:	2b01      	cmp	r3, #1
 801f9da:	d907      	bls.n	801f9ec <_fwalk_sglue+0x38>
 801f9dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801f9e0:	3301      	adds	r3, #1
 801f9e2:	d003      	beq.n	801f9ec <_fwalk_sglue+0x38>
 801f9e4:	4629      	mov	r1, r5
 801f9e6:	4638      	mov	r0, r7
 801f9e8:	47c0      	blx	r8
 801f9ea:	4306      	orrs	r6, r0
 801f9ec:	3568      	adds	r5, #104	@ 0x68
 801f9ee:	e7e9      	b.n	801f9c4 <_fwalk_sglue+0x10>

0801f9f0 <iprintf>:
 801f9f0:	b40f      	push	{r0, r1, r2, r3}
 801f9f2:	b507      	push	{r0, r1, r2, lr}
 801f9f4:	4906      	ldr	r1, [pc, #24]	@ (801fa10 <iprintf+0x20>)
 801f9f6:	ab04      	add	r3, sp, #16
 801f9f8:	6808      	ldr	r0, [r1, #0]
 801f9fa:	f853 2b04 	ldr.w	r2, [r3], #4
 801f9fe:	6881      	ldr	r1, [r0, #8]
 801fa00:	9301      	str	r3, [sp, #4]
 801fa02:	f000 fa3b 	bl	801fe7c <_vfiprintf_r>
 801fa06:	b003      	add	sp, #12
 801fa08:	f85d eb04 	ldr.w	lr, [sp], #4
 801fa0c:	b004      	add	sp, #16
 801fa0e:	4770      	bx	lr
 801fa10:	20000648 	.word	0x20000648

0801fa14 <_puts_r>:
 801fa14:	6a03      	ldr	r3, [r0, #32]
 801fa16:	b570      	push	{r4, r5, r6, lr}
 801fa18:	6884      	ldr	r4, [r0, #8]
 801fa1a:	4605      	mov	r5, r0
 801fa1c:	460e      	mov	r6, r1
 801fa1e:	b90b      	cbnz	r3, 801fa24 <_puts_r+0x10>
 801fa20:	f7ff ffb0 	bl	801f984 <__sinit>
 801fa24:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801fa26:	07db      	lsls	r3, r3, #31
 801fa28:	d405      	bmi.n	801fa36 <_puts_r+0x22>
 801fa2a:	89a3      	ldrh	r3, [r4, #12]
 801fa2c:	0598      	lsls	r0, r3, #22
 801fa2e:	d402      	bmi.n	801fa36 <_puts_r+0x22>
 801fa30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801fa32:	f000 f9ae 	bl	801fd92 <__retarget_lock_acquire_recursive>
 801fa36:	89a3      	ldrh	r3, [r4, #12]
 801fa38:	0719      	lsls	r1, r3, #28
 801fa3a:	d502      	bpl.n	801fa42 <_puts_r+0x2e>
 801fa3c:	6923      	ldr	r3, [r4, #16]
 801fa3e:	2b00      	cmp	r3, #0
 801fa40:	d135      	bne.n	801faae <_puts_r+0x9a>
 801fa42:	4621      	mov	r1, r4
 801fa44:	4628      	mov	r0, r5
 801fa46:	f000 f8c5 	bl	801fbd4 <__swsetup_r>
 801fa4a:	b380      	cbz	r0, 801faae <_puts_r+0x9a>
 801fa4c:	f04f 35ff 	mov.w	r5, #4294967295
 801fa50:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801fa52:	07da      	lsls	r2, r3, #31
 801fa54:	d405      	bmi.n	801fa62 <_puts_r+0x4e>
 801fa56:	89a3      	ldrh	r3, [r4, #12]
 801fa58:	059b      	lsls	r3, r3, #22
 801fa5a:	d402      	bmi.n	801fa62 <_puts_r+0x4e>
 801fa5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801fa5e:	f000 f999 	bl	801fd94 <__retarget_lock_release_recursive>
 801fa62:	4628      	mov	r0, r5
 801fa64:	bd70      	pop	{r4, r5, r6, pc}
 801fa66:	2b00      	cmp	r3, #0
 801fa68:	da04      	bge.n	801fa74 <_puts_r+0x60>
 801fa6a:	69a2      	ldr	r2, [r4, #24]
 801fa6c:	429a      	cmp	r2, r3
 801fa6e:	dc17      	bgt.n	801faa0 <_puts_r+0x8c>
 801fa70:	290a      	cmp	r1, #10
 801fa72:	d015      	beq.n	801faa0 <_puts_r+0x8c>
 801fa74:	6823      	ldr	r3, [r4, #0]
 801fa76:	1c5a      	adds	r2, r3, #1
 801fa78:	6022      	str	r2, [r4, #0]
 801fa7a:	7019      	strb	r1, [r3, #0]
 801fa7c:	68a3      	ldr	r3, [r4, #8]
 801fa7e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801fa82:	3b01      	subs	r3, #1
 801fa84:	60a3      	str	r3, [r4, #8]
 801fa86:	2900      	cmp	r1, #0
 801fa88:	d1ed      	bne.n	801fa66 <_puts_r+0x52>
 801fa8a:	2b00      	cmp	r3, #0
 801fa8c:	da11      	bge.n	801fab2 <_puts_r+0x9e>
 801fa8e:	4622      	mov	r2, r4
 801fa90:	210a      	movs	r1, #10
 801fa92:	4628      	mov	r0, r5
 801fa94:	f000 f85f 	bl	801fb56 <__swbuf_r>
 801fa98:	3001      	adds	r0, #1
 801fa9a:	d0d7      	beq.n	801fa4c <_puts_r+0x38>
 801fa9c:	250a      	movs	r5, #10
 801fa9e:	e7d7      	b.n	801fa50 <_puts_r+0x3c>
 801faa0:	4622      	mov	r2, r4
 801faa2:	4628      	mov	r0, r5
 801faa4:	f000 f857 	bl	801fb56 <__swbuf_r>
 801faa8:	3001      	adds	r0, #1
 801faaa:	d1e7      	bne.n	801fa7c <_puts_r+0x68>
 801faac:	e7ce      	b.n	801fa4c <_puts_r+0x38>
 801faae:	3e01      	subs	r6, #1
 801fab0:	e7e4      	b.n	801fa7c <_puts_r+0x68>
 801fab2:	6823      	ldr	r3, [r4, #0]
 801fab4:	1c5a      	adds	r2, r3, #1
 801fab6:	6022      	str	r2, [r4, #0]
 801fab8:	220a      	movs	r2, #10
 801faba:	701a      	strb	r2, [r3, #0]
 801fabc:	e7ee      	b.n	801fa9c <_puts_r+0x88>
	...

0801fac0 <puts>:
 801fac0:	4b02      	ldr	r3, [pc, #8]	@ (801facc <puts+0xc>)
 801fac2:	4601      	mov	r1, r0
 801fac4:	6818      	ldr	r0, [r3, #0]
 801fac6:	f7ff bfa5 	b.w	801fa14 <_puts_r>
 801faca:	bf00      	nop
 801facc:	20000648 	.word	0x20000648

0801fad0 <__sread>:
 801fad0:	b510      	push	{r4, lr}
 801fad2:	460c      	mov	r4, r1
 801fad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fad8:	f000 f8fc 	bl	801fcd4 <_read_r>
 801fadc:	2800      	cmp	r0, #0
 801fade:	bfab      	itete	ge
 801fae0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801fae2:	89a3      	ldrhlt	r3, [r4, #12]
 801fae4:	181b      	addge	r3, r3, r0
 801fae6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801faea:	bfac      	ite	ge
 801faec:	6563      	strge	r3, [r4, #84]	@ 0x54
 801faee:	81a3      	strhlt	r3, [r4, #12]
 801faf0:	bd10      	pop	{r4, pc}

0801faf2 <__swrite>:
 801faf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801faf6:	461f      	mov	r7, r3
 801faf8:	898b      	ldrh	r3, [r1, #12]
 801fafa:	05db      	lsls	r3, r3, #23
 801fafc:	4605      	mov	r5, r0
 801fafe:	460c      	mov	r4, r1
 801fb00:	4616      	mov	r6, r2
 801fb02:	d505      	bpl.n	801fb10 <__swrite+0x1e>
 801fb04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fb08:	2302      	movs	r3, #2
 801fb0a:	2200      	movs	r2, #0
 801fb0c:	f000 f8d0 	bl	801fcb0 <_lseek_r>
 801fb10:	89a3      	ldrh	r3, [r4, #12]
 801fb12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801fb16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801fb1a:	81a3      	strh	r3, [r4, #12]
 801fb1c:	4632      	mov	r2, r6
 801fb1e:	463b      	mov	r3, r7
 801fb20:	4628      	mov	r0, r5
 801fb22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801fb26:	f000 b8f7 	b.w	801fd18 <_write_r>

0801fb2a <__sseek>:
 801fb2a:	b510      	push	{r4, lr}
 801fb2c:	460c      	mov	r4, r1
 801fb2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fb32:	f000 f8bd 	bl	801fcb0 <_lseek_r>
 801fb36:	1c43      	adds	r3, r0, #1
 801fb38:	89a3      	ldrh	r3, [r4, #12]
 801fb3a:	bf15      	itete	ne
 801fb3c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801fb3e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801fb42:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801fb46:	81a3      	strheq	r3, [r4, #12]
 801fb48:	bf18      	it	ne
 801fb4a:	81a3      	strhne	r3, [r4, #12]
 801fb4c:	bd10      	pop	{r4, pc}

0801fb4e <__sclose>:
 801fb4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801fb52:	f000 b89d 	b.w	801fc90 <_close_r>

0801fb56 <__swbuf_r>:
 801fb56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fb58:	460e      	mov	r6, r1
 801fb5a:	4614      	mov	r4, r2
 801fb5c:	4605      	mov	r5, r0
 801fb5e:	b118      	cbz	r0, 801fb68 <__swbuf_r+0x12>
 801fb60:	6a03      	ldr	r3, [r0, #32]
 801fb62:	b90b      	cbnz	r3, 801fb68 <__swbuf_r+0x12>
 801fb64:	f7ff ff0e 	bl	801f984 <__sinit>
 801fb68:	69a3      	ldr	r3, [r4, #24]
 801fb6a:	60a3      	str	r3, [r4, #8]
 801fb6c:	89a3      	ldrh	r3, [r4, #12]
 801fb6e:	071a      	lsls	r2, r3, #28
 801fb70:	d501      	bpl.n	801fb76 <__swbuf_r+0x20>
 801fb72:	6923      	ldr	r3, [r4, #16]
 801fb74:	b943      	cbnz	r3, 801fb88 <__swbuf_r+0x32>
 801fb76:	4621      	mov	r1, r4
 801fb78:	4628      	mov	r0, r5
 801fb7a:	f000 f82b 	bl	801fbd4 <__swsetup_r>
 801fb7e:	b118      	cbz	r0, 801fb88 <__swbuf_r+0x32>
 801fb80:	f04f 37ff 	mov.w	r7, #4294967295
 801fb84:	4638      	mov	r0, r7
 801fb86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fb88:	6823      	ldr	r3, [r4, #0]
 801fb8a:	6922      	ldr	r2, [r4, #16]
 801fb8c:	1a98      	subs	r0, r3, r2
 801fb8e:	6963      	ldr	r3, [r4, #20]
 801fb90:	b2f6      	uxtb	r6, r6
 801fb92:	4283      	cmp	r3, r0
 801fb94:	4637      	mov	r7, r6
 801fb96:	dc05      	bgt.n	801fba4 <__swbuf_r+0x4e>
 801fb98:	4621      	mov	r1, r4
 801fb9a:	4628      	mov	r0, r5
 801fb9c:	f000 fc92 	bl	80204c4 <_fflush_r>
 801fba0:	2800      	cmp	r0, #0
 801fba2:	d1ed      	bne.n	801fb80 <__swbuf_r+0x2a>
 801fba4:	68a3      	ldr	r3, [r4, #8]
 801fba6:	3b01      	subs	r3, #1
 801fba8:	60a3      	str	r3, [r4, #8]
 801fbaa:	6823      	ldr	r3, [r4, #0]
 801fbac:	1c5a      	adds	r2, r3, #1
 801fbae:	6022      	str	r2, [r4, #0]
 801fbb0:	701e      	strb	r6, [r3, #0]
 801fbb2:	6962      	ldr	r2, [r4, #20]
 801fbb4:	1c43      	adds	r3, r0, #1
 801fbb6:	429a      	cmp	r2, r3
 801fbb8:	d004      	beq.n	801fbc4 <__swbuf_r+0x6e>
 801fbba:	89a3      	ldrh	r3, [r4, #12]
 801fbbc:	07db      	lsls	r3, r3, #31
 801fbbe:	d5e1      	bpl.n	801fb84 <__swbuf_r+0x2e>
 801fbc0:	2e0a      	cmp	r6, #10
 801fbc2:	d1df      	bne.n	801fb84 <__swbuf_r+0x2e>
 801fbc4:	4621      	mov	r1, r4
 801fbc6:	4628      	mov	r0, r5
 801fbc8:	f000 fc7c 	bl	80204c4 <_fflush_r>
 801fbcc:	2800      	cmp	r0, #0
 801fbce:	d0d9      	beq.n	801fb84 <__swbuf_r+0x2e>
 801fbd0:	e7d6      	b.n	801fb80 <__swbuf_r+0x2a>
	...

0801fbd4 <__swsetup_r>:
 801fbd4:	b538      	push	{r3, r4, r5, lr}
 801fbd6:	4b29      	ldr	r3, [pc, #164]	@ (801fc7c <__swsetup_r+0xa8>)
 801fbd8:	4605      	mov	r5, r0
 801fbda:	6818      	ldr	r0, [r3, #0]
 801fbdc:	460c      	mov	r4, r1
 801fbde:	b118      	cbz	r0, 801fbe8 <__swsetup_r+0x14>
 801fbe0:	6a03      	ldr	r3, [r0, #32]
 801fbe2:	b90b      	cbnz	r3, 801fbe8 <__swsetup_r+0x14>
 801fbe4:	f7ff fece 	bl	801f984 <__sinit>
 801fbe8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fbec:	0719      	lsls	r1, r3, #28
 801fbee:	d422      	bmi.n	801fc36 <__swsetup_r+0x62>
 801fbf0:	06da      	lsls	r2, r3, #27
 801fbf2:	d407      	bmi.n	801fc04 <__swsetup_r+0x30>
 801fbf4:	2209      	movs	r2, #9
 801fbf6:	602a      	str	r2, [r5, #0]
 801fbf8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801fbfc:	81a3      	strh	r3, [r4, #12]
 801fbfe:	f04f 30ff 	mov.w	r0, #4294967295
 801fc02:	e033      	b.n	801fc6c <__swsetup_r+0x98>
 801fc04:	0758      	lsls	r0, r3, #29
 801fc06:	d512      	bpl.n	801fc2e <__swsetup_r+0x5a>
 801fc08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801fc0a:	b141      	cbz	r1, 801fc1e <__swsetup_r+0x4a>
 801fc0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801fc10:	4299      	cmp	r1, r3
 801fc12:	d002      	beq.n	801fc1a <__swsetup_r+0x46>
 801fc14:	4628      	mov	r0, r5
 801fc16:	f000 f8bf 	bl	801fd98 <_free_r>
 801fc1a:	2300      	movs	r3, #0
 801fc1c:	6363      	str	r3, [r4, #52]	@ 0x34
 801fc1e:	89a3      	ldrh	r3, [r4, #12]
 801fc20:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801fc24:	81a3      	strh	r3, [r4, #12]
 801fc26:	2300      	movs	r3, #0
 801fc28:	6063      	str	r3, [r4, #4]
 801fc2a:	6923      	ldr	r3, [r4, #16]
 801fc2c:	6023      	str	r3, [r4, #0]
 801fc2e:	89a3      	ldrh	r3, [r4, #12]
 801fc30:	f043 0308 	orr.w	r3, r3, #8
 801fc34:	81a3      	strh	r3, [r4, #12]
 801fc36:	6923      	ldr	r3, [r4, #16]
 801fc38:	b94b      	cbnz	r3, 801fc4e <__swsetup_r+0x7a>
 801fc3a:	89a3      	ldrh	r3, [r4, #12]
 801fc3c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801fc40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801fc44:	d003      	beq.n	801fc4e <__swsetup_r+0x7a>
 801fc46:	4621      	mov	r1, r4
 801fc48:	4628      	mov	r0, r5
 801fc4a:	f000 fc89 	bl	8020560 <__smakebuf_r>
 801fc4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801fc52:	f013 0201 	ands.w	r2, r3, #1
 801fc56:	d00a      	beq.n	801fc6e <__swsetup_r+0x9a>
 801fc58:	2200      	movs	r2, #0
 801fc5a:	60a2      	str	r2, [r4, #8]
 801fc5c:	6962      	ldr	r2, [r4, #20]
 801fc5e:	4252      	negs	r2, r2
 801fc60:	61a2      	str	r2, [r4, #24]
 801fc62:	6922      	ldr	r2, [r4, #16]
 801fc64:	b942      	cbnz	r2, 801fc78 <__swsetup_r+0xa4>
 801fc66:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801fc6a:	d1c5      	bne.n	801fbf8 <__swsetup_r+0x24>
 801fc6c:	bd38      	pop	{r3, r4, r5, pc}
 801fc6e:	0799      	lsls	r1, r3, #30
 801fc70:	bf58      	it	pl
 801fc72:	6962      	ldrpl	r2, [r4, #20]
 801fc74:	60a2      	str	r2, [r4, #8]
 801fc76:	e7f4      	b.n	801fc62 <__swsetup_r+0x8e>
 801fc78:	2000      	movs	r0, #0
 801fc7a:	e7f7      	b.n	801fc6c <__swsetup_r+0x98>
 801fc7c:	20000648 	.word	0x20000648

0801fc80 <memset>:
 801fc80:	4402      	add	r2, r0
 801fc82:	4603      	mov	r3, r0
 801fc84:	4293      	cmp	r3, r2
 801fc86:	d100      	bne.n	801fc8a <memset+0xa>
 801fc88:	4770      	bx	lr
 801fc8a:	f803 1b01 	strb.w	r1, [r3], #1
 801fc8e:	e7f9      	b.n	801fc84 <memset+0x4>

0801fc90 <_close_r>:
 801fc90:	b538      	push	{r3, r4, r5, lr}
 801fc92:	4d06      	ldr	r5, [pc, #24]	@ (801fcac <_close_r+0x1c>)
 801fc94:	2300      	movs	r3, #0
 801fc96:	4604      	mov	r4, r0
 801fc98:	4608      	mov	r0, r1
 801fc9a:	602b      	str	r3, [r5, #0]
 801fc9c:	f7e1 fdf7 	bl	800188e <_close>
 801fca0:	1c43      	adds	r3, r0, #1
 801fca2:	d102      	bne.n	801fcaa <_close_r+0x1a>
 801fca4:	682b      	ldr	r3, [r5, #0]
 801fca6:	b103      	cbz	r3, 801fcaa <_close_r+0x1a>
 801fca8:	6023      	str	r3, [r4, #0]
 801fcaa:	bd38      	pop	{r3, r4, r5, pc}
 801fcac:	20001e28 	.word	0x20001e28

0801fcb0 <_lseek_r>:
 801fcb0:	b538      	push	{r3, r4, r5, lr}
 801fcb2:	4d07      	ldr	r5, [pc, #28]	@ (801fcd0 <_lseek_r+0x20>)
 801fcb4:	4604      	mov	r4, r0
 801fcb6:	4608      	mov	r0, r1
 801fcb8:	4611      	mov	r1, r2
 801fcba:	2200      	movs	r2, #0
 801fcbc:	602a      	str	r2, [r5, #0]
 801fcbe:	461a      	mov	r2, r3
 801fcc0:	f7e1 fe09 	bl	80018d6 <_lseek>
 801fcc4:	1c43      	adds	r3, r0, #1
 801fcc6:	d102      	bne.n	801fcce <_lseek_r+0x1e>
 801fcc8:	682b      	ldr	r3, [r5, #0]
 801fcca:	b103      	cbz	r3, 801fcce <_lseek_r+0x1e>
 801fccc:	6023      	str	r3, [r4, #0]
 801fcce:	bd38      	pop	{r3, r4, r5, pc}
 801fcd0:	20001e28 	.word	0x20001e28

0801fcd4 <_read_r>:
 801fcd4:	b538      	push	{r3, r4, r5, lr}
 801fcd6:	4d07      	ldr	r5, [pc, #28]	@ (801fcf4 <_read_r+0x20>)
 801fcd8:	4604      	mov	r4, r0
 801fcda:	4608      	mov	r0, r1
 801fcdc:	4611      	mov	r1, r2
 801fcde:	2200      	movs	r2, #0
 801fce0:	602a      	str	r2, [r5, #0]
 801fce2:	461a      	mov	r2, r3
 801fce4:	f7e1 fd9a 	bl	800181c <_read>
 801fce8:	1c43      	adds	r3, r0, #1
 801fcea:	d102      	bne.n	801fcf2 <_read_r+0x1e>
 801fcec:	682b      	ldr	r3, [r5, #0]
 801fcee:	b103      	cbz	r3, 801fcf2 <_read_r+0x1e>
 801fcf0:	6023      	str	r3, [r4, #0]
 801fcf2:	bd38      	pop	{r3, r4, r5, pc}
 801fcf4:	20001e28 	.word	0x20001e28

0801fcf8 <_sbrk_r>:
 801fcf8:	b538      	push	{r3, r4, r5, lr}
 801fcfa:	4d06      	ldr	r5, [pc, #24]	@ (801fd14 <_sbrk_r+0x1c>)
 801fcfc:	2300      	movs	r3, #0
 801fcfe:	4604      	mov	r4, r0
 801fd00:	4608      	mov	r0, r1
 801fd02:	602b      	str	r3, [r5, #0]
 801fd04:	f7e1 fdf4 	bl	80018f0 <_sbrk>
 801fd08:	1c43      	adds	r3, r0, #1
 801fd0a:	d102      	bne.n	801fd12 <_sbrk_r+0x1a>
 801fd0c:	682b      	ldr	r3, [r5, #0]
 801fd0e:	b103      	cbz	r3, 801fd12 <_sbrk_r+0x1a>
 801fd10:	6023      	str	r3, [r4, #0]
 801fd12:	bd38      	pop	{r3, r4, r5, pc}
 801fd14:	20001e28 	.word	0x20001e28

0801fd18 <_write_r>:
 801fd18:	b538      	push	{r3, r4, r5, lr}
 801fd1a:	4d07      	ldr	r5, [pc, #28]	@ (801fd38 <_write_r+0x20>)
 801fd1c:	4604      	mov	r4, r0
 801fd1e:	4608      	mov	r0, r1
 801fd20:	4611      	mov	r1, r2
 801fd22:	2200      	movs	r2, #0
 801fd24:	602a      	str	r2, [r5, #0]
 801fd26:	461a      	mov	r2, r3
 801fd28:	f7e1 fd95 	bl	8001856 <_write>
 801fd2c:	1c43      	adds	r3, r0, #1
 801fd2e:	d102      	bne.n	801fd36 <_write_r+0x1e>
 801fd30:	682b      	ldr	r3, [r5, #0]
 801fd32:	b103      	cbz	r3, 801fd36 <_write_r+0x1e>
 801fd34:	6023      	str	r3, [r4, #0]
 801fd36:	bd38      	pop	{r3, r4, r5, pc}
 801fd38:	20001e28 	.word	0x20001e28

0801fd3c <__errno>:
 801fd3c:	4b01      	ldr	r3, [pc, #4]	@ (801fd44 <__errno+0x8>)
 801fd3e:	6818      	ldr	r0, [r3, #0]
 801fd40:	4770      	bx	lr
 801fd42:	bf00      	nop
 801fd44:	20000648 	.word	0x20000648

0801fd48 <__libc_init_array>:
 801fd48:	b570      	push	{r4, r5, r6, lr}
 801fd4a:	4d0d      	ldr	r5, [pc, #52]	@ (801fd80 <__libc_init_array+0x38>)
 801fd4c:	4c0d      	ldr	r4, [pc, #52]	@ (801fd84 <__libc_init_array+0x3c>)
 801fd4e:	1b64      	subs	r4, r4, r5
 801fd50:	10a4      	asrs	r4, r4, #2
 801fd52:	2600      	movs	r6, #0
 801fd54:	42a6      	cmp	r6, r4
 801fd56:	d109      	bne.n	801fd6c <__libc_init_array+0x24>
 801fd58:	4d0b      	ldr	r5, [pc, #44]	@ (801fd88 <__libc_init_array+0x40>)
 801fd5a:	4c0c      	ldr	r4, [pc, #48]	@ (801fd8c <__libc_init_array+0x44>)
 801fd5c:	f000 fe24 	bl	80209a8 <_init>
 801fd60:	1b64      	subs	r4, r4, r5
 801fd62:	10a4      	asrs	r4, r4, #2
 801fd64:	2600      	movs	r6, #0
 801fd66:	42a6      	cmp	r6, r4
 801fd68:	d105      	bne.n	801fd76 <__libc_init_array+0x2e>
 801fd6a:	bd70      	pop	{r4, r5, r6, pc}
 801fd6c:	f855 3b04 	ldr.w	r3, [r5], #4
 801fd70:	4798      	blx	r3
 801fd72:	3601      	adds	r6, #1
 801fd74:	e7ee      	b.n	801fd54 <__libc_init_array+0xc>
 801fd76:	f855 3b04 	ldr.w	r3, [r5], #4
 801fd7a:	4798      	blx	r3
 801fd7c:	3601      	adds	r6, #1
 801fd7e:	e7f2      	b.n	801fd66 <__libc_init_array+0x1e>
 801fd80:	080216e0 	.word	0x080216e0
 801fd84:	080216e0 	.word	0x080216e0
 801fd88:	080216e0 	.word	0x080216e0
 801fd8c:	080216e4 	.word	0x080216e4

0801fd90 <__retarget_lock_init_recursive>:
 801fd90:	4770      	bx	lr

0801fd92 <__retarget_lock_acquire_recursive>:
 801fd92:	4770      	bx	lr

0801fd94 <__retarget_lock_release_recursive>:
 801fd94:	4770      	bx	lr
	...

0801fd98 <_free_r>:
 801fd98:	b538      	push	{r3, r4, r5, lr}
 801fd9a:	4605      	mov	r5, r0
 801fd9c:	2900      	cmp	r1, #0
 801fd9e:	d041      	beq.n	801fe24 <_free_r+0x8c>
 801fda0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801fda4:	1f0c      	subs	r4, r1, #4
 801fda6:	2b00      	cmp	r3, #0
 801fda8:	bfb8      	it	lt
 801fdaa:	18e4      	addlt	r4, r4, r3
 801fdac:	f7ff fd52 	bl	801f854 <__malloc_lock>
 801fdb0:	4a1d      	ldr	r2, [pc, #116]	@ (801fe28 <_free_r+0x90>)
 801fdb2:	6813      	ldr	r3, [r2, #0]
 801fdb4:	b933      	cbnz	r3, 801fdc4 <_free_r+0x2c>
 801fdb6:	6063      	str	r3, [r4, #4]
 801fdb8:	6014      	str	r4, [r2, #0]
 801fdba:	4628      	mov	r0, r5
 801fdbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fdc0:	f7ff bd4e 	b.w	801f860 <__malloc_unlock>
 801fdc4:	42a3      	cmp	r3, r4
 801fdc6:	d908      	bls.n	801fdda <_free_r+0x42>
 801fdc8:	6820      	ldr	r0, [r4, #0]
 801fdca:	1821      	adds	r1, r4, r0
 801fdcc:	428b      	cmp	r3, r1
 801fdce:	bf01      	itttt	eq
 801fdd0:	6819      	ldreq	r1, [r3, #0]
 801fdd2:	685b      	ldreq	r3, [r3, #4]
 801fdd4:	1809      	addeq	r1, r1, r0
 801fdd6:	6021      	streq	r1, [r4, #0]
 801fdd8:	e7ed      	b.n	801fdb6 <_free_r+0x1e>
 801fdda:	461a      	mov	r2, r3
 801fddc:	685b      	ldr	r3, [r3, #4]
 801fdde:	b10b      	cbz	r3, 801fde4 <_free_r+0x4c>
 801fde0:	42a3      	cmp	r3, r4
 801fde2:	d9fa      	bls.n	801fdda <_free_r+0x42>
 801fde4:	6811      	ldr	r1, [r2, #0]
 801fde6:	1850      	adds	r0, r2, r1
 801fde8:	42a0      	cmp	r0, r4
 801fdea:	d10b      	bne.n	801fe04 <_free_r+0x6c>
 801fdec:	6820      	ldr	r0, [r4, #0]
 801fdee:	4401      	add	r1, r0
 801fdf0:	1850      	adds	r0, r2, r1
 801fdf2:	4283      	cmp	r3, r0
 801fdf4:	6011      	str	r1, [r2, #0]
 801fdf6:	d1e0      	bne.n	801fdba <_free_r+0x22>
 801fdf8:	6818      	ldr	r0, [r3, #0]
 801fdfa:	685b      	ldr	r3, [r3, #4]
 801fdfc:	6053      	str	r3, [r2, #4]
 801fdfe:	4408      	add	r0, r1
 801fe00:	6010      	str	r0, [r2, #0]
 801fe02:	e7da      	b.n	801fdba <_free_r+0x22>
 801fe04:	d902      	bls.n	801fe0c <_free_r+0x74>
 801fe06:	230c      	movs	r3, #12
 801fe08:	602b      	str	r3, [r5, #0]
 801fe0a:	e7d6      	b.n	801fdba <_free_r+0x22>
 801fe0c:	6820      	ldr	r0, [r4, #0]
 801fe0e:	1821      	adds	r1, r4, r0
 801fe10:	428b      	cmp	r3, r1
 801fe12:	bf04      	itt	eq
 801fe14:	6819      	ldreq	r1, [r3, #0]
 801fe16:	685b      	ldreq	r3, [r3, #4]
 801fe18:	6063      	str	r3, [r4, #4]
 801fe1a:	bf04      	itt	eq
 801fe1c:	1809      	addeq	r1, r1, r0
 801fe1e:	6021      	streq	r1, [r4, #0]
 801fe20:	6054      	str	r4, [r2, #4]
 801fe22:	e7ca      	b.n	801fdba <_free_r+0x22>
 801fe24:	bd38      	pop	{r3, r4, r5, pc}
 801fe26:	bf00      	nop
 801fe28:	20001ce8 	.word	0x20001ce8

0801fe2c <__sfputc_r>:
 801fe2c:	6893      	ldr	r3, [r2, #8]
 801fe2e:	3b01      	subs	r3, #1
 801fe30:	2b00      	cmp	r3, #0
 801fe32:	b410      	push	{r4}
 801fe34:	6093      	str	r3, [r2, #8]
 801fe36:	da07      	bge.n	801fe48 <__sfputc_r+0x1c>
 801fe38:	6994      	ldr	r4, [r2, #24]
 801fe3a:	42a3      	cmp	r3, r4
 801fe3c:	db01      	blt.n	801fe42 <__sfputc_r+0x16>
 801fe3e:	290a      	cmp	r1, #10
 801fe40:	d102      	bne.n	801fe48 <__sfputc_r+0x1c>
 801fe42:	bc10      	pop	{r4}
 801fe44:	f7ff be87 	b.w	801fb56 <__swbuf_r>
 801fe48:	6813      	ldr	r3, [r2, #0]
 801fe4a:	1c58      	adds	r0, r3, #1
 801fe4c:	6010      	str	r0, [r2, #0]
 801fe4e:	7019      	strb	r1, [r3, #0]
 801fe50:	4608      	mov	r0, r1
 801fe52:	bc10      	pop	{r4}
 801fe54:	4770      	bx	lr

0801fe56 <__sfputs_r>:
 801fe56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fe58:	4606      	mov	r6, r0
 801fe5a:	460f      	mov	r7, r1
 801fe5c:	4614      	mov	r4, r2
 801fe5e:	18d5      	adds	r5, r2, r3
 801fe60:	42ac      	cmp	r4, r5
 801fe62:	d101      	bne.n	801fe68 <__sfputs_r+0x12>
 801fe64:	2000      	movs	r0, #0
 801fe66:	e007      	b.n	801fe78 <__sfputs_r+0x22>
 801fe68:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fe6c:	463a      	mov	r2, r7
 801fe6e:	4630      	mov	r0, r6
 801fe70:	f7ff ffdc 	bl	801fe2c <__sfputc_r>
 801fe74:	1c43      	adds	r3, r0, #1
 801fe76:	d1f3      	bne.n	801fe60 <__sfputs_r+0xa>
 801fe78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801fe7c <_vfiprintf_r>:
 801fe7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe80:	460d      	mov	r5, r1
 801fe82:	b09d      	sub	sp, #116	@ 0x74
 801fe84:	4614      	mov	r4, r2
 801fe86:	4698      	mov	r8, r3
 801fe88:	4606      	mov	r6, r0
 801fe8a:	b118      	cbz	r0, 801fe94 <_vfiprintf_r+0x18>
 801fe8c:	6a03      	ldr	r3, [r0, #32]
 801fe8e:	b90b      	cbnz	r3, 801fe94 <_vfiprintf_r+0x18>
 801fe90:	f7ff fd78 	bl	801f984 <__sinit>
 801fe94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801fe96:	07d9      	lsls	r1, r3, #31
 801fe98:	d405      	bmi.n	801fea6 <_vfiprintf_r+0x2a>
 801fe9a:	89ab      	ldrh	r3, [r5, #12]
 801fe9c:	059a      	lsls	r2, r3, #22
 801fe9e:	d402      	bmi.n	801fea6 <_vfiprintf_r+0x2a>
 801fea0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801fea2:	f7ff ff76 	bl	801fd92 <__retarget_lock_acquire_recursive>
 801fea6:	89ab      	ldrh	r3, [r5, #12]
 801fea8:	071b      	lsls	r3, r3, #28
 801feaa:	d501      	bpl.n	801feb0 <_vfiprintf_r+0x34>
 801feac:	692b      	ldr	r3, [r5, #16]
 801feae:	b99b      	cbnz	r3, 801fed8 <_vfiprintf_r+0x5c>
 801feb0:	4629      	mov	r1, r5
 801feb2:	4630      	mov	r0, r6
 801feb4:	f7ff fe8e 	bl	801fbd4 <__swsetup_r>
 801feb8:	b170      	cbz	r0, 801fed8 <_vfiprintf_r+0x5c>
 801feba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801febc:	07dc      	lsls	r4, r3, #31
 801febe:	d504      	bpl.n	801feca <_vfiprintf_r+0x4e>
 801fec0:	f04f 30ff 	mov.w	r0, #4294967295
 801fec4:	b01d      	add	sp, #116	@ 0x74
 801fec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801feca:	89ab      	ldrh	r3, [r5, #12]
 801fecc:	0598      	lsls	r0, r3, #22
 801fece:	d4f7      	bmi.n	801fec0 <_vfiprintf_r+0x44>
 801fed0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801fed2:	f7ff ff5f 	bl	801fd94 <__retarget_lock_release_recursive>
 801fed6:	e7f3      	b.n	801fec0 <_vfiprintf_r+0x44>
 801fed8:	2300      	movs	r3, #0
 801feda:	9309      	str	r3, [sp, #36]	@ 0x24
 801fedc:	2320      	movs	r3, #32
 801fede:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801fee2:	f8cd 800c 	str.w	r8, [sp, #12]
 801fee6:	2330      	movs	r3, #48	@ 0x30
 801fee8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8020098 <_vfiprintf_r+0x21c>
 801feec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801fef0:	f04f 0901 	mov.w	r9, #1
 801fef4:	4623      	mov	r3, r4
 801fef6:	469a      	mov	sl, r3
 801fef8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fefc:	b10a      	cbz	r2, 801ff02 <_vfiprintf_r+0x86>
 801fefe:	2a25      	cmp	r2, #37	@ 0x25
 801ff00:	d1f9      	bne.n	801fef6 <_vfiprintf_r+0x7a>
 801ff02:	ebba 0b04 	subs.w	fp, sl, r4
 801ff06:	d00b      	beq.n	801ff20 <_vfiprintf_r+0xa4>
 801ff08:	465b      	mov	r3, fp
 801ff0a:	4622      	mov	r2, r4
 801ff0c:	4629      	mov	r1, r5
 801ff0e:	4630      	mov	r0, r6
 801ff10:	f7ff ffa1 	bl	801fe56 <__sfputs_r>
 801ff14:	3001      	adds	r0, #1
 801ff16:	f000 80a7 	beq.w	8020068 <_vfiprintf_r+0x1ec>
 801ff1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ff1c:	445a      	add	r2, fp
 801ff1e:	9209      	str	r2, [sp, #36]	@ 0x24
 801ff20:	f89a 3000 	ldrb.w	r3, [sl]
 801ff24:	2b00      	cmp	r3, #0
 801ff26:	f000 809f 	beq.w	8020068 <_vfiprintf_r+0x1ec>
 801ff2a:	2300      	movs	r3, #0
 801ff2c:	f04f 32ff 	mov.w	r2, #4294967295
 801ff30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ff34:	f10a 0a01 	add.w	sl, sl, #1
 801ff38:	9304      	str	r3, [sp, #16]
 801ff3a:	9307      	str	r3, [sp, #28]
 801ff3c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801ff40:	931a      	str	r3, [sp, #104]	@ 0x68
 801ff42:	4654      	mov	r4, sl
 801ff44:	2205      	movs	r2, #5
 801ff46:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ff4a:	4853      	ldr	r0, [pc, #332]	@ (8020098 <_vfiprintf_r+0x21c>)
 801ff4c:	f7e0 f920 	bl	8000190 <memchr>
 801ff50:	9a04      	ldr	r2, [sp, #16]
 801ff52:	b9d8      	cbnz	r0, 801ff8c <_vfiprintf_r+0x110>
 801ff54:	06d1      	lsls	r1, r2, #27
 801ff56:	bf44      	itt	mi
 801ff58:	2320      	movmi	r3, #32
 801ff5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ff5e:	0713      	lsls	r3, r2, #28
 801ff60:	bf44      	itt	mi
 801ff62:	232b      	movmi	r3, #43	@ 0x2b
 801ff64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ff68:	f89a 3000 	ldrb.w	r3, [sl]
 801ff6c:	2b2a      	cmp	r3, #42	@ 0x2a
 801ff6e:	d015      	beq.n	801ff9c <_vfiprintf_r+0x120>
 801ff70:	9a07      	ldr	r2, [sp, #28]
 801ff72:	4654      	mov	r4, sl
 801ff74:	2000      	movs	r0, #0
 801ff76:	f04f 0c0a 	mov.w	ip, #10
 801ff7a:	4621      	mov	r1, r4
 801ff7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ff80:	3b30      	subs	r3, #48	@ 0x30
 801ff82:	2b09      	cmp	r3, #9
 801ff84:	d94b      	bls.n	802001e <_vfiprintf_r+0x1a2>
 801ff86:	b1b0      	cbz	r0, 801ffb6 <_vfiprintf_r+0x13a>
 801ff88:	9207      	str	r2, [sp, #28]
 801ff8a:	e014      	b.n	801ffb6 <_vfiprintf_r+0x13a>
 801ff8c:	eba0 0308 	sub.w	r3, r0, r8
 801ff90:	fa09 f303 	lsl.w	r3, r9, r3
 801ff94:	4313      	orrs	r3, r2
 801ff96:	9304      	str	r3, [sp, #16]
 801ff98:	46a2      	mov	sl, r4
 801ff9a:	e7d2      	b.n	801ff42 <_vfiprintf_r+0xc6>
 801ff9c:	9b03      	ldr	r3, [sp, #12]
 801ff9e:	1d19      	adds	r1, r3, #4
 801ffa0:	681b      	ldr	r3, [r3, #0]
 801ffa2:	9103      	str	r1, [sp, #12]
 801ffa4:	2b00      	cmp	r3, #0
 801ffa6:	bfbb      	ittet	lt
 801ffa8:	425b      	neglt	r3, r3
 801ffaa:	f042 0202 	orrlt.w	r2, r2, #2
 801ffae:	9307      	strge	r3, [sp, #28]
 801ffb0:	9307      	strlt	r3, [sp, #28]
 801ffb2:	bfb8      	it	lt
 801ffb4:	9204      	strlt	r2, [sp, #16]
 801ffb6:	7823      	ldrb	r3, [r4, #0]
 801ffb8:	2b2e      	cmp	r3, #46	@ 0x2e
 801ffba:	d10a      	bne.n	801ffd2 <_vfiprintf_r+0x156>
 801ffbc:	7863      	ldrb	r3, [r4, #1]
 801ffbe:	2b2a      	cmp	r3, #42	@ 0x2a
 801ffc0:	d132      	bne.n	8020028 <_vfiprintf_r+0x1ac>
 801ffc2:	9b03      	ldr	r3, [sp, #12]
 801ffc4:	1d1a      	adds	r2, r3, #4
 801ffc6:	681b      	ldr	r3, [r3, #0]
 801ffc8:	9203      	str	r2, [sp, #12]
 801ffca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801ffce:	3402      	adds	r4, #2
 801ffd0:	9305      	str	r3, [sp, #20]
 801ffd2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 802009c <_vfiprintf_r+0x220>
 801ffd6:	7821      	ldrb	r1, [r4, #0]
 801ffd8:	2203      	movs	r2, #3
 801ffda:	4650      	mov	r0, sl
 801ffdc:	f7e0 f8d8 	bl	8000190 <memchr>
 801ffe0:	b138      	cbz	r0, 801fff2 <_vfiprintf_r+0x176>
 801ffe2:	9b04      	ldr	r3, [sp, #16]
 801ffe4:	eba0 000a 	sub.w	r0, r0, sl
 801ffe8:	2240      	movs	r2, #64	@ 0x40
 801ffea:	4082      	lsls	r2, r0
 801ffec:	4313      	orrs	r3, r2
 801ffee:	3401      	adds	r4, #1
 801fff0:	9304      	str	r3, [sp, #16]
 801fff2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fff6:	482a      	ldr	r0, [pc, #168]	@ (80200a0 <_vfiprintf_r+0x224>)
 801fff8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801fffc:	2206      	movs	r2, #6
 801fffe:	f7e0 f8c7 	bl	8000190 <memchr>
 8020002:	2800      	cmp	r0, #0
 8020004:	d03f      	beq.n	8020086 <_vfiprintf_r+0x20a>
 8020006:	4b27      	ldr	r3, [pc, #156]	@ (80200a4 <_vfiprintf_r+0x228>)
 8020008:	bb1b      	cbnz	r3, 8020052 <_vfiprintf_r+0x1d6>
 802000a:	9b03      	ldr	r3, [sp, #12]
 802000c:	3307      	adds	r3, #7
 802000e:	f023 0307 	bic.w	r3, r3, #7
 8020012:	3308      	adds	r3, #8
 8020014:	9303      	str	r3, [sp, #12]
 8020016:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020018:	443b      	add	r3, r7
 802001a:	9309      	str	r3, [sp, #36]	@ 0x24
 802001c:	e76a      	b.n	801fef4 <_vfiprintf_r+0x78>
 802001e:	fb0c 3202 	mla	r2, ip, r2, r3
 8020022:	460c      	mov	r4, r1
 8020024:	2001      	movs	r0, #1
 8020026:	e7a8      	b.n	801ff7a <_vfiprintf_r+0xfe>
 8020028:	2300      	movs	r3, #0
 802002a:	3401      	adds	r4, #1
 802002c:	9305      	str	r3, [sp, #20]
 802002e:	4619      	mov	r1, r3
 8020030:	f04f 0c0a 	mov.w	ip, #10
 8020034:	4620      	mov	r0, r4
 8020036:	f810 2b01 	ldrb.w	r2, [r0], #1
 802003a:	3a30      	subs	r2, #48	@ 0x30
 802003c:	2a09      	cmp	r2, #9
 802003e:	d903      	bls.n	8020048 <_vfiprintf_r+0x1cc>
 8020040:	2b00      	cmp	r3, #0
 8020042:	d0c6      	beq.n	801ffd2 <_vfiprintf_r+0x156>
 8020044:	9105      	str	r1, [sp, #20]
 8020046:	e7c4      	b.n	801ffd2 <_vfiprintf_r+0x156>
 8020048:	fb0c 2101 	mla	r1, ip, r1, r2
 802004c:	4604      	mov	r4, r0
 802004e:	2301      	movs	r3, #1
 8020050:	e7f0      	b.n	8020034 <_vfiprintf_r+0x1b8>
 8020052:	ab03      	add	r3, sp, #12
 8020054:	9300      	str	r3, [sp, #0]
 8020056:	462a      	mov	r2, r5
 8020058:	4b13      	ldr	r3, [pc, #76]	@ (80200a8 <_vfiprintf_r+0x22c>)
 802005a:	a904      	add	r1, sp, #16
 802005c:	4630      	mov	r0, r6
 802005e:	f3af 8000 	nop.w
 8020062:	4607      	mov	r7, r0
 8020064:	1c78      	adds	r0, r7, #1
 8020066:	d1d6      	bne.n	8020016 <_vfiprintf_r+0x19a>
 8020068:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802006a:	07d9      	lsls	r1, r3, #31
 802006c:	d405      	bmi.n	802007a <_vfiprintf_r+0x1fe>
 802006e:	89ab      	ldrh	r3, [r5, #12]
 8020070:	059a      	lsls	r2, r3, #22
 8020072:	d402      	bmi.n	802007a <_vfiprintf_r+0x1fe>
 8020074:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8020076:	f7ff fe8d 	bl	801fd94 <__retarget_lock_release_recursive>
 802007a:	89ab      	ldrh	r3, [r5, #12]
 802007c:	065b      	lsls	r3, r3, #25
 802007e:	f53f af1f 	bmi.w	801fec0 <_vfiprintf_r+0x44>
 8020082:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8020084:	e71e      	b.n	801fec4 <_vfiprintf_r+0x48>
 8020086:	ab03      	add	r3, sp, #12
 8020088:	9300      	str	r3, [sp, #0]
 802008a:	462a      	mov	r2, r5
 802008c:	4b06      	ldr	r3, [pc, #24]	@ (80200a8 <_vfiprintf_r+0x22c>)
 802008e:	a904      	add	r1, sp, #16
 8020090:	4630      	mov	r0, r6
 8020092:	f000 f879 	bl	8020188 <_printf_i>
 8020096:	e7e4      	b.n	8020062 <_vfiprintf_r+0x1e6>
 8020098:	08021688 	.word	0x08021688
 802009c:	0802168e 	.word	0x0802168e
 80200a0:	08021692 	.word	0x08021692
 80200a4:	00000000 	.word	0x00000000
 80200a8:	0801fe57 	.word	0x0801fe57

080200ac <_printf_common>:
 80200ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80200b0:	4616      	mov	r6, r2
 80200b2:	4698      	mov	r8, r3
 80200b4:	688a      	ldr	r2, [r1, #8]
 80200b6:	690b      	ldr	r3, [r1, #16]
 80200b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80200bc:	4293      	cmp	r3, r2
 80200be:	bfb8      	it	lt
 80200c0:	4613      	movlt	r3, r2
 80200c2:	6033      	str	r3, [r6, #0]
 80200c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80200c8:	4607      	mov	r7, r0
 80200ca:	460c      	mov	r4, r1
 80200cc:	b10a      	cbz	r2, 80200d2 <_printf_common+0x26>
 80200ce:	3301      	adds	r3, #1
 80200d0:	6033      	str	r3, [r6, #0]
 80200d2:	6823      	ldr	r3, [r4, #0]
 80200d4:	0699      	lsls	r1, r3, #26
 80200d6:	bf42      	ittt	mi
 80200d8:	6833      	ldrmi	r3, [r6, #0]
 80200da:	3302      	addmi	r3, #2
 80200dc:	6033      	strmi	r3, [r6, #0]
 80200de:	6825      	ldr	r5, [r4, #0]
 80200e0:	f015 0506 	ands.w	r5, r5, #6
 80200e4:	d106      	bne.n	80200f4 <_printf_common+0x48>
 80200e6:	f104 0a19 	add.w	sl, r4, #25
 80200ea:	68e3      	ldr	r3, [r4, #12]
 80200ec:	6832      	ldr	r2, [r6, #0]
 80200ee:	1a9b      	subs	r3, r3, r2
 80200f0:	42ab      	cmp	r3, r5
 80200f2:	dc26      	bgt.n	8020142 <_printf_common+0x96>
 80200f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80200f8:	6822      	ldr	r2, [r4, #0]
 80200fa:	3b00      	subs	r3, #0
 80200fc:	bf18      	it	ne
 80200fe:	2301      	movne	r3, #1
 8020100:	0692      	lsls	r2, r2, #26
 8020102:	d42b      	bmi.n	802015c <_printf_common+0xb0>
 8020104:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8020108:	4641      	mov	r1, r8
 802010a:	4638      	mov	r0, r7
 802010c:	47c8      	blx	r9
 802010e:	3001      	adds	r0, #1
 8020110:	d01e      	beq.n	8020150 <_printf_common+0xa4>
 8020112:	6823      	ldr	r3, [r4, #0]
 8020114:	6922      	ldr	r2, [r4, #16]
 8020116:	f003 0306 	and.w	r3, r3, #6
 802011a:	2b04      	cmp	r3, #4
 802011c:	bf02      	ittt	eq
 802011e:	68e5      	ldreq	r5, [r4, #12]
 8020120:	6833      	ldreq	r3, [r6, #0]
 8020122:	1aed      	subeq	r5, r5, r3
 8020124:	68a3      	ldr	r3, [r4, #8]
 8020126:	bf0c      	ite	eq
 8020128:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802012c:	2500      	movne	r5, #0
 802012e:	4293      	cmp	r3, r2
 8020130:	bfc4      	itt	gt
 8020132:	1a9b      	subgt	r3, r3, r2
 8020134:	18ed      	addgt	r5, r5, r3
 8020136:	2600      	movs	r6, #0
 8020138:	341a      	adds	r4, #26
 802013a:	42b5      	cmp	r5, r6
 802013c:	d11a      	bne.n	8020174 <_printf_common+0xc8>
 802013e:	2000      	movs	r0, #0
 8020140:	e008      	b.n	8020154 <_printf_common+0xa8>
 8020142:	2301      	movs	r3, #1
 8020144:	4652      	mov	r2, sl
 8020146:	4641      	mov	r1, r8
 8020148:	4638      	mov	r0, r7
 802014a:	47c8      	blx	r9
 802014c:	3001      	adds	r0, #1
 802014e:	d103      	bne.n	8020158 <_printf_common+0xac>
 8020150:	f04f 30ff 	mov.w	r0, #4294967295
 8020154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020158:	3501      	adds	r5, #1
 802015a:	e7c6      	b.n	80200ea <_printf_common+0x3e>
 802015c:	18e1      	adds	r1, r4, r3
 802015e:	1c5a      	adds	r2, r3, #1
 8020160:	2030      	movs	r0, #48	@ 0x30
 8020162:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8020166:	4422      	add	r2, r4
 8020168:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 802016c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8020170:	3302      	adds	r3, #2
 8020172:	e7c7      	b.n	8020104 <_printf_common+0x58>
 8020174:	2301      	movs	r3, #1
 8020176:	4622      	mov	r2, r4
 8020178:	4641      	mov	r1, r8
 802017a:	4638      	mov	r0, r7
 802017c:	47c8      	blx	r9
 802017e:	3001      	adds	r0, #1
 8020180:	d0e6      	beq.n	8020150 <_printf_common+0xa4>
 8020182:	3601      	adds	r6, #1
 8020184:	e7d9      	b.n	802013a <_printf_common+0x8e>
	...

08020188 <_printf_i>:
 8020188:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802018c:	7e0f      	ldrb	r7, [r1, #24]
 802018e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8020190:	2f78      	cmp	r7, #120	@ 0x78
 8020192:	4691      	mov	r9, r2
 8020194:	4680      	mov	r8, r0
 8020196:	460c      	mov	r4, r1
 8020198:	469a      	mov	sl, r3
 802019a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802019e:	d807      	bhi.n	80201b0 <_printf_i+0x28>
 80201a0:	2f62      	cmp	r7, #98	@ 0x62
 80201a2:	d80a      	bhi.n	80201ba <_printf_i+0x32>
 80201a4:	2f00      	cmp	r7, #0
 80201a6:	f000 80d1 	beq.w	802034c <_printf_i+0x1c4>
 80201aa:	2f58      	cmp	r7, #88	@ 0x58
 80201ac:	f000 80b8 	beq.w	8020320 <_printf_i+0x198>
 80201b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80201b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80201b8:	e03a      	b.n	8020230 <_printf_i+0xa8>
 80201ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80201be:	2b15      	cmp	r3, #21
 80201c0:	d8f6      	bhi.n	80201b0 <_printf_i+0x28>
 80201c2:	a101      	add	r1, pc, #4	@ (adr r1, 80201c8 <_printf_i+0x40>)
 80201c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80201c8:	08020221 	.word	0x08020221
 80201cc:	08020235 	.word	0x08020235
 80201d0:	080201b1 	.word	0x080201b1
 80201d4:	080201b1 	.word	0x080201b1
 80201d8:	080201b1 	.word	0x080201b1
 80201dc:	080201b1 	.word	0x080201b1
 80201e0:	08020235 	.word	0x08020235
 80201e4:	080201b1 	.word	0x080201b1
 80201e8:	080201b1 	.word	0x080201b1
 80201ec:	080201b1 	.word	0x080201b1
 80201f0:	080201b1 	.word	0x080201b1
 80201f4:	08020333 	.word	0x08020333
 80201f8:	0802025f 	.word	0x0802025f
 80201fc:	080202ed 	.word	0x080202ed
 8020200:	080201b1 	.word	0x080201b1
 8020204:	080201b1 	.word	0x080201b1
 8020208:	08020355 	.word	0x08020355
 802020c:	080201b1 	.word	0x080201b1
 8020210:	0802025f 	.word	0x0802025f
 8020214:	080201b1 	.word	0x080201b1
 8020218:	080201b1 	.word	0x080201b1
 802021c:	080202f5 	.word	0x080202f5
 8020220:	6833      	ldr	r3, [r6, #0]
 8020222:	1d1a      	adds	r2, r3, #4
 8020224:	681b      	ldr	r3, [r3, #0]
 8020226:	6032      	str	r2, [r6, #0]
 8020228:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802022c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8020230:	2301      	movs	r3, #1
 8020232:	e09c      	b.n	802036e <_printf_i+0x1e6>
 8020234:	6833      	ldr	r3, [r6, #0]
 8020236:	6820      	ldr	r0, [r4, #0]
 8020238:	1d19      	adds	r1, r3, #4
 802023a:	6031      	str	r1, [r6, #0]
 802023c:	0606      	lsls	r6, r0, #24
 802023e:	d501      	bpl.n	8020244 <_printf_i+0xbc>
 8020240:	681d      	ldr	r5, [r3, #0]
 8020242:	e003      	b.n	802024c <_printf_i+0xc4>
 8020244:	0645      	lsls	r5, r0, #25
 8020246:	d5fb      	bpl.n	8020240 <_printf_i+0xb8>
 8020248:	f9b3 5000 	ldrsh.w	r5, [r3]
 802024c:	2d00      	cmp	r5, #0
 802024e:	da03      	bge.n	8020258 <_printf_i+0xd0>
 8020250:	232d      	movs	r3, #45	@ 0x2d
 8020252:	426d      	negs	r5, r5
 8020254:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8020258:	4858      	ldr	r0, [pc, #352]	@ (80203bc <_printf_i+0x234>)
 802025a:	230a      	movs	r3, #10
 802025c:	e011      	b.n	8020282 <_printf_i+0xfa>
 802025e:	6821      	ldr	r1, [r4, #0]
 8020260:	6833      	ldr	r3, [r6, #0]
 8020262:	0608      	lsls	r0, r1, #24
 8020264:	f853 5b04 	ldr.w	r5, [r3], #4
 8020268:	d402      	bmi.n	8020270 <_printf_i+0xe8>
 802026a:	0649      	lsls	r1, r1, #25
 802026c:	bf48      	it	mi
 802026e:	b2ad      	uxthmi	r5, r5
 8020270:	2f6f      	cmp	r7, #111	@ 0x6f
 8020272:	4852      	ldr	r0, [pc, #328]	@ (80203bc <_printf_i+0x234>)
 8020274:	6033      	str	r3, [r6, #0]
 8020276:	bf14      	ite	ne
 8020278:	230a      	movne	r3, #10
 802027a:	2308      	moveq	r3, #8
 802027c:	2100      	movs	r1, #0
 802027e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8020282:	6866      	ldr	r6, [r4, #4]
 8020284:	60a6      	str	r6, [r4, #8]
 8020286:	2e00      	cmp	r6, #0
 8020288:	db05      	blt.n	8020296 <_printf_i+0x10e>
 802028a:	6821      	ldr	r1, [r4, #0]
 802028c:	432e      	orrs	r6, r5
 802028e:	f021 0104 	bic.w	r1, r1, #4
 8020292:	6021      	str	r1, [r4, #0]
 8020294:	d04b      	beq.n	802032e <_printf_i+0x1a6>
 8020296:	4616      	mov	r6, r2
 8020298:	fbb5 f1f3 	udiv	r1, r5, r3
 802029c:	fb03 5711 	mls	r7, r3, r1, r5
 80202a0:	5dc7      	ldrb	r7, [r0, r7]
 80202a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80202a6:	462f      	mov	r7, r5
 80202a8:	42bb      	cmp	r3, r7
 80202aa:	460d      	mov	r5, r1
 80202ac:	d9f4      	bls.n	8020298 <_printf_i+0x110>
 80202ae:	2b08      	cmp	r3, #8
 80202b0:	d10b      	bne.n	80202ca <_printf_i+0x142>
 80202b2:	6823      	ldr	r3, [r4, #0]
 80202b4:	07df      	lsls	r7, r3, #31
 80202b6:	d508      	bpl.n	80202ca <_printf_i+0x142>
 80202b8:	6923      	ldr	r3, [r4, #16]
 80202ba:	6861      	ldr	r1, [r4, #4]
 80202bc:	4299      	cmp	r1, r3
 80202be:	bfde      	ittt	le
 80202c0:	2330      	movle	r3, #48	@ 0x30
 80202c2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80202c6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80202ca:	1b92      	subs	r2, r2, r6
 80202cc:	6122      	str	r2, [r4, #16]
 80202ce:	f8cd a000 	str.w	sl, [sp]
 80202d2:	464b      	mov	r3, r9
 80202d4:	aa03      	add	r2, sp, #12
 80202d6:	4621      	mov	r1, r4
 80202d8:	4640      	mov	r0, r8
 80202da:	f7ff fee7 	bl	80200ac <_printf_common>
 80202de:	3001      	adds	r0, #1
 80202e0:	d14a      	bne.n	8020378 <_printf_i+0x1f0>
 80202e2:	f04f 30ff 	mov.w	r0, #4294967295
 80202e6:	b004      	add	sp, #16
 80202e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80202ec:	6823      	ldr	r3, [r4, #0]
 80202ee:	f043 0320 	orr.w	r3, r3, #32
 80202f2:	6023      	str	r3, [r4, #0]
 80202f4:	4832      	ldr	r0, [pc, #200]	@ (80203c0 <_printf_i+0x238>)
 80202f6:	2778      	movs	r7, #120	@ 0x78
 80202f8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80202fc:	6823      	ldr	r3, [r4, #0]
 80202fe:	6831      	ldr	r1, [r6, #0]
 8020300:	061f      	lsls	r7, r3, #24
 8020302:	f851 5b04 	ldr.w	r5, [r1], #4
 8020306:	d402      	bmi.n	802030e <_printf_i+0x186>
 8020308:	065f      	lsls	r7, r3, #25
 802030a:	bf48      	it	mi
 802030c:	b2ad      	uxthmi	r5, r5
 802030e:	6031      	str	r1, [r6, #0]
 8020310:	07d9      	lsls	r1, r3, #31
 8020312:	bf44      	itt	mi
 8020314:	f043 0320 	orrmi.w	r3, r3, #32
 8020318:	6023      	strmi	r3, [r4, #0]
 802031a:	b11d      	cbz	r5, 8020324 <_printf_i+0x19c>
 802031c:	2310      	movs	r3, #16
 802031e:	e7ad      	b.n	802027c <_printf_i+0xf4>
 8020320:	4826      	ldr	r0, [pc, #152]	@ (80203bc <_printf_i+0x234>)
 8020322:	e7e9      	b.n	80202f8 <_printf_i+0x170>
 8020324:	6823      	ldr	r3, [r4, #0]
 8020326:	f023 0320 	bic.w	r3, r3, #32
 802032a:	6023      	str	r3, [r4, #0]
 802032c:	e7f6      	b.n	802031c <_printf_i+0x194>
 802032e:	4616      	mov	r6, r2
 8020330:	e7bd      	b.n	80202ae <_printf_i+0x126>
 8020332:	6833      	ldr	r3, [r6, #0]
 8020334:	6825      	ldr	r5, [r4, #0]
 8020336:	6961      	ldr	r1, [r4, #20]
 8020338:	1d18      	adds	r0, r3, #4
 802033a:	6030      	str	r0, [r6, #0]
 802033c:	062e      	lsls	r6, r5, #24
 802033e:	681b      	ldr	r3, [r3, #0]
 8020340:	d501      	bpl.n	8020346 <_printf_i+0x1be>
 8020342:	6019      	str	r1, [r3, #0]
 8020344:	e002      	b.n	802034c <_printf_i+0x1c4>
 8020346:	0668      	lsls	r0, r5, #25
 8020348:	d5fb      	bpl.n	8020342 <_printf_i+0x1ba>
 802034a:	8019      	strh	r1, [r3, #0]
 802034c:	2300      	movs	r3, #0
 802034e:	6123      	str	r3, [r4, #16]
 8020350:	4616      	mov	r6, r2
 8020352:	e7bc      	b.n	80202ce <_printf_i+0x146>
 8020354:	6833      	ldr	r3, [r6, #0]
 8020356:	1d1a      	adds	r2, r3, #4
 8020358:	6032      	str	r2, [r6, #0]
 802035a:	681e      	ldr	r6, [r3, #0]
 802035c:	6862      	ldr	r2, [r4, #4]
 802035e:	2100      	movs	r1, #0
 8020360:	4630      	mov	r0, r6
 8020362:	f7df ff15 	bl	8000190 <memchr>
 8020366:	b108      	cbz	r0, 802036c <_printf_i+0x1e4>
 8020368:	1b80      	subs	r0, r0, r6
 802036a:	6060      	str	r0, [r4, #4]
 802036c:	6863      	ldr	r3, [r4, #4]
 802036e:	6123      	str	r3, [r4, #16]
 8020370:	2300      	movs	r3, #0
 8020372:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8020376:	e7aa      	b.n	80202ce <_printf_i+0x146>
 8020378:	6923      	ldr	r3, [r4, #16]
 802037a:	4632      	mov	r2, r6
 802037c:	4649      	mov	r1, r9
 802037e:	4640      	mov	r0, r8
 8020380:	47d0      	blx	sl
 8020382:	3001      	adds	r0, #1
 8020384:	d0ad      	beq.n	80202e2 <_printf_i+0x15a>
 8020386:	6823      	ldr	r3, [r4, #0]
 8020388:	079b      	lsls	r3, r3, #30
 802038a:	d413      	bmi.n	80203b4 <_printf_i+0x22c>
 802038c:	68e0      	ldr	r0, [r4, #12]
 802038e:	9b03      	ldr	r3, [sp, #12]
 8020390:	4298      	cmp	r0, r3
 8020392:	bfb8      	it	lt
 8020394:	4618      	movlt	r0, r3
 8020396:	e7a6      	b.n	80202e6 <_printf_i+0x15e>
 8020398:	2301      	movs	r3, #1
 802039a:	4632      	mov	r2, r6
 802039c:	4649      	mov	r1, r9
 802039e:	4640      	mov	r0, r8
 80203a0:	47d0      	blx	sl
 80203a2:	3001      	adds	r0, #1
 80203a4:	d09d      	beq.n	80202e2 <_printf_i+0x15a>
 80203a6:	3501      	adds	r5, #1
 80203a8:	68e3      	ldr	r3, [r4, #12]
 80203aa:	9903      	ldr	r1, [sp, #12]
 80203ac:	1a5b      	subs	r3, r3, r1
 80203ae:	42ab      	cmp	r3, r5
 80203b0:	dcf2      	bgt.n	8020398 <_printf_i+0x210>
 80203b2:	e7eb      	b.n	802038c <_printf_i+0x204>
 80203b4:	2500      	movs	r5, #0
 80203b6:	f104 0619 	add.w	r6, r4, #25
 80203ba:	e7f5      	b.n	80203a8 <_printf_i+0x220>
 80203bc:	08021699 	.word	0x08021699
 80203c0:	080216aa 	.word	0x080216aa

080203c4 <__sflush_r>:
 80203c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80203c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80203ca:	0716      	lsls	r6, r2, #28
 80203cc:	4605      	mov	r5, r0
 80203ce:	460c      	mov	r4, r1
 80203d0:	d454      	bmi.n	802047c <__sflush_r+0xb8>
 80203d2:	684b      	ldr	r3, [r1, #4]
 80203d4:	2b00      	cmp	r3, #0
 80203d6:	dc02      	bgt.n	80203de <__sflush_r+0x1a>
 80203d8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80203da:	2b00      	cmp	r3, #0
 80203dc:	dd48      	ble.n	8020470 <__sflush_r+0xac>
 80203de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80203e0:	2e00      	cmp	r6, #0
 80203e2:	d045      	beq.n	8020470 <__sflush_r+0xac>
 80203e4:	2300      	movs	r3, #0
 80203e6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80203ea:	682f      	ldr	r7, [r5, #0]
 80203ec:	6a21      	ldr	r1, [r4, #32]
 80203ee:	602b      	str	r3, [r5, #0]
 80203f0:	d030      	beq.n	8020454 <__sflush_r+0x90>
 80203f2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80203f4:	89a3      	ldrh	r3, [r4, #12]
 80203f6:	0759      	lsls	r1, r3, #29
 80203f8:	d505      	bpl.n	8020406 <__sflush_r+0x42>
 80203fa:	6863      	ldr	r3, [r4, #4]
 80203fc:	1ad2      	subs	r2, r2, r3
 80203fe:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8020400:	b10b      	cbz	r3, 8020406 <__sflush_r+0x42>
 8020402:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8020404:	1ad2      	subs	r2, r2, r3
 8020406:	2300      	movs	r3, #0
 8020408:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802040a:	6a21      	ldr	r1, [r4, #32]
 802040c:	4628      	mov	r0, r5
 802040e:	47b0      	blx	r6
 8020410:	1c43      	adds	r3, r0, #1
 8020412:	89a3      	ldrh	r3, [r4, #12]
 8020414:	d106      	bne.n	8020424 <__sflush_r+0x60>
 8020416:	6829      	ldr	r1, [r5, #0]
 8020418:	291d      	cmp	r1, #29
 802041a:	d82b      	bhi.n	8020474 <__sflush_r+0xb0>
 802041c:	4a28      	ldr	r2, [pc, #160]	@ (80204c0 <__sflush_r+0xfc>)
 802041e:	40ca      	lsrs	r2, r1
 8020420:	07d6      	lsls	r6, r2, #31
 8020422:	d527      	bpl.n	8020474 <__sflush_r+0xb0>
 8020424:	2200      	movs	r2, #0
 8020426:	6062      	str	r2, [r4, #4]
 8020428:	04d9      	lsls	r1, r3, #19
 802042a:	6922      	ldr	r2, [r4, #16]
 802042c:	6022      	str	r2, [r4, #0]
 802042e:	d504      	bpl.n	802043a <__sflush_r+0x76>
 8020430:	1c42      	adds	r2, r0, #1
 8020432:	d101      	bne.n	8020438 <__sflush_r+0x74>
 8020434:	682b      	ldr	r3, [r5, #0]
 8020436:	b903      	cbnz	r3, 802043a <__sflush_r+0x76>
 8020438:	6560      	str	r0, [r4, #84]	@ 0x54
 802043a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802043c:	602f      	str	r7, [r5, #0]
 802043e:	b1b9      	cbz	r1, 8020470 <__sflush_r+0xac>
 8020440:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8020444:	4299      	cmp	r1, r3
 8020446:	d002      	beq.n	802044e <__sflush_r+0x8a>
 8020448:	4628      	mov	r0, r5
 802044a:	f7ff fca5 	bl	801fd98 <_free_r>
 802044e:	2300      	movs	r3, #0
 8020450:	6363      	str	r3, [r4, #52]	@ 0x34
 8020452:	e00d      	b.n	8020470 <__sflush_r+0xac>
 8020454:	2301      	movs	r3, #1
 8020456:	4628      	mov	r0, r5
 8020458:	47b0      	blx	r6
 802045a:	4602      	mov	r2, r0
 802045c:	1c50      	adds	r0, r2, #1
 802045e:	d1c9      	bne.n	80203f4 <__sflush_r+0x30>
 8020460:	682b      	ldr	r3, [r5, #0]
 8020462:	2b00      	cmp	r3, #0
 8020464:	d0c6      	beq.n	80203f4 <__sflush_r+0x30>
 8020466:	2b1d      	cmp	r3, #29
 8020468:	d001      	beq.n	802046e <__sflush_r+0xaa>
 802046a:	2b16      	cmp	r3, #22
 802046c:	d11d      	bne.n	80204aa <__sflush_r+0xe6>
 802046e:	602f      	str	r7, [r5, #0]
 8020470:	2000      	movs	r0, #0
 8020472:	e021      	b.n	80204b8 <__sflush_r+0xf4>
 8020474:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020478:	b21b      	sxth	r3, r3
 802047a:	e01a      	b.n	80204b2 <__sflush_r+0xee>
 802047c:	690f      	ldr	r7, [r1, #16]
 802047e:	2f00      	cmp	r7, #0
 8020480:	d0f6      	beq.n	8020470 <__sflush_r+0xac>
 8020482:	0793      	lsls	r3, r2, #30
 8020484:	680e      	ldr	r6, [r1, #0]
 8020486:	bf08      	it	eq
 8020488:	694b      	ldreq	r3, [r1, #20]
 802048a:	600f      	str	r7, [r1, #0]
 802048c:	bf18      	it	ne
 802048e:	2300      	movne	r3, #0
 8020490:	1bf6      	subs	r6, r6, r7
 8020492:	608b      	str	r3, [r1, #8]
 8020494:	2e00      	cmp	r6, #0
 8020496:	ddeb      	ble.n	8020470 <__sflush_r+0xac>
 8020498:	6a21      	ldr	r1, [r4, #32]
 802049a:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 802049e:	4633      	mov	r3, r6
 80204a0:	463a      	mov	r2, r7
 80204a2:	4628      	mov	r0, r5
 80204a4:	47e0      	blx	ip
 80204a6:	2800      	cmp	r0, #0
 80204a8:	dc07      	bgt.n	80204ba <__sflush_r+0xf6>
 80204aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80204ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80204b2:	81a3      	strh	r3, [r4, #12]
 80204b4:	f04f 30ff 	mov.w	r0, #4294967295
 80204b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80204ba:	4407      	add	r7, r0
 80204bc:	1a36      	subs	r6, r6, r0
 80204be:	e7e9      	b.n	8020494 <__sflush_r+0xd0>
 80204c0:	20400001 	.word	0x20400001

080204c4 <_fflush_r>:
 80204c4:	b538      	push	{r3, r4, r5, lr}
 80204c6:	690b      	ldr	r3, [r1, #16]
 80204c8:	4605      	mov	r5, r0
 80204ca:	460c      	mov	r4, r1
 80204cc:	b913      	cbnz	r3, 80204d4 <_fflush_r+0x10>
 80204ce:	2500      	movs	r5, #0
 80204d0:	4628      	mov	r0, r5
 80204d2:	bd38      	pop	{r3, r4, r5, pc}
 80204d4:	b118      	cbz	r0, 80204de <_fflush_r+0x1a>
 80204d6:	6a03      	ldr	r3, [r0, #32]
 80204d8:	b90b      	cbnz	r3, 80204de <_fflush_r+0x1a>
 80204da:	f7ff fa53 	bl	801f984 <__sinit>
 80204de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80204e2:	2b00      	cmp	r3, #0
 80204e4:	d0f3      	beq.n	80204ce <_fflush_r+0xa>
 80204e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80204e8:	07d0      	lsls	r0, r2, #31
 80204ea:	d404      	bmi.n	80204f6 <_fflush_r+0x32>
 80204ec:	0599      	lsls	r1, r3, #22
 80204ee:	d402      	bmi.n	80204f6 <_fflush_r+0x32>
 80204f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80204f2:	f7ff fc4e 	bl	801fd92 <__retarget_lock_acquire_recursive>
 80204f6:	4628      	mov	r0, r5
 80204f8:	4621      	mov	r1, r4
 80204fa:	f7ff ff63 	bl	80203c4 <__sflush_r>
 80204fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8020500:	07da      	lsls	r2, r3, #31
 8020502:	4605      	mov	r5, r0
 8020504:	d4e4      	bmi.n	80204d0 <_fflush_r+0xc>
 8020506:	89a3      	ldrh	r3, [r4, #12]
 8020508:	059b      	lsls	r3, r3, #22
 802050a:	d4e1      	bmi.n	80204d0 <_fflush_r+0xc>
 802050c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802050e:	f7ff fc41 	bl	801fd94 <__retarget_lock_release_recursive>
 8020512:	e7dd      	b.n	80204d0 <_fflush_r+0xc>

08020514 <__swhatbuf_r>:
 8020514:	b570      	push	{r4, r5, r6, lr}
 8020516:	460c      	mov	r4, r1
 8020518:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802051c:	2900      	cmp	r1, #0
 802051e:	b096      	sub	sp, #88	@ 0x58
 8020520:	4615      	mov	r5, r2
 8020522:	461e      	mov	r6, r3
 8020524:	da0d      	bge.n	8020542 <__swhatbuf_r+0x2e>
 8020526:	89a3      	ldrh	r3, [r4, #12]
 8020528:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802052c:	f04f 0100 	mov.w	r1, #0
 8020530:	bf14      	ite	ne
 8020532:	2340      	movne	r3, #64	@ 0x40
 8020534:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8020538:	2000      	movs	r0, #0
 802053a:	6031      	str	r1, [r6, #0]
 802053c:	602b      	str	r3, [r5, #0]
 802053e:	b016      	add	sp, #88	@ 0x58
 8020540:	bd70      	pop	{r4, r5, r6, pc}
 8020542:	466a      	mov	r2, sp
 8020544:	f000 f848 	bl	80205d8 <_fstat_r>
 8020548:	2800      	cmp	r0, #0
 802054a:	dbec      	blt.n	8020526 <__swhatbuf_r+0x12>
 802054c:	9901      	ldr	r1, [sp, #4]
 802054e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8020552:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8020556:	4259      	negs	r1, r3
 8020558:	4159      	adcs	r1, r3
 802055a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802055e:	e7eb      	b.n	8020538 <__swhatbuf_r+0x24>

08020560 <__smakebuf_r>:
 8020560:	898b      	ldrh	r3, [r1, #12]
 8020562:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020564:	079d      	lsls	r5, r3, #30
 8020566:	4606      	mov	r6, r0
 8020568:	460c      	mov	r4, r1
 802056a:	d507      	bpl.n	802057c <__smakebuf_r+0x1c>
 802056c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8020570:	6023      	str	r3, [r4, #0]
 8020572:	6123      	str	r3, [r4, #16]
 8020574:	2301      	movs	r3, #1
 8020576:	6163      	str	r3, [r4, #20]
 8020578:	b003      	add	sp, #12
 802057a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802057c:	ab01      	add	r3, sp, #4
 802057e:	466a      	mov	r2, sp
 8020580:	f7ff ffc8 	bl	8020514 <__swhatbuf_r>
 8020584:	9f00      	ldr	r7, [sp, #0]
 8020586:	4605      	mov	r5, r0
 8020588:	4639      	mov	r1, r7
 802058a:	4630      	mov	r0, r6
 802058c:	f7ff f8e2 	bl	801f754 <_malloc_r>
 8020590:	b948      	cbnz	r0, 80205a6 <__smakebuf_r+0x46>
 8020592:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020596:	059a      	lsls	r2, r3, #22
 8020598:	d4ee      	bmi.n	8020578 <__smakebuf_r+0x18>
 802059a:	f023 0303 	bic.w	r3, r3, #3
 802059e:	f043 0302 	orr.w	r3, r3, #2
 80205a2:	81a3      	strh	r3, [r4, #12]
 80205a4:	e7e2      	b.n	802056c <__smakebuf_r+0xc>
 80205a6:	89a3      	ldrh	r3, [r4, #12]
 80205a8:	6020      	str	r0, [r4, #0]
 80205aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80205ae:	81a3      	strh	r3, [r4, #12]
 80205b0:	9b01      	ldr	r3, [sp, #4]
 80205b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80205b6:	b15b      	cbz	r3, 80205d0 <__smakebuf_r+0x70>
 80205b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80205bc:	4630      	mov	r0, r6
 80205be:	f000 f81d 	bl	80205fc <_isatty_r>
 80205c2:	b128      	cbz	r0, 80205d0 <__smakebuf_r+0x70>
 80205c4:	89a3      	ldrh	r3, [r4, #12]
 80205c6:	f023 0303 	bic.w	r3, r3, #3
 80205ca:	f043 0301 	orr.w	r3, r3, #1
 80205ce:	81a3      	strh	r3, [r4, #12]
 80205d0:	89a3      	ldrh	r3, [r4, #12]
 80205d2:	431d      	orrs	r5, r3
 80205d4:	81a5      	strh	r5, [r4, #12]
 80205d6:	e7cf      	b.n	8020578 <__smakebuf_r+0x18>

080205d8 <_fstat_r>:
 80205d8:	b538      	push	{r3, r4, r5, lr}
 80205da:	4d07      	ldr	r5, [pc, #28]	@ (80205f8 <_fstat_r+0x20>)
 80205dc:	2300      	movs	r3, #0
 80205de:	4604      	mov	r4, r0
 80205e0:	4608      	mov	r0, r1
 80205e2:	4611      	mov	r1, r2
 80205e4:	602b      	str	r3, [r5, #0]
 80205e6:	f7e1 f95d 	bl	80018a4 <_fstat>
 80205ea:	1c43      	adds	r3, r0, #1
 80205ec:	d102      	bne.n	80205f4 <_fstat_r+0x1c>
 80205ee:	682b      	ldr	r3, [r5, #0]
 80205f0:	b103      	cbz	r3, 80205f4 <_fstat_r+0x1c>
 80205f2:	6023      	str	r3, [r4, #0]
 80205f4:	bd38      	pop	{r3, r4, r5, pc}
 80205f6:	bf00      	nop
 80205f8:	20001e28 	.word	0x20001e28

080205fc <_isatty_r>:
 80205fc:	b538      	push	{r3, r4, r5, lr}
 80205fe:	4d06      	ldr	r5, [pc, #24]	@ (8020618 <_isatty_r+0x1c>)
 8020600:	2300      	movs	r3, #0
 8020602:	4604      	mov	r4, r0
 8020604:	4608      	mov	r0, r1
 8020606:	602b      	str	r3, [r5, #0]
 8020608:	f7e1 f95b 	bl	80018c2 <_isatty>
 802060c:	1c43      	adds	r3, r0, #1
 802060e:	d102      	bne.n	8020616 <_isatty_r+0x1a>
 8020610:	682b      	ldr	r3, [r5, #0]
 8020612:	b103      	cbz	r3, 8020616 <_isatty_r+0x1a>
 8020614:	6023      	str	r3, [r4, #0]
 8020616:	bd38      	pop	{r3, r4, r5, pc}
 8020618:	20001e28 	.word	0x20001e28

0802061c <expf>:
 802061c:	b538      	push	{r3, r4, r5, lr}
 802061e:	4605      	mov	r5, r0
 8020620:	f000 f8ca 	bl	80207b8 <__ieee754_expf>
 8020624:	4604      	mov	r4, r0
 8020626:	4628      	mov	r0, r5
 8020628:	f000 f81e 	bl	8020668 <finitef>
 802062c:	b150      	cbz	r0, 8020644 <expf+0x28>
 802062e:	490c      	ldr	r1, [pc, #48]	@ (8020660 <expf+0x44>)
 8020630:	4628      	mov	r0, r5
 8020632:	f7e0 fb33 	bl	8000c9c <__aeabi_fcmpgt>
 8020636:	b138      	cbz	r0, 8020648 <expf+0x2c>
 8020638:	f7ff fb80 	bl	801fd3c <__errno>
 802063c:	2322      	movs	r3, #34	@ 0x22
 802063e:	6003      	str	r3, [r0, #0]
 8020640:	f04f 44ff 	mov.w	r4, #2139095040	@ 0x7f800000
 8020644:	4620      	mov	r0, r4
 8020646:	bd38      	pop	{r3, r4, r5, pc}
 8020648:	4906      	ldr	r1, [pc, #24]	@ (8020664 <expf+0x48>)
 802064a:	4628      	mov	r0, r5
 802064c:	f7e0 fb08 	bl	8000c60 <__aeabi_fcmplt>
 8020650:	2800      	cmp	r0, #0
 8020652:	d0f7      	beq.n	8020644 <expf+0x28>
 8020654:	f7ff fb72 	bl	801fd3c <__errno>
 8020658:	2322      	movs	r3, #34	@ 0x22
 802065a:	6003      	str	r3, [r0, #0]
 802065c:	2400      	movs	r4, #0
 802065e:	e7f1      	b.n	8020644 <expf+0x28>
 8020660:	42b17217 	.word	0x42b17217
 8020664:	c2cff1b5 	.word	0xc2cff1b5

08020668 <finitef>:
 8020668:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 802066c:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8020670:	bfac      	ite	ge
 8020672:	2000      	movge	r0, #0
 8020674:	2001      	movlt	r0, #1
 8020676:	4770      	bx	lr

08020678 <with_errnof>:
 8020678:	b538      	push	{r3, r4, r5, lr}
 802067a:	4604      	mov	r4, r0
 802067c:	460d      	mov	r5, r1
 802067e:	f7ff fb5d 	bl	801fd3c <__errno>
 8020682:	6005      	str	r5, [r0, #0]
 8020684:	4620      	mov	r0, r4
 8020686:	bd38      	pop	{r3, r4, r5, pc}

08020688 <xflowf>:
 8020688:	b508      	push	{r3, lr}
 802068a:	b140      	cbz	r0, 802069e <xflowf+0x16>
 802068c:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 8020690:	f7e0 f948 	bl	8000924 <__aeabi_fmul>
 8020694:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8020698:	2122      	movs	r1, #34	@ 0x22
 802069a:	f7ff bfed 	b.w	8020678 <with_errnof>
 802069e:	4608      	mov	r0, r1
 80206a0:	e7f6      	b.n	8020690 <xflowf+0x8>

080206a2 <__math_uflowf>:
 80206a2:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 80206a6:	f7ff bfef 	b.w	8020688 <xflowf>

080206aa <__math_oflowf>:
 80206aa:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 80206ae:	f7ff bfeb 	b.w	8020688 <xflowf>
 80206b2:	0000      	movs	r0, r0
 80206b4:	0000      	movs	r0, r0
	...

080206b8 <floor>:
 80206b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80206bc:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80206c0:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 80206c4:	2e13      	cmp	r6, #19
 80206c6:	4602      	mov	r2, r0
 80206c8:	460b      	mov	r3, r1
 80206ca:	460c      	mov	r4, r1
 80206cc:	4605      	mov	r5, r0
 80206ce:	4680      	mov	r8, r0
 80206d0:	dc35      	bgt.n	802073e <floor+0x86>
 80206d2:	2e00      	cmp	r6, #0
 80206d4:	da17      	bge.n	8020706 <floor+0x4e>
 80206d6:	a334      	add	r3, pc, #208	@ (adr r3, 80207a8 <floor+0xf0>)
 80206d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80206dc:	f7df fdae 	bl	800023c <__adddf3>
 80206e0:	2200      	movs	r2, #0
 80206e2:	2300      	movs	r3, #0
 80206e4:	f7df ffde 	bl	80006a4 <__aeabi_dcmpgt>
 80206e8:	b150      	cbz	r0, 8020700 <floor+0x48>
 80206ea:	2c00      	cmp	r4, #0
 80206ec:	da57      	bge.n	802079e <floor+0xe6>
 80206ee:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80206f2:	432c      	orrs	r4, r5
 80206f4:	2500      	movs	r5, #0
 80206f6:	42ac      	cmp	r4, r5
 80206f8:	4c2d      	ldr	r4, [pc, #180]	@ (80207b0 <floor+0xf8>)
 80206fa:	bf08      	it	eq
 80206fc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8020700:	4623      	mov	r3, r4
 8020702:	462a      	mov	r2, r5
 8020704:	e024      	b.n	8020750 <floor+0x98>
 8020706:	4f2b      	ldr	r7, [pc, #172]	@ (80207b4 <floor+0xfc>)
 8020708:	4137      	asrs	r7, r6
 802070a:	ea01 0c07 	and.w	ip, r1, r7
 802070e:	ea5c 0c00 	orrs.w	ip, ip, r0
 8020712:	d01d      	beq.n	8020750 <floor+0x98>
 8020714:	a324      	add	r3, pc, #144	@ (adr r3, 80207a8 <floor+0xf0>)
 8020716:	e9d3 2300 	ldrd	r2, r3, [r3]
 802071a:	f7df fd8f 	bl	800023c <__adddf3>
 802071e:	2200      	movs	r2, #0
 8020720:	2300      	movs	r3, #0
 8020722:	f7df ffbf 	bl	80006a4 <__aeabi_dcmpgt>
 8020726:	2800      	cmp	r0, #0
 8020728:	d0ea      	beq.n	8020700 <floor+0x48>
 802072a:	2c00      	cmp	r4, #0
 802072c:	bfbe      	ittt	lt
 802072e:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8020732:	4133      	asrlt	r3, r6
 8020734:	18e4      	addlt	r4, r4, r3
 8020736:	ea24 0407 	bic.w	r4, r4, r7
 802073a:	2500      	movs	r5, #0
 802073c:	e7e0      	b.n	8020700 <floor+0x48>
 802073e:	2e33      	cmp	r6, #51	@ 0x33
 8020740:	dd0a      	ble.n	8020758 <floor+0xa0>
 8020742:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8020746:	d103      	bne.n	8020750 <floor+0x98>
 8020748:	f7df fd78 	bl	800023c <__adddf3>
 802074c:	4602      	mov	r2, r0
 802074e:	460b      	mov	r3, r1
 8020750:	4610      	mov	r0, r2
 8020752:	4619      	mov	r1, r3
 8020754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020758:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 802075c:	f04f 3cff 	mov.w	ip, #4294967295
 8020760:	fa2c f707 	lsr.w	r7, ip, r7
 8020764:	4207      	tst	r7, r0
 8020766:	d0f3      	beq.n	8020750 <floor+0x98>
 8020768:	a30f      	add	r3, pc, #60	@ (adr r3, 80207a8 <floor+0xf0>)
 802076a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802076e:	f7df fd65 	bl	800023c <__adddf3>
 8020772:	2200      	movs	r2, #0
 8020774:	2300      	movs	r3, #0
 8020776:	f7df ff95 	bl	80006a4 <__aeabi_dcmpgt>
 802077a:	2800      	cmp	r0, #0
 802077c:	d0c0      	beq.n	8020700 <floor+0x48>
 802077e:	2c00      	cmp	r4, #0
 8020780:	da0a      	bge.n	8020798 <floor+0xe0>
 8020782:	2e14      	cmp	r6, #20
 8020784:	d101      	bne.n	802078a <floor+0xd2>
 8020786:	3401      	adds	r4, #1
 8020788:	e006      	b.n	8020798 <floor+0xe0>
 802078a:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 802078e:	2301      	movs	r3, #1
 8020790:	40b3      	lsls	r3, r6
 8020792:	441d      	add	r5, r3
 8020794:	4545      	cmp	r5, r8
 8020796:	d3f6      	bcc.n	8020786 <floor+0xce>
 8020798:	ea25 0507 	bic.w	r5, r5, r7
 802079c:	e7b0      	b.n	8020700 <floor+0x48>
 802079e:	2500      	movs	r5, #0
 80207a0:	462c      	mov	r4, r5
 80207a2:	e7ad      	b.n	8020700 <floor+0x48>
 80207a4:	f3af 8000 	nop.w
 80207a8:	8800759c 	.word	0x8800759c
 80207ac:	7e37e43c 	.word	0x7e37e43c
 80207b0:	bff00000 	.word	0xbff00000
 80207b4:	000fffff 	.word	0x000fffff

080207b8 <__ieee754_expf>:
 80207b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80207bc:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80207c0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80207c4:	4604      	mov	r4, r0
 80207c6:	d904      	bls.n	80207d2 <__ieee754_expf+0x1a>
 80207c8:	4601      	mov	r1, r0
 80207ca:	f7df ffa3 	bl	8000714 <__addsf3>
 80207ce:	4604      	mov	r4, r0
 80207d0:	e005      	b.n	80207de <__ieee754_expf+0x26>
 80207d2:	ea4f 76d0 	mov.w	r6, r0, lsr #31
 80207d6:	d105      	bne.n	80207e4 <__ieee754_expf+0x2c>
 80207d8:	2e00      	cmp	r6, #0
 80207da:	f040 80c3 	bne.w	8020964 <__ieee754_expf+0x1ac>
 80207de:	4620      	mov	r0, r4
 80207e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80207e4:	4960      	ldr	r1, [pc, #384]	@ (8020968 <__ieee754_expf+0x1b0>)
 80207e6:	4288      	cmp	r0, r1
 80207e8:	dd04      	ble.n	80207f4 <__ieee754_expf+0x3c>
 80207ea:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80207ee:	2000      	movs	r0, #0
 80207f0:	f7ff bf5b 	b.w	80206aa <__math_oflowf>
 80207f4:	2800      	cmp	r0, #0
 80207f6:	da07      	bge.n	8020808 <__ieee754_expf+0x50>
 80207f8:	4a5c      	ldr	r2, [pc, #368]	@ (802096c <__ieee754_expf+0x1b4>)
 80207fa:	4293      	cmp	r3, r2
 80207fc:	d904      	bls.n	8020808 <__ieee754_expf+0x50>
 80207fe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020802:	2000      	movs	r0, #0
 8020804:	f7ff bf4d 	b.w	80206a2 <__math_uflowf>
 8020808:	4a59      	ldr	r2, [pc, #356]	@ (8020970 <__ieee754_expf+0x1b8>)
 802080a:	4293      	cmp	r3, r2
 802080c:	d971      	bls.n	80208f2 <__ieee754_expf+0x13a>
 802080e:	4a59      	ldr	r2, [pc, #356]	@ (8020974 <__ieee754_expf+0x1bc>)
 8020810:	4293      	cmp	r3, r2
 8020812:	d851      	bhi.n	80208b8 <__ieee754_expf+0x100>
 8020814:	4b58      	ldr	r3, [pc, #352]	@ (8020978 <__ieee754_expf+0x1c0>)
 8020816:	4620      	mov	r0, r4
 8020818:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 802081c:	f7df ff78 	bl	8000710 <__aeabi_fsub>
 8020820:	4b56      	ldr	r3, [pc, #344]	@ (802097c <__ieee754_expf+0x1c4>)
 8020822:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 8020826:	f086 0301 	eor.w	r3, r6, #1
 802082a:	4605      	mov	r5, r0
 802082c:	eba3 0806 	sub.w	r8, r3, r6
 8020830:	4639      	mov	r1, r7
 8020832:	4628      	mov	r0, r5
 8020834:	f7df ff6c 	bl	8000710 <__aeabi_fsub>
 8020838:	4604      	mov	r4, r0
 802083a:	4621      	mov	r1, r4
 802083c:	4620      	mov	r0, r4
 802083e:	f7e0 f871 	bl	8000924 <__aeabi_fmul>
 8020842:	494f      	ldr	r1, [pc, #316]	@ (8020980 <__ieee754_expf+0x1c8>)
 8020844:	4606      	mov	r6, r0
 8020846:	f7e0 f86d 	bl	8000924 <__aeabi_fmul>
 802084a:	494e      	ldr	r1, [pc, #312]	@ (8020984 <__ieee754_expf+0x1cc>)
 802084c:	f7df ff60 	bl	8000710 <__aeabi_fsub>
 8020850:	4631      	mov	r1, r6
 8020852:	f7e0 f867 	bl	8000924 <__aeabi_fmul>
 8020856:	494c      	ldr	r1, [pc, #304]	@ (8020988 <__ieee754_expf+0x1d0>)
 8020858:	f7df ff5c 	bl	8000714 <__addsf3>
 802085c:	4631      	mov	r1, r6
 802085e:	f7e0 f861 	bl	8000924 <__aeabi_fmul>
 8020862:	494a      	ldr	r1, [pc, #296]	@ (802098c <__ieee754_expf+0x1d4>)
 8020864:	f7df ff54 	bl	8000710 <__aeabi_fsub>
 8020868:	4631      	mov	r1, r6
 802086a:	f7e0 f85b 	bl	8000924 <__aeabi_fmul>
 802086e:	4948      	ldr	r1, [pc, #288]	@ (8020990 <__ieee754_expf+0x1d8>)
 8020870:	f7df ff50 	bl	8000714 <__addsf3>
 8020874:	4631      	mov	r1, r6
 8020876:	f7e0 f855 	bl	8000924 <__aeabi_fmul>
 802087a:	4601      	mov	r1, r0
 802087c:	4620      	mov	r0, r4
 802087e:	f7df ff47 	bl	8000710 <__aeabi_fsub>
 8020882:	4601      	mov	r1, r0
 8020884:	4606      	mov	r6, r0
 8020886:	4620      	mov	r0, r4
 8020888:	f7e0 f84c 	bl	8000924 <__aeabi_fmul>
 802088c:	4681      	mov	r9, r0
 802088e:	f1b8 0f00 	cmp.w	r8, #0
 8020892:	d143      	bne.n	802091c <__ieee754_expf+0x164>
 8020894:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8020898:	4630      	mov	r0, r6
 802089a:	f7df ff39 	bl	8000710 <__aeabi_fsub>
 802089e:	4601      	mov	r1, r0
 80208a0:	4648      	mov	r0, r9
 80208a2:	f7e0 f8f3 	bl	8000a8c <__aeabi_fdiv>
 80208a6:	4621      	mov	r1, r4
 80208a8:	f7df ff32 	bl	8000710 <__aeabi_fsub>
 80208ac:	4601      	mov	r1, r0
 80208ae:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80208b2:	f7df ff2d 	bl	8000710 <__aeabi_fsub>
 80208b6:	e78a      	b.n	80207ce <__ieee754_expf+0x16>
 80208b8:	4936      	ldr	r1, [pc, #216]	@ (8020994 <__ieee754_expf+0x1dc>)
 80208ba:	4620      	mov	r0, r4
 80208bc:	f7e0 f832 	bl	8000924 <__aeabi_fmul>
 80208c0:	4b35      	ldr	r3, [pc, #212]	@ (8020998 <__ieee754_expf+0x1e0>)
 80208c2:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 80208c6:	f7df ff25 	bl	8000714 <__addsf3>
 80208ca:	f7e0 f9f1 	bl	8000cb0 <__aeabi_f2iz>
 80208ce:	4680      	mov	r8, r0
 80208d0:	f7df ffd4 	bl	800087c <__aeabi_i2f>
 80208d4:	4931      	ldr	r1, [pc, #196]	@ (802099c <__ieee754_expf+0x1e4>)
 80208d6:	4606      	mov	r6, r0
 80208d8:	f7e0 f824 	bl	8000924 <__aeabi_fmul>
 80208dc:	4601      	mov	r1, r0
 80208de:	4620      	mov	r0, r4
 80208e0:	f7df ff16 	bl	8000710 <__aeabi_fsub>
 80208e4:	492e      	ldr	r1, [pc, #184]	@ (80209a0 <__ieee754_expf+0x1e8>)
 80208e6:	4605      	mov	r5, r0
 80208e8:	4630      	mov	r0, r6
 80208ea:	f7e0 f81b 	bl	8000924 <__aeabi_fmul>
 80208ee:	4607      	mov	r7, r0
 80208f0:	e79e      	b.n	8020830 <__ieee754_expf+0x78>
 80208f2:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 80208f6:	d20c      	bcs.n	8020912 <__ieee754_expf+0x15a>
 80208f8:	492a      	ldr	r1, [pc, #168]	@ (80209a4 <__ieee754_expf+0x1ec>)
 80208fa:	4620      	mov	r0, r4
 80208fc:	f7df ff0a 	bl	8000714 <__addsf3>
 8020900:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8020904:	f7e0 f9ca 	bl	8000c9c <__aeabi_fcmpgt>
 8020908:	b130      	cbz	r0, 8020918 <__ieee754_expf+0x160>
 802090a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 802090e:	4620      	mov	r0, r4
 8020910:	e75b      	b.n	80207ca <__ieee754_expf+0x12>
 8020912:	f04f 0800 	mov.w	r8, #0
 8020916:	e790      	b.n	802083a <__ieee754_expf+0x82>
 8020918:	4680      	mov	r8, r0
 802091a:	e78e      	b.n	802083a <__ieee754_expf+0x82>
 802091c:	4631      	mov	r1, r6
 802091e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8020922:	f7df fef5 	bl	8000710 <__aeabi_fsub>
 8020926:	4601      	mov	r1, r0
 8020928:	4648      	mov	r0, r9
 802092a:	f7e0 f8af 	bl	8000a8c <__aeabi_fdiv>
 802092e:	4601      	mov	r1, r0
 8020930:	4638      	mov	r0, r7
 8020932:	f7df feed 	bl	8000710 <__aeabi_fsub>
 8020936:	4629      	mov	r1, r5
 8020938:	f7df feea 	bl	8000710 <__aeabi_fsub>
 802093c:	4601      	mov	r1, r0
 802093e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8020942:	f7df fee5 	bl	8000710 <__aeabi_fsub>
 8020946:	f118 0f7d 	cmn.w	r8, #125	@ 0x7d
 802094a:	db02      	blt.n	8020952 <__ieee754_expf+0x19a>
 802094c:	eb00 54c8 	add.w	r4, r0, r8, lsl #23
 8020950:	e745      	b.n	80207de <__ieee754_expf+0x26>
 8020952:	f108 0864 	add.w	r8, r8, #100	@ 0x64
 8020956:	f04f 6158 	mov.w	r1, #226492416	@ 0xd800000
 802095a:	eb00 50c8 	add.w	r0, r0, r8, lsl #23
 802095e:	f7df ffe1 	bl	8000924 <__aeabi_fmul>
 8020962:	e734      	b.n	80207ce <__ieee754_expf+0x16>
 8020964:	2400      	movs	r4, #0
 8020966:	e73a      	b.n	80207de <__ieee754_expf+0x26>
 8020968:	42b17217 	.word	0x42b17217
 802096c:	42cff1b5 	.word	0x42cff1b5
 8020970:	3eb17218 	.word	0x3eb17218
 8020974:	3f851591 	.word	0x3f851591
 8020978:	080216c4 	.word	0x080216c4
 802097c:	080216bc 	.word	0x080216bc
 8020980:	3331bb4c 	.word	0x3331bb4c
 8020984:	35ddea0e 	.word	0x35ddea0e
 8020988:	388ab355 	.word	0x388ab355
 802098c:	3b360b61 	.word	0x3b360b61
 8020990:	3e2aaaab 	.word	0x3e2aaaab
 8020994:	3fb8aa3b 	.word	0x3fb8aa3b
 8020998:	080216cc 	.word	0x080216cc
 802099c:	3f317180 	.word	0x3f317180
 80209a0:	3717f7d1 	.word	0x3717f7d1
 80209a4:	7149f2ca 	.word	0x7149f2ca

080209a8 <_init>:
 80209a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80209aa:	bf00      	nop
 80209ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80209ae:	bc08      	pop	{r3}
 80209b0:	469e      	mov	lr, r3
 80209b2:	4770      	bx	lr

080209b4 <_fini>:
 80209b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80209b6:	bf00      	nop
 80209b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80209ba:	bc08      	pop	{r3}
 80209bc:	469e      	mov	lr, r3
 80209be:	4770      	bx	lr
