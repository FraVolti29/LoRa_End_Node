
LoRaWAN_End_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000204e0  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d38  08020620  08020620  00021620  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021358  08021358  000245d8  2**0
                  CONTENTS
  4 .ARM          00000008  08021358  08021358  00022358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021360  08021360  000245d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08021360  08021360  00022360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08021368  08021368  00022368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .USER_embedded_Keys 000000d8  0803e500  0803e500  00024500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000698  20000000  08021370  00023000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .AI_SRAM1     0000002c  200006a0  08021a08  000236a0  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 11 LW_NVM_RAM    00000b98  20008000  20008000  00025000  2**2
                  ALLOC
 12 .bss          0000176c  200006cc  200006cc  000246cc  2**2
                  ALLOC
 13 RAM1_region   00000000  20001e38  20001e38  000245d8  2**0
                  CONTENTS
 14 RAM2_region   00000000  20009000  20009000  000245d8  2**0
                  CONTENTS
 15 ._user_heap_stack 00000a00  20001e38  20001e38  000246cc  2**0
                  ALLOC
 16 .ARM.attributes 0000002a  00000000  00000000  000245d8  2**0
                  CONTENTS, READONLY
 17 .debug_info   0004ce59  00000000  00000000  00024602  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 0000b321  00000000  00000000  0007145b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003aa0  00000000  00000000  0007c780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00002c96  00000000  00000000  00080220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00032d74  00000000  00000000  00082eb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   000500f1  00000000  00000000  000b5c2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000f7218  00000000  00000000  00105d1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000086  00000000  00000000  001fcf33  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000fc54  00000000  00000000  001fcfbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 000000af  00000000  00000000  0020cc10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200006cc 	.word	0x200006cc
 800015c:	00000000 	.word	0x00000000
 8000160:	08020608 	.word	0x08020608

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200006d0 	.word	0x200006d0
 800017c:	08020608 	.word	0x08020608

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__gedf2>:
 80005a8:	f04f 3cff 	mov.w	ip, #4294967295
 80005ac:	e006      	b.n	80005bc <__cmpdf2+0x4>
 80005ae:	bf00      	nop

080005b0 <__ledf2>:
 80005b0:	f04f 0c01 	mov.w	ip, #1
 80005b4:	e002      	b.n	80005bc <__cmpdf2+0x4>
 80005b6:	bf00      	nop

080005b8 <__cmpdf2>:
 80005b8:	f04f 0c01 	mov.w	ip, #1
 80005bc:	f84d cd04 	str.w	ip, [sp, #-4]!
 80005c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005cc:	bf18      	it	ne
 80005ce:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80005d2:	d01b      	beq.n	800060c <__cmpdf2+0x54>
 80005d4:	b001      	add	sp, #4
 80005d6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80005da:	bf0c      	ite	eq
 80005dc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80005e0:	ea91 0f03 	teqne	r1, r3
 80005e4:	bf02      	ittt	eq
 80005e6:	ea90 0f02 	teqeq	r0, r2
 80005ea:	2000      	moveq	r0, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	f110 0f00 	cmn.w	r0, #0
 80005f2:	ea91 0f03 	teq	r1, r3
 80005f6:	bf58      	it	pl
 80005f8:	4299      	cmppl	r1, r3
 80005fa:	bf08      	it	eq
 80005fc:	4290      	cmpeq	r0, r2
 80005fe:	bf2c      	ite	cs
 8000600:	17d8      	asrcs	r0, r3, #31
 8000602:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000606:	f040 0001 	orr.w	r0, r0, #1
 800060a:	4770      	bx	lr
 800060c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000610:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000614:	d102      	bne.n	800061c <__cmpdf2+0x64>
 8000616:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800061a:	d107      	bne.n	800062c <__cmpdf2+0x74>
 800061c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000620:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000624:	d1d6      	bne.n	80005d4 <__cmpdf2+0x1c>
 8000626:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800062a:	d0d3      	beq.n	80005d4 <__cmpdf2+0x1c>
 800062c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop

08000634 <__aeabi_cdrcmple>:
 8000634:	4684      	mov	ip, r0
 8000636:	4610      	mov	r0, r2
 8000638:	4662      	mov	r2, ip
 800063a:	468c      	mov	ip, r1
 800063c:	4619      	mov	r1, r3
 800063e:	4663      	mov	r3, ip
 8000640:	e000      	b.n	8000644 <__aeabi_cdcmpeq>
 8000642:	bf00      	nop

08000644 <__aeabi_cdcmpeq>:
 8000644:	b501      	push	{r0, lr}
 8000646:	f7ff ffb7 	bl	80005b8 <__cmpdf2>
 800064a:	2800      	cmp	r0, #0
 800064c:	bf48      	it	mi
 800064e:	f110 0f00 	cmnmi.w	r0, #0
 8000652:	bd01      	pop	{r0, pc}

08000654 <__aeabi_dcmpeq>:
 8000654:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000658:	f7ff fff4 	bl	8000644 <__aeabi_cdcmpeq>
 800065c:	bf0c      	ite	eq
 800065e:	2001      	moveq	r0, #1
 8000660:	2000      	movne	r0, #0
 8000662:	f85d fb08 	ldr.w	pc, [sp], #8
 8000666:	bf00      	nop

08000668 <__aeabi_dcmplt>:
 8000668:	f84d ed08 	str.w	lr, [sp, #-8]!
 800066c:	f7ff ffea 	bl	8000644 <__aeabi_cdcmpeq>
 8000670:	bf34      	ite	cc
 8000672:	2001      	movcc	r0, #1
 8000674:	2000      	movcs	r0, #0
 8000676:	f85d fb08 	ldr.w	pc, [sp], #8
 800067a:	bf00      	nop

0800067c <__aeabi_dcmple>:
 800067c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000680:	f7ff ffe0 	bl	8000644 <__aeabi_cdcmpeq>
 8000684:	bf94      	ite	ls
 8000686:	2001      	movls	r0, #1
 8000688:	2000      	movhi	r0, #0
 800068a:	f85d fb08 	ldr.w	pc, [sp], #8
 800068e:	bf00      	nop

08000690 <__aeabi_dcmpge>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff ffce 	bl	8000634 <__aeabi_cdrcmple>
 8000698:	bf94      	ite	ls
 800069a:	2001      	movls	r0, #1
 800069c:	2000      	movhi	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_dcmpgt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffc4 	bl	8000634 <__aeabi_cdrcmple>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_d2iz>:
 80006b8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80006bc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80006c0:	d215      	bcs.n	80006ee <__aeabi_d2iz+0x36>
 80006c2:	d511      	bpl.n	80006e8 <__aeabi_d2iz+0x30>
 80006c4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80006c8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80006cc:	d912      	bls.n	80006f4 <__aeabi_d2iz+0x3c>
 80006ce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80006d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80006d6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80006da:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80006de:	fa23 f002 	lsr.w	r0, r3, r2
 80006e2:	bf18      	it	ne
 80006e4:	4240      	negne	r0, r0
 80006e6:	4770      	bx	lr
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	4770      	bx	lr
 80006ee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80006f2:	d105      	bne.n	8000700 <__aeabi_d2iz+0x48>
 80006f4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80006f8:	bf08      	it	eq
 80006fa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80006fe:	4770      	bx	lr
 8000700:	f04f 0000 	mov.w	r0, #0
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop

08000708 <__aeabi_frsub>:
 8000708:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 800070c:	e002      	b.n	8000714 <__addsf3>
 800070e:	bf00      	nop

08000710 <__aeabi_fsub>:
 8000710:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000714 <__addsf3>:
 8000714:	0042      	lsls	r2, r0, #1
 8000716:	bf1f      	itttt	ne
 8000718:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800071c:	ea92 0f03 	teqne	r2, r3
 8000720:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000724:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000728:	d06a      	beq.n	8000800 <__addsf3+0xec>
 800072a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800072e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000732:	bfc1      	itttt	gt
 8000734:	18d2      	addgt	r2, r2, r3
 8000736:	4041      	eorgt	r1, r0
 8000738:	4048      	eorgt	r0, r1
 800073a:	4041      	eorgt	r1, r0
 800073c:	bfb8      	it	lt
 800073e:	425b      	neglt	r3, r3
 8000740:	2b19      	cmp	r3, #25
 8000742:	bf88      	it	hi
 8000744:	4770      	bxhi	lr
 8000746:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800074a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800074e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000752:	bf18      	it	ne
 8000754:	4240      	negne	r0, r0
 8000756:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800075a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800075e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000762:	bf18      	it	ne
 8000764:	4249      	negne	r1, r1
 8000766:	ea92 0f03 	teq	r2, r3
 800076a:	d03f      	beq.n	80007ec <__addsf3+0xd8>
 800076c:	f1a2 0201 	sub.w	r2, r2, #1
 8000770:	fa41 fc03 	asr.w	ip, r1, r3
 8000774:	eb10 000c 	adds.w	r0, r0, ip
 8000778:	f1c3 0320 	rsb	r3, r3, #32
 800077c:	fa01 f103 	lsl.w	r1, r1, r3
 8000780:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000784:	d502      	bpl.n	800078c <__addsf3+0x78>
 8000786:	4249      	negs	r1, r1
 8000788:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800078c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000790:	d313      	bcc.n	80007ba <__addsf3+0xa6>
 8000792:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000796:	d306      	bcc.n	80007a6 <__addsf3+0x92>
 8000798:	0840      	lsrs	r0, r0, #1
 800079a:	ea4f 0131 	mov.w	r1, r1, rrx
 800079e:	f102 0201 	add.w	r2, r2, #1
 80007a2:	2afe      	cmp	r2, #254	@ 0xfe
 80007a4:	d251      	bcs.n	800084a <__addsf3+0x136>
 80007a6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80007aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80007ae:	bf08      	it	eq
 80007b0:	f020 0001 	biceq.w	r0, r0, #1
 80007b4:	ea40 0003 	orr.w	r0, r0, r3
 80007b8:	4770      	bx	lr
 80007ba:	0049      	lsls	r1, r1, #1
 80007bc:	eb40 0000 	adc.w	r0, r0, r0
 80007c0:	3a01      	subs	r2, #1
 80007c2:	bf28      	it	cs
 80007c4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80007c8:	d2ed      	bcs.n	80007a6 <__addsf3+0x92>
 80007ca:	fab0 fc80 	clz	ip, r0
 80007ce:	f1ac 0c08 	sub.w	ip, ip, #8
 80007d2:	ebb2 020c 	subs.w	r2, r2, ip
 80007d6:	fa00 f00c 	lsl.w	r0, r0, ip
 80007da:	bfaa      	itet	ge
 80007dc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80007e0:	4252      	neglt	r2, r2
 80007e2:	4318      	orrge	r0, r3
 80007e4:	bfbc      	itt	lt
 80007e6:	40d0      	lsrlt	r0, r2
 80007e8:	4318      	orrlt	r0, r3
 80007ea:	4770      	bx	lr
 80007ec:	f092 0f00 	teq	r2, #0
 80007f0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80007f4:	bf06      	itte	eq
 80007f6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80007fa:	3201      	addeq	r2, #1
 80007fc:	3b01      	subne	r3, #1
 80007fe:	e7b5      	b.n	800076c <__addsf3+0x58>
 8000800:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000804:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000808:	bf18      	it	ne
 800080a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800080e:	d021      	beq.n	8000854 <__addsf3+0x140>
 8000810:	ea92 0f03 	teq	r2, r3
 8000814:	d004      	beq.n	8000820 <__addsf3+0x10c>
 8000816:	f092 0f00 	teq	r2, #0
 800081a:	bf08      	it	eq
 800081c:	4608      	moveq	r0, r1
 800081e:	4770      	bx	lr
 8000820:	ea90 0f01 	teq	r0, r1
 8000824:	bf1c      	itt	ne
 8000826:	2000      	movne	r0, #0
 8000828:	4770      	bxne	lr
 800082a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800082e:	d104      	bne.n	800083a <__addsf3+0x126>
 8000830:	0040      	lsls	r0, r0, #1
 8000832:	bf28      	it	cs
 8000834:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000838:	4770      	bx	lr
 800083a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800083e:	bf3c      	itt	cc
 8000840:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000844:	4770      	bxcc	lr
 8000846:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800084a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800084e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000852:	4770      	bx	lr
 8000854:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000858:	bf16      	itet	ne
 800085a:	4608      	movne	r0, r1
 800085c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000860:	4601      	movne	r1, r0
 8000862:	0242      	lsls	r2, r0, #9
 8000864:	bf06      	itte	eq
 8000866:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800086a:	ea90 0f01 	teqeq	r0, r1
 800086e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000872:	4770      	bx	lr

08000874 <__aeabi_ui2f>:
 8000874:	f04f 0300 	mov.w	r3, #0
 8000878:	e004      	b.n	8000884 <__aeabi_i2f+0x8>
 800087a:	bf00      	nop

0800087c <__aeabi_i2f>:
 800087c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000880:	bf48      	it	mi
 8000882:	4240      	negmi	r0, r0
 8000884:	ea5f 0c00 	movs.w	ip, r0
 8000888:	bf08      	it	eq
 800088a:	4770      	bxeq	lr
 800088c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000890:	4601      	mov	r1, r0
 8000892:	f04f 0000 	mov.w	r0, #0
 8000896:	e01c      	b.n	80008d2 <__aeabi_l2f+0x2a>

08000898 <__aeabi_ul2f>:
 8000898:	ea50 0201 	orrs.w	r2, r0, r1
 800089c:	bf08      	it	eq
 800089e:	4770      	bxeq	lr
 80008a0:	f04f 0300 	mov.w	r3, #0
 80008a4:	e00a      	b.n	80008bc <__aeabi_l2f+0x14>
 80008a6:	bf00      	nop

080008a8 <__aeabi_l2f>:
 80008a8:	ea50 0201 	orrs.w	r2, r0, r1
 80008ac:	bf08      	it	eq
 80008ae:	4770      	bxeq	lr
 80008b0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80008b4:	d502      	bpl.n	80008bc <__aeabi_l2f+0x14>
 80008b6:	4240      	negs	r0, r0
 80008b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80008bc:	ea5f 0c01 	movs.w	ip, r1
 80008c0:	bf02      	ittt	eq
 80008c2:	4684      	moveq	ip, r0
 80008c4:	4601      	moveq	r1, r0
 80008c6:	2000      	moveq	r0, #0
 80008c8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80008cc:	bf08      	it	eq
 80008ce:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80008d2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80008d6:	fabc f28c 	clz	r2, ip
 80008da:	3a08      	subs	r2, #8
 80008dc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80008e0:	db10      	blt.n	8000904 <__aeabi_l2f+0x5c>
 80008e2:	fa01 fc02 	lsl.w	ip, r1, r2
 80008e6:	4463      	add	r3, ip
 80008e8:	fa00 fc02 	lsl.w	ip, r0, r2
 80008ec:	f1c2 0220 	rsb	r2, r2, #32
 80008f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80008f4:	fa20 f202 	lsr.w	r2, r0, r2
 80008f8:	eb43 0002 	adc.w	r0, r3, r2
 80008fc:	bf08      	it	eq
 80008fe:	f020 0001 	biceq.w	r0, r0, #1
 8000902:	4770      	bx	lr
 8000904:	f102 0220 	add.w	r2, r2, #32
 8000908:	fa01 fc02 	lsl.w	ip, r1, r2
 800090c:	f1c2 0220 	rsb	r2, r2, #32
 8000910:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000914:	fa21 f202 	lsr.w	r2, r1, r2
 8000918:	eb43 0002 	adc.w	r0, r3, r2
 800091c:	bf08      	it	eq
 800091e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000922:	4770      	bx	lr

08000924 <__aeabi_fmul>:
 8000924:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000928:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800092c:	bf1e      	ittt	ne
 800092e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000932:	ea92 0f0c 	teqne	r2, ip
 8000936:	ea93 0f0c 	teqne	r3, ip
 800093a:	d06f      	beq.n	8000a1c <__aeabi_fmul+0xf8>
 800093c:	441a      	add	r2, r3
 800093e:	ea80 0c01 	eor.w	ip, r0, r1
 8000942:	0240      	lsls	r0, r0, #9
 8000944:	bf18      	it	ne
 8000946:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800094a:	d01e      	beq.n	800098a <__aeabi_fmul+0x66>
 800094c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000950:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000954:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000958:	fba0 3101 	umull	r3, r1, r0, r1
 800095c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000960:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000964:	bf3e      	ittt	cc
 8000966:	0049      	lslcc	r1, r1, #1
 8000968:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800096c:	005b      	lslcc	r3, r3, #1
 800096e:	ea40 0001 	orr.w	r0, r0, r1
 8000972:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000976:	2afd      	cmp	r2, #253	@ 0xfd
 8000978:	d81d      	bhi.n	80009b6 <__aeabi_fmul+0x92>
 800097a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800097e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000982:	bf08      	it	eq
 8000984:	f020 0001 	biceq.w	r0, r0, #1
 8000988:	4770      	bx	lr
 800098a:	f090 0f00 	teq	r0, #0
 800098e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000992:	bf08      	it	eq
 8000994:	0249      	lsleq	r1, r1, #9
 8000996:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800099a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800099e:	3a7f      	subs	r2, #127	@ 0x7f
 80009a0:	bfc2      	ittt	gt
 80009a2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80009a6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80009aa:	4770      	bxgt	lr
 80009ac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009b0:	f04f 0300 	mov.w	r3, #0
 80009b4:	3a01      	subs	r2, #1
 80009b6:	dc5d      	bgt.n	8000a74 <__aeabi_fmul+0x150>
 80009b8:	f112 0f19 	cmn.w	r2, #25
 80009bc:	bfdc      	itt	le
 80009be:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80009c2:	4770      	bxle	lr
 80009c4:	f1c2 0200 	rsb	r2, r2, #0
 80009c8:	0041      	lsls	r1, r0, #1
 80009ca:	fa21 f102 	lsr.w	r1, r1, r2
 80009ce:	f1c2 0220 	rsb	r2, r2, #32
 80009d2:	fa00 fc02 	lsl.w	ip, r0, r2
 80009d6:	ea5f 0031 	movs.w	r0, r1, rrx
 80009da:	f140 0000 	adc.w	r0, r0, #0
 80009de:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80009e2:	bf08      	it	eq
 80009e4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80009e8:	4770      	bx	lr
 80009ea:	f092 0f00 	teq	r2, #0
 80009ee:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80009f2:	bf02      	ittt	eq
 80009f4:	0040      	lsleq	r0, r0, #1
 80009f6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80009fa:	3a01      	subeq	r2, #1
 80009fc:	d0f9      	beq.n	80009f2 <__aeabi_fmul+0xce>
 80009fe:	ea40 000c 	orr.w	r0, r0, ip
 8000a02:	f093 0f00 	teq	r3, #0
 8000a06:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a0a:	bf02      	ittt	eq
 8000a0c:	0049      	lsleq	r1, r1, #1
 8000a0e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000a12:	3b01      	subeq	r3, #1
 8000a14:	d0f9      	beq.n	8000a0a <__aeabi_fmul+0xe6>
 8000a16:	ea41 010c 	orr.w	r1, r1, ip
 8000a1a:	e78f      	b.n	800093c <__aeabi_fmul+0x18>
 8000a1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a20:	ea92 0f0c 	teq	r2, ip
 8000a24:	bf18      	it	ne
 8000a26:	ea93 0f0c 	teqne	r3, ip
 8000a2a:	d00a      	beq.n	8000a42 <__aeabi_fmul+0x11e>
 8000a2c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000a30:	bf18      	it	ne
 8000a32:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000a36:	d1d8      	bne.n	80009ea <__aeabi_fmul+0xc6>
 8000a38:	ea80 0001 	eor.w	r0, r0, r1
 8000a3c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000a40:	4770      	bx	lr
 8000a42:	f090 0f00 	teq	r0, #0
 8000a46:	bf17      	itett	ne
 8000a48:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000a4c:	4608      	moveq	r0, r1
 8000a4e:	f091 0f00 	teqne	r1, #0
 8000a52:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000a56:	d014      	beq.n	8000a82 <__aeabi_fmul+0x15e>
 8000a58:	ea92 0f0c 	teq	r2, ip
 8000a5c:	d101      	bne.n	8000a62 <__aeabi_fmul+0x13e>
 8000a5e:	0242      	lsls	r2, r0, #9
 8000a60:	d10f      	bne.n	8000a82 <__aeabi_fmul+0x15e>
 8000a62:	ea93 0f0c 	teq	r3, ip
 8000a66:	d103      	bne.n	8000a70 <__aeabi_fmul+0x14c>
 8000a68:	024b      	lsls	r3, r1, #9
 8000a6a:	bf18      	it	ne
 8000a6c:	4608      	movne	r0, r1
 8000a6e:	d108      	bne.n	8000a82 <__aeabi_fmul+0x15e>
 8000a70:	ea80 0001 	eor.w	r0, r0, r1
 8000a74:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000a78:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a7c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a80:	4770      	bx	lr
 8000a82:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a86:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_fdiv>:
 8000a8c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000a90:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000a94:	bf1e      	ittt	ne
 8000a96:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000a9a:	ea92 0f0c 	teqne	r2, ip
 8000a9e:	ea93 0f0c 	teqne	r3, ip
 8000aa2:	d069      	beq.n	8000b78 <__aeabi_fdiv+0xec>
 8000aa4:	eba2 0203 	sub.w	r2, r2, r3
 8000aa8:	ea80 0c01 	eor.w	ip, r0, r1
 8000aac:	0249      	lsls	r1, r1, #9
 8000aae:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ab2:	d037      	beq.n	8000b24 <__aeabi_fdiv+0x98>
 8000ab4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ab8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000abc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ac0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ac4:	428b      	cmp	r3, r1
 8000ac6:	bf38      	it	cc
 8000ac8:	005b      	lslcc	r3, r3, #1
 8000aca:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000ace:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ad2:	428b      	cmp	r3, r1
 8000ad4:	bf24      	itt	cs
 8000ad6:	1a5b      	subcs	r3, r3, r1
 8000ad8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000adc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ae0:	bf24      	itt	cs
 8000ae2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ae6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000aea:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000aee:	bf24      	itt	cs
 8000af0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000af4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000af8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000afc:	bf24      	itt	cs
 8000afe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000b02:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b06:	011b      	lsls	r3, r3, #4
 8000b08:	bf18      	it	ne
 8000b0a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000b0e:	d1e0      	bne.n	8000ad2 <__aeabi_fdiv+0x46>
 8000b10:	2afd      	cmp	r2, #253	@ 0xfd
 8000b12:	f63f af50 	bhi.w	80009b6 <__aeabi_fmul+0x92>
 8000b16:	428b      	cmp	r3, r1
 8000b18:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b1c:	bf08      	it	eq
 8000b1e:	f020 0001 	biceq.w	r0, r0, #1
 8000b22:	4770      	bx	lr
 8000b24:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000b28:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b2c:	327f      	adds	r2, #127	@ 0x7f
 8000b2e:	bfc2      	ittt	gt
 8000b30:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000b34:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b38:	4770      	bxgt	lr
 8000b3a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b3e:	f04f 0300 	mov.w	r3, #0
 8000b42:	3a01      	subs	r2, #1
 8000b44:	e737      	b.n	80009b6 <__aeabi_fmul+0x92>
 8000b46:	f092 0f00 	teq	r2, #0
 8000b4a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000b4e:	bf02      	ittt	eq
 8000b50:	0040      	lsleq	r0, r0, #1
 8000b52:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000b56:	3a01      	subeq	r2, #1
 8000b58:	d0f9      	beq.n	8000b4e <__aeabi_fdiv+0xc2>
 8000b5a:	ea40 000c 	orr.w	r0, r0, ip
 8000b5e:	f093 0f00 	teq	r3, #0
 8000b62:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b66:	bf02      	ittt	eq
 8000b68:	0049      	lsleq	r1, r1, #1
 8000b6a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000b6e:	3b01      	subeq	r3, #1
 8000b70:	d0f9      	beq.n	8000b66 <__aeabi_fdiv+0xda>
 8000b72:	ea41 010c 	orr.w	r1, r1, ip
 8000b76:	e795      	b.n	8000aa4 <__aeabi_fdiv+0x18>
 8000b78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000b7c:	ea92 0f0c 	teq	r2, ip
 8000b80:	d108      	bne.n	8000b94 <__aeabi_fdiv+0x108>
 8000b82:	0242      	lsls	r2, r0, #9
 8000b84:	f47f af7d 	bne.w	8000a82 <__aeabi_fmul+0x15e>
 8000b88:	ea93 0f0c 	teq	r3, ip
 8000b8c:	f47f af70 	bne.w	8000a70 <__aeabi_fmul+0x14c>
 8000b90:	4608      	mov	r0, r1
 8000b92:	e776      	b.n	8000a82 <__aeabi_fmul+0x15e>
 8000b94:	ea93 0f0c 	teq	r3, ip
 8000b98:	d104      	bne.n	8000ba4 <__aeabi_fdiv+0x118>
 8000b9a:	024b      	lsls	r3, r1, #9
 8000b9c:	f43f af4c 	beq.w	8000a38 <__aeabi_fmul+0x114>
 8000ba0:	4608      	mov	r0, r1
 8000ba2:	e76e      	b.n	8000a82 <__aeabi_fmul+0x15e>
 8000ba4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ba8:	bf18      	it	ne
 8000baa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000bae:	d1ca      	bne.n	8000b46 <__aeabi_fdiv+0xba>
 8000bb0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000bb4:	f47f af5c 	bne.w	8000a70 <__aeabi_fmul+0x14c>
 8000bb8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000bbc:	f47f af3c 	bne.w	8000a38 <__aeabi_fmul+0x114>
 8000bc0:	e75f      	b.n	8000a82 <__aeabi_fmul+0x15e>
 8000bc2:	bf00      	nop

08000bc4 <__gesf2>:
 8000bc4:	f04f 3cff 	mov.w	ip, #4294967295
 8000bc8:	e006      	b.n	8000bd8 <__cmpsf2+0x4>
 8000bca:	bf00      	nop

08000bcc <__lesf2>:
 8000bcc:	f04f 0c01 	mov.w	ip, #1
 8000bd0:	e002      	b.n	8000bd8 <__cmpsf2+0x4>
 8000bd2:	bf00      	nop

08000bd4 <__cmpsf2>:
 8000bd4:	f04f 0c01 	mov.w	ip, #1
 8000bd8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000bdc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000be0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000be8:	bf18      	it	ne
 8000bea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bee:	d011      	beq.n	8000c14 <__cmpsf2+0x40>
 8000bf0:	b001      	add	sp, #4
 8000bf2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000bf6:	bf18      	it	ne
 8000bf8:	ea90 0f01 	teqne	r0, r1
 8000bfc:	bf58      	it	pl
 8000bfe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000c02:	bf88      	it	hi
 8000c04:	17c8      	asrhi	r0, r1, #31
 8000c06:	bf38      	it	cc
 8000c08:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000c0c:	bf18      	it	ne
 8000c0e:	f040 0001 	orrne.w	r0, r0, #1
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	d102      	bne.n	8000c20 <__cmpsf2+0x4c>
 8000c1a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c1e:	d105      	bne.n	8000c2c <__cmpsf2+0x58>
 8000c20:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000c24:	d1e4      	bne.n	8000bf0 <__cmpsf2+0x1c>
 8000c26:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000c2a:	d0e1      	beq.n	8000bf0 <__cmpsf2+0x1c>
 8000c2c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop

08000c34 <__aeabi_cfrcmple>:
 8000c34:	4684      	mov	ip, r0
 8000c36:	4608      	mov	r0, r1
 8000c38:	4661      	mov	r1, ip
 8000c3a:	e7ff      	b.n	8000c3c <__aeabi_cfcmpeq>

08000c3c <__aeabi_cfcmpeq>:
 8000c3c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000c3e:	f7ff ffc9 	bl	8000bd4 <__cmpsf2>
 8000c42:	2800      	cmp	r0, #0
 8000c44:	bf48      	it	mi
 8000c46:	f110 0f00 	cmnmi.w	r0, #0
 8000c4a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000c4c <__aeabi_fcmpeq>:
 8000c4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c50:	f7ff fff4 	bl	8000c3c <__aeabi_cfcmpeq>
 8000c54:	bf0c      	ite	eq
 8000c56:	2001      	moveq	r0, #1
 8000c58:	2000      	movne	r0, #0
 8000c5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c5e:	bf00      	nop

08000c60 <__aeabi_fcmplt>:
 8000c60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c64:	f7ff ffea 	bl	8000c3c <__aeabi_cfcmpeq>
 8000c68:	bf34      	ite	cc
 8000c6a:	2001      	movcc	r0, #1
 8000c6c:	2000      	movcs	r0, #0
 8000c6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c72:	bf00      	nop

08000c74 <__aeabi_fcmple>:
 8000c74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c78:	f7ff ffe0 	bl	8000c3c <__aeabi_cfcmpeq>
 8000c7c:	bf94      	ite	ls
 8000c7e:	2001      	movls	r0, #1
 8000c80:	2000      	movhi	r0, #0
 8000c82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c86:	bf00      	nop

08000c88 <__aeabi_fcmpge>:
 8000c88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c8c:	f7ff ffd2 	bl	8000c34 <__aeabi_cfrcmple>
 8000c90:	bf94      	ite	ls
 8000c92:	2001      	movls	r0, #1
 8000c94:	2000      	movhi	r0, #0
 8000c96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c9a:	bf00      	nop

08000c9c <__aeabi_fcmpgt>:
 8000c9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ca0:	f7ff ffc8 	bl	8000c34 <__aeabi_cfrcmple>
 8000ca4:	bf34      	ite	cc
 8000ca6:	2001      	movcc	r0, #1
 8000ca8:	2000      	movcs	r0, #0
 8000caa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cae:	bf00      	nop

08000cb0 <__aeabi_f2iz>:
 8000cb0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000cb4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000cb8:	d30f      	bcc.n	8000cda <__aeabi_f2iz+0x2a>
 8000cba:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000cbe:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000cc2:	d90d      	bls.n	8000ce0 <__aeabi_f2iz+0x30>
 8000cc4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000cc8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ccc:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000cd0:	fa23 f002 	lsr.w	r0, r3, r2
 8000cd4:	bf18      	it	ne
 8000cd6:	4240      	negne	r0, r0
 8000cd8:	4770      	bx	lr
 8000cda:	f04f 0000 	mov.w	r0, #0
 8000cde:	4770      	bx	lr
 8000ce0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000ce4:	d101      	bne.n	8000cea <__aeabi_f2iz+0x3a>
 8000ce6:	0242      	lsls	r2, r0, #9
 8000ce8:	d105      	bne.n	8000cf6 <__aeabi_f2iz+0x46>
 8000cea:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000cee:	bf08      	it	eq
 8000cf0:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000cf4:	4770      	bx	lr
 8000cf6:	f04f 0000 	mov.w	r0, #0
 8000cfa:	4770      	bx	lr

08000cfc <__aeabi_f2uiz>:
 8000cfc:	0042      	lsls	r2, r0, #1
 8000cfe:	d20e      	bcs.n	8000d1e <__aeabi_f2uiz+0x22>
 8000d00:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000d04:	d30b      	bcc.n	8000d1e <__aeabi_f2uiz+0x22>
 8000d06:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000d0a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d0e:	d409      	bmi.n	8000d24 <__aeabi_f2uiz+0x28>
 8000d10:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d14:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000d18:	fa23 f002 	lsr.w	r0, r3, r2
 8000d1c:	4770      	bx	lr
 8000d1e:	f04f 0000 	mov.w	r0, #0
 8000d22:	4770      	bx	lr
 8000d24:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000d28:	d101      	bne.n	8000d2e <__aeabi_f2uiz+0x32>
 8000d2a:	0242      	lsls	r2, r0, #9
 8000d2c:	d102      	bne.n	8000d34 <__aeabi_f2uiz+0x38>
 8000d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8000d32:	4770      	bx	lr
 8000d34:	f04f 0000 	mov.w	r0, #0
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop

08000d3c <__aeabi_uldivmod>:
 8000d3c:	b953      	cbnz	r3, 8000d54 <__aeabi_uldivmod+0x18>
 8000d3e:	b94a      	cbnz	r2, 8000d54 <__aeabi_uldivmod+0x18>
 8000d40:	2900      	cmp	r1, #0
 8000d42:	bf08      	it	eq
 8000d44:	2800      	cmpeq	r0, #0
 8000d46:	bf1c      	itt	ne
 8000d48:	f04f 31ff 	movne.w	r1, #4294967295
 8000d4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000d50:	f000 b988 	b.w	8001064 <__aeabi_idiv0>
 8000d54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d5c:	f000 f806 	bl	8000d6c <__udivmoddi4>
 8000d60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d68:	b004      	add	sp, #16
 8000d6a:	4770      	bx	lr

08000d6c <__udivmoddi4>:
 8000d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d70:	9d08      	ldr	r5, [sp, #32]
 8000d72:	468e      	mov	lr, r1
 8000d74:	4604      	mov	r4, r0
 8000d76:	4688      	mov	r8, r1
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d14a      	bne.n	8000e12 <__udivmoddi4+0xa6>
 8000d7c:	428a      	cmp	r2, r1
 8000d7e:	4617      	mov	r7, r2
 8000d80:	d962      	bls.n	8000e48 <__udivmoddi4+0xdc>
 8000d82:	fab2 f682 	clz	r6, r2
 8000d86:	b14e      	cbz	r6, 8000d9c <__udivmoddi4+0x30>
 8000d88:	f1c6 0320 	rsb	r3, r6, #32
 8000d8c:	fa01 f806 	lsl.w	r8, r1, r6
 8000d90:	fa20 f303 	lsr.w	r3, r0, r3
 8000d94:	40b7      	lsls	r7, r6
 8000d96:	ea43 0808 	orr.w	r8, r3, r8
 8000d9a:	40b4      	lsls	r4, r6
 8000d9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000da0:	fa1f fc87 	uxth.w	ip, r7
 8000da4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000da8:	0c23      	lsrs	r3, r4, #16
 8000daa:	fb0e 8811 	mls	r8, lr, r1, r8
 8000dae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db2:	fb01 f20c 	mul.w	r2, r1, ip
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d909      	bls.n	8000dce <__udivmoddi4+0x62>
 8000dba:	18fb      	adds	r3, r7, r3
 8000dbc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000dc0:	f080 80ea 	bcs.w	8000f98 <__udivmoddi4+0x22c>
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	f240 80e7 	bls.w	8000f98 <__udivmoddi4+0x22c>
 8000dca:	3902      	subs	r1, #2
 8000dcc:	443b      	add	r3, r7
 8000dce:	1a9a      	subs	r2, r3, r2
 8000dd0:	b2a3      	uxth	r3, r4
 8000dd2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dd6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dde:	fb00 fc0c 	mul.w	ip, r0, ip
 8000de2:	459c      	cmp	ip, r3
 8000de4:	d909      	bls.n	8000dfa <__udivmoddi4+0x8e>
 8000de6:	18fb      	adds	r3, r7, r3
 8000de8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dec:	f080 80d6 	bcs.w	8000f9c <__udivmoddi4+0x230>
 8000df0:	459c      	cmp	ip, r3
 8000df2:	f240 80d3 	bls.w	8000f9c <__udivmoddi4+0x230>
 8000df6:	443b      	add	r3, r7
 8000df8:	3802      	subs	r0, #2
 8000dfa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dfe:	eba3 030c 	sub.w	r3, r3, ip
 8000e02:	2100      	movs	r1, #0
 8000e04:	b11d      	cbz	r5, 8000e0e <__udivmoddi4+0xa2>
 8000e06:	40f3      	lsrs	r3, r6
 8000e08:	2200      	movs	r2, #0
 8000e0a:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e12:	428b      	cmp	r3, r1
 8000e14:	d905      	bls.n	8000e22 <__udivmoddi4+0xb6>
 8000e16:	b10d      	cbz	r5, 8000e1c <__udivmoddi4+0xb0>
 8000e18:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4608      	mov	r0, r1
 8000e20:	e7f5      	b.n	8000e0e <__udivmoddi4+0xa2>
 8000e22:	fab3 f183 	clz	r1, r3
 8000e26:	2900      	cmp	r1, #0
 8000e28:	d146      	bne.n	8000eb8 <__udivmoddi4+0x14c>
 8000e2a:	4573      	cmp	r3, lr
 8000e2c:	d302      	bcc.n	8000e34 <__udivmoddi4+0xc8>
 8000e2e:	4282      	cmp	r2, r0
 8000e30:	f200 8105 	bhi.w	800103e <__udivmoddi4+0x2d2>
 8000e34:	1a84      	subs	r4, r0, r2
 8000e36:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	4690      	mov	r8, r2
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	d0e5      	beq.n	8000e0e <__udivmoddi4+0xa2>
 8000e42:	e9c5 4800 	strd	r4, r8, [r5]
 8000e46:	e7e2      	b.n	8000e0e <__udivmoddi4+0xa2>
 8000e48:	2a00      	cmp	r2, #0
 8000e4a:	f000 8090 	beq.w	8000f6e <__udivmoddi4+0x202>
 8000e4e:	fab2 f682 	clz	r6, r2
 8000e52:	2e00      	cmp	r6, #0
 8000e54:	f040 80a4 	bne.w	8000fa0 <__udivmoddi4+0x234>
 8000e58:	1a8a      	subs	r2, r1, r2
 8000e5a:	0c03      	lsrs	r3, r0, #16
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	b280      	uxth	r0, r0
 8000e62:	b2bc      	uxth	r4, r7
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e6a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e72:	fb04 f20c 	mul.w	r2, r4, ip
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x11e>
 8000e7a:	18fb      	adds	r3, r7, r3
 8000e7c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x11c>
 8000e82:	429a      	cmp	r2, r3
 8000e84:	f200 80e0 	bhi.w	8001048 <__udivmoddi4+0x2dc>
 8000e88:	46c4      	mov	ip, r8
 8000e8a:	1a9b      	subs	r3, r3, r2
 8000e8c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e90:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e94:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e98:	fb02 f404 	mul.w	r4, r2, r4
 8000e9c:	429c      	cmp	r4, r3
 8000e9e:	d907      	bls.n	8000eb0 <__udivmoddi4+0x144>
 8000ea0:	18fb      	adds	r3, r7, r3
 8000ea2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000ea6:	d202      	bcs.n	8000eae <__udivmoddi4+0x142>
 8000ea8:	429c      	cmp	r4, r3
 8000eaa:	f200 80ca 	bhi.w	8001042 <__udivmoddi4+0x2d6>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	1b1b      	subs	r3, r3, r4
 8000eb2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000eb6:	e7a5      	b.n	8000e04 <__udivmoddi4+0x98>
 8000eb8:	f1c1 0620 	rsb	r6, r1, #32
 8000ebc:	408b      	lsls	r3, r1
 8000ebe:	fa22 f706 	lsr.w	r7, r2, r6
 8000ec2:	431f      	orrs	r7, r3
 8000ec4:	fa0e f401 	lsl.w	r4, lr, r1
 8000ec8:	fa20 f306 	lsr.w	r3, r0, r6
 8000ecc:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ed0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ed4:	4323      	orrs	r3, r4
 8000ed6:	fa00 f801 	lsl.w	r8, r0, r1
 8000eda:	fa1f fc87 	uxth.w	ip, r7
 8000ede:	fbbe f0f9 	udiv	r0, lr, r9
 8000ee2:	0c1c      	lsrs	r4, r3, #16
 8000ee4:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ee8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000eec:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ef0:	45a6      	cmp	lr, r4
 8000ef2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef6:	d909      	bls.n	8000f0c <__udivmoddi4+0x1a0>
 8000ef8:	193c      	adds	r4, r7, r4
 8000efa:	f100 3aff 	add.w	sl, r0, #4294967295
 8000efe:	f080 809c 	bcs.w	800103a <__udivmoddi4+0x2ce>
 8000f02:	45a6      	cmp	lr, r4
 8000f04:	f240 8099 	bls.w	800103a <__udivmoddi4+0x2ce>
 8000f08:	3802      	subs	r0, #2
 8000f0a:	443c      	add	r4, r7
 8000f0c:	eba4 040e 	sub.w	r4, r4, lr
 8000f10:	fa1f fe83 	uxth.w	lr, r3
 8000f14:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f18:	fb09 4413 	mls	r4, r9, r3, r4
 8000f1c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f20:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f24:	45a4      	cmp	ip, r4
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x1ce>
 8000f28:	193c      	adds	r4, r7, r4
 8000f2a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f2e:	f080 8082 	bcs.w	8001036 <__udivmoddi4+0x2ca>
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d97f      	bls.n	8001036 <__udivmoddi4+0x2ca>
 8000f36:	3b02      	subs	r3, #2
 8000f38:	443c      	add	r4, r7
 8000f3a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f46:	4564      	cmp	r4, ip
 8000f48:	4673      	mov	r3, lr
 8000f4a:	46e1      	mov	r9, ip
 8000f4c:	d362      	bcc.n	8001014 <__udivmoddi4+0x2a8>
 8000f4e:	d05f      	beq.n	8001010 <__udivmoddi4+0x2a4>
 8000f50:	b15d      	cbz	r5, 8000f6a <__udivmoddi4+0x1fe>
 8000f52:	ebb8 0203 	subs.w	r2, r8, r3
 8000f56:	eb64 0409 	sbc.w	r4, r4, r9
 8000f5a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5e:	fa22 f301 	lsr.w	r3, r2, r1
 8000f62:	431e      	orrs	r6, r3
 8000f64:	40cc      	lsrs	r4, r1
 8000f66:	e9c5 6400 	strd	r6, r4, [r5]
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	e74f      	b.n	8000e0e <__udivmoddi4+0xa2>
 8000f6e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f72:	0c01      	lsrs	r1, r0, #16
 8000f74:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f78:	b280      	uxth	r0, r0
 8000f7a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f7e:	463b      	mov	r3, r7
 8000f80:	4638      	mov	r0, r7
 8000f82:	463c      	mov	r4, r7
 8000f84:	46b8      	mov	r8, r7
 8000f86:	46be      	mov	lr, r7
 8000f88:	2620      	movs	r6, #32
 8000f8a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f8e:	eba2 0208 	sub.w	r2, r2, r8
 8000f92:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f96:	e766      	b.n	8000e66 <__udivmoddi4+0xfa>
 8000f98:	4601      	mov	r1, r0
 8000f9a:	e718      	b.n	8000dce <__udivmoddi4+0x62>
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	e72c      	b.n	8000dfa <__udivmoddi4+0x8e>
 8000fa0:	f1c6 0220 	rsb	r2, r6, #32
 8000fa4:	fa2e f302 	lsr.w	r3, lr, r2
 8000fa8:	40b7      	lsls	r7, r6
 8000faa:	40b1      	lsls	r1, r6
 8000fac:	fa20 f202 	lsr.w	r2, r0, r2
 8000fb0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fb4:	430a      	orrs	r2, r1
 8000fb6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fba:	b2bc      	uxth	r4, r7
 8000fbc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fc0:	0c11      	lsrs	r1, r2, #16
 8000fc2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fc6:	fb08 f904 	mul.w	r9, r8, r4
 8000fca:	40b0      	lsls	r0, r6
 8000fcc:	4589      	cmp	r9, r1
 8000fce:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fd2:	b280      	uxth	r0, r0
 8000fd4:	d93e      	bls.n	8001054 <__udivmoddi4+0x2e8>
 8000fd6:	1879      	adds	r1, r7, r1
 8000fd8:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fdc:	d201      	bcs.n	8000fe2 <__udivmoddi4+0x276>
 8000fde:	4589      	cmp	r9, r1
 8000fe0:	d81f      	bhi.n	8001022 <__udivmoddi4+0x2b6>
 8000fe2:	eba1 0109 	sub.w	r1, r1, r9
 8000fe6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fea:	fb09 f804 	mul.w	r8, r9, r4
 8000fee:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ff2:	b292      	uxth	r2, r2
 8000ff4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ff8:	4542      	cmp	r2, r8
 8000ffa:	d229      	bcs.n	8001050 <__udivmoddi4+0x2e4>
 8000ffc:	18ba      	adds	r2, r7, r2
 8000ffe:	f109 31ff 	add.w	r1, r9, #4294967295
 8001002:	d2c4      	bcs.n	8000f8e <__udivmoddi4+0x222>
 8001004:	4542      	cmp	r2, r8
 8001006:	d2c2      	bcs.n	8000f8e <__udivmoddi4+0x222>
 8001008:	f1a9 0102 	sub.w	r1, r9, #2
 800100c:	443a      	add	r2, r7
 800100e:	e7be      	b.n	8000f8e <__udivmoddi4+0x222>
 8001010:	45f0      	cmp	r8, lr
 8001012:	d29d      	bcs.n	8000f50 <__udivmoddi4+0x1e4>
 8001014:	ebbe 0302 	subs.w	r3, lr, r2
 8001018:	eb6c 0c07 	sbc.w	ip, ip, r7
 800101c:	3801      	subs	r0, #1
 800101e:	46e1      	mov	r9, ip
 8001020:	e796      	b.n	8000f50 <__udivmoddi4+0x1e4>
 8001022:	eba7 0909 	sub.w	r9, r7, r9
 8001026:	4449      	add	r1, r9
 8001028:	f1a8 0c02 	sub.w	ip, r8, #2
 800102c:	fbb1 f9fe 	udiv	r9, r1, lr
 8001030:	fb09 f804 	mul.w	r8, r9, r4
 8001034:	e7db      	b.n	8000fee <__udivmoddi4+0x282>
 8001036:	4673      	mov	r3, lr
 8001038:	e77f      	b.n	8000f3a <__udivmoddi4+0x1ce>
 800103a:	4650      	mov	r0, sl
 800103c:	e766      	b.n	8000f0c <__udivmoddi4+0x1a0>
 800103e:	4608      	mov	r0, r1
 8001040:	e6fd      	b.n	8000e3e <__udivmoddi4+0xd2>
 8001042:	443b      	add	r3, r7
 8001044:	3a02      	subs	r2, #2
 8001046:	e733      	b.n	8000eb0 <__udivmoddi4+0x144>
 8001048:	f1ac 0c02 	sub.w	ip, ip, #2
 800104c:	443b      	add	r3, r7
 800104e:	e71c      	b.n	8000e8a <__udivmoddi4+0x11e>
 8001050:	4649      	mov	r1, r9
 8001052:	e79c      	b.n	8000f8e <__udivmoddi4+0x222>
 8001054:	eba1 0109 	sub.w	r1, r1, r9
 8001058:	46c4      	mov	ip, r8
 800105a:	fbb1 f9fe 	udiv	r9, r1, lr
 800105e:	fb09 f804 	mul.w	r8, r9, r4
 8001062:	e7c4      	b.n	8000fee <__udivmoddi4+0x282>

08001064 <__aeabi_idiv0>:
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop

08001068 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001070:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001074:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001076:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4313      	orrs	r3, r2
 800107e:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001080:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001084:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4013      	ands	r3, r2
 800108a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800108c:	68fb      	ldr	r3, [r7, #12]
}
 800108e:	bf00      	nop
 8001090:	3714      	adds	r7, #20
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr

08001098 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 800109c:	4b23      	ldr	r3, [pc, #140]	@ (800112c <MX_ADC_Init+0x94>)
 800109e:	4a24      	ldr	r2, [pc, #144]	@ (8001130 <MX_ADC_Init+0x98>)
 80010a0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010a2:	4b22      	ldr	r3, [pc, #136]	@ (800112c <MX_ADC_Init+0x94>)
 80010a4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80010a8:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80010aa:	4b20      	ldr	r3, [pc, #128]	@ (800112c <MX_ADC_Init+0x94>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010b0:	4b1e      	ldr	r3, [pc, #120]	@ (800112c <MX_ADC_Init+0x94>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010b6:	4b1d      	ldr	r3, [pc, #116]	@ (800112c <MX_ADC_Init+0x94>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010bc:	4b1b      	ldr	r3, [pc, #108]	@ (800112c <MX_ADC_Init+0x94>)
 80010be:	2204      	movs	r2, #4
 80010c0:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80010c2:	4b1a      	ldr	r3, [pc, #104]	@ (800112c <MX_ADC_Init+0x94>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80010c8:	4b18      	ldr	r3, [pc, #96]	@ (800112c <MX_ADC_Init+0x94>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80010ce:	4b17      	ldr	r3, [pc, #92]	@ (800112c <MX_ADC_Init+0x94>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 80010d4:	4b15      	ldr	r3, [pc, #84]	@ (800112c <MX_ADC_Init+0x94>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80010da:	4b14      	ldr	r3, [pc, #80]	@ (800112c <MX_ADC_Init+0x94>)
 80010dc:	2200      	movs	r2, #0
 80010de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010e2:	4b12      	ldr	r3, [pc, #72]	@ (800112c <MX_ADC_Init+0x94>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010e8:	4b10      	ldr	r3, [pc, #64]	@ (800112c <MX_ADC_Init+0x94>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 80010ee:	4b0f      	ldr	r3, [pc, #60]	@ (800112c <MX_ADC_Init+0x94>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80010f6:	4b0d      	ldr	r3, [pc, #52]	@ (800112c <MX_ADC_Init+0x94>)
 80010f8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80010fc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 80010fe:	4b0b      	ldr	r3, [pc, #44]	@ (800112c <MX_ADC_Init+0x94>)
 8001100:	2207      	movs	r2, #7
 8001102:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001104:	4b09      	ldr	r3, [pc, #36]	@ (800112c <MX_ADC_Init+0x94>)
 8001106:	2207      	movs	r2, #7
 8001108:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.OversamplingMode = DISABLE;
 800110a:	4b08      	ldr	r3, [pc, #32]	@ (800112c <MX_ADC_Init+0x94>)
 800110c:	2200      	movs	r2, #0
 800110e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001112:	4b06      	ldr	r3, [pc, #24]	@ (800112c <MX_ADC_Init+0x94>)
 8001114:	2200      	movs	r2, #0
 8001116:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001118:	4804      	ldr	r0, [pc, #16]	@ (800112c <MX_ADC_Init+0x94>)
 800111a:	f001 fcf3 	bl	8002b04 <HAL_ADC_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8001124:	f000 f8cc 	bl	80012c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}
 800112c:	200006e8 	.word	0x200006e8
 8001130:	40012400 	.word	0x40012400

08001134 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a05      	ldr	r2, [pc, #20]	@ (8001158 <HAL_ADC_MspInit+0x24>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d103      	bne.n	800114e <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001146:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800114a:	f7ff ff8d 	bl	8001068 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40012400 	.word	0x40012400

0800115c <LL_AHB1_GRP1_EnableClock>:
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001164:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001168:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800116a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4313      	orrs	r3, r2
 8001172:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001174:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001178:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4013      	ands	r3, r2
 800117e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001180:	68fb      	ldr	r3, [r7, #12]
}
 8001182:	bf00      	nop
 8001184:	3714      	adds	r7, #20
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr

0800118c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001190:	2004      	movs	r0, #4
 8001192:	f7ff ffe3 	bl	800115c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001196:	2001      	movs	r0, #1
 8001198:	f7ff ffe0 	bl	800115c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 800119c:	2200      	movs	r2, #0
 800119e:	2102      	movs	r1, #2
 80011a0:	200f      	movs	r0, #15
 80011a2:	f001 ff3a 	bl	800301a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80011a6:	200f      	movs	r0, #15
 80011a8:	f001 ff51 	bl	800304e <HAL_NVIC_EnableIRQ>

}
 80011ac:	bf00      	nop
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <LL_AHB2_GRP1_EnableClock>:
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80011b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011bc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80011be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80011c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011cc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4013      	ands	r3, r2
 80011d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80011d4:	68fb      	ldr	r3, [r7, #12]
}
 80011d6:	bf00      	nop
 80011d8:	3714      	adds	r7, #20
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr

080011e0 <MX_GPIO_Init>:
 * Output
 * EVENT_OUT
 * EXTI
 */
void MX_GPIO_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
#endif

#if MY_TX
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e6:	1d3b      	adds	r3, r7, #4
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80011f4:	2001      	movs	r0, #1
 80011f6:	f7ff ffdb 	bl	80011b0 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80011fa:	2002      	movs	r0, #2
 80011fc:	f7ff ffd8 	bl	80011b0 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001200:	2004      	movs	r0, #4
 8001202:	f7ff ffd5 	bl	80011b0 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001206:	2080      	movs	r0, #128	@ 0x80
 8001208:	f7ff ffd2 	bl	80011b0 <LL_AHB2_GRP1_EnableClock>

	/*Configure GPIO pins : PA14 PA12 PA15 PA13
                             PA11 PA10 PA0 PA9
                             PA6 PA1 PA7 PA4
                             PA5 PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13
 800120c:	f64f 73f3 	movw	r3, #65523	@ 0xfff3
 8001210:	607b      	str	r3, [r7, #4]
			|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_9
			|GPIO_PIN_6|GPIO_PIN_1|GPIO_PIN_7|GPIO_PIN_4
			|GPIO_PIN_5|GPIO_PIN_8;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001212:	2303      	movs	r3, #3
 8001214:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	4619      	mov	r1, r3
 800121e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001222:	f002 fb57 	bl	80038d4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB15 PB3 PB4 PB7
                             PB9 PB14 PB5 PB8
                             PB13 PB2 PB6 PB12
                             PB1 PB11 PB10 */
	GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7
 8001226:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800122a:	607b      	str	r3, [r7, #4]
			|GPIO_PIN_9|GPIO_PIN_14|GPIO_PIN_5|GPIO_PIN_8
			|GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_12
			|GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_10;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800122c:	2303      	movs	r3, #3
 800122e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001234:	1d3b      	adds	r3, r7, #4
 8001236:	4619      	mov	r1, r3
 8001238:	480e      	ldr	r0, [pc, #56]	@ (8001274 <MX_GPIO_Init+0x94>)
 800123a:	f002 fb4b 	bl	80038d4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC13 PC2 PC1 PC0
                             PC6 */
	GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0
 800123e:	f242 0347 	movw	r3, #8263	@ 0x2047
 8001242:	607b      	str	r3, [r7, #4]
			|GPIO_PIN_6;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001244:	2303      	movs	r3, #3
 8001246:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800124c:	1d3b      	adds	r3, r7, #4
 800124e:	4619      	mov	r1, r3
 8001250:	4809      	ldr	r0, [pc, #36]	@ (8001278 <MX_GPIO_Init+0x98>)
 8001252:	f002 fb3f 	bl	80038d4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PH3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001256:	2308      	movs	r3, #8
 8001258:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800125a:	2303      	movs	r3, #3
 800125c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	4619      	mov	r1, r3
 8001266:	4805      	ldr	r0, [pc, #20]	@ (800127c <MX_GPIO_Init+0x9c>)
 8001268:	f002 fb34 	bl	80038d4 <HAL_GPIO_Init>

#endif

#endif

}
 800126c:	bf00      	nop
 800126e:	3718      	adds	r7, #24
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	48000400 	.word	0x48000400
 8001278:	48000800 	.word	0x48000800
 800127c:	48001c00 	.word	0x48001c00

08001280 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
	HAL_Init();														// Configure HAL
	HAL_PWR_EnablePVD();											// Enable PVD
#endif

#if !(MY_DEBUGGER_ENABLED || MY_LPTIM_Monitor || MY_RTCB_Monitor)
	My_Set_All_GPIO_To_Analog_Mode();											// Set all GPIO in Analog Mode
 8001284:	f01b f8c4 	bl	801c410 <My_Set_All_GPIO_To_Analog_Mode>
#endif

	My_PS_Detection();												// Power Supply (PS) Detection Function: Detects if the System is Supplied by a Power Supply with a voltage > 2.9 V or by an Harvester
 8001288:	f01b fc08 	bl	801ca9c <My_PS_Detection>

#if MY_UNDERVOLTING_FEATURE

	My_SystemClock_Config(); 										// Configure the System Clock Frequency Below 16 MHz to allow Undervolting
 800128c:	f01b fb54 	bl	801c938 <My_SystemClock_Config>
	my_SystemClock_Config_done = 1;									// SystemClock is Configures
 8001290:	4b0a      	ldr	r3, [pc, #40]	@ (80012bc <main+0x3c>)
 8001292:	2201      	movs	r2, #1
 8001294:	701a      	strb	r2, [r3, #0]
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2);	// Configure Undervolting
 8001296:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800129a:	f003 fc4b 	bl	8004b34 <HAL_PWREx_ControlVoltageScaling>
	my_SystemClock_Config_done = 1;	// SystemClock is Configured

#endif

#if MY_TX_ABP
	MX_RTC_Init();
 800129e:	f000 f83d 	bl	800131c <MX_RTC_Init>
#endif

	MX_LPTIM1_Init();
 80012a2:	f019 ff3f 	bl	801b124 <MX_LPTIM1_Init>

#if !MY_DEBUGGER_ENABLED
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80012a6:	f7ff ff9b 	bl	80011e0 <MX_GPIO_Init>
#if AI
	MX_ADC_Init();
 80012aa:	f7ff fef5 	bl	8001098 <MX_ADC_Init>
	MX_X_CUBE_AI_Init(); 				// initialization AI
 80012ae:	f019 fcc3 	bl	801ac38 <MX_X_CUBE_AI_Init>
#endif
	MX_LoRaWAN_Init();
 80012b2:	f000 ffab 	bl	800220c <MX_LoRaWAN_Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* USER CODE END WHILE */
		MX_LoRaWAN_Process();
 80012b6:	f000 ffb7 	bl	8002228 <MX_LoRaWAN_Process>
 80012ba:	e7fc      	b.n	80012b6 <main+0x36>
 80012bc:	2000074c 	.word	0x2000074c

080012c0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012c4:	b672      	cpsid	i
}
 80012c6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80012c8:	bf00      	nop
 80012ca:	e7fd      	b.n	80012c8 <Error_Handler+0x8>

080012cc <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80012d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80012dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80012e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr

080012ec <LL_APB1_GRP1_EnableClock>:
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80012f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012f8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80012fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4313      	orrs	r3, r2
 8001302:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001304:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001308:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4013      	ands	r3, r2
 800130e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001310:	68fb      	ldr	r3, [r7, #12]
}
 8001312:	bf00      	nop
 8001314:	3714      	adds	r7, #20
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr

0800131c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0

#if MY_TX_ABP
	My_RTC_Init();
 8001320:	f01a fae0 	bl	801b8e4 <My_RTC_Init>
	    Error_Handler();
	  }
	  /* USER CODE BEGIN RTC_Init 2 */
#endif

}
 8001324:	bf00      	nop
 8001326:	bd80      	pop	{r7, pc}

08001328 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b090      	sub	sp, #64	@ 0x40
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]

	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001330:	f107 0308 	add.w	r3, r7, #8
 8001334:	2238      	movs	r2, #56	@ 0x38
 8001336:	2100      	movs	r1, #0
 8001338:	4618      	mov	r0, r3
 800133a:	f01e fad3 	bl	801f8e4 <memset>
	if(rtcHandle->Instance==RTC)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a15      	ldr	r2, [pc, #84]	@ (8001398 <HAL_RTC_MspInit+0x70>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d122      	bne.n	800138e <HAL_RTC_MspInit+0x66>

		/* USER CODE END RTC_MspInit 0 */

		/** Initializes the peripherals clocks
		 */
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001348:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800134c:	60bb      	str	r3, [r7, #8]
		PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800134e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001352:	63fb      	str	r3, [r7, #60]	@ 0x3c

		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001354:	f107 0308 	add.w	r3, r7, #8
 8001358:	4618      	mov	r0, r3
 800135a:	f004 fef1 	bl	8006140 <HAL_RCCEx_PeriphCLKConfig>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <HAL_RTC_MspInit+0x40>
		{
			Error_Handler();
 8001364:	f7ff ffac 	bl	80012c0 <Error_Handler>
		}

		/* RTC clock enable */
		__HAL_RCC_RTC_ENABLE();
 8001368:	f7ff ffb0 	bl	80012cc <LL_RCC_EnableRTC>
		__HAL_RCC_RTCAPB_CLK_ENABLE();
 800136c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001370:	f7ff ffbc 	bl	80012ec <LL_APB1_GRP1_EnableClock>

		/* RTC interrupt Init */
		HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001374:	2200      	movs	r2, #0
 8001376:	2100      	movs	r1, #0
 8001378:	2002      	movs	r0, #2
 800137a:	f001 fe4e 	bl	800301a <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800137e:	2200      	movs	r2, #0
 8001380:	2100      	movs	r1, #0
 8001382:	202a      	movs	r0, #42	@ 0x2a
 8001384:	f001 fe49 	bl	800301a <HAL_NVIC_SetPriority>
#if MY_TX_OTAA
		HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
		HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
#endif
		/* USER CODE BEGIN RTC_MspInit 1 */
		HAL_RTCEx_EnableBypassShadow(rtcHandle);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f005 fc65 	bl	8006c58 <HAL_RTCEx_EnableBypassShadow>
		/* USER CODE END RTC_MspInit 1 */
	}
}
 800138e:	bf00      	nop
 8001390:	3740      	adds	r7, #64	@ 0x40
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40002800 	.word	0x40002800

0800139c <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 80013a0:	4b03      	ldr	r3, [pc, #12]	@ (80013b0 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 80013a2:	2201      	movs	r2, #1
 80013a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr
 80013b0:	58000400 	.word	0x58000400

080013b4 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 80013b8:	bf00      	nop
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr

080013c0 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr

080013cc <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 80013d0:	f001 faea 	bl	80029a8 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 80013d4:	f7ff ffe2 	bl	800139c <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80013d8:	2001      	movs	r0, #1
 80013da:	f003 fc6b 	bl	8004cb4 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 80013e6:	f001 faed 	bl	80029c4 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 80013ea:	f000 feb9 	bl	8002160 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 80013f6:	f001 fad7 	bl	80029a8 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80013fa:	2101      	movs	r1, #1
 80013fc:	2000      	movs	r0, #0
 80013fe:	f003 fb1d 	bl	8004a3c <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}

08001406 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 800140a:	f001 fadb 	bl	80029c4 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}

08001412 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	af00      	add	r7, sp, #0

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_PVM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 0, 0);
 8001416:	2200      	movs	r2, #0
 8001418:	2100      	movs	r1, #0
 800141a:	2001      	movs	r0, #1
 800141c:	f001 fdfd 	bl	800301a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 8001420:	2001      	movs	r0, #1
 8001422:	f001 fe14 	bl	800304e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}

0800142a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800142e:	bf00      	nop
 8001430:	e7fd      	b.n	800142e <NMI_Handler+0x4>

08001432 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001436:	bf00      	nop
 8001438:	e7fd      	b.n	8001436 <HardFault_Handler+0x4>

0800143a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800143e:	bf00      	nop
 8001440:	e7fd      	b.n	800143e <MemManage_Handler+0x4>

08001442 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001446:	bf00      	nop
 8001448:	e7fd      	b.n	8001446 <BusFault_Handler+0x4>

0800144a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800144e:	bf00      	nop
 8001450:	e7fd      	b.n	800144e <UsageFault_Handler+0x4>

08001452 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr

0800145e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	46bd      	mov	sp, r7
 8001466:	bc80      	pop	{r7}
 8001468:	4770      	bx	lr

0800146a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800146a:	b480      	push	{r7}
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	46bd      	mov	sp, r7
 8001472:	bc80      	pop	{r7}
 8001474:	4770      	bx	lr

08001476 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800147a:	bf00      	nop
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr

08001482 <PVD_PVM_IRQHandler>:

/**
  * @brief This function handles PVD and PVM detector.
  */
void PVD_PVM_IRQHandler(void)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_PVM_IRQn 0 */

  /* USER CODE END PVD_PVM_IRQn 0 */
  HAL_PWREx_PVD_PVM_IRQHandler();
 8001486:	f003 fc3f 	bl	8004d08 <HAL_PWREx_PVD_PVM_IRQHandler>
  /* USER CODE BEGIN PVD_PVM_IRQn 1 */

  /* USER CODE END PVD_PVM_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
	...

08001490 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001494:	4802      	ldr	r0, [pc, #8]	@ (80014a0 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8001496:	f005 fc11 	bl	8006cbc <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000750 	.word	0x20000750

080014a4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 80014a8:	2001      	movs	r0, #1
 80014aa:	f002 fc59 	bl	8003d60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT2_Pin);
 80014b6:	2002      	movs	r0, #2
 80014b8:	f002 fc52 	bl	8003d60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}

080014c0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80014c4:	4802      	ldr	r0, [pc, #8]	@ (80014d0 <DMA1_Channel5_IRQHandler+0x10>)
 80014c6:	f002 f867 	bl	8003598 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000838 	.word	0x20000838

080014d4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT3_Pin);
 80014d8:	2040      	movs	r0, #64	@ 0x40
 80014da:	f002 fc41 	bl	8003d60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
	...

080014e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80014e8:	4802      	ldr	r0, [pc, #8]	@ (80014f4 <USART2_IRQHandler+0x10>)
 80014ea:	f006 fa31 	bl	8007950 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	200007a4 	.word	0x200007a4

080014f8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80014fc:	4802      	ldr	r0, [pc, #8]	@ (8001508 <RTC_Alarm_IRQHandler+0x10>)
 80014fe:	f005 faa7 	bl	8006a50 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000750 	.word	0x20000750

0800150c <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001510:	4802      	ldr	r0, [pc, #8]	@ (800151c <SUBGHZ_Radio_IRQHandler+0x10>)
 8001512:	f005 ff37 	bl	8007384 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000788 	.word	0x20000788

08001520 <LPTIM1_IRQHandler>:

/* USER CODE BEGIN 1 */
void LPTIM1_IRQHandler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0

	HAL_LPTIM_IRQHandler(&hlptim1);
 8001524:	4802      	ldr	r0, [pc, #8]	@ (8001530 <LPTIM1_IRQHandler+0x10>)
 8001526:	f01b fed5 	bl	801d2d4 <HAL_LPTIM_IRQHandler>
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20001b40 	.word	0x20001b40

08001534 <LPTIM2_IRQHandler>:

void LPTIM2_IRQHandler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
	HAL_LPTIM_IRQHandler(&hlptim2);
 8001538:	4802      	ldr	r0, [pc, #8]	@ (8001544 <LPTIM2_IRQHandler+0x10>)
 800153a:	f01b fecb 	bl	801d2d4 <HAL_LPTIM_IRQHandler>
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20001b7c 	.word	0x20001b7c

08001548 <COMP_IRQHandler>:

void COMP_IRQHandler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 800154c:	4803      	ldr	r0, [pc, #12]	@ (800155c <COMP_IRQHandler+0x14>)
 800154e:	f01b fbdd 	bl	801cd0c <HAL_COMP_IRQHandler>
  HAL_COMP_IRQHandler(&hcomp2);
 8001552:	4803      	ldr	r0, [pc, #12]	@ (8001560 <COMP_IRQHandler+0x18>)
 8001554:	f01b fbda 	bl	801cd0c <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */

  /* USER CODE END COMP_IRQn 1 */
}
 8001558:	bf00      	nop
 800155a:	bd80      	pop	{r7, pc}
 800155c:	20001ae8 	.word	0x20001ae8
 8001560:	20001b14 	.word	0x20001b14

08001564 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 800156c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001570:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001572:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4313      	orrs	r3, r2
 800157a:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 800157c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001580:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4013      	ands	r3, r2
 8001586:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001588:	68fb      	ldr	r3, [r7, #12]
}
 800158a:	bf00      	nop
 800158c:	3714      	adds	r7, #20
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr

08001594 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001598:	4b06      	ldr	r3, [pc, #24]	@ (80015b4 <MX_SUBGHZ_Init+0x20>)
 800159a:	2208      	movs	r2, #8
 800159c:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 800159e:	4805      	ldr	r0, [pc, #20]	@ (80015b4 <MX_SUBGHZ_Init+0x20>)
 80015a0:	f005 fc6e 	bl	8006e80 <HAL_SUBGHZ_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 80015aa:	f7ff fe89 	bl	80012c0 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000788 	.word	0x20000788

080015b8 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80015c0:	2001      	movs	r0, #1
 80015c2:	f7ff ffcf 	bl	8001564 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80015c6:	2200      	movs	r2, #0
 80015c8:	2100      	movs	r1, #0
 80015ca:	2032      	movs	r0, #50	@ 0x32
 80015cc:	f001 fd25 	bl	800301a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80015d0:	2032      	movs	r0, #50	@ 0x32
 80015d2:	f001 fd3c 	bl	800304e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80015d6:	bf00      	nop
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <LL_RCC_SetClkAfterWakeFromStop>:
{
 80015de:	b480      	push	{r7}
 80015e0:	b083      	sub	sp, #12
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80015e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80015f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	608b      	str	r3, [r1, #8]
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr

08001604 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
//	DBG_Init();

	/* USER CODE END SystemApp_Init_1 */

	/* Ensure that MSI is wake-up system clock */
	__HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001608:	2000      	movs	r0, #0
 800160a:	f7ff ffe8 	bl	80015de <LL_RCC_SetClkAfterWakeFromStop>

	/*Initialize timer and RTC*/
	UTIL_TIMER_Init();
 800160e:	f018 fdab 	bl	801a168 <UTIL_TIMER_Init>
	SYS_TimerInitialisedFlag = 1;
 8001612:	4b0c      	ldr	r3, [pc, #48]	@ (8001644 <SystemApp_Init+0x40>)
 8001614:	2201      	movs	r2, #1
 8001616:	701a      	strb	r2, [r3, #0]
	/* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
	DBG_Init();
 8001618:	f000 f8a8 	bl	800176c <DBG_Init>

	/*Initialize the terminal */
	UTIL_ADV_TRACE_Init();
 800161c:	f017 ff50 	bl	80194c0 <UTIL_ADV_TRACE_Init>
	UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001620:	4809      	ldr	r0, [pc, #36]	@ (8001648 <SystemApp_Init+0x44>)
 8001622:	f017 fffb 	bl	801961c <UTIL_ADV_TRACE_RegisterTimeStampFunction>

	/* #warning "should be removed when proper obl is done" */
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001626:	4b09      	ldr	r3, [pc, #36]	@ (800164c <SystemApp_Init+0x48>)
 8001628:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800162c:	611a      	str	r2, [r3, #16]

	/*Set verbose LEVEL*/
	UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 800162e:	2002      	movs	r0, #2
 8001630:	f018 f802 	bl	8019638 <UTIL_ADV_TRACE_SetVerboseLevel>

	/*Initialize the Sensors */
//	EnvSensors_Init();

	/*Init low power manager*/
	UTIL_LPM_Init();
 8001634:	f018 f9ea 	bl	8019a0c <UTIL_LPM_Init>
	/* Disable Stand-by mode */
	UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001638:	2101      	movs	r1, #1
 800163a:	2001      	movs	r0, #1
 800163c:	f018 fa26 	bl	8019a8c <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

	/* USER CODE BEGIN SystemApp_Init_2 */

	/* USER CODE END SystemApp_Init_2 */
}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20000794 	.word	0x20000794
 8001648:	0800165d 	.word	0x0800165d
 800164c:	58004000 	.word	0x58004000

08001650 <UTIL_SEQ_Idle>:

/**
 * @brief redefines __weak function in stm32_seq.c such to enter low power
 */
void UTIL_SEQ_Idle(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UTIL_SEQ_Idle_1 */

	/* USER CODE END UTIL_SEQ_Idle_1 */
	UTIL_LPM_EnterLowPower();
 8001654:	f018 fa4a 	bl	8019aec <UTIL_LPM_EnterLowPower>
	/* USER CODE BEGIN UTIL_SEQ_Idle_2 */

	/* USER CODE END UTIL_SEQ_Idle_2 */
}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}

0800165c <TimestampNow>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af02      	add	r7, sp, #8
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN TimestampNow_1 */

	/* USER CODE END TimestampNow_1 */
	SysTime_t curtime = SysTimeGet();
 8001666:	f107 0308 	add.w	r3, r7, #8
 800166a:	4618      	mov	r0, r3
 800166c:	f018 fcbe 	bl	8019fec <SysTimeGet>
	tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001676:	9200      	str	r2, [sp, #0]
 8001678:	4a07      	ldr	r2, [pc, #28]	@ (8001698 <TimestampNow+0x3c>)
 800167a:	2110      	movs	r1, #16
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f000 f81d 	bl	80016bc <tiny_snprintf_like>
	*size = strlen((char *)buff);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7fe fd7c 	bl	8000180 <strlen>
 8001688:	4603      	mov	r3, r0
 800168a:	b29a      	uxth	r2, r3
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	801a      	strh	r2, [r3, #0]
	/* USER CODE BEGIN TimestampNow_2 */

	/* USER CODE END TimestampNow_2 */
}
 8001690:	bf00      	nop
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	08020620 	.word	0x08020620

0800169c <UTIL_ADV_TRACE_PreSendHook>:
/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

	/* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
	UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 80016a0:	2101      	movs	r1, #1
 80016a2:	2002      	movs	r0, #2
 80016a4:	f018 f9c2 	bl	8019a2c <UTIL_LPM_SetStopMode>
	/* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

	/* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}

080016ac <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

	/* USER CODE END UTIL_LPM_SetStopMode_1 */
	UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 80016b0:	2100      	movs	r1, #0
 80016b2:	2002      	movs	r0, #2
 80016b4:	f018 f9ba 	bl	8019a2c <UTIL_LPM_SetStopMode>
	/* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

	/* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}

080016bc <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 80016bc:	b40c      	push	{r2, r3}
 80016be:	b580      	push	{r7, lr}
 80016c0:	b084      	sub	sp, #16
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
 80016c6:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN tiny_snprintf_like_1 */

	/* USER CODE END tiny_snprintf_like_1 */
	va_list vaArgs;
	va_start(vaArgs, strFormat);
 80016c8:	f107 031c 	add.w	r3, r7, #28
 80016cc:	60fb      	str	r3, [r7, #12]
	UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80016ce:	6839      	ldr	r1, [r7, #0]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f019 f86b 	bl	801a7b0 <tiny_vsnprintf_like>
	va_end(vaArgs);
	/* USER CODE BEGIN tiny_snprintf_like_2 */

	/* USER CODE END tiny_snprintf_like_2 */
}
 80016da:	bf00      	nop
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80016e4:	b002      	add	sp, #8
 80016e6:	4770      	bx	lr

080016e8 <HAL_InitTick>:

/**
 * @note This function overwrites the __weak one from HAL
 */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
	/*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
	/* USER CODE BEGIN HAL_InitTick_1 */

	/* USER CODE END HAL_InitTick_1 */
	return HAL_OK;
 80016f0:	2300      	movs	r3, #0
	/* USER CODE BEGIN HAL_InitTick_2 */

	/* USER CODE END HAL_InitTick_2 */
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr

080016fc <HAL_GetTick>:

/**
 * @note This function overwrites the __weak one from HAL
 */
uint32_t HAL_GetTick(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
	uint32_t ret = 0;
 8001702:	2300      	movs	r3, #0
 8001704:	607b      	str	r3, [r7, #4]
	/* TIMER_IF can be based on other counter the SysTick e.g. RTC */
	/* USER CODE BEGIN HAL_GetTick_1 */

	/* USER CODE END HAL_GetTick_1 */
	if (SYS_TimerInitialisedFlag == 0)
 8001706:	4b06      	ldr	r3, [pc, #24]	@ (8001720 <HAL_GetTick+0x24>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d002      	beq.n	8001714 <HAL_GetTick+0x18>

		/* USER CODE END HAL_GetTick_EarlyCall */
	}
	else
	{
		ret = TIMER_IF_GetTimerValue();
 800170e:	f000 f9c7 	bl	8001aa0 <TIMER_IF_GetTimerValue>
 8001712:	6078      	str	r0, [r7, #4]
	}
	/* USER CODE BEGIN HAL_GetTick_2 */

	/* USER CODE END HAL_GetTick_2 */
	return ret;
 8001714:	687b      	ldr	r3, [r7, #4]
}
 8001716:	4618      	mov	r0, r3
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000794 	.word	0x20000794

08001724 <HAL_Delay>:

/**
 * @note This function overwrites the __weak one from HAL
 */
void HAL_Delay(__IO uint32_t Delay)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
	/* TIMER_IF can be based on other counter the SysTick e.g. RTC */
	/* USER CODE BEGIN HAL_Delay_1 */

	/* USER CODE END HAL_Delay_1 */
	TIMER_IF_DelayMs(Delay);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4618      	mov	r0, r3
 8001730:	f000 fa3d 	bl	8001bae <TIMER_IF_DelayMs>
	/* USER CODE BEGIN HAL_Delay_2 */

	/* USER CODE END HAL_Delay_2 */
}
 8001734:	bf00      	nop
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <LL_AHB2_GRP1_EnableClock>:
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001744:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001748:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800174a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4313      	orrs	r3, r2
 8001752:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001754:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001758:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4013      	ands	r3, r2
 800175e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001760:	68fb      	ldr	r3, [r7, #12]
}
 8001762:	bf00      	nop
 8001764:	3714      	adds	r7, #20
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr

0800176c <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
#define DEBUGGER_ENABLED MY_DEBUGGER_ENABLED
  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 8001772:	f001 f935 	bl	80029e0 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8001776:	f001 f939 	bl	80029ec <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 800177a:	f001 f93d 	bl	80029f8 <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 800177e:	1d3b      	adds	r3, r7, #4
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]
 800178a:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 800178c:	2301      	movs	r3, #1
 800178e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8001794:	2303      	movs	r3, #3
 8001796:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 8001798:	2002      	movs	r0, #2
 800179a:	f7ff ffcf 	bl	800173c <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 800179e:	2002      	movs	r0, #2
 80017a0:	f7ff ffcc 	bl	800173c <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 80017a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017a8:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 80017aa:	1d3b      	adds	r3, r7, #4
 80017ac:	4619      	mov	r1, r3
 80017ae:	480d      	ldr	r0, [pc, #52]	@ (80017e4 <DBG_Init+0x78>)
 80017b0:	f002 f890 	bl	80038d4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 80017b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017b8:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 80017ba:	1d3b      	adds	r3, r7, #4
 80017bc:	4619      	mov	r1, r3
 80017be:	4809      	ldr	r0, [pc, #36]	@ (80017e4 <DBG_Init+0x78>)
 80017c0:	f002 f888 	bl	80038d4 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 80017c4:	2200      	movs	r2, #0
 80017c6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017ca:	4806      	ldr	r0, [pc, #24]	@ (80017e4 <DBG_Init+0x78>)
 80017cc:	f002 fab0 	bl	8003d30 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 80017d0:	2200      	movs	r2, #0
 80017d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017d6:	4803      	ldr	r0, [pc, #12]	@ (80017e4 <DBG_Init+0x78>)
 80017d8:	f002 faaa 	bl	8003d30 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 80017dc:	bf00      	nop
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	48000400 	.word	0x48000400

080017e8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
 80017f8:	e00a      	b.n	8001810 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017fa:	f3af 8000 	nop.w
 80017fe:	4601      	mov	r1, r0
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	1c5a      	adds	r2, r3, #1
 8001804:	60ba      	str	r2, [r7, #8]
 8001806:	b2ca      	uxtb	r2, r1
 8001808:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	3301      	adds	r3, #1
 800180e:	617b      	str	r3, [r7, #20]
 8001810:	697a      	ldr	r2, [r7, #20]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	429a      	cmp	r2, r3
 8001816:	dbf0      	blt.n	80017fa <_read+0x12>
  }

  return len;
 8001818:	687b      	ldr	r3, [r7, #4]
}
 800181a:	4618      	mov	r0, r3
 800181c:	3718      	adds	r7, #24
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}

08001822 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001822:	b580      	push	{r7, lr}
 8001824:	b086      	sub	sp, #24
 8001826:	af00      	add	r7, sp, #0
 8001828:	60f8      	str	r0, [r7, #12]
 800182a:	60b9      	str	r1, [r7, #8]
 800182c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800182e:	2300      	movs	r3, #0
 8001830:	617b      	str	r3, [r7, #20]
 8001832:	e009      	b.n	8001848 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	1c5a      	adds	r2, r3, #1
 8001838:	60ba      	str	r2, [r7, #8]
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	3301      	adds	r3, #1
 8001846:	617b      	str	r3, [r7, #20]
 8001848:	697a      	ldr	r2, [r7, #20]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	429a      	cmp	r2, r3
 800184e:	dbf1      	blt.n	8001834 <_write+0x12>
  }
  return len;
 8001850:	687b      	ldr	r3, [r7, #4]
}
 8001852:	4618      	mov	r0, r3
 8001854:	3718      	adds	r7, #24
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <_close>:

int _close(int file)
{
 800185a:	b480      	push	{r7}
 800185c:	b083      	sub	sp, #12
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001862:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001866:	4618      	mov	r0, r3
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	bc80      	pop	{r7}
 800186e:	4770      	bx	lr

08001870 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001880:	605a      	str	r2, [r3, #4]
  return 0;
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	bc80      	pop	{r7}
 800188c:	4770      	bx	lr

0800188e <_isatty>:

int _isatty(int file)
{
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001896:	2301      	movs	r3, #1
}
 8001898:	4618      	mov	r0, r3
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr

080018a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b085      	sub	sp, #20
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	60f8      	str	r0, [r7, #12]
 80018aa:	60b9      	str	r1, [r7, #8]
 80018ac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018ae:	2300      	movs	r3, #0
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3714      	adds	r7, #20
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr
	...

080018bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018c4:	4a14      	ldr	r2, [pc, #80]	@ (8001918 <_sbrk+0x5c>)
 80018c6:	4b15      	ldr	r3, [pc, #84]	@ (800191c <_sbrk+0x60>)
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018d0:	4b13      	ldr	r3, [pc, #76]	@ (8001920 <_sbrk+0x64>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d102      	bne.n	80018de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018d8:	4b11      	ldr	r3, [pc, #68]	@ (8001920 <_sbrk+0x64>)
 80018da:	4a12      	ldr	r2, [pc, #72]	@ (8001924 <_sbrk+0x68>)
 80018dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018de:	4b10      	ldr	r3, [pc, #64]	@ (8001920 <_sbrk+0x64>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4413      	add	r3, r2
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d207      	bcs.n	80018fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018ec:	f01e f858 	bl	801f9a0 <__errno>
 80018f0:	4603      	mov	r3, r0
 80018f2:	220c      	movs	r2, #12
 80018f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018f6:	f04f 33ff 	mov.w	r3, #4294967295
 80018fa:	e009      	b.n	8001910 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018fc:	4b08      	ldr	r3, [pc, #32]	@ (8001920 <_sbrk+0x64>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001902:	4b07      	ldr	r3, [pc, #28]	@ (8001920 <_sbrk+0x64>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4413      	add	r3, r2
 800190a:	4a05      	ldr	r2, [pc, #20]	@ (8001920 <_sbrk+0x64>)
 800190c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800190e:	68fb      	ldr	r3, [r7, #12]
}
 8001910:	4618      	mov	r0, r3
 8001912:	3718      	adds	r7, #24
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20008000 	.word	0x20008000
 800191c:	00000800 	.word	0x00000800
 8001920:	20000798 	.word	0x20000798
 8001924:	20001e38 	.word	0x20001e38

08001928 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
}
 8001934:	4618      	mov	r0, r3
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	bc80      	pop	{r7}
 800193c:	4770      	bx	lr
	...

08001940 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001946:	2300      	movs	r3, #0
 8001948:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 800194a:	4b14      	ldr	r3, [pc, #80]	@ (800199c <TIMER_IF_Init+0x5c>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	f083 0301 	eor.w	r3, r3, #1
 8001952:	b2db      	uxtb	r3, r3
 8001954:	2b00      	cmp	r3, #0
 8001956:	d01b      	beq.n	8001990 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001958:	4b11      	ldr	r3, [pc, #68]	@ (80019a0 <TIMER_IF_Init+0x60>)
 800195a:	f04f 32ff 	mov.w	r2, #4294967295
 800195e:	631a      	str	r2, [r3, #48]	@ 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8001960:	f7ff fcdc 	bl	800131c <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8001964:	f000 f856 	bl	8001a14 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001968:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800196c:	480c      	ldr	r0, [pc, #48]	@ (80019a0 <TIMER_IF_Init+0x60>)
 800196e:	f005 f813 	bl	8006998 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001972:	4b0b      	ldr	r3, [pc, #44]	@ (80019a0 <TIMER_IF_Init+0x60>)
 8001974:	f04f 32ff 	mov.w	r2, #4294967295
 8001978:	631a      	str	r2, [r3, #48]	@ 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 800197a:	4809      	ldr	r0, [pc, #36]	@ (80019a0 <TIMER_IF_Init+0x60>)
 800197c:	f005 f96c 	bl	8006c58 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001980:	2000      	movs	r0, #0
 8001982:	f000 f9c9 	bl	8001d18 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8001986:	f000 f85f 	bl	8001a48 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 800198a:	4b04      	ldr	r3, [pc, #16]	@ (800199c <TIMER_IF_Init+0x5c>)
 800198c:	2201      	movs	r2, #1
 800198e:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8001990:	79fb      	ldrb	r3, [r7, #7]
}
 8001992:	4618      	mov	r0, r3
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	2000079c 	.word	0x2000079c
 80019a0:	20000750 	.word	0x20000750

080019a4 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b08e      	sub	sp, #56	@ 0x38
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 80019ac:	2300      	movs	r3, #0
 80019ae:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 80019b2:	f107 0308 	add.w	r3, r7, #8
 80019b6:	222c      	movs	r2, #44	@ 0x2c
 80019b8:	2100      	movs	r1, #0
 80019ba:	4618      	mov	r0, r3
 80019bc:	f01d ff92 	bl	801f8e4 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 80019c0:	f000 f828 	bl	8001a14 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 80019c4:	4b11      	ldr	r3, [pc, #68]	@ (8001a0c <TIMER_IF_StartTimer+0x68>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	4413      	add	r3, r2
 80019cc:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 80019ce:	2300      	movs	r3, #0
 80019d0:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	43db      	mvns	r3, r3
 80019d6:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80019d8:	2300      	movs	r3, #0
 80019da:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80019dc:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80019e0:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80019e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019e6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80019e8:	f107 0308 	add.w	r3, r7, #8
 80019ec:	2201      	movs	r2, #1
 80019ee:	4619      	mov	r1, r3
 80019f0:	4807      	ldr	r0, [pc, #28]	@ (8001a10 <TIMER_IF_StartTimer+0x6c>)
 80019f2:	f004 fec5 	bl	8006780 <HAL_RTC_SetAlarm_IT>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 80019fc:	f7ff fc60 	bl	80012c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8001a00:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3738      	adds	r7, #56	@ 0x38
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	200007a0 	.word	0x200007a0
 8001a10:	20000750 	.word	0x20000750

08001a14 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001a1e:	4b08      	ldr	r3, [pc, #32]	@ (8001a40 <TIMER_IF_StopTimer+0x2c>)
 8001a20:	2201      	movs	r2, #1
 8001a22:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001a24:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a28:	4806      	ldr	r0, [pc, #24]	@ (8001a44 <TIMER_IF_StopTimer+0x30>)
 8001a2a:	f004 ffb5 	bl	8006998 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001a2e:	4b05      	ldr	r3, [pc, #20]	@ (8001a44 <TIMER_IF_StopTimer+0x30>)
 8001a30:	f04f 32ff 	mov.w	r2, #4294967295
 8001a34:	631a      	str	r2, [r3, #48]	@ 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8001a36:	79fb      	ldrb	r3, [r7, #7]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40002800 	.word	0x40002800
 8001a44:	20000750 	.word	0x20000750

08001a48 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8001a4c:	f000 f984 	bl	8001d58 <GetTimerTicks>
 8001a50:	4603      	mov	r3, r0
 8001a52:	4a03      	ldr	r2, [pc, #12]	@ (8001a60 <TIMER_IF_SetTimerContext+0x18>)
 8001a54:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001a56:	4b02      	ldr	r3, [pc, #8]	@ (8001a60 <TIMER_IF_SetTimerContext+0x18>)
 8001a58:	681b      	ldr	r3, [r3, #0]
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	200007a0 	.word	0x200007a0

08001a64 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001a68:	4b02      	ldr	r3, [pc, #8]	@ (8001a74 <TIMER_IF_GetTimerContext+0x10>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr
 8001a74:	200007a0 	.word	0x200007a0

08001a78 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8001a82:	f000 f969 	bl	8001d58 <GetTimerTicks>
 8001a86:	4602      	mov	r2, r0
 8001a88:	4b04      	ldr	r3, [pc, #16]	@ (8001a9c <TIMER_IF_GetTimerElapsedTime+0x24>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8001a90:	687b      	ldr	r3, [r7, #4]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	200007a0 	.word	0x200007a0

08001aa0 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8001aaa:	4b06      	ldr	r3, [pc, #24]	@ (8001ac4 <TIMER_IF_GetTimerValue+0x24>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d002      	beq.n	8001ab8 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8001ab2:	f000 f951 	bl	8001d58 <GetTimerTicks>
 8001ab6:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8001ab8:	687b      	ldr	r3, [r7, #4]
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	2000079c 	.word	0x2000079c

08001ac8 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8001ad6:	687b      	ldr	r3, [r7, #4]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bc80      	pop	{r7}
 8001ae0:	4770      	bx	lr

08001ae2 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8001ae2:	b5b0      	push	{r4, r5, r7, lr}
 8001ae4:	b084      	sub	sp, #16
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001aea:	2100      	movs	r1, #0
 8001aec:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8001aee:	6879      	ldr	r1, [r7, #4]
 8001af0:	2000      	movs	r0, #0
 8001af2:	460a      	mov	r2, r1
 8001af4:	4603      	mov	r3, r0
 8001af6:	0d95      	lsrs	r5, r2, #22
 8001af8:	0294      	lsls	r4, r2, #10
 8001afa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001afe:	f04f 0300 	mov.w	r3, #0
 8001b02:	4620      	mov	r0, r4
 8001b04:	4629      	mov	r1, r5
 8001b06:	f7ff f919 	bl	8000d3c <__aeabi_uldivmod>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	4613      	mov	r3, r2
 8001b10:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8001b12:	68fb      	ldr	r3, [r7, #12]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bdb0      	pop	{r4, r5, r7, pc}

08001b1c <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8001b1c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001b20:	b085      	sub	sp, #20
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8001b26:	2100      	movs	r1, #0
 8001b28:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8001b2a:	6879      	ldr	r1, [r7, #4]
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	460c      	mov	r4, r1
 8001b30:	4605      	mov	r5, r0
 8001b32:	4620      	mov	r0, r4
 8001b34:	4629      	mov	r1, r5
 8001b36:	f04f 0a00 	mov.w	sl, #0
 8001b3a:	f04f 0b00 	mov.w	fp, #0
 8001b3e:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8001b42:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8001b46:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8001b4a:	4650      	mov	r0, sl
 8001b4c:	4659      	mov	r1, fp
 8001b4e:	1b02      	subs	r2, r0, r4
 8001b50:	eb61 0305 	sbc.w	r3, r1, r5
 8001b54:	f04f 0000 	mov.w	r0, #0
 8001b58:	f04f 0100 	mov.w	r1, #0
 8001b5c:	0099      	lsls	r1, r3, #2
 8001b5e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8001b62:	0090      	lsls	r0, r2, #2
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	eb12 0804 	adds.w	r8, r2, r4
 8001b6c:	eb43 0905 	adc.w	r9, r3, r5
 8001b70:	f04f 0200 	mov.w	r2, #0
 8001b74:	f04f 0300 	mov.w	r3, #0
 8001b78:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b7c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b80:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b84:	4690      	mov	r8, r2
 8001b86:	4699      	mov	r9, r3
 8001b88:	4640      	mov	r0, r8
 8001b8a:	4649      	mov	r1, r9
 8001b8c:	f04f 0200 	mov.w	r2, #0
 8001b90:	f04f 0300 	mov.w	r3, #0
 8001b94:	0a82      	lsrs	r2, r0, #10
 8001b96:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8001b9a:	0a8b      	lsrs	r3, r1, #10
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3714      	adds	r7, #20
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001bac:	4770      	bx	lr

08001bae <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b084      	sub	sp, #16
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff ff93 	bl	8001ae2 <TIMER_IF_Convert_ms2Tick>
 8001bbc:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8001bbe:	f000 f8cb 	bl	8001d58 <GetTimerTicks>
 8001bc2:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001bc4:	e000      	b.n	8001bc8 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8001bc6:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001bc8:	f000 f8c6 	bl	8001d58 <GetTimerTicks>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	68bb      	ldr	r3, [r7, #8]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d8f6      	bhi.n	8001bc6 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8001bd8:	bf00      	nop
 8001bda:	bf00      	nop
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_RTCEx_SSRUEventCallback>:
//
//	/* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
//}

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b084      	sub	sp, #16
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8001bea:	f000 f8a5 	bl	8001d38 <TIMER_IF_BkUp_Read_MSBticks>
 8001bee:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f000 f88f 	bl	8001d18 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8001bfa:	bf00      	nop
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8001c02:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c06:	b08c      	sub	sp, #48	@ 0x30
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8001c10:	f000 f8a2 	bl	8001d58 <GetTimerTicks>
 8001c14:	62b8      	str	r0, [r7, #40]	@ 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8001c16:	f000 f88f 	bl	8001d38 <TIMER_IF_BkUp_Read_MSBticks>
 8001c1a:	6278      	str	r0, [r7, #36]	@ 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1e:	2200      	movs	r2, #0
 8001c20:	60bb      	str	r3, [r7, #8]
 8001c22:	60fa      	str	r2, [r7, #12]
 8001c24:	f04f 0200 	mov.w	r2, #0
 8001c28:	f04f 0300 	mov.w	r3, #0
 8001c2c:	68b9      	ldr	r1, [r7, #8]
 8001c2e:	000b      	movs	r3, r1
 8001c30:	2200      	movs	r2, #0
 8001c32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c34:	2000      	movs	r0, #0
 8001c36:	460c      	mov	r4, r1
 8001c38:	4605      	mov	r5, r0
 8001c3a:	eb12 0804 	adds.w	r8, r2, r4
 8001c3e:	eb43 0905 	adc.w	r9, r3, r5
 8001c42:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8001c46:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c4a:	f04f 0200 	mov.w	r2, #0
 8001c4e:	f04f 0300 	mov.w	r3, #0
 8001c52:	0a82      	lsrs	r2, r0, #10
 8001c54:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8001c58:	0a8b      	lsrs	r3, r1, #10
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	2200      	movs	r2, #0
 8001c62:	603b      	str	r3, [r7, #0]
 8001c64:	607a      	str	r2, [r7, #4]
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8001c6c:	f04f 0b00 	mov.w	fp, #0
 8001c70:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff ff50 	bl	8001b1c <TIMER_IF_Convert_Tick2ms>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 8001c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3730      	adds	r7, #48	@ 0x30
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001c90 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	4803      	ldr	r0, [pc, #12]	@ (8001cac <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8001c9e:	f005 f827 	bl	8006cf0 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8001ca2:	bf00      	nop
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20000750 	.word	0x20000750

08001cb0 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	2101      	movs	r1, #1
 8001cbc:	4803      	ldr	r0, [pc, #12]	@ (8001ccc <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8001cbe:	f005 f817 	bl	8006cf0 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8001cc2:	bf00      	nop
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	20000750 	.word	0x20000750

08001cd0 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8001cda:	2100      	movs	r1, #0
 8001cdc:	4804      	ldr	r0, [pc, #16]	@ (8001cf0 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8001cde:	f005 f81f 	bl	8006d20 <HAL_RTCEx_BKUPRead>
 8001ce2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8001ce4:	687b      	ldr	r3, [r7, #4]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000750 	.word	0x20000750

08001cf4 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8001cfe:	2101      	movs	r1, #1
 8001d00:	4804      	ldr	r0, [pc, #16]	@ (8001d14 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8001d02:	f005 f80d 	bl	8006d20 <HAL_RTCEx_BKUPRead>
 8001d06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8001d08:	687b      	ldr	r3, [r7, #4]
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20000750 	.word	0x20000750

08001d18 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	2102      	movs	r1, #2
 8001d24:	4803      	ldr	r0, [pc, #12]	@ (8001d34 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8001d26:	f004 ffe3 	bl	8006cf0 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20000750 	.word	0x20000750

08001d38 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8001d3e:	2102      	movs	r1, #2
 8001d40:	4804      	ldr	r0, [pc, #16]	@ (8001d54 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8001d42:	f004 ffed 	bl	8006d20 <HAL_RTCEx_BKUPRead>
 8001d46:	6078      	str	r0, [r7, #4]
  return MSBticks;
 8001d48:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20000750 	.word	0x20000750

08001d58 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8001d5e:	480b      	ldr	r0, [pc, #44]	@ (8001d8c <GetTimerTicks+0x34>)
 8001d60:	f7ff fde2 	bl	8001928 <LL_RTC_TIME_GetSubSecond>
 8001d64:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001d66:	e003      	b.n	8001d70 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 8001d68:	4808      	ldr	r0, [pc, #32]	@ (8001d8c <GetTimerTicks+0x34>)
 8001d6a:	f7ff fddd 	bl	8001928 <LL_RTC_TIME_GetSubSecond>
 8001d6e:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001d70:	4806      	ldr	r0, [pc, #24]	@ (8001d8c <GetTimerTicks+0x34>)
 8001d72:	f7ff fdd9 	bl	8001928 <LL_RTC_TIME_GetSubSecond>
 8001d76:	4602      	mov	r2, r0
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d1f4      	bne.n	8001d68 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40002800 	.word	0x40002800

08001d90 <LL_AHB2_GRP1_EnableClock>:
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d9c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001d9e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001da8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4013      	ands	r3, r2
 8001db2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001db4:	68fb      	ldr	r3, [r7, #12]
}
 8001db6:	bf00      	nop
 8001db8:	3714      	adds	r7, #20
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bc80      	pop	{r7}
 8001dbe:	4770      	bx	lr

08001dc0 <LL_APB1_GRP1_EnableClock>:
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001dc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dcc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001dce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001dd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ddc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4013      	ands	r3, r2
 8001de2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001de4:	68fb      	ldr	r3, [r7, #12]
}
 8001de6:	bf00      	nop
 8001de8:	3714      	adds	r7, #20
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr

08001df0 <LL_APB1_GRP1_DisableClock>:
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001df8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dfc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	43db      	mvns	r3, r3
 8001e02:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001e06:	4013      	ands	r3, r2
 8001e08:	658b      	str	r3, [r1, #88]	@ 0x58
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr

08001e14 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e18:	4b22      	ldr	r3, [pc, #136]	@ (8001ea4 <MX_USART2_UART_Init+0x90>)
 8001e1a:	4a23      	ldr	r2, [pc, #140]	@ (8001ea8 <MX_USART2_UART_Init+0x94>)
 8001e1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e1e:	4b21      	ldr	r3, [pc, #132]	@ (8001ea4 <MX_USART2_UART_Init+0x90>)
 8001e20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e26:	4b1f      	ldr	r3, [pc, #124]	@ (8001ea4 <MX_USART2_UART_Init+0x90>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e2c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ea4 <MX_USART2_UART_Init+0x90>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e32:	4b1c      	ldr	r3, [pc, #112]	@ (8001ea4 <MX_USART2_UART_Init+0x90>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e38:	4b1a      	ldr	r3, [pc, #104]	@ (8001ea4 <MX_USART2_UART_Init+0x90>)
 8001e3a:	220c      	movs	r2, #12
 8001e3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e3e:	4b19      	ldr	r3, [pc, #100]	@ (8001ea4 <MX_USART2_UART_Init+0x90>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e44:	4b17      	ldr	r3, [pc, #92]	@ (8001ea4 <MX_USART2_UART_Init+0x90>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e4a:	4b16      	ldr	r3, [pc, #88]	@ (8001ea4 <MX_USART2_UART_Init+0x90>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e50:	4b14      	ldr	r3, [pc, #80]	@ (8001ea4 <MX_USART2_UART_Init+0x90>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e56:	4b13      	ldr	r3, [pc, #76]	@ (8001ea4 <MX_USART2_UART_Init+0x90>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e5c:	4811      	ldr	r0, [pc, #68]	@ (8001ea4 <MX_USART2_UART_Init+0x90>)
 8001e5e:	f005 fc5a 	bl	8007716 <HAL_UART_Init>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001e68:	f7ff fa2a 	bl	80012c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	480d      	ldr	r0, [pc, #52]	@ (8001ea4 <MX_USART2_UART_Init+0x90>)
 8001e70:	f007 fd7d 	bl	800996e <HAL_UARTEx_SetTxFifoThreshold>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001e7a:	f7ff fa21 	bl	80012c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e7e:	2100      	movs	r1, #0
 8001e80:	4808      	ldr	r0, [pc, #32]	@ (8001ea4 <MX_USART2_UART_Init+0x90>)
 8001e82:	f007 fdb2 	bl	80099ea <HAL_UARTEx_SetRxFifoThreshold>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001e8c:	f7ff fa18 	bl	80012c0 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8001e90:	4804      	ldr	r0, [pc, #16]	@ (8001ea4 <MX_USART2_UART_Init+0x90>)
 8001e92:	f007 fd31 	bl	80098f8 <HAL_UARTEx_EnableFifoMode>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001e9c:	f7ff fa10 	bl	80012c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ea0:	bf00      	nop
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	200007a4 	.word	0x200007a4
 8001ea8:	40004400 	.word	0x40004400

08001eac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b096      	sub	sp, #88	@ 0x58
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	60da      	str	r2, [r3, #12]
 8001ec2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ec4:	f107 030c 	add.w	r3, r7, #12
 8001ec8:	2238      	movs	r2, #56	@ 0x38
 8001eca:	2100      	movs	r1, #0
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f01d fd09 	bl	801f8e4 <memset>
  if(uartHandle->Instance==USART2)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a33      	ldr	r2, [pc, #204]	@ (8001fa4 <HAL_UART_MspInit+0xf8>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d15f      	bne.n	8001f9c <HAL_UART_MspInit+0xf0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001edc:	2302      	movs	r3, #2
 8001ede:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001ee0:	4b31      	ldr	r3, [pc, #196]	@ (8001fa8 <HAL_UART_MspInit+0xfc>)
 8001ee2:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ee4:	f107 030c 	add.w	r3, r7, #12
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f004 f929 	bl	8006140 <HAL_RCCEx_PeriphCLKConfig>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ef4:	f7ff f9e4 	bl	80012c0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ef8:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001efc:	f7ff ff60 	bl	8001dc0 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f00:	2001      	movs	r0, #1
 8001f02:	f7ff ff45 	bl	8001d90 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8001f06:	230c      	movs	r3, #12
 8001f08:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f12:	2303      	movs	r3, #3
 8001f14:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f16:	2307      	movs	r3, #7
 8001f18:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f1a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001f1e:	4619      	mov	r1, r3
 8001f20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f24:	f001 fcd6 	bl	80038d4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel5;
 8001f28:	4b20      	ldr	r3, [pc, #128]	@ (8001fac <HAL_UART_MspInit+0x100>)
 8001f2a:	4a21      	ldr	r2, [pc, #132]	@ (8001fb0 <HAL_UART_MspInit+0x104>)
 8001f2c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001f2e:	4b1f      	ldr	r3, [pc, #124]	@ (8001fac <HAL_UART_MspInit+0x100>)
 8001f30:	2214      	movs	r2, #20
 8001f32:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f34:	4b1d      	ldr	r3, [pc, #116]	@ (8001fac <HAL_UART_MspInit+0x100>)
 8001f36:	2210      	movs	r2, #16
 8001f38:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f3a:	4b1c      	ldr	r3, [pc, #112]	@ (8001fac <HAL_UART_MspInit+0x100>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f40:	4b1a      	ldr	r3, [pc, #104]	@ (8001fac <HAL_UART_MspInit+0x100>)
 8001f42:	2280      	movs	r2, #128	@ 0x80
 8001f44:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f46:	4b19      	ldr	r3, [pc, #100]	@ (8001fac <HAL_UART_MspInit+0x100>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f4c:	4b17      	ldr	r3, [pc, #92]	@ (8001fac <HAL_UART_MspInit+0x100>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001f52:	4b16      	ldr	r3, [pc, #88]	@ (8001fac <HAL_UART_MspInit+0x100>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f58:	4b14      	ldr	r3, [pc, #80]	@ (8001fac <HAL_UART_MspInit+0x100>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001f5e:	4813      	ldr	r0, [pc, #76]	@ (8001fac <HAL_UART_MspInit+0x100>)
 8001f60:	f001 f8a0 	bl	80030a4 <HAL_DMA_Init>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8001f6a:	f7ff f9a9 	bl	80012c0 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001f6e:	2110      	movs	r1, #16
 8001f70:	480e      	ldr	r0, [pc, #56]	@ (8001fac <HAL_UART_MspInit+0x100>)
 8001f72:	f001 fbd7 	bl	8003724 <HAL_DMA_ConfigChannelAttributes>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <HAL_UART_MspInit+0xd4>
    {
      Error_Handler();
 8001f7c:	f7ff f9a0 	bl	80012c0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	4a0a      	ldr	r2, [pc, #40]	@ (8001fac <HAL_UART_MspInit+0x100>)
 8001f84:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001f86:	4a09      	ldr	r2, [pc, #36]	@ (8001fac <HAL_UART_MspInit+0x100>)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	2102      	movs	r1, #2
 8001f90:	2025      	movs	r0, #37	@ 0x25
 8001f92:	f001 f842 	bl	800301a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f96:	2025      	movs	r0, #37	@ 0x25
 8001f98:	f001 f859 	bl	800304e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001f9c:	bf00      	nop
 8001f9e:	3758      	adds	r7, #88	@ 0x58
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40004400 	.word	0x40004400
 8001fa8:	000c0004 	.word	0x000c0004
 8001fac:	20000838 	.word	0x20000838
 8001fb0:	40020058 	.word	0x40020058

08001fb4 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART2)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a0b      	ldr	r2, [pc, #44]	@ (8001ff0 <HAL_UART_MspDeInit+0x3c>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d110      	bne.n	8001fe8 <HAL_UART_MspDeInit+0x34>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8001fc6:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8001fca:	f7ff ff11 	bl	8001df0 <LL_APB1_GRP1_DisableClock>

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 8001fce:	210c      	movs	r1, #12
 8001fd0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001fd4:	f001 fdde 	bl	8003b94 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f001 f909 	bl	80031f4 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8001fe2:	2025      	movs	r0, #37	@ 0x25
 8001fe4:	f001 f841 	bl	800306a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8001fe8:	bf00      	nop
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40004400 	.word	0x40004400

08001ff4 <LL_APB1_GRP1_ForceReset>:
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8001ffc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002000:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002002:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4313      	orrs	r3, r2
 800200a:	638b      	str	r3, [r1, #56]	@ 0x38
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	bc80      	pop	{r7}
 8002014:	4770      	bx	lr

08002016 <LL_APB1_GRP1_ReleaseReset>:
{
 8002016:	b480      	push	{r7}
 8002018:	b083      	sub	sp, #12
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 800201e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002022:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	43db      	mvns	r3, r3
 8002028:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800202c:	4013      	ands	r3, r2
 800202e:	638b      	str	r3, [r1, #56]	@ 0x38
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	bc80      	pop	{r7}
 8002038:	4770      	bx	lr
	...

0800203c <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002044:	4b06      	ldr	r3, [pc, #24]	@ (8002060 <LL_EXTI_EnableIT_0_31+0x24>)
 8002046:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800204a:	4905      	ldr	r1, [pc, #20]	@ (8002060 <LL_EXTI_EnableIT_0_31+0x24>)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4313      	orrs	r3, r2
 8002050:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	bc80      	pop	{r7}
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	58000800 	.word	0x58000800

08002064 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 800206c:	4a07      	ldr	r2, [pc, #28]	@ (800208c <vcom_Init+0x28>)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 8002072:	f7ff f88b 	bl	800118c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002076:	f7ff fecd 	bl	8001e14 <MX_USART2_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
 800207a:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 800207e:	f7ff ffdd 	bl	800203c <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 8002082:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002084:	4618      	mov	r0, r3
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	2000089c 	.word	0x2000089c

08002090 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 8002094:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8002098:	f7ff ffac 	bl	8001ff4 <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_USART2_RELEASE_RESET();
 800209c:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80020a0:	f7ff ffb9 	bl	8002016 <LL_APB1_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 80020a4:	4804      	ldr	r0, [pc, #16]	@ (80020b8 <vcom_DeInit+0x28>)
 80020a6:	f7ff ff85 	bl	8001fb4 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 80020aa:	200f      	movs	r0, #15
 80020ac:	f000 ffdd 	bl	800306a <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 80020b0:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	200007a4 	.word	0x200007a4

080020bc <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	460b      	mov	r3, r1
 80020c6:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 80020c8:	887b      	ldrh	r3, [r7, #2]
 80020ca:	461a      	mov	r2, r3
 80020cc:	6879      	ldr	r1, [r7, #4]
 80020ce:	4804      	ldr	r0, [pc, #16]	@ (80020e0 <vcom_Trace_DMA+0x24>)
 80020d0:	f005 fbbe 	bl	8007850 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 80020d4:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	200007a4 	.word	0x200007a4

080020e4 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 80020ec:	4a19      	ldr	r2, [pc, #100]	@ (8002154 <vcom_ReceiveInit+0x70>)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80020f2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80020f6:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 80020f8:	f107 0308 	add.w	r3, r7, #8
 80020fc:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002100:	4815      	ldr	r0, [pc, #84]	@ (8002158 <vcom_ReceiveInit+0x74>)
 8002102:	f007 fb6c 	bl	80097de <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 8002106:	bf00      	nop
 8002108:	4b13      	ldr	r3, [pc, #76]	@ (8002158 <vcom_ReceiveInit+0x74>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002112:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002116:	d0f7      	beq.n	8002108 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 8002118:	bf00      	nop
 800211a:	4b0f      	ldr	r3, [pc, #60]	@ (8002158 <vcom_ReceiveInit+0x74>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	69db      	ldr	r3, [r3, #28]
 8002120:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002124:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002128:	d1f7      	bne.n	800211a <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 800212a:	4b0b      	ldr	r3, [pc, #44]	@ (8002158 <vcom_ReceiveInit+0x74>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	4b09      	ldr	r3, [pc, #36]	@ (8002158 <vcom_ReceiveInit+0x74>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8002138:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 800213a:	4807      	ldr	r0, [pc, #28]	@ (8002158 <vcom_ReceiveInit+0x74>)
 800213c:	f007 fbaa 	bl	8009894 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 8002140:	2201      	movs	r2, #1
 8002142:	4906      	ldr	r1, [pc, #24]	@ (800215c <vcom_ReceiveInit+0x78>)
 8002144:	4804      	ldr	r0, [pc, #16]	@ (8002158 <vcom_ReceiveInit+0x74>)
 8002146:	f005 fb37 	bl	80077b8 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 800214a:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 800214c:	4618      	mov	r0, r3
 800214e:	3710      	adds	r7, #16
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	200008a0 	.word	0x200008a0
 8002158:	200007a4 	.word	0x200007a4
 800215c:	20000898 	.word	0x20000898

08002160 <vcom_Resume>:

void vcom_Resume(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002164:	4808      	ldr	r0, [pc, #32]	@ (8002188 <vcom_Resume+0x28>)
 8002166:	f005 fad6 	bl	8007716 <HAL_UART_Init>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <vcom_Resume+0x14>
  {
    Error_Handler();
 8002170:	f7ff f8a6 	bl	80012c0 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002174:	4805      	ldr	r0, [pc, #20]	@ (800218c <vcom_Resume+0x2c>)
 8002176:	f000 ff95 	bl	80030a4 <HAL_DMA_Init>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <vcom_Resume+0x24>
  {
    Error_Handler();
 8002180:	f7ff f89e 	bl	80012c0 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8002184:	bf00      	nop
 8002186:	bd80      	pop	{r7, pc}
 8002188:	200007a4 	.word	0x200007a4
 800218c:	20000838 	.word	0x20000838

08002190 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a05      	ldr	r2, [pc, #20]	@ (80021b4 <HAL_UART_TxCpltCallback+0x24>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d103      	bne.n	80021aa <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 80021a2:	4b05      	ldr	r3, [pc, #20]	@ (80021b8 <HAL_UART_TxCpltCallback+0x28>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2000      	movs	r0, #0
 80021a8:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40004400 	.word	0x40004400
 80021b8:	2000089c 	.word	0x2000089c

080021bc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002200 <HAL_UART_RxCpltCallback+0x44>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d113      	bne.n	80021f6 <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 80021ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002204 <HAL_UART_RxCpltCallback+0x48>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00a      	beq.n	80021ec <HAL_UART_RxCpltCallback+0x30>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d105      	bne.n	80021ec <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 80021e0:	4b08      	ldr	r3, [pc, #32]	@ (8002204 <HAL_UART_RxCpltCallback+0x48>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2200      	movs	r2, #0
 80021e6:	2101      	movs	r1, #1
 80021e8:	4807      	ldr	r0, [pc, #28]	@ (8002208 <HAL_UART_RxCpltCallback+0x4c>)
 80021ea:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 80021ec:	2201      	movs	r2, #1
 80021ee:	4906      	ldr	r1, [pc, #24]	@ (8002208 <HAL_UART_RxCpltCallback+0x4c>)
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f005 fae1 	bl	80077b8 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 80021f6:	bf00      	nop
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40004400 	.word	0x40004400
 8002204:	200008a0 	.word	0x200008a0
 8002208:	20000898 	.word	0x20000898

0800220c <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */
	my_MX_GPIO_Init_done = 1;
 8002210:	4b04      	ldr	r3, [pc, #16]	@ (8002224 <MX_LoRaWAN_Init+0x18>)
 8002212:	2201      	movs	r2, #1
 8002214:	701a      	strb	r2, [r3, #0]
  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8002216:	f7ff f9f5 	bl	8001604 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800221a:	f000 f80d 	bl	8002238 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800221e:	bf00      	nop
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	200008a4 	.word	0x200008a4

08002228 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800222c:	f04f 30ff 	mov.w	r0, #4294967295
 8002230:	f017 fcae 	bl	8019b90 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8002234:	bf00      	nop
 8002236:	bd80      	pop	{r7, pc}

08002238 <LoRaWAN_Init>:


/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
#endif

#if MY_TX

#if MY_TX_ABP
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_RTF), UTIL_SEQ_RFU, SendTxData);	// Register task for: SendTxData
 800223c:	4a1e      	ldr	r2, [pc, #120]	@ (80022b8 <LoRaWAN_Init+0x80>)
 800223e:	2100      	movs	r1, #0
 8002240:	2010      	movs	r0, #16
 8002242:	f017 fda1 	bl	8019d88 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_EHF), UTIL_SEQ_RFU, My_EHF);		// Register task for: My_EHF
 8002246:	4a1d      	ldr	r2, [pc, #116]	@ (80022bc <LoRaWAN_Init+0x84>)
 8002248:	2100      	movs	r1, #0
 800224a:	2020      	movs	r0, #32
 800224c:	f017 fd9c 	bl	8019d88 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_ESF), UTIL_SEQ_RFU, My_ESF);		// Register task for: My_ESF
 8002250:	4a1b      	ldr	r2, [pc, #108]	@ (80022c0 <LoRaWAN_Init+0x88>)
 8002252:	2100      	movs	r1, #0
 8002254:	2040      	movs	r0, #64	@ 0x40
 8002256:	f017 fd97 	bl	8019d88 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_SMF), UTIL_SEQ_RFU, My_SMF);	 	// Register Task for: My_SMF
 800225a:	4a1a      	ldr	r2, [pc, #104]	@ (80022c4 <LoRaWAN_Init+0x8c>)
 800225c:	2100      	movs	r1, #0
 800225e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002262:	f017 fd91 	bl	8019d88 <UTIL_SEQ_RegTask>
#if AI
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_AIF), UTIL_SEQ_RFU, My_AIF);		// Register Task for: My_AIF
 8002266:	4a18      	ldr	r2, [pc, #96]	@ (80022c8 <LoRaWAN_Init+0x90>)
 8002268:	2100      	movs	r1, #0
 800226a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800226e:	f017 fd8b 	bl	8019d88 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_EHF), UTIL_SEQ_RFU, My_EHF);		// Register task for: My_EHF
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_ESF), UTIL_SEQ_RFU, My_ESF);		// Register task for: My_ESF
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_SMF), UTIL_SEQ_RFU, My_SMF);	 	// Register Task for: My_SMF
#endif

	LoraInfo_Init();									 					// LoRaWAN info (Region, ClassB, Kms(Key Management Service))
 8002272:	f000 f9b1 	bl	80025d8 <LoraInfo_Init>

	LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);     					// LoRaMacPrimitives: Used to notify LmHandler of LoRaMac events and LoRaMacCallbacks On MacProcessNotify:
 8002276:	4915      	ldr	r1, [pc, #84]	@ (80022cc <LoRaWAN_Init+0x94>)
 8002278:	4815      	ldr	r0, [pc, #84]	@ (80022d0 <LoRaWAN_Init+0x98>)
 800227a:	f007 fc63 	bl	8009b44 <LmHandlerInit>
	// When a radio interrupt (IRQ) occurs, it means that the radio has finished transmitting or receiving a message and needs to be handled by the MAC layer

	//LmHandlerParams.TxDatarate = 2;
	LmHandlerConfigure(&LmHandlerParams);                					// LoRaWAN Configuration using LmHandlerParams
 800227e:	4815      	ldr	r0, [pc, #84]	@ (80022d4 <LoRaWAN_Init+0x9c>)
 8002280:	f007 fc8e 	bl	8009ba0 <LmHandlerConfigure>

	LmHandlerJoin(ActivationType, ForceRejoin);          					// LoRaWAN network ACTIVATION_TYPE_ABP file  (LmHandlerJoin) is modified, to work only with ABP no need to OTAA activation
 8002284:	4b14      	ldr	r3, [pc, #80]	@ (80022d8 <LoRaWAN_Init+0xa0>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	4a14      	ldr	r2, [pc, #80]	@ (80022dc <LoRaWAN_Init+0xa4>)
 800228a:	7812      	ldrb	r2, [r2, #0]
 800228c:	4611      	mov	r1, r2
 800228e:	4618      	mov	r0, r3
 8002290:	f007 fda8 	bl	8009de4 <LmHandlerJoin>

	if (my_Current_State != PSS)
 8002294:	4b12      	ldr	r3, [pc, #72]	@ (80022e0 <LoRaWAN_Init+0xa8>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d002      	beq.n	80022a2 <LoRaWAN_Init+0x6a>
	{
		my_SubghzApp_Init_done = 1;
 800229c:	4b11      	ldr	r3, [pc, #68]	@ (80022e4 <LoRaWAN_Init+0xac>)
 800229e:	2201      	movs	r2, #1
 80022a0:	701a      	strb	r2, [r3, #0]
#if MY_RADIO_DEACTIVATION
		Radio.Sleep();
#endif
	}
#if MY_TX_ABP
	SendTxData();
 80022a2:	f000 f92d 	bl	8002500 <SendTxData>
#endif
	my_LoRAWAN_Init++;
 80022a6:	4b10      	ldr	r3, [pc, #64]	@ (80022e8 <LoRaWAN_Init+0xb0>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	3301      	adds	r3, #1
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	4b0e      	ldr	r3, [pc, #56]	@ (80022e8 <LoRaWAN_Init+0xb0>)
 80022b0:	701a      	strb	r2, [r3, #0]
#endif
	/* USER CODE END LoRaWAN_Init_Last */
}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	08002501 	.word	0x08002501
 80022bc:	0801ba19 	.word	0x0801ba19
 80022c0:	0801bbc1 	.word	0x0801bbc1
 80022c4:	0801bd01 	.word	0x0801bd01
 80022c8:	0801bda1 	.word	0x0801bda1
 80022cc:	01030000 	.word	0x01030000
 80022d0:	20000004 	.word	0x20000004
 80022d4:	20000050 	.word	0x20000050
 80022d8:	20000000 	.word	0x20000000
 80022dc:	200008a6 	.word	0x200008a6
 80022e0:	20001be9 	.word	0x20001be9
 80022e4:	200008a7 	.word	0x200008a7
 80022e8:	200008a5 	.word	0x200008a5

080022ec <My_Adv_Data_Init>:


#if MY_TX

void My_Adv_Data_Init(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	607b      	str	r3, [r7, #4]

	if (my_LoRAWAN_Init++ > N_LORA_TX)
 80022f6:	4b59      	ldr	r3, [pc, #356]	@ (800245c <My_Adv_Data_Init+0x170>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	1c5a      	adds	r2, r3, #1
 80022fc:	b2d1      	uxtb	r1, r2
 80022fe:	4a57      	ldr	r2, [pc, #348]	@ (800245c <My_Adv_Data_Init+0x170>)
 8002300:	7011      	strb	r1, [r2, #0]
 8002302:	2b01      	cmp	r3, #1
 8002304:	f240 809a 	bls.w	800243c <My_Adv_Data_Init+0x150>
	{
		AppData.Buffer[i++] = (uint8_t)((my_Trise_time >> 8) & 0xFF); 			// 0
 8002308:	4b55      	ldr	r3, [pc, #340]	@ (8002460 <My_Adv_Data_Init+0x174>)
 800230a:	881b      	ldrh	r3, [r3, #0]
 800230c:	0a1b      	lsrs	r3, r3, #8
 800230e:	b298      	uxth	r0, r3
 8002310:	4b54      	ldr	r3, [pc, #336]	@ (8002464 <My_Adv_Data_Init+0x178>)
 8002312:	685a      	ldr	r2, [r3, #4]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	1c59      	adds	r1, r3, #1
 8002318:	6079      	str	r1, [r7, #4]
 800231a:	4413      	add	r3, r2
 800231c:	b2c2      	uxtb	r2, r0
 800231e:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)(my_Trise_time & 0xFF); 					// 1
 8002320:	4b4f      	ldr	r3, [pc, #316]	@ (8002460 <My_Adv_Data_Init+0x174>)
 8002322:	8818      	ldrh	r0, [r3, #0]
 8002324:	4b4f      	ldr	r3, [pc, #316]	@ (8002464 <My_Adv_Data_Init+0x178>)
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	1c59      	adds	r1, r3, #1
 800232c:	6079      	str	r1, [r7, #4]
 800232e:	4413      	add	r3, r2
 8002330:	b2c2      	uxtb	r2, r0
 8002332:	701a      	strb	r2, [r3, #0]

#if MY_ES_FEATURE_ENABLE

		if(my_Cmode == DCM)
 8002334:	4b4c      	ldr	r3, [pc, #304]	@ (8002468 <My_Adv_Data_Init+0x17c>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d103      	bne.n	8002344 <My_Adv_Data_Init+0x58>
		{
			my_ESD_Level = 0;
 800233c:	4b4b      	ldr	r3, [pc, #300]	@ (800246c <My_Adv_Data_Init+0x180>)
 800233e:	2200      	movs	r2, #0
 8002340:	701a      	strb	r2, [r3, #0]
 8002342:	e00a      	b.n	800235a <My_Adv_Data_Init+0x6e>
		}
		else if (my_Cmode == CCM)
 8002344:	4b48      	ldr	r3, [pc, #288]	@ (8002468 <My_Adv_Data_Init+0x17c>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d103      	bne.n	8002354 <My_Adv_Data_Init+0x68>
		{
			my_ESD_Level = 1;
 800234c:	4b47      	ldr	r3, [pc, #284]	@ (800246c <My_Adv_Data_Init+0x180>)
 800234e:	2201      	movs	r2, #1
 8002350:	701a      	strb	r2, [r3, #0]
 8002352:	e002      	b.n	800235a <My_Adv_Data_Init+0x6e>
		}
		else
		{
			my_ESD_Level = 2;
 8002354:	4b45      	ldr	r3, [pc, #276]	@ (800246c <My_Adv_Data_Init+0x180>)
 8002356:	2202      	movs	r2, #2
 8002358:	701a      	strb	r2, [r3, #0]
		}
		AppData.Buffer[i++] = (uint8_t)(my_ESD_Level & 0xFF); 					// 2
 800235a:	4b42      	ldr	r3, [pc, #264]	@ (8002464 <My_Adv_Data_Init+0x178>)
 800235c:	685a      	ldr	r2, [r3, #4]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	1c59      	adds	r1, r3, #1
 8002362:	6079      	str	r1, [r7, #4]
 8002364:	4413      	add	r3, r2
 8002366:	4a41      	ldr	r2, [pc, #260]	@ (800246c <My_Adv_Data_Init+0x180>)
 8002368:	7812      	ldrb	r2, [r2, #0]
 800236a:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)(My_EBK_status & 0xFF); 					// 3
 800236c:	4b3d      	ldr	r3, [pc, #244]	@ (8002464 <My_Adv_Data_Init+0x178>)
 800236e:	685a      	ldr	r2, [r3, #4]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	1c59      	adds	r1, r3, #1
 8002374:	6079      	str	r1, [r7, #4]
 8002376:	4413      	add	r3, r2
 8002378:	4a3d      	ldr	r2, [pc, #244]	@ (8002470 <My_Adv_Data_Init+0x184>)
 800237a:	7812      	ldrb	r2, [r2, #0]
 800237c:	701a      	strb	r2, [r3, #0]

#if MY_SM_FEATURE_ENABLE

#if MY_SHT40
		/**** Get Temperature from STH40 ****/
		AppData.Buffer[i++] = (uint8_t)((my_SHT40_Temp >> 24) & 0xFF); 			// 4
 800237e:	4b3d      	ldr	r3, [pc, #244]	@ (8002474 <My_Adv_Data_Init+0x188>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	0e18      	lsrs	r0, r3, #24
 8002384:	4b37      	ldr	r3, [pc, #220]	@ (8002464 <My_Adv_Data_Init+0x178>)
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	1c59      	adds	r1, r3, #1
 800238c:	6079      	str	r1, [r7, #4]
 800238e:	4413      	add	r3, r2
 8002390:	b2c2      	uxtb	r2, r0
 8002392:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)((my_SHT40_Temp >> 16) & 0xFF); 			// 5
 8002394:	4b37      	ldr	r3, [pc, #220]	@ (8002474 <My_Adv_Data_Init+0x188>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	0c18      	lsrs	r0, r3, #16
 800239a:	4b32      	ldr	r3, [pc, #200]	@ (8002464 <My_Adv_Data_Init+0x178>)
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	1c59      	adds	r1, r3, #1
 80023a2:	6079      	str	r1, [r7, #4]
 80023a4:	4413      	add	r3, r2
 80023a6:	b2c2      	uxtb	r2, r0
 80023a8:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)((my_SHT40_Temp >> 8) & 0xFF); 			// 6
 80023aa:	4b32      	ldr	r3, [pc, #200]	@ (8002474 <My_Adv_Data_Init+0x188>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	0a18      	lsrs	r0, r3, #8
 80023b0:	4b2c      	ldr	r3, [pc, #176]	@ (8002464 <My_Adv_Data_Init+0x178>)
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	1c59      	adds	r1, r3, #1
 80023b8:	6079      	str	r1, [r7, #4]
 80023ba:	4413      	add	r3, r2
 80023bc:	b2c2      	uxtb	r2, r0
 80023be:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)(my_SHT40_Temp & 0xFF); 					// 7
 80023c0:	4b2c      	ldr	r3, [pc, #176]	@ (8002474 <My_Adv_Data_Init+0x188>)
 80023c2:	6818      	ldr	r0, [r3, #0]
 80023c4:	4b27      	ldr	r3, [pc, #156]	@ (8002464 <My_Adv_Data_Init+0x178>)
 80023c6:	685a      	ldr	r2, [r3, #4]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	1c59      	adds	r1, r3, #1
 80023cc:	6079      	str	r1, [r7, #4]
 80023ce:	4413      	add	r3, r2
 80023d0:	b2c2      	uxtb	r2, r0
 80023d2:	701a      	strb	r2, [r3, #0]

		/**** Get RH from STH40 ****/
		AppData.Buffer[i++] = (uint8_t)((my_SHT40_Humid >> 24) & 0xFF); 		// 8
 80023d4:	4b28      	ldr	r3, [pc, #160]	@ (8002478 <My_Adv_Data_Init+0x18c>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	0e18      	lsrs	r0, r3, #24
 80023da:	4b22      	ldr	r3, [pc, #136]	@ (8002464 <My_Adv_Data_Init+0x178>)
 80023dc:	685a      	ldr	r2, [r3, #4]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	1c59      	adds	r1, r3, #1
 80023e2:	6079      	str	r1, [r7, #4]
 80023e4:	4413      	add	r3, r2
 80023e6:	b2c2      	uxtb	r2, r0
 80023e8:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)((my_SHT40_Humid >> 16) & 0xFF); 		// 9
 80023ea:	4b23      	ldr	r3, [pc, #140]	@ (8002478 <My_Adv_Data_Init+0x18c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	0c18      	lsrs	r0, r3, #16
 80023f0:	4b1c      	ldr	r3, [pc, #112]	@ (8002464 <My_Adv_Data_Init+0x178>)
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	1c59      	adds	r1, r3, #1
 80023f8:	6079      	str	r1, [r7, #4]
 80023fa:	4413      	add	r3, r2
 80023fc:	b2c2      	uxtb	r2, r0
 80023fe:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)((my_SHT40_Humid >> 8) & 0xFF); 			// 10
 8002400:	4b1d      	ldr	r3, [pc, #116]	@ (8002478 <My_Adv_Data_Init+0x18c>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	0a18      	lsrs	r0, r3, #8
 8002406:	4b17      	ldr	r3, [pc, #92]	@ (8002464 <My_Adv_Data_Init+0x178>)
 8002408:	685a      	ldr	r2, [r3, #4]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	1c59      	adds	r1, r3, #1
 800240e:	6079      	str	r1, [r7, #4]
 8002410:	4413      	add	r3, r2
 8002412:	b2c2      	uxtb	r2, r0
 8002414:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)(my_SHT40_Humid & 0xFF); 				// 11
 8002416:	4b18      	ldr	r3, [pc, #96]	@ (8002478 <My_Adv_Data_Init+0x18c>)
 8002418:	6818      	ldr	r0, [r3, #0]
 800241a:	4b12      	ldr	r3, [pc, #72]	@ (8002464 <My_Adv_Data_Init+0x178>)
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	1c59      	adds	r1, r3, #1
 8002422:	6079      	str	r1, [r7, #4]
 8002424:	4413      	add	r3, r2
 8002426:	b2c2      	uxtb	r2, r0
 8002428:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)((my_Trise_time_stop >> 8) & 0xFF); 		// 43
		AppData.Buffer[i++] = (uint8_t)(my_Trise_time_stop & 0xFF); 			// 44
#endif
		/* Send the result of the neural network*/
#if AI
		AppData.Buffer[i++] =(uint8_t)(result_nn);
 800242a:	4b0e      	ldr	r3, [pc, #56]	@ (8002464 <My_Adv_Data_Init+0x178>)
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	1c59      	adds	r1, r3, #1
 8002432:	6079      	str	r1, [r7, #4]
 8002434:	4413      	add	r3, r2
 8002436:	4a11      	ldr	r2, [pc, #68]	@ (800247c <My_Adv_Data_Init+0x190>)
 8002438:	7812      	ldrb	r2, [r2, #0]
 800243a:	701a      	strb	r2, [r3, #0]
#endif
	}

	AppData.BufferSize = i;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	b2da      	uxtb	r2, r3
 8002440:	4b08      	ldr	r3, [pc, #32]	@ (8002464 <My_Adv_Data_Init+0x178>)
 8002442:	705a      	strb	r2, [r3, #1]
	AppData.Port = LORAWAN_USER_APP_PORT;
 8002444:	4b07      	ldr	r3, [pc, #28]	@ (8002464 <My_Adv_Data_Init+0x178>)
 8002446:	2202      	movs	r2, #2
 8002448:	701a      	strb	r2, [r3, #0]
	my_Trise_time = 0;
 800244a:	4b05      	ldr	r3, [pc, #20]	@ (8002460 <My_Adv_Data_Init+0x174>)
 800244c:	2200      	movs	r2, #0
 800244e:	801a      	strh	r2, [r3, #0]
}
 8002450:	bf00      	nop
 8002452:	370c      	adds	r7, #12
 8002454:	46bd      	mov	sp, r7
 8002456:	bc80      	pop	{r7}
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	200008a5 	.word	0x200008a5
 8002460:	20001bc6 	.word	0x20001bc6
 8002464:	20000068 	.word	0x20000068
 8002468:	20001bea 	.word	0x20001bea
 800246c:	20001bb8 	.word	0x20001bb8
 8002470:	20001bb9 	.word	0x20001bb9
 8002474:	20001bf8 	.word	0x20001bf8
 8002478:	20001bfc 	.word	0x20001bfc
 800247c:	20001a48 	.word	0x20001a48

08002480 <My_EMS_Adv_Data_Init>:

void My_EMS_Adv_Data_Init(void)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
	uint32_t i = 0;
 8002486:	2300      	movs	r3, #0
 8002488:	607b      	str	r3, [r7, #4]
	uint8_t j = 0;
 800248a:	2300      	movs	r3, #0
 800248c:	70fb      	strb	r3, [r7, #3]

	for(j=0;j<MY_DIM_EMS_BUFFER;j++)
 800248e:	2300      	movs	r3, #0
 8002490:	70fb      	strb	r3, [r7, #3]
 8002492:	e021      	b.n	80024d8 <My_EMS_Adv_Data_Init+0x58>
	{
		AppData.Buffer[i++] = (uint8_t)((my_ems_buffer[j] >> 8) & 0xFF);
 8002494:	78fb      	ldrb	r3, [r7, #3]
 8002496:	4a18      	ldr	r2, [pc, #96]	@ (80024f8 <My_EMS_Adv_Data_Init+0x78>)
 8002498:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800249c:	0a1b      	lsrs	r3, r3, #8
 800249e:	b298      	uxth	r0, r3
 80024a0:	4b16      	ldr	r3, [pc, #88]	@ (80024fc <My_EMS_Adv_Data_Init+0x7c>)
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	1c59      	adds	r1, r3, #1
 80024a8:	6079      	str	r1, [r7, #4]
 80024aa:	4413      	add	r3, r2
 80024ac:	b2c2      	uxtb	r2, r0
 80024ae:	701a      	strb	r2, [r3, #0]
		AppData.Buffer[i++] = (uint8_t)(my_ems_buffer[j] & 0xFF);
 80024b0:	78fb      	ldrb	r3, [r7, #3]
 80024b2:	4a11      	ldr	r2, [pc, #68]	@ (80024f8 <My_EMS_Adv_Data_Init+0x78>)
 80024b4:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 80024b8:	4b10      	ldr	r3, [pc, #64]	@ (80024fc <My_EMS_Adv_Data_Init+0x7c>)
 80024ba:	685a      	ldr	r2, [r3, #4]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	1c59      	adds	r1, r3, #1
 80024c0:	6079      	str	r1, [r7, #4]
 80024c2:	4413      	add	r3, r2
 80024c4:	b2c2      	uxtb	r2, r0
 80024c6:	701a      	strb	r2, [r3, #0]
		my_ems_buffer[j] = 0;
 80024c8:	78fb      	ldrb	r3, [r7, #3]
 80024ca:	4a0b      	ldr	r2, [pc, #44]	@ (80024f8 <My_EMS_Adv_Data_Init+0x78>)
 80024cc:	2100      	movs	r1, #0
 80024ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(j=0;j<MY_DIM_EMS_BUFFER;j++)
 80024d2:	78fb      	ldrb	r3, [r7, #3]
 80024d4:	3301      	adds	r3, #1
 80024d6:	70fb      	strb	r3, [r7, #3]
 80024d8:	78fb      	ldrb	r3, [r7, #3]
 80024da:	2b08      	cmp	r3, #8
 80024dc:	d9da      	bls.n	8002494 <My_EMS_Adv_Data_Init+0x14>
	}
	AppData.BufferSize = i;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	b2da      	uxtb	r2, r3
 80024e2:	4b06      	ldr	r3, [pc, #24]	@ (80024fc <My_EMS_Adv_Data_Init+0x7c>)
 80024e4:	705a      	strb	r2, [r3, #1]
	AppData.Port = LORAWAN_USER_APP_PORT;
 80024e6:	4b05      	ldr	r3, [pc, #20]	@ (80024fc <My_EMS_Adv_Data_Init+0x7c>)
 80024e8:	2202      	movs	r2, #2
 80024ea:	701a      	strb	r2, [r3, #0]

}
 80024ec:	bf00      	nop
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bc80      	pop	{r7}
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	20001bcc 	.word	0x20001bcc
 80024fc:	20000068 	.word	0x20000068

08002500 <SendTxData>:

void SendTxData(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
#if !(MY_DEBUGGER_ENABLED || MY_LPTIM_Monitor || MY_RTCB_Monitor)
	My_Set_All_GPIO_To_Analog_Mode();								// Set all GPIO in Analog Mode
 8002504:	f019 ff84 	bl	801c410 <My_Set_All_GPIO_To_Analog_Mode>
#endif

#if MY_ES_FEATURE_ENABLE
	My_VDD_to_ES_Switch(Switch_OPEN);											// Open VDD to ES Switch
 8002508:	2000      	movs	r0, #0
 800250a:	f01a faeb 	bl	801cae4 <My_VDD_to_ES_Switch>

#if MY_SHT40 && MY_STHS34PF80 && MY_STTS22H && STEVAL_HARVEST1
	My_VDD_to_VDDS2_Switch(Switch_OPEN);										// unBias the Sensors
#endif

	HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0); 	// Configure Radio Interrupt with the Highest Priority
 800250e:	2200      	movs	r2, #0
 8002510:	2100      	movs	r1, #0
 8002512:	2032      	movs	r0, #50	@ 0x32
 8002514:	f000 fd81 	bl	800301a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);			// Set Radio Interrupt
 8002518:	2032      	movs	r0, #50	@ 0x32
 800251a:	f000 fd98 	bl	800304e <HAL_NVIC_EnableIRQ>

	if (my_Current_State == PSS)
 800251e:	4b20      	ldr	r3, [pc, #128]	@ (80025a0 <SendTxData+0xa0>)
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d113      	bne.n	800254e <SendTxData+0x4e>
	{
		HAL_ResumeTick();
 8002526:	f000 fa4d 	bl	80029c4 <HAL_ResumeTick>
		while(1)
		{
			My_Adv_Data_Init();
 800252a:	f7ff fedf 	bl	80022ec <My_Adv_Data_Init>
			HAL_Delay(3000);			// If Supplied by a Battery --> Add a delay for the Idle time between TX
 800252e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002532:	f7ff f8f7 	bl	8001724 <HAL_Delay>
			my_Previous_State = PSS;
 8002536:	4b1b      	ldr	r3, [pc, #108]	@ (80025a4 <SendTxData+0xa4>)
 8002538:	2201      	movs	r2, #1
 800253a:	701a      	strb	r2, [r3, #0]
			LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);	// send the data using LoRaWAN parameters (lmhandler params) with zero delay on Tx
 800253c:	4b1a      	ldr	r3, [pc, #104]	@ (80025a8 <SendTxData+0xa8>)
 800253e:	78db      	ldrb	r3, [r3, #3]
 8002540:	2200      	movs	r2, #0
 8002542:	4619      	mov	r1, r3
 8002544:	4819      	ldr	r0, [pc, #100]	@ (80025ac <SendTxData+0xac>)
 8002546:	f007 fc89 	bl	8009e5c <LmHandlerSend>
			My_Adv_Data_Init();
 800254a:	bf00      	nop
 800254c:	e7ed      	b.n	800252a <SendTxData+0x2a>
		}
	}
	else
	{
		My_Exit_Stop2_Mode_WFI();
 800254e:	f01a f819 	bl	801c584 <My_Exit_Stop2_Mode_WFI>

		HAL_NVIC_ClearPendingIRQ(LPTIM1_IRQn);	// Clear LPTIM1 Interrupt
 8002552:	2027      	movs	r0, #39	@ 0x27
 8002554:	f000 fd97 	bl	8003086 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_DisableIRQ(LPTIM1_IRQn);		// Disable LPTIM1 Interrupt
 8002558:	2027      	movs	r0, #39	@ 0x27
 800255a:	f000 fd86 	bl	800306a <HAL_NVIC_DisableIRQ>

		if (my_Current_State != SMS)
 800255e:	4b10      	ldr	r3, [pc, #64]	@ (80025a0 <SendTxData+0xa0>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	2b07      	cmp	r3, #7
 8002564:	d005      	beq.n	8002572 <SendTxData+0x72>
		{
			my_Previous_State = EHS;
 8002566:	4b0f      	ldr	r3, [pc, #60]	@ (80025a4 <SendTxData+0xa4>)
 8002568:	2203      	movs	r2, #3
 800256a:	701a      	strb	r2, [r3, #0]
			my_Current_State = RTS;				// EHS --> RTS
 800256c:	4b0c      	ldr	r3, [pc, #48]	@ (80025a0 <SendTxData+0xa0>)
 800256e:	2202      	movs	r2, #2
 8002570:	701a      	strb	r2, [r3, #0]
		}

		/*Check if it is the first Wake-up event after the Energy Missing State (EMS)
		 *If the system just woke up from EMS it sends the buffer that has been filled during the night
		 */
		if(my_Previous_State == EMS)
 8002572:	4b0c      	ldr	r3, [pc, #48]	@ (80025a4 <SendTxData+0xa4>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	2b05      	cmp	r3, #5
 8002578:	d102      	bne.n	8002580 <SendTxData+0x80>
		{
			My_EMS_Adv_Data_Init();
 800257a:	f7ff ff81 	bl	8002480 <My_EMS_Adv_Data_Init>
 800257e:	e001      	b.n	8002584 <SendTxData+0x84>
		}
		else 									// Otherwise it sends the last measurement
		{
			My_Adv_Data_Init();
 8002580:	f7ff feb4 	bl	80022ec <My_Adv_Data_Init>
		}

		BSP_RADIO_Init();
 8002584:	f000 f8de 	bl	8002744 <BSP_RADIO_Init>
		LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);	// send the data using LoRaWAN parameters (lmhandler params) with zero delay on Tx
 8002588:	4b07      	ldr	r3, [pc, #28]	@ (80025a8 <SendTxData+0xa8>)
 800258a:	78db      	ldrb	r3, [r3, #3]
 800258c:	2200      	movs	r2, #0
 800258e:	4619      	mov	r1, r3
 8002590:	4806      	ldr	r0, [pc, #24]	@ (80025ac <SendTxData+0xac>)
 8002592:	f007 fc63 	bl	8009e5c <LmHandlerSend>
		BSP_RADIO_DeInit();
 8002596:	f000 f913 	bl	80027c0 <BSP_RADIO_DeInit>
	}
}
 800259a:	bf00      	nop
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	20001be9 	.word	0x20001be9
 80025a4:	20001be8 	.word	0x20001be8
 80025a8:	20000050 	.word	0x20000050
 80025ac:	20000068 	.word	0x20000068

080025b0 <OnTxData>:

}
#endif
#if MY_TX_ABP
static void OnTxData(LmHandlerTxParams_t *params)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN OnTxData_1 */

	/* USER CODE END OnTxData_1 */
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	bc80      	pop	{r7}
 80025c0:	4770      	bx	lr

080025c2 <OnMacProcessNotify>:
}
#endif

#if MY_TX
static void OnMacProcessNotify(void)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	af00      	add	r7, sp, #0
#if MY_TX_ABP
	/* USER CODE BEGIN OnMacProcessNotify_1 */
	LoRaMacProcess( );                                                            // should be Called at first the LoRaMAC process before to run all package process features
 80025c6:	f009 fabb 	bl	800bb40 <LoRaMacProcess>

	/* USER CODE END OnMacProcessNotify_1 */

	/* USER CODE BEGIN OnMacProcessNotify_2 */
	UTIL_SEQ_SetTask((1 <<CFG_SEQ_Task_EHF ), CFG_SEQ_Prio_0);   // My_EHF
 80025ca:	2100      	movs	r1, #0
 80025cc:	2020      	movs	r0, #32
 80025ce:	f017 fbfd 	bl	8019dcc <UTIL_SEQ_SetTask>
		UTIL_SEQ_SetTask((1 <<CFG_SEQ_Task_EHF ), CFG_SEQ_Prio_0);   // My_EHF
		}
	/* USER CODE END OnMacProcessNotify_2 */
#endif
	/* USER CODE END OnMacProcessNotify_2 */
}
 80025d2:	bf00      	nop
 80025d4:	bd80      	pop	{r7, pc}
	...

080025d8 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  loraInfo.ContextManagement = 0;
 80025dc:	4b15      	ldr	r3, [pc, #84]	@ (8002634 <LoraInfo_Init+0x5c>)
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 80025e2:	4b14      	ldr	r3, [pc, #80]	@ (8002634 <LoraInfo_Init+0x5c>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 80025e8:	4b12      	ldr	r3, [pc, #72]	@ (8002634 <LoraInfo_Init+0x5c>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 80025ee:	4b11      	ldr	r3, [pc, #68]	@ (8002634 <LoraInfo_Init+0x5c>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 80025f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002634 <LoraInfo_Init+0x5c>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f043 0320 	orr.w	r3, r3, #32
 80025fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002634 <LoraInfo_Init+0x5c>)
 80025fe:	6053      	str	r3, [r2, #4]
#endif
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 8002600:	4b0c      	ldr	r3, [pc, #48]	@ (8002634 <LoraInfo_Init+0x5c>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d10d      	bne.n	8002624 <LoraInfo_Init+0x4c>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 8002608:	4b0b      	ldr	r3, [pc, #44]	@ (8002638 <LoraInfo_Init+0x60>)
 800260a:	2200      	movs	r2, #0
 800260c:	2100      	movs	r1, #0
 800260e:	2000      	movs	r0, #0
 8002610:	f016 ff84 	bl	801951c <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 8002614:	bf00      	nop
 8002616:	f016 ff6f 	bl	80194f8 <UTIL_ADV_TRACE_IsBufferEmpty>
 800261a:	4603      	mov	r3, r0
 800261c:	2b01      	cmp	r3, #1
 800261e:	d1fa      	bne.n	8002616 <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 8002620:	bf00      	nop
 8002622:	e7fd      	b.n	8002620 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 8002624:	4b03      	ldr	r3, [pc, #12]	@ (8002634 <LoraInfo_Init+0x5c>)
 8002626:	2200      	movs	r2, #0
 8002628:	60da      	str	r2, [r3, #12]
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
#else /* CONTEXT_MANAGEMENT_ENABLED == 1 */
  loraInfo.ContextManagement = 1;
 800262a:	4b02      	ldr	r3, [pc, #8]	@ (8002634 <LoraInfo_Init+0x5c>)
 800262c:	2201      	movs	r2, #1
 800262e:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 8002630:	bf00      	nop
 8002632:	bd80      	pop	{r7, pc}
 8002634:	2000099c 	.word	0x2000099c
 8002638:	0802062c 	.word	0x0802062c

0800263c <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 8002640:	4b02      	ldr	r3, [pc, #8]	@ (800264c <LoraInfo_GetPtr+0x10>)
}
 8002642:	4618      	mov	r0, r3
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	2000099c 	.word	0x2000099c

08002650 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 8002654:	f000 f876 	bl	8002744 <BSP_RADIO_Init>
 8002658:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800265a:	4618      	mov	r0, r3
 800265c:	bd80      	pop	{r7, pc}

0800265e <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	b082      	sub	sp, #8
 8002662:	af00      	add	r7, sp, #0
 8002664:	4603      	mov	r3, r0
 8002666:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8002668:	79fb      	ldrb	r3, [r7, #7]
 800266a:	4618      	mov	r0, r3
 800266c:	f000 f8ce 	bl	800280c <BSP_RADIO_ConfigRFSwitch>
 8002670:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8002672:	4618      	mov	r0, r3
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800267a:	b580      	push	{r7, lr}
 800267c:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800267e:	f000 f921 	bl	80028c4 <BSP_RADIO_GetTxConfig>
 8002682:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8002684:	4618      	mov	r0, r3
 8002686:	bd80      	pop	{r7, pc}

08002688 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800268c:	f000 f921 	bl	80028d2 <BSP_RADIO_IsTCXO>
 8002690:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8002692:	4618      	mov	r0, r3
 8002694:	bd80      	pop	{r7, pc}

08002696 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800269a:	f000 f921 	bl	80028e0 <BSP_RADIO_IsDCDC>
 800269e:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4603      	mov	r3, r0
 80026ac:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 80026ae:	79fb      	ldrb	r3, [r7, #7]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f000 f91c 	bl	80028ee <BSP_RADIO_GetRFOMaxPowerConfig>
 80026b6:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80026c0:	480d      	ldr	r0, [pc, #52]	@ (80026f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80026c2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80026c4:	f01a fae0 	bl	801cc88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026c8:	480c      	ldr	r0, [pc, #48]	@ (80026fc <LoopForever+0x6>)
  ldr r1, =_edata
 80026ca:	490d      	ldr	r1, [pc, #52]	@ (8002700 <LoopForever+0xa>)
  ldr r2, =_sidata
 80026cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002704 <LoopForever+0xe>)
  movs r3, #0
 80026ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026d0:	e002      	b.n	80026d8 <LoopCopyDataInit>

080026d2 <CopyDataInit>:


CopyDataInit:
  ldr r4, [r2, r3]
 80026d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026d6:	3304      	adds	r3, #4

080026d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026dc:	d3f9      	bcc.n	80026d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026de:	4a0a      	ldr	r2, [pc, #40]	@ (8002708 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026e0:	4c0a      	ldr	r4, [pc, #40]	@ (800270c <LoopForever+0x16>)
  movs r3, #0
 80026e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026e4:	e001      	b.n	80026ea <LoopFillZerobss>

080026e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026e8:	3204      	adds	r2, #4

080026ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026ec:	d3fb      	bcc.n	80026e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80026ee:	f01d f95d 	bl	801f9ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026f2:	f7fe fdc5 	bl	8001280 <main>

080026f6 <LoopForever>:

LoopForever:
    b LoopForever
 80026f6:	e7fe      	b.n	80026f6 <LoopForever>
  ldr   r0, =_estack
 80026f8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80026fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002700:	20000698 	.word	0x20000698
  ldr r2, =_sidata
 8002704:	08021370 	.word	0x08021370
  ldr r2, =_sbss
 8002708:	200006cc 	.word	0x200006cc
  ldr r4, =_ebss
 800270c:	20001e38 	.word	0x20001e38

08002710 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002710:	e7fe      	b.n	8002710 <ADC_IRQHandler>

08002712 <LL_AHB2_GRP1_EnableClock>:
{
 8002712:	b480      	push	{r7}
 8002714:	b085      	sub	sp, #20
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800271a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800271e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002720:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4313      	orrs	r3, r2
 8002728:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800272a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800272e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4013      	ands	r3, r2
 8002734:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002736:	68fb      	ldr	r3, [r7, #12]
}
 8002738:	bf00      	nop
 800273a:	3714      	adds	r7, #20
 800273c:	46bd      	mov	sp, r7
 800273e:	bc80      	pop	{r7}
 8002740:	4770      	bx	lr
	...

08002744 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 800274a:	1d3b      	adds	r3, r7, #4
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	605a      	str	r2, [r3, #4]
 8002752:	609a      	str	r2, [r3, #8]
 8002754:	60da      	str	r2, [r3, #12]
 8002756:	611a      	str	r2, [r3, #16]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 8002758:	2004      	movs	r0, #4
 800275a:	f7ff ffda 	bl	8002712 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 800275e:	2310      	movs	r3, #16
 8002760:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002762:	2301      	movs	r3, #1
 8002764:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8002766:	2300      	movs	r3, #0
 8002768:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800276a:	2303      	movs	r3, #3
 800276c:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 800276e:	1d3b      	adds	r3, r7, #4
 8002770:	4619      	mov	r1, r3
 8002772:	4812      	ldr	r0, [pc, #72]	@ (80027bc <BSP_RADIO_Init+0x78>)
 8002774:	f001 f8ae 	bl	80038d4 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8002778:	2320      	movs	r3, #32
 800277a:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 800277c:	1d3b      	adds	r3, r7, #4
 800277e:	4619      	mov	r1, r3
 8002780:	480e      	ldr	r0, [pc, #56]	@ (80027bc <BSP_RADIO_Init+0x78>)
 8002782:	f001 f8a7 	bl	80038d4 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8002786:	2308      	movs	r3, #8
 8002788:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 800278a:	1d3b      	adds	r3, r7, #4
 800278c:	4619      	mov	r1, r3
 800278e:	480b      	ldr	r0, [pc, #44]	@ (80027bc <BSP_RADIO_Init+0x78>)
 8002790:	f001 f8a0 	bl	80038d4 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002794:	2200      	movs	r2, #0
 8002796:	2120      	movs	r1, #32
 8002798:	4808      	ldr	r0, [pc, #32]	@ (80027bc <BSP_RADIO_Init+0x78>)
 800279a:	f001 fac9 	bl	8003d30 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800279e:	2200      	movs	r2, #0
 80027a0:	2110      	movs	r1, #16
 80027a2:	4806      	ldr	r0, [pc, #24]	@ (80027bc <BSP_RADIO_Init+0x78>)
 80027a4:	f001 fac4 	bl	8003d30 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 80027a8:	2200      	movs	r2, #0
 80027aa:	2108      	movs	r1, #8
 80027ac:	4803      	ldr	r0, [pc, #12]	@ (80027bc <BSP_RADIO_Init+0x78>)
 80027ae:	f001 fabf 	bl	8003d30 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	48000800 	.word	0x48000800

080027c0 <BSP_RADIO_DeInit>:
/**
  * @brief  DeInit Radio Switch
  * @retval BSP status
  */
int32_t BSP_RADIO_DeInit(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
 80027c4:	2004      	movs	r0, #4
 80027c6:	f7ff ffa4 	bl	8002712 <LL_AHB2_GRP1_EnableClock>

  /* Turn off switch */
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80027ca:	2200      	movs	r2, #0
 80027cc:	2110      	movs	r1, #16
 80027ce:	480e      	ldr	r0, [pc, #56]	@ (8002808 <BSP_RADIO_DeInit+0x48>)
 80027d0:	f001 faae 	bl	8003d30 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80027d4:	2200      	movs	r2, #0
 80027d6:	2120      	movs	r1, #32
 80027d8:	480b      	ldr	r0, [pc, #44]	@ (8002808 <BSP_RADIO_DeInit+0x48>)
 80027da:	f001 faa9 	bl	8003d30 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 80027de:	2200      	movs	r2, #0
 80027e0:	2108      	movs	r1, #8
 80027e2:	4809      	ldr	r0, [pc, #36]	@ (8002808 <BSP_RADIO_DeInit+0x48>)
 80027e4:	f001 faa4 	bl	8003d30 <HAL_GPIO_WritePin>
  
  /* DeInit the Radio Switch pin */
  HAL_GPIO_DeInit(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN);
 80027e8:	2110      	movs	r1, #16
 80027ea:	4807      	ldr	r0, [pc, #28]	@ (8002808 <BSP_RADIO_DeInit+0x48>)
 80027ec:	f001 f9d2 	bl	8003b94 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN);
 80027f0:	2120      	movs	r1, #32
 80027f2:	4805      	ldr	r0, [pc, #20]	@ (8002808 <BSP_RADIO_DeInit+0x48>)
 80027f4:	f001 f9ce 	bl	8003b94 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN);
 80027f8:	2108      	movs	r1, #8
 80027fa:	4803      	ldr	r0, [pc, #12]	@ (8002808 <BSP_RADIO_DeInit+0x48>)
 80027fc:	f001 f9ca 	bl	8003b94 <HAL_GPIO_DeInit>

  return BSP_ERROR_NONE;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	48000800 	.word	0x48000800

0800280c <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	4603      	mov	r3, r0
 8002814:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8002816:	79fb      	ldrb	r3, [r7, #7]
 8002818:	2b03      	cmp	r3, #3
 800281a:	d84b      	bhi.n	80028b4 <BSP_RADIO_ConfigRFSwitch+0xa8>
 800281c:	a201      	add	r2, pc, #4	@ (adr r2, 8002824 <BSP_RADIO_ConfigRFSwitch+0x18>)
 800281e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002822:	bf00      	nop
 8002824:	08002835 	.word	0x08002835
 8002828:	08002855 	.word	0x08002855
 800282c:	08002875 	.word	0x08002875
 8002830:	08002895 	.word	0x08002895
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8002834:	2200      	movs	r2, #0
 8002836:	2108      	movs	r1, #8
 8002838:	4821      	ldr	r0, [pc, #132]	@ (80028c0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800283a:	f001 fa79 	bl	8003d30 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800283e:	2200      	movs	r2, #0
 8002840:	2110      	movs	r1, #16
 8002842:	481f      	ldr	r0, [pc, #124]	@ (80028c0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8002844:	f001 fa74 	bl	8003d30 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002848:	2200      	movs	r2, #0
 800284a:	2120      	movs	r1, #32
 800284c:	481c      	ldr	r0, [pc, #112]	@ (80028c0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800284e:	f001 fa6f 	bl	8003d30 <HAL_GPIO_WritePin>
      break;      
 8002852:	e030      	b.n	80028b6 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002854:	2201      	movs	r2, #1
 8002856:	2108      	movs	r1, #8
 8002858:	4819      	ldr	r0, [pc, #100]	@ (80028c0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800285a:	f001 fa69 	bl	8003d30 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800285e:	2201      	movs	r2, #1
 8002860:	2110      	movs	r1, #16
 8002862:	4817      	ldr	r0, [pc, #92]	@ (80028c0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8002864:	f001 fa64 	bl	8003d30 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002868:	2200      	movs	r2, #0
 800286a:	2120      	movs	r1, #32
 800286c:	4814      	ldr	r0, [pc, #80]	@ (80028c0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800286e:	f001 fa5f 	bl	8003d30 <HAL_GPIO_WritePin>
      break;
 8002872:	e020      	b.n	80028b6 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002874:	2201      	movs	r2, #1
 8002876:	2108      	movs	r1, #8
 8002878:	4811      	ldr	r0, [pc, #68]	@ (80028c0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800287a:	f001 fa59 	bl	8003d30 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800287e:	2201      	movs	r2, #1
 8002880:	2110      	movs	r1, #16
 8002882:	480f      	ldr	r0, [pc, #60]	@ (80028c0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 8002884:	f001 fa54 	bl	8003d30 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002888:	2201      	movs	r2, #1
 800288a:	2120      	movs	r1, #32
 800288c:	480c      	ldr	r0, [pc, #48]	@ (80028c0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800288e:	f001 fa4f 	bl	8003d30 <HAL_GPIO_WritePin>
      break;
 8002892:	e010      	b.n	80028b6 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002894:	2201      	movs	r2, #1
 8002896:	2108      	movs	r1, #8
 8002898:	4809      	ldr	r0, [pc, #36]	@ (80028c0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 800289a:	f001 fa49 	bl	8003d30 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 800289e:	2200      	movs	r2, #0
 80028a0:	2110      	movs	r1, #16
 80028a2:	4807      	ldr	r0, [pc, #28]	@ (80028c0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80028a4:	f001 fa44 	bl	8003d30 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 80028a8:	2201      	movs	r2, #1
 80028aa:	2120      	movs	r1, #32
 80028ac:	4804      	ldr	r0, [pc, #16]	@ (80028c0 <BSP_RADIO_ConfigRFSwitch+0xb4>)
 80028ae:	f001 fa3f 	bl	8003d30 <HAL_GPIO_WritePin>
      break;
 80028b2:	e000      	b.n	80028b6 <BSP_RADIO_ConfigRFSwitch+0xaa>
    }
    default:
      break;    
 80028b4:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	48000800 	.word	0x48000800

080028c4 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_LP_HP;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bc80      	pop	{r7}
 80028d0:	4770      	bx	lr

080028d2 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 80028d2:	b480      	push	{r7}
 80028d4:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 80028d6:	2301      	movs	r3, #1
}
 80028d8:	4618      	mov	r0, r3
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr

080028e0 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 80028e4:	2301      	movs	r3, #1
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bc80      	pop	{r7}
 80028ec:	4770      	bx	lr

080028ee <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b085      	sub	sp, #20
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	4603      	mov	r3, r0
 80028f6:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 80028f8:	79fb      	ldrb	r3, [r7, #7]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d102      	bne.n	8002904 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 80028fe:	230f      	movs	r3, #15
 8002900:	60fb      	str	r3, [r7, #12]
 8002902:	e001      	b.n	8002908 <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8002904:	2316      	movs	r3, #22
 8002906:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002908:	68fb      	ldr	r3, [r7, #12]
}
 800290a:	4618      	mov	r0, r3
 800290c:	3714      	adds	r7, #20
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr

08002914 <LL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_DisableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGSleepMode(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002918:	4b04      	ldr	r3, [pc, #16]	@ (800292c <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	4a03      	ldr	r2, [pc, #12]	@ (800292c <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 800291e:	f023 0301 	bic.w	r3, r3, #1
 8002922:	6053      	str	r3, [r2, #4]
}
 8002924:	bf00      	nop
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr
 800292c:	e0042000 	.word	0xe0042000

08002930 <LL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_DisableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStopMode(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002934:	4b04      	ldr	r3, [pc, #16]	@ (8002948 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	4a03      	ldr	r2, [pc, #12]	@ (8002948 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 800293a:	f023 0302 	bic.w	r3, r3, #2
 800293e:	6053      	str	r3, [r2, #4]
}
 8002940:	bf00      	nop
 8002942:	46bd      	mov	sp, r7
 8002944:	bc80      	pop	{r7}
 8002946:	4770      	bx	lr
 8002948:	e0042000 	.word	0xe0042000

0800294c <LL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disable the Debug Module during STANDBY mode
  * @rmtoll DBGMCU_CR    DBG_STANDBY   LL_DBGMCU_DisableDBGStandbyMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStandbyMode(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002950:	4b04      	ldr	r3, [pc, #16]	@ (8002964 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	4a03      	ldr	r2, [pc, #12]	@ (8002964 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002956:	f023 0304 	bic.w	r3, r3, #4
 800295a:	6053      	str	r3, [r2, #4]
}
 800295c:	bf00      	nop
 800295e:	46bd      	mov	sp, r7
 8002960:	bc80      	pop	{r7}
 8002962:	4770      	bx	lr
 8002964:	e0042000 	.word	0xe0042000

08002968 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800296e:	2300      	movs	r3, #0
 8002970:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002972:	2003      	movs	r0, #3
 8002974:	f000 fb46 	bl	8003004 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002978:	f003 fa04 	bl	8005d84 <HAL_RCC_GetHCLKFreq>
 800297c:	4603      	mov	r3, r0
 800297e:	4a09      	ldr	r2, [pc, #36]	@ (80029a4 <HAL_Init+0x3c>)
 8002980:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002982:	200f      	movs	r0, #15
 8002984:	f7fe feb0 	bl	80016e8 <HAL_InitTick>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d002      	beq.n	8002994 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	71fb      	strb	r3, [r7, #7]
 8002992:	e001      	b.n	8002998 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002994:	f7fe fd3d 	bl	8001412 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002998:	79fb      	ldrb	r3, [r7, #7]
}
 800299a:	4618      	mov	r0, r3
 800299c:	3708      	adds	r7, #8
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	20000070 	.word	0x20000070

080029a8 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80029ac:	4b04      	ldr	r3, [pc, #16]	@ (80029c0 <HAL_SuspendTick+0x18>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a03      	ldr	r2, [pc, #12]	@ (80029c0 <HAL_SuspendTick+0x18>)
 80029b2:	f023 0302 	bic.w	r3, r3, #2
 80029b6:	6013      	str	r3, [r2, #0]
}
 80029b8:	bf00      	nop
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr
 80029c0:	e000e010 	.word	0xe000e010

080029c4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80029c8:	4b04      	ldr	r3, [pc, #16]	@ (80029dc <HAL_ResumeTick+0x18>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a03      	ldr	r2, [pc, #12]	@ (80029dc <HAL_ResumeTick+0x18>)
 80029ce:	f043 0302 	orr.w	r3, r3, #2
 80029d2:	6013      	str	r3, [r2, #0]
}
 80029d4:	bf00      	nop
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr
 80029dc:	e000e010 	.word	0xe000e010

080029e0 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 80029e4:	f7ff ff96 	bl	8002914 <LL_DBGMCU_DisableDBGSleepMode>
}
 80029e8:	bf00      	nop
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 80029f0:	f7ff ff9e 	bl	8002930 <LL_DBGMCU_DisableDBGStopMode>
}
 80029f4:	bf00      	nop
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 80029fc:	f7ff ffa6 	bl	800294c <LL_DBGMCU_DisableDBGStandbyMode>
}
 8002a00:	bf00      	nop
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	695a      	ldr	r2, [r3, #20]
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	f003 0304 	and.w	r3, r3, #4
 8002a1a:	2107      	movs	r1, #7
 8002a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a20:	43db      	mvns	r3, r3
 8002a22:	401a      	ands	r2, r3
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	f003 0304 	and.w	r3, r3, #4
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a30:	431a      	orrs	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002a36:	bf00      	nop
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr

08002a40 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	695a      	ldr	r2, [r3, #20]
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	f003 0304 	and.w	r3, r3, #4
 8002a54:	2107      	movs	r1, #7
 8002a56:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002a62:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr

08002a70 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002a80:	f023 0317 	bic.w	r3, r3, #23
 8002a84:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bc80      	pop	{r7}
 8002a94:	4770      	bx	lr

08002a96 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002a96:	b480      	push	{r7}
 8002a98:	b083      	sub	sp, #12
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aa6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002aaa:	d101      	bne.n	8002ab0 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002aac:	2301      	movs	r3, #1
 8002aae:	e000      	b.n	8002ab2 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bc80      	pop	{r7}
 8002aba:	4770      	bx	lr

08002abc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f003 0301 	and.w	r3, r3, #1
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d101      	bne.n	8002ad4 <LL_ADC_IsEnabled+0x18>
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e000      	b.n	8002ad6 <LL_ADC_IsEnabled+0x1a>
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bc80      	pop	{r7}
 8002ade:	4770      	bx	lr

08002ae0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f003 0304 	and.w	r3, r3, #4
 8002af0:	2b04      	cmp	r3, #4
 8002af2:	d101      	bne.n	8002af8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002af4:	2301      	movs	r3, #1
 8002af6:	e000      	b.n	8002afa <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bc80      	pop	{r7}
 8002b02:	4770      	bx	lr

08002b04 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b088      	sub	sp, #32
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8002b10:	2300      	movs	r3, #0
 8002b12:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002b14:	2300      	movs	r3, #0
 8002b16:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e17e      	b.n	8002e24 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d109      	bne.n	8002b48 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f7fe fafd 	bl	8001134 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff ffa2 	bl	8002a96 <LL_ADC_IsInternalRegulatorEnabled>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d115      	bne.n	8002b84 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff ff87 	bl	8002a70 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b62:	4b9e      	ldr	r3, [pc, #632]	@ (8002ddc <HAL_ADC_Init+0x2d8>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	099b      	lsrs	r3, r3, #6
 8002b68:	4a9d      	ldr	r2, [pc, #628]	@ (8002de0 <HAL_ADC_Init+0x2dc>)
 8002b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6e:	099b      	lsrs	r3, r3, #6
 8002b70:	3301      	adds	r3, #1
 8002b72:	005b      	lsls	r3, r3, #1
 8002b74:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002b76:	e002      	b.n	8002b7e <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1f9      	bne.n	8002b78 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7ff ff84 	bl	8002a96 <LL_ADC_IsInternalRegulatorEnabled>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d10d      	bne.n	8002bb0 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b98:	f043 0210 	orr.w	r2, r3, #16
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ba4:	f043 0201 	orr.w	r2, r3, #1
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7ff ff93 	bl	8002ae0 <LL_ADC_REG_IsConversionOngoing>
 8002bba:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc0:	f003 0310 	and.w	r3, r3, #16
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f040 8124 	bne.w	8002e12 <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f040 8120 	bne.w	8002e12 <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bd6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002bda:	f043 0202 	orr.w	r2, r3, #2
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7ff ff68 	bl	8002abc <LL_ADC_IsEnabled>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f040 80a7 	bne.w	8002d42 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	7e1b      	ldrb	r3, [r3, #24]
 8002bfc:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002bfe:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	7e5b      	ldrb	r3, [r3, #25]
 8002c04:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002c06:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	7e9b      	ldrb	r3, [r3, #26]
 8002c0c:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002c0e:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002c14:	2a00      	cmp	r2, #0
 8002c16:	d002      	beq.n	8002c1e <HAL_ADC_Init+0x11a>
 8002c18:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002c1c:	e000      	b.n	8002c20 <HAL_ADC_Init+0x11c>
 8002c1e:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002c20:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002c26:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	da04      	bge.n	8002c3a <HAL_ADC_Init+0x136>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002c38:	e001      	b.n	8002c3e <HAL_ADC_Init+0x13a>
 8002c3a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                           |
 8002c3e:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002c46:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002c48:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d114      	bne.n	8002c84 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	7e9b      	ldrb	r3, [r3, #26]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d104      	bne.n	8002c6c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c68:	61bb      	str	r3, [r7, #24]
 8002c6a:	e00b      	b.n	8002c84 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c70:	f043 0220 	orr.w	r2, r3, #32
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c7c:	f043 0201 	orr.w	r2, r3, #1
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d009      	beq.n	8002ca0 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c90:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	f423 33fe 	bic.w	r3, r3, #130048	@ 0x1fc00
 8002caa:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	6812      	ldr	r2, [r2, #0]
 8002cb2:	69b9      	ldr	r1, [r7, #24]
 8002cb4:	430b      	orrs	r3, r1
 8002cb6:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d111      	bne.n	8002cfa <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002ce2:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002ce8:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002cee:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	f043 0301 	orr.w	r3, r3, #1
 8002cf8:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	691a      	ldr	r2, [r3, #16]
 8002d00:	4b38      	ldr	r3, [pc, #224]	@ (8002de4 <HAL_ADC_Init+0x2e0>)
 8002d02:	4013      	ands	r3, r2
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	6812      	ldr	r2, [r2, #0]
 8002d08:	6979      	ldr	r1, [r7, #20]
 8002d0a:	430b      	orrs	r3, r1
 8002d0c:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002d16:	d014      	beq.n	8002d42 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d20:	d00f      	beq.n	8002d42 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002d26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d2a:	d00a      	beq.n	8002d42 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8002d2c:	4b2e      	ldr	r3, [pc, #184]	@ (8002de8 <HAL_ADC_Init+0x2e4>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002d3c:	492a      	ldr	r1, [pc, #168]	@ (8002de8 <HAL_ADC_Init+0x2e4>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6818      	ldr	r0, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	2100      	movs	r1, #0
 8002d4e:	f7ff fe59 	bl	8002a04 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6818      	ldr	r0, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	4923      	ldr	r1, [pc, #140]	@ (8002dec <HAL_ADC_Init+0x2e8>)
 8002d5e:	f7ff fe51 	bl	8002a04 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	691b      	ldr	r3, [r3, #16]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d108      	bne.n	8002d7c <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f062 020f 	orn	r2, r2, #15
 8002d78:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d7a:	e017      	b.n	8002dac <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002d84:	d112      	bne.n	8002dac <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	69db      	ldr	r3, [r3, #28]
 8002d90:	3b01      	subs	r3, #1
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	f003 031c 	and.w	r3, r3, #28
 8002d98:	f06f 020f 	mvn.w	r2, #15
 8002d9c:	fa02 f103 	lsl.w	r1, r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	430a      	orrs	r2, r1
 8002daa:	629a      	str	r2, [r3, #40]	@ 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2100      	movs	r1, #0
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff fe44 	bl	8002a40 <LL_ADC_GetSamplingTimeCommonChannels>
 8002db8:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d116      	bne.n	8002df0 <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dcc:	f023 0303 	bic.w	r3, r3, #3
 8002dd0:	f043 0201 	orr.w	r2, r3, #1
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	659a      	str	r2, [r3, #88]	@ 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002dd8:	e023      	b.n	8002e22 <HAL_ADC_Init+0x31e>
 8002dda:	bf00      	nop
 8002ddc:	20000070 	.word	0x20000070
 8002de0:	053e2d63 	.word	0x053e2d63
 8002de4:	1ffffc02 	.word	0x1ffffc02
 8002de8:	40012708 	.word	0x40012708
 8002dec:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002df4:	f023 0312 	bic.w	r3, r3, #18
 8002df8:	f043 0210 	orr.w	r2, r3, #16
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e04:	f043 0201 	orr.w	r2, r3, #1
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002e10:	e007      	b.n	8002e22 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e16:	f043 0210 	orr.w	r2, r3, #16
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8002e22:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3720      	adds	r7, #32
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f003 0307 	and.w	r3, r3, #7
 8002e3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8002e70 <__NVIC_SetPriorityGrouping+0x44>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e42:	68ba      	ldr	r2, [r7, #8]
 8002e44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e48:	4013      	ands	r3, r2
 8002e4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e5e:	4a04      	ldr	r2, [pc, #16]	@ (8002e70 <__NVIC_SetPriorityGrouping+0x44>)
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	60d3      	str	r3, [r2, #12]
}
 8002e64:	bf00      	nop
 8002e66:	3714      	adds	r7, #20
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bc80      	pop	{r7}
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	e000ed00 	.word	0xe000ed00

08002e74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e78:	4b04      	ldr	r3, [pc, #16]	@ (8002e8c <__NVIC_GetPriorityGrouping+0x18>)
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	0a1b      	lsrs	r3, r3, #8
 8002e7e:	f003 0307 	and.w	r3, r3, #7
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bc80      	pop	{r7}
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	e000ed00 	.word	0xe000ed00

08002e90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	4603      	mov	r3, r0
 8002e98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	db0b      	blt.n	8002eba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ea2:	79fb      	ldrb	r3, [r7, #7]
 8002ea4:	f003 021f 	and.w	r2, r3, #31
 8002ea8:	4906      	ldr	r1, [pc, #24]	@ (8002ec4 <__NVIC_EnableIRQ+0x34>)
 8002eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eae:	095b      	lsrs	r3, r3, #5
 8002eb0:	2001      	movs	r0, #1
 8002eb2:	fa00 f202 	lsl.w	r2, r0, r2
 8002eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002eba:	bf00      	nop
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bc80      	pop	{r7}
 8002ec2:	4770      	bx	lr
 8002ec4:	e000e100 	.word	0xe000e100

08002ec8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	db12      	blt.n	8002f00 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eda:	79fb      	ldrb	r3, [r7, #7]
 8002edc:	f003 021f 	and.w	r2, r3, #31
 8002ee0:	490a      	ldr	r1, [pc, #40]	@ (8002f0c <__NVIC_DisableIRQ+0x44>)
 8002ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee6:	095b      	lsrs	r3, r3, #5
 8002ee8:	2001      	movs	r0, #1
 8002eea:	fa00 f202 	lsl.w	r2, r0, r2
 8002eee:	3320      	adds	r3, #32
 8002ef0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002ef4:	f3bf 8f4f 	dsb	sy
}
 8002ef8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002efa:	f3bf 8f6f 	isb	sy
}
 8002efe:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bc80      	pop	{r7}
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	e000e100 	.word	0xe000e100

08002f10 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	4603      	mov	r3, r0
 8002f18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	db0c      	blt.n	8002f3c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f22:	79fb      	ldrb	r3, [r7, #7]
 8002f24:	f003 021f 	and.w	r2, r3, #31
 8002f28:	4907      	ldr	r1, [pc, #28]	@ (8002f48 <__NVIC_ClearPendingIRQ+0x38>)
 8002f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2e:	095b      	lsrs	r3, r3, #5
 8002f30:	2001      	movs	r0, #1
 8002f32:	fa00 f202 	lsl.w	r2, r0, r2
 8002f36:	3360      	adds	r3, #96	@ 0x60
 8002f38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bc80      	pop	{r7}
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	e000e100 	.word	0xe000e100

08002f4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	4603      	mov	r3, r0
 8002f54:	6039      	str	r1, [r7, #0]
 8002f56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	db0a      	blt.n	8002f76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	490c      	ldr	r1, [pc, #48]	@ (8002f98 <__NVIC_SetPriority+0x4c>)
 8002f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6a:	0112      	lsls	r2, r2, #4
 8002f6c:	b2d2      	uxtb	r2, r2
 8002f6e:	440b      	add	r3, r1
 8002f70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f74:	e00a      	b.n	8002f8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	b2da      	uxtb	r2, r3
 8002f7a:	4908      	ldr	r1, [pc, #32]	@ (8002f9c <__NVIC_SetPriority+0x50>)
 8002f7c:	79fb      	ldrb	r3, [r7, #7]
 8002f7e:	f003 030f 	and.w	r3, r3, #15
 8002f82:	3b04      	subs	r3, #4
 8002f84:	0112      	lsls	r2, r2, #4
 8002f86:	b2d2      	uxtb	r2, r2
 8002f88:	440b      	add	r3, r1
 8002f8a:	761a      	strb	r2, [r3, #24]
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bc80      	pop	{r7}
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	e000e100 	.word	0xe000e100
 8002f9c:	e000ed00 	.word	0xe000ed00

08002fa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b089      	sub	sp, #36	@ 0x24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f003 0307 	and.w	r3, r3, #7
 8002fb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	f1c3 0307 	rsb	r3, r3, #7
 8002fba:	2b04      	cmp	r3, #4
 8002fbc:	bf28      	it	cs
 8002fbe:	2304      	movcs	r3, #4
 8002fc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	3304      	adds	r3, #4
 8002fc6:	2b06      	cmp	r3, #6
 8002fc8:	d902      	bls.n	8002fd0 <NVIC_EncodePriority+0x30>
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	3b03      	subs	r3, #3
 8002fce:	e000      	b.n	8002fd2 <NVIC_EncodePriority+0x32>
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	fa02 f303 	lsl.w	r3, r2, r3
 8002fde:	43da      	mvns	r2, r3
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	401a      	ands	r2, r3
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fe8:	f04f 31ff 	mov.w	r1, #4294967295
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff2:	43d9      	mvns	r1, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ff8:	4313      	orrs	r3, r2
         );
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3724      	adds	r7, #36	@ 0x24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bc80      	pop	{r7}
 8003002:	4770      	bx	lr

08003004 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f7ff ff0d 	bl	8002e2c <__NVIC_SetPriorityGrouping>
}
 8003012:	bf00      	nop
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}

0800301a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b086      	sub	sp, #24
 800301e:	af00      	add	r7, sp, #0
 8003020:	4603      	mov	r3, r0
 8003022:	60b9      	str	r1, [r7, #8]
 8003024:	607a      	str	r2, [r7, #4]
 8003026:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003028:	f7ff ff24 	bl	8002e74 <__NVIC_GetPriorityGrouping>
 800302c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	68b9      	ldr	r1, [r7, #8]
 8003032:	6978      	ldr	r0, [r7, #20]
 8003034:	f7ff ffb4 	bl	8002fa0 <NVIC_EncodePriority>
 8003038:	4602      	mov	r2, r0
 800303a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800303e:	4611      	mov	r1, r2
 8003040:	4618      	mov	r0, r3
 8003042:	f7ff ff83 	bl	8002f4c <__NVIC_SetPriority>
}
 8003046:	bf00      	nop
 8003048:	3718      	adds	r7, #24
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b082      	sub	sp, #8
 8003052:	af00      	add	r7, sp, #0
 8003054:	4603      	mov	r3, r0
 8003056:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305c:	4618      	mov	r0, r3
 800305e:	f7ff ff17 	bl	8002e90 <__NVIC_EnableIRQ>
}
 8003062:	bf00      	nop
 8003064:	3708      	adds	r7, #8
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}

0800306a <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b082      	sub	sp, #8
 800306e:	af00      	add	r7, sp, #0
 8003070:	4603      	mov	r3, r0
 8003072:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003078:	4618      	mov	r0, r3
 800307a:	f7ff ff25 	bl	8002ec8 <__NVIC_DisableIRQ>
}
 800307e:	bf00      	nop
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <HAL_NVIC_ClearPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b082      	sub	sp, #8
 800308a:	af00      	add	r7, sp, #0
 800308c:	4603      	mov	r3, r0
 800308e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003094:	4618      	mov	r0, r3
 8003096:	f7ff ff3b 	bl	8002f10 <__NVIC_ClearPendingIRQ>
}
 800309a:	bf00      	nop
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}
	...

080030a4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e08e      	b.n	80031d4 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	461a      	mov	r2, r3
 80030bc:	4b47      	ldr	r3, [pc, #284]	@ (80031dc <HAL_DMA_Init+0x138>)
 80030be:	429a      	cmp	r2, r3
 80030c0:	d80f      	bhi.n	80030e2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	461a      	mov	r2, r3
 80030c8:	4b45      	ldr	r3, [pc, #276]	@ (80031e0 <HAL_DMA_Init+0x13c>)
 80030ca:	4413      	add	r3, r2
 80030cc:	4a45      	ldr	r2, [pc, #276]	@ (80031e4 <HAL_DMA_Init+0x140>)
 80030ce:	fba2 2303 	umull	r2, r3, r2, r3
 80030d2:	091b      	lsrs	r3, r3, #4
 80030d4:	009a      	lsls	r2, r3, #2
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a42      	ldr	r2, [pc, #264]	@ (80031e8 <HAL_DMA_Init+0x144>)
 80030de:	641a      	str	r2, [r3, #64]	@ 0x40
 80030e0:	e00e      	b.n	8003100 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	461a      	mov	r2, r3
 80030e8:	4b40      	ldr	r3, [pc, #256]	@ (80031ec <HAL_DMA_Init+0x148>)
 80030ea:	4413      	add	r3, r2
 80030ec:	4a3d      	ldr	r2, [pc, #244]	@ (80031e4 <HAL_DMA_Init+0x140>)
 80030ee:	fba2 2303 	umull	r2, r3, r2, r3
 80030f2:	091b      	lsrs	r3, r3, #4
 80030f4:	009a      	lsls	r2, r3, #2
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a3c      	ldr	r2, [pc, #240]	@ (80031f0 <HAL_DMA_Init+0x14c>)
 80030fe:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2202      	movs	r2, #2
 8003104:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	6812      	ldr	r2, [r2, #0]
 8003112:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003116:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800311a:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6819      	ldr	r1, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	689a      	ldr	r2, [r3, #8]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	431a      	orrs	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	431a      	orrs	r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	431a      	orrs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	699b      	ldr	r3, [r3, #24]
 800313c:	431a      	orrs	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a1b      	ldr	r3, [r3, #32]
 8003148:	431a      	orrs	r2, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	430a      	orrs	r2, r1
 8003150:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 fb52 	bl	80037fc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003160:	d102      	bne.n	8003168 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003170:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003174:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800317e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d010      	beq.n	80031aa <HAL_DMA_Init+0x106>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	2b04      	cmp	r3, #4
 800318e:	d80c      	bhi.n	80031aa <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 fb7b 	bl	800388c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800319a:	2200      	movs	r2, #0
 800319c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80031a6:	605a      	str	r2, [r3, #4]
 80031a8:	e008      	b.n	80031bc <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3708      	adds	r7, #8
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	40020407 	.word	0x40020407
 80031e0:	bffdfff8 	.word	0xbffdfff8
 80031e4:	cccccccd 	.word	0xcccccccd
 80031e8:	40020000 	.word	0x40020000
 80031ec:	bffdfbf8 	.word	0xbffdfbf8
 80031f0:	40020400 	.word	0x40020400

080031f4 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e07b      	b.n	80032fe <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 0201 	bic.w	r2, r2, #1
 8003214:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	461a      	mov	r2, r3
 800321c:	4b3a      	ldr	r3, [pc, #232]	@ (8003308 <HAL_DMA_DeInit+0x114>)
 800321e:	429a      	cmp	r2, r3
 8003220:	d80f      	bhi.n	8003242 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	461a      	mov	r2, r3
 8003228:	4b38      	ldr	r3, [pc, #224]	@ (800330c <HAL_DMA_DeInit+0x118>)
 800322a:	4413      	add	r3, r2
 800322c:	4a38      	ldr	r2, [pc, #224]	@ (8003310 <HAL_DMA_DeInit+0x11c>)
 800322e:	fba2 2303 	umull	r2, r3, r2, r3
 8003232:	091b      	lsrs	r3, r3, #4
 8003234:	009a      	lsls	r2, r3, #2
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a35      	ldr	r2, [pc, #212]	@ (8003314 <HAL_DMA_DeInit+0x120>)
 800323e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003240:	e00e      	b.n	8003260 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	461a      	mov	r2, r3
 8003248:	4b33      	ldr	r3, [pc, #204]	@ (8003318 <HAL_DMA_DeInit+0x124>)
 800324a:	4413      	add	r3, r2
 800324c:	4a30      	ldr	r2, [pc, #192]	@ (8003310 <HAL_DMA_DeInit+0x11c>)
 800324e:	fba2 2303 	umull	r2, r3, r2, r3
 8003252:	091b      	lsrs	r3, r3, #4
 8003254:	009a      	lsls	r2, r3, #2
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a2f      	ldr	r2, [pc, #188]	@ (800331c <HAL_DMA_DeInit+0x128>)
 800325e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800326c:	f003 021c 	and.w	r2, r3, #28
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003274:	2101      	movs	r1, #1
 8003276:	fa01 f202 	lsl.w	r2, r1, r2
 800327a:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f000 fabd 	bl	80037fc <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003286:	2200      	movs	r2, #0
 8003288:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003292:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00f      	beq.n	80032bc <HAL_DMA_DeInit+0xc8>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	2b04      	cmp	r3, #4
 80032a2:	d80b      	bhi.n	80032bc <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 faf1 	bl	800388c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ae:	2200      	movs	r2, #0
 80032b0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80032ba:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	40020407 	.word	0x40020407
 800330c:	bffdfff8 	.word	0xbffdfff8
 8003310:	cccccccd 	.word	0xcccccccd
 8003314:	40020000 	.word	0x40020000
 8003318:	bffdfbf8 	.word	0xbffdfbf8
 800331c:	40020400 	.word	0x40020400

08003320 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
 800332c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800332e:	2300      	movs	r3, #0
 8003330:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003338:	2b01      	cmp	r3, #1
 800333a:	d101      	bne.n	8003340 <HAL_DMA_Start_IT+0x20>
 800333c:	2302      	movs	r3, #2
 800333e:	e069      	b.n	8003414 <HAL_DMA_Start_IT+0xf4>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b01      	cmp	r3, #1
 8003352:	d155      	bne.n	8003400 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2202      	movs	r2, #2
 8003358:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f022 0201 	bic.w	r2, r2, #1
 8003370:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	68b9      	ldr	r1, [r7, #8]
 8003378:	68f8      	ldr	r0, [r7, #12]
 800337a:	f000 fa02 	bl	8003782 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003382:	2b00      	cmp	r3, #0
 8003384:	d008      	beq.n	8003398 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f042 020e 	orr.w	r2, r2, #14
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	e00f      	b.n	80033b8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 0204 	bic.w	r2, r2, #4
 80033a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f042 020a 	orr.w	r2, r2, #10
 80033b6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d007      	beq.n	80033d6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033d4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d007      	beq.n	80033ee <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033ec:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f042 0201 	orr.w	r2, r2, #1
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	e008      	b.n	8003412 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2280      	movs	r2, #128	@ 0x80
 8003404:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003412:	7dfb      	ldrb	r3, [r7, #23]
}
 8003414:	4618      	mov	r0, r3
 8003416:	3718      	adds	r7, #24
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e04f      	b.n	80034ce <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b02      	cmp	r3, #2
 8003438:	d008      	beq.n	800344c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2204      	movs	r2, #4
 800343e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e040      	b.n	80034ce <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f022 020e 	bic.w	r2, r2, #14
 800345a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003466:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800346a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 0201 	bic.w	r2, r2, #1
 800347a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003480:	f003 021c 	and.w	r2, r3, #28
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003488:	2101      	movs	r1, #1
 800348a:	fa01 f202 	lsl.w	r2, r1, r2
 800348e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003498:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00c      	beq.n	80034bc <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80034b0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80034ba:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bc80      	pop	{r7}
 80034d6:	4770      	bx	lr

080034d8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034e0:	2300      	movs	r3, #0
 80034e2:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d005      	beq.n	80034fc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2204      	movs	r2, #4
 80034f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	73fb      	strb	r3, [r7, #15]
 80034fa:	e047      	b.n	800358c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f022 020e 	bic.w	r2, r2, #14
 800350a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f022 0201 	bic.w	r2, r2, #1
 800351a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003526:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800352a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003530:	f003 021c 	and.w	r2, r3, #28
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003538:	2101      	movs	r1, #1
 800353a:	fa01 f202 	lsl.w	r2, r1, r2
 800353e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003548:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00c      	beq.n	800356c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800355c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003560:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800356a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003580:	2b00      	cmp	r3, #0
 8003582:	d003      	beq.n	800358c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	4798      	blx	r3
    }
  }
  return status;
 800358c:	7bfb      	ldrb	r3, [r7, #15]
}
 800358e:	4618      	mov	r0, r3
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
	...

08003598 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035b4:	f003 031c 	and.w	r3, r3, #28
 80035b8:	2204      	movs	r2, #4
 80035ba:	409a      	lsls	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	4013      	ands	r3, r2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d027      	beq.n	8003614 <HAL_DMA_IRQHandler+0x7c>
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	f003 0304 	and.w	r3, r3, #4
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d022      	beq.n	8003614 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0320 	and.w	r3, r3, #32
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d107      	bne.n	80035ec <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f022 0204 	bic.w	r2, r2, #4
 80035ea:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035f0:	f003 021c 	and.w	r2, r3, #28
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f8:	2104      	movs	r1, #4
 80035fa:	fa01 f202 	lsl.w	r2, r1, r2
 80035fe:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003604:	2b00      	cmp	r3, #0
 8003606:	f000 8081 	beq.w	800370c <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003612:	e07b      	b.n	800370c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003618:	f003 031c 	and.w	r3, r3, #28
 800361c:	2202      	movs	r2, #2
 800361e:	409a      	lsls	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	4013      	ands	r3, r2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d03d      	beq.n	80036a4 <HAL_DMA_IRQHandler+0x10c>
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d038      	beq.n	80036a4 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0320 	and.w	r3, r3, #32
 800363c:	2b00      	cmp	r3, #0
 800363e:	d10b      	bne.n	8003658 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f022 020a 	bic.w	r2, r2, #10
 800364e:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	461a      	mov	r2, r3
 800365e:	4b2e      	ldr	r3, [pc, #184]	@ (8003718 <HAL_DMA_IRQHandler+0x180>)
 8003660:	429a      	cmp	r2, r3
 8003662:	d909      	bls.n	8003678 <HAL_DMA_IRQHandler+0xe0>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003668:	f003 031c 	and.w	r3, r3, #28
 800366c:	4a2b      	ldr	r2, [pc, #172]	@ (800371c <HAL_DMA_IRQHandler+0x184>)
 800366e:	2102      	movs	r1, #2
 8003670:	fa01 f303 	lsl.w	r3, r1, r3
 8003674:	6053      	str	r3, [r2, #4]
 8003676:	e008      	b.n	800368a <HAL_DMA_IRQHandler+0xf2>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800367c:	f003 031c 	and.w	r3, r3, #28
 8003680:	4a27      	ldr	r2, [pc, #156]	@ (8003720 <HAL_DMA_IRQHandler+0x188>)
 8003682:	2102      	movs	r1, #2
 8003684:	fa01 f303 	lsl.w	r3, r1, r3
 8003688:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if (hdma->XferCpltCallback != NULL)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003696:	2b00      	cmp	r3, #0
 8003698:	d038      	beq.n	800370c <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80036a2:	e033      	b.n	800370c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036a8:	f003 031c 	and.w	r3, r3, #28
 80036ac:	2208      	movs	r2, #8
 80036ae:	409a      	lsls	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	4013      	ands	r3, r2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d02a      	beq.n	800370e <HAL_DMA_IRQHandler+0x176>
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	f003 0308 	and.w	r3, r3, #8
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d025      	beq.n	800370e <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 020e 	bic.w	r2, r2, #14
 80036d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036d6:	f003 021c 	and.w	r2, r3, #28
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036de:	2101      	movs	r1, #1
 80036e0:	fa01 f202 	lsl.w	r2, r1, r2
 80036e4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003700:	2b00      	cmp	r3, #0
 8003702:	d004      	beq.n	800370e <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800370c:	bf00      	nop
 800370e:	bf00      	nop
}
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	40020080 	.word	0x40020080
 800371c:	40020400 	.word	0x40020400
 8003720:	40020000 	.word	0x40020000

08003724 <HAL_DMA_ConfigChannelAttributes>:
  * @param ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *        This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8003724:	b480      	push	{r7}
 8003726:	b085      	sub	sp, #20
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800372e:	2300      	movs	r3, #0
 8003730:	72fb      	strb	r3, [r7, #11]
#if defined (CORE_CM0PLUS)
  uint32_t ccr_SECM;
#endif /* CORE_CM0PLUS */

  /* Check the DMA peripheral handle */
  if (hdma == NULL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d103      	bne.n	8003740 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	72fb      	strb	r3, [r7, #11]
    return status;
 800373c:	7afb      	ldrb	r3, [r7, #11]
 800373e:	e01b      	b.n	8003778 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	f003 0310 	and.w	r3, r3, #16
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00d      	beq.n	800376e <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d004      	beq.n	8003766 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003762:	60fb      	str	r3, [r7, #12]
 8003764:	e003      	b.n	800376e <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800376c:	60fb      	str	r3, [r7, #12]
  }

#endif /* CORE_CM0PLUS */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	601a      	str	r2, [r3, #0]

  return status;
 8003776:	7afb      	ldrb	r3, [r7, #11]
}
 8003778:	4618      	mov	r0, r3
 800377a:	3714      	adds	r7, #20
 800377c:	46bd      	mov	sp, r7
 800377e:	bc80      	pop	{r7}
 8003780:	4770      	bx	lr

08003782 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003782:	b480      	push	{r7}
 8003784:	b085      	sub	sp, #20
 8003786:	af00      	add	r7, sp, #0
 8003788:	60f8      	str	r0, [r7, #12]
 800378a:	60b9      	str	r1, [r7, #8]
 800378c:	607a      	str	r2, [r7, #4]
 800378e:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003798:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d004      	beq.n	80037ac <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80037aa:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037b0:	f003 021c 	and.w	r2, r3, #28
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b8:	2101      	movs	r1, #1
 80037ba:	fa01 f202 	lsl.w	r2, r1, r2
 80037be:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	683a      	ldr	r2, [r7, #0]
 80037c6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	2b10      	cmp	r3, #16
 80037ce:	d108      	bne.n	80037e2 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	68ba      	ldr	r2, [r7, #8]
 80037de:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80037e0:	e007      	b.n	80037f2 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	60da      	str	r2, [r3, #12]
}
 80037f2:	bf00      	nop
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bc80      	pop	{r7}
 80037fa:	4770      	bx	lr

080037fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	461a      	mov	r2, r3
 800380a:	4b1c      	ldr	r3, [pc, #112]	@ (800387c <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 800380c:	429a      	cmp	r2, r3
 800380e:	d813      	bhi.n	8003838 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003814:	089b      	lsrs	r3, r3, #2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800381c:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	b2db      	uxtb	r3, r3
 800382a:	3b08      	subs	r3, #8
 800382c:	4a14      	ldr	r2, [pc, #80]	@ (8003880 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800382e:	fba2 2303 	umull	r2, r3, r2, r3
 8003832:	091b      	lsrs	r3, r3, #4
 8003834:	60fb      	str	r3, [r7, #12]
 8003836:	e011      	b.n	800385c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800383c:	089b      	lsrs	r3, r3, #2
 800383e:	009a      	lsls	r2, r3, #2
 8003840:	4b10      	ldr	r3, [pc, #64]	@ (8003884 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8003842:	4413      	add	r3, r2
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	b2db      	uxtb	r3, r3
 800384e:	3b08      	subs	r3, #8
 8003850:	4a0b      	ldr	r2, [pc, #44]	@ (8003880 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8003852:	fba2 2303 	umull	r2, r3, r2, r3
 8003856:	091b      	lsrs	r3, r3, #4
 8003858:	3307      	adds	r3, #7
 800385a:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a0a      	ldr	r2, [pc, #40]	@ (8003888 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8003860:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f003 031f 	and.w	r3, r3, #31
 8003868:	2201      	movs	r2, #1
 800386a:	409a      	lsls	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003870:	bf00      	nop
 8003872:	3714      	adds	r7, #20
 8003874:	46bd      	mov	sp, r7
 8003876:	bc80      	pop	{r7}
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	40020407 	.word	0x40020407
 8003880:	cccccccd 	.word	0xcccccccd
 8003884:	4002081c 	.word	0x4002081c
 8003888:	40020880 	.word	0x40020880

0800388c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800389c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	4b0a      	ldr	r3, [pc, #40]	@ (80038cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80038a2:	4413      	add	r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	461a      	mov	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a08      	ldr	r2, [pc, #32]	@ (80038d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80038b0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	3b01      	subs	r3, #1
 80038b6:	f003 0303 	and.w	r3, r3, #3
 80038ba:	2201      	movs	r2, #1
 80038bc:	409a      	lsls	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80038c2:	bf00      	nop
 80038c4:	3714      	adds	r7, #20
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bc80      	pop	{r7}
 80038ca:	4770      	bx	lr
 80038cc:	1000823f 	.word	0x1000823f
 80038d0:	40020940 	.word	0x40020940

080038d4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b087      	sub	sp, #28
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038de:	2300      	movs	r3, #0
 80038e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038e2:	e140      	b.n	8003b66 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	2101      	movs	r1, #1
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	fa01 f303 	lsl.w	r3, r1, r3
 80038f0:	4013      	ands	r3, r2
 80038f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f000 8132 	beq.w	8003b60 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f003 0303 	and.w	r3, r3, #3
 8003904:	2b01      	cmp	r3, #1
 8003906:	d005      	beq.n	8003914 <HAL_GPIO_Init+0x40>
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f003 0303 	and.w	r3, r3, #3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d130      	bne.n	8003976 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	2203      	movs	r2, #3
 8003920:	fa02 f303 	lsl.w	r3, r2, r3
 8003924:	43db      	mvns	r3, r3
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	4013      	ands	r3, r2
 800392a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	68da      	ldr	r2, [r3, #12]
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	005b      	lsls	r3, r3, #1
 8003934:	fa02 f303 	lsl.w	r3, r2, r3
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	4313      	orrs	r3, r2
 800393c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800394a:	2201      	movs	r2, #1
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	fa02 f303 	lsl.w	r3, r2, r3
 8003952:	43db      	mvns	r3, r3
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	4013      	ands	r3, r2
 8003958:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	091b      	lsrs	r3, r3, #4
 8003960:	f003 0201 	and.w	r2, r3, #1
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	fa02 f303 	lsl.w	r3, r2, r3
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	4313      	orrs	r3, r2
 800396e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f003 0303 	and.w	r3, r3, #3
 800397e:	2b03      	cmp	r3, #3
 8003980:	d017      	beq.n	80039b2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	005b      	lsls	r3, r3, #1
 800398c:	2203      	movs	r2, #3
 800398e:	fa02 f303 	lsl.w	r3, r2, r3
 8003992:	43db      	mvns	r3, r3
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	4013      	ands	r3, r2
 8003998:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	689a      	ldr	r2, [r3, #8]
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	fa02 f303 	lsl.w	r3, r2, r3
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f003 0303 	and.w	r3, r3, #3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d123      	bne.n	8003a06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	08da      	lsrs	r2, r3, #3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	3208      	adds	r2, #8
 80039c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	f003 0307 	and.w	r3, r3, #7
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	220f      	movs	r2, #15
 80039d6:	fa02 f303 	lsl.w	r3, r2, r3
 80039da:	43db      	mvns	r3, r3
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	4013      	ands	r3, r2
 80039e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	691a      	ldr	r2, [r3, #16]
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	f003 0307 	and.w	r3, r3, #7
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	fa02 f303 	lsl.w	r3, r2, r3
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	08da      	lsrs	r2, r3, #3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3208      	adds	r2, #8
 8003a00:	6939      	ldr	r1, [r7, #16]
 8003a02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	2203      	movs	r2, #3
 8003a12:	fa02 f303 	lsl.w	r3, r2, r3
 8003a16:	43db      	mvns	r3, r3
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	4013      	ands	r3, r2
 8003a1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f003 0203 	and.w	r2, r3, #3
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f000 808c 	beq.w	8003b60 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003a48:	4a4e      	ldr	r2, [pc, #312]	@ (8003b84 <HAL_GPIO_Init+0x2b0>)
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	089b      	lsrs	r3, r3, #2
 8003a4e:	3302      	adds	r3, #2
 8003a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	f003 0303 	and.w	r3, r3, #3
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	2207      	movs	r2, #7
 8003a60:	fa02 f303 	lsl.w	r3, r2, r3
 8003a64:	43db      	mvns	r3, r3
 8003a66:	693a      	ldr	r2, [r7, #16]
 8003a68:	4013      	ands	r3, r2
 8003a6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003a72:	d00d      	beq.n	8003a90 <HAL_GPIO_Init+0x1bc>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a44      	ldr	r2, [pc, #272]	@ (8003b88 <HAL_GPIO_Init+0x2b4>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d007      	beq.n	8003a8c <HAL_GPIO_Init+0x1b8>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a43      	ldr	r2, [pc, #268]	@ (8003b8c <HAL_GPIO_Init+0x2b8>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d101      	bne.n	8003a88 <HAL_GPIO_Init+0x1b4>
 8003a84:	2302      	movs	r3, #2
 8003a86:	e004      	b.n	8003a92 <HAL_GPIO_Init+0x1be>
 8003a88:	2307      	movs	r3, #7
 8003a8a:	e002      	b.n	8003a92 <HAL_GPIO_Init+0x1be>
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	e000      	b.n	8003a92 <HAL_GPIO_Init+0x1be>
 8003a90:	2300      	movs	r3, #0
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	f002 0203 	and.w	r2, r2, #3
 8003a98:	0092      	lsls	r2, r2, #2
 8003a9a:	4093      	lsls	r3, r2
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003aa2:	4938      	ldr	r1, [pc, #224]	@ (8003b84 <HAL_GPIO_Init+0x2b0>)
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	089b      	lsrs	r3, r3, #2
 8003aa8:	3302      	adds	r3, #2
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ab0:	4b37      	ldr	r3, [pc, #220]	@ (8003b90 <HAL_GPIO_Init+0x2bc>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	43db      	mvns	r3, r3
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	4013      	ands	r3, r2
 8003abe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d003      	beq.n	8003ad4 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ad4:	4a2e      	ldr	r2, [pc, #184]	@ (8003b90 <HAL_GPIO_Init+0x2bc>)
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003ada:	4b2d      	ldr	r3, [pc, #180]	@ (8003b90 <HAL_GPIO_Init+0x2bc>)
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	43db      	mvns	r3, r3
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d003      	beq.n	8003afe <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003afe:	4a24      	ldr	r2, [pc, #144]	@ (8003b90 <HAL_GPIO_Init+0x2bc>)
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8003b04:	4b22      	ldr	r3, [pc, #136]	@ (8003b90 <HAL_GPIO_Init+0x2bc>)
 8003b06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b0a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	43db      	mvns	r3, r3
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	4013      	ands	r3, r2
 8003b14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d003      	beq.n	8003b2a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8003b2a:	4a19      	ldr	r2, [pc, #100]	@ (8003b90 <HAL_GPIO_Init+0x2bc>)
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8003b32:	4b17      	ldr	r3, [pc, #92]	@ (8003b90 <HAL_GPIO_Init+0x2bc>)
 8003b34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b38:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	43db      	mvns	r3, r3
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	4013      	ands	r3, r2
 8003b42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d003      	beq.n	8003b58 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8003b58:	4a0d      	ldr	r2, [pc, #52]	@ (8003b90 <HAL_GPIO_Init+0x2bc>)
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	3301      	adds	r3, #1
 8003b64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f47f aeb7 	bne.w	80038e4 <HAL_GPIO_Init+0x10>
  }
}
 8003b76:	bf00      	nop
 8003b78:	bf00      	nop
 8003b7a:	371c      	adds	r7, #28
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bc80      	pop	{r7}
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	40010000 	.word	0x40010000
 8003b88:	48000400 	.word	0x48000400
 8003b8c:	48000800 	.word	0x48000800
 8003b90:	58000800 	.word	0x58000800

08003b94 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b087      	sub	sp, #28
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003ba2:	e0af      	b.n	8003d04 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f000 80a2 	beq.w	8003cfe <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003bba:	4a59      	ldr	r2, [pc, #356]	@ (8003d20 <HAL_GPIO_DeInit+0x18c>)
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	089b      	lsrs	r3, r3, #2
 8003bc0:	3302      	adds	r3, #2
 8003bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bc6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	f003 0303 	and.w	r3, r3, #3
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	2207      	movs	r2, #7
 8003bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	4013      	ands	r3, r2
 8003bda:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003be2:	d00d      	beq.n	8003c00 <HAL_GPIO_DeInit+0x6c>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a4f      	ldr	r2, [pc, #316]	@ (8003d24 <HAL_GPIO_DeInit+0x190>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d007      	beq.n	8003bfc <HAL_GPIO_DeInit+0x68>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a4e      	ldr	r2, [pc, #312]	@ (8003d28 <HAL_GPIO_DeInit+0x194>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d101      	bne.n	8003bf8 <HAL_GPIO_DeInit+0x64>
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	e004      	b.n	8003c02 <HAL_GPIO_DeInit+0x6e>
 8003bf8:	2307      	movs	r3, #7
 8003bfa:	e002      	b.n	8003c02 <HAL_GPIO_DeInit+0x6e>
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e000      	b.n	8003c02 <HAL_GPIO_DeInit+0x6e>
 8003c00:	2300      	movs	r3, #0
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	f002 0203 	and.w	r2, r2, #3
 8003c08:	0092      	lsls	r2, r2, #2
 8003c0a:	4093      	lsls	r3, r2
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d136      	bne.n	8003c80 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8003c12:	4b46      	ldr	r3, [pc, #280]	@ (8003d2c <HAL_GPIO_DeInit+0x198>)
 8003c14:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	43db      	mvns	r3, r3
 8003c1c:	4943      	ldr	r1, [pc, #268]	@ (8003d2c <HAL_GPIO_DeInit+0x198>)
 8003c1e:	4013      	ands	r3, r2
 8003c20:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8003c24:	4b41      	ldr	r3, [pc, #260]	@ (8003d2c <HAL_GPIO_DeInit+0x198>)
 8003c26:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	43db      	mvns	r3, r3
 8003c2e:	493f      	ldr	r1, [pc, #252]	@ (8003d2c <HAL_GPIO_DeInit+0x198>)
 8003c30:	4013      	ands	r3, r2
 8003c32:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8003c36:	4b3d      	ldr	r3, [pc, #244]	@ (8003d2c <HAL_GPIO_DeInit+0x198>)
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	43db      	mvns	r3, r3
 8003c3e:	493b      	ldr	r1, [pc, #236]	@ (8003d2c <HAL_GPIO_DeInit+0x198>)
 8003c40:	4013      	ands	r3, r2
 8003c42:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8003c44:	4b39      	ldr	r3, [pc, #228]	@ (8003d2c <HAL_GPIO_DeInit+0x198>)
 8003c46:	685a      	ldr	r2, [r3, #4]
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	43db      	mvns	r3, r3
 8003c4c:	4937      	ldr	r1, [pc, #220]	@ (8003d2c <HAL_GPIO_DeInit+0x198>)
 8003c4e:	4013      	ands	r3, r2
 8003c50:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f003 0303 	and.w	r3, r3, #3
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	2207      	movs	r2, #7
 8003c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c60:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003c62:	4a2f      	ldr	r2, [pc, #188]	@ (8003d20 <HAL_GPIO_DeInit+0x18c>)
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	089b      	lsrs	r3, r3, #2
 8003c68:	3302      	adds	r3, #2
 8003c6a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	43da      	mvns	r2, r3
 8003c72:	482b      	ldr	r0, [pc, #172]	@ (8003d20 <HAL_GPIO_DeInit+0x18c>)
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	089b      	lsrs	r3, r3, #2
 8003c78:	400a      	ands	r2, r1
 8003c7a:	3302      	adds	r3, #2
 8003c7c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	005b      	lsls	r3, r3, #1
 8003c88:	2103      	movs	r1, #3
 8003c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	08da      	lsrs	r2, r3, #3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	3208      	adds	r2, #8
 8003c9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	f003 0307 	and.w	r3, r3, #7
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	220f      	movs	r2, #15
 8003caa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cae:	43db      	mvns	r3, r3
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	08d2      	lsrs	r2, r2, #3
 8003cb4:	4019      	ands	r1, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	3208      	adds	r2, #8
 8003cba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689a      	ldr	r2, [r3, #8]
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	2103      	movs	r1, #3
 8003cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8003ccc:	43db      	mvns	r3, r3
 8003cce:	401a      	ands	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	2101      	movs	r1, #1
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ce0:	43db      	mvns	r3, r3
 8003ce2:	401a      	ands	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68da      	ldr	r2, [r3, #12]
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	005b      	lsls	r3, r3, #1
 8003cf0:	2103      	movs	r1, #3
 8003cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8003cf6:	43db      	mvns	r3, r3
 8003cf8:	401a      	ands	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	60da      	str	r2, [r3, #12]
    }

    position++;
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	3301      	adds	r3, #1
 8003d02:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	fa22 f303 	lsr.w	r3, r2, r3
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f47f af49 	bne.w	8003ba4 <HAL_GPIO_DeInit+0x10>
  }
}
 8003d12:	bf00      	nop
 8003d14:	bf00      	nop
 8003d16:	371c      	adds	r7, #28
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bc80      	pop	{r7}
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	40010000 	.word	0x40010000
 8003d24:	48000400 	.word	0x48000400
 8003d28:	48000800 	.word	0x48000800
 8003d2c:	58000800 	.word	0x58000800

08003d30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	460b      	mov	r3, r1
 8003d3a:	807b      	strh	r3, [r7, #2]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d40:	787b      	ldrb	r3, [r7, #1]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d003      	beq.n	8003d4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d46:	887a      	ldrh	r2, [r7, #2]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d4c:	e002      	b.n	8003d54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d4e:	887a      	ldrh	r2, [r7, #2]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bc80      	pop	{r7}
 8003d5c:	4770      	bx	lr
	...

08003d60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	4603      	mov	r3, r0
 8003d68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003d6a:	4b08      	ldr	r3, [pc, #32]	@ (8003d8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d6c:	68da      	ldr	r2, [r3, #12]
 8003d6e:	88fb      	ldrh	r3, [r7, #6]
 8003d70:	4013      	ands	r3, r2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d006      	beq.n	8003d84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d76:	4a05      	ldr	r2, [pc, #20]	@ (8003d8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d78:	88fb      	ldrh	r3, [r7, #6]
 8003d7a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d7c:	88fb      	ldrh	r3, [r7, #6]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f000 f806 	bl	8003d90 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d84:	bf00      	nop
 8003d86:	3708      	adds	r7, #8
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	58000800 	.word	0x58000800

08003d90 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	4603      	mov	r3, r0
 8003d98:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003d9a:	bf00      	nop
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bc80      	pop	{r7}
 8003da2:	4770      	bx	lr

08003da4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e081      	b.n	8003eba <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d106      	bne.n	8003dd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f879 	bl	8003ec2 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2224      	movs	r2, #36	@ 0x24
 8003dd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f022 0201 	bic.w	r2, r2, #1
 8003de6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003df4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	689a      	ldr	r2, [r3, #8]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e04:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d107      	bne.n	8003e1e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	689a      	ldr	r2, [r3, #8]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e1a:	609a      	str	r2, [r3, #8]
 8003e1c:	e006      	b.n	8003e2c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	689a      	ldr	r2, [r3, #8]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003e2a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d104      	bne.n	8003e3e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003e3c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	6812      	ldr	r2, [r2, #0]
 8003e48:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003e4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e50:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68da      	ldr	r2, [r3, #12]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e60:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	691a      	ldr	r2, [r3, #16]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	69d9      	ldr	r1, [r3, #28]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a1a      	ldr	r2, [r3, #32]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f042 0201 	orr.w	r2, r2, #1
 8003e9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3708      	adds	r7, #8
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	b083      	sub	sp, #12
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8003eca:	bf00      	nop
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bc80      	pop	{r7}
 8003ed2:	4770      	bx	lr

08003ed4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b088      	sub	sp, #32
 8003ed8:	af02      	add	r7, sp, #8
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	607a      	str	r2, [r7, #4]
 8003ede:	461a      	mov	r2, r3
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	817b      	strh	r3, [r7, #10]
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	2b20      	cmp	r3, #32
 8003ef2:	f040 80da 	bne.w	80040aa <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d101      	bne.n	8003f04 <HAL_I2C_Master_Transmit+0x30>
 8003f00:	2302      	movs	r3, #2
 8003f02:	e0d3      	b.n	80040ac <HAL_I2C_Master_Transmit+0x1d8>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f0c:	f7fd fbf6 	bl	80016fc <HAL_GetTick>
 8003f10:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	9300      	str	r3, [sp, #0]
 8003f16:	2319      	movs	r3, #25
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f000 f9e5 	bl	80042ee <I2C_WaitOnFlagUntilTimeout>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d001      	beq.n	8003f2e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e0be      	b.n	80040ac <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2221      	movs	r2, #33	@ 0x21
 8003f32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2210      	movs	r2, #16
 8003f3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	893a      	ldrh	r2, [r7, #8]
 8003f4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	2bff      	cmp	r3, #255	@ 0xff
 8003f5e:	d90e      	bls.n	8003f7e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	22ff      	movs	r2, #255	@ 0xff
 8003f64:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f6a:	b2da      	uxtb	r2, r3
 8003f6c:	8979      	ldrh	r1, [r7, #10]
 8003f6e:	4b51      	ldr	r3, [pc, #324]	@ (80040b4 <HAL_I2C_Master_Transmit+0x1e0>)
 8003f70:	9300      	str	r3, [sp, #0]
 8003f72:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f000 fbd0 	bl	800471c <I2C_TransferConfig>
 8003f7c:	e06c      	b.n	8004058 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f8c:	b2da      	uxtb	r2, r3
 8003f8e:	8979      	ldrh	r1, [r7, #10]
 8003f90:	4b48      	ldr	r3, [pc, #288]	@ (80040b4 <HAL_I2C_Master_Transmit+0x1e0>)
 8003f92:	9300      	str	r3, [sp, #0]
 8003f94:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f000 fbbf 	bl	800471c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003f9e:	e05b      	b.n	8004058 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	6a39      	ldr	r1, [r7, #32]
 8003fa4:	68f8      	ldr	r0, [r7, #12]
 8003fa6:	f000 f9e2 	bl	800436e <I2C_WaitOnTXISFlagUntilTimeout>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d001      	beq.n	8003fb4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e07b      	b.n	80040ac <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb8:	781a      	ldrb	r2, [r3, #0]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc4:	1c5a      	adds	r2, r3, #1
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	b29a      	uxth	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d034      	beq.n	8004058 <HAL_I2C_Master_Transmit+0x184>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d130      	bne.n	8004058 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	9300      	str	r3, [sp, #0]
 8003ffa:	6a3b      	ldr	r3, [r7, #32]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	2180      	movs	r1, #128	@ 0x80
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	f000 f974 	bl	80042ee <I2C_WaitOnFlagUntilTimeout>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d001      	beq.n	8004010 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e04d      	b.n	80040ac <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004014:	b29b      	uxth	r3, r3
 8004016:	2bff      	cmp	r3, #255	@ 0xff
 8004018:	d90e      	bls.n	8004038 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	22ff      	movs	r2, #255	@ 0xff
 800401e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004024:	b2da      	uxtb	r2, r3
 8004026:	8979      	ldrh	r1, [r7, #10]
 8004028:	2300      	movs	r3, #0
 800402a:	9300      	str	r3, [sp, #0]
 800402c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	f000 fb73 	bl	800471c <I2C_TransferConfig>
 8004036:	e00f      	b.n	8004058 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800403c:	b29a      	uxth	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004046:	b2da      	uxtb	r2, r3
 8004048:	8979      	ldrh	r1, [r7, #10]
 800404a:	2300      	movs	r3, #0
 800404c:	9300      	str	r3, [sp, #0]
 800404e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004052:	68f8      	ldr	r0, [r7, #12]
 8004054:	f000 fb62 	bl	800471c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800405c:	b29b      	uxth	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d19e      	bne.n	8003fa0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	6a39      	ldr	r1, [r7, #32]
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f000 f9c1 	bl	80043ee <I2C_WaitOnSTOPFlagUntilTimeout>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e01a      	b.n	80040ac <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2220      	movs	r2, #32
 800407c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	6859      	ldr	r1, [r3, #4]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	4b0b      	ldr	r3, [pc, #44]	@ (80040b8 <HAL_I2C_Master_Transmit+0x1e4>)
 800408a:	400b      	ands	r3, r1
 800408c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2220      	movs	r2, #32
 8004092:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80040a6:	2300      	movs	r3, #0
 80040a8:	e000      	b.n	80040ac <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80040aa:	2302      	movs	r3, #2
  }
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3718      	adds	r7, #24
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	80002000 	.word	0x80002000
 80040b8:	fe00e800 	.word	0xfe00e800

080040bc <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b088      	sub	sp, #32
 80040c0:	af02      	add	r7, sp, #8
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	607a      	str	r2, [r7, #4]
 80040c6:	461a      	mov	r2, r3
 80040c8:	460b      	mov	r3, r1
 80040ca:	817b      	strh	r3, [r7, #10]
 80040cc:	4613      	mov	r3, r2
 80040ce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	2b20      	cmp	r3, #32
 80040da:	f040 80db 	bne.w	8004294 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d101      	bne.n	80040ec <HAL_I2C_Master_Receive+0x30>
 80040e8:	2302      	movs	r3, #2
 80040ea:	e0d4      	b.n	8004296 <HAL_I2C_Master_Receive+0x1da>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80040f4:	f7fd fb02 	bl	80016fc <HAL_GetTick>
 80040f8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	2319      	movs	r3, #25
 8004100:	2201      	movs	r2, #1
 8004102:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 f8f1 	bl	80042ee <I2C_WaitOnFlagUntilTimeout>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e0bf      	b.n	8004296 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2222      	movs	r2, #34	@ 0x22
 800411a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2210      	movs	r2, #16
 8004122:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	893a      	ldrh	r2, [r7, #8]
 8004136:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004142:	b29b      	uxth	r3, r3
 8004144:	2bff      	cmp	r3, #255	@ 0xff
 8004146:	d90e      	bls.n	8004166 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	22ff      	movs	r2, #255	@ 0xff
 800414c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004152:	b2da      	uxtb	r2, r3
 8004154:	8979      	ldrh	r1, [r7, #10]
 8004156:	4b52      	ldr	r3, [pc, #328]	@ (80042a0 <HAL_I2C_Master_Receive+0x1e4>)
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f000 fadc 	bl	800471c <I2C_TransferConfig>
 8004164:	e06d      	b.n	8004242 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800416a:	b29a      	uxth	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004174:	b2da      	uxtb	r2, r3
 8004176:	8979      	ldrh	r1, [r7, #10]
 8004178:	4b49      	ldr	r3, [pc, #292]	@ (80042a0 <HAL_I2C_Master_Receive+0x1e4>)
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f000 facb 	bl	800471c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004186:	e05c      	b.n	8004242 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	6a39      	ldr	r1, [r7, #32]
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f000 f96b 	bl	8004468 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d001      	beq.n	800419c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e07c      	b.n	8004296 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a6:	b2d2      	uxtb	r2, r2
 80041a8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ae:	1c5a      	adds	r2, r3, #1
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041b8:	3b01      	subs	r3, #1
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	3b01      	subs	r3, #1
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d034      	beq.n	8004242 <HAL_I2C_Master_Receive+0x186>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d130      	bne.n	8004242 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	6a3b      	ldr	r3, [r7, #32]
 80041e6:	2200      	movs	r2, #0
 80041e8:	2180      	movs	r1, #128	@ 0x80
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f000 f87f 	bl	80042ee <I2C_WaitOnFlagUntilTimeout>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d001      	beq.n	80041fa <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e04d      	b.n	8004296 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041fe:	b29b      	uxth	r3, r3
 8004200:	2bff      	cmp	r3, #255	@ 0xff
 8004202:	d90e      	bls.n	8004222 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	22ff      	movs	r2, #255	@ 0xff
 8004208:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800420e:	b2da      	uxtb	r2, r3
 8004210:	8979      	ldrh	r1, [r7, #10]
 8004212:	2300      	movs	r3, #0
 8004214:	9300      	str	r3, [sp, #0]
 8004216:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f000 fa7e 	bl	800471c <I2C_TransferConfig>
 8004220:	e00f      	b.n	8004242 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004226:	b29a      	uxth	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004230:	b2da      	uxtb	r2, r3
 8004232:	8979      	ldrh	r1, [r7, #10]
 8004234:	2300      	movs	r3, #0
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f000 fa6d 	bl	800471c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004246:	b29b      	uxth	r3, r3
 8004248:	2b00      	cmp	r3, #0
 800424a:	d19d      	bne.n	8004188 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800424c:	697a      	ldr	r2, [r7, #20]
 800424e:	6a39      	ldr	r1, [r7, #32]
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f000 f8cc 	bl	80043ee <I2C_WaitOnSTOPFlagUntilTimeout>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e01a      	b.n	8004296 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2220      	movs	r2, #32
 8004266:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6859      	ldr	r1, [r3, #4]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	4b0c      	ldr	r3, [pc, #48]	@ (80042a4 <HAL_I2C_Master_Receive+0x1e8>)
 8004274:	400b      	ands	r3, r1
 8004276:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2220      	movs	r2, #32
 800427c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004290:	2300      	movs	r3, #0
 8004292:	e000      	b.n	8004296 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004294:	2302      	movs	r3, #2
  }
}
 8004296:	4618      	mov	r0, r3
 8004298:	3718      	adds	r7, #24
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	80002400 	.word	0x80002400
 80042a4:	fe00e800 	.word	0xfe00e800

080042a8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d103      	bne.n	80042c6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2200      	movs	r2, #0
 80042c4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d007      	beq.n	80042e4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	699a      	ldr	r2, [r3, #24]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f042 0201 	orr.w	r2, r2, #1
 80042e2:	619a      	str	r2, [r3, #24]
  }
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bc80      	pop	{r7}
 80042ec:	4770      	bx	lr

080042ee <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b084      	sub	sp, #16
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	60f8      	str	r0, [r7, #12]
 80042f6:	60b9      	str	r1, [r7, #8]
 80042f8:	603b      	str	r3, [r7, #0]
 80042fa:	4613      	mov	r3, r2
 80042fc:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042fe:	e022      	b.n	8004346 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004306:	d01e      	beq.n	8004346 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004308:	f7fd f9f8 	bl	80016fc <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	683a      	ldr	r2, [r7, #0]
 8004314:	429a      	cmp	r2, r3
 8004316:	d302      	bcc.n	800431e <I2C_WaitOnFlagUntilTimeout+0x30>
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d113      	bne.n	8004346 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004322:	f043 0220 	orr.w	r2, r3, #32
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2220      	movs	r2, #32
 800432e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e00f      	b.n	8004366 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	699a      	ldr	r2, [r3, #24]
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	4013      	ands	r3, r2
 8004350:	68ba      	ldr	r2, [r7, #8]
 8004352:	429a      	cmp	r2, r3
 8004354:	bf0c      	ite	eq
 8004356:	2301      	moveq	r3, #1
 8004358:	2300      	movne	r3, #0
 800435a:	b2db      	uxtb	r3, r3
 800435c:	461a      	mov	r2, r3
 800435e:	79fb      	ldrb	r3, [r7, #7]
 8004360:	429a      	cmp	r2, r3
 8004362:	d0cd      	beq.n	8004300 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3710      	adds	r7, #16
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}

0800436e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b084      	sub	sp, #16
 8004372:	af00      	add	r7, sp, #0
 8004374:	60f8      	str	r0, [r7, #12]
 8004376:	60b9      	str	r1, [r7, #8]
 8004378:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800437a:	e02c      	b.n	80043d6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	68b9      	ldr	r1, [r7, #8]
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	f000 f8eb 	bl	800455c <I2C_IsErrorOccurred>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d001      	beq.n	8004390 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e02a      	b.n	80043e6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004396:	d01e      	beq.n	80043d6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004398:	f7fd f9b0 	bl	80016fc <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d302      	bcc.n	80043ae <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d113      	bne.n	80043d6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043b2:	f043 0220 	orr.w	r2, r3, #32
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2220      	movs	r2, #32
 80043be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e007      	b.n	80043e6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	f003 0302 	and.w	r3, r3, #2
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d1cb      	bne.n	800437c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}

080043ee <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80043ee:	b580      	push	{r7, lr}
 80043f0:	b084      	sub	sp, #16
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	60f8      	str	r0, [r7, #12]
 80043f6:	60b9      	str	r1, [r7, #8]
 80043f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043fa:	e028      	b.n	800444e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	68b9      	ldr	r1, [r7, #8]
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f000 f8ab 	bl	800455c <I2C_IsErrorOccurred>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d001      	beq.n	8004410 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e026      	b.n	800445e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004410:	f7fd f974 	bl	80016fc <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	68ba      	ldr	r2, [r7, #8]
 800441c:	429a      	cmp	r2, r3
 800441e:	d302      	bcc.n	8004426 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d113      	bne.n	800444e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800442a:	f043 0220 	orr.w	r2, r3, #32
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2220      	movs	r2, #32
 8004436:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e007      	b.n	800445e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	f003 0320 	and.w	r3, r3, #32
 8004458:	2b20      	cmp	r3, #32
 800445a:	d1cf      	bne.n	80043fc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
	...

08004468 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b084      	sub	sp, #16
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004474:	e064      	b.n	8004540 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	68b9      	ldr	r1, [r7, #8]
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f000 f86e 	bl	800455c <I2C_IsErrorOccurred>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d001      	beq.n	800448a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e062      	b.n	8004550 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	f003 0320 	and.w	r3, r3, #32
 8004494:	2b20      	cmp	r3, #32
 8004496:	d138      	bne.n	800450a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	f003 0304 	and.w	r3, r3, #4
 80044a2:	2b04      	cmp	r3, #4
 80044a4:	d105      	bne.n	80044b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d001      	beq.n	80044b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80044ae:	2300      	movs	r3, #0
 80044b0:	e04e      	b.n	8004550 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	f003 0310 	and.w	r3, r3, #16
 80044bc:	2b10      	cmp	r3, #16
 80044be:	d107      	bne.n	80044d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2210      	movs	r2, #16
 80044c6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2204      	movs	r2, #4
 80044cc:	645a      	str	r2, [r3, #68]	@ 0x44
 80044ce:	e002      	b.n	80044d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2220      	movs	r2, #32
 80044dc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	6859      	ldr	r1, [r3, #4]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	4b1b      	ldr	r3, [pc, #108]	@ (8004558 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80044ea:	400b      	ands	r3, r1
 80044ec:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2220      	movs	r2, #32
 80044f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e022      	b.n	8004550 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800450a:	f7fd f8f7 	bl	80016fc <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	429a      	cmp	r2, r3
 8004518:	d302      	bcc.n	8004520 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d10f      	bne.n	8004540 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004524:	f043 0220 	orr.w	r2, r3, #32
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2220      	movs	r2, #32
 8004530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e007      	b.n	8004550 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	f003 0304 	and.w	r3, r3, #4
 800454a:	2b04      	cmp	r3, #4
 800454c:	d193      	bne.n	8004476 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3710      	adds	r7, #16
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	fe00e800 	.word	0xfe00e800

0800455c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b08a      	sub	sp, #40	@ 0x28
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004568:	2300      	movs	r3, #0
 800456a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004576:	2300      	movs	r3, #0
 8004578:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	f003 0310 	and.w	r3, r3, #16
 8004584:	2b00      	cmp	r3, #0
 8004586:	d068      	beq.n	800465a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	2210      	movs	r2, #16
 800458e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004590:	e049      	b.n	8004626 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004598:	d045      	beq.n	8004626 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800459a:	f7fd f8af 	bl	80016fc <HAL_GetTick>
 800459e:	4602      	mov	r2, r0
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	68ba      	ldr	r2, [r7, #8]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d302      	bcc.n	80045b0 <I2C_IsErrorOccurred+0x54>
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d13a      	bne.n	8004626 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045ba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80045c2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045d2:	d121      	bne.n	8004618 <I2C_IsErrorOccurred+0xbc>
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045da:	d01d      	beq.n	8004618 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80045dc:	7cfb      	ldrb	r3, [r7, #19]
 80045de:	2b20      	cmp	r3, #32
 80045e0:	d01a      	beq.n	8004618 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	685a      	ldr	r2, [r3, #4]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80045f0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80045f2:	f7fd f883 	bl	80016fc <HAL_GetTick>
 80045f6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045f8:	e00e      	b.n	8004618 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80045fa:	f7fd f87f 	bl	80016fc <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b19      	cmp	r3, #25
 8004606:	d907      	bls.n	8004618 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8004608:	6a3b      	ldr	r3, [r7, #32]
 800460a:	f043 0320 	orr.w	r3, r3, #32
 800460e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004616:	e006      	b.n	8004626 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	f003 0320 	and.w	r3, r3, #32
 8004622:	2b20      	cmp	r3, #32
 8004624:	d1e9      	bne.n	80045fa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	f003 0320 	and.w	r3, r3, #32
 8004630:	2b20      	cmp	r3, #32
 8004632:	d003      	beq.n	800463c <I2C_IsErrorOccurred+0xe0>
 8004634:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004638:	2b00      	cmp	r3, #0
 800463a:	d0aa      	beq.n	8004592 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800463c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004640:	2b00      	cmp	r3, #0
 8004642:	d103      	bne.n	800464c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2220      	movs	r2, #32
 800464a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800464c:	6a3b      	ldr	r3, [r7, #32]
 800464e:	f043 0304 	orr.w	r3, r3, #4
 8004652:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00b      	beq.n	8004684 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800466c:	6a3b      	ldr	r3, [r7, #32]
 800466e:	f043 0301 	orr.w	r3, r3, #1
 8004672:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800467c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00b      	beq.n	80046a6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800468e:	6a3b      	ldr	r3, [r7, #32]
 8004690:	f043 0308 	orr.w	r3, r3, #8
 8004694:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800469e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00b      	beq.n	80046c8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80046b0:	6a3b      	ldr	r3, [r7, #32]
 80046b2:	f043 0302 	orr.w	r3, r3, #2
 80046b6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80046c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d01c      	beq.n	800470a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f7ff fde9 	bl	80042a8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	6859      	ldr	r1, [r3, #4]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	4b0d      	ldr	r3, [pc, #52]	@ (8004718 <I2C_IsErrorOccurred+0x1bc>)
 80046e2:	400b      	ands	r3, r1
 80046e4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80046ea:	6a3b      	ldr	r3, [r7, #32]
 80046ec:	431a      	orrs	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2220      	movs	r2, #32
 80046f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800470a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800470e:	4618      	mov	r0, r3
 8004710:	3728      	adds	r7, #40	@ 0x28
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	fe00e800 	.word	0xfe00e800

0800471c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800471c:	b480      	push	{r7}
 800471e:	b087      	sub	sp, #28
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	607b      	str	r3, [r7, #4]
 8004726:	460b      	mov	r3, r1
 8004728:	817b      	strh	r3, [r7, #10]
 800472a:	4613      	mov	r3, r2
 800472c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800472e:	897b      	ldrh	r3, [r7, #10]
 8004730:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004734:	7a7b      	ldrb	r3, [r7, #9]
 8004736:	041b      	lsls	r3, r3, #16
 8004738:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800473c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004742:	6a3b      	ldr	r3, [r7, #32]
 8004744:	4313      	orrs	r3, r2
 8004746:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800474a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	685a      	ldr	r2, [r3, #4]
 8004752:	6a3b      	ldr	r3, [r7, #32]
 8004754:	0d5b      	lsrs	r3, r3, #21
 8004756:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800475a:	4b07      	ldr	r3, [pc, #28]	@ (8004778 <I2C_TransferConfig+0x5c>)
 800475c:	430b      	orrs	r3, r1
 800475e:	43db      	mvns	r3, r3
 8004760:	ea02 0103 	and.w	r1, r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	697a      	ldr	r2, [r7, #20]
 800476a:	430a      	orrs	r2, r1
 800476c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800476e:	bf00      	nop
 8004770:	371c      	adds	r7, #28
 8004772:	46bd      	mov	sp, r7
 8004774:	bc80      	pop	{r7}
 8004776:	4770      	bx	lr
 8004778:	03ff63ff 	.word	0x03ff63ff

0800477c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b20      	cmp	r3, #32
 8004790:	d138      	bne.n	8004804 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004798:	2b01      	cmp	r3, #1
 800479a:	d101      	bne.n	80047a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800479c:	2302      	movs	r3, #2
 800479e:	e032      	b.n	8004806 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2224      	movs	r2, #36	@ 0x24
 80047ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f022 0201 	bic.w	r2, r2, #1
 80047be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80047ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	6819      	ldr	r1, [r3, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	430a      	orrs	r2, r1
 80047de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f042 0201 	orr.w	r2, r2, #1
 80047ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2220      	movs	r2, #32
 80047f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004800:	2300      	movs	r3, #0
 8004802:	e000      	b.n	8004806 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004804:	2302      	movs	r3, #2
  }
}
 8004806:	4618      	mov	r0, r3
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	bc80      	pop	{r7}
 800480e:	4770      	bx	lr

08004810 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004810:	b480      	push	{r7}
 8004812:	b085      	sub	sp, #20
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004820:	b2db      	uxtb	r3, r3
 8004822:	2b20      	cmp	r3, #32
 8004824:	d139      	bne.n	800489a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800482c:	2b01      	cmp	r3, #1
 800482e:	d101      	bne.n	8004834 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004830:	2302      	movs	r3, #2
 8004832:	e033      	b.n	800489c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2224      	movs	r2, #36	@ 0x24
 8004840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f022 0201 	bic.w	r2, r2, #1
 8004852:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004862:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	021b      	lsls	r3, r3, #8
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	4313      	orrs	r3, r2
 800486c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f042 0201 	orr.w	r2, r2, #1
 8004884:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2220      	movs	r2, #32
 800488a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004896:	2300      	movs	r3, #0
 8004898:	e000      	b.n	800489c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800489a:	2302      	movs	r3, #2
  }
}
 800489c:	4618      	mov	r0, r3
 800489e:	3714      	adds	r7, #20
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bc80      	pop	{r7}
 80048a4:	4770      	bx	lr
	...

080048a8 <LL_EXTI_EnableIT_0_31>:
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80048b0:	4b06      	ldr	r3, [pc, #24]	@ (80048cc <LL_EXTI_EnableIT_0_31+0x24>)
 80048b2:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80048b6:	4905      	ldr	r1, [pc, #20]	@ (80048cc <LL_EXTI_EnableIT_0_31+0x24>)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80048c0:	bf00      	nop
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bc80      	pop	{r7}
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	58000800 	.word	0x58000800

080048d0 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80048d8:	4b06      	ldr	r3, [pc, #24]	@ (80048f4 <LL_EXTI_DisableIT_0_31+0x24>)
 80048da:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	43db      	mvns	r3, r3
 80048e2:	4904      	ldr	r1, [pc, #16]	@ (80048f4 <LL_EXTI_DisableIT_0_31+0x24>)
 80048e4:	4013      	ands	r3, r2
 80048e6:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80048ea:	bf00      	nop
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bc80      	pop	{r7}
 80048f2:	4770      	bx	lr
 80048f4:	58000800 	.word	0x58000800

080048f8 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_22
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8004900:	4b05      	ldr	r3, [pc, #20]	@ (8004918 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	4904      	ldr	r1, [pc, #16]	@ (8004918 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4313      	orrs	r3, r2
 800490a:	600b      	str	r3, [r1, #0]

}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	bc80      	pop	{r7}
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	58000800 	.word	0x58000800

0800491c <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_22
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8004924:	4b05      	ldr	r3, [pc, #20]	@ (800493c <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	43db      	mvns	r3, r3
 800492c:	4903      	ldr	r1, [pc, #12]	@ (800493c <LL_EXTI_DisableRisingTrig_0_31+0x20>)
 800492e:	4013      	ands	r3, r2
 8004930:	600b      	str	r3, [r1, #0]

}
 8004932:	bf00      	nop
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	bc80      	pop	{r7}
 800493a:	4770      	bx	lr
 800493c:	58000800 	.word	0x58000800

08004940 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_22
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8004948:	4b05      	ldr	r3, [pc, #20]	@ (8004960 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800494a:	685a      	ldr	r2, [r3, #4]
 800494c:	4904      	ldr	r1, [pc, #16]	@ (8004960 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4313      	orrs	r3, r2
 8004952:	604b      	str	r3, [r1, #4]
}
 8004954:	bf00      	nop
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	bc80      	pop	{r7}
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	58000800 	.word	0x58000800

08004964 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_22
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800496c:	4b05      	ldr	r3, [pc, #20]	@ (8004984 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 800496e:	685a      	ldr	r2, [r3, #4]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	43db      	mvns	r3, r3
 8004974:	4903      	ldr	r1, [pc, #12]	@ (8004984 <LL_EXTI_DisableFallingTrig_0_31+0x20>)
 8004976:	4013      	ands	r3, r2
 8004978:	604b      	str	r3, [r1, #4]
}
 800497a:	bf00      	nop
 800497c:	370c      	adds	r7, #12
 800497e:	46bd      	mov	sp, r7
 8004980:	bc80      	pop	{r7}
 8004982:	4770      	bx	lr
 8004984:	58000800 	.word	0x58000800

08004988 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004988:	b480      	push	{r7}
 800498a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800498c:	4b04      	ldr	r3, [pc, #16]	@ (80049a0 <HAL_PWR_EnableBkUpAccess+0x18>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a03      	ldr	r2, [pc, #12]	@ (80049a0 <HAL_PWR_EnableBkUpAccess+0x18>)
 8004992:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004996:	6013      	str	r3, [r2, #0]
}
 8004998:	bf00      	nop
 800499a:	46bd      	mov	sp, r7
 800499c:	bc80      	pop	{r7}
 800499e:	4770      	bx	lr
 80049a0:	58000400 	.word	0x58000400

080049a4 <HAL_PWR_ConfigPVD>:
  * @note   For devices dual core: if "sConfigPVD->Mode" is set to PVD_MODE_IT,
  *         wake-up target is set to wake-up the selected CPU.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 80049ac:	4b1b      	ldr	r3, [pc, #108]	@ (8004a1c <HAL_PWR_ConfigPVD+0x78>)
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f023 020e 	bic.w	r2, r3, #14
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4918      	ldr	r1, [pc, #96]	@ (8004a1c <HAL_PWR_ConfigPVD+0x78>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */

  /* Note: On STM32WL series, power PVD event is not available on EXTI lines   */
  /*       (only interruption is available through EXTI line 16).             */
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 80049be:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80049c2:	f7ff ff85 	bl	80048d0 <LL_EXTI_DisableIT_0_31>
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 80049c6:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80049ca:	f7ff ffcb 	bl	8004964 <LL_EXTI_DisableFallingTrig_0_31>
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 80049ce:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80049d2:	f7ff ffa3 	bl	800491c <LL_EXTI_DisableRisingTrig_0_31>

  /* Configure interrupt mode */
  if ((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d003      	beq.n	80049ea <HAL_PWR_ConfigPVD+0x46>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 80049e2:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80049e6:	f7ff ff5f 	bl	80048a8 <LL_EXTI_EnableIT_0_31>
  }

  /* Configure the edge */
  if ((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d003      	beq.n	80049fe <HAL_PWR_ConfigPVD+0x5a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 80049f6:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80049fa:	f7ff ffa1 	bl	8004940 <LL_EXTI_EnableFallingTrig_0_31>
  }

  if ((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d003      	beq.n	8004a12 <HAL_PWR_ConfigPVD+0x6e>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8004a0a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8004a0e:	f7ff ff73 	bl	80048f8 <LL_EXTI_EnableRisingTrig_0_31>
  }

  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3708      	adds	r7, #8
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	58000400 	.word	0x58000400

08004a20 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8004a20:	b480      	push	{r7}
 8004a22:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 8004a24:	4b04      	ldr	r3, [pc, #16]	@ (8004a38 <HAL_PWR_EnablePVD+0x18>)
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	4a03      	ldr	r2, [pc, #12]	@ (8004a38 <HAL_PWR_EnablePVD+0x18>)
 8004a2a:	f043 0301 	orr.w	r3, r3, #1
 8004a2e:	6053      	str	r3, [r2, #4]
}
 8004a30:	bf00      	nop
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bc80      	pop	{r7}
 8004a36:	4770      	bx	lr
 8004a38:	58000400 	.word	0x58000400

08004a3c <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b082      	sub	sp, #8
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	460b      	mov	r3, r1
 8004a46:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d10c      	bne.n	8004a68 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8004a4e:	4b13      	ldr	r3, [pc, #76]	@ (8004a9c <HAL_PWR_EnterSLEEPMode+0x60>)
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a5a:	d10d      	bne.n	8004a78 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8004a5c:	f000 f8cc 	bl	8004bf8 <HAL_PWREx_DisableLowPowerRunMode>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d008      	beq.n	8004a78 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8004a66:	e015      	b.n	8004a94 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8004a68:	4b0c      	ldr	r3, [pc, #48]	@ (8004a9c <HAL_PWR_EnterSLEEPMode+0x60>)
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d101      	bne.n	8004a78 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8004a74:	f000 f8b2 	bl	8004bdc <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004a78:	4b09      	ldr	r3, [pc, #36]	@ (8004aa0 <HAL_PWR_EnterSLEEPMode+0x64>)
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	4a08      	ldr	r2, [pc, #32]	@ (8004aa0 <HAL_PWR_EnterSLEEPMode+0x64>)
 8004a7e:	f023 0304 	bic.w	r3, r3, #4
 8004a82:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004a84:	78fb      	ldrb	r3, [r7, #3]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d101      	bne.n	8004a8e <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004a8a:	bf30      	wfi
 8004a8c:	e002      	b.n	8004a94 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004a8e:	bf40      	sev
    __WFE();
 8004a90:	bf20      	wfe
    __WFE();
 8004a92:	bf20      	wfe
  }
}
 8004a94:	3708      	adds	r7, #8
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	58000400 	.word	0x58000400
 8004aa0:	e000ed00 	.word	0xe000ed00

08004aa4 <LL_EXTI_ReadFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_22
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 8004aac:	4b04      	ldr	r3, [pc, #16]	@ (8004ac0 <LL_EXTI_ReadFlag_0_31+0x1c>)
 8004aae:	68da      	ldr	r2, [r3, #12]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4013      	ands	r3, r2
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bc80      	pop	{r7}
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	58000800 	.word	0x58000800

08004ac4 <LL_EXTI_ReadFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         @arg @ref LL_EXTI_LINE_45
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_32_63(uint32_t ExtiLine)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(EXTI->PR2, ExtiLine));
 8004acc:	4b04      	ldr	r3, [pc, #16]	@ (8004ae0 <LL_EXTI_ReadFlag_32_63+0x1c>)
 8004ace:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4013      	ands	r3, r2
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bc80      	pop	{r7}
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	58000800 	.word	0x58000800

08004ae4 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_21
  *         @arg @ref LL_EXTI_LINE_22
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8004aec:	4a03      	ldr	r2, [pc, #12]	@ (8004afc <LL_EXTI_ClearFlag_0_31+0x18>)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	60d3      	str	r3, [r2, #12]
}
 8004af2:	bf00      	nop
 8004af4:	370c      	adds	r7, #12
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bc80      	pop	{r7}
 8004afa:	4770      	bx	lr
 8004afc:	58000800 	.word	0x58000800

08004b00 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         @arg @ref LL_EXTI_LINE_45
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8004b08:	4a03      	ldr	r2, [pc, #12]	@ (8004b18 <LL_EXTI_ClearFlag_32_63+0x18>)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8004b0e:	bf00      	nop
 8004b10:	370c      	adds	r7, #12
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bc80      	pop	{r7}
 8004b16:	4770      	bx	lr
 8004b18:	58000800 	.word	0x58000800

08004b1c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004b20:	4b03      	ldr	r3, [pc, #12]	@ (8004b30 <HAL_PWREx_GetVoltageRange+0x14>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bc80      	pop	{r7}
 8004b2e:	4770      	bx	lr
 8004b30:	58000400 	.word	0x58000400

08004b34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b42:	d12f      	bne.n	8004ba4 <HAL_PWREx_ControlVoltageScaling+0x70>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b44:	4b22      	ldr	r3, [pc, #136]	@ (8004bd0 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004b4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b50:	d037      	beq.n	8004bc2 <HAL_PWREx_ControlVoltageScaling+0x8e>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b52:	4b1f      	ldr	r3, [pc, #124]	@ (8004bd0 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004b5a:	4a1d      	ldr	r2, [pc, #116]	@ (8004bd0 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8004b5c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004b60:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8004b62:	4b1c      	ldr	r3, [pc, #112]	@ (8004bd4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2232      	movs	r2, #50	@ 0x32
 8004b68:	fb02 f303 	mul.w	r3, r2, r3
 8004b6c:	4a1a      	ldr	r2, [pc, #104]	@ (8004bd8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b72:	0c9b      	lsrs	r3, r3, #18
 8004b74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b76:	e002      	b.n	8004b7e <HAL_PWREx_ControlVoltageScaling+0x4a>
      {
        wait_loop_index--;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b7e:	4b14      	ldr	r3, [pc, #80]	@ (8004bd0 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b8a:	d102      	bne.n	8004b92 <HAL_PWREx_ControlVoltageScaling+0x5e>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d1f2      	bne.n	8004b78 <HAL_PWREx_ControlVoltageScaling+0x44>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b92:	4b0f      	ldr	r3, [pc, #60]	@ (8004bd0 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b9e:	d110      	bne.n	8004bc2 <HAL_PWREx_ControlVoltageScaling+0x8e>
      {
        return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e00f      	b.n	8004bc4 <HAL_PWREx_ControlVoltageScaling+0x90>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8004bd0 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004bac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bb0:	d007      	beq.n	8004bc2 <HAL_PWREx_ControlVoltageScaling+0x8e>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004bb2:	4b07      	ldr	r3, [pc, #28]	@ (8004bd0 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004bba:	4a05      	ldr	r2, [pc, #20]	@ (8004bd0 <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8004bbc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004bc0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }

  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3714      	adds	r7, #20
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bc80      	pop	{r7}
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	58000400 	.word	0x58000400
 8004bd4:	20000070 	.word	0x20000070
 8004bd8:	431bde83 	.word	0x431bde83

08004bdc <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8004be0:	4b04      	ldr	r3, [pc, #16]	@ (8004bf4 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a03      	ldr	r2, [pc, #12]	@ (8004bf4 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8004be6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004bea:	6013      	str	r3, [r2, #0]
}
 8004bec:	bf00      	nop
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bc80      	pop	{r7}
 8004bf2:	4770      	bx	lr
 8004bf4:	58000400 	.word	0x58000400

08004bf8 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8004bfe:	4b16      	ldr	r3, [pc, #88]	@ (8004c58 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a15      	ldr	r2, [pc, #84]	@ (8004c58 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004c04:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004c08:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8004c0a:	4b14      	ldr	r3, [pc, #80]	@ (8004c5c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2232      	movs	r2, #50	@ 0x32
 8004c10:	fb02 f303 	mul.w	r3, r2, r3
 8004c14:	4a12      	ldr	r2, [pc, #72]	@ (8004c60 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8004c16:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1a:	0c9b      	lsrs	r3, r3, #18
 8004c1c:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004c1e:	e002      	b.n	8004c26 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	3b01      	subs	r3, #1
 8004c24:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004c26:	4b0c      	ldr	r3, [pc, #48]	@ (8004c58 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c32:	d102      	bne.n	8004c3a <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1f2      	bne.n	8004c20 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8004c3a:	4b07      	ldr	r3, [pc, #28]	@ (8004c58 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c46:	d101      	bne.n	8004c4c <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e000      	b.n	8004c4e <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	370c      	adds	r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bc80      	pop	{r7}
 8004c56:	4770      	bx	lr
 8004c58:	58000400 	.word	0x58000400
 8004c5c:	20000070 	.word	0x20000070
 8004c60:	431bde83 	.word	0x431bde83

08004c64 <HAL_PWREx_EnterSTOP0Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP0Mode(uint8_t STOPEntry)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	71fb      	strb	r3, [r7, #7]
  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP0);

#else
  /* Stop 0 mode with Main Regulator */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 8004c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8004cac <HAL_PWREx_EnterSTOP0Mode+0x48>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a0e      	ldr	r2, [pc, #56]	@ (8004cac <HAL_PWREx_EnterSTOP0Mode+0x48>)
 8004c74:	f023 0307 	bic.w	r3, r3, #7
 8004c78:	6013      	str	r3, [r2, #0]

#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8004cb0 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	4a0c      	ldr	r2, [pc, #48]	@ (8004cb0 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8004c80:	f043 0304 	orr.w	r3, r3, #4
 8004c84:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8004c86:	79fb      	ldrb	r3, [r7, #7]
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d101      	bne.n	8004c90 <HAL_PWREx_EnterSTOP0Mode+0x2c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004c8c:	bf30      	wfi
 8004c8e:	e002      	b.n	8004c96 <HAL_PWREx_EnterSTOP0Mode+0x32>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004c90:	bf40      	sev
    __WFE();
 8004c92:	bf20      	wfe
    __WFE();
 8004c94:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004c96:	4b06      	ldr	r3, [pc, #24]	@ (8004cb0 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	4a05      	ldr	r2, [pc, #20]	@ (8004cb0 <HAL_PWREx_EnterSTOP0Mode+0x4c>)
 8004c9c:	f023 0304 	bic.w	r3, r3, #4
 8004ca0:	6113      	str	r3, [r2, #16]
}
 8004ca2:	bf00      	nop
 8004ca4:	370c      	adds	r7, #12
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bc80      	pop	{r7}
 8004caa:	4770      	bx	lr
 8004cac:	58000400 	.word	0x58000400
 8004cb0:	e000ed00 	.word	0xe000ed00

08004cb4 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b083      	sub	sp, #12
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	4603      	mov	r3, r0
 8004cbc:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8004cbe:	4b10      	ldr	r3, [pc, #64]	@ (8004d00 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f023 0307 	bic.w	r3, r3, #7
 8004cc6:	4a0e      	ldr	r2, [pc, #56]	@ (8004d00 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8004cc8:	f043 0302 	orr.w	r3, r3, #2
 8004ccc:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004cce:	4b0d      	ldr	r3, [pc, #52]	@ (8004d04 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	4a0c      	ldr	r2, [pc, #48]	@ (8004d04 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004cd4:	f043 0304 	orr.w	r3, r3, #4
 8004cd8:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8004cda:	79fb      	ldrb	r3, [r7, #7]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d101      	bne.n	8004ce4 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004ce0:	bf30      	wfi
 8004ce2:	e002      	b.n	8004cea <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004ce4:	bf40      	sev
    __WFE();
 8004ce6:	bf20      	wfe
    __WFE();
 8004ce8:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004cea:	4b06      	ldr	r3, [pc, #24]	@ (8004d04 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	4a05      	ldr	r2, [pc, #20]	@ (8004d04 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004cf0:	f023 0304 	bic.w	r3, r3, #4
 8004cf4:	6113      	str	r3, [r2, #16]
}
 8004cf6:	bf00      	nop
 8004cf8:	370c      	adds	r7, #12
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bc80      	pop	{r7}
 8004cfe:	4770      	bx	lr
 8004d00:	58000400 	.word	0x58000400
 8004d04:	e000ed00 	.word	0xe000ed00

08004d08 <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if (__HAL_PWR_PVD_EXTI_GET_FLAG() != 0UL)
 8004d0c:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8004d10:	f7ff fec8 	bl	8004aa4 <LL_EXTI_ReadFlag_0_31>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d005      	beq.n	8004d26 <HAL_PWREx_PVD_PVM_IRQHandler+0x1e>
  {
    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8004d1a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8004d1e:	f7ff fee1 	bl	8004ae4 <LL_EXTI_ClearFlag_0_31>

    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8004d22:	f016 fb69 	bl	801b3f8 <HAL_PWR_PVDCallback>
  }

  if (__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0UL)
 8004d26:	2004      	movs	r0, #4
 8004d28:	f7ff fecc 	bl	8004ac4 <LL_EXTI_ReadFlag_32_63>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d004      	beq.n	8004d3c <HAL_PWREx_PVD_PVM_IRQHandler+0x34>
  {
    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 8004d32:	2004      	movs	r0, #4
 8004d34:	f7ff fee4 	bl	8004b00 <LL_EXTI_ClearFlag_32_63>

    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 8004d38:	f000 f802 	bl	8004d40 <HAL_PWREx_PVM3Callback>
  }
}
 8004d3c:	bf00      	nop
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 8004d40:	b480      	push	{r7}
 8004d42:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 8004d44:	bf00      	nop
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bc80      	pop	{r7}
 8004d4a:	4770      	bx	lr

08004d4c <LL_PWR_IsEnabledBkUpAccess>:
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8004d50:	4b06      	ldr	r3, [pc, #24]	@ (8004d6c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d5c:	d101      	bne.n	8004d62 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e000      	b.n	8004d64 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bc80      	pop	{r7}
 8004d6a:	4770      	bx	lr
 8004d6c:	58000400 	.word	0x58000400

08004d70 <LL_RCC_HSE_EnableTcxo>:
{
 8004d70:	b480      	push	{r7}
 8004d72:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004d74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004d7e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004d82:	6013      	str	r3, [r2, #0]
}
 8004d84:	bf00      	nop
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bc80      	pop	{r7}
 8004d8a:	4770      	bx	lr

08004d8c <LL_RCC_HSE_DisableTcxo>:
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004d90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004d9a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004d9e:	6013      	str	r3, [r2, #0]
}
 8004da0:	bf00      	nop
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bc80      	pop	{r7}
 8004da6:	4770      	bx	lr

08004da8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004da8:	b480      	push	{r7}
 8004daa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004dac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004db6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004dba:	d101      	bne.n	8004dc0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e000      	b.n	8004dc2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bc80      	pop	{r7}
 8004dc8:	4770      	bx	lr

08004dca <LL_RCC_HSE_Enable>:
{
 8004dca:	b480      	push	{r7}
 8004dcc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004dce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004dd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ddc:	6013      	str	r3, [r2, #0]
}
 8004dde:	bf00      	nop
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bc80      	pop	{r7}
 8004de4:	4770      	bx	lr

08004de6 <LL_RCC_HSE_Disable>:
{
 8004de6:	b480      	push	{r7}
 8004de8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004dea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004df4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004df8:	6013      	str	r3, [r2, #0]
}
 8004dfa:	bf00      	nop
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bc80      	pop	{r7}
 8004e00:	4770      	bx	lr

08004e02 <LL_RCC_HSE_IsReady>:
{
 8004e02:	b480      	push	{r7}
 8004e04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004e06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e14:	d101      	bne.n	8004e1a <LL_RCC_HSE_IsReady+0x18>
 8004e16:	2301      	movs	r3, #1
 8004e18:	e000      	b.n	8004e1c <LL_RCC_HSE_IsReady+0x1a>
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bc80      	pop	{r7}
 8004e22:	4770      	bx	lr

08004e24 <LL_RCC_HSI_Enable>:
{
 8004e24:	b480      	push	{r7}
 8004e26:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004e28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e36:	6013      	str	r3, [r2, #0]
}
 8004e38:	bf00      	nop
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bc80      	pop	{r7}
 8004e3e:	4770      	bx	lr

08004e40 <LL_RCC_HSI_Disable>:
{
 8004e40:	b480      	push	{r7}
 8004e42:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004e44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004e4e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e52:	6013      	str	r3, [r2, #0]
}
 8004e54:	bf00      	nop
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bc80      	pop	{r7}
 8004e5a:	4770      	bx	lr

08004e5c <LL_RCC_HSI_IsReady>:
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004e60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e6e:	d101      	bne.n	8004e74 <LL_RCC_HSI_IsReady+0x18>
 8004e70:	2301      	movs	r3, #1
 8004e72:	e000      	b.n	8004e76 <LL_RCC_HSI_IsReady+0x1a>
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bc80      	pop	{r7}
 8004e7c:	4770      	bx	lr

08004e7e <LL_RCC_HSI_SetCalibTrimming>:
{
 8004e7e:	b480      	push	{r7}
 8004e80:	b083      	sub	sp, #12
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004e86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	061b      	lsls	r3, r3, #24
 8004e94:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	604b      	str	r3, [r1, #4]
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bc80      	pop	{r7}
 8004ea4:	4770      	bx	lr

08004ea6 <LL_RCC_LSE_IsReady>:
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004eaa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eb2:	f003 0302 	and.w	r3, r3, #2
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d101      	bne.n	8004ebe <LL_RCC_LSE_IsReady+0x18>
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e000      	b.n	8004ec0 <LL_RCC_LSE_IsReady+0x1a>
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bc80      	pop	{r7}
 8004ec6:	4770      	bx	lr

08004ec8 <LL_RCC_LSI_Enable>:
{
 8004ec8:	b480      	push	{r7}
 8004eca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8004ecc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ed0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ed4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ed8:	f043 0301 	orr.w	r3, r3, #1
 8004edc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004ee0:	bf00      	nop
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bc80      	pop	{r7}
 8004ee6:	4770      	bx	lr

08004ee8 <LL_RCC_LSI_Disable>:
{
 8004ee8:	b480      	push	{r7}
 8004eea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8004eec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ef0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ef4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ef8:	f023 0301 	bic.w	r3, r3, #1
 8004efc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8004f00:	bf00      	nop
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bc80      	pop	{r7}
 8004f06:	4770      	bx	lr

08004f08 <LL_RCC_LSI_IsReady>:
{
 8004f08:	b480      	push	{r7}
 8004f0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8004f0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f14:	f003 0302 	and.w	r3, r3, #2
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d101      	bne.n	8004f20 <LL_RCC_LSI_IsReady+0x18>
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e000      	b.n	8004f22 <LL_RCC_LSI_IsReady+0x1a>
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bc80      	pop	{r7}
 8004f28:	4770      	bx	lr

08004f2a <LL_RCC_MSI_Enable>:
{
 8004f2a:	b480      	push	{r7}
 8004f2c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004f2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f38:	f043 0301 	orr.w	r3, r3, #1
 8004f3c:	6013      	str	r3, [r2, #0]
}
 8004f3e:	bf00      	nop
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bc80      	pop	{r7}
 8004f44:	4770      	bx	lr

08004f46 <LL_RCC_MSI_Disable>:
{
 8004f46:	b480      	push	{r7}
 8004f48:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004f4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f54:	f023 0301 	bic.w	r3, r3, #1
 8004f58:	6013      	str	r3, [r2, #0]
}
 8004f5a:	bf00      	nop
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bc80      	pop	{r7}
 8004f60:	4770      	bx	lr

08004f62 <LL_RCC_MSI_IsReady>:
{
 8004f62:	b480      	push	{r7}
 8004f64:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004f66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0302 	and.w	r3, r3, #2
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d101      	bne.n	8004f78 <LL_RCC_MSI_IsReady+0x16>
 8004f74:	2301      	movs	r3, #1
 8004f76:	e000      	b.n	8004f7a <LL_RCC_MSI_IsReady+0x18>
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bc80      	pop	{r7}
 8004f80:	4770      	bx	lr

08004f82 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8004f82:	b480      	push	{r7}
 8004f84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8004f86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0308 	and.w	r3, r3, #8
 8004f90:	2b08      	cmp	r3, #8
 8004f92:	d101      	bne.n	8004f98 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8004f94:	2301      	movs	r3, #1
 8004f96:	e000      	b.n	8004f9a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bc80      	pop	{r7}
 8004fa0:	4770      	bx	lr

08004fa2 <LL_RCC_MSI_GetRange>:
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8004fa6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bc80      	pop	{r7}
 8004fb6:	4770      	bx	lr

08004fb8 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8004fb8:	b480      	push	{r7}
 8004fba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004fbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004fc4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bc80      	pop	{r7}
 8004fce:	4770      	bx	lr

08004fd0 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004fd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	021b      	lsls	r3, r3, #8
 8004fe6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004fea:	4313      	orrs	r3, r2
 8004fec:	604b      	str	r3, [r1, #4]
}
 8004fee:	bf00      	nop
 8004ff0:	370c      	adds	r7, #12
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bc80      	pop	{r7}
 8004ff6:	4770      	bx	lr

08004ff8 <LL_RCC_SetSysClkSource>:
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005000:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f023 0203 	bic.w	r2, r3, #3
 800500a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4313      	orrs	r3, r2
 8005012:	608b      	str	r3, [r1, #8]
}
 8005014:	bf00      	nop
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	bc80      	pop	{r7}
 800501c:	4770      	bx	lr

0800501e <LL_RCC_GetSysClkSource>:
{
 800501e:	b480      	push	{r7}
 8005020:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005022:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	f003 030c 	and.w	r3, r3, #12
}
 800502c:	4618      	mov	r0, r3
 800502e:	46bd      	mov	sp, r7
 8005030:	bc80      	pop	{r7}
 8005032:	4770      	bx	lr

08005034 <LL_RCC_SetAHBPrescaler>:
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800503c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005046:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4313      	orrs	r3, r2
 800504e:	608b      	str	r3, [r1, #8]
}
 8005050:	bf00      	nop
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	bc80      	pop	{r7}
 8005058:	4770      	bx	lr

0800505a <LL_C2_RCC_SetAHBPrescaler>:
{
 800505a:	b480      	push	{r7}
 800505c:	b083      	sub	sp, #12
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8005062:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005066:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800506a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800506e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4313      	orrs	r3, r2
 8005076:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800507a:	bf00      	nop
 800507c:	370c      	adds	r7, #12
 800507e:	46bd      	mov	sp, r7
 8005080:	bc80      	pop	{r7}
 8005082:	4770      	bx	lr

08005084 <LL_RCC_SetAHB3Prescaler>:
{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800508c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005090:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8005094:	f023 020f 	bic.w	r2, r3, #15
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	091b      	lsrs	r3, r3, #4
 800509c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80050a0:	4313      	orrs	r3, r2
 80050a2:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80050a6:	bf00      	nop
 80050a8:	370c      	adds	r7, #12
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bc80      	pop	{r7}
 80050ae:	4770      	bx	lr

080050b0 <LL_RCC_SetAPB1Prescaler>:
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80050b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80050c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	608b      	str	r3, [r1, #8]
}
 80050cc:	bf00      	nop
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bc80      	pop	{r7}
 80050d4:	4770      	bx	lr

080050d6 <LL_RCC_SetAPB2Prescaler>:
{
 80050d6:	b480      	push	{r7}
 80050d8:	b083      	sub	sp, #12
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80050de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80050e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	608b      	str	r3, [r1, #8]
}
 80050f2:	bf00      	nop
 80050f4:	370c      	adds	r7, #12
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bc80      	pop	{r7}
 80050fa:	4770      	bx	lr

080050fc <LL_RCC_GetAHBPrescaler>:
{
 80050fc:	b480      	push	{r7}
 80050fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8005100:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800510a:	4618      	mov	r0, r3
 800510c:	46bd      	mov	sp, r7
 800510e:	bc80      	pop	{r7}
 8005110:	4770      	bx	lr

08005112 <LL_RCC_GetAHB3Prescaler>:
{
 8005112:	b480      	push	{r7}
 8005114:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005116:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800511a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800511e:	011b      	lsls	r3, r3, #4
 8005120:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005124:	4618      	mov	r0, r3
 8005126:	46bd      	mov	sp, r7
 8005128:	bc80      	pop	{r7}
 800512a:	4770      	bx	lr

0800512c <LL_RCC_GetAPB1Prescaler>:
{
 800512c:	b480      	push	{r7}
 800512e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005130:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800513a:	4618      	mov	r0, r3
 800513c:	46bd      	mov	sp, r7
 800513e:	bc80      	pop	{r7}
 8005140:	4770      	bx	lr

08005142 <LL_RCC_GetAPB2Prescaler>:
{
 8005142:	b480      	push	{r7}
 8005144:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005146:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8005150:	4618      	mov	r0, r3
 8005152:	46bd      	mov	sp, r7
 8005154:	bc80      	pop	{r7}
 8005156:	4770      	bx	lr

08005158 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8005158:	b480      	push	{r7}
 800515a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800515c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005166:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800516a:	6013      	str	r3, [r2, #0]
}
 800516c:	bf00      	nop
 800516e:	46bd      	mov	sp, r7
 8005170:	bc80      	pop	{r7}
 8005172:	4770      	bx	lr

08005174 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8005174:	b480      	push	{r7}
 8005176:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005178:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005182:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005186:	6013      	str	r3, [r2, #0]
}
 8005188:	bf00      	nop
 800518a:	46bd      	mov	sp, r7
 800518c:	bc80      	pop	{r7}
 800518e:	4770      	bx	lr

08005190 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005190:	b480      	push	{r7}
 8005192:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005194:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800519e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80051a2:	d101      	bne.n	80051a8 <LL_RCC_PLL_IsReady+0x18>
 80051a4:	2301      	movs	r3, #1
 80051a6:	e000      	b.n	80051aa <LL_RCC_PLL_IsReady+0x1a>
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bc80      	pop	{r7}
 80051b0:	4770      	bx	lr

080051b2 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80051b2:	b480      	push	{r7}
 80051b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80051b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	0a1b      	lsrs	r3, r3, #8
 80051be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bc80      	pop	{r7}
 80051c8:	4770      	bx	lr

080051ca <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80051ca:	b480      	push	{r7}
 80051cc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80051ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80051d8:	4618      	mov	r0, r3
 80051da:	46bd      	mov	sp, r7
 80051dc:	bc80      	pop	{r7}
 80051de:	4770      	bx	lr

080051e0 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80051e0:	b480      	push	{r7}
 80051e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80051e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bc80      	pop	{r7}
 80051f4:	4770      	bx	lr

080051f6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80051f6:	b480      	push	{r7}
 80051f8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80051fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	f003 0303 	and.w	r3, r3, #3
}
 8005204:	4618      	mov	r0, r3
 8005206:	46bd      	mov	sp, r7
 8005208:	bc80      	pop	{r7}
 800520a:	4770      	bx	lr

0800520c <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800520c:	b480      	push	{r7}
 800520e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005210:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800521a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800521e:	d101      	bne.n	8005224 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8005220:	2301      	movs	r3, #1
 8005222:	e000      	b.n	8005226 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	46bd      	mov	sp, r7
 800522a:	bc80      	pop	{r7}
 800522c:	4770      	bx	lr

0800522e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800522e:	b480      	push	{r7}
 8005230:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005232:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005236:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800523a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800523e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005242:	d101      	bne.n	8005248 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8005244:	2301      	movs	r3, #1
 8005246:	e000      	b.n	800524a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	46bd      	mov	sp, r7
 800524e:	bc80      	pop	{r7}
 8005250:	4770      	bx	lr

08005252 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8005252:	b480      	push	{r7}
 8005254:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005256:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800525a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800525e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005262:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005266:	d101      	bne.n	800526c <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8005268:	2301      	movs	r3, #1
 800526a:	e000      	b.n	800526e <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	46bd      	mov	sp, r7
 8005272:	bc80      	pop	{r7}
 8005274:	4770      	bx	lr

08005276 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8005276:	b480      	push	{r7}
 8005278:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800527a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005284:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005288:	d101      	bne.n	800528e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800528a:	2301      	movs	r3, #1
 800528c:	e000      	b.n	8005290 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	46bd      	mov	sp, r7
 8005294:	bc80      	pop	{r7}
 8005296:	4770      	bx	lr

08005298 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8005298:	b480      	push	{r7}
 800529a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800529c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80052a6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80052aa:	d101      	bne.n	80052b0 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80052ac:	2301      	movs	r3, #1
 80052ae:	e000      	b.n	80052b2 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bc80      	pop	{r7}
 80052b8:	4770      	bx	lr
	...

080052bc <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b088      	sub	sp, #32
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d101      	bne.n	80052ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e36f      	b.n	80059ae <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052ce:	f7ff fea6 	bl	800501e <LL_RCC_GetSysClkSource>
 80052d2:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052d4:	f7ff ff8f 	bl	80051f6 <LL_RCC_PLL_GetMainSource>
 80052d8:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 0320 	and.w	r3, r3, #32
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	f000 80c4 	beq.w	8005470 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d005      	beq.n	80052fa <HAL_RCC_OscConfig+0x3e>
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	2b0c      	cmp	r3, #12
 80052f2:	d176      	bne.n	80053e2 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d173      	bne.n	80053e2 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e353      	b.n	80059ae <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800530a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0308 	and.w	r3, r3, #8
 8005314:	2b00      	cmp	r3, #0
 8005316:	d005      	beq.n	8005324 <HAL_RCC_OscConfig+0x68>
 8005318:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005322:	e006      	b.n	8005332 <HAL_RCC_OscConfig+0x76>
 8005324:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005328:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800532c:	091b      	lsrs	r3, r3, #4
 800532e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005332:	4293      	cmp	r3, r2
 8005334:	d222      	bcs.n	800537c <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800533a:	4618      	mov	r0, r3
 800533c:	f000 fd5a 	bl	8005df4 <RCC_SetFlashLatencyFromMSIRange>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d001      	beq.n	800534a <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e331      	b.n	80059ae <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800534a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005354:	f043 0308 	orr.w	r3, r3, #8
 8005358:	6013      	str	r3, [r2, #0]
 800535a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005368:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800536c:	4313      	orrs	r3, r2
 800536e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005374:	4618      	mov	r0, r3
 8005376:	f7ff fe2b 	bl	8004fd0 <LL_RCC_MSI_SetCalibTrimming>
 800537a:	e021      	b.n	80053c0 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800537c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005386:	f043 0308 	orr.w	r3, r3, #8
 800538a:	6013      	str	r3, [r2, #0]
 800538c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800539a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800539e:	4313      	orrs	r3, r2
 80053a0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a6:	4618      	mov	r0, r3
 80053a8:	f7ff fe12 	bl	8004fd0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053b0:	4618      	mov	r0, r3
 80053b2:	f000 fd1f 	bl	8005df4 <RCC_SetFlashLatencyFromMSIRange>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d001      	beq.n	80053c0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e2f6      	b.n	80059ae <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80053c0:	f000 fce0 	bl	8005d84 <HAL_RCC_GetHCLKFreq>
 80053c4:	4603      	mov	r3, r0
 80053c6:	4aa7      	ldr	r2, [pc, #668]	@ (8005664 <HAL_RCC_OscConfig+0x3a8>)
 80053c8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 80053ca:	4ba7      	ldr	r3, [pc, #668]	@ (8005668 <HAL_RCC_OscConfig+0x3ac>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f7fc f98a 	bl	80016e8 <HAL_InitTick>
 80053d4:	4603      	mov	r3, r0
 80053d6:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80053d8:	7cfb      	ldrb	r3, [r7, #19]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d047      	beq.n	800546e <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 80053de:	7cfb      	ldrb	r3, [r7, #19]
 80053e0:	e2e5      	b.n	80059ae <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a1b      	ldr	r3, [r3, #32]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d02c      	beq.n	8005444 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80053ea:	f7ff fd9e 	bl	8004f2a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80053ee:	f7fc f985 	bl	80016fc <HAL_GetTick>
 80053f2:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 80053f4:	e008      	b.n	8005408 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80053f6:	f7fc f981 	bl	80016fc <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	2b02      	cmp	r3, #2
 8005402:	d901      	bls.n	8005408 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e2d2      	b.n	80059ae <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005408:	f7ff fdab 	bl	8004f62 <LL_RCC_MSI_IsReady>
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d0f1      	beq.n	80053f6 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005412:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800541c:	f043 0308 	orr.w	r3, r3, #8
 8005420:	6013      	str	r3, [r2, #0]
 8005422:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005430:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005434:	4313      	orrs	r3, r2
 8005436:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800543c:	4618      	mov	r0, r3
 800543e:	f7ff fdc7 	bl	8004fd0 <LL_RCC_MSI_SetCalibTrimming>
 8005442:	e015      	b.n	8005470 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005444:	f7ff fd7f 	bl	8004f46 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005448:	f7fc f958 	bl	80016fc <HAL_GetTick>
 800544c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800544e:	e008      	b.n	8005462 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005450:	f7fc f954 	bl	80016fc <HAL_GetTick>
 8005454:	4602      	mov	r2, r0
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	2b02      	cmp	r3, #2
 800545c:	d901      	bls.n	8005462 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800545e:	2303      	movs	r3, #3
 8005460:	e2a5      	b.n	80059ae <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8005462:	f7ff fd7e 	bl	8004f62 <LL_RCC_MSI_IsReady>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1f1      	bne.n	8005450 <HAL_RCC_OscConfig+0x194>
 800546c:	e000      	b.n	8005470 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800546e:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0301 	and.w	r3, r3, #1
 8005478:	2b00      	cmp	r3, #0
 800547a:	d058      	beq.n	800552e <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800547c:	69fb      	ldr	r3, [r7, #28]
 800547e:	2b08      	cmp	r3, #8
 8005480:	d005      	beq.n	800548e <HAL_RCC_OscConfig+0x1d2>
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	2b0c      	cmp	r3, #12
 8005486:	d108      	bne.n	800549a <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	2b03      	cmp	r3, #3
 800548c:	d105      	bne.n	800549a <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d14b      	bne.n	800552e <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e289      	b.n	80059ae <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800549a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80054ac:	4313      	orrs	r3, r2
 80054ae:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054b8:	d102      	bne.n	80054c0 <HAL_RCC_OscConfig+0x204>
 80054ba:	f7ff fc86 	bl	8004dca <LL_RCC_HSE_Enable>
 80054be:	e00d      	b.n	80054dc <HAL_RCC_OscConfig+0x220>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 80054c8:	d104      	bne.n	80054d4 <HAL_RCC_OscConfig+0x218>
 80054ca:	f7ff fc51 	bl	8004d70 <LL_RCC_HSE_EnableTcxo>
 80054ce:	f7ff fc7c 	bl	8004dca <LL_RCC_HSE_Enable>
 80054d2:	e003      	b.n	80054dc <HAL_RCC_OscConfig+0x220>
 80054d4:	f7ff fc87 	bl	8004de6 <LL_RCC_HSE_Disable>
 80054d8:	f7ff fc58 	bl	8004d8c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d012      	beq.n	800550a <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054e4:	f7fc f90a 	bl	80016fc <HAL_GetTick>
 80054e8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80054ea:	e008      	b.n	80054fe <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054ec:	f7fc f906 	bl	80016fc <HAL_GetTick>
 80054f0:	4602      	mov	r2, r0
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	2b64      	cmp	r3, #100	@ 0x64
 80054f8:	d901      	bls.n	80054fe <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e257      	b.n	80059ae <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 80054fe:	f7ff fc80 	bl	8004e02 <LL_RCC_HSE_IsReady>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d0f1      	beq.n	80054ec <HAL_RCC_OscConfig+0x230>
 8005508:	e011      	b.n	800552e <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800550a:	f7fc f8f7 	bl	80016fc <HAL_GetTick>
 800550e:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005510:	e008      	b.n	8005524 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005512:	f7fc f8f3 	bl	80016fc <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	2b64      	cmp	r3, #100	@ 0x64
 800551e:	d901      	bls.n	8005524 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e244      	b.n	80059ae <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005524:	f7ff fc6d 	bl	8004e02 <LL_RCC_HSE_IsReady>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1f1      	bne.n	8005512 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0302 	and.w	r3, r3, #2
 8005536:	2b00      	cmp	r3, #0
 8005538:	d046      	beq.n	80055c8 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	2b04      	cmp	r3, #4
 800553e:	d005      	beq.n	800554c <HAL_RCC_OscConfig+0x290>
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	2b0c      	cmp	r3, #12
 8005544:	d10e      	bne.n	8005564 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	2b02      	cmp	r3, #2
 800554a:	d10b      	bne.n	8005564 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d101      	bne.n	8005558 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e22a      	b.n	80059ae <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	695b      	ldr	r3, [r3, #20]
 800555c:	4618      	mov	r0, r3
 800555e:	f7ff fc8e 	bl	8004e7e <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005562:	e031      	b.n	80055c8 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d019      	beq.n	80055a0 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800556c:	f7ff fc5a 	bl	8004e24 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005570:	f7fc f8c4 	bl	80016fc <HAL_GetTick>
 8005574:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005576:	e008      	b.n	800558a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005578:	f7fc f8c0 	bl	80016fc <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	2b02      	cmp	r3, #2
 8005584:	d901      	bls.n	800558a <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e211      	b.n	80059ae <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 800558a:	f7ff fc67 	bl	8004e5c <LL_RCC_HSI_IsReady>
 800558e:	4603      	mov	r3, r0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d0f1      	beq.n	8005578 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	695b      	ldr	r3, [r3, #20]
 8005598:	4618      	mov	r0, r3
 800559a:	f7ff fc70 	bl	8004e7e <LL_RCC_HSI_SetCalibTrimming>
 800559e:	e013      	b.n	80055c8 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055a0:	f7ff fc4e 	bl	8004e40 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a4:	f7fc f8aa 	bl	80016fc <HAL_GetTick>
 80055a8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80055aa:	e008      	b.n	80055be <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055ac:	f7fc f8a6 	bl	80016fc <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d901      	bls.n	80055be <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e1f7      	b.n	80059ae <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 80055be:	f7ff fc4d 	bl	8004e5c <LL_RCC_HSI_IsReady>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d1f1      	bne.n	80055ac <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0308 	and.w	r3, r3, #8
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d06e      	beq.n	80056b2 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	699b      	ldr	r3, [r3, #24]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d056      	beq.n	800568a <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 80055dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055e4:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	69da      	ldr	r2, [r3, #28]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f003 0310 	and.w	r3, r3, #16
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d031      	beq.n	8005658 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f003 0302 	and.w	r3, r3, #2
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d006      	beq.n	800560c <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005604:	2b00      	cmp	r3, #0
 8005606:	d101      	bne.n	800560c <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e1d0      	b.n	80059ae <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f003 0301 	and.w	r3, r3, #1
 8005612:	2b00      	cmp	r3, #0
 8005614:	d013      	beq.n	800563e <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8005616:	f7ff fc67 	bl	8004ee8 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800561a:	f7fc f86f 	bl	80016fc <HAL_GetTick>
 800561e:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8005620:	e008      	b.n	8005634 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005622:	f7fc f86b 	bl	80016fc <HAL_GetTick>
 8005626:	4602      	mov	r2, r0
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	2b11      	cmp	r3, #17
 800562e:	d901      	bls.n	8005634 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e1bc      	b.n	80059ae <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8005634:	f7ff fc68 	bl	8004f08 <LL_RCC_LSI_IsReady>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1f1      	bne.n	8005622 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800563e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005642:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005646:	f023 0210 	bic.w	r2, r3, #16
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	69db      	ldr	r3, [r3, #28]
 800564e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005652:	4313      	orrs	r3, r2
 8005654:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005658:	f7ff fc36 	bl	8004ec8 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800565c:	f7fc f84e 	bl	80016fc <HAL_GetTick>
 8005660:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8005662:	e00c      	b.n	800567e <HAL_RCC_OscConfig+0x3c2>
 8005664:	20000070 	.word	0x20000070
 8005668:	20000074 	.word	0x20000074
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800566c:	f7fc f846 	bl	80016fc <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	2b11      	cmp	r3, #17
 8005678:	d901      	bls.n	800567e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e197      	b.n	80059ae <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800567e:	f7ff fc43 	bl	8004f08 <LL_RCC_LSI_IsReady>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d0f1      	beq.n	800566c <HAL_RCC_OscConfig+0x3b0>
 8005688:	e013      	b.n	80056b2 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800568a:	f7ff fc2d 	bl	8004ee8 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800568e:	f7fc f835 	bl	80016fc <HAL_GetTick>
 8005692:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8005694:	e008      	b.n	80056a8 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005696:	f7fc f831 	bl	80016fc <HAL_GetTick>
 800569a:	4602      	mov	r2, r0
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	2b11      	cmp	r3, #17
 80056a2:	d901      	bls.n	80056a8 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e182      	b.n	80059ae <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 80056a8:	f7ff fc2e 	bl	8004f08 <LL_RCC_LSI_IsReady>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1f1      	bne.n	8005696 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 0304 	and.w	r3, r3, #4
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	f000 80d8 	beq.w	8005870 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80056c0:	f7ff fb44 	bl	8004d4c <LL_PWR_IsEnabledBkUpAccess>
 80056c4:	4603      	mov	r3, r0
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d113      	bne.n	80056f2 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80056ca:	f7ff f95d 	bl	8004988 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056ce:	f7fc f815 	bl	80016fc <HAL_GetTick>
 80056d2:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80056d4:	e008      	b.n	80056e8 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056d6:	f7fc f811 	bl	80016fc <HAL_GetTick>
 80056da:	4602      	mov	r2, r0
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d901      	bls.n	80056e8 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	e162      	b.n	80059ae <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80056e8:	f7ff fb30 	bl	8004d4c <LL_PWR_IsEnabledBkUpAccess>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d0f1      	beq.n	80056d6 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d07b      	beq.n	80057f2 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	2b85      	cmp	r3, #133	@ 0x85
 8005700:	d003      	beq.n	800570a <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	2b05      	cmp	r3, #5
 8005708:	d109      	bne.n	800571e <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800570a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800570e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005712:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005716:	f043 0304 	orr.w	r3, r3, #4
 800571a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800571e:	f7fb ffed 	bl	80016fc <HAL_GetTick>
 8005722:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005724:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005728:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800572c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005730:	f043 0301 	orr.w	r3, r3, #1
 8005734:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8005738:	e00a      	b.n	8005750 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800573a:	f7fb ffdf 	bl	80016fc <HAL_GetTick>
 800573e:	4602      	mov	r2, r0
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005748:	4293      	cmp	r3, r2
 800574a:	d901      	bls.n	8005750 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 800574c:	2303      	movs	r3, #3
 800574e:	e12e      	b.n	80059ae <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8005750:	f7ff fba9 	bl	8004ea6 <LL_RCC_LSE_IsReady>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d0ef      	beq.n	800573a <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	2b81      	cmp	r3, #129	@ 0x81
 8005760:	d003      	beq.n	800576a <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	2b85      	cmp	r3, #133	@ 0x85
 8005768:	d121      	bne.n	80057ae <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800576a:	f7fb ffc7 	bl	80016fc <HAL_GetTick>
 800576e:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005770:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005774:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005778:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800577c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005780:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005784:	e00a      	b.n	800579c <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005786:	f7fb ffb9 	bl	80016fc <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005794:	4293      	cmp	r3, r2
 8005796:	d901      	bls.n	800579c <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8005798:	2303      	movs	r3, #3
 800579a:	e108      	b.n	80059ae <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800579c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d0ec      	beq.n	8005786 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80057ac:	e060      	b.n	8005870 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057ae:	f7fb ffa5 	bl	80016fc <HAL_GetTick>
 80057b2:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80057b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057bc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80057c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80057c8:	e00a      	b.n	80057e0 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057ca:	f7fb ff97 	bl	80016fc <HAL_GetTick>
 80057ce:	4602      	mov	r2, r0
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057d8:	4293      	cmp	r3, r2
 80057da:	d901      	bls.n	80057e0 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80057dc:	2303      	movs	r3, #3
 80057de:	e0e6      	b.n	80059ae <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80057e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d1ec      	bne.n	80057ca <HAL_RCC_OscConfig+0x50e>
 80057f0:	e03e      	b.n	8005870 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057f2:	f7fb ff83 	bl	80016fc <HAL_GetTick>
 80057f6:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80057f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80057fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005800:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005804:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005808:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800580c:	e00a      	b.n	8005824 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800580e:	f7fb ff75 	bl	80016fc <HAL_GetTick>
 8005812:	4602      	mov	r2, r0
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	f241 3288 	movw	r2, #5000	@ 0x1388
 800581c:	4293      	cmp	r3, r2
 800581e:	d901      	bls.n	8005824 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e0c4      	b.n	80059ae <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005824:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005828:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800582c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005830:	2b00      	cmp	r3, #0
 8005832:	d1ec      	bne.n	800580e <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005834:	f7fb ff62 	bl	80016fc <HAL_GetTick>
 8005838:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800583a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800583e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005842:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005846:	f023 0301 	bic.w	r3, r3, #1
 800584a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800584e:	e00a      	b.n	8005866 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005850:	f7fb ff54 	bl	80016fc <HAL_GetTick>
 8005854:	4602      	mov	r2, r0
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800585e:	4293      	cmp	r3, r2
 8005860:	d901      	bls.n	8005866 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e0a3      	b.n	80059ae <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005866:	f7ff fb1e 	bl	8004ea6 <LL_RCC_LSE_IsReady>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d1ef      	bne.n	8005850 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005874:	2b00      	cmp	r3, #0
 8005876:	f000 8099 	beq.w	80059ac <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	2b0c      	cmp	r3, #12
 800587e:	d06c      	beq.n	800595a <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005884:	2b02      	cmp	r3, #2
 8005886:	d14b      	bne.n	8005920 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005888:	f7ff fc74 	bl	8005174 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800588c:	f7fb ff36 	bl	80016fc <HAL_GetTick>
 8005890:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005892:	e008      	b.n	80058a6 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005894:	f7fb ff32 	bl	80016fc <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	2b0a      	cmp	r3, #10
 80058a0:	d901      	bls.n	80058a6 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e083      	b.n	80059ae <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80058a6:	f7ff fc73 	bl	8005190 <LL_RCC_PLL_IsReady>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d1f1      	bne.n	8005894 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80058b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058b4:	68da      	ldr	r2, [r3, #12]
 80058b6:	4b40      	ldr	r3, [pc, #256]	@ (80059b8 <HAL_RCC_OscConfig+0x6fc>)
 80058b8:	4013      	ands	r3, r2
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80058c2:	4311      	orrs	r1, r2
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80058c8:	0212      	lsls	r2, r2, #8
 80058ca:	4311      	orrs	r1, r2
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80058d0:	4311      	orrs	r1, r2
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80058d6:	4311      	orrs	r1, r2
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80058dc:	430a      	orrs	r2, r1
 80058de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80058e2:	4313      	orrs	r3, r2
 80058e4:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058e6:	f7ff fc37 	bl	8005158 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80058ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80058f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058f8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058fa:	f7fb feff 	bl	80016fc <HAL_GetTick>
 80058fe:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8005900:	e008      	b.n	8005914 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005902:	f7fb fefb 	bl	80016fc <HAL_GetTick>
 8005906:	4602      	mov	r2, r0
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	2b0a      	cmp	r3, #10
 800590e:	d901      	bls.n	8005914 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8005910:	2303      	movs	r3, #3
 8005912:	e04c      	b.n	80059ae <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8005914:	f7ff fc3c 	bl	8005190 <LL_RCC_PLL_IsReady>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d0f1      	beq.n	8005902 <HAL_RCC_OscConfig+0x646>
 800591e:	e045      	b.n	80059ac <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005920:	f7ff fc28 	bl	8005174 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005924:	f7fb feea 	bl	80016fc <HAL_GetTick>
 8005928:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800592a:	e008      	b.n	800593e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800592c:	f7fb fee6 	bl	80016fc <HAL_GetTick>
 8005930:	4602      	mov	r2, r0
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	2b0a      	cmp	r3, #10
 8005938:	d901      	bls.n	800593e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e037      	b.n	80059ae <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800593e:	f7ff fc27 	bl	8005190 <LL_RCC_PLL_IsReady>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d1f1      	bne.n	800592c <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005948:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800594c:	68da      	ldr	r2, [r3, #12]
 800594e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005952:	4b1a      	ldr	r3, [pc, #104]	@ (80059bc <HAL_RCC_OscConfig+0x700>)
 8005954:	4013      	ands	r3, r2
 8005956:	60cb      	str	r3, [r1, #12]
 8005958:	e028      	b.n	80059ac <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800595e:	2b01      	cmp	r3, #1
 8005960:	d101      	bne.n	8005966 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e023      	b.n	80059ae <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005966:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	f003 0203 	and.w	r2, r3, #3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005978:	429a      	cmp	r2, r3
 800597a:	d115      	bne.n	80059a8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005986:	429a      	cmp	r2, r3
 8005988:	d10e      	bne.n	80059a8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005994:	021b      	lsls	r3, r3, #8
 8005996:	429a      	cmp	r2, r3
 8005998:	d106      	bne.n	80059a8 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800599a:	69bb      	ldr	r3, [r7, #24]
 800599c:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d001      	beq.n	80059ac <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e000      	b.n	80059ae <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 80059ac:	2300      	movs	r3, #0
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3720      	adds	r7, #32
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	11c1808c 	.word	0x11c1808c
 80059bc:	eefefffc 	.word	0xeefefffc

080059c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b084      	sub	sp, #16
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d101      	bne.n	80059d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e12c      	b.n	8005c2e <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80059d4:	4b98      	ldr	r3, [pc, #608]	@ (8005c38 <HAL_RCC_ClockConfig+0x278>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 0307 	and.w	r3, r3, #7
 80059dc:	683a      	ldr	r2, [r7, #0]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d91b      	bls.n	8005a1a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059e2:	4b95      	ldr	r3, [pc, #596]	@ (8005c38 <HAL_RCC_ClockConfig+0x278>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f023 0207 	bic.w	r2, r3, #7
 80059ea:	4993      	ldr	r1, [pc, #588]	@ (8005c38 <HAL_RCC_ClockConfig+0x278>)
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059f2:	f7fb fe83 	bl	80016fc <HAL_GetTick>
 80059f6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059f8:	e008      	b.n	8005a0c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80059fa:	f7fb fe7f 	bl	80016fc <HAL_GetTick>
 80059fe:	4602      	mov	r2, r0
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d901      	bls.n	8005a0c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e110      	b.n	8005c2e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a0c:	4b8a      	ldr	r3, [pc, #552]	@ (8005c38 <HAL_RCC_ClockConfig+0x278>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 0307 	and.w	r3, r3, #7
 8005a14:	683a      	ldr	r2, [r7, #0]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d1ef      	bne.n	80059fa <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 0302 	and.w	r3, r3, #2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d016      	beq.n	8005a54 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f7ff fb02 	bl	8005034 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005a30:	f7fb fe64 	bl	80016fc <HAL_GetTick>
 8005a34:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005a36:	e008      	b.n	8005a4a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005a38:	f7fb fe60 	bl	80016fc <HAL_GetTick>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d901      	bls.n	8005a4a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005a46:	2303      	movs	r3, #3
 8005a48:	e0f1      	b.n	8005c2e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005a4a:	f7ff fbdf 	bl	800520c <LL_RCC_IsActiveFlag_HPRE>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d0f1      	beq.n	8005a38 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 0320 	and.w	r3, r3, #32
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d016      	beq.n	8005a8e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	695b      	ldr	r3, [r3, #20]
 8005a64:	4618      	mov	r0, r3
 8005a66:	f7ff faf8 	bl	800505a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005a6a:	f7fb fe47 	bl	80016fc <HAL_GetTick>
 8005a6e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005a70:	e008      	b.n	8005a84 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005a72:	f7fb fe43 	bl	80016fc <HAL_GetTick>
 8005a76:	4602      	mov	r2, r0
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	d901      	bls.n	8005a84 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e0d4      	b.n	8005c2e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005a84:	f7ff fbd3 	bl	800522e <LL_RCC_IsActiveFlag_C2HPRE>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d0f1      	beq.n	8005a72 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d016      	beq.n	8005ac8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	699b      	ldr	r3, [r3, #24]
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7ff faf0 	bl	8005084 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005aa4:	f7fb fe2a 	bl	80016fc <HAL_GetTick>
 8005aa8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005aaa:	e008      	b.n	8005abe <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005aac:	f7fb fe26 	bl	80016fc <HAL_GetTick>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	1ad3      	subs	r3, r2, r3
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d901      	bls.n	8005abe <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e0b7      	b.n	8005c2e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005abe:	f7ff fbc8 	bl	8005252 <LL_RCC_IsActiveFlag_SHDHPRE>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d0f1      	beq.n	8005aac <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f003 0304 	and.w	r3, r3, #4
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d016      	beq.n	8005b02 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f7ff fae9 	bl	80050b0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005ade:	f7fb fe0d 	bl	80016fc <HAL_GetTick>
 8005ae2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005ae4:	e008      	b.n	8005af8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005ae6:	f7fb fe09 	bl	80016fc <HAL_GetTick>
 8005aea:	4602      	mov	r2, r0
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	d901      	bls.n	8005af8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	e09a      	b.n	8005c2e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005af8:	f7ff fbbd 	bl	8005276 <LL_RCC_IsActiveFlag_PPRE1>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d0f1      	beq.n	8005ae6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0308 	and.w	r3, r3, #8
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d017      	beq.n	8005b3e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	00db      	lsls	r3, r3, #3
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7ff fade 	bl	80050d6 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005b1a:	f7fb fdef 	bl	80016fc <HAL_GetTick>
 8005b1e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005b20:	e008      	b.n	8005b34 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005b22:	f7fb fdeb 	bl	80016fc <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d901      	bls.n	8005b34 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e07c      	b.n	8005c2e <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005b34:	f7ff fbb0 	bl	8005298 <LL_RCC_IsActiveFlag_PPRE2>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d0f1      	beq.n	8005b22 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0301 	and.w	r3, r3, #1
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d043      	beq.n	8005bd2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d106      	bne.n	8005b60 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005b52:	f7ff f956 	bl	8004e02 <LL_RCC_HSE_IsReady>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d11e      	bne.n	8005b9a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e066      	b.n	8005c2e <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	2b03      	cmp	r3, #3
 8005b66:	d106      	bne.n	8005b76 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005b68:	f7ff fb12 	bl	8005190 <LL_RCC_PLL_IsReady>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d113      	bne.n	8005b9a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e05b      	b.n	8005c2e <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d106      	bne.n	8005b8c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005b7e:	f7ff f9f0 	bl	8004f62 <LL_RCC_MSI_IsReady>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d108      	bne.n	8005b9a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e050      	b.n	8005c2e <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005b8c:	f7ff f966 	bl	8004e5c <LL_RCC_HSI_IsReady>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d101      	bne.n	8005b9a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e049      	b.n	8005c2e <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f7ff fa2a 	bl	8004ff8 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ba4:	f7fb fdaa 	bl	80016fc <HAL_GetTick>
 8005ba8:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005baa:	e00a      	b.n	8005bc2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bac:	f7fb fda6 	bl	80016fc <HAL_GetTick>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d901      	bls.n	8005bc2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e035      	b.n	8005c2e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bc2:	f7ff fa2c 	bl	800501e <LL_RCC_GetSysClkSource>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d1ec      	bne.n	8005bac <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005bd2:	4b19      	ldr	r3, [pc, #100]	@ (8005c38 <HAL_RCC_ClockConfig+0x278>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 0307 	and.w	r3, r3, #7
 8005bda:	683a      	ldr	r2, [r7, #0]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d21b      	bcs.n	8005c18 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005be0:	4b15      	ldr	r3, [pc, #84]	@ (8005c38 <HAL_RCC_ClockConfig+0x278>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f023 0207 	bic.w	r2, r3, #7
 8005be8:	4913      	ldr	r1, [pc, #76]	@ (8005c38 <HAL_RCC_ClockConfig+0x278>)
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005bf0:	f7fb fd84 	bl	80016fc <HAL_GetTick>
 8005bf4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bf6:	e008      	b.n	8005c0a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005bf8:	f7fb fd80 	bl	80016fc <HAL_GetTick>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	d901      	bls.n	8005c0a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8005c06:	2303      	movs	r3, #3
 8005c08:	e011      	b.n	8005c2e <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8005c38 <HAL_RCC_ClockConfig+0x278>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0307 	and.w	r3, r3, #7
 8005c12:	683a      	ldr	r2, [r7, #0]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d1ef      	bne.n	8005bf8 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005c18:	f000 f8b4 	bl	8005d84 <HAL_RCC_GetHCLKFreq>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	4a07      	ldr	r2, [pc, #28]	@ (8005c3c <HAL_RCC_ClockConfig+0x27c>)
 8005c20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8005c22:	4b07      	ldr	r3, [pc, #28]	@ (8005c40 <HAL_RCC_ClockConfig+0x280>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4618      	mov	r0, r3
 8005c28:	f7fb fd5e 	bl	80016e8 <HAL_InitTick>
 8005c2c:	4603      	mov	r3, r0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3710      	adds	r7, #16
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	58004000 	.word	0x58004000
 8005c3c:	20000070 	.word	0x20000070
 8005c40:	20000074 	.word	0x20000074

08005c44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c44:	b590      	push	{r4, r7, lr}
 8005c46:	b087      	sub	sp, #28
 8005c48:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c52:	f7ff f9e4 	bl	800501e <LL_RCC_GetSysClkSource>
 8005c56:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c58:	f7ff facd 	bl	80051f6 <LL_RCC_PLL_GetMainSource>
 8005c5c:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d005      	beq.n	8005c70 <HAL_RCC_GetSysClockFreq+0x2c>
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	2b0c      	cmp	r3, #12
 8005c68:	d139      	bne.n	8005cde <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d136      	bne.n	8005cde <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005c70:	f7ff f987 	bl	8004f82 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d115      	bne.n	8005ca6 <HAL_RCC_GetSysClockFreq+0x62>
 8005c7a:	f7ff f982 	bl	8004f82 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d106      	bne.n	8005c92 <HAL_RCC_GetSysClockFreq+0x4e>
 8005c84:	f7ff f98d 	bl	8004fa2 <LL_RCC_MSI_GetRange>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	0a1b      	lsrs	r3, r3, #8
 8005c8c:	f003 030f 	and.w	r3, r3, #15
 8005c90:	e005      	b.n	8005c9e <HAL_RCC_GetSysClockFreq+0x5a>
 8005c92:	f7ff f991 	bl	8004fb8 <LL_RCC_MSI_GetRangeAfterStandby>
 8005c96:	4603      	mov	r3, r0
 8005c98:	0a1b      	lsrs	r3, r3, #8
 8005c9a:	f003 030f 	and.w	r3, r3, #15
 8005c9e:	4a36      	ldr	r2, [pc, #216]	@ (8005d78 <HAL_RCC_GetSysClockFreq+0x134>)
 8005ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ca4:	e014      	b.n	8005cd0 <HAL_RCC_GetSysClockFreq+0x8c>
 8005ca6:	f7ff f96c 	bl	8004f82 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d106      	bne.n	8005cbe <HAL_RCC_GetSysClockFreq+0x7a>
 8005cb0:	f7ff f977 	bl	8004fa2 <LL_RCC_MSI_GetRange>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	091b      	lsrs	r3, r3, #4
 8005cb8:	f003 030f 	and.w	r3, r3, #15
 8005cbc:	e005      	b.n	8005cca <HAL_RCC_GetSysClockFreq+0x86>
 8005cbe:	f7ff f97b 	bl	8004fb8 <LL_RCC_MSI_GetRangeAfterStandby>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	091b      	lsrs	r3, r3, #4
 8005cc6:	f003 030f 	and.w	r3, r3, #15
 8005cca:	4a2b      	ldr	r2, [pc, #172]	@ (8005d78 <HAL_RCC_GetSysClockFreq+0x134>)
 8005ccc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cd0:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d115      	bne.n	8005d04 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005cdc:	e012      	b.n	8005d04 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	2b04      	cmp	r3, #4
 8005ce2:	d102      	bne.n	8005cea <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005ce4:	4b25      	ldr	r3, [pc, #148]	@ (8005d7c <HAL_RCC_GetSysClockFreq+0x138>)
 8005ce6:	617b      	str	r3, [r7, #20]
 8005ce8:	e00c      	b.n	8005d04 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	2b08      	cmp	r3, #8
 8005cee:	d109      	bne.n	8005d04 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005cf0:	f7ff f85a 	bl	8004da8 <LL_RCC_HSE_IsEnabledDiv2>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b01      	cmp	r3, #1
 8005cf8:	d102      	bne.n	8005d00 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005cfa:	4b20      	ldr	r3, [pc, #128]	@ (8005d7c <HAL_RCC_GetSysClockFreq+0x138>)
 8005cfc:	617b      	str	r3, [r7, #20]
 8005cfe:	e001      	b.n	8005d04 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005d00:	4b1f      	ldr	r3, [pc, #124]	@ (8005d80 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005d02:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d04:	f7ff f98b 	bl	800501e <LL_RCC_GetSysClkSource>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b0c      	cmp	r3, #12
 8005d0c:	d12f      	bne.n	8005d6e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005d0e:	f7ff fa72 	bl	80051f6 <LL_RCC_PLL_GetMainSource>
 8005d12:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d003      	beq.n	8005d22 <HAL_RCC_GetSysClockFreq+0xde>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2b03      	cmp	r3, #3
 8005d1e:	d003      	beq.n	8005d28 <HAL_RCC_GetSysClockFreq+0xe4>
 8005d20:	e00d      	b.n	8005d3e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005d22:	4b16      	ldr	r3, [pc, #88]	@ (8005d7c <HAL_RCC_GetSysClockFreq+0x138>)
 8005d24:	60fb      	str	r3, [r7, #12]
        break;
 8005d26:	e00d      	b.n	8005d44 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005d28:	f7ff f83e 	bl	8004da8 <LL_RCC_HSE_IsEnabledDiv2>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b01      	cmp	r3, #1
 8005d30:	d102      	bne.n	8005d38 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005d32:	4b12      	ldr	r3, [pc, #72]	@ (8005d7c <HAL_RCC_GetSysClockFreq+0x138>)
 8005d34:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005d36:	e005      	b.n	8005d44 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8005d38:	4b11      	ldr	r3, [pc, #68]	@ (8005d80 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005d3a:	60fb      	str	r3, [r7, #12]
        break;
 8005d3c:	e002      	b.n	8005d44 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	60fb      	str	r3, [r7, #12]
        break;
 8005d42:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005d44:	f7ff fa35 	bl	80051b2 <LL_RCC_PLL_GetN>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	fb03 f402 	mul.w	r4, r3, r2
 8005d50:	f7ff fa46 	bl	80051e0 <LL_RCC_PLL_GetDivider>
 8005d54:	4603      	mov	r3, r0
 8005d56:	091b      	lsrs	r3, r3, #4
 8005d58:	3301      	adds	r3, #1
 8005d5a:	fbb4 f4f3 	udiv	r4, r4, r3
 8005d5e:	f7ff fa34 	bl	80051ca <LL_RCC_PLL_GetR>
 8005d62:	4603      	mov	r3, r0
 8005d64:	0f5b      	lsrs	r3, r3, #29
 8005d66:	3301      	adds	r3, #1
 8005d68:	fbb4 f3f3 	udiv	r3, r4, r3
 8005d6c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005d6e:	697b      	ldr	r3, [r7, #20]
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	371c      	adds	r7, #28
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd90      	pop	{r4, r7, pc}
 8005d78:	08020c30 	.word	0x08020c30
 8005d7c:	00f42400 	.word	0x00f42400
 8005d80:	01e84800 	.word	0x01e84800

08005d84 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d84:	b598      	push	{r3, r4, r7, lr}
 8005d86:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8005d88:	f7ff ff5c 	bl	8005c44 <HAL_RCC_GetSysClockFreq>
 8005d8c:	4604      	mov	r4, r0
 8005d8e:	f7ff f9b5 	bl	80050fc <LL_RCC_GetAHBPrescaler>
 8005d92:	4603      	mov	r3, r0
 8005d94:	091b      	lsrs	r3, r3, #4
 8005d96:	f003 030f 	and.w	r3, r3, #15
 8005d9a:	4a03      	ldr	r2, [pc, #12]	@ (8005da8 <HAL_RCC_GetHCLKFreq+0x24>)
 8005d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005da0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	bd98      	pop	{r3, r4, r7, pc}
 8005da8:	08020bd0 	.word	0x08020bd0

08005dac <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005dac:	b598      	push	{r3, r4, r7, lr}
 8005dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005db0:	f7ff ffe8 	bl	8005d84 <HAL_RCC_GetHCLKFreq>
 8005db4:	4604      	mov	r4, r0
 8005db6:	f7ff f9b9 	bl	800512c <LL_RCC_GetAPB1Prescaler>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	0a1b      	lsrs	r3, r3, #8
 8005dbe:	4a03      	ldr	r2, [pc, #12]	@ (8005dcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8005dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dc4:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	bd98      	pop	{r3, r4, r7, pc}
 8005dcc:	08020c10 	.word	0x08020c10

08005dd0 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005dd0:	b598      	push	{r3, r4, r7, lr}
 8005dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005dd4:	f7ff ffd6 	bl	8005d84 <HAL_RCC_GetHCLKFreq>
 8005dd8:	4604      	mov	r4, r0
 8005dda:	f7ff f9b2 	bl	8005142 <LL_RCC_GetAPB2Prescaler>
 8005dde:	4603      	mov	r3, r0
 8005de0:	0adb      	lsrs	r3, r3, #11
 8005de2:	4a03      	ldr	r2, [pc, #12]	@ (8005df0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005de8:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	bd98      	pop	{r3, r4, r7, pc}
 8005df0:	08020c10 	.word	0x08020c10

08005df4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005df4:	b590      	push	{r4, r7, lr}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	091b      	lsrs	r3, r3, #4
 8005e00:	f003 030f 	and.w	r3, r3, #15
 8005e04:	4a10      	ldr	r2, [pc, #64]	@ (8005e48 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8005e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e0a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8005e0c:	f7ff f981 	bl	8005112 <LL_RCC_GetAHB3Prescaler>
 8005e10:	4603      	mov	r3, r0
 8005e12:	091b      	lsrs	r3, r3, #4
 8005e14:	f003 030f 	and.w	r3, r3, #15
 8005e18:	4a0c      	ldr	r2, [pc, #48]	@ (8005e4c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8005e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e24:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	4a09      	ldr	r2, [pc, #36]	@ (8005e50 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8005e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e2e:	0c9c      	lsrs	r4, r3, #18
 8005e30:	f7fe fe74 	bl	8004b1c <HAL_PWREx_GetVoltageRange>
 8005e34:	4603      	mov	r3, r0
 8005e36:	4619      	mov	r1, r3
 8005e38:	4620      	mov	r0, r4
 8005e3a:	f000 f80b 	bl	8005e54 <RCC_SetFlashLatency>
 8005e3e:	4603      	mov	r3, r0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3714      	adds	r7, #20
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd90      	pop	{r4, r7, pc}
 8005e48:	08020c30 	.word	0x08020c30
 8005e4c:	08020bd0 	.word	0x08020bd0
 8005e50:	431bde83 	.word	0x431bde83

08005e54 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b08e      	sub	sp, #56	@ 0x38
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8005e5e:	4a3a      	ldr	r2, [pc, #232]	@ (8005f48 <RCC_SetFlashLatency+0xf4>)
 8005e60:	f107 0320 	add.w	r3, r7, #32
 8005e64:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005e68:	6018      	str	r0, [r3, #0]
 8005e6a:	3304      	adds	r3, #4
 8005e6c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8005e6e:	4a37      	ldr	r2, [pc, #220]	@ (8005f4c <RCC_SetFlashLatency+0xf8>)
 8005e70:	f107 0318 	add.w	r3, r7, #24
 8005e74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005e78:	6018      	str	r0, [r3, #0]
 8005e7a:	3304      	adds	r3, #4
 8005e7c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8005e7e:	4a34      	ldr	r2, [pc, #208]	@ (8005f50 <RCC_SetFlashLatency+0xfc>)
 8005e80:	f107 030c 	add.w	r3, r7, #12
 8005e84:	ca07      	ldmia	r2, {r0, r1, r2}
 8005e86:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e94:	d11b      	bne.n	8005ece <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005e96:	2300      	movs	r3, #0
 8005e98:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e9a:	e014      	b.n	8005ec6 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e9e:	005b      	lsls	r3, r3, #1
 8005ea0:	3338      	adds	r3, #56	@ 0x38
 8005ea2:	443b      	add	r3, r7
 8005ea4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d807      	bhi.n	8005ec0 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	3338      	adds	r3, #56	@ 0x38
 8005eb6:	443b      	add	r3, r7
 8005eb8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005ebc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ebe:	e021      	b.n	8005f04 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d9e7      	bls.n	8005e9c <RCC_SetFlashLatency+0x48>
 8005ecc:	e01a      	b.n	8005f04 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005ece:	2300      	movs	r3, #0
 8005ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ed2:	e014      	b.n	8005efe <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ed6:	005b      	lsls	r3, r3, #1
 8005ed8:	3338      	adds	r3, #56	@ 0x38
 8005eda:	443b      	add	r3, r7
 8005edc:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d807      	bhi.n	8005ef8 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	3338      	adds	r3, #56	@ 0x38
 8005eee:	443b      	add	r3, r7
 8005ef0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005ef4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005ef6:	e005      	b.n	8005f04 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005efa:	3301      	adds	r3, #1
 8005efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005efe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d9e7      	bls.n	8005ed4 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005f04:	4b13      	ldr	r3, [pc, #76]	@ (8005f54 <RCC_SetFlashLatency+0x100>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f023 0207 	bic.w	r2, r3, #7
 8005f0c:	4911      	ldr	r1, [pc, #68]	@ (8005f54 <RCC_SetFlashLatency+0x100>)
 8005f0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f10:	4313      	orrs	r3, r2
 8005f12:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005f14:	f7fb fbf2 	bl	80016fc <HAL_GetTick>
 8005f18:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005f1a:	e008      	b.n	8005f2e <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005f1c:	f7fb fbee 	bl	80016fc <HAL_GetTick>
 8005f20:	4602      	mov	r2, r0
 8005f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	d901      	bls.n	8005f2e <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e007      	b.n	8005f3e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005f2e:	4b09      	ldr	r3, [pc, #36]	@ (8005f54 <RCC_SetFlashLatency+0x100>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 0307 	and.w	r3, r3, #7
 8005f36:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d1ef      	bne.n	8005f1c <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3738      	adds	r7, #56	@ 0x38
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	0802067c 	.word	0x0802067c
 8005f4c:	08020684 	.word	0x08020684
 8005f50:	0802068c 	.word	0x0802068c
 8005f54:	58004000 	.word	0x58004000

08005f58 <LL_RCC_LSE_IsReady>:
{
 8005f58:	b480      	push	{r7}
 8005f5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005f5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f64:	f003 0302 	and.w	r3, r3, #2
 8005f68:	2b02      	cmp	r3, #2
 8005f6a:	d101      	bne.n	8005f70 <LL_RCC_LSE_IsReady+0x18>
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e000      	b.n	8005f72 <LL_RCC_LSE_IsReady+0x1a>
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bc80      	pop	{r7}
 8005f78:	4770      	bx	lr

08005f7a <LL_RCC_SetUSARTClockSource>:
{
 8005f7a:	b480      	push	{r7}
 8005f7c:	b083      	sub	sp, #12
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8005f82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005f86:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	0c1b      	lsrs	r3, r3, #16
 8005f8e:	43db      	mvns	r3, r3
 8005f90:	401a      	ands	r2, r3
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005fa0:	bf00      	nop
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bc80      	pop	{r7}
 8005fa8:	4770      	bx	lr

08005faa <LL_RCC_SetI2SClockSource>:
{
 8005faa:	b480      	push	{r7}
 8005fac:	b083      	sub	sp, #12
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8005fb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fba:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005fbe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005fca:	bf00      	nop
 8005fcc:	370c      	adds	r7, #12
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bc80      	pop	{r7}
 8005fd2:	4770      	bx	lr

08005fd4 <LL_RCC_SetLPUARTClockSource>:
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005fdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fe4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005fe8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8005ff4:	bf00      	nop
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bc80      	pop	{r7}
 8005ffc:	4770      	bx	lr

08005ffe <LL_RCC_SetI2CClockSource>:
{
 8005ffe:	b480      	push	{r7}
 8006000:	b083      	sub	sp, #12
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006006:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800600a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	091b      	lsrs	r3, r3, #4
 8006012:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8006016:	43db      	mvns	r3, r3
 8006018:	401a      	ands	r2, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	011b      	lsls	r3, r3, #4
 800601e:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8006022:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006026:	4313      	orrs	r3, r2
 8006028:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800602c:	bf00      	nop
 800602e:	370c      	adds	r7, #12
 8006030:	46bd      	mov	sp, r7
 8006032:	bc80      	pop	{r7}
 8006034:	4770      	bx	lr

08006036 <LL_RCC_SetLPTIMClockSource>:
{
 8006036:	b480      	push	{r7}
 8006038:	b083      	sub	sp, #12
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800603e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006042:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	0c1b      	lsrs	r3, r3, #16
 800604a:	041b      	lsls	r3, r3, #16
 800604c:	43db      	mvns	r3, r3
 800604e:	401a      	ands	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	041b      	lsls	r3, r3, #16
 8006054:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006058:	4313      	orrs	r3, r2
 800605a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800605e:	bf00      	nop
 8006060:	370c      	adds	r7, #12
 8006062:	46bd      	mov	sp, r7
 8006064:	bc80      	pop	{r7}
 8006066:	4770      	bx	lr

08006068 <LL_RCC_SetRNGClockSource>:
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8006070:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006074:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006078:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800607c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4313      	orrs	r3, r2
 8006084:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006088:	bf00      	nop
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	bc80      	pop	{r7}
 8006090:	4770      	bx	lr

08006092 <LL_RCC_SetADCClockSource>:
{
 8006092:	b480      	push	{r7}
 8006094:	b083      	sub	sp, #12
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800609a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800609e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060a2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80060a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80060b2:	bf00      	nop
 80060b4:	370c      	adds	r7, #12
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bc80      	pop	{r7}
 80060ba:	4770      	bx	lr

080060bc <LL_RCC_SetRTCClockSource>:
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80060c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80060d0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80060dc:	bf00      	nop
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bc80      	pop	{r7}
 80060e4:	4770      	bx	lr

080060e6 <LL_RCC_GetRTCClockSource>:
{
 80060e6:	b480      	push	{r7}
 80060e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80060ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80060ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bc80      	pop	{r7}
 80060fc:	4770      	bx	lr

080060fe <LL_RCC_ForceBackupDomainReset>:
{
 80060fe:	b480      	push	{r7}
 8006100:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006102:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006106:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800610a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800610e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006112:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006116:	bf00      	nop
 8006118:	46bd      	mov	sp, r7
 800611a:	bc80      	pop	{r7}
 800611c:	4770      	bx	lr

0800611e <LL_RCC_ReleaseBackupDomainReset>:
{
 800611e:	b480      	push	{r7}
 8006120:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006122:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800612a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800612e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006132:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006136:	bf00      	nop
 8006138:	46bd      	mov	sp, r7
 800613a:	bc80      	pop	{r7}
 800613c:	4770      	bx	lr
	...

08006140 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b086      	sub	sp, #24
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8006148:	2300      	movs	r3, #0
 800614a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 800614c:	2300      	movs	r3, #0
 800614e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8006150:	2300      	movs	r3, #0
 8006152:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800615c:	2b00      	cmp	r3, #0
 800615e:	d058      	beq.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8006160:	f7fe fc12 	bl	8004988 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006164:	f7fb faca 	bl	80016fc <HAL_GetTick>
 8006168:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800616a:	e009      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800616c:	f7fb fac6 	bl	80016fc <HAL_GetTick>
 8006170:	4602      	mov	r2, r0
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	2b02      	cmp	r3, #2
 8006178:	d902      	bls.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800617a:	2303      	movs	r3, #3
 800617c:	74fb      	strb	r3, [r7, #19]
        break;
 800617e:	e006      	b.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8006180:	4b7b      	ldr	r3, [pc, #492]	@ (8006370 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006188:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800618c:	d1ee      	bne.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800618e:	7cfb      	ldrb	r3, [r7, #19]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d13c      	bne.n	800620e <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8006194:	f7ff ffa7 	bl	80060e6 <LL_RCC_GetRTCClockSource>
 8006198:	4602      	mov	r2, r0
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800619e:	429a      	cmp	r2, r3
 80061a0:	d00f      	beq.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80061a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061ae:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80061b0:	f7ff ffa5 	bl	80060fe <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80061b4:	f7ff ffb3 	bl	800611e <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80061b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	f003 0302 	and.w	r3, r3, #2
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d014      	beq.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061cc:	f7fb fa96 	bl	80016fc <HAL_GetTick>
 80061d0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80061d2:	e00b      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061d4:	f7fb fa92 	bl	80016fc <HAL_GetTick>
 80061d8:	4602      	mov	r2, r0
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d902      	bls.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80061e6:	2303      	movs	r3, #3
 80061e8:	74fb      	strb	r3, [r7, #19]
            break;
 80061ea:	e004      	b.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80061ec:	f7ff feb4 	bl	8005f58 <LL_RCC_LSE_IsReady>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d1ee      	bne.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80061f6:	7cfb      	ldrb	r3, [r7, #19]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d105      	bne.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006200:	4618      	mov	r0, r3
 8006202:	f7ff ff5b 	bl	80060bc <LL_RCC_SetRTCClockSource>
 8006206:	e004      	b.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006208:	7cfb      	ldrb	r3, [r7, #19]
 800620a:	74bb      	strb	r3, [r7, #18]
 800620c:	e001      	b.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800620e:	7cfb      	ldrb	r3, [r7, #19]
 8006210:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 0301 	and.w	r3, r3, #1
 800621a:	2b00      	cmp	r3, #0
 800621c:	d004      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	4618      	mov	r0, r3
 8006224:	f7ff fea9 	bl	8005f7a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 0302 	and.w	r3, r3, #2
 8006230:	2b00      	cmp	r3, #0
 8006232:	d004      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	4618      	mov	r0, r3
 800623a:	f7ff fe9e 	bl	8005f7a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0320 	and.w	r3, r3, #32
 8006246:	2b00      	cmp	r3, #0
 8006248:	d004      	beq.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	4618      	mov	r0, r3
 8006250:	f7ff fec0 	bl	8005fd4 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800625c:	2b00      	cmp	r3, #0
 800625e:	d004      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6a1b      	ldr	r3, [r3, #32]
 8006264:	4618      	mov	r0, r3
 8006266:	f7ff fee6 	bl	8006036 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006272:	2b00      	cmp	r3, #0
 8006274:	d004      	beq.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800627a:	4618      	mov	r0, r3
 800627c:	f7ff fedb 	bl	8006036 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006288:	2b00      	cmp	r3, #0
 800628a:	d004      	beq.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006290:	4618      	mov	r0, r3
 8006292:	f7ff fed0 	bl	8006036 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d004      	beq.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	695b      	ldr	r3, [r3, #20]
 80062a6:	4618      	mov	r0, r3
 80062a8:	f7ff fea9 	bl	8005ffe <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d004      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	699b      	ldr	r3, [r3, #24]
 80062bc:	4618      	mov	r0, r3
 80062be:	f7ff fe9e 	bl	8005ffe <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d004      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	69db      	ldr	r3, [r3, #28]
 80062d2:	4618      	mov	r0, r3
 80062d4:	f7ff fe93 	bl	8005ffe <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 0310 	and.w	r3, r3, #16
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d011      	beq.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	4618      	mov	r0, r3
 80062ea:	f7ff fe5e 	bl	8005faa <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062f6:	d107      	bne.n	8006308 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80062f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006302:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006306:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006310:	2b00      	cmp	r3, #0
 8006312:	d010      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006318:	4618      	mov	r0, r3
 800631a:	f7ff fea5 	bl	8006068 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006322:	2b00      	cmp	r3, #0
 8006324:	d107      	bne.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006326:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006330:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006334:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800633e:	2b00      	cmp	r3, #0
 8006340:	d011      	beq.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006346:	4618      	mov	r0, r3
 8006348:	f7ff fea3 	bl	8006092 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006350:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006354:	d107      	bne.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006356:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006360:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006364:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8006366:	7cbb      	ldrb	r3, [r7, #18]
}
 8006368:	4618      	mov	r0, r3
 800636a:	3718      	adds	r7, #24
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}
 8006370:	58000400 	.word	0x58000400

08006374 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d071      	beq.n	800646a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800638c:	b2db      	uxtb	r3, r3
 800638e:	2b00      	cmp	r3, #0
 8006390:	d106      	bne.n	80063a0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f7fa ffc4 	bl	8001328 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2202      	movs	r2, #2
 80063a4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80063a8:	4b32      	ldr	r3, [pc, #200]	@ (8006474 <HAL_RTC_Init+0x100>)
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	f003 0310 	and.w	r3, r3, #16
 80063b0:	2b10      	cmp	r3, #16
 80063b2:	d051      	beq.n	8006458 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80063b4:	4b2f      	ldr	r3, [pc, #188]	@ (8006474 <HAL_RTC_Init+0x100>)
 80063b6:	22ca      	movs	r2, #202	@ 0xca
 80063b8:	625a      	str	r2, [r3, #36]	@ 0x24
 80063ba:	4b2e      	ldr	r3, [pc, #184]	@ (8006474 <HAL_RTC_Init+0x100>)
 80063bc:	2253      	movs	r2, #83	@ 0x53
 80063be:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 fb9d 	bl	8006b00 <RTC_EnterInitMode>
 80063c6:	4603      	mov	r3, r0
 80063c8:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80063ca:	7bfb      	ldrb	r3, [r7, #15]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d13f      	bne.n	8006450 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80063d0:	4b28      	ldr	r3, [pc, #160]	@ (8006474 <HAL_RTC_Init+0x100>)
 80063d2:	699b      	ldr	r3, [r3, #24]
 80063d4:	4a27      	ldr	r2, [pc, #156]	@ (8006474 <HAL_RTC_Init+0x100>)
 80063d6:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 80063da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80063de:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80063e0:	4b24      	ldr	r3, [pc, #144]	@ (8006474 <HAL_RTC_Init+0x100>)
 80063e2:	699a      	ldr	r2, [r3, #24]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6859      	ldr	r1, [r3, #4]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	4319      	orrs	r1, r3
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	430b      	orrs	r3, r1
 80063f4:	491f      	ldr	r1, [pc, #124]	@ (8006474 <HAL_RTC_Init+0x100>)
 80063f6:	4313      	orrs	r3, r2
 80063f8:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	68da      	ldr	r2, [r3, #12]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	041b      	lsls	r3, r3, #16
 8006404:	491b      	ldr	r1, [pc, #108]	@ (8006474 <HAL_RTC_Init+0x100>)
 8006406:	4313      	orrs	r3, r2
 8006408:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800640a:	4b1a      	ldr	r3, [pc, #104]	@ (8006474 <HAL_RTC_Init+0x100>)
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800641a:	430b      	orrs	r3, r1
 800641c:	4915      	ldr	r1, [pc, #84]	@ (8006474 <HAL_RTC_Init+0x100>)
 800641e:	4313      	orrs	r3, r2
 8006420:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 fba0 	bl	8006b68 <RTC_ExitInitMode>
 8006428:	4603      	mov	r3, r0
 800642a:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800642c:	7bfb      	ldrb	r3, [r7, #15]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d10e      	bne.n	8006450 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8006432:	4b10      	ldr	r3, [pc, #64]	@ (8006474 <HAL_RTC_Init+0x100>)
 8006434:	699b      	ldr	r3, [r3, #24]
 8006436:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a19      	ldr	r1, [r3, #32]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	69db      	ldr	r3, [r3, #28]
 8006442:	4319      	orrs	r1, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	695b      	ldr	r3, [r3, #20]
 8006448:	430b      	orrs	r3, r1
 800644a:	490a      	ldr	r1, [pc, #40]	@ (8006474 <HAL_RTC_Init+0x100>)
 800644c:	4313      	orrs	r3, r2
 800644e:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006450:	4b08      	ldr	r3, [pc, #32]	@ (8006474 <HAL_RTC_Init+0x100>)
 8006452:	22ff      	movs	r2, #255	@ 0xff
 8006454:	625a      	str	r2, [r3, #36]	@ 0x24
 8006456:	e001      	b.n	800645c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8006458:	2300      	movs	r3, #0
 800645a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800645c:	7bfb      	ldrb	r3, [r7, #15]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d103      	bne.n	800646a <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2201      	movs	r2, #1
 8006466:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 800646a:	7bfb      	ldrb	r3, [r7, #15]
}
 800646c:	4618      	mov	r0, r3
 800646e:	3710      	adds	r7, #16
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}
 8006474:	40002800 	.word	0x40002800

08006478 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006478:	b590      	push	{r4, r7, lr}
 800647a:	b087      	sub	sp, #28
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800648a:	2b01      	cmp	r3, #1
 800648c:	d101      	bne.n	8006492 <HAL_RTC_SetTime+0x1a>
 800648e:	2302      	movs	r3, #2
 8006490:	e088      	b.n	80065a4 <HAL_RTC_SetTime+0x12c>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2201      	movs	r2, #1
 8006496:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2202      	movs	r2, #2
 800649e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80064a2:	4b42      	ldr	r3, [pc, #264]	@ (80065ac <HAL_RTC_SetTime+0x134>)
 80064a4:	22ca      	movs	r2, #202	@ 0xca
 80064a6:	625a      	str	r2, [r3, #36]	@ 0x24
 80064a8:	4b40      	ldr	r3, [pc, #256]	@ (80065ac <HAL_RTC_SetTime+0x134>)
 80064aa:	2253      	movs	r2, #83	@ 0x53
 80064ac:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80064ae:	68f8      	ldr	r0, [r7, #12]
 80064b0:	f000 fb26 	bl	8006b00 <RTC_EnterInitMode>
 80064b4:	4603      	mov	r3, r0
 80064b6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80064b8:	7cfb      	ldrb	r3, [r7, #19]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d15e      	bne.n	800657c <HAL_RTC_SetTime+0x104>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 80064be:	4b3b      	ldr	r3, [pc, #236]	@ (80065ac <HAL_RTC_SetTime+0x134>)
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064ca:	d057      	beq.n	800657c <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d125      	bne.n	800651e <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80064d2:	4b36      	ldr	r3, [pc, #216]	@ (80065ac <HAL_RTC_SetTime+0x134>)
 80064d4:	699b      	ldr	r3, [r3, #24]
 80064d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d102      	bne.n	80064e4 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	2200      	movs	r2, #0
 80064e2:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	4618      	mov	r0, r3
 80064ea:	f000 fb7b 	bl	8006be4 <RTC_ByteToBcd2>
 80064ee:	4603      	mov	r3, r0
 80064f0:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	785b      	ldrb	r3, [r3, #1]
 80064f6:	4618      	mov	r0, r3
 80064f8:	f000 fb74 	bl	8006be4 <RTC_ByteToBcd2>
 80064fc:	4603      	mov	r3, r0
 80064fe:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006500:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	789b      	ldrb	r3, [r3, #2]
 8006506:	4618      	mov	r0, r3
 8006508:	f000 fb6c 	bl	8006be4 <RTC_ByteToBcd2>
 800650c:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800650e:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	78db      	ldrb	r3, [r3, #3]
 8006516:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006518:	4313      	orrs	r3, r2
 800651a:	617b      	str	r3, [r7, #20]
 800651c:	e017      	b.n	800654e <HAL_RTC_SetTime+0xd6>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800651e:	4b23      	ldr	r3, [pc, #140]	@ (80065ac <HAL_RTC_SetTime+0x134>)
 8006520:	699b      	ldr	r3, [r3, #24]
 8006522:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006526:	2b00      	cmp	r3, #0
 8006528:	d102      	bne.n	8006530 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	2200      	movs	r2, #0
 800652e:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	785b      	ldrb	r3, [r3, #1]
 800653a:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800653c:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800653e:	68ba      	ldr	r2, [r7, #8]
 8006540:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006542:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	78db      	ldrb	r3, [r3, #3]
 8006548:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800654a:	4313      	orrs	r3, r2
 800654c:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800654e:	4a17      	ldr	r2, [pc, #92]	@ (80065ac <HAL_RTC_SetTime+0x134>)
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8006556:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800655a:	6013      	str	r3, [r2, #0]
      
      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 800655c:	4b13      	ldr	r3, [pc, #76]	@ (80065ac <HAL_RTC_SetTime+0x134>)
 800655e:	699b      	ldr	r3, [r3, #24]
 8006560:	4a12      	ldr	r2, [pc, #72]	@ (80065ac <HAL_RTC_SetTime+0x134>)
 8006562:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006566:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8006568:	4b10      	ldr	r3, [pc, #64]	@ (80065ac <HAL_RTC_SetTime+0x134>)
 800656a:	699a      	ldr	r2, [r3, #24]
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	68d9      	ldr	r1, [r3, #12]
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	430b      	orrs	r3, r1
 8006576:	490d      	ldr	r1, [pc, #52]	@ (80065ac <HAL_RTC_SetTime+0x134>)
 8006578:	4313      	orrs	r3, r2
 800657a:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 800657c:	68f8      	ldr	r0, [r7, #12]
 800657e:	f000 faf3 	bl	8006b68 <RTC_ExitInitMode>
 8006582:	4603      	mov	r3, r0
 8006584:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006586:	4b09      	ldr	r3, [pc, #36]	@ (80065ac <HAL_RTC_SetTime+0x134>)
 8006588:	22ff      	movs	r2, #255	@ 0xff
 800658a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800658c:	7cfb      	ldrb	r3, [r7, #19]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d103      	bne.n	800659a <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2201      	movs	r2, #1
 8006596:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 80065a2:	7cfb      	ldrb	r3, [r7, #19]
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	371c      	adds	r7, #28
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd90      	pop	{r4, r7, pc}
 80065ac:	40002800 	.word	0x40002800

080065b0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b086      	sub	sp, #24
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 80065bc:	4b2c      	ldr	r3, [pc, #176]	@ (8006670 <HAL_RTC_GetTime+0xc0>)
 80065be:	689a      	ldr	r2, [r3, #8]
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 80065c4:	4b2a      	ldr	r3, [pc, #168]	@ (8006670 <HAL_RTC_GetTime+0xc0>)
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065d0:	d049      	beq.n	8006666 <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 80065d2:	4b27      	ldr	r3, [pc, #156]	@ (8006670 <HAL_RTC_GetTime+0xc0>)
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 80065de:	4b24      	ldr	r3, [pc, #144]	@ (8006670 <HAL_RTC_GetTime+0xc0>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80065e6:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80065ea:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	0c1b      	lsrs	r3, r3, #16
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80065f6:	b2da      	uxtb	r2, r3
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	0a1b      	lsrs	r3, r3, #8
 8006600:	b2db      	uxtb	r3, r3
 8006602:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006606:	b2da      	uxtb	r2, r3
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	b2db      	uxtb	r3, r3
 8006610:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006614:	b2da      	uxtb	r2, r3
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	0d9b      	lsrs	r3, r3, #22
 800661e:	b2db      	uxtb	r3, r3
 8006620:	f003 0301 	and.w	r3, r3, #1
 8006624:	b2da      	uxtb	r2, r3
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d11a      	bne.n	8006666 <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	4618      	mov	r0, r3
 8006636:	f000 faf4 	bl	8006c22 <RTC_Bcd2ToByte>
 800663a:	4603      	mov	r3, r0
 800663c:	461a      	mov	r2, r3
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	785b      	ldrb	r3, [r3, #1]
 8006646:	4618      	mov	r0, r3
 8006648:	f000 faeb 	bl	8006c22 <RTC_Bcd2ToByte>
 800664c:	4603      	mov	r3, r0
 800664e:	461a      	mov	r2, r3
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	789b      	ldrb	r3, [r3, #2]
 8006658:	4618      	mov	r0, r3
 800665a:	f000 fae2 	bl	8006c22 <RTC_Bcd2ToByte>
 800665e:	4603      	mov	r3, r0
 8006660:	461a      	mov	r2, r3
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 8006666:	2300      	movs	r3, #0
}
 8006668:	4618      	mov	r0, r3
 800666a:	3718      	adds	r7, #24
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}
 8006670:	40002800 	.word	0x40002800

08006674 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006674:	b590      	push	{r4, r7, lr}
 8006676:	b087      	sub	sp, #28
 8006678:	af00      	add	r7, sp, #0
 800667a:	60f8      	str	r0, [r7, #12]
 800667c:	60b9      	str	r1, [r7, #8]
 800667e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006686:	2b01      	cmp	r3, #1
 8006688:	d101      	bne.n	800668e <HAL_RTC_SetDate+0x1a>
 800668a:	2302      	movs	r3, #2
 800668c:	e071      	b.n	8006772 <HAL_RTC_SetDate+0xfe>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2201      	movs	r2, #1
 8006692:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2202      	movs	r2, #2
 800669a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d10e      	bne.n	80066c2 <HAL_RTC_SetDate+0x4e>
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	785b      	ldrb	r3, [r3, #1]
 80066a8:	f003 0310 	and.w	r3, r3, #16
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d008      	beq.n	80066c2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	785b      	ldrb	r3, [r3, #1]
 80066b4:	f023 0310 	bic.w	r3, r3, #16
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	330a      	adds	r3, #10
 80066bc:	b2da      	uxtb	r2, r3
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d11c      	bne.n	8006702 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	78db      	ldrb	r3, [r3, #3]
 80066cc:	4618      	mov	r0, r3
 80066ce:	f000 fa89 	bl	8006be4 <RTC_ByteToBcd2>
 80066d2:	4603      	mov	r3, r0
 80066d4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	785b      	ldrb	r3, [r3, #1]
 80066da:	4618      	mov	r0, r3
 80066dc:	f000 fa82 	bl	8006be4 <RTC_ByteToBcd2>
 80066e0:	4603      	mov	r3, r0
 80066e2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80066e4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	789b      	ldrb	r3, [r3, #2]
 80066ea:	4618      	mov	r0, r3
 80066ec:	f000 fa7a 	bl	8006be4 <RTC_ByteToBcd2>
 80066f0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80066f2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80066fc:	4313      	orrs	r3, r2
 80066fe:	617b      	str	r3, [r7, #20]
 8006700:	e00e      	b.n	8006720 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	78db      	ldrb	r3, [r3, #3]
 8006706:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	785b      	ldrb	r3, [r3, #1]
 800670c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800670e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8006710:	68ba      	ldr	r2, [r7, #8]
 8006712:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006714:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800671c:	4313      	orrs	r3, r2
 800671e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006720:	4b16      	ldr	r3, [pc, #88]	@ (800677c <HAL_RTC_SetDate+0x108>)
 8006722:	22ca      	movs	r2, #202	@ 0xca
 8006724:	625a      	str	r2, [r3, #36]	@ 0x24
 8006726:	4b15      	ldr	r3, [pc, #84]	@ (800677c <HAL_RTC_SetDate+0x108>)
 8006728:	2253      	movs	r2, #83	@ 0x53
 800672a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800672c:	68f8      	ldr	r0, [r7, #12]
 800672e:	f000 f9e7 	bl	8006b00 <RTC_EnterInitMode>
 8006732:	4603      	mov	r3, r0
 8006734:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006736:	7cfb      	ldrb	r3, [r7, #19]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d10b      	bne.n	8006754 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800673c:	4a0f      	ldr	r2, [pc, #60]	@ (800677c <HAL_RTC_SetDate+0x108>)
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006744:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006748:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f000 fa0c 	bl	8006b68 <RTC_ExitInitMode>
 8006750:	4603      	mov	r3, r0
 8006752:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006754:	4b09      	ldr	r3, [pc, #36]	@ (800677c <HAL_RTC_SetDate+0x108>)
 8006756:	22ff      	movs	r2, #255	@ 0xff
 8006758:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800675a:	7cfb      	ldrb	r3, [r7, #19]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d103      	bne.n	8006768 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return status;
 8006770:	7cfb      	ldrb	r3, [r7, #19]
}
 8006772:	4618      	mov	r0, r3
 8006774:	371c      	adds	r7, #28
 8006776:	46bd      	mov	sp, r7
 8006778:	bd90      	pop	{r4, r7, pc}
 800677a:	bf00      	nop
 800677c:	40002800 	.word	0x40002800

08006780 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8006780:	b590      	push	{r4, r7, lr}
 8006782:	b087      	sub	sp, #28
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800678c:	2300      	movs	r3, #0
 800678e:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006796:	2b01      	cmp	r3, #1
 8006798:	d101      	bne.n	800679e <HAL_RTC_SetAlarm_IT+0x1e>
 800679a:	2302      	movs	r3, #2
 800679c:	e0f3      	b.n	8006986 <HAL_RTC_SetAlarm_IT+0x206>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2201      	movs	r2, #1
 80067a2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2202      	movs	r2, #2
 80067aa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 80067ae:	4b78      	ldr	r3, [pc, #480]	@ (8006990 <HAL_RTC_SetAlarm_IT+0x210>)
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067b6:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067be:	d06a      	beq.n	8006896 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d13a      	bne.n	800683c <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80067c6:	4b72      	ldr	r3, [pc, #456]	@ (8006990 <HAL_RTC_SetAlarm_IT+0x210>)
 80067c8:	699b      	ldr	r3, [r3, #24]
 80067ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d102      	bne.n	80067d8 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	2200      	movs	r2, #0
 80067d6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	695b      	ldr	r3, [r3, #20]
 80067dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	4618      	mov	r0, r3
 80067e6:	f000 f9fd 	bl	8006be4 <RTC_ByteToBcd2>
 80067ea:	4603      	mov	r3, r0
 80067ec:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	785b      	ldrb	r3, [r3, #1]
 80067f2:	4618      	mov	r0, r3
 80067f4:	f000 f9f6 	bl	8006be4 <RTC_ByteToBcd2>
 80067f8:	4603      	mov	r3, r0
 80067fa:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80067fc:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	789b      	ldrb	r3, [r3, #2]
 8006802:	4618      	mov	r0, r3
 8006804:	f000 f9ee 	bl	8006be4 <RTC_ByteToBcd2>
 8006808:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800680a:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	78db      	ldrb	r3, [r3, #3]
 8006812:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006814:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800681e:	4618      	mov	r0, r3
 8006820:	f000 f9e0 	bl	8006be4 <RTC_ByteToBcd2>
 8006824:	4603      	mov	r3, r0
 8006826:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006828:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006830:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006836:	4313      	orrs	r3, r2
 8006838:	617b      	str	r3, [r7, #20]
 800683a:	e02c      	b.n	8006896 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	695b      	ldr	r3, [r3, #20]
 8006840:	f1b3 3f80 	cmp.w	r3, #2155905152	@ 0x80808080
 8006844:	d00d      	beq.n	8006862 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	695b      	ldr	r3, [r3, #20]
 800684a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800684e:	d008      	beq.n	8006862 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006850:	4b4f      	ldr	r3, [pc, #316]	@ (8006990 <HAL_RTC_SetAlarm_IT+0x210>)
 8006852:	699b      	ldr	r3, [r3, #24]
 8006854:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006858:	2b00      	cmp	r3, #0
 800685a:	d102      	bne.n	8006862 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	2200      	movs	r2, #0
 8006860:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	785b      	ldrb	r3, [r3, #1]
 800686c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800686e:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006870:	68ba      	ldr	r2, [r7, #8]
 8006872:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006874:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	78db      	ldrb	r3, [r3, #3]
 800687a:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800687c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006884:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006886:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800688c:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006892:	4313      	orrs	r3, r2
 8006894:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006896:	4b3e      	ldr	r3, [pc, #248]	@ (8006990 <HAL_RTC_SetAlarm_IT+0x210>)
 8006898:	22ca      	movs	r2, #202	@ 0xca
 800689a:	625a      	str	r2, [r3, #36]	@ 0x24
 800689c:	4b3c      	ldr	r3, [pc, #240]	@ (8006990 <HAL_RTC_SetAlarm_IT+0x210>)
 800689e:	2253      	movs	r2, #83	@ 0x53
 80068a0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068aa:	d12c      	bne.n	8006906 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80068ac:	4b38      	ldr	r3, [pc, #224]	@ (8006990 <HAL_RTC_SetAlarm_IT+0x210>)
 80068ae:	699b      	ldr	r3, [r3, #24]
 80068b0:	4a37      	ldr	r2, [pc, #220]	@ (8006990 <HAL_RTC_SetAlarm_IT+0x210>)
 80068b2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80068b6:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80068b8:	4b35      	ldr	r3, [pc, #212]	@ (8006990 <HAL_RTC_SetAlarm_IT+0x210>)
 80068ba:	2201      	movs	r2, #1
 80068bc:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068c4:	d107      	bne.n	80068d6 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	699a      	ldr	r2, [r3, #24]
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	69db      	ldr	r3, [r3, #28]
 80068ce:	4930      	ldr	r1, [pc, #192]	@ (8006990 <HAL_RTC_SetAlarm_IT+0x210>)
 80068d0:	4313      	orrs	r3, r2
 80068d2:	644b      	str	r3, [r1, #68]	@ 0x44
 80068d4:	e006      	b.n	80068e4 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 80068d6:	4a2e      	ldr	r2, [pc, #184]	@ (8006990 <HAL_RTC_SetAlarm_IT+0x210>)
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	6413      	str	r3, [r2, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 80068dc:	4a2c      	ldr	r2, [pc, #176]	@ (8006990 <HAL_RTC_SetAlarm_IT+0x210>)
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	699b      	ldr	r3, [r3, #24]
 80068e2:	6453      	str	r3, [r2, #68]	@ 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 80068e4:	4a2a      	ldr	r2, [pc, #168]	@ (8006990 <HAL_RTC_SetAlarm_IT+0x210>)
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	6713      	str	r3, [r2, #112]	@ 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068f0:	f043 0201 	orr.w	r2, r3, #1
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80068f8:	4b25      	ldr	r3, [pc, #148]	@ (8006990 <HAL_RTC_SetAlarm_IT+0x210>)
 80068fa:	699b      	ldr	r3, [r3, #24]
 80068fc:	4a24      	ldr	r2, [pc, #144]	@ (8006990 <HAL_RTC_SetAlarm_IT+0x210>)
 80068fe:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 8006902:	6193      	str	r3, [r2, #24]
 8006904:	e02b      	b.n	800695e <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006906:	4b22      	ldr	r3, [pc, #136]	@ (8006990 <HAL_RTC_SetAlarm_IT+0x210>)
 8006908:	699b      	ldr	r3, [r3, #24]
 800690a:	4a21      	ldr	r2, [pc, #132]	@ (8006990 <HAL_RTC_SetAlarm_IT+0x210>)
 800690c:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8006910:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006912:	4b1f      	ldr	r3, [pc, #124]	@ (8006990 <HAL_RTC_SetAlarm_IT+0x210>)
 8006914:	2202      	movs	r2, #2
 8006916:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800691e:	d107      	bne.n	8006930 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	699a      	ldr	r2, [r3, #24]
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	69db      	ldr	r3, [r3, #28]
 8006928:	4919      	ldr	r1, [pc, #100]	@ (8006990 <HAL_RTC_SetAlarm_IT+0x210>)
 800692a:	4313      	orrs	r3, r2
 800692c:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800692e:	e006      	b.n	800693e <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8006930:	4a17      	ldr	r2, [pc, #92]	@ (8006990 <HAL_RTC_SetAlarm_IT+0x210>)
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	6493      	str	r3, [r2, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8006936:	4a16      	ldr	r2, [pc, #88]	@ (8006990 <HAL_RTC_SetAlarm_IT+0x210>)
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	699b      	ldr	r3, [r3, #24]
 800693c:	64d3      	str	r3, [r2, #76]	@ 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800693e:	4a14      	ldr	r2, [pc, #80]	@ (8006990 <HAL_RTC_SetAlarm_IT+0x210>)
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	6753      	str	r3, [r2, #116]	@ 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800694a:	f043 0202 	orr.w	r2, r3, #2
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006952:	4b0f      	ldr	r3, [pc, #60]	@ (8006990 <HAL_RTC_SetAlarm_IT+0x210>)
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	4a0e      	ldr	r2, [pc, #56]	@ (8006990 <HAL_RTC_SetAlarm_IT+0x210>)
 8006958:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 800695c:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800695e:	4b0d      	ldr	r3, [pc, #52]	@ (8006994 <HAL_RTC_SetAlarm_IT+0x214>)
 8006960:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006964:	4a0b      	ldr	r2, [pc, #44]	@ (8006994 <HAL_RTC_SetAlarm_IT+0x214>)
 8006966:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800696a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800696e:	4b08      	ldr	r3, [pc, #32]	@ (8006990 <HAL_RTC_SetAlarm_IT+0x210>)
 8006970:	22ff      	movs	r2, #255	@ 0xff
 8006972:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2200      	movs	r2, #0
 8006980:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	371c      	adds	r7, #28
 800698a:	46bd      	mov	sp, r7
 800698c:	bd90      	pop	{r4, r7, pc}
 800698e:	bf00      	nop
 8006990:	40002800 	.word	0x40002800
 8006994:	58000800 	.word	0x58000800

08006998 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d101      	bne.n	80069b0 <HAL_RTC_DeactivateAlarm+0x18>
 80069ac:	2302      	movs	r3, #2
 80069ae:	e048      	b.n	8006a42 <HAL_RTC_DeactivateAlarm+0xaa>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2202      	movs	r2, #2
 80069bc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80069c0:	4b22      	ldr	r3, [pc, #136]	@ (8006a4c <HAL_RTC_DeactivateAlarm+0xb4>)
 80069c2:	22ca      	movs	r2, #202	@ 0xca
 80069c4:	625a      	str	r2, [r3, #36]	@ 0x24
 80069c6:	4b21      	ldr	r3, [pc, #132]	@ (8006a4c <HAL_RTC_DeactivateAlarm+0xb4>)
 80069c8:	2253      	movs	r2, #83	@ 0x53
 80069ca:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069d2:	d115      	bne.n	8006a00 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80069d4:	4b1d      	ldr	r3, [pc, #116]	@ (8006a4c <HAL_RTC_DeactivateAlarm+0xb4>)
 80069d6:	699b      	ldr	r3, [r3, #24]
 80069d8:	4a1c      	ldr	r2, [pc, #112]	@ (8006a4c <HAL_RTC_DeactivateAlarm+0xb4>)
 80069da:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80069de:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 80069e0:	4b1a      	ldr	r3, [pc, #104]	@ (8006a4c <HAL_RTC_DeactivateAlarm+0xb4>)
 80069e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069e4:	4a19      	ldr	r2, [pc, #100]	@ (8006a4c <HAL_RTC_DeactivateAlarm+0xb4>)
 80069e6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80069ea:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069f0:	f023 0201 	bic.w	r2, r3, #1
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80069f8:	4b14      	ldr	r3, [pc, #80]	@ (8006a4c <HAL_RTC_DeactivateAlarm+0xb4>)
 80069fa:	2201      	movs	r2, #1
 80069fc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80069fe:	e014      	b.n	8006a2a <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006a00:	4b12      	ldr	r3, [pc, #72]	@ (8006a4c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006a02:	699b      	ldr	r3, [r3, #24]
 8006a04:	4a11      	ldr	r2, [pc, #68]	@ (8006a4c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006a06:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8006a0a:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8006a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8006a4c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006a0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a10:	4a0e      	ldr	r2, [pc, #56]	@ (8006a4c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006a12:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006a16:	64d3      	str	r3, [r2, #76]	@ 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a1c:	f023 0202 	bic.w	r2, r3, #2
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006a24:	4b09      	ldr	r3, [pc, #36]	@ (8006a4c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006a26:	2202      	movs	r2, #2
 8006a28:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006a2a:	4b08      	ldr	r3, [pc, #32]	@ (8006a4c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006a2c:	22ff      	movs	r2, #255	@ 0xff
 8006a2e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	370c      	adds	r7, #12
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bc80      	pop	{r7}
 8006a4a:	4770      	bx	lr
 8006a4c:	40002800 	.word	0x40002800

08006a50 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
	cnt++;
 8006a58:	4b14      	ldr	r3, [pc, #80]	@ (8006aac <HAL_RTC_AlarmIRQHandler+0x5c>)
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	b2da      	uxtb	r2, r3
 8006a60:	4b12      	ldr	r3, [pc, #72]	@ (8006aac <HAL_RTC_AlarmIRQHandler+0x5c>)
 8006a62:	701a      	strb	r2, [r3, #0]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8006a64:	4b12      	ldr	r3, [pc, #72]	@ (8006ab0 <HAL_RTC_AlarmIRQHandler+0x60>)
 8006a66:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f003 0301 	and.w	r3, r3, #1
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d005      	beq.n	8006a86 <HAL_RTC_AlarmIRQHandler+0x36>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ab0 <HAL_RTC_AlarmIRQHandler+0x60>)
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f014 fe73 	bl	801b76c <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f003 0302 	and.w	r3, r3, #2
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d005      	beq.n	8006a9c <HAL_RTC_AlarmIRQHandler+0x4c>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006a90:	4b07      	ldr	r3, [pc, #28]	@ (8006ab0 <HAL_RTC_AlarmIRQHandler+0x60>)
 8006a92:	2202      	movs	r2, #2
 8006a94:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f014 fe94 	bl	801b7c4 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8006aa4:	bf00      	nop
 8006aa6:	3710      	adds	r7, #16
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}
 8006aac:	200009ac 	.word	0x200009ac
 8006ab0:	40002800 	.word	0x40002800

08006ab4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8006abc:	4b0f      	ldr	r3, [pc, #60]	@ (8006afc <HAL_RTC_WaitForSynchro+0x48>)
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	4a0e      	ldr	r2, [pc, #56]	@ (8006afc <HAL_RTC_WaitForSynchro+0x48>)
 8006ac2:	f023 0320 	bic.w	r3, r3, #32
 8006ac6:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8006ac8:	f7fa fe18 	bl	80016fc <HAL_GetTick>
 8006acc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006ace:	e009      	b.n	8006ae4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006ad0:	f7fa fe14 	bl	80016fc <HAL_GetTick>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	1ad3      	subs	r3, r2, r3
 8006ada:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006ade:	d901      	bls.n	8006ae4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006ae0:	2303      	movs	r3, #3
 8006ae2:	e006      	b.n	8006af2 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006ae4:	4b05      	ldr	r3, [pc, #20]	@ (8006afc <HAL_RTC_WaitForSynchro+0x48>)
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	f003 0320 	and.w	r3, r3, #32
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d0ef      	beq.n	8006ad0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	40002800 	.word	0x40002800

08006b00 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006b0c:	4b15      	ldr	r3, [pc, #84]	@ (8006b64 <RTC_EnterInitMode+0x64>)
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d120      	bne.n	8006b5a <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006b18:	4b12      	ldr	r3, [pc, #72]	@ (8006b64 <RTC_EnterInitMode+0x64>)
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	4a11      	ldr	r2, [pc, #68]	@ (8006b64 <RTC_EnterInitMode+0x64>)
 8006b1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b22:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8006b24:	f7fa fdea 	bl	80016fc <HAL_GetTick>
 8006b28:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006b2a:	e00d      	b.n	8006b48 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006b2c:	f7fa fde6 	bl	80016fc <HAL_GetTick>
 8006b30:	4602      	mov	r2, r0
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006b3a:	d905      	bls.n	8006b48 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006b3c:	2303      	movs	r3, #3
 8006b3e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2203      	movs	r2, #3
 8006b44:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006b48:	4b06      	ldr	r3, [pc, #24]	@ (8006b64 <RTC_EnterInitMode+0x64>)
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d102      	bne.n	8006b5a <RTC_EnterInitMode+0x5a>
 8006b54:	7bfb      	ldrb	r3, [r7, #15]
 8006b56:	2b03      	cmp	r3, #3
 8006b58:	d1e8      	bne.n	8006b2c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8006b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3710      	adds	r7, #16
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	40002800 	.word	0x40002800

08006b68 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b084      	sub	sp, #16
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b70:	2300      	movs	r3, #0
 8006b72:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006b74:	4b1a      	ldr	r3, [pc, #104]	@ (8006be0 <RTC_ExitInitMode+0x78>)
 8006b76:	68db      	ldr	r3, [r3, #12]
 8006b78:	4a19      	ldr	r2, [pc, #100]	@ (8006be0 <RTC_ExitInitMode+0x78>)
 8006b7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b7e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006b80:	4b17      	ldr	r3, [pc, #92]	@ (8006be0 <RTC_ExitInitMode+0x78>)
 8006b82:	699b      	ldr	r3, [r3, #24]
 8006b84:	f003 0320 	and.w	r3, r3, #32
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d10c      	bne.n	8006ba6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f7ff ff91 	bl	8006ab4 <HAL_RTC_WaitForSynchro>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d01e      	beq.n	8006bd6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2203      	movs	r2, #3
 8006b9c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8006ba0:	2303      	movs	r3, #3
 8006ba2:	73fb      	strb	r3, [r7, #15]
 8006ba4:	e017      	b.n	8006bd6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006ba6:	4b0e      	ldr	r3, [pc, #56]	@ (8006be0 <RTC_ExitInitMode+0x78>)
 8006ba8:	699b      	ldr	r3, [r3, #24]
 8006baa:	4a0d      	ldr	r2, [pc, #52]	@ (8006be0 <RTC_ExitInitMode+0x78>)
 8006bac:	f023 0320 	bic.w	r3, r3, #32
 8006bb0:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f7ff ff7e 	bl	8006ab4 <HAL_RTC_WaitForSynchro>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d005      	beq.n	8006bca <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2203      	movs	r2, #3
 8006bc2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006bca:	4b05      	ldr	r3, [pc, #20]	@ (8006be0 <RTC_ExitInitMode+0x78>)
 8006bcc:	699b      	ldr	r3, [r3, #24]
 8006bce:	4a04      	ldr	r2, [pc, #16]	@ (8006be0 <RTC_ExitInitMode+0x78>)
 8006bd0:	f043 0320 	orr.w	r3, r3, #32
 8006bd4:	6193      	str	r3, [r2, #24]
  }

  return status;
 8006bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3710      	adds	r7, #16
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	40002800 	.word	0x40002800

08006be4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b085      	sub	sp, #20
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	4603      	mov	r3, r0
 8006bec:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8006bf2:	79fb      	ldrb	r3, [r7, #7]
 8006bf4:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8006bf6:	e005      	b.n	8006c04 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8006bfe:	7afb      	ldrb	r3, [r7, #11]
 8006c00:	3b0a      	subs	r3, #10
 8006c02:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8006c04:	7afb      	ldrb	r3, [r7, #11]
 8006c06:	2b09      	cmp	r3, #9
 8006c08:	d8f6      	bhi.n	8006bf8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	011b      	lsls	r3, r3, #4
 8006c10:	b2da      	uxtb	r2, r3
 8006c12:	7afb      	ldrb	r3, [r7, #11]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	b2db      	uxtb	r3, r3
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3714      	adds	r7, #20
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bc80      	pop	{r7}
 8006c20:	4770      	bx	lr

08006c22 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006c22:	b480      	push	{r7}
 8006c24:	b085      	sub	sp, #20
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	4603      	mov	r3, r0
 8006c2a:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8006c2c:	79fb      	ldrb	r3, [r7, #7]
 8006c2e:	091b      	lsrs	r3, r3, #4
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	461a      	mov	r2, r3
 8006c34:	4613      	mov	r3, r2
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	4413      	add	r3, r2
 8006c3a:	005b      	lsls	r3, r3, #1
 8006c3c:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	b2da      	uxtb	r2, r3
 8006c42:	79fb      	ldrb	r3, [r7, #7]
 8006c44:	f003 030f 	and.w	r3, r3, #15
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	4413      	add	r3, r2
 8006c4c:	b2db      	uxtb	r3, r3
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3714      	adds	r7, #20
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bc80      	pop	{r7}
 8006c56:	4770      	bx	lr

08006c58 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d101      	bne.n	8006c6e <HAL_RTCEx_EnableBypassShadow+0x16>
 8006c6a:	2302      	movs	r3, #2
 8006c6c:	e01f      	b.n	8006cae <HAL_RTCEx_EnableBypassShadow+0x56>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2201      	movs	r2, #1
 8006c72:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2202      	movs	r2, #2
 8006c7a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8006cb8 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006c80:	22ca      	movs	r2, #202	@ 0xca
 8006c82:	625a      	str	r2, [r3, #36]	@ 0x24
 8006c84:	4b0c      	ldr	r3, [pc, #48]	@ (8006cb8 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006c86:	2253      	movs	r2, #83	@ 0x53
 8006c88:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006c8a:	4b0b      	ldr	r3, [pc, #44]	@ (8006cb8 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006c8c:	699b      	ldr	r3, [r3, #24]
 8006c8e:	4a0a      	ldr	r2, [pc, #40]	@ (8006cb8 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006c90:	f043 0320 	orr.w	r3, r3, #32
 8006c94:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c96:	4b08      	ldr	r3, [pc, #32]	@ (8006cb8 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006c98:	22ff      	movs	r2, #255	@ 0xff
 8006c9a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006cac:	2300      	movs	r3, #0
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	370c      	adds	r7, #12
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bc80      	pop	{r7}
 8006cb6:	4770      	bx	lr
 8006cb8:	40002800 	.word	0x40002800

08006cbc <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b082      	sub	sp, #8
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8006cc4:	4b09      	ldr	r3, [pc, #36]	@ (8006cec <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8006cc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d005      	beq.n	8006cdc <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8006cd0:	4b06      	ldr	r3, [pc, #24]	@ (8006cec <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8006cd2:	2240      	movs	r2, #64	@ 0x40
 8006cd4:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f7fa ff83 	bl	8001be2 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8006ce4:	bf00      	nop
 8006ce6:	3708      	adds	r7, #8
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}
 8006cec:	40002800 	.word	0x40002800

08006cf0 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b087      	sub	sp, #28
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	60f8      	str	r0, [r7, #12]
 8006cf8:	60b9      	str	r1, [r7, #8]
 8006cfa:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8006cfc:	4b07      	ldr	r3, [pc, #28]	@ (8006d1c <HAL_RTCEx_BKUPWrite+0x2c>)
 8006cfe:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	009b      	lsls	r3, r3, #2
 8006d04:	697a      	ldr	r2, [r7, #20]
 8006d06:	4413      	add	r3, r2
 8006d08:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	601a      	str	r2, [r3, #0]
}
 8006d10:	bf00      	nop
 8006d12:	371c      	adds	r7, #28
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bc80      	pop	{r7}
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop
 8006d1c:	4000b100 	.word	0x4000b100

08006d20 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b085      	sub	sp, #20
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8006d2a:	4b07      	ldr	r3, [pc, #28]	@ (8006d48 <HAL_RTCEx_BKUPRead+0x28>)
 8006d2c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	68fa      	ldr	r2, [r7, #12]
 8006d34:	4413      	add	r3, r2
 8006d36:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3714      	adds	r7, #20
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bc80      	pop	{r7}
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	4000b100 	.word	0x4000b100

08006d4c <LL_PWR_SetRadioBusyTrigger>:
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8006d54:	4b06      	ldr	r3, [pc, #24]	@ (8006d70 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006d5c:	4904      	ldr	r1, [pc, #16]	@ (8006d70 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	608b      	str	r3, [r1, #8]
}
 8006d64:	bf00      	nop
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bc80      	pop	{r7}
 8006d6c:	4770      	bx	lr
 8006d6e:	bf00      	nop
 8006d70:	58000400 	.word	0x58000400

08006d74 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8006d74:	b480      	push	{r7}
 8006d76:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006d78:	4b05      	ldr	r3, [pc, #20]	@ (8006d90 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8006d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d7e:	4a04      	ldr	r2, [pc, #16]	@ (8006d90 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8006d80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006d88:	bf00      	nop
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bc80      	pop	{r7}
 8006d8e:	4770      	bx	lr
 8006d90:	58000400 	.word	0x58000400

08006d94 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8006d94:	b480      	push	{r7}
 8006d96:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006d98:	4b05      	ldr	r3, [pc, #20]	@ (8006db0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8006d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d9e:	4a04      	ldr	r2, [pc, #16]	@ (8006db0 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8006da0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006da4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006da8:	bf00      	nop
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bc80      	pop	{r7}
 8006dae:	4770      	bx	lr
 8006db0:	58000400 	.word	0x58000400

08006db4 <LL_PWR_ClearFlag_RFBUSY>:
{
 8006db4:	b480      	push	{r7}
 8006db6:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8006db8:	4b03      	ldr	r3, [pc, #12]	@ (8006dc8 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8006dba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006dbe:	619a      	str	r2, [r3, #24]
}
 8006dc0:	bf00      	nop
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bc80      	pop	{r7}
 8006dc6:	4770      	bx	lr
 8006dc8:	58000400 	.word	0x58000400

08006dcc <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8006dcc:	b480      	push	{r7}
 8006dce:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8006dd0:	4b06      	ldr	r3, [pc, #24]	@ (8006dec <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8006dd2:	695b      	ldr	r3, [r3, #20]
 8006dd4:	f003 0302 	and.w	r3, r3, #2
 8006dd8:	2b02      	cmp	r3, #2
 8006dda:	d101      	bne.n	8006de0 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e000      	b.n	8006de2 <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bc80      	pop	{r7}
 8006de8:	4770      	bx	lr
 8006dea:	bf00      	nop
 8006dec:	58000400 	.word	0x58000400

08006df0 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8006df0:	b480      	push	{r7}
 8006df2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8006df4:	4b06      	ldr	r3, [pc, #24]	@ (8006e10 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8006df6:	695b      	ldr	r3, [r3, #20]
 8006df8:	f003 0304 	and.w	r3, r3, #4
 8006dfc:	2b04      	cmp	r3, #4
 8006dfe:	d101      	bne.n	8006e04 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8006e00:	2301      	movs	r3, #1
 8006e02:	e000      	b.n	8006e06 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bc80      	pop	{r7}
 8006e0c:	4770      	bx	lr
 8006e0e:	bf00      	nop
 8006e10:	58000400 	.word	0x58000400

08006e14 <LL_RCC_RF_DisableReset>:
{
 8006e14:	b480      	push	{r7}
 8006e16:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8006e18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e20:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006e24:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006e28:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006e2c:	bf00      	nop
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bc80      	pop	{r7}
 8006e32:	4770      	bx	lr

08006e34 <LL_RCC_IsRFUnderReset>:
{
 8006e34:	b480      	push	{r7}
 8006e36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8006e38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006e40:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006e44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006e48:	d101      	bne.n	8006e4e <LL_RCC_IsRFUnderReset+0x1a>
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e000      	b.n	8006e50 <LL_RCC_IsRFUnderReset+0x1c>
 8006e4e:	2300      	movs	r3, #0
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bc80      	pop	{r7}
 8006e56:	4770      	bx	lr

08006e58 <LL_EXTI_EnableIT_32_63>:
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006e60:	4b06      	ldr	r3, [pc, #24]	@ (8006e7c <LL_EXTI_EnableIT_32_63+0x24>)
 8006e62:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8006e66:	4905      	ldr	r1, [pc, #20]	@ (8006e7c <LL_EXTI_EnableIT_32_63+0x24>)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8006e70:	bf00      	nop
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bc80      	pop	{r7}
 8006e78:	4770      	bx	lr
 8006e7a:	bf00      	nop
 8006e7c:	58000800 	.word	0x58000800

08006e80 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d103      	bne.n	8006e96 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	73fb      	strb	r3, [r7, #15]
    return status;
 8006e92:	7bfb      	ldrb	r3, [r7, #15]
 8006e94:	e052      	b.n	8006f3c <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 8006e96:	2300      	movs	r3, #0
 8006e98:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	799b      	ldrb	r3, [r3, #6]
 8006e9e:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8006ea0:	7bbb      	ldrb	r3, [r7, #14]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d002      	beq.n	8006eac <HAL_SUBGHZ_Init+0x2c>
 8006ea6:	7bbb      	ldrb	r3, [r7, #14]
 8006ea8:	2b03      	cmp	r3, #3
 8006eaa:	d109      	bne.n	8006ec0 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f7fa fb80 	bl	80015b8 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8006eb8:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8006ebc:	f7ff ffcc 	bl	8006e58 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8006ec0:	7bbb      	ldrb	r3, [r7, #14]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d126      	bne.n	8006f14 <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2202      	movs	r2, #2
 8006eca:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8006ecc:	f7ff ffa2 	bl	8006e14 <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006ed0:	4b1c      	ldr	r3, [pc, #112]	@ (8006f44 <HAL_SUBGHZ_Init+0xc4>)
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	4613      	mov	r3, r2
 8006ed6:	00db      	lsls	r3, r3, #3
 8006ed8:	1a9b      	subs	r3, r3, r2
 8006eda:	009b      	lsls	r3, r3, #2
 8006edc:	0cdb      	lsrs	r3, r3, #19
 8006ede:	2264      	movs	r2, #100	@ 0x64
 8006ee0:	fb02 f303 	mul.w	r3, r2, r3
 8006ee4:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d105      	bne.n	8006ef8 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	609a      	str	r2, [r3, #8]
        break;
 8006ef6:	e007      	b.n	8006f08 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	3b01      	subs	r3, #1
 8006efc:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8006efe:	f7ff ff99 	bl	8006e34 <LL_RCC_IsRFUnderReset>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d1ee      	bne.n	8006ee6 <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006f08:	f7ff ff34 	bl	8006d74 <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8006f0c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8006f10:	f7ff ff1c 	bl	8006d4c <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8006f14:	f7ff ff4e 	bl	8006db4 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8006f18:	7bfb      	ldrb	r3, [r7, #15]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d10a      	bne.n	8006f34 <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4618      	mov	r0, r3
 8006f24:	f000 fab6 	bl	8007494 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2200      	movs	r2, #0
 8006f32:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	719a      	strb	r2, [r3, #6]

  return status;
 8006f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3710      	adds	r7, #16
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}
 8006f44:	20000070 	.word	0x20000070

08006f48 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b086      	sub	sp, #24
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	607a      	str	r2, [r7, #4]
 8006f52:	461a      	mov	r2, r3
 8006f54:	460b      	mov	r3, r1
 8006f56:	817b      	strh	r3, [r7, #10]
 8006f58:	4613      	mov	r3, r2
 8006f5a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	799b      	ldrb	r3, [r3, #6]
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d14a      	bne.n	8006ffc <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	795b      	ldrb	r3, [r3, #5]
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d101      	bne.n	8006f72 <HAL_SUBGHZ_WriteRegisters+0x2a>
 8006f6e:	2302      	movs	r3, #2
 8006f70:	e045      	b.n	8006ffe <HAL_SUBGHZ_WriteRegisters+0xb6>
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2201      	movs	r2, #1
 8006f76:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2202      	movs	r2, #2
 8006f7c:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006f7e:	68f8      	ldr	r0, [r7, #12]
 8006f80:	f000 fb56 	bl	8007630 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006f84:	f7ff ff06 	bl	8006d94 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8006f88:	210d      	movs	r1, #13
 8006f8a:	68f8      	ldr	r0, [r7, #12]
 8006f8c:	f000 faa2 	bl	80074d4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006f90:	897b      	ldrh	r3, [r7, #10]
 8006f92:	0a1b      	lsrs	r3, r3, #8
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	4619      	mov	r1, r3
 8006f9a:	68f8      	ldr	r0, [r7, #12]
 8006f9c:	f000 fa9a 	bl	80074d4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006fa0:	897b      	ldrh	r3, [r7, #10]
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	68f8      	ldr	r0, [r7, #12]
 8006fa8:	f000 fa94 	bl	80074d4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006fac:	2300      	movs	r3, #0
 8006fae:	82bb      	strh	r3, [r7, #20]
 8006fb0:	e00a      	b.n	8006fc8 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006fb2:	8abb      	ldrh	r3, [r7, #20]
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	4413      	add	r3, r2
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	4619      	mov	r1, r3
 8006fbc:	68f8      	ldr	r0, [r7, #12]
 8006fbe:	f000 fa89 	bl	80074d4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006fc2:	8abb      	ldrh	r3, [r7, #20]
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	82bb      	strh	r3, [r7, #20]
 8006fc8:	8aba      	ldrh	r2, [r7, #20]
 8006fca:	893b      	ldrh	r3, [r7, #8]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d3f0      	bcc.n	8006fb2 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006fd0:	f7ff fed0 	bl	8006d74 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006fd4:	68f8      	ldr	r0, [r7, #12]
 8006fd6:	f000 fb4f 	bl	8007678 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d002      	beq.n	8006fe8 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	75fb      	strb	r3, [r7, #23]
 8006fe6:	e001      	b.n	8006fec <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	715a      	strb	r2, [r3, #5]

    return status;
 8006ff8:	7dfb      	ldrb	r3, [r7, #23]
 8006ffa:	e000      	b.n	8006ffe <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8006ffc:	2302      	movs	r3, #2
  }
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3718      	adds	r7, #24
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}

08007006 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8007006:	b580      	push	{r7, lr}
 8007008:	b088      	sub	sp, #32
 800700a:	af00      	add	r7, sp, #0
 800700c:	60f8      	str	r0, [r7, #12]
 800700e:	607a      	str	r2, [r7, #4]
 8007010:	461a      	mov	r2, r3
 8007012:	460b      	mov	r3, r1
 8007014:	817b      	strh	r3, [r7, #10]
 8007016:	4613      	mov	r3, r2
 8007018:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	799b      	ldrb	r3, [r3, #6]
 8007022:	b2db      	uxtb	r3, r3
 8007024:	2b01      	cmp	r3, #1
 8007026:	d14a      	bne.n	80070be <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	795b      	ldrb	r3, [r3, #5]
 800702c:	2b01      	cmp	r3, #1
 800702e:	d101      	bne.n	8007034 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8007030:	2302      	movs	r3, #2
 8007032:	e045      	b.n	80070c0 <HAL_SUBGHZ_ReadRegisters+0xba>
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2201      	movs	r2, #1
 8007038:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f000 faf8 	bl	8007630 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007040:	f7ff fea8 	bl	8006d94 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8007044:	211d      	movs	r1, #29
 8007046:	68f8      	ldr	r0, [r7, #12]
 8007048:	f000 fa44 	bl	80074d4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800704c:	897b      	ldrh	r3, [r7, #10]
 800704e:	0a1b      	lsrs	r3, r3, #8
 8007050:	b29b      	uxth	r3, r3
 8007052:	b2db      	uxtb	r3, r3
 8007054:	4619      	mov	r1, r3
 8007056:	68f8      	ldr	r0, [r7, #12]
 8007058:	f000 fa3c 	bl	80074d4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800705c:	897b      	ldrh	r3, [r7, #10]
 800705e:	b2db      	uxtb	r3, r3
 8007060:	4619      	mov	r1, r3
 8007062:	68f8      	ldr	r0, [r7, #12]
 8007064:	f000 fa36 	bl	80074d4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8007068:	2100      	movs	r1, #0
 800706a:	68f8      	ldr	r0, [r7, #12]
 800706c:	f000 fa32 	bl	80074d4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007070:	2300      	movs	r3, #0
 8007072:	82fb      	strh	r3, [r7, #22]
 8007074:	e009      	b.n	800708a <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007076:	69b9      	ldr	r1, [r7, #24]
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	f000 fa81 	bl	8007580 <SUBGHZSPI_Receive>
      pData++;
 800707e:	69bb      	ldr	r3, [r7, #24]
 8007080:	3301      	adds	r3, #1
 8007082:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007084:	8afb      	ldrh	r3, [r7, #22]
 8007086:	3301      	adds	r3, #1
 8007088:	82fb      	strh	r3, [r7, #22]
 800708a:	8afa      	ldrh	r2, [r7, #22]
 800708c:	893b      	ldrh	r3, [r7, #8]
 800708e:	429a      	cmp	r2, r3
 8007090:	d3f1      	bcc.n	8007076 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007092:	f7ff fe6f 	bl	8006d74 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007096:	68f8      	ldr	r0, [r7, #12]
 8007098:	f000 faee 	bl	8007678 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d002      	beq.n	80070aa <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	77fb      	strb	r3, [r7, #31]
 80070a8:	e001      	b.n	80070ae <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 80070aa:	2300      	movs	r3, #0
 80070ac:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2201      	movs	r2, #1
 80070b2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2200      	movs	r2, #0
 80070b8:	715a      	strb	r2, [r3, #5]

    return status;
 80070ba:	7ffb      	ldrb	r3, [r7, #31]
 80070bc:	e000      	b.n	80070c0 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 80070be:	2302      	movs	r3, #2
  }
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3720      	adds	r7, #32
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b086      	sub	sp, #24
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	60f8      	str	r0, [r7, #12]
 80070d0:	607a      	str	r2, [r7, #4]
 80070d2:	461a      	mov	r2, r3
 80070d4:	460b      	mov	r3, r1
 80070d6:	72fb      	strb	r3, [r7, #11]
 80070d8:	4613      	mov	r3, r2
 80070da:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	799b      	ldrb	r3, [r3, #6]
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d14a      	bne.n	800717c <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	795b      	ldrb	r3, [r3, #5]
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d101      	bne.n	80070f2 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 80070ee:	2302      	movs	r3, #2
 80070f0:	e045      	b.n	800717e <HAL_SUBGHZ_ExecSetCmd+0xb6>
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2201      	movs	r2, #1
 80070f6:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80070f8:	68f8      	ldr	r0, [r7, #12]
 80070fa:	f000 fa99 	bl	8007630 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 80070fe:	7afb      	ldrb	r3, [r7, #11]
 8007100:	2b84      	cmp	r3, #132	@ 0x84
 8007102:	d002      	beq.n	800710a <HAL_SUBGHZ_ExecSetCmd+0x42>
 8007104:	7afb      	ldrb	r3, [r7, #11]
 8007106:	2b94      	cmp	r3, #148	@ 0x94
 8007108:	d103      	bne.n	8007112 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2201      	movs	r2, #1
 800710e:	711a      	strb	r2, [r3, #4]
 8007110:	e002      	b.n	8007118 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2200      	movs	r2, #0
 8007116:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007118:	f7ff fe3c 	bl	8006d94 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800711c:	7afb      	ldrb	r3, [r7, #11]
 800711e:	4619      	mov	r1, r3
 8007120:	68f8      	ldr	r0, [r7, #12]
 8007122:	f000 f9d7 	bl	80074d4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007126:	2300      	movs	r3, #0
 8007128:	82bb      	strh	r3, [r7, #20]
 800712a:	e00a      	b.n	8007142 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800712c:	8abb      	ldrh	r3, [r7, #20]
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	4413      	add	r3, r2
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	4619      	mov	r1, r3
 8007136:	68f8      	ldr	r0, [r7, #12]
 8007138:	f000 f9cc 	bl	80074d4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800713c:	8abb      	ldrh	r3, [r7, #20]
 800713e:	3301      	adds	r3, #1
 8007140:	82bb      	strh	r3, [r7, #20]
 8007142:	8aba      	ldrh	r2, [r7, #20]
 8007144:	893b      	ldrh	r3, [r7, #8]
 8007146:	429a      	cmp	r2, r3
 8007148:	d3f0      	bcc.n	800712c <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800714a:	f7ff fe13 	bl	8006d74 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 800714e:	7afb      	ldrb	r3, [r7, #11]
 8007150:	2b84      	cmp	r3, #132	@ 0x84
 8007152:	d002      	beq.n	800715a <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007154:	68f8      	ldr	r0, [r7, #12]
 8007156:	f000 fa8f 	bl	8007678 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d002      	beq.n	8007168 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	75fb      	strb	r3, [r7, #23]
 8007166:	e001      	b.n	800716c <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007168:	2300      	movs	r3, #0
 800716a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2201      	movs	r2, #1
 8007170:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2200      	movs	r2, #0
 8007176:	715a      	strb	r2, [r3, #5]

    return status;
 8007178:	7dfb      	ldrb	r3, [r7, #23]
 800717a:	e000      	b.n	800717e <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800717c:	2302      	movs	r3, #2
  }
}
 800717e:	4618      	mov	r0, r3
 8007180:	3718      	adds	r7, #24
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}

08007186 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007186:	b580      	push	{r7, lr}
 8007188:	b088      	sub	sp, #32
 800718a:	af00      	add	r7, sp, #0
 800718c:	60f8      	str	r0, [r7, #12]
 800718e:	607a      	str	r2, [r7, #4]
 8007190:	461a      	mov	r2, r3
 8007192:	460b      	mov	r3, r1
 8007194:	72fb      	strb	r3, [r7, #11]
 8007196:	4613      	mov	r3, r2
 8007198:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	799b      	ldrb	r3, [r3, #6]
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d13d      	bne.n	8007224 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	795b      	ldrb	r3, [r3, #5]
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d101      	bne.n	80071b4 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 80071b0:	2302      	movs	r3, #2
 80071b2:	e038      	b.n	8007226 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2201      	movs	r2, #1
 80071b8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80071ba:	68f8      	ldr	r0, [r7, #12]
 80071bc:	f000 fa38 	bl	8007630 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80071c0:	f7ff fde8 	bl	8006d94 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80071c4:	7afb      	ldrb	r3, [r7, #11]
 80071c6:	4619      	mov	r1, r3
 80071c8:	68f8      	ldr	r0, [r7, #12]
 80071ca:	f000 f983 	bl	80074d4 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80071ce:	2100      	movs	r1, #0
 80071d0:	68f8      	ldr	r0, [r7, #12]
 80071d2:	f000 f97f 	bl	80074d4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80071d6:	2300      	movs	r3, #0
 80071d8:	82fb      	strh	r3, [r7, #22]
 80071da:	e009      	b.n	80071f0 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80071dc:	69b9      	ldr	r1, [r7, #24]
 80071de:	68f8      	ldr	r0, [r7, #12]
 80071e0:	f000 f9ce 	bl	8007580 <SUBGHZSPI_Receive>
      pData++;
 80071e4:	69bb      	ldr	r3, [r7, #24]
 80071e6:	3301      	adds	r3, #1
 80071e8:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80071ea:	8afb      	ldrh	r3, [r7, #22]
 80071ec:	3301      	adds	r3, #1
 80071ee:	82fb      	strh	r3, [r7, #22]
 80071f0:	8afa      	ldrh	r2, [r7, #22]
 80071f2:	893b      	ldrh	r3, [r7, #8]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d3f1      	bcc.n	80071dc <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80071f8:	f7ff fdbc 	bl	8006d74 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80071fc:	68f8      	ldr	r0, [r7, #12]
 80071fe:	f000 fa3b 	bl	8007678 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d002      	beq.n	8007210 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	77fb      	strb	r3, [r7, #31]
 800720e:	e001      	b.n	8007214 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8007210:	2300      	movs	r3, #0
 8007212:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2201      	movs	r2, #1
 8007218:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2200      	movs	r2, #0
 800721e:	715a      	strb	r2, [r3, #5]

    return status;
 8007220:	7ffb      	ldrb	r3, [r7, #31]
 8007222:	e000      	b.n	8007226 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007224:	2302      	movs	r3, #2
  }
}
 8007226:	4618      	mov	r0, r3
 8007228:	3720      	adds	r7, #32
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 800722e:	b580      	push	{r7, lr}
 8007230:	b086      	sub	sp, #24
 8007232:	af00      	add	r7, sp, #0
 8007234:	60f8      	str	r0, [r7, #12]
 8007236:	607a      	str	r2, [r7, #4]
 8007238:	461a      	mov	r2, r3
 800723a:	460b      	mov	r3, r1
 800723c:	72fb      	strb	r3, [r7, #11]
 800723e:	4613      	mov	r3, r2
 8007240:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	799b      	ldrb	r3, [r3, #6]
 8007246:	b2db      	uxtb	r3, r3
 8007248:	2b01      	cmp	r3, #1
 800724a:	d13e      	bne.n	80072ca <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	795b      	ldrb	r3, [r3, #5]
 8007250:	2b01      	cmp	r3, #1
 8007252:	d101      	bne.n	8007258 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8007254:	2302      	movs	r3, #2
 8007256:	e039      	b.n	80072cc <HAL_SUBGHZ_WriteBuffer+0x9e>
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2201      	movs	r2, #1
 800725c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800725e:	68f8      	ldr	r0, [r7, #12]
 8007260:	f000 f9e6 	bl	8007630 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007264:	f7ff fd96 	bl	8006d94 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8007268:	210e      	movs	r1, #14
 800726a:	68f8      	ldr	r0, [r7, #12]
 800726c:	f000 f932 	bl	80074d4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007270:	7afb      	ldrb	r3, [r7, #11]
 8007272:	4619      	mov	r1, r3
 8007274:	68f8      	ldr	r0, [r7, #12]
 8007276:	f000 f92d 	bl	80074d4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800727a:	2300      	movs	r3, #0
 800727c:	82bb      	strh	r3, [r7, #20]
 800727e:	e00a      	b.n	8007296 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007280:	8abb      	ldrh	r3, [r7, #20]
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	4413      	add	r3, r2
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	4619      	mov	r1, r3
 800728a:	68f8      	ldr	r0, [r7, #12]
 800728c:	f000 f922 	bl	80074d4 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007290:	8abb      	ldrh	r3, [r7, #20]
 8007292:	3301      	adds	r3, #1
 8007294:	82bb      	strh	r3, [r7, #20]
 8007296:	8aba      	ldrh	r2, [r7, #20]
 8007298:	893b      	ldrh	r3, [r7, #8]
 800729a:	429a      	cmp	r2, r3
 800729c:	d3f0      	bcc.n	8007280 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800729e:	f7ff fd69 	bl	8006d74 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80072a2:	68f8      	ldr	r0, [r7, #12]
 80072a4:	f000 f9e8 	bl	8007678 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d002      	beq.n	80072b6 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	75fb      	strb	r3, [r7, #23]
 80072b4:	e001      	b.n	80072ba <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 80072b6:	2300      	movs	r3, #0
 80072b8:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2201      	movs	r2, #1
 80072be:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2200      	movs	r2, #0
 80072c4:	715a      	strb	r2, [r3, #5]

    return status;
 80072c6:	7dfb      	ldrb	r3, [r7, #23]
 80072c8:	e000      	b.n	80072cc <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80072ca:	2302      	movs	r3, #2
  }
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3718      	adds	r7, #24
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b088      	sub	sp, #32
 80072d8:	af00      	add	r7, sp, #0
 80072da:	60f8      	str	r0, [r7, #12]
 80072dc:	607a      	str	r2, [r7, #4]
 80072de:	461a      	mov	r2, r3
 80072e0:	460b      	mov	r3, r1
 80072e2:	72fb      	strb	r3, [r7, #11]
 80072e4:	4613      	mov	r3, r2
 80072e6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	799b      	ldrb	r3, [r3, #6]
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d141      	bne.n	800737a <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	795b      	ldrb	r3, [r3, #5]
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d101      	bne.n	8007302 <HAL_SUBGHZ_ReadBuffer+0x2e>
 80072fe:	2302      	movs	r3, #2
 8007300:	e03c      	b.n	800737c <HAL_SUBGHZ_ReadBuffer+0xa8>
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2201      	movs	r2, #1
 8007306:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007308:	68f8      	ldr	r0, [r7, #12]
 800730a:	f000 f991 	bl	8007630 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800730e:	f7ff fd41 	bl	8006d94 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8007312:	211e      	movs	r1, #30
 8007314:	68f8      	ldr	r0, [r7, #12]
 8007316:	f000 f8dd 	bl	80074d4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800731a:	7afb      	ldrb	r3, [r7, #11]
 800731c:	4619      	mov	r1, r3
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	f000 f8d8 	bl	80074d4 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007324:	2100      	movs	r1, #0
 8007326:	68f8      	ldr	r0, [r7, #12]
 8007328:	f000 f8d4 	bl	80074d4 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800732c:	2300      	movs	r3, #0
 800732e:	82fb      	strh	r3, [r7, #22]
 8007330:	e009      	b.n	8007346 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007332:	69b9      	ldr	r1, [r7, #24]
 8007334:	68f8      	ldr	r0, [r7, #12]
 8007336:	f000 f923 	bl	8007580 <SUBGHZSPI_Receive>
      pData++;
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	3301      	adds	r3, #1
 800733e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007340:	8afb      	ldrh	r3, [r7, #22]
 8007342:	3301      	adds	r3, #1
 8007344:	82fb      	strh	r3, [r7, #22]
 8007346:	8afa      	ldrh	r2, [r7, #22]
 8007348:	893b      	ldrh	r3, [r7, #8]
 800734a:	429a      	cmp	r2, r3
 800734c:	d3f1      	bcc.n	8007332 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800734e:	f7ff fd11 	bl	8006d74 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007352:	68f8      	ldr	r0, [r7, #12]
 8007354:	f000 f990 	bl	8007678 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d002      	beq.n	8007366 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	77fb      	strb	r3, [r7, #31]
 8007364:	e001      	b.n	800736a <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8007366:	2300      	movs	r3, #0
 8007368:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2201      	movs	r2, #1
 800736e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2200      	movs	r2, #0
 8007374:	715a      	strb	r2, [r3, #5]

    return status;
 8007376:	7ffb      	ldrb	r3, [r7, #31]
 8007378:	e000      	b.n	800737c <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800737a:	2302      	movs	r3, #2
  }
}
 800737c:	4618      	mov	r0, r3
 800737e:	3720      	adds	r7, #32
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b084      	sub	sp, #16
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 800738c:	2300      	movs	r3, #0
 800738e:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8007390:	f107 020c 	add.w	r2, r7, #12
 8007394:	2302      	movs	r3, #2
 8007396:	2112      	movs	r1, #18
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f7ff fef4 	bl	8007186 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800739e:	7b3b      	ldrb	r3, [r7, #12]
 80073a0:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 80073a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80073a6:	021b      	lsls	r3, r3, #8
 80073a8:	b21a      	sxth	r2, r3
 80073aa:	7b7b      	ldrb	r3, [r7, #13]
 80073ac:	b21b      	sxth	r3, r3
 80073ae:	4313      	orrs	r3, r2
 80073b0:	b21b      	sxth	r3, r3
 80073b2:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 80073b4:	f107 020c 	add.w	r2, r7, #12
 80073b8:	2302      	movs	r3, #2
 80073ba:	2102      	movs	r1, #2
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f7ff fe83 	bl	80070c8 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 80073c2:	89fb      	ldrh	r3, [r7, #14]
 80073c4:	f003 0301 	and.w	r3, r3, #1
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d002      	beq.n	80073d2 <HAL_SUBGHZ_IRQHandler+0x4e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f011 fea9 	bl	8019124 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 80073d2:	89fb      	ldrh	r3, [r7, #14]
 80073d4:	085b      	lsrs	r3, r3, #1
 80073d6:	f003 0301 	and.w	r3, r3, #1
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d002      	beq.n	80073e4 <HAL_SUBGHZ_IRQHandler+0x60>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f011 feae 	bl	8019140 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 80073e4:	89fb      	ldrh	r3, [r7, #14]
 80073e6:	089b      	lsrs	r3, r3, #2
 80073e8:	f003 0301 	and.w	r3, r3, #1
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d002      	beq.n	80073f6 <HAL_SUBGHZ_IRQHandler+0x72>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f011 fefd 	bl	80191f0 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 80073f6:	89fb      	ldrh	r3, [r7, #14]
 80073f8:	08db      	lsrs	r3, r3, #3
 80073fa:	f003 0301 	and.w	r3, r3, #1
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d002      	beq.n	8007408 <HAL_SUBGHZ_IRQHandler+0x84>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f011 ff02 	bl	801920c <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8007408:	89fb      	ldrh	r3, [r7, #14]
 800740a:	091b      	lsrs	r3, r3, #4
 800740c:	f003 0301 	and.w	r3, r3, #1
 8007410:	2b00      	cmp	r3, #0
 8007412:	d002      	beq.n	800741a <HAL_SUBGHZ_IRQHandler+0x96>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f011 ff07 	bl	8019228 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800741a:	89fb      	ldrh	r3, [r7, #14]
 800741c:	095b      	lsrs	r3, r3, #5
 800741e:	f003 0301 	and.w	r3, r3, #1
 8007422:	2b00      	cmp	r3, #0
 8007424:	d002      	beq.n	800742c <HAL_SUBGHZ_IRQHandler+0xa8>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f011 fed4 	bl	80191d4 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 800742c:	89fb      	ldrh	r3, [r7, #14]
 800742e:	099b      	lsrs	r3, r3, #6
 8007430:	f003 0301 	and.w	r3, r3, #1
 8007434:	2b00      	cmp	r3, #0
 8007436:	d002      	beq.n	800743e <HAL_SUBGHZ_IRQHandler+0xba>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f011 fe8f 	bl	801915c <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 800743e:	89fb      	ldrh	r3, [r7, #14]
 8007440:	09db      	lsrs	r3, r3, #7
 8007442:	f003 0301 	and.w	r3, r3, #1
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00e      	beq.n	8007468 <HAL_SUBGHZ_IRQHandler+0xe4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800744a:	89fb      	ldrh	r3, [r7, #14]
 800744c:	0a1b      	lsrs	r3, r3, #8
 800744e:	f003 0301 	and.w	r3, r3, #1
 8007452:	2b00      	cmp	r3, #0
 8007454:	d004      	beq.n	8007460 <HAL_SUBGHZ_IRQHandler+0xdc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8007456:	2101      	movs	r1, #1
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f011 fe8d 	bl	8019178 <HAL_SUBGHZ_CADStatusCallback>
 800745e:	e003      	b.n	8007468 <HAL_SUBGHZ_IRQHandler+0xe4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8007460:	2100      	movs	r1, #0
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f011 fe88 	bl	8019178 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8007468:	89fb      	ldrh	r3, [r7, #14]
 800746a:	0a5b      	lsrs	r3, r3, #9
 800746c:	f003 0301 	and.w	r3, r3, #1
 8007470:	2b00      	cmp	r3, #0
 8007472:	d002      	beq.n	800747a <HAL_SUBGHZ_IRQHandler+0xf6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f011 fe9d 	bl	80191b4 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 800747a:	89fb      	ldrh	r3, [r7, #14]
 800747c:	0b9b      	lsrs	r3, r3, #14
 800747e:	f003 0301 	and.w	r3, r3, #1
 8007482:	2b00      	cmp	r3, #0
 8007484:	d002      	beq.n	800748c <HAL_SUBGHZ_IRQHandler+0x108>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f011 fedc 	bl	8019244 <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 800748c:	bf00      	nop
 800748e:	3710      	adds	r7, #16
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800749c:	4b0c      	ldr	r3, [pc, #48]	@ (80074d0 <SUBGHZSPI_Init+0x3c>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a0b      	ldr	r2, [pc, #44]	@ (80074d0 <SUBGHZSPI_Init+0x3c>)
 80074a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074a6:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 80074a8:	4a09      	ldr	r2, [pc, #36]	@ (80074d0 <SUBGHZSPI_Init+0x3c>)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 80074b0:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80074b2:	4b07      	ldr	r3, [pc, #28]	@ (80074d0 <SUBGHZSPI_Init+0x3c>)
 80074b4:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 80074b8:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80074ba:	4b05      	ldr	r3, [pc, #20]	@ (80074d0 <SUBGHZSPI_Init+0x3c>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a04      	ldr	r2, [pc, #16]	@ (80074d0 <SUBGHZSPI_Init+0x3c>)
 80074c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074c4:	6013      	str	r3, [r2, #0]
}
 80074c6:	bf00      	nop
 80074c8:	370c      	adds	r7, #12
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bc80      	pop	{r7}
 80074ce:	4770      	bx	lr
 80074d0:	58010000 	.word	0x58010000

080074d4 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b087      	sub	sp, #28
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	460b      	mov	r3, r1
 80074de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80074e0:	2300      	movs	r3, #0
 80074e2:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80074e4:	4b23      	ldr	r3, [pc, #140]	@ (8007574 <SUBGHZSPI_Transmit+0xa0>)
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	4613      	mov	r3, r2
 80074ea:	00db      	lsls	r3, r3, #3
 80074ec:	1a9b      	subs	r3, r3, r2
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	0cdb      	lsrs	r3, r3, #19
 80074f2:	2264      	movs	r2, #100	@ 0x64
 80074f4:	fb02 f303 	mul.w	r3, r2, r3
 80074f8:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d105      	bne.n	800750c <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8007500:	2301      	movs	r3, #1
 8007502:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	609a      	str	r2, [r3, #8]
      break;
 800750a:	e008      	b.n	800751e <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	3b01      	subs	r3, #1
 8007510:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007512:	4b19      	ldr	r3, [pc, #100]	@ (8007578 <SUBGHZSPI_Transmit+0xa4>)
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	f003 0302 	and.w	r3, r3, #2
 800751a:	2b02      	cmp	r3, #2
 800751c:	d1ed      	bne.n	80074fa <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 800751e:	4b17      	ldr	r3, [pc, #92]	@ (800757c <SUBGHZSPI_Transmit+0xa8>)
 8007520:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	78fa      	ldrb	r2, [r7, #3]
 8007526:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007528:	4b12      	ldr	r3, [pc, #72]	@ (8007574 <SUBGHZSPI_Transmit+0xa0>)
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	4613      	mov	r3, r2
 800752e:	00db      	lsls	r3, r3, #3
 8007530:	1a9b      	subs	r3, r3, r2
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	0cdb      	lsrs	r3, r3, #19
 8007536:	2264      	movs	r2, #100	@ 0x64
 8007538:	fb02 f303 	mul.w	r3, r2, r3
 800753c:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d105      	bne.n	8007550 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2201      	movs	r2, #1
 800754c:	609a      	str	r2, [r3, #8]
      break;
 800754e:	e008      	b.n	8007562 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	3b01      	subs	r3, #1
 8007554:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007556:	4b08      	ldr	r3, [pc, #32]	@ (8007578 <SUBGHZSPI_Transmit+0xa4>)
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	f003 0301 	and.w	r3, r3, #1
 800755e:	2b01      	cmp	r3, #1
 8007560:	d1ed      	bne.n	800753e <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8007562:	4b05      	ldr	r3, [pc, #20]	@ (8007578 <SUBGHZSPI_Transmit+0xa4>)
 8007564:	68db      	ldr	r3, [r3, #12]

  return status;
 8007566:	7dfb      	ldrb	r3, [r7, #23]
}
 8007568:	4618      	mov	r0, r3
 800756a:	371c      	adds	r7, #28
 800756c:	46bd      	mov	sp, r7
 800756e:	bc80      	pop	{r7}
 8007570:	4770      	bx	lr
 8007572:	bf00      	nop
 8007574:	20000070 	.word	0x20000070
 8007578:	58010000 	.word	0x58010000
 800757c:	5801000c 	.word	0x5801000c

08007580 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8007580:	b480      	push	{r7}
 8007582:	b087      	sub	sp, #28
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800758a:	2300      	movs	r3, #0
 800758c:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800758e:	4b25      	ldr	r3, [pc, #148]	@ (8007624 <SUBGHZSPI_Receive+0xa4>)
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	4613      	mov	r3, r2
 8007594:	00db      	lsls	r3, r3, #3
 8007596:	1a9b      	subs	r3, r3, r2
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	0cdb      	lsrs	r3, r3, #19
 800759c:	2264      	movs	r2, #100	@ 0x64
 800759e:	fb02 f303 	mul.w	r3, r2, r3
 80075a2:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d105      	bne.n	80075b6 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2201      	movs	r2, #1
 80075b2:	609a      	str	r2, [r3, #8]
      break;
 80075b4:	e008      	b.n	80075c8 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	3b01      	subs	r3, #1
 80075ba:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80075bc:	4b1a      	ldr	r3, [pc, #104]	@ (8007628 <SUBGHZSPI_Receive+0xa8>)
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	f003 0302 	and.w	r3, r3, #2
 80075c4:	2b02      	cmp	r3, #2
 80075c6:	d1ed      	bne.n	80075a4 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 80075c8:	4b18      	ldr	r3, [pc, #96]	@ (800762c <SUBGHZSPI_Receive+0xac>)
 80075ca:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	22ff      	movs	r2, #255	@ 0xff
 80075d0:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80075d2:	4b14      	ldr	r3, [pc, #80]	@ (8007624 <SUBGHZSPI_Receive+0xa4>)
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	4613      	mov	r3, r2
 80075d8:	00db      	lsls	r3, r3, #3
 80075da:	1a9b      	subs	r3, r3, r2
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	0cdb      	lsrs	r3, r3, #19
 80075e0:	2264      	movs	r2, #100	@ 0x64
 80075e2:	fb02 f303 	mul.w	r3, r2, r3
 80075e6:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d105      	bne.n	80075fa <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2201      	movs	r2, #1
 80075f6:	609a      	str	r2, [r3, #8]
      break;
 80075f8:	e008      	b.n	800760c <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	3b01      	subs	r3, #1
 80075fe:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007600:	4b09      	ldr	r3, [pc, #36]	@ (8007628 <SUBGHZSPI_Receive+0xa8>)
 8007602:	689b      	ldr	r3, [r3, #8]
 8007604:	f003 0301 	and.w	r3, r3, #1
 8007608:	2b01      	cmp	r3, #1
 800760a:	d1ed      	bne.n	80075e8 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 800760c:	4b06      	ldr	r3, [pc, #24]	@ (8007628 <SUBGHZSPI_Receive+0xa8>)
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	b2da      	uxtb	r2, r3
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	701a      	strb	r2, [r3, #0]

  return status;
 8007616:	7dfb      	ldrb	r3, [r7, #23]
}
 8007618:	4618      	mov	r0, r3
 800761a:	371c      	adds	r7, #28
 800761c:	46bd      	mov	sp, r7
 800761e:	bc80      	pop	{r7}
 8007620:	4770      	bx	lr
 8007622:	bf00      	nop
 8007624:	20000070 	.word	0x20000070
 8007628:	58010000 	.word	0x58010000
 800762c:	5801000c 	.word	0x5801000c

08007630 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b084      	sub	sp, #16
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	791b      	ldrb	r3, [r3, #4]
 800763c:	2b01      	cmp	r3, #1
 800763e:	d111      	bne.n	8007664 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8007640:	4b0c      	ldr	r3, [pc, #48]	@ (8007674 <SUBGHZ_CheckDeviceReady+0x44>)
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	4613      	mov	r3, r2
 8007646:	005b      	lsls	r3, r3, #1
 8007648:	4413      	add	r3, r2
 800764a:	00db      	lsls	r3, r3, #3
 800764c:	0c1b      	lsrs	r3, r3, #16
 800764e:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007650:	f7ff fba0 	bl	8006d94 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	3b01      	subs	r3, #1
 8007658:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d1f9      	bne.n	8007654 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007660:	f7ff fb88 	bl	8006d74 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 f807 	bl	8007678 <SUBGHZ_WaitOnBusy>
 800766a:	4603      	mov	r3, r0
}
 800766c:	4618      	mov	r0, r3
 800766e:	3710      	adds	r7, #16
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}
 8007674:	20000070 	.word	0x20000070

08007678 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b086      	sub	sp, #24
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8007680:	2300      	movs	r3, #0
 8007682:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8007684:	4b12      	ldr	r3, [pc, #72]	@ (80076d0 <SUBGHZ_WaitOnBusy+0x58>)
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	4613      	mov	r3, r2
 800768a:	005b      	lsls	r3, r3, #1
 800768c:	4413      	add	r3, r2
 800768e:	00db      	lsls	r3, r3, #3
 8007690:	0d1b      	lsrs	r3, r3, #20
 8007692:	2264      	movs	r2, #100	@ 0x64
 8007694:	fb02 f303 	mul.w	r3, r2, r3
 8007698:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 800769a:	f7ff fba9 	bl	8006df0 <LL_PWR_IsActiveFlag_RFBUSYMS>
 800769e:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d105      	bne.n	80076b2 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2202      	movs	r2, #2
 80076ae:	609a      	str	r2, [r3, #8]
      break;
 80076b0:	e009      	b.n	80076c6 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	3b01      	subs	r3, #1
 80076b6:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 80076b8:	f7ff fb88 	bl	8006dcc <LL_PWR_IsActiveFlag_RFBUSYS>
 80076bc:	4602      	mov	r2, r0
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	4013      	ands	r3, r2
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d0e9      	beq.n	800769a <SUBGHZ_WaitOnBusy+0x22>

  return status;
 80076c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3718      	adds	r7, #24
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	20000070 	.word	0x20000070

080076d4 <LL_RCC_GetUSARTClockSource>:
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80076dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80076e0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	401a      	ands	r2, r3
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	041b      	lsls	r3, r3, #16
 80076ec:	4313      	orrs	r3, r2
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	370c      	adds	r7, #12
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bc80      	pop	{r7}
 80076f6:	4770      	bx	lr

080076f8 <LL_RCC_GetLPUARTClockSource>:
{
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007700:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007704:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	4013      	ands	r3, r2
}
 800770c:	4618      	mov	r0, r3
 800770e:	370c      	adds	r7, #12
 8007710:	46bd      	mov	sp, r7
 8007712:	bc80      	pop	{r7}
 8007714:	4770      	bx	lr

08007716 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007716:	b580      	push	{r7, lr}
 8007718:	b082      	sub	sp, #8
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d101      	bne.n	8007728 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007724:	2301      	movs	r3, #1
 8007726:	e042      	b.n	80077ae <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800772e:	2b00      	cmp	r3, #0
 8007730:	d106      	bne.n	8007740 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f7fa fbb6 	bl	8001eac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2224      	movs	r2, #36	@ 0x24
 8007744:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f022 0201 	bic.w	r2, r2, #1
 8007756:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 fc3b 	bl	8007fd4 <UART_SetConfig>
 800775e:	4603      	mov	r3, r0
 8007760:	2b01      	cmp	r3, #1
 8007762:	d101      	bne.n	8007768 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	e022      	b.n	80077ae <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800776c:	2b00      	cmp	r3, #0
 800776e:	d002      	beq.n	8007776 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 fea3 	bl	80084bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	685a      	ldr	r2, [r3, #4]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007784:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	689a      	ldr	r2, [r3, #8]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007794:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f042 0201 	orr.w	r2, r2, #1
 80077a4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 ff29 	bl	80085fe <UART_CheckIdleState>
 80077ac:	4603      	mov	r3, r0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3708      	adds	r7, #8
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
	...

080077b8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b08a      	sub	sp, #40	@ 0x28
 80077bc:	af00      	add	r7, sp, #0
 80077be:	60f8      	str	r0, [r7, #12]
 80077c0:	60b9      	str	r1, [r7, #8]
 80077c2:	4613      	mov	r3, r2
 80077c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80077cc:	2b20      	cmp	r3, #32
 80077ce:	d137      	bne.n	8007840 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d002      	beq.n	80077dc <HAL_UART_Receive_IT+0x24>
 80077d6:	88fb      	ldrh	r3, [r7, #6]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d101      	bne.n	80077e0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	e030      	b.n	8007842 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2200      	movs	r2, #0
 80077e4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a18      	ldr	r2, [pc, #96]	@ (800784c <HAL_UART_Receive_IT+0x94>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d01f      	beq.n	8007830 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d018      	beq.n	8007830 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	e853 3f00 	ldrex	r3, [r3]
 800780a:	613b      	str	r3, [r7, #16]
   return(result);
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007812:	627b      	str	r3, [r7, #36]	@ 0x24
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	461a      	mov	r2, r3
 800781a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800781c:	623b      	str	r3, [r7, #32]
 800781e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007820:	69f9      	ldr	r1, [r7, #28]
 8007822:	6a3a      	ldr	r2, [r7, #32]
 8007824:	e841 2300 	strex	r3, r2, [r1]
 8007828:	61bb      	str	r3, [r7, #24]
   return(result);
 800782a:	69bb      	ldr	r3, [r7, #24]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d1e6      	bne.n	80077fe <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007830:	88fb      	ldrh	r3, [r7, #6]
 8007832:	461a      	mov	r2, r3
 8007834:	68b9      	ldr	r1, [r7, #8]
 8007836:	68f8      	ldr	r0, [r7, #12]
 8007838:	f000 fff8 	bl	800882c <UART_Start_Receive_IT>
 800783c:	4603      	mov	r3, r0
 800783e:	e000      	b.n	8007842 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007840:	2302      	movs	r3, #2
  }
}
 8007842:	4618      	mov	r0, r3
 8007844:	3728      	adds	r7, #40	@ 0x28
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	40008000 	.word	0x40008000

08007850 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b08a      	sub	sp, #40	@ 0x28
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	4613      	mov	r3, r2
 800785c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007864:	2b20      	cmp	r3, #32
 8007866:	d167      	bne.n	8007938 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d002      	beq.n	8007874 <HAL_UART_Transmit_DMA+0x24>
 800786e:	88fb      	ldrh	r3, [r7, #6]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d101      	bne.n	8007878 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007874:	2301      	movs	r3, #1
 8007876:	e060      	b.n	800793a <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	68ba      	ldr	r2, [r7, #8]
 800787c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	88fa      	ldrh	r2, [r7, #6]
 8007882:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	88fa      	ldrh	r2, [r7, #6]
 800788a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2200      	movs	r2, #0
 8007892:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2221      	movs	r2, #33	@ 0x21
 800789a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d028      	beq.n	80078f8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80078aa:	4a26      	ldr	r2, [pc, #152]	@ (8007944 <HAL_UART_Transmit_DMA+0xf4>)
 80078ac:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80078b2:	4a25      	ldr	r2, [pc, #148]	@ (8007948 <HAL_UART_Transmit_DMA+0xf8>)
 80078b4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80078ba:	4a24      	ldr	r2, [pc, #144]	@ (800794c <HAL_UART_Transmit_DMA+0xfc>)
 80078bc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80078c2:	2200      	movs	r2, #0
 80078c4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078ce:	4619      	mov	r1, r3
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	3328      	adds	r3, #40	@ 0x28
 80078d6:	461a      	mov	r2, r3
 80078d8:	88fb      	ldrh	r3, [r7, #6]
 80078da:	f7fb fd21 	bl	8003320 <HAL_DMA_Start_IT>
 80078de:	4603      	mov	r3, r0
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d009      	beq.n	80078f8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2210      	movs	r2, #16
 80078e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2220      	movs	r2, #32
 80078f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80078f4:	2301      	movs	r3, #1
 80078f6:	e020      	b.n	800793a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2240      	movs	r2, #64	@ 0x40
 80078fe:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	3308      	adds	r3, #8
 8007906:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	e853 3f00 	ldrex	r3, [r3]
 800790e:	613b      	str	r3, [r7, #16]
   return(result);
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007916:	627b      	str	r3, [r7, #36]	@ 0x24
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	3308      	adds	r3, #8
 800791e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007920:	623a      	str	r2, [r7, #32]
 8007922:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007924:	69f9      	ldr	r1, [r7, #28]
 8007926:	6a3a      	ldr	r2, [r7, #32]
 8007928:	e841 2300 	strex	r3, r2, [r1]
 800792c:	61bb      	str	r3, [r7, #24]
   return(result);
 800792e:	69bb      	ldr	r3, [r7, #24]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d1e5      	bne.n	8007900 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8007934:	2300      	movs	r3, #0
 8007936:	e000      	b.n	800793a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007938:	2302      	movs	r3, #2
  }
}
 800793a:	4618      	mov	r0, r3
 800793c:	3728      	adds	r7, #40	@ 0x28
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	08008bb7 	.word	0x08008bb7
 8007948:	08008c51 	.word	0x08008c51
 800794c:	08008c6d 	.word	0x08008c6d

08007950 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b0ba      	sub	sp, #232	@ 0xe8
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	69db      	ldr	r3, [r3, #28]
 800795e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007976:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800797a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800797e:	4013      	ands	r3, r2
 8007980:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007984:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007988:	2b00      	cmp	r3, #0
 800798a:	d11b      	bne.n	80079c4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800798c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007990:	f003 0320 	and.w	r3, r3, #32
 8007994:	2b00      	cmp	r3, #0
 8007996:	d015      	beq.n	80079c4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800799c:	f003 0320 	and.w	r3, r3, #32
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d105      	bne.n	80079b0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80079a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d009      	beq.n	80079c4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	f000 82e3 	beq.w	8007f80 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	4798      	blx	r3
      }
      return;
 80079c2:	e2dd      	b.n	8007f80 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80079c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	f000 8123 	beq.w	8007c14 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80079ce:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80079d2:	4b8d      	ldr	r3, [pc, #564]	@ (8007c08 <HAL_UART_IRQHandler+0x2b8>)
 80079d4:	4013      	ands	r3, r2
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d106      	bne.n	80079e8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80079da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80079de:	4b8b      	ldr	r3, [pc, #556]	@ (8007c0c <HAL_UART_IRQHandler+0x2bc>)
 80079e0:	4013      	ands	r3, r2
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	f000 8116 	beq.w	8007c14 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80079e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079ec:	f003 0301 	and.w	r3, r3, #1
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d011      	beq.n	8007a18 <HAL_UART_IRQHandler+0xc8>
 80079f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d00b      	beq.n	8007a18 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2201      	movs	r2, #1
 8007a06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a0e:	f043 0201 	orr.w	r2, r3, #1
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a1c:	f003 0302 	and.w	r3, r3, #2
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d011      	beq.n	8007a48 <HAL_UART_IRQHandler+0xf8>
 8007a24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a28:	f003 0301 	and.w	r3, r3, #1
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d00b      	beq.n	8007a48 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	2202      	movs	r2, #2
 8007a36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a3e:	f043 0204 	orr.w	r2, r3, #4
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a4c:	f003 0304 	and.w	r3, r3, #4
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d011      	beq.n	8007a78 <HAL_UART_IRQHandler+0x128>
 8007a54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a58:	f003 0301 	and.w	r3, r3, #1
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d00b      	beq.n	8007a78 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	2204      	movs	r2, #4
 8007a66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a6e:	f043 0202 	orr.w	r2, r3, #2
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a7c:	f003 0308 	and.w	r3, r3, #8
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d017      	beq.n	8007ab4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a88:	f003 0320 	and.w	r3, r3, #32
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d105      	bne.n	8007a9c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007a90:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007a94:	4b5c      	ldr	r3, [pc, #368]	@ (8007c08 <HAL_UART_IRQHandler+0x2b8>)
 8007a96:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d00b      	beq.n	8007ab4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	2208      	movs	r2, #8
 8007aa2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007aaa:	f043 0208 	orr.w	r2, r3, #8
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007ab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ab8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d012      	beq.n	8007ae6 <HAL_UART_IRQHandler+0x196>
 8007ac0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ac4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d00c      	beq.n	8007ae6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007ad4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007adc:	f043 0220 	orr.w	r2, r3, #32
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	f000 8249 	beq.w	8007f84 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007af6:	f003 0320 	and.w	r3, r3, #32
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d013      	beq.n	8007b26 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007afe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b02:	f003 0320 	and.w	r3, r3, #32
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d105      	bne.n	8007b16 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007b0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d007      	beq.n	8007b26 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d003      	beq.n	8007b26 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b2c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b3a:	2b40      	cmp	r3, #64	@ 0x40
 8007b3c:	d005      	beq.n	8007b4a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007b3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b42:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d054      	beq.n	8007bf4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 ffce 	bl	8008aec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b5a:	2b40      	cmp	r3, #64	@ 0x40
 8007b5c:	d146      	bne.n	8007bec <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	3308      	adds	r3, #8
 8007b64:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b68:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007b6c:	e853 3f00 	ldrex	r3, [r3]
 8007b70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007b74:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007b78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	3308      	adds	r3, #8
 8007b86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007b8a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007b8e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007b96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007b9a:	e841 2300 	strex	r3, r2, [r1]
 8007b9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007ba2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d1d9      	bne.n	8007b5e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d017      	beq.n	8007be4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bba:	4a15      	ldr	r2, [pc, #84]	@ (8007c10 <HAL_UART_IRQHandler+0x2c0>)
 8007bbc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f7fb fc87 	bl	80034d8 <HAL_DMA_Abort_IT>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d019      	beq.n	8007c04 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007bde:	4610      	mov	r0, r2
 8007be0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007be2:	e00f      	b.n	8007c04 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 f9e0 	bl	8007faa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bea:	e00b      	b.n	8007c04 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 f9dc 	bl	8007faa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bf2:	e007      	b.n	8007c04 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 f9d8 	bl	8007faa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007c02:	e1bf      	b.n	8007f84 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c04:	bf00      	nop
    return;
 8007c06:	e1bd      	b.n	8007f84 <HAL_UART_IRQHandler+0x634>
 8007c08:	10000001 	.word	0x10000001
 8007c0c:	04000120 	.word	0x04000120
 8007c10:	08008ced 	.word	0x08008ced

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	f040 8153 	bne.w	8007ec4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c22:	f003 0310 	and.w	r3, r3, #16
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	f000 814c 	beq.w	8007ec4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c30:	f003 0310 	and.w	r3, r3, #16
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	f000 8145 	beq.w	8007ec4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	2210      	movs	r2, #16
 8007c40:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c4c:	2b40      	cmp	r3, #64	@ 0x40
 8007c4e:	f040 80bb 	bne.w	8007dc8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	f000 818f 	beq.w	8007f88 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007c70:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007c74:	429a      	cmp	r2, r3
 8007c76:	f080 8187 	bcs.w	8007f88 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007c80:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f003 0320 	and.w	r3, r3, #32
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	f040 8087 	bne.w	8007da6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007ca4:	e853 3f00 	ldrex	r3, [r3]
 8007ca8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007cac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007cb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007cb4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007cc2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007cc6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007cce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007cd2:	e841 2300 	strex	r3, r2, [r1]
 8007cd6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007cda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d1da      	bne.n	8007c98 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	3308      	adds	r3, #8
 8007ce8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007cec:	e853 3f00 	ldrex	r3, [r3]
 8007cf0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007cf2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007cf4:	f023 0301 	bic.w	r3, r3, #1
 8007cf8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	3308      	adds	r3, #8
 8007d02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007d06:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007d0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007d0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007d12:	e841 2300 	strex	r3, r2, [r1]
 8007d16:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007d18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d1e1      	bne.n	8007ce2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	3308      	adds	r3, #8
 8007d24:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d28:	e853 3f00 	ldrex	r3, [r3]
 8007d2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007d2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007d30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	3308      	adds	r3, #8
 8007d3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007d42:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007d44:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d46:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007d48:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007d4a:	e841 2300 	strex	r3, r2, [r1]
 8007d4e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007d50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d1e3      	bne.n	8007d1e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2220      	movs	r2, #32
 8007d5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d6c:	e853 3f00 	ldrex	r3, [r3]
 8007d70:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007d72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d74:	f023 0310 	bic.w	r3, r3, #16
 8007d78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	461a      	mov	r2, r3
 8007d82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d86:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007d88:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d8a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007d8c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007d8e:	e841 2300 	strex	r3, r2, [r1]
 8007d92:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007d94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d1e4      	bne.n	8007d64 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007da0:	4618      	mov	r0, r3
 8007da2:	f7fb fb3b 	bl	800341c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2202      	movs	r2, #2
 8007daa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	1ad3      	subs	r3, r2, r3
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 f8fb 	bl	8007fbc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007dc6:	e0df      	b.n	8007f88 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	1ad3      	subs	r3, r2, r3
 8007dd8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f000 80d1 	beq.w	8007f8c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007dea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	f000 80cc 	beq.w	8007f8c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dfc:	e853 3f00 	ldrex	r3, [r3]
 8007e00:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e08:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	461a      	mov	r2, r3
 8007e12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007e16:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e18:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e1a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007e1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e1e:	e841 2300 	strex	r3, r2, [r1]
 8007e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007e24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d1e4      	bne.n	8007df4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	3308      	adds	r3, #8
 8007e30:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e34:	e853 3f00 	ldrex	r3, [r3]
 8007e38:	623b      	str	r3, [r7, #32]
   return(result);
 8007e3a:	6a3b      	ldr	r3, [r7, #32]
 8007e3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007e40:	f023 0301 	bic.w	r3, r3, #1
 8007e44:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	3308      	adds	r3, #8
 8007e4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007e52:	633a      	str	r2, [r7, #48]	@ 0x30
 8007e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e5a:	e841 2300 	strex	r3, r2, [r1]
 8007e5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d1e1      	bne.n	8007e2a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2220      	movs	r2, #32
 8007e6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e80:	693b      	ldr	r3, [r7, #16]
 8007e82:	e853 3f00 	ldrex	r3, [r3]
 8007e86:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f023 0310 	bic.w	r3, r3, #16
 8007e8e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	461a      	mov	r2, r3
 8007e98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007e9c:	61fb      	str	r3, [r7, #28]
 8007e9e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea0:	69b9      	ldr	r1, [r7, #24]
 8007ea2:	69fa      	ldr	r2, [r7, #28]
 8007ea4:	e841 2300 	strex	r3, r2, [r1]
 8007ea8:	617b      	str	r3, [r7, #20]
   return(result);
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d1e4      	bne.n	8007e7a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2202      	movs	r2, #2
 8007eb4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007eb6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007eba:	4619      	mov	r1, r3
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 f87d 	bl	8007fbc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ec2:	e063      	b.n	8007f8c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ec8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d00e      	beq.n	8007eee <HAL_UART_IRQHandler+0x59e>
 8007ed0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ed4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d008      	beq.n	8007eee <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007ee4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f001 fc5e 	bl	80097a8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007eec:	e051      	b.n	8007f92 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ef2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d014      	beq.n	8007f24 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007efa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007efe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d105      	bne.n	8007f12 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007f06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007f0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d008      	beq.n	8007f24 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d03a      	beq.n	8007f90 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	4798      	blx	r3
    }
    return;
 8007f22:	e035      	b.n	8007f90 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007f24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d009      	beq.n	8007f44 <HAL_UART_IRQHandler+0x5f4>
 8007f30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d003      	beq.n	8007f44 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 feeb 	bl	8008d18 <UART_EndTransmit_IT>
    return;
 8007f42:	e026      	b.n	8007f92 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007f44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f48:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d009      	beq.n	8007f64 <HAL_UART_IRQHandler+0x614>
 8007f50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f54:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d003      	beq.n	8007f64 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f001 fc35 	bl	80097cc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007f62:	e016      	b.n	8007f92 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007f68:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d010      	beq.n	8007f92 <HAL_UART_IRQHandler+0x642>
 8007f70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	da0c      	bge.n	8007f92 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f001 fc1e 	bl	80097ba <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007f7e:	e008      	b.n	8007f92 <HAL_UART_IRQHandler+0x642>
      return;
 8007f80:	bf00      	nop
 8007f82:	e006      	b.n	8007f92 <HAL_UART_IRQHandler+0x642>
    return;
 8007f84:	bf00      	nop
 8007f86:	e004      	b.n	8007f92 <HAL_UART_IRQHandler+0x642>
      return;
 8007f88:	bf00      	nop
 8007f8a:	e002      	b.n	8007f92 <HAL_UART_IRQHandler+0x642>
      return;
 8007f8c:	bf00      	nop
 8007f8e:	e000      	b.n	8007f92 <HAL_UART_IRQHandler+0x642>
    return;
 8007f90:	bf00      	nop
  }
}
 8007f92:	37e8      	adds	r7, #232	@ 0xe8
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b083      	sub	sp, #12
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007fa0:	bf00      	nop
 8007fa2:	370c      	adds	r7, #12
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bc80      	pop	{r7}
 8007fa8:	4770      	bx	lr

08007faa <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007faa:	b480      	push	{r7}
 8007fac:	b083      	sub	sp, #12
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007fb2:	bf00      	nop
 8007fb4:	370c      	adds	r7, #12
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bc80      	pop	{r7}
 8007fba:	4770      	bx	lr

08007fbc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007fc8:	bf00      	nop
 8007fca:	370c      	adds	r7, #12
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bc80      	pop	{r7}
 8007fd0:	4770      	bx	lr
	...

08007fd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007fd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007fd8:	b08c      	sub	sp, #48	@ 0x30
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	689a      	ldr	r2, [r3, #8]
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	691b      	ldr	r3, [r3, #16]
 8007fec:	431a      	orrs	r2, r3
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	695b      	ldr	r3, [r3, #20]
 8007ff2:	431a      	orrs	r2, r3
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	69db      	ldr	r3, [r3, #28]
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	4b94      	ldr	r3, [pc, #592]	@ (8008254 <UART_SetConfig+0x280>)
 8008004:	4013      	ands	r3, r2
 8008006:	697a      	ldr	r2, [r7, #20]
 8008008:	6812      	ldr	r2, [r2, #0]
 800800a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800800c:	430b      	orrs	r3, r1
 800800e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	68da      	ldr	r2, [r3, #12]
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	430a      	orrs	r2, r1
 8008024:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	699b      	ldr	r3, [r3, #24]
 800802a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	4a89      	ldr	r2, [pc, #548]	@ (8008258 <UART_SetConfig+0x284>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d004      	beq.n	8008040 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	6a1b      	ldr	r3, [r3, #32]
 800803a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800803c:	4313      	orrs	r3, r2
 800803e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800804a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800804e:	697a      	ldr	r2, [r7, #20]
 8008050:	6812      	ldr	r2, [r2, #0]
 8008052:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008054:	430b      	orrs	r3, r1
 8008056:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800805e:	f023 010f 	bic.w	r1, r3, #15
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	430a      	orrs	r2, r1
 800806c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a7a      	ldr	r2, [pc, #488]	@ (800825c <UART_SetConfig+0x288>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d127      	bne.n	80080c8 <UART_SetConfig+0xf4>
 8008078:	2003      	movs	r0, #3
 800807a:	f7ff fb2b 	bl	80076d4 <LL_RCC_GetUSARTClockSource>
 800807e:	4603      	mov	r3, r0
 8008080:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 8008084:	2b03      	cmp	r3, #3
 8008086:	d81b      	bhi.n	80080c0 <UART_SetConfig+0xec>
 8008088:	a201      	add	r2, pc, #4	@ (adr r2, 8008090 <UART_SetConfig+0xbc>)
 800808a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800808e:	bf00      	nop
 8008090:	080080a1 	.word	0x080080a1
 8008094:	080080b1 	.word	0x080080b1
 8008098:	080080a9 	.word	0x080080a9
 800809c:	080080b9 	.word	0x080080b9
 80080a0:	2301      	movs	r3, #1
 80080a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080a6:	e080      	b.n	80081aa <UART_SetConfig+0x1d6>
 80080a8:	2302      	movs	r3, #2
 80080aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080ae:	e07c      	b.n	80081aa <UART_SetConfig+0x1d6>
 80080b0:	2304      	movs	r3, #4
 80080b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080b6:	e078      	b.n	80081aa <UART_SetConfig+0x1d6>
 80080b8:	2308      	movs	r3, #8
 80080ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080be:	e074      	b.n	80081aa <UART_SetConfig+0x1d6>
 80080c0:	2310      	movs	r3, #16
 80080c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080c6:	e070      	b.n	80081aa <UART_SetConfig+0x1d6>
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a64      	ldr	r2, [pc, #400]	@ (8008260 <UART_SetConfig+0x28c>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d138      	bne.n	8008144 <UART_SetConfig+0x170>
 80080d2:	200c      	movs	r0, #12
 80080d4:	f7ff fafe 	bl	80076d4 <LL_RCC_GetUSARTClockSource>
 80080d8:	4603      	mov	r3, r0
 80080da:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 80080de:	2b0c      	cmp	r3, #12
 80080e0:	d82c      	bhi.n	800813c <UART_SetConfig+0x168>
 80080e2:	a201      	add	r2, pc, #4	@ (adr r2, 80080e8 <UART_SetConfig+0x114>)
 80080e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080e8:	0800811d 	.word	0x0800811d
 80080ec:	0800813d 	.word	0x0800813d
 80080f0:	0800813d 	.word	0x0800813d
 80080f4:	0800813d 	.word	0x0800813d
 80080f8:	0800812d 	.word	0x0800812d
 80080fc:	0800813d 	.word	0x0800813d
 8008100:	0800813d 	.word	0x0800813d
 8008104:	0800813d 	.word	0x0800813d
 8008108:	08008125 	.word	0x08008125
 800810c:	0800813d 	.word	0x0800813d
 8008110:	0800813d 	.word	0x0800813d
 8008114:	0800813d 	.word	0x0800813d
 8008118:	08008135 	.word	0x08008135
 800811c:	2300      	movs	r3, #0
 800811e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008122:	e042      	b.n	80081aa <UART_SetConfig+0x1d6>
 8008124:	2302      	movs	r3, #2
 8008126:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800812a:	e03e      	b.n	80081aa <UART_SetConfig+0x1d6>
 800812c:	2304      	movs	r3, #4
 800812e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008132:	e03a      	b.n	80081aa <UART_SetConfig+0x1d6>
 8008134:	2308      	movs	r3, #8
 8008136:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800813a:	e036      	b.n	80081aa <UART_SetConfig+0x1d6>
 800813c:	2310      	movs	r3, #16
 800813e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008142:	e032      	b.n	80081aa <UART_SetConfig+0x1d6>
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a43      	ldr	r2, [pc, #268]	@ (8008258 <UART_SetConfig+0x284>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d12a      	bne.n	80081a4 <UART_SetConfig+0x1d0>
 800814e:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8008152:	f7ff fad1 	bl	80076f8 <LL_RCC_GetLPUARTClockSource>
 8008156:	4603      	mov	r3, r0
 8008158:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800815c:	d01a      	beq.n	8008194 <UART_SetConfig+0x1c0>
 800815e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008162:	d81b      	bhi.n	800819c <UART_SetConfig+0x1c8>
 8008164:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008168:	d00c      	beq.n	8008184 <UART_SetConfig+0x1b0>
 800816a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800816e:	d815      	bhi.n	800819c <UART_SetConfig+0x1c8>
 8008170:	2b00      	cmp	r3, #0
 8008172:	d003      	beq.n	800817c <UART_SetConfig+0x1a8>
 8008174:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008178:	d008      	beq.n	800818c <UART_SetConfig+0x1b8>
 800817a:	e00f      	b.n	800819c <UART_SetConfig+0x1c8>
 800817c:	2300      	movs	r3, #0
 800817e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008182:	e012      	b.n	80081aa <UART_SetConfig+0x1d6>
 8008184:	2302      	movs	r3, #2
 8008186:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800818a:	e00e      	b.n	80081aa <UART_SetConfig+0x1d6>
 800818c:	2304      	movs	r3, #4
 800818e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008192:	e00a      	b.n	80081aa <UART_SetConfig+0x1d6>
 8008194:	2308      	movs	r3, #8
 8008196:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800819a:	e006      	b.n	80081aa <UART_SetConfig+0x1d6>
 800819c:	2310      	movs	r3, #16
 800819e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081a2:	e002      	b.n	80081aa <UART_SetConfig+0x1d6>
 80081a4:	2310      	movs	r3, #16
 80081a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a2a      	ldr	r2, [pc, #168]	@ (8008258 <UART_SetConfig+0x284>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	f040 80a4 	bne.w	80082fe <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80081b6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80081ba:	2b08      	cmp	r3, #8
 80081bc:	d823      	bhi.n	8008206 <UART_SetConfig+0x232>
 80081be:	a201      	add	r2, pc, #4	@ (adr r2, 80081c4 <UART_SetConfig+0x1f0>)
 80081c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081c4:	080081e9 	.word	0x080081e9
 80081c8:	08008207 	.word	0x08008207
 80081cc:	080081f1 	.word	0x080081f1
 80081d0:	08008207 	.word	0x08008207
 80081d4:	080081f7 	.word	0x080081f7
 80081d8:	08008207 	.word	0x08008207
 80081dc:	08008207 	.word	0x08008207
 80081e0:	08008207 	.word	0x08008207
 80081e4:	080081ff 	.word	0x080081ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081e8:	f7fd fde0 	bl	8005dac <HAL_RCC_GetPCLK1Freq>
 80081ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80081ee:	e010      	b.n	8008212 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081f0:	4b1c      	ldr	r3, [pc, #112]	@ (8008264 <UART_SetConfig+0x290>)
 80081f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80081f4:	e00d      	b.n	8008212 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081f6:	f7fd fd25 	bl	8005c44 <HAL_RCC_GetSysClockFreq>
 80081fa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80081fc:	e009      	b.n	8008212 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008202:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008204:	e005      	b.n	8008212 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8008206:	2300      	movs	r3, #0
 8008208:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008210:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008214:	2b00      	cmp	r3, #0
 8008216:	f000 8137 	beq.w	8008488 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800821e:	4a12      	ldr	r2, [pc, #72]	@ (8008268 <UART_SetConfig+0x294>)
 8008220:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008224:	461a      	mov	r2, r3
 8008226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008228:	fbb3 f3f2 	udiv	r3, r3, r2
 800822c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	685a      	ldr	r2, [r3, #4]
 8008232:	4613      	mov	r3, r2
 8008234:	005b      	lsls	r3, r3, #1
 8008236:	4413      	add	r3, r2
 8008238:	69ba      	ldr	r2, [r7, #24]
 800823a:	429a      	cmp	r2, r3
 800823c:	d305      	bcc.n	800824a <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008244:	69ba      	ldr	r2, [r7, #24]
 8008246:	429a      	cmp	r2, r3
 8008248:	d910      	bls.n	800826c <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800824a:	2301      	movs	r3, #1
 800824c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008250:	e11a      	b.n	8008488 <UART_SetConfig+0x4b4>
 8008252:	bf00      	nop
 8008254:	cfff69f3 	.word	0xcfff69f3
 8008258:	40008000 	.word	0x40008000
 800825c:	40013800 	.word	0x40013800
 8008260:	40004400 	.word	0x40004400
 8008264:	00f42400 	.word	0x00f42400
 8008268:	08020c70 	.word	0x08020c70
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800826c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800826e:	2200      	movs	r2, #0
 8008270:	60bb      	str	r3, [r7, #8]
 8008272:	60fa      	str	r2, [r7, #12]
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008278:	4a8e      	ldr	r2, [pc, #568]	@ (80084b4 <UART_SetConfig+0x4e0>)
 800827a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800827e:	b29b      	uxth	r3, r3
 8008280:	2200      	movs	r2, #0
 8008282:	603b      	str	r3, [r7, #0]
 8008284:	607a      	str	r2, [r7, #4]
 8008286:	e9d7 2300 	ldrd	r2, r3, [r7]
 800828a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800828e:	f7f8 fd55 	bl	8000d3c <__aeabi_uldivmod>
 8008292:	4602      	mov	r2, r0
 8008294:	460b      	mov	r3, r1
 8008296:	4610      	mov	r0, r2
 8008298:	4619      	mov	r1, r3
 800829a:	f04f 0200 	mov.w	r2, #0
 800829e:	f04f 0300 	mov.w	r3, #0
 80082a2:	020b      	lsls	r3, r1, #8
 80082a4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80082a8:	0202      	lsls	r2, r0, #8
 80082aa:	6979      	ldr	r1, [r7, #20]
 80082ac:	6849      	ldr	r1, [r1, #4]
 80082ae:	0849      	lsrs	r1, r1, #1
 80082b0:	2000      	movs	r0, #0
 80082b2:	460c      	mov	r4, r1
 80082b4:	4605      	mov	r5, r0
 80082b6:	eb12 0804 	adds.w	r8, r2, r4
 80082ba:	eb43 0905 	adc.w	r9, r3, r5
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	469a      	mov	sl, r3
 80082c6:	4693      	mov	fp, r2
 80082c8:	4652      	mov	r2, sl
 80082ca:	465b      	mov	r3, fp
 80082cc:	4640      	mov	r0, r8
 80082ce:	4649      	mov	r1, r9
 80082d0:	f7f8 fd34 	bl	8000d3c <__aeabi_uldivmod>
 80082d4:	4602      	mov	r2, r0
 80082d6:	460b      	mov	r3, r1
 80082d8:	4613      	mov	r3, r2
 80082da:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80082dc:	6a3b      	ldr	r3, [r7, #32]
 80082de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80082e2:	d308      	bcc.n	80082f6 <UART_SetConfig+0x322>
 80082e4:	6a3b      	ldr	r3, [r7, #32]
 80082e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80082ea:	d204      	bcs.n	80082f6 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	6a3a      	ldr	r2, [r7, #32]
 80082f2:	60da      	str	r2, [r3, #12]
 80082f4:	e0c8      	b.n	8008488 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80082f6:	2301      	movs	r3, #1
 80082f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80082fc:	e0c4      	b.n	8008488 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	69db      	ldr	r3, [r3, #28]
 8008302:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008306:	d167      	bne.n	80083d8 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8008308:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800830c:	2b08      	cmp	r3, #8
 800830e:	d828      	bhi.n	8008362 <UART_SetConfig+0x38e>
 8008310:	a201      	add	r2, pc, #4	@ (adr r2, 8008318 <UART_SetConfig+0x344>)
 8008312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008316:	bf00      	nop
 8008318:	0800833d 	.word	0x0800833d
 800831c:	08008345 	.word	0x08008345
 8008320:	0800834d 	.word	0x0800834d
 8008324:	08008363 	.word	0x08008363
 8008328:	08008353 	.word	0x08008353
 800832c:	08008363 	.word	0x08008363
 8008330:	08008363 	.word	0x08008363
 8008334:	08008363 	.word	0x08008363
 8008338:	0800835b 	.word	0x0800835b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800833c:	f7fd fd36 	bl	8005dac <HAL_RCC_GetPCLK1Freq>
 8008340:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008342:	e014      	b.n	800836e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008344:	f7fd fd44 	bl	8005dd0 <HAL_RCC_GetPCLK2Freq>
 8008348:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800834a:	e010      	b.n	800836e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800834c:	4b5a      	ldr	r3, [pc, #360]	@ (80084b8 <UART_SetConfig+0x4e4>)
 800834e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008350:	e00d      	b.n	800836e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008352:	f7fd fc77 	bl	8005c44 <HAL_RCC_GetSysClockFreq>
 8008356:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008358:	e009      	b.n	800836e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800835a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800835e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008360:	e005      	b.n	800836e <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8008362:	2300      	movs	r3, #0
 8008364:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008366:	2301      	movs	r3, #1
 8008368:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800836c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800836e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008370:	2b00      	cmp	r3, #0
 8008372:	f000 8089 	beq.w	8008488 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800837a:	4a4e      	ldr	r2, [pc, #312]	@ (80084b4 <UART_SetConfig+0x4e0>)
 800837c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008380:	461a      	mov	r2, r3
 8008382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008384:	fbb3 f3f2 	udiv	r3, r3, r2
 8008388:	005a      	lsls	r2, r3, #1
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	085b      	lsrs	r3, r3, #1
 8008390:	441a      	add	r2, r3
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	fbb2 f3f3 	udiv	r3, r2, r3
 800839a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800839c:	6a3b      	ldr	r3, [r7, #32]
 800839e:	2b0f      	cmp	r3, #15
 80083a0:	d916      	bls.n	80083d0 <UART_SetConfig+0x3fc>
 80083a2:	6a3b      	ldr	r3, [r7, #32]
 80083a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083a8:	d212      	bcs.n	80083d0 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80083aa:	6a3b      	ldr	r3, [r7, #32]
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	f023 030f 	bic.w	r3, r3, #15
 80083b2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80083b4:	6a3b      	ldr	r3, [r7, #32]
 80083b6:	085b      	lsrs	r3, r3, #1
 80083b8:	b29b      	uxth	r3, r3
 80083ba:	f003 0307 	and.w	r3, r3, #7
 80083be:	b29a      	uxth	r2, r3
 80083c0:	8bfb      	ldrh	r3, [r7, #30]
 80083c2:	4313      	orrs	r3, r2
 80083c4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	8bfa      	ldrh	r2, [r7, #30]
 80083cc:	60da      	str	r2, [r3, #12]
 80083ce:	e05b      	b.n	8008488 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80083d0:	2301      	movs	r3, #1
 80083d2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80083d6:	e057      	b.n	8008488 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80083d8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80083dc:	2b08      	cmp	r3, #8
 80083de:	d828      	bhi.n	8008432 <UART_SetConfig+0x45e>
 80083e0:	a201      	add	r2, pc, #4	@ (adr r2, 80083e8 <UART_SetConfig+0x414>)
 80083e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e6:	bf00      	nop
 80083e8:	0800840d 	.word	0x0800840d
 80083ec:	08008415 	.word	0x08008415
 80083f0:	0800841d 	.word	0x0800841d
 80083f4:	08008433 	.word	0x08008433
 80083f8:	08008423 	.word	0x08008423
 80083fc:	08008433 	.word	0x08008433
 8008400:	08008433 	.word	0x08008433
 8008404:	08008433 	.word	0x08008433
 8008408:	0800842b 	.word	0x0800842b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800840c:	f7fd fcce 	bl	8005dac <HAL_RCC_GetPCLK1Freq>
 8008410:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008412:	e014      	b.n	800843e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008414:	f7fd fcdc 	bl	8005dd0 <HAL_RCC_GetPCLK2Freq>
 8008418:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800841a:	e010      	b.n	800843e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800841c:	4b26      	ldr	r3, [pc, #152]	@ (80084b8 <UART_SetConfig+0x4e4>)
 800841e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008420:	e00d      	b.n	800843e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008422:	f7fd fc0f 	bl	8005c44 <HAL_RCC_GetSysClockFreq>
 8008426:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008428:	e009      	b.n	800843e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800842a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800842e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008430:	e005      	b.n	800843e <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8008432:	2300      	movs	r3, #0
 8008434:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008436:	2301      	movs	r3, #1
 8008438:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800843c:	bf00      	nop
    }

    if (pclk != 0U)
 800843e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008440:	2b00      	cmp	r3, #0
 8008442:	d021      	beq.n	8008488 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008448:	4a1a      	ldr	r2, [pc, #104]	@ (80084b4 <UART_SetConfig+0x4e0>)
 800844a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800844e:	461a      	mov	r2, r3
 8008450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008452:	fbb3 f2f2 	udiv	r2, r3, r2
 8008456:	697b      	ldr	r3, [r7, #20]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	085b      	lsrs	r3, r3, #1
 800845c:	441a      	add	r2, r3
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	fbb2 f3f3 	udiv	r3, r2, r3
 8008466:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008468:	6a3b      	ldr	r3, [r7, #32]
 800846a:	2b0f      	cmp	r3, #15
 800846c:	d909      	bls.n	8008482 <UART_SetConfig+0x4ae>
 800846e:	6a3b      	ldr	r3, [r7, #32]
 8008470:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008474:	d205      	bcs.n	8008482 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008476:	6a3b      	ldr	r3, [r7, #32]
 8008478:	b29a      	uxth	r2, r3
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	60da      	str	r2, [r3, #12]
 8008480:	e002      	b.n	8008488 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8008482:	2301      	movs	r3, #1
 8008484:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	2201      	movs	r2, #1
 800848c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	2201      	movs	r2, #1
 8008494:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	2200      	movs	r2, #0
 800849c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	2200      	movs	r2, #0
 80084a2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80084a4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3730      	adds	r7, #48	@ 0x30
 80084ac:	46bd      	mov	sp, r7
 80084ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80084b2:	bf00      	nop
 80084b4:	08020c70 	.word	0x08020c70
 80084b8:	00f42400 	.word	0x00f42400

080084bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80084bc:	b480      	push	{r7}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084c8:	f003 0301 	and.w	r3, r3, #1
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d00a      	beq.n	80084e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	430a      	orrs	r2, r1
 80084e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084ea:	f003 0302 	and.w	r3, r3, #2
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d00a      	beq.n	8008508 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	430a      	orrs	r2, r1
 8008506:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800850c:	f003 0304 	and.w	r3, r3, #4
 8008510:	2b00      	cmp	r3, #0
 8008512:	d00a      	beq.n	800852a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	430a      	orrs	r2, r1
 8008528:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800852e:	f003 0308 	and.w	r3, r3, #8
 8008532:	2b00      	cmp	r3, #0
 8008534:	d00a      	beq.n	800854c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	430a      	orrs	r2, r1
 800854a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008550:	f003 0310 	and.w	r3, r3, #16
 8008554:	2b00      	cmp	r3, #0
 8008556:	d00a      	beq.n	800856e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	689b      	ldr	r3, [r3, #8]
 800855e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	430a      	orrs	r2, r1
 800856c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008572:	f003 0320 	and.w	r3, r3, #32
 8008576:	2b00      	cmp	r3, #0
 8008578:	d00a      	beq.n	8008590 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	430a      	orrs	r2, r1
 800858e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008598:	2b00      	cmp	r3, #0
 800859a:	d01a      	beq.n	80085d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	430a      	orrs	r2, r1
 80085b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80085ba:	d10a      	bne.n	80085d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	430a      	orrs	r2, r1
 80085d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d00a      	beq.n	80085f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	430a      	orrs	r2, r1
 80085f2:	605a      	str	r2, [r3, #4]
  }
}
 80085f4:	bf00      	nop
 80085f6:	370c      	adds	r7, #12
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bc80      	pop	{r7}
 80085fc:	4770      	bx	lr

080085fe <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80085fe:	b580      	push	{r7, lr}
 8008600:	b086      	sub	sp, #24
 8008602:	af02      	add	r7, sp, #8
 8008604:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2200      	movs	r2, #0
 800860a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800860e:	f7f9 f875 	bl	80016fc <HAL_GetTick>
 8008612:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f003 0308 	and.w	r3, r3, #8
 800861e:	2b08      	cmp	r3, #8
 8008620:	d10e      	bne.n	8008640 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008622:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008626:	9300      	str	r3, [sp, #0]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2200      	movs	r2, #0
 800862c:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f000 f832 	bl	800869a <UART_WaitOnFlagUntilTimeout>
 8008636:	4603      	mov	r3, r0
 8008638:	2b00      	cmp	r3, #0
 800863a:	d001      	beq.n	8008640 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800863c:	2303      	movs	r3, #3
 800863e:	e028      	b.n	8008692 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f003 0304 	and.w	r3, r3, #4
 800864a:	2b04      	cmp	r3, #4
 800864c:	d10e      	bne.n	800866c <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800864e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008652:	9300      	str	r3, [sp, #0]
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2200      	movs	r2, #0
 8008658:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f000 f81c 	bl	800869a <UART_WaitOnFlagUntilTimeout>
 8008662:	4603      	mov	r3, r0
 8008664:	2b00      	cmp	r3, #0
 8008666:	d001      	beq.n	800866c <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008668:	2303      	movs	r3, #3
 800866a:	e012      	b.n	8008692 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2220      	movs	r2, #32
 8008670:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2220      	movs	r2, #32
 8008678:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2200      	movs	r2, #0
 8008686:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2200      	movs	r2, #0
 800868c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008690:	2300      	movs	r3, #0
}
 8008692:	4618      	mov	r0, r3
 8008694:	3710      	adds	r7, #16
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}

0800869a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800869a:	b580      	push	{r7, lr}
 800869c:	b09c      	sub	sp, #112	@ 0x70
 800869e:	af00      	add	r7, sp, #0
 80086a0:	60f8      	str	r0, [r7, #12]
 80086a2:	60b9      	str	r1, [r7, #8]
 80086a4:	603b      	str	r3, [r7, #0]
 80086a6:	4613      	mov	r3, r2
 80086a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086aa:	e0a9      	b.n	8008800 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80086ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086b2:	f000 80a5 	beq.w	8008800 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086b6:	f7f9 f821 	bl	80016fc <HAL_GetTick>
 80086ba:	4602      	mov	r2, r0
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	1ad3      	subs	r3, r2, r3
 80086c0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d302      	bcc.n	80086cc <UART_WaitOnFlagUntilTimeout+0x32>
 80086c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d140      	bne.n	800874e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80086d4:	e853 3f00 	ldrex	r3, [r3]
 80086d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80086da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086dc:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80086e0:	667b      	str	r3, [r7, #100]	@ 0x64
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	461a      	mov	r2, r3
 80086e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80086ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80086ec:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ee:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80086f0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80086f2:	e841 2300 	strex	r3, r2, [r1]
 80086f6:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80086f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d1e6      	bne.n	80086cc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	3308      	adds	r3, #8
 8008704:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008706:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008708:	e853 3f00 	ldrex	r3, [r3]
 800870c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800870e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008710:	f023 0301 	bic.w	r3, r3, #1
 8008714:	663b      	str	r3, [r7, #96]	@ 0x60
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	3308      	adds	r3, #8
 800871c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800871e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008720:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008722:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008724:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008726:	e841 2300 	strex	r3, r2, [r1]
 800872a:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800872c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800872e:	2b00      	cmp	r3, #0
 8008730:	d1e5      	bne.n	80086fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2220      	movs	r2, #32
 8008736:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2220      	movs	r2, #32
 800873e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2200      	movs	r2, #0
 8008746:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

        return HAL_TIMEOUT;
 800874a:	2303      	movs	r3, #3
 800874c:	e069      	b.n	8008822 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f003 0304 	and.w	r3, r3, #4
 8008758:	2b00      	cmp	r3, #0
 800875a:	d051      	beq.n	8008800 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	69db      	ldr	r3, [r3, #28]
 8008762:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008766:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800876a:	d149      	bne.n	8008800 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008774:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800877e:	e853 3f00 	ldrex	r3, [r3]
 8008782:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008786:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800878a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	461a      	mov	r2, r3
 8008792:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008794:	637b      	str	r3, [r7, #52]	@ 0x34
 8008796:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008798:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800879a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800879c:	e841 2300 	strex	r3, r2, [r1]
 80087a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80087a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d1e6      	bne.n	8008776 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	3308      	adds	r3, #8
 80087ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	e853 3f00 	ldrex	r3, [r3]
 80087b6:	613b      	str	r3, [r7, #16]
   return(result);
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	f023 0301 	bic.w	r3, r3, #1
 80087be:	66bb      	str	r3, [r7, #104]	@ 0x68
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	3308      	adds	r3, #8
 80087c6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80087c8:	623a      	str	r2, [r7, #32]
 80087ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087cc:	69f9      	ldr	r1, [r7, #28]
 80087ce:	6a3a      	ldr	r2, [r7, #32]
 80087d0:	e841 2300 	strex	r3, r2, [r1]
 80087d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80087d6:	69bb      	ldr	r3, [r7, #24]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d1e5      	bne.n	80087a8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2220      	movs	r2, #32
 80087e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2220      	movs	r2, #32
 80087e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2220      	movs	r2, #32
 80087f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2200      	movs	r2, #0
 80087f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80087fc:	2303      	movs	r3, #3
 80087fe:	e010      	b.n	8008822 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	69da      	ldr	r2, [r3, #28]
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	4013      	ands	r3, r2
 800880a:	68ba      	ldr	r2, [r7, #8]
 800880c:	429a      	cmp	r2, r3
 800880e:	bf0c      	ite	eq
 8008810:	2301      	moveq	r3, #1
 8008812:	2300      	movne	r3, #0
 8008814:	b2db      	uxtb	r3, r3
 8008816:	461a      	mov	r2, r3
 8008818:	79fb      	ldrb	r3, [r7, #7]
 800881a:	429a      	cmp	r2, r3
 800881c:	f43f af46 	beq.w	80086ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008820:	2300      	movs	r3, #0
}
 8008822:	4618      	mov	r0, r3
 8008824:	3770      	adds	r7, #112	@ 0x70
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
	...

0800882c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800882c:	b480      	push	{r7}
 800882e:	b0a3      	sub	sp, #140	@ 0x8c
 8008830:	af00      	add	r7, sp, #0
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	60b9      	str	r1, [r7, #8]
 8008836:	4613      	mov	r3, r2
 8008838:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	68ba      	ldr	r2, [r7, #8]
 800883e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	88fa      	ldrh	r2, [r7, #6]
 8008844:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	88fa      	ldrh	r2, [r7, #6]
 800884c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2200      	movs	r2, #0
 8008854:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	689b      	ldr	r3, [r3, #8]
 800885a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800885e:	d10e      	bne.n	800887e <UART_Start_Receive_IT+0x52>
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	691b      	ldr	r3, [r3, #16]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d105      	bne.n	8008874 <UART_Start_Receive_IT+0x48>
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800886e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008872:	e02d      	b.n	80088d0 <UART_Start_Receive_IT+0xa4>
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	22ff      	movs	r2, #255	@ 0xff
 8008878:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800887c:	e028      	b.n	80088d0 <UART_Start_Receive_IT+0xa4>
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d10d      	bne.n	80088a2 <UART_Start_Receive_IT+0x76>
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	691b      	ldr	r3, [r3, #16]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d104      	bne.n	8008898 <UART_Start_Receive_IT+0x6c>
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	22ff      	movs	r2, #255	@ 0xff
 8008892:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008896:	e01b      	b.n	80088d0 <UART_Start_Receive_IT+0xa4>
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	227f      	movs	r2, #127	@ 0x7f
 800889c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80088a0:	e016      	b.n	80088d0 <UART_Start_Receive_IT+0xa4>
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	689b      	ldr	r3, [r3, #8]
 80088a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80088aa:	d10d      	bne.n	80088c8 <UART_Start_Receive_IT+0x9c>
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	691b      	ldr	r3, [r3, #16]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d104      	bne.n	80088be <UART_Start_Receive_IT+0x92>
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	227f      	movs	r2, #127	@ 0x7f
 80088b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80088bc:	e008      	b.n	80088d0 <UART_Start_Receive_IT+0xa4>
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	223f      	movs	r2, #63	@ 0x3f
 80088c2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80088c6:	e003      	b.n	80088d0 <UART_Start_Receive_IT+0xa4>
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2200      	movs	r2, #0
 80088cc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	2200      	movs	r2, #0
 80088d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	2222      	movs	r2, #34	@ 0x22
 80088dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	3308      	adds	r3, #8
 80088e6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80088ea:	e853 3f00 	ldrex	r3, [r3]
 80088ee:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80088f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80088f2:	f043 0301 	orr.w	r3, r3, #1
 80088f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	3308      	adds	r3, #8
 8008900:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008904:	673a      	str	r2, [r7, #112]	@ 0x70
 8008906:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008908:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800890a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800890c:	e841 2300 	strex	r3, r2, [r1]
 8008910:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8008912:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008914:	2b00      	cmp	r3, #0
 8008916:	d1e3      	bne.n	80088e0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800891c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008920:	d14f      	bne.n	80089c2 <UART_Start_Receive_IT+0x196>
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008928:	88fa      	ldrh	r2, [r7, #6]
 800892a:	429a      	cmp	r2, r3
 800892c:	d349      	bcc.n	80089c2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	689b      	ldr	r3, [r3, #8]
 8008932:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008936:	d107      	bne.n	8008948 <UART_Start_Receive_IT+0x11c>
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	691b      	ldr	r3, [r3, #16]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d103      	bne.n	8008948 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	4a46      	ldr	r2, [pc, #280]	@ (8008a5c <UART_Start_Receive_IT+0x230>)
 8008944:	675a      	str	r2, [r3, #116]	@ 0x74
 8008946:	e002      	b.n	800894e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	4a45      	ldr	r2, [pc, #276]	@ (8008a60 <UART_Start_Receive_IT+0x234>)
 800894c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	691b      	ldr	r3, [r3, #16]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d01a      	beq.n	800898c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800895c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800895e:	e853 3f00 	ldrex	r3, [r3]
 8008962:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008964:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008966:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800896a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	461a      	mov	r2, r3
 8008974:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008978:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800897a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800897c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800897e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008980:	e841 2300 	strex	r3, r2, [r1]
 8008984:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008986:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008988:	2b00      	cmp	r3, #0
 800898a:	d1e4      	bne.n	8008956 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	3308      	adds	r3, #8
 8008992:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008994:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008996:	e853 3f00 	ldrex	r3, [r3]
 800899a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800899c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800899e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80089a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	3308      	adds	r3, #8
 80089aa:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80089ac:	64ba      	str	r2, [r7, #72]	@ 0x48
 80089ae:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80089b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80089b4:	e841 2300 	strex	r3, r2, [r1]
 80089b8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80089ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d1e5      	bne.n	800898c <UART_Start_Receive_IT+0x160>
 80089c0:	e046      	b.n	8008a50 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	689b      	ldr	r3, [r3, #8]
 80089c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089ca:	d107      	bne.n	80089dc <UART_Start_Receive_IT+0x1b0>
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	691b      	ldr	r3, [r3, #16]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d103      	bne.n	80089dc <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	4a23      	ldr	r2, [pc, #140]	@ (8008a64 <UART_Start_Receive_IT+0x238>)
 80089d8:	675a      	str	r2, [r3, #116]	@ 0x74
 80089da:	e002      	b.n	80089e2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	4a22      	ldr	r2, [pc, #136]	@ (8008a68 <UART_Start_Receive_IT+0x23c>)
 80089e0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	691b      	ldr	r3, [r3, #16]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d019      	beq.n	8008a1e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089f2:	e853 3f00 	ldrex	r3, [r3]
 80089f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80089f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089fa:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80089fe:	677b      	str	r3, [r7, #116]	@ 0x74
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	461a      	mov	r2, r3
 8008a06:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008a08:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a0a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a0c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008a0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008a10:	e841 2300 	strex	r3, r2, [r1]
 8008a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d1e6      	bne.n	80089ea <UART_Start_Receive_IT+0x1be>
 8008a1c:	e018      	b.n	8008a50 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	e853 3f00 	ldrex	r3, [r3]
 8008a2a:	613b      	str	r3, [r7, #16]
   return(result);
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	f043 0320 	orr.w	r3, r3, #32
 8008a32:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	461a      	mov	r2, r3
 8008a3a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008a3c:	623b      	str	r3, [r7, #32]
 8008a3e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a40:	69f9      	ldr	r1, [r7, #28]
 8008a42:	6a3a      	ldr	r2, [r7, #32]
 8008a44:	e841 2300 	strex	r3, r2, [r1]
 8008a48:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a4a:	69bb      	ldr	r3, [r7, #24]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d1e6      	bne.n	8008a1e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008a50:	2300      	movs	r3, #0
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	378c      	adds	r7, #140	@ 0x8c
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bc80      	pop	{r7}
 8008a5a:	4770      	bx	lr
 8008a5c:	08009441 	.word	0x08009441
 8008a60:	080090e1 	.word	0x080090e1
 8008a64:	08008f29 	.word	0x08008f29
 8008a68:	08008d71 	.word	0x08008d71

08008a6c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b08f      	sub	sp, #60	@ 0x3c
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a7a:	6a3b      	ldr	r3, [r7, #32]
 8008a7c:	e853 3f00 	ldrex	r3, [r3]
 8008a80:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a82:	69fb      	ldr	r3, [r7, #28]
 8008a84:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008a88:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	461a      	mov	r2, r3
 8008a90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a94:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008a98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a9a:	e841 2300 	strex	r3, r2, [r1]
 8008a9e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d1e6      	bne.n	8008a74 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	3308      	adds	r3, #8
 8008aac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	e853 3f00 	ldrex	r3, [r3]
 8008ab4:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008abc:	633b      	str	r3, [r7, #48]	@ 0x30
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	3308      	adds	r3, #8
 8008ac4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ac6:	61ba      	str	r2, [r7, #24]
 8008ac8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aca:	6979      	ldr	r1, [r7, #20]
 8008acc:	69ba      	ldr	r2, [r7, #24]
 8008ace:	e841 2300 	strex	r3, r2, [r1]
 8008ad2:	613b      	str	r3, [r7, #16]
   return(result);
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d1e5      	bne.n	8008aa6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2220      	movs	r2, #32
 8008ade:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8008ae2:	bf00      	nop
 8008ae4:	373c      	adds	r7, #60	@ 0x3c
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bc80      	pop	{r7}
 8008aea:	4770      	bx	lr

08008aec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b095      	sub	sp, #84	@ 0x54
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008afa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008afc:	e853 3f00 	ldrex	r3, [r3]
 8008b00:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	461a      	mov	r2, r3
 8008b10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b12:	643b      	str	r3, [r7, #64]	@ 0x40
 8008b14:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b16:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008b18:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008b1a:	e841 2300 	strex	r3, r2, [r1]
 8008b1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d1e6      	bne.n	8008af4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	3308      	adds	r3, #8
 8008b2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b2e:	6a3b      	ldr	r3, [r7, #32]
 8008b30:	e853 3f00 	ldrex	r3, [r3]
 8008b34:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b36:	69fb      	ldr	r3, [r7, #28]
 8008b38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008b3c:	f023 0301 	bic.w	r3, r3, #1
 8008b40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	3308      	adds	r3, #8
 8008b48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b52:	e841 2300 	strex	r3, r2, [r1]
 8008b56:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d1e3      	bne.n	8008b26 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b62:	2b01      	cmp	r3, #1
 8008b64:	d118      	bne.n	8008b98 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	e853 3f00 	ldrex	r3, [r3]
 8008b72:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	f023 0310 	bic.w	r3, r3, #16
 8008b7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	461a      	mov	r2, r3
 8008b82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b84:	61bb      	str	r3, [r7, #24]
 8008b86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b88:	6979      	ldr	r1, [r7, #20]
 8008b8a:	69ba      	ldr	r2, [r7, #24]
 8008b8c:	e841 2300 	strex	r3, r2, [r1]
 8008b90:	613b      	str	r3, [r7, #16]
   return(result);
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d1e6      	bne.n	8008b66 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2220      	movs	r2, #32
 8008b9c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008bac:	bf00      	nop
 8008bae:	3754      	adds	r7, #84	@ 0x54
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bc80      	pop	{r7}
 8008bb4:	4770      	bx	lr

08008bb6 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008bb6:	b580      	push	{r7, lr}
 8008bb8:	b090      	sub	sp, #64	@ 0x40
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f003 0320 	and.w	r3, r3, #32
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d137      	bne.n	8008c42 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008bd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008bda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	3308      	adds	r3, #8
 8008be0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008be4:	e853 3f00 	ldrex	r3, [r3]
 8008be8:	623b      	str	r3, [r7, #32]
   return(result);
 8008bea:	6a3b      	ldr	r3, [r7, #32]
 8008bec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008bf0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008bf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	3308      	adds	r3, #8
 8008bf8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008bfa:	633a      	str	r2, [r7, #48]	@ 0x30
 8008bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bfe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c02:	e841 2300 	strex	r3, r2, [r1]
 8008c06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d1e5      	bne.n	8008bda <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008c0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	e853 3f00 	ldrex	r3, [r3]
 8008c1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c22:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	461a      	mov	r2, r3
 8008c2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c2c:	61fb      	str	r3, [r7, #28]
 8008c2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c30:	69b9      	ldr	r1, [r7, #24]
 8008c32:	69fa      	ldr	r2, [r7, #28]
 8008c34:	e841 2300 	strex	r3, r2, [r1]
 8008c38:	617b      	str	r3, [r7, #20]
   return(result);
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d1e6      	bne.n	8008c0e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008c40:	e002      	b.n	8008c48 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008c42:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008c44:	f7f9 faa4 	bl	8002190 <HAL_UART_TxCpltCallback>
}
 8008c48:	bf00      	nop
 8008c4a:	3740      	adds	r7, #64	@ 0x40
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b084      	sub	sp, #16
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c5c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008c5e:	68f8      	ldr	r0, [r7, #12]
 8008c60:	f7ff f99a 	bl	8007f98 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c64:	bf00      	nop
 8008c66:	3710      	adds	r7, #16
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b086      	sub	sp, #24
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c78:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c80:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c88:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c94:	2b80      	cmp	r3, #128	@ 0x80
 8008c96:	d109      	bne.n	8008cac <UART_DMAError+0x40>
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	2b21      	cmp	r3, #33	@ 0x21
 8008c9c:	d106      	bne.n	8008cac <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8008ca6:	6978      	ldr	r0, [r7, #20]
 8008ca8:	f7ff fee0 	bl	8008a6c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	689b      	ldr	r3, [r3, #8]
 8008cb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cb6:	2b40      	cmp	r3, #64	@ 0x40
 8008cb8:	d109      	bne.n	8008cce <UART_DMAError+0x62>
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2b22      	cmp	r3, #34	@ 0x22
 8008cbe:	d106      	bne.n	8008cce <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8008cc8:	6978      	ldr	r0, [r7, #20]
 8008cca:	f7ff ff0f 	bl	8008aec <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cd4:	f043 0210 	orr.w	r2, r3, #16
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008cde:	6978      	ldr	r0, [r7, #20]
 8008ce0:	f7ff f963 	bl	8007faa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ce4:	bf00      	nop
 8008ce6:	3718      	adds	r7, #24
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b084      	sub	sp, #16
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cf8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2200      	movs	r2, #0
 8008d06:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d0a:	68f8      	ldr	r0, [r7, #12]
 8008d0c:	f7ff f94d 	bl	8007faa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d10:	bf00      	nop
 8008d12:	3710      	adds	r7, #16
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b088      	sub	sp, #32
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	e853 3f00 	ldrex	r3, [r3]
 8008d2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d34:	61fb      	str	r3, [r7, #28]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	461a      	mov	r2, r3
 8008d3c:	69fb      	ldr	r3, [r7, #28]
 8008d3e:	61bb      	str	r3, [r7, #24]
 8008d40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d42:	6979      	ldr	r1, [r7, #20]
 8008d44:	69ba      	ldr	r2, [r7, #24]
 8008d46:	e841 2300 	strex	r3, r2, [r1]
 8008d4a:	613b      	str	r3, [r7, #16]
   return(result);
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d1e6      	bne.n	8008d20 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2220      	movs	r2, #32
 8008d56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f7f9 fa15 	bl	8002190 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d66:	bf00      	nop
 8008d68:	3720      	adds	r7, #32
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
	...

08008d70 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b09c      	sub	sp, #112	@ 0x70
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008d7e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008d88:	2b22      	cmp	r3, #34	@ 0x22
 8008d8a:	f040 80be 	bne.w	8008f0a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d94:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008d98:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008d9c:	b2d9      	uxtb	r1, r3
 8008d9e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008da2:	b2da      	uxtb	r2, r3
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008da8:	400a      	ands	r2, r1
 8008daa:	b2d2      	uxtb	r2, r2
 8008dac:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008db2:	1c5a      	adds	r2, r3, #1
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008dbe:	b29b      	uxth	r3, r3
 8008dc0:	3b01      	subs	r3, #1
 8008dc2:	b29a      	uxth	r2, r3
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	f040 80a1 	bne.w	8008f1a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008de0:	e853 3f00 	ldrex	r3, [r3]
 8008de4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008de6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008de8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008dec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	461a      	mov	r2, r3
 8008df4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008df6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008df8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dfa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008dfc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008dfe:	e841 2300 	strex	r3, r2, [r1]
 8008e02:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008e04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d1e6      	bne.n	8008dd8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	3308      	adds	r3, #8
 8008e10:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e14:	e853 3f00 	ldrex	r3, [r3]
 8008e18:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008e1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e1c:	f023 0301 	bic.w	r3, r3, #1
 8008e20:	667b      	str	r3, [r7, #100]	@ 0x64
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	3308      	adds	r3, #8
 8008e28:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008e2a:	647a      	str	r2, [r7, #68]	@ 0x44
 8008e2c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e2e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008e30:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008e32:	e841 2300 	strex	r3, r2, [r1]
 8008e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008e38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d1e5      	bne.n	8008e0a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2220      	movs	r2, #32
 8008e42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4a33      	ldr	r2, [pc, #204]	@ (8008f24 <UART_RxISR_8BIT+0x1b4>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d01f      	beq.n	8008e9c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d018      	beq.n	8008e9c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e72:	e853 3f00 	ldrex	r3, [r3]
 8008e76:	623b      	str	r3, [r7, #32]
   return(result);
 8008e78:	6a3b      	ldr	r3, [r7, #32]
 8008e7a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008e7e:	663b      	str	r3, [r7, #96]	@ 0x60
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	461a      	mov	r2, r3
 8008e86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008e88:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e8c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e90:	e841 2300 	strex	r3, r2, [r1]
 8008e94:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d1e6      	bne.n	8008e6a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d12e      	bne.n	8008f02 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	e853 3f00 	ldrex	r3, [r3]
 8008eb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f023 0310 	bic.w	r3, r3, #16
 8008ebe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	461a      	mov	r2, r3
 8008ec6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008ec8:	61fb      	str	r3, [r7, #28]
 8008eca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ecc:	69b9      	ldr	r1, [r7, #24]
 8008ece:	69fa      	ldr	r2, [r7, #28]
 8008ed0:	e841 2300 	strex	r3, r2, [r1]
 8008ed4:	617b      	str	r3, [r7, #20]
   return(result);
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d1e6      	bne.n	8008eaa <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	69db      	ldr	r3, [r3, #28]
 8008ee2:	f003 0310 	and.w	r3, r3, #16
 8008ee6:	2b10      	cmp	r3, #16
 8008ee8:	d103      	bne.n	8008ef2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	2210      	movs	r2, #16
 8008ef0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008ef8:	4619      	mov	r1, r3
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f7ff f85e 	bl	8007fbc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f00:	e00b      	b.n	8008f1a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f7f9 f95a 	bl	80021bc <HAL_UART_RxCpltCallback>
}
 8008f08:	e007      	b.n	8008f1a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	699a      	ldr	r2, [r3, #24]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f042 0208 	orr.w	r2, r2, #8
 8008f18:	619a      	str	r2, [r3, #24]
}
 8008f1a:	bf00      	nop
 8008f1c:	3770      	adds	r7, #112	@ 0x70
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}
 8008f22:	bf00      	nop
 8008f24:	40008000 	.word	0x40008000

08008f28 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b09c      	sub	sp, #112	@ 0x70
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008f36:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f40:	2b22      	cmp	r3, #34	@ 0x22
 8008f42:	f040 80be 	bne.w	80090c2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f4c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f54:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008f56:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008f5a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008f5e:	4013      	ands	r3, r2
 8008f60:	b29a      	uxth	r2, r3
 8008f62:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008f64:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f6a:	1c9a      	adds	r2, r3, #2
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f76:	b29b      	uxth	r3, r3
 8008f78:	3b01      	subs	r3, #1
 8008f7a:	b29a      	uxth	r2, r3
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008f88:	b29b      	uxth	r3, r3
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	f040 80a1 	bne.w	80090d2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008f98:	e853 3f00 	ldrex	r3, [r3]
 8008f9c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008f9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008fa0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008fa4:	667b      	str	r3, [r7, #100]	@ 0x64
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	461a      	mov	r2, r3
 8008fac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008fae:	657b      	str	r3, [r7, #84]	@ 0x54
 8008fb0:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008fb4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008fb6:	e841 2300 	strex	r3, r2, [r1]
 8008fba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008fbc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d1e6      	bne.n	8008f90 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	3308      	adds	r3, #8
 8008fc8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fcc:	e853 3f00 	ldrex	r3, [r3]
 8008fd0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fd4:	f023 0301 	bic.w	r3, r3, #1
 8008fd8:	663b      	str	r3, [r7, #96]	@ 0x60
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	3308      	adds	r3, #8
 8008fe0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008fe2:	643a      	str	r2, [r7, #64]	@ 0x40
 8008fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008fe8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008fea:	e841 2300 	strex	r3, r2, [r1]
 8008fee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d1e5      	bne.n	8008fc2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2220      	movs	r2, #32
 8008ffa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2200      	movs	r2, #0
 8009002:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2200      	movs	r2, #0
 8009008:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4a33      	ldr	r2, [pc, #204]	@ (80090dc <UART_RxISR_16BIT+0x1b4>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d01f      	beq.n	8009054 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800901e:	2b00      	cmp	r3, #0
 8009020:	d018      	beq.n	8009054 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009028:	6a3b      	ldr	r3, [r7, #32]
 800902a:	e853 3f00 	ldrex	r3, [r3]
 800902e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009030:	69fb      	ldr	r3, [r7, #28]
 8009032:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009036:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	461a      	mov	r2, r3
 800903e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009040:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009042:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009044:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009046:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009048:	e841 2300 	strex	r3, r2, [r1]
 800904c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800904e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009050:	2b00      	cmp	r3, #0
 8009052:	d1e6      	bne.n	8009022 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009058:	2b01      	cmp	r3, #1
 800905a:	d12e      	bne.n	80090ba <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2200      	movs	r2, #0
 8009060:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	e853 3f00 	ldrex	r3, [r3]
 800906e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	f023 0310 	bic.w	r3, r3, #16
 8009076:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	461a      	mov	r2, r3
 800907e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009080:	61bb      	str	r3, [r7, #24]
 8009082:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009084:	6979      	ldr	r1, [r7, #20]
 8009086:	69ba      	ldr	r2, [r7, #24]
 8009088:	e841 2300 	strex	r3, r2, [r1]
 800908c:	613b      	str	r3, [r7, #16]
   return(result);
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d1e6      	bne.n	8009062 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	69db      	ldr	r3, [r3, #28]
 800909a:	f003 0310 	and.w	r3, r3, #16
 800909e:	2b10      	cmp	r3, #16
 80090a0:	d103      	bne.n	80090aa <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	2210      	movs	r2, #16
 80090a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80090b0:	4619      	mov	r1, r3
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f7fe ff82 	bl	8007fbc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80090b8:	e00b      	b.n	80090d2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f7f9 f87e 	bl	80021bc <HAL_UART_RxCpltCallback>
}
 80090c0:	e007      	b.n	80090d2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	699a      	ldr	r2, [r3, #24]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f042 0208 	orr.w	r2, r2, #8
 80090d0:	619a      	str	r2, [r3, #24]
}
 80090d2:	bf00      	nop
 80090d4:	3770      	adds	r7, #112	@ 0x70
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}
 80090da:	bf00      	nop
 80090dc:	40008000 	.word	0x40008000

080090e0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b0ac      	sub	sp, #176	@ 0xb0
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80090ee:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	69db      	ldr	r3, [r3, #28]
 80090f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	689b      	ldr	r3, [r3, #8]
 800910c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009116:	2b22      	cmp	r3, #34	@ 0x22
 8009118:	f040 8182 	bne.w	8009420 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009122:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009126:	e125      	b.n	8009374 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800912e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009132:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8009136:	b2d9      	uxtb	r1, r3
 8009138:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 800913c:	b2da      	uxtb	r2, r3
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009142:	400a      	ands	r2, r1
 8009144:	b2d2      	uxtb	r2, r2
 8009146:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800914c:	1c5a      	adds	r2, r3, #1
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009158:	b29b      	uxth	r3, r3
 800915a:	3b01      	subs	r3, #1
 800915c:	b29a      	uxth	r2, r3
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	69db      	ldr	r3, [r3, #28]
 800916a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800916e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009172:	f003 0307 	and.w	r3, r3, #7
 8009176:	2b00      	cmp	r3, #0
 8009178:	d053      	beq.n	8009222 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800917a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800917e:	f003 0301 	and.w	r3, r3, #1
 8009182:	2b00      	cmp	r3, #0
 8009184:	d011      	beq.n	80091aa <UART_RxISR_8BIT_FIFOEN+0xca>
 8009186:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800918a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800918e:	2b00      	cmp	r3, #0
 8009190:	d00b      	beq.n	80091aa <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	2201      	movs	r2, #1
 8009198:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091a0:	f043 0201 	orr.w	r2, r3, #1
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80091ae:	f003 0302 	and.w	r3, r3, #2
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d011      	beq.n	80091da <UART_RxISR_8BIT_FIFOEN+0xfa>
 80091b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80091ba:	f003 0301 	and.w	r3, r3, #1
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d00b      	beq.n	80091da <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	2202      	movs	r2, #2
 80091c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091d0:	f043 0204 	orr.w	r2, r3, #4
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80091de:	f003 0304 	and.w	r3, r3, #4
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d011      	beq.n	800920a <UART_RxISR_8BIT_FIFOEN+0x12a>
 80091e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80091ea:	f003 0301 	and.w	r3, r3, #1
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d00b      	beq.n	800920a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	2204      	movs	r2, #4
 80091f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009200:	f043 0202 	orr.w	r2, r3, #2
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009210:	2b00      	cmp	r3, #0
 8009212:	d006      	beq.n	8009222 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f7fe fec8 	bl	8007faa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2200      	movs	r2, #0
 800921e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009228:	b29b      	uxth	r3, r3
 800922a:	2b00      	cmp	r3, #0
 800922c:	f040 80a2 	bne.w	8009374 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009236:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009238:	e853 3f00 	ldrex	r3, [r3]
 800923c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 800923e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009240:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009244:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	461a      	mov	r2, r3
 800924e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009252:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009254:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009256:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8009258:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800925a:	e841 2300 	strex	r3, r2, [r1]
 800925e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8009260:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009262:	2b00      	cmp	r3, #0
 8009264:	d1e4      	bne.n	8009230 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	3308      	adds	r3, #8
 800926c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800926e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009270:	e853 3f00 	ldrex	r3, [r3]
 8009274:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009276:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009278:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800927c:	f023 0301 	bic.w	r3, r3, #1
 8009280:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	3308      	adds	r3, #8
 800928a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800928e:	66ba      	str	r2, [r7, #104]	@ 0x68
 8009290:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009292:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009294:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009296:	e841 2300 	strex	r3, r2, [r1]
 800929a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800929c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d1e1      	bne.n	8009266 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2220      	movs	r2, #32
 80092a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2200      	movs	r2, #0
 80092ae:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2200      	movs	r2, #0
 80092b4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4a5f      	ldr	r2, [pc, #380]	@ (8009438 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d021      	beq.n	8009304 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d01a      	beq.n	8009304 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80092d6:	e853 3f00 	ldrex	r3, [r3]
 80092da:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80092dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80092de:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80092e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	461a      	mov	r2, r3
 80092ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80092f0:	657b      	str	r3, [r7, #84]	@ 0x54
 80092f2:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80092f6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80092f8:	e841 2300 	strex	r3, r2, [r1]
 80092fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80092fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009300:	2b00      	cmp	r3, #0
 8009302:	d1e4      	bne.n	80092ce <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009308:	2b01      	cmp	r3, #1
 800930a:	d130      	bne.n	800936e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2200      	movs	r2, #0
 8009310:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009318:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800931a:	e853 3f00 	ldrex	r3, [r3]
 800931e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009322:	f023 0310 	bic.w	r3, r3, #16
 8009326:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	461a      	mov	r2, r3
 8009330:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009334:	643b      	str	r3, [r7, #64]	@ 0x40
 8009336:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009338:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800933a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800933c:	e841 2300 	strex	r3, r2, [r1]
 8009340:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009344:	2b00      	cmp	r3, #0
 8009346:	d1e4      	bne.n	8009312 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	69db      	ldr	r3, [r3, #28]
 800934e:	f003 0310 	and.w	r3, r3, #16
 8009352:	2b10      	cmp	r3, #16
 8009354:	d103      	bne.n	800935e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	2210      	movs	r2, #16
 800935c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009364:	4619      	mov	r1, r3
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f7fe fe28 	bl	8007fbc <HAL_UARTEx_RxEventCallback>
 800936c:	e002      	b.n	8009374 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f7f8 ff24 	bl	80021bc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009374:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8009378:	2b00      	cmp	r3, #0
 800937a:	d006      	beq.n	800938a <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800937c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009380:	f003 0320 	and.w	r3, r3, #32
 8009384:	2b00      	cmp	r3, #0
 8009386:	f47f aecf 	bne.w	8009128 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009390:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009394:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009398:	2b00      	cmp	r3, #0
 800939a:	d049      	beq.n	8009430 <UART_RxISR_8BIT_FIFOEN+0x350>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80093a2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80093a6:	429a      	cmp	r2, r3
 80093a8:	d242      	bcs.n	8009430 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	3308      	adds	r3, #8
 80093b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b2:	6a3b      	ldr	r3, [r7, #32]
 80093b4:	e853 3f00 	ldrex	r3, [r3]
 80093b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80093ba:	69fb      	ldr	r3, [r7, #28]
 80093bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80093c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	3308      	adds	r3, #8
 80093ca:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80093ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80093d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80093d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80093d6:	e841 2300 	strex	r3, r2, [r1]
 80093da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80093dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d1e3      	bne.n	80093aa <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	4a15      	ldr	r2, [pc, #84]	@ (800943c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80093e6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	e853 3f00 	ldrex	r3, [r3]
 80093f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	f043 0320 	orr.w	r3, r3, #32
 80093fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	461a      	mov	r2, r3
 8009406:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800940a:	61bb      	str	r3, [r7, #24]
 800940c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800940e:	6979      	ldr	r1, [r7, #20]
 8009410:	69ba      	ldr	r2, [r7, #24]
 8009412:	e841 2300 	strex	r3, r2, [r1]
 8009416:	613b      	str	r3, [r7, #16]
   return(result);
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d1e4      	bne.n	80093e8 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800941e:	e007      	b.n	8009430 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	699a      	ldr	r2, [r3, #24]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f042 0208 	orr.w	r2, r2, #8
 800942e:	619a      	str	r2, [r3, #24]
}
 8009430:	bf00      	nop
 8009432:	37b0      	adds	r7, #176	@ 0xb0
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}
 8009438:	40008000 	.word	0x40008000
 800943c:	08008d71 	.word	0x08008d71

08009440 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b0ae      	sub	sp, #184	@ 0xb8
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800944e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	69db      	ldr	r3, [r3, #28]
 8009458:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	689b      	ldr	r3, [r3, #8]
 800946c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009476:	2b22      	cmp	r3, #34	@ 0x22
 8009478:	f040 8186 	bne.w	8009788 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009482:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009486:	e129      	b.n	80096dc <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800948e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009496:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800949a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800949e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80094a2:	4013      	ands	r3, r2
 80094a4:	b29a      	uxth	r2, r3
 80094a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80094aa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80094b0:	1c9a      	adds	r2, r3, #2
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80094bc:	b29b      	uxth	r3, r3
 80094be:	3b01      	subs	r3, #1
 80094c0:	b29a      	uxth	r2, r3
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	69db      	ldr	r3, [r3, #28]
 80094ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80094d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80094d6:	f003 0307 	and.w	r3, r3, #7
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d053      	beq.n	8009586 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80094de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80094e2:	f003 0301 	and.w	r3, r3, #1
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d011      	beq.n	800950e <UART_RxISR_16BIT_FIFOEN+0xce>
 80094ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80094ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d00b      	beq.n	800950e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	2201      	movs	r2, #1
 80094fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009504:	f043 0201 	orr.w	r2, r3, #1
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800950e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009512:	f003 0302 	and.w	r3, r3, #2
 8009516:	2b00      	cmp	r3, #0
 8009518:	d011      	beq.n	800953e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800951a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800951e:	f003 0301 	and.w	r3, r3, #1
 8009522:	2b00      	cmp	r3, #0
 8009524:	d00b      	beq.n	800953e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	2202      	movs	r2, #2
 800952c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009534:	f043 0204 	orr.w	r2, r3, #4
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800953e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009542:	f003 0304 	and.w	r3, r3, #4
 8009546:	2b00      	cmp	r3, #0
 8009548:	d011      	beq.n	800956e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800954a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800954e:	f003 0301 	and.w	r3, r3, #1
 8009552:	2b00      	cmp	r3, #0
 8009554:	d00b      	beq.n	800956e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	2204      	movs	r2, #4
 800955c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009564:	f043 0202 	orr.w	r2, r3, #2
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009574:	2b00      	cmp	r3, #0
 8009576:	d006      	beq.n	8009586 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f7fe fd16 	bl	8007faa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2200      	movs	r2, #0
 8009582:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800958c:	b29b      	uxth	r3, r3
 800958e:	2b00      	cmp	r3, #0
 8009590:	f040 80a4 	bne.w	80096dc <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800959a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800959c:	e853 3f00 	ldrex	r3, [r3]
 80095a0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80095a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80095a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80095a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	461a      	mov	r2, r3
 80095b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80095b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80095ba:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095bc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80095be:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80095c2:	e841 2300 	strex	r3, r2, [r1]
 80095c6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80095c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d1e2      	bne.n	8009594 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	3308      	adds	r3, #8
 80095d4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80095d8:	e853 3f00 	ldrex	r3, [r3]
 80095dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80095de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80095e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80095e4:	f023 0301 	bic.w	r3, r3, #1
 80095e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	3308      	adds	r3, #8
 80095f2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80095f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80095f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095fa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80095fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80095fe:	e841 2300 	strex	r3, r2, [r1]
 8009602:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009604:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009606:	2b00      	cmp	r3, #0
 8009608:	d1e1      	bne.n	80095ce <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2220      	movs	r2, #32
 800960e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2200      	movs	r2, #0
 8009616:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2200      	movs	r2, #0
 800961c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	4a5f      	ldr	r2, [pc, #380]	@ (80097a0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d021      	beq.n	800966c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	685b      	ldr	r3, [r3, #4]
 800962e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009632:	2b00      	cmp	r3, #0
 8009634:	d01a      	beq.n	800966c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800963c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800963e:	e853 3f00 	ldrex	r3, [r3]
 8009642:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009644:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009646:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800964a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	461a      	mov	r2, r3
 8009654:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009658:	65bb      	str	r3, [r7, #88]	@ 0x58
 800965a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800965c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800965e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009660:	e841 2300 	strex	r3, r2, [r1]
 8009664:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009666:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009668:	2b00      	cmp	r3, #0
 800966a:	d1e4      	bne.n	8009636 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009670:	2b01      	cmp	r3, #1
 8009672:	d130      	bne.n	80096d6 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2200      	movs	r2, #0
 8009678:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009682:	e853 3f00 	ldrex	r3, [r3]
 8009686:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800968a:	f023 0310 	bic.w	r3, r3, #16
 800968e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	461a      	mov	r2, r3
 8009698:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800969c:	647b      	str	r3, [r7, #68]	@ 0x44
 800969e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80096a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80096a4:	e841 2300 	strex	r3, r2, [r1]
 80096a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80096aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d1e4      	bne.n	800967a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	69db      	ldr	r3, [r3, #28]
 80096b6:	f003 0310 	and.w	r3, r3, #16
 80096ba:	2b10      	cmp	r3, #16
 80096bc:	d103      	bne.n	80096c6 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	2210      	movs	r2, #16
 80096c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80096cc:	4619      	mov	r1, r3
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f7fe fc74 	bl	8007fbc <HAL_UARTEx_RxEventCallback>
 80096d4:	e002      	b.n	80096dc <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f7f8 fd70 	bl	80021bc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80096dc:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d006      	beq.n	80096f2 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80096e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80096e8:	f003 0320 	and.w	r3, r3, #32
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	f47f aecb 	bne.w	8009488 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80096f8:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80096fc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009700:	2b00      	cmp	r3, #0
 8009702:	d049      	beq.n	8009798 <UART_RxISR_16BIT_FIFOEN+0x358>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800970a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800970e:	429a      	cmp	r2, r3
 8009710:	d242      	bcs.n	8009798 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	3308      	adds	r3, #8
 8009718:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800971a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800971c:	e853 3f00 	ldrex	r3, [r3]
 8009720:	623b      	str	r3, [r7, #32]
   return(result);
 8009722:	6a3b      	ldr	r3, [r7, #32]
 8009724:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009728:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	3308      	adds	r3, #8
 8009732:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8009736:	633a      	str	r2, [r7, #48]	@ 0x30
 8009738:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800973a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800973c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800973e:	e841 2300 	strex	r3, r2, [r1]
 8009742:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009746:	2b00      	cmp	r3, #0
 8009748:	d1e3      	bne.n	8009712 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	4a15      	ldr	r2, [pc, #84]	@ (80097a4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800974e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	e853 3f00 	ldrex	r3, [r3]
 800975c:	60fb      	str	r3, [r7, #12]
   return(result);
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	f043 0320 	orr.w	r3, r3, #32
 8009764:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	461a      	mov	r2, r3
 800976e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009772:	61fb      	str	r3, [r7, #28]
 8009774:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009776:	69b9      	ldr	r1, [r7, #24]
 8009778:	69fa      	ldr	r2, [r7, #28]
 800977a:	e841 2300 	strex	r3, r2, [r1]
 800977e:	617b      	str	r3, [r7, #20]
   return(result);
 8009780:	697b      	ldr	r3, [r7, #20]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d1e4      	bne.n	8009750 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009786:	e007      	b.n	8009798 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	699a      	ldr	r2, [r3, #24]
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f042 0208 	orr.w	r2, r2, #8
 8009796:	619a      	str	r2, [r3, #24]
}
 8009798:	bf00      	nop
 800979a:	37b8      	adds	r7, #184	@ 0xb8
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}
 80097a0:	40008000 	.word	0x40008000
 80097a4:	08008f29 	.word	0x08008f29

080097a8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b083      	sub	sp, #12
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80097b0:	bf00      	nop
 80097b2:	370c      	adds	r7, #12
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bc80      	pop	{r7}
 80097b8:	4770      	bx	lr

080097ba <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80097ba:	b480      	push	{r7}
 80097bc:	b083      	sub	sp, #12
 80097be:	af00      	add	r7, sp, #0
 80097c0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80097c2:	bf00      	nop
 80097c4:	370c      	adds	r7, #12
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bc80      	pop	{r7}
 80097ca:	4770      	bx	lr

080097cc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b083      	sub	sp, #12
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80097d4:	bf00      	nop
 80097d6:	370c      	adds	r7, #12
 80097d8:	46bd      	mov	sp, r7
 80097da:	bc80      	pop	{r7}
 80097dc:	4770      	bx	lr

080097de <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80097de:	b580      	push	{r7, lr}
 80097e0:	b088      	sub	sp, #32
 80097e2:	af02      	add	r7, sp, #8
 80097e4:	60f8      	str	r0, [r7, #12]
 80097e6:	1d3b      	adds	r3, r7, #4
 80097e8:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 80097ec:	2300      	movs	r3, #0
 80097ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80097f6:	2b01      	cmp	r3, #1
 80097f8:	d101      	bne.n	80097fe <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 80097fa:	2302      	movs	r3, #2
 80097fc:	e046      	b.n	800988c <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	2201      	movs	r2, #1
 8009802:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2224      	movs	r2, #36	@ 0x24
 800980a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	681a      	ldr	r2, [r3, #0]
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f022 0201 	bic.w	r2, r2, #1
 800981c:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	689b      	ldr	r3, [r3, #8]
 8009824:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009828:	687a      	ldr	r2, [r7, #4]
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	430a      	orrs	r2, r1
 8009830:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d105      	bne.n	8009844 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8009838:	1d3b      	adds	r3, r7, #4
 800983a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800983e:	68f8      	ldr	r0, [r7, #12]
 8009840:	f000 f911 	bl	8009a66 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	681a      	ldr	r2, [r3, #0]
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f042 0201 	orr.w	r2, r2, #1
 8009852:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009854:	f7f7 ff52 	bl	80016fc <HAL_GetTick>
 8009858:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800985a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800985e:	9300      	str	r3, [sp, #0]
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	2200      	movs	r2, #0
 8009864:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009868:	68f8      	ldr	r0, [r7, #12]
 800986a:	f7fe ff16 	bl	800869a <UART_WaitOnFlagUntilTimeout>
 800986e:	4603      	mov	r3, r0
 8009870:	2b00      	cmp	r3, #0
 8009872:	d002      	beq.n	800987a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 8009874:	2303      	movs	r3, #3
 8009876:	75fb      	strb	r3, [r7, #23]
 8009878:	e003      	b.n	8009882 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	2220      	movs	r2, #32
 800987e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2200      	movs	r2, #0
 8009886:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return status;
 800988a:	7dfb      	ldrb	r3, [r7, #23]
}
 800988c:	4618      	mov	r0, r3
 800988e:	3718      	adds	r7, #24
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}

08009894 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8009894:	b480      	push	{r7}
 8009896:	b089      	sub	sp, #36	@ 0x24
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	d101      	bne.n	80098aa <HAL_UARTEx_EnableStopMode+0x16>
 80098a6:	2302      	movs	r3, #2
 80098a8:	e021      	b.n	80098ee <HAL_UARTEx_EnableStopMode+0x5a>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2201      	movs	r2, #1
 80098ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	e853 3f00 	ldrex	r3, [r3]
 80098be:	60bb      	str	r3, [r7, #8]
   return(result);
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	f043 0302 	orr.w	r3, r3, #2
 80098c6:	61fb      	str	r3, [r7, #28]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	461a      	mov	r2, r3
 80098ce:	69fb      	ldr	r3, [r7, #28]
 80098d0:	61bb      	str	r3, [r7, #24]
 80098d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098d4:	6979      	ldr	r1, [r7, #20]
 80098d6:	69ba      	ldr	r2, [r7, #24]
 80098d8:	e841 2300 	strex	r3, r2, [r1]
 80098dc:	613b      	str	r3, [r7, #16]
   return(result);
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d1e6      	bne.n	80098b2 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2200      	movs	r2, #0
 80098e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80098ec:	2300      	movs	r3, #0
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3724      	adds	r7, #36	@ 0x24
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bc80      	pop	{r7}
 80098f6:	4770      	bx	lr

080098f8 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b084      	sub	sp, #16
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009906:	2b01      	cmp	r3, #1
 8009908:	d101      	bne.n	800990e <HAL_UARTEx_EnableFifoMode+0x16>
 800990a:	2302      	movs	r3, #2
 800990c:	e02b      	b.n	8009966 <HAL_UARTEx_EnableFifoMode+0x6e>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2201      	movs	r2, #1
 8009912:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2224      	movs	r2, #36	@ 0x24
 800991a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	681a      	ldr	r2, [r3, #0]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f022 0201 	bic.w	r2, r2, #1
 8009934:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800993c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8009944:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	68fa      	ldr	r2, [r7, #12]
 800994c:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f000 f8ac 	bl	8009aac <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2220      	movs	r2, #32
 8009958:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2200      	movs	r2, #0
 8009960:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009964:	2300      	movs	r3, #0
}
 8009966:	4618      	mov	r0, r3
 8009968:	3710      	adds	r7, #16
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}

0800996e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800996e:	b580      	push	{r7, lr}
 8009970:	b084      	sub	sp, #16
 8009972:	af00      	add	r7, sp, #0
 8009974:	6078      	str	r0, [r7, #4]
 8009976:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800997e:	2b01      	cmp	r3, #1
 8009980:	d101      	bne.n	8009986 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009982:	2302      	movs	r3, #2
 8009984:	e02d      	b.n	80099e2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2201      	movs	r2, #1
 800998a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2224      	movs	r2, #36	@ 0x24
 8009992:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	681a      	ldr	r2, [r3, #0]
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f022 0201 	bic.w	r2, r2, #1
 80099ac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	689b      	ldr	r3, [r3, #8]
 80099b4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	683a      	ldr	r2, [r7, #0]
 80099be:	430a      	orrs	r2, r1
 80099c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 f872 	bl	8009aac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	68fa      	ldr	r2, [r7, #12]
 80099ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2220      	movs	r2, #32
 80099d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2200      	movs	r2, #0
 80099dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80099e0:	2300      	movs	r3, #0
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3710      	adds	r7, #16
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}

080099ea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80099ea:	b580      	push	{r7, lr}
 80099ec:	b084      	sub	sp, #16
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	6078      	str	r0, [r7, #4]
 80099f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	d101      	bne.n	8009a02 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80099fe:	2302      	movs	r3, #2
 8009a00:	e02d      	b.n	8009a5e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2201      	movs	r2, #1
 8009a06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2224      	movs	r2, #36	@ 0x24
 8009a0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	681a      	ldr	r2, [r3, #0]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f022 0201 	bic.w	r2, r2, #1
 8009a28:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	689b      	ldr	r3, [r3, #8]
 8009a30:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	683a      	ldr	r2, [r7, #0]
 8009a3a:	430a      	orrs	r2, r1
 8009a3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f000 f834 	bl	8009aac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	68fa      	ldr	r2, [r7, #12]
 8009a4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2220      	movs	r2, #32
 8009a50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2200      	movs	r2, #0
 8009a58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009a5c:	2300      	movs	r3, #0
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3710      	adds	r7, #16
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}

08009a66 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8009a66:	b480      	push	{r7}
 8009a68:	b085      	sub	sp, #20
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	60f8      	str	r0, [r7, #12]
 8009a6e:	1d3b      	adds	r3, r7, #4
 8009a70:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	f023 0210 	bic.w	r2, r3, #16
 8009a7e:	893b      	ldrh	r3, [r7, #8]
 8009a80:	4619      	mov	r1, r3
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	430a      	orrs	r2, r1
 8009a88:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	685b      	ldr	r3, [r3, #4]
 8009a90:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 8009a94:	7abb      	ldrb	r3, [r7, #10]
 8009a96:	061a      	lsls	r2, r3, #24
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	430a      	orrs	r2, r1
 8009a9e:	605a      	str	r2, [r3, #4]
}
 8009aa0:	bf00      	nop
 8009aa2:	3714      	adds	r7, #20
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bc80      	pop	{r7}
 8009aa8:	4770      	bx	lr
	...

08009aac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009aac:	b480      	push	{r7}
 8009aae:	b085      	sub	sp, #20
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d108      	bne.n	8009ace <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2201      	movs	r2, #1
 8009ac0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009acc:	e031      	b.n	8009b32 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009ace:	2308      	movs	r3, #8
 8009ad0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009ad2:	2308      	movs	r3, #8
 8009ad4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	689b      	ldr	r3, [r3, #8]
 8009adc:	0e5b      	lsrs	r3, r3, #25
 8009ade:	b2db      	uxtb	r3, r3
 8009ae0:	f003 0307 	and.w	r3, r3, #7
 8009ae4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	689b      	ldr	r3, [r3, #8]
 8009aec:	0f5b      	lsrs	r3, r3, #29
 8009aee:	b2db      	uxtb	r3, r3
 8009af0:	f003 0307 	and.w	r3, r3, #7
 8009af4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009af6:	7bbb      	ldrb	r3, [r7, #14]
 8009af8:	7b3a      	ldrb	r2, [r7, #12]
 8009afa:	4910      	ldr	r1, [pc, #64]	@ (8009b3c <UARTEx_SetNbDataToProcess+0x90>)
 8009afc:	5c8a      	ldrb	r2, [r1, r2]
 8009afe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009b02:	7b3a      	ldrb	r2, [r7, #12]
 8009b04:	490e      	ldr	r1, [pc, #56]	@ (8009b40 <UARTEx_SetNbDataToProcess+0x94>)
 8009b06:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b08:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b0c:	b29a      	uxth	r2, r3
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b14:	7bfb      	ldrb	r3, [r7, #15]
 8009b16:	7b7a      	ldrb	r2, [r7, #13]
 8009b18:	4908      	ldr	r1, [pc, #32]	@ (8009b3c <UARTEx_SetNbDataToProcess+0x90>)
 8009b1a:	5c8a      	ldrb	r2, [r1, r2]
 8009b1c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009b20:	7b7a      	ldrb	r2, [r7, #13]
 8009b22:	4907      	ldr	r1, [pc, #28]	@ (8009b40 <UARTEx_SetNbDataToProcess+0x94>)
 8009b24:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b26:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b2a:	b29a      	uxth	r2, r3
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009b32:	bf00      	nop
 8009b34:	3714      	adds	r7, #20
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bc80      	pop	{r7}
 8009b3a:	4770      	bx	lr
 8009b3c:	08020c88 	.word	0x08020c88
 8009b40:	08020c90 	.word	0x08020c90

08009b44 <LmHandlerInit>:
}
#endif

#if MY_TX
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 8009b4e:	4a0d      	ldr	r2, [pc, #52]	@ (8009b84 <LmHandlerInit+0x40>)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6013      	str	r3, [r2, #0]

#if MY_TX_ABP
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 8009b54:	4b0c      	ldr	r3, [pc, #48]	@ (8009b88 <LmHandlerInit+0x44>)
 8009b56:	4a0d      	ldr	r2, [pc, #52]	@ (8009b8c <LmHandlerInit+0x48>)
 8009b58:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 8009b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8009b88 <LmHandlerInit+0x44>)
 8009b5c:	4a0c      	ldr	r2, [pc, #48]	@ (8009b90 <LmHandlerInit+0x4c>)
 8009b5e:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 8009b60:	4b09      	ldr	r3, [pc, #36]	@ (8009b88 <LmHandlerInit+0x44>)
 8009b62:	4a0c      	ldr	r2, [pc, #48]	@ (8009b94 <LmHandlerInit+0x50>)
 8009b64:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 8009b66:	4b08      	ldr	r3, [pc, #32]	@ (8009b88 <LmHandlerInit+0x44>)
 8009b68:	4a0b      	ldr	r2, [pc, #44]	@ (8009b98 <LmHandlerInit+0x54>)
 8009b6a:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 8009b6c:	4b05      	ldr	r3, [pc, #20]	@ (8009b84 <LmHandlerInit+0x40>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	699b      	ldr	r3, [r3, #24]
 8009b72:	4a0a      	ldr	r2, [pc, #40]	@ (8009b9c <LmHandlerInit+0x58>)
 8009b74:	6153      	str	r3, [r2, #20]
		LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
		LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
		LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
		LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
#endif
    return LORAMAC_HANDLER_SUCCESS;
 8009b76:	2300      	movs	r3, #0

}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	370c      	adds	r7, #12
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bc80      	pop	{r7}
 8009b80:	4770      	bx	lr
 8009b82:	bf00      	nop
 8009b84:	200009f4 	.word	0x200009f4
 8009b88:	200009f8 	.word	0x200009f8
 8009b8c:	0800a219 	.word	0x0800a219
 8009b90:	0800a28d 	.word	0x0800a28d
 8009b94:	0800a35d 	.word	0x0800a35d
 8009b98:	0800a4ad 	.word	0x0800a4ad
 8009b9c:	20000a08 	.word	0x20000a08

08009ba0 <LmHandlerConfigure>:
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b092      	sub	sp, #72	@ 0x48
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
	MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 8009ba8:	2218      	movs	r2, #24
 8009baa:	6879      	ldr	r1, [r7, #4]
 8009bac:	4884      	ldr	r0, [pc, #528]	@ (8009dc0 <LmHandlerConfigure+0x220>)
 8009bae:	f00c ff50 	bl	8016a52 <memcpy1>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    IsUplinkTxPending = false;
 8009bb2:	4b84      	ldr	r3, [pc, #528]	@ (8009dc4 <LmHandlerConfigure+0x224>)
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 8009bb8:	f7f8 fd40 	bl	800263c <LoraInfo_GetPtr>
 8009bbc:	6478      	str	r0, [r7, #68]	@ 0x44

    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 8009bbe:	4b80      	ldr	r3, [pc, #512]	@ (8009dc0 <LmHandlerConfigure+0x220>)
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	461a      	mov	r2, r3
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	4093      	lsls	r3, r2
 8009bc8:	461a      	mov	r2, r3
 8009bca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009bcc:	685b      	ldr	r3, [r3, #4]
 8009bce:	4013      	ands	r3, r2
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d107      	bne.n	8009be4 <LmHandlerConfigure+0x44>
    {
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 8009bd4:	4b7c      	ldr	r3, [pc, #496]	@ (8009dc8 <LmHandlerConfigure+0x228>)
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	2100      	movs	r1, #0
 8009bda:	2000      	movs	r0, #0
 8009bdc:	f00f fc9e 	bl	801951c <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 8009be0:	bf00      	nop
 8009be2:	e7fd      	b.n	8009be0 <LmHandlerConfigure+0x40>
    }

    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 8009be4:	4b76      	ldr	r3, [pc, #472]	@ (8009dc0 <LmHandlerConfigure+0x220>)
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	461a      	mov	r2, r3
 8009bea:	4978      	ldr	r1, [pc, #480]	@ (8009dcc <LmHandlerConfigure+0x22c>)
 8009bec:	4878      	ldr	r0, [pc, #480]	@ (8009dd0 <LmHandlerConfigure+0x230>)
 8009bee:	f004 f83f 	bl	800dc70 <LoRaMacInitialization>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d002      	beq.n	8009bfe <LmHandlerConfigure+0x5e>
    {
        return LORAMAC_HANDLER_ERROR;
 8009bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8009bfc:	e0dc      	b.n	8009db8 <LmHandlerConfigure+0x218>
    }

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    /* Try the restore context from the Backup RAM structure if data retention is available */
    mibReq.Type = MIB_NVM_CTXS;
 8009bfe:	2327      	movs	r3, #39	@ 0x27
 8009c00:	763b      	strb	r3, [r7, #24]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8009c02:	f107 0318 	add.w	r3, r7, #24
 8009c06:	4618      	mov	r0, r3
 8009c08:	f004 fd5e 	bl	800e6c8 <LoRaMacMibSetRequestConfirm>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d103      	bne.n	8009c1a <LmHandlerConfigure+0x7a>
    {
        CtxRestoreDone = true;
 8009c12:	4b70      	ldr	r3, [pc, #448]	@ (8009dd4 <LmHandlerConfigure+0x234>)
 8009c14:	2201      	movs	r2, #1
 8009c16:	701a      	strb	r2, [r3, #0]
 8009c18:	e02a      	b.n	8009c70 <LmHandlerConfigure+0xd0>
    }
    else
    {
        /* Restore context data backup from user callback (stored in FLASH) */
        mibReq.Type = MIB_NVM_BKP_CTXS;
 8009c1a:	2328      	movs	r3, #40	@ 0x28
 8009c1c:	763b      	strb	r3, [r7, #24]
        if( LmHandlerCallbacks->OnRestoreContextRequest != NULL )
 8009c1e:	4b6e      	ldr	r3, [pc, #440]	@ (8009dd8 <LmHandlerConfigure+0x238>)
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	691b      	ldr	r3, [r3, #16]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d00c      	beq.n	8009c42 <LmHandlerConfigure+0xa2>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 8009c28:	f107 0318 	add.w	r3, r7, #24
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	f004 fb73 	bl	800e318 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest( mibReq.Param.BackupContexts, sizeof( LoRaMacNvmData_t ) );
 8009c32:	4b69      	ldr	r3, [pc, #420]	@ (8009dd8 <LmHandlerConfigure+0x238>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	691b      	ldr	r3, [r3, #16]
 8009c38:	69fa      	ldr	r2, [r7, #28]
 8009c3a:	f240 51cc 	movw	r1, #1484	@ 0x5cc
 8009c3e:	4610      	mov	r0, r2
 8009c40:	4798      	blx	r3
        }
        /* Restore context data from backup to main nvm structure */
        mibReq.Type = MIB_NVM_CTXS;
 8009c42:	2327      	movs	r3, #39	@ 0x27
 8009c44:	763b      	strb	r3, [r7, #24]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8009c46:	f107 0318 	add.w	r3, r7, #24
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f004 fd3c 	bl	800e6c8 <LoRaMacMibSetRequestConfirm>
 8009c50:	4603      	mov	r3, r0
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d10c      	bne.n	8009c70 <LmHandlerConfigure+0xd0>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 8009c56:	2301      	movs	r3, #1
 8009c58:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 8009c5a:	f107 0318 	add.w	r3, r7, #24
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f004 fb5a 	bl	800e318 <LoRaMacMibGetRequestConfirm>
            if( mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE )
 8009c64:	7f3b      	ldrb	r3, [r7, #28]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d002      	beq.n	8009c70 <LmHandlerConfigure+0xd0>
            {
                CtxRestoreDone = true;
 8009c6a:	4b5a      	ldr	r3, [pc, #360]	@ (8009dd4 <LmHandlerConfigure+0x234>)
 8009c6c:	2201      	movs	r2, #1
 8009c6e:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if( CtxRestoreDone == true )
 8009c70:	4b58      	ldr	r3, [pc, #352]	@ (8009dd4 <LmHandlerConfigure+0x234>)
 8009c72:	781b      	ldrb	r3, [r3, #0]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d022      	beq.n	8009cbe <LmHandlerConfigure+0x11e>
    {
        if( LmHandlerCallbacks->OnNvmDataChange != NULL )
 8009c78:	4b57      	ldr	r3, [pc, #348]	@ (8009dd8 <LmHandlerConfigure+0x238>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	69db      	ldr	r3, [r3, #28]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d004      	beq.n	8009c8c <LmHandlerConfigure+0xec>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 8009c82:	4b55      	ldr	r3, [pc, #340]	@ (8009dd8 <LmHandlerConfigure+0x238>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	69db      	ldr	r3, [r3, #28]
 8009c88:	2000      	movs	r0, #0
 8009c8a:	4798      	blx	r3
        }

        mibReq.Type = MIB_NVM_CTXS;
 8009c8c:	2327      	movs	r3, #39	@ 0x27
 8009c8e:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 8009c90:	f107 0318 	add.w	r3, r7, #24
 8009c94:	4618      	mov	r0, r3
 8009c96:	f004 fb3f 	bl	800e318 <LoRaMacMibGetRequestConfirm>
        LoRaMacNvmData_t *current_nvm = mibReq.Param.Contexts;
 8009c9a:	69fb      	ldr	r3, [r7, #28]
 8009c9c:	643b      	str	r3, [r7, #64]	@ 0x40

        LmHandlerParams.ActiveRegion = current_nvm->MacGroup2.Region;
 8009c9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009ca0:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8009ca4:	4b46      	ldr	r3, [pc, #280]	@ (8009dc0 <LmHandlerConfigure+0x220>)
 8009ca6:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = current_nvm->MacGroup2.DeviceClass;
 8009ca8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009caa:	f893 2118 	ldrb.w	r2, [r3, #280]	@ 0x118
 8009cae:	4b44      	ldr	r3, [pc, #272]	@ (8009dc0 <LmHandlerConfigure+0x220>)
 8009cb0:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
 8009cb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009cb4:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 8009cb8:	4b41      	ldr	r3, [pc, #260]	@ (8009dc0 <LmHandlerConfigure+0x220>)
 8009cba:	709a      	strb	r2, [r3, #2]
 8009cbc:	e008      	b.n	8009cd0 <LmHandlerConfigure+0x130>
    }
    else
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
    {
        mibReq.Type = MIB_NET_ID;
 8009cbe:	2305      	movs	r3, #5
 8009cc0:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8009cc6:	f107 0318 	add.w	r3, r7, #24
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f004 fcfc 	bl	800e6c8 <LoRaMacMibSetRequestConfirm>
    }

    /* Restore ID struct from NVM or Init from callbacks */
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 8009cd0:	4b3e      	ldr	r3, [pc, #248]	@ (8009dcc <LmHandlerConfigure+0x22c>)
 8009cd2:	689b      	ldr	r3, [r3, #8]
 8009cd4:	4a3d      	ldr	r2, [pc, #244]	@ (8009dcc <LmHandlerConfigure+0x22c>)
 8009cd6:	68d2      	ldr	r2, [r2, #12]
 8009cd8:	4611      	mov	r1, r2
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f00c fb4c 	bl	8016378 <SecureElementInitMcuID>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d002      	beq.n	8009cec <LmHandlerConfigure+0x14c>
    {
        return LORAMAC_HANDLER_ERROR;
 8009ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8009cea:	e065      	b.n	8009db8 <LmHandlerConfigure+0x218>
    }

    /* Read secure-element DEV_EUI, JOIN_EUI and DEV_ADDR values. */
    mibReq.Type = MIB_DEV_ADDR;
 8009cec:	2306      	movs	r3, #6
 8009cee:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8009cf0:	f107 0318 	add.w	r3, r7, #24
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f004 fb0f 	bl	800e318 <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8009cfa:	69fb      	ldr	r3, [r7, #28]
 8009cfc:	4a37      	ldr	r2, [pc, #220]	@ (8009ddc <LmHandlerConfigure+0x23c>)
 8009cfe:	6153      	str	r3, [r2, #20]

    /* Override DevAddress value after init from callbacks */
    LoRaMacMibSetRequestConfirm( &mibReq );
 8009d00:	f107 0318 	add.w	r3, r7, #24
 8009d04:	4618      	mov	r0, r3
 8009d06:	f004 fcdf 	bl	800e6c8 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_DEV_EUI;
 8009d0a:	2302      	movs	r3, #2
 8009d0c:	763b      	strb	r3, [r7, #24]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 8009d0e:	4b33      	ldr	r3, [pc, #204]	@ (8009ddc <LmHandlerConfigure+0x23c>)
 8009d10:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8009d12:	f107 0318 	add.w	r3, r7, #24
 8009d16:	4618      	mov	r0, r3
 8009d18:	f004 fafe 	bl	800e318 <LoRaMacMibGetRequestConfirm>

    mibReq.Type = MIB_JOIN_EUI;
 8009d1c:	2303      	movs	r3, #3
 8009d1e:	763b      	strb	r3, [r7, #24]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 8009d20:	4b2f      	ldr	r3, [pc, #188]	@ (8009de0 <LmHandlerConfigure+0x240>)
 8009d22:	61fb      	str	r3, [r7, #28]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8009d24:	f107 0318 	add.w	r3, r7, #24
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f004 faf5 	bl	800e318 <LoRaMacMibGetRequestConfirm>

    SecureElementPrintKeys();
 8009d2e:	f00c fba3 	bl	8016478 <SecureElementPrintKeys>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG( TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n" );
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 8009d32:	230f      	movs	r3, #15
 8009d34:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 8009d36:	2301      	movs	r3, #1
 8009d38:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8009d3a:	f107 0318 	add.w	r3, r7, #24
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f004 fcc2 	bl	800e6c8 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 8009d44:	2310      	movs	r3, #16
 8009d46:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8009d4c:	f107 0318 	add.w	r3, r7, #24
 8009d50:	4618      	mov	r0, r3
 8009d52:	f004 fcb9 	bl	800e6c8 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 8009d56:	2304      	movs	r3, #4
 8009d58:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 8009d5a:	4b19      	ldr	r3, [pc, #100]	@ (8009dc0 <LmHandlerConfigure+0x220>)
 8009d5c:	789b      	ldrb	r3, [r3, #2]
 8009d5e:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8009d60:	f107 0318 	add.w	r3, r7, #24
 8009d64:	4618      	mov	r0, r3
 8009d66:	f004 fcaf 	bl	800e6c8 <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 8009d6a:	233a      	movs	r3, #58	@ 0x3a
 8009d6c:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 8009d6e:	4b14      	ldr	r3, [pc, #80]	@ (8009dc0 <LmHandlerConfigure+0x220>)
 8009d70:	695b      	ldr	r3, [r3, #20]
 8009d72:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8009d74:	f107 0318 	add.w	r3, r7, #24
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f004 fca5 	bl	800e6c8 <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8009d7e:	230f      	movs	r3, #15
 8009d80:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 8009d82:	4b0f      	ldr	r3, [pc, #60]	@ (8009dc0 <LmHandlerConfigure+0x220>)
 8009d84:	781b      	ldrb	r3, [r3, #0]
 8009d86:	f107 0210 	add.w	r2, r7, #16
 8009d8a:	4611      	mov	r1, r2
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f007 fbc2 	bl	8011516 <RegionGetPhyParam>
 8009d92:	4603      	mov	r3, r0
 8009d94:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	bf14      	ite	ne
 8009d9c:	2301      	movne	r3, #1
 8009d9e:	2300      	moveq	r3, #0
 8009da0:	b2da      	uxtb	r2, r3
 8009da2:	4b07      	ldr	r3, [pc, #28]	@ (8009dc0 <LmHandlerConfigure+0x220>)
 8009da4:	71da      	strb	r2, [r3, #7]

    /* Set system maximum tolerated rx error in milliseconds */
    LmHandlerSetSystemMaxRxError( 20 );
 8009da6:	2014      	movs	r0, #20
 8009da8:	f000 fa1e 	bl	800a1e8 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 8009dac:	4b04      	ldr	r3, [pc, #16]	@ (8009dc0 <LmHandlerConfigure+0x220>)
 8009dae:	79db      	ldrb	r3, [r3, #7]
 8009db0:	4618      	mov	r0, r3
 8009db2:	f005 fb03 	bl	800f3bc <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 8009db6:	2300      	movs	r3, #0
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3748      	adds	r7, #72	@ 0x48
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}
 8009dc0:	200009dc 	.word	0x200009dc
 8009dc4:	20000a24 	.word	0x20000a24
 8009dc8:	08020698 	.word	0x08020698
 8009dcc:	20000a08 	.word	0x20000a08
 8009dd0:	200009f8 	.word	0x200009f8
 8009dd4:	20000a25 	.word	0x20000a25
 8009dd8:	200009f4 	.word	0x200009f4
 8009ddc:	200009b0 	.word	0x200009b0
 8009de0:	200009b8 	.word	0x200009b8

08009de4 <LmHandlerJoin>:
    return DutyCycleWaitTime;
}
#if MY_TX
#if MY_TX_ABP
void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b08c      	sub	sp, #48	@ 0x30
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	4603      	mov	r3, r0
 8009dec:	460a      	mov	r2, r1
 8009dee:	71fb      	strb	r3, [r7, #7]
 8009df0:	4613      	mov	r3, r2
 8009df2:	71bb      	strb	r3, [r7, #6]

	if( mode == ACTIVATION_TYPE_ABP )
 8009df4:	79fb      	ldrb	r3, [r7, #7]
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	d10d      	bne.n	8009e16 <LmHandlerJoin+0x32>
	{

		MibRequestConfirm_t mibReq;

		JoinParams.forceRejoin = forceRejoin;
 8009dfa:	4a09      	ldr	r2, [pc, #36]	@ (8009e20 <LmHandlerJoin+0x3c>)
 8009dfc:	79bb      	ldrb	r3, [r7, #6]
 8009dfe:	7213      	strb	r3, [r2, #8]

		LoRaMacStart();
 8009e00:	f004 f9ec 	bl	800e1dc <LoRaMacStart>

		mibReq.Type = MIB_NETWORK_ACTIVATION;
 8009e04:	2301      	movs	r3, #1
 8009e06:	723b      	strb	r3, [r7, #8]
		mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 8009e08:	2301      	movs	r3, #1
 8009e0a:	733b      	strb	r3, [r7, #12]
		LoRaMacMibSetRequestConfirm( &mibReq );
 8009e0c:	f107 0308 	add.w	r3, r7, #8
 8009e10:	4618      	mov	r0, r3
 8009e12:	f004 fc59 	bl	800e6c8 <LoRaMacMibSetRequestConfirm>
	}
}
 8009e16:	bf00      	nop
 8009e18:	3730      	adds	r7, #48	@ 0x30
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}
 8009e1e:	bf00      	nop
 8009e20:	20000078 	.word	0x20000078

08009e24 <LmHandlerJoinStatus>:
#endif /* LORAMAC_VERSION */
}
#endif

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b08c      	sub	sp, #48	@ 0x30
 8009e28:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	713b      	strb	r3, [r7, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 8009e2e:	1d3b      	adds	r3, r7, #4
 8009e30:	4618      	mov	r0, r3
 8009e32:	f004 fa71 	bl	800e318 <LoRaMacMibGetRequestConfirm>
 8009e36:	4603      	mov	r3, r0
 8009e38:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if( status == LORAMAC_STATUS_OK )
 8009e3c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d106      	bne.n	8009e52 <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 8009e44:	7a3b      	ldrb	r3, [r7, #8]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d101      	bne.n	8009e4e <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	e002      	b.n	8009e54 <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 8009e4e:	2301      	movs	r3, #1
 8009e50:	e000      	b.n	8009e54 <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 8009e52:	2300      	movs	r3, #0
    }
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3730      	adds	r7, #48	@ 0x30
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}

08009e5c <LmHandlerSend>:
LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed,
                                      bool allowDelayedTx )
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b08a      	sub	sp, #40	@ 0x28
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	460b      	mov	r3, r1
 8009e66:	70fb      	strb	r3, [r7, #3]
 8009e68:	4613      	mov	r3, r2
 8009e6a:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 8009e6c:	23ff      	movs	r3, #255	@ 0xff
 8009e6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if( LoRaMacIsBusy() == true )
 8009e72:	f001 fbbf 	bl	800b5f4 <LoRaMacIsBusy>
 8009e76:	4603      	mov	r3, r0
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d002      	beq.n	8009e82 <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 8009e7c:	f06f 0301 	mvn.w	r3, #1
 8009e80:	e0ab      	b.n	8009fda <LmHandlerSend+0x17e>
    }

    if( LoRaMacIsStopped() == true )
 8009e82:	f001 fbdf 	bl	800b644 <LoRaMacIsStopped>
 8009e86:	4603      	mov	r3, r0
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d002      	beq.n	8009e92 <LmHandlerSend+0x36>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8009e8c:	f06f 0302 	mvn.w	r3, #2
 8009e90:	e0a3      	b.n	8009fda <LmHandlerSend+0x17e>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 8009e92:	f7ff ffc7 	bl	8009e24 <LmHandlerJoinStatus>
 8009e96:	4603      	mov	r3, r0
 8009e98:	2b01      	cmp	r3, #1
 8009e9a:	d00a      	beq.n	8009eb2 <LmHandlerSend+0x56>
    {
        /* The network isn't joined, try again. */
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 8009e9c:	4b51      	ldr	r3, [pc, #324]	@ (8009fe4 <LmHandlerSend+0x188>)
 8009e9e:	79db      	ldrb	r3, [r3, #7]
 8009ea0:	4a50      	ldr	r2, [pc, #320]	@ (8009fe4 <LmHandlerSend+0x188>)
 8009ea2:	7a12      	ldrb	r2, [r2, #8]
 8009ea4:	4611      	mov	r1, r2
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f7ff ff9c 	bl	8009de4 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8009eac:	f06f 0302 	mvn.w	r3, #2
 8009eb0:	e093      	b.n	8009fda <LmHandlerSend+0x17e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 8009eb2:	4a4d      	ldr	r2, [pc, #308]	@ (8009fe8 <LmHandlerSend+0x18c>)
 8009eb4:	78fb      	ldrb	r3, [r7, #3]
 8009eb6:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 8009eb8:	78fb      	ldrb	r3, [r7, #3]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	bf14      	ite	ne
 8009ebe:	2301      	movne	r3, #1
 8009ec0:	2300      	moveq	r3, #0
 8009ec2:	b2db      	uxtb	r3, r3
 8009ec4:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 8009ec6:	4b49      	ldr	r3, [pc, #292]	@ (8009fec <LmHandlerSend+0x190>)
 8009ec8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8009ecc:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	785b      	ldrb	r3, [r3, #1]
 8009ed2:	f107 020c 	add.w	r2, r7, #12
 8009ed6:	4611      	mov	r1, r2
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f004 f98d 	bl	800e1f8 <LoRaMacQueryTxPossible>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d009      	beq.n	8009ef8 <LmHandlerSend+0x9c>
    {
        /* Send empty frame in order to flush MAC commands */
        mcpsReq.Type = MCPS_UNCONFIRMED;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 8009eec:	2300      	movs	r3, #0
 8009eee:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 8009ef0:	23f9      	movs	r3, #249	@ 0xf9
 8009ef2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009ef6:	e008      	b.n	8009f0a <LmHandlerSend+0xae>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	781b      	ldrb	r3, [r3, #0]
 8009efc:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	785b      	ldrb	r3, [r3, #1]
 8009f02:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	685b      	ldr	r3, [r3, #4]
 8009f08:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 8009f0a:	4b37      	ldr	r3, [pc, #220]	@ (8009fe8 <LmHandlerSend+0x18c>)
 8009f0c:	687a      	ldr	r2, [r7, #4]
 8009f0e:	3310      	adds	r3, #16
 8009f10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009f14:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 8009f18:	4b34      	ldr	r3, [pc, #208]	@ (8009fec <LmHandlerSend+0x190>)
 8009f1a:	f993 2004 	ldrsb.w	r2, [r3, #4]
 8009f1e:	4b32      	ldr	r3, [pc, #200]	@ (8009fe8 <LmHandlerSend+0x18c>)
 8009f20:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 8009f22:	78ba      	ldrb	r2, [r7, #2]
 8009f24:	f107 0310 	add.w	r3, r7, #16
 8009f28:	4611      	mov	r1, r2
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f005 f90e 	bl	800f14c <LoRaMacMcpsRequest>
 8009f30:	4603      	mov	r3, r0
 8009f32:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 8009f36:	6a3b      	ldr	r3, [r7, #32]
 8009f38:	4a2d      	ldr	r2, [pc, #180]	@ (8009ff0 <LmHandlerSend+0x194>)
 8009f3a:	6013      	str	r3, [r2, #0]

    switch( status )
 8009f3c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009f40:	2b11      	cmp	r3, #17
 8009f42:	d843      	bhi.n	8009fcc <LmHandlerSend+0x170>
 8009f44:	a201      	add	r2, pc, #4	@ (adr r2, 8009f4c <LmHandlerSend+0xf0>)
 8009f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f4a:	bf00      	nop
 8009f4c:	08009f95 	.word	0x08009f95
 8009f50:	08009fad 	.word	0x08009fad
 8009f54:	08009fcd 	.word	0x08009fcd
 8009f58:	08009fcd 	.word	0x08009fcd
 8009f5c:	08009fcd 	.word	0x08009fcd
 8009f60:	08009fcd 	.word	0x08009fcd
 8009f64:	08009fcd 	.word	0x08009fcd
 8009f68:	08009fb5 	.word	0x08009fb5
 8009f6c:	08009fcd 	.word	0x08009fcd
 8009f70:	08009fcd 	.word	0x08009fcd
 8009f74:	08009fcd 	.word	0x08009fcd
 8009f78:	08009fc5 	.word	0x08009fc5
 8009f7c:	08009fcd 	.word	0x08009fcd
 8009f80:	08009fcd 	.word	0x08009fcd
 8009f84:	08009fad 	.word	0x08009fad
 8009f88:	08009fad 	.word	0x08009fad
 8009f8c:	08009fad 	.word	0x08009fad
 8009f90:	08009fbd 	.word	0x08009fbd
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            IsUplinkTxPending = false;
 8009f94:	4b17      	ldr	r3, [pc, #92]	@ (8009ff4 <LmHandlerSend+0x198>)
 8009f96:	2200      	movs	r2, #0
 8009f98:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 8009f9a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009f9e:	f113 0f07 	cmn.w	r3, #7
 8009fa2:	d017      	beq.n	8009fd4 <LmHandlerSend+0x178>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 8009faa:	e013      	b.n	8009fd4 <LmHandlerSend+0x178>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 8009fac:	23fe      	movs	r3, #254	@ 0xfe
 8009fae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8009fb2:	e010      	b.n	8009fd6 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8009fb4:	23fd      	movs	r3, #253	@ 0xfd
 8009fb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8009fba:	e00c      	b.n	8009fd6 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 8009fbc:	23fb      	movs	r3, #251	@ 0xfb
 8009fbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8009fc2:	e008      	b.n	8009fd6 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 8009fc4:	23fa      	movs	r3, #250	@ 0xfa
 8009fc6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8009fca:	e004      	b.n	8009fd6 <LmHandlerSend+0x17a>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8009fcc:	23ff      	movs	r3, #255	@ 0xff
 8009fce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8009fd2:	e000      	b.n	8009fd6 <LmHandlerSend+0x17a>
            break;
 8009fd4:	bf00      	nop
    }

    return lmhStatus;
 8009fd6:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3728      	adds	r7, #40	@ 0x28
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}
 8009fe2:	bf00      	nop
 8009fe4:	20000078 	.word	0x20000078
 8009fe8:	20000084 	.word	0x20000084
 8009fec:	200009dc 	.word	0x200009dc
 8009ff0:	20000a20 	.word	0x20000a20
 8009ff4:	20000a24 	.word	0x20000a24

08009ff8 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b086      	sub	sp, #24
 8009ffc:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 8009ffe:	2309      	movs	r3, #9
 800a000:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800a002:	463b      	mov	r3, r7
 800a004:	4618      	mov	r0, r3
 800a006:	f004 ff09 	bl	800ee1c <LoRaMacMlmeRequest>
 800a00a:	4603      	mov	r3, r0
 800a00c:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	4a06      	ldr	r2, [pc, #24]	@ (800a02c <LmHandlerDeviceTimeReq+0x34>)
 800a012:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800a014:	7dfb      	ldrb	r3, [r7, #23]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d101      	bne.n	800a01e <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800a01a:	2300      	movs	r3, #0
 800a01c:	e001      	b.n	800a022 <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800a01e:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800a022:	4618      	mov	r0, r3
 800a024:	3718      	adds	r7, #24
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}
 800a02a:	bf00      	nop
 800a02c:	20000a20 	.word	0x20000a20

0800a030 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800a030:	b480      	push	{r7}
 800a032:	b083      	sub	sp, #12
 800a034:	af00      	add	r7, sp, #0
 800a036:	4603      	mov	r3, r0
 800a038:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800a03a:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800a03e:	4618      	mov	r0, r3
 800a040:	370c      	adds	r7, #12
 800a042:	46bd      	mov	sp, r7
 800a044:	bc80      	pop	{r7}
 800a046:	4770      	bx	lr

0800a048 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b08e      	sub	sp, #56	@ 0x38
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	4603      	mov	r3, r0
 800a050:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800a052:	2300      	movs	r3, #0
 800a054:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( LoRaMacIsBusy() == true )
 800a058:	f001 facc 	bl	800b5f4 <LoRaMacIsBusy>
 800a05c:	4603      	mov	r3, r0
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d002      	beq.n	800a068 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800a062:	f06f 0301 	mvn.w	r3, #1
 800a066:	e071      	b.n	800a14c <LmHandlerRequestClass+0x104>
    }

    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 800a068:	f7ff fedc 	bl	8009e24 <LmHandlerJoinStatus>
 800a06c:	4603      	mov	r3, r0
 800a06e:	2b01      	cmp	r3, #1
 800a070:	d002      	beq.n	800a078 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800a072:	f06f 0302 	mvn.w	r3, #2
 800a076:	e069      	b.n	800a14c <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800a078:	2300      	movs	r3, #0
 800a07a:	733b      	strb	r3, [r7, #12]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800a07c:	f107 030c 	add.w	r3, r7, #12
 800a080:	4618      	mov	r0, r3
 800a082:	f004 f949 	bl	800e318 <LoRaMacMibGetRequestConfirm>
 800a086:	4603      	mov	r3, r0
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d002      	beq.n	800a092 <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800a08c:	f04f 33ff 	mov.w	r3, #4294967295
 800a090:	e05c      	b.n	800a14c <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800a092:	7c3b      	ldrb	r3, [r7, #16]
 800a094:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Attempt to switch only if class update */
    if( currentClass != newClass )
 800a098:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800a09c:	79fb      	ldrb	r3, [r7, #7]
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d052      	beq.n	800a148 <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800a0a2:	79fb      	ldrb	r3, [r7, #7]
 800a0a4:	2b02      	cmp	r3, #2
 800a0a6:	d028      	beq.n	800a0fa <LmHandlerRequestClass+0xb2>
 800a0a8:	2b02      	cmp	r3, #2
 800a0aa:	dc48      	bgt.n	800a13e <LmHandlerRequestClass+0xf6>
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d002      	beq.n	800a0b6 <LmHandlerRequestClass+0x6e>
 800a0b0:	2b01      	cmp	r3, #1
 800a0b2:	d01e      	beq.n	800a0f2 <LmHandlerRequestClass+0xaa>
                        }
                    }
                }
                break;
            default:
                break;
 800a0b4:	e043      	b.n	800a13e <LmHandlerRequestClass+0xf6>
                    if( currentClass != CLASS_A )
 800a0b6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d041      	beq.n	800a142 <LmHandlerRequestClass+0xfa>
                        mibReq.Param.Class = newClass;
 800a0be:	79fb      	ldrb	r3, [r7, #7]
 800a0c0:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800a0c2:	f107 030c 	add.w	r3, r7, #12
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f004 fafe 	bl	800e6c8 <LoRaMacMibSetRequestConfirm>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d10b      	bne.n	800a0ea <LmHandlerRequestClass+0xa2>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800a0d2:	4b20      	ldr	r3, [pc, #128]	@ (800a154 <LmHandlerRequestClass+0x10c>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d032      	beq.n	800a142 <LmHandlerRequestClass+0xfa>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800a0dc:	4b1d      	ldr	r3, [pc, #116]	@ (800a154 <LmHandlerRequestClass+0x10c>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0e2:	79fa      	ldrb	r2, [r7, #7]
 800a0e4:	4610      	mov	r0, r2
 800a0e6:	4798      	blx	r3
                break;
 800a0e8:	e02b      	b.n	800a142 <LmHandlerRequestClass+0xfa>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800a0ea:	23ff      	movs	r3, #255	@ 0xff
 800a0ec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800a0f0:	e027      	b.n	800a142 <LmHandlerRequestClass+0xfa>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800a0f2:	23ff      	movs	r3, #255	@ 0xff
 800a0f4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800a0f8:	e026      	b.n	800a148 <LmHandlerRequestClass+0x100>
                    if( currentClass != CLASS_A )
 800a0fa:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d003      	beq.n	800a10a <LmHandlerRequestClass+0xc2>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800a102:	23ff      	movs	r3, #255	@ 0xff
 800a104:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800a108:	e01d      	b.n	800a146 <LmHandlerRequestClass+0xfe>
                        mibReq.Param.Class = newClass;
 800a10a:	79fb      	ldrb	r3, [r7, #7]
 800a10c:	743b      	strb	r3, [r7, #16]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800a10e:	f107 030c 	add.w	r3, r7, #12
 800a112:	4618      	mov	r0, r3
 800a114:	f004 fad8 	bl	800e6c8 <LoRaMacMibSetRequestConfirm>
 800a118:	4603      	mov	r3, r0
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d10b      	bne.n	800a136 <LmHandlerRequestClass+0xee>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800a11e:	4b0d      	ldr	r3, [pc, #52]	@ (800a154 <LmHandlerRequestClass+0x10c>)
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a124:	2b00      	cmp	r3, #0
 800a126:	d00e      	beq.n	800a146 <LmHandlerRequestClass+0xfe>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800a128:	4b0a      	ldr	r3, [pc, #40]	@ (800a154 <LmHandlerRequestClass+0x10c>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a12e:	79fa      	ldrb	r2, [r7, #7]
 800a130:	4610      	mov	r0, r2
 800a132:	4798      	blx	r3
                break;
 800a134:	e007      	b.n	800a146 <LmHandlerRequestClass+0xfe>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800a136:	23ff      	movs	r3, #255	@ 0xff
 800a138:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                break;
 800a13c:	e003      	b.n	800a146 <LmHandlerRequestClass+0xfe>
                break;
 800a13e:	bf00      	nop
 800a140:	e002      	b.n	800a148 <LmHandlerRequestClass+0x100>
                break;
 800a142:	bf00      	nop
 800a144:	e000      	b.n	800a148 <LmHandlerRequestClass+0x100>
                break;
 800a146:	bf00      	nop
        }
    }
    return errorStatus;
 800a148:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	3738      	adds	r7, #56	@ 0x38
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}
 800a154:	200009f4 	.word	0x200009f4

0800a158 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b08c      	sub	sp, #48	@ 0x30
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( deviceClass == NULL )
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d102      	bne.n	800a16c <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800a166:	f04f 33ff 	mov.w	r3, #4294967295
 800a16a:	e010      	b.n	800a18e <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800a16c:	2300      	movs	r3, #0
 800a16e:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800a170:	f107 0308 	add.w	r3, r7, #8
 800a174:	4618      	mov	r0, r3
 800a176:	f004 f8cf 	bl	800e318 <LoRaMacMibGetRequestConfirm>
 800a17a:	4603      	mov	r3, r0
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d002      	beq.n	800a186 <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800a180:	f04f 33ff 	mov.w	r3, #4294967295
 800a184:	e003      	b.n	800a18e <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800a186:	7b3a      	ldrb	r2, [r7, #12]
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800a18c:	2300      	movs	r3, #0
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3730      	adds	r7, #48	@ 0x30
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}
	...

0800a198 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b08c      	sub	sp, #48	@ 0x30
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if( txDatarate == NULL )
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d102      	bne.n	800a1ac <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800a1a6:	f04f 33ff 	mov.w	r3, #4294967295
 800a1aa:	e016      	b.n	800a1da <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800a1ac:	2320      	movs	r3, #32
 800a1ae:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 800a1b0:	f107 0308 	add.w	r3, r7, #8
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f004 f8af 	bl	800e318 <LoRaMacMibGetRequestConfirm>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d002      	beq.n	800a1c6 <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800a1c0:	f04f 33ff 	mov.w	r3, #4294967295
 800a1c4:	e009      	b.n	800a1da <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800a1c6:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f993 2000 	ldrsb.w	r2, [r3]
 800a1d4:	4b03      	ldr	r3, [pc, #12]	@ (800a1e4 <LmHandlerGetTxDatarate+0x4c>)
 800a1d6:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800a1d8:	2300      	movs	r3, #0
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3730      	adds	r7, #48	@ 0x30
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}
 800a1e2:	bf00      	nop
 800a1e4:	200009dc 	.word	0x200009dc

0800a1e8 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b08c      	sub	sp, #48	@ 0x30
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800a1f0:	2323      	movs	r3, #35	@ 0x23
 800a1f2:	723b      	strb	r3, [r7, #8]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	60fb      	str	r3, [r7, #12]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800a1f8:	f107 0308 	add.w	r3, r7, #8
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f004 fa63 	bl	800e6c8 <LoRaMacMibSetRequestConfirm>
 800a202:	4603      	mov	r3, r0
 800a204:	2b00      	cmp	r3, #0
 800a206:	d002      	beq.n	800a20e <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800a208:	f04f 33ff 	mov.w	r3, #4294967295
 800a20c:	e000      	b.n	800a210 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800a20e:	2300      	movs	r3, #0
}
 800a210:	4618      	mov	r0, r3
 800a212:	3730      	adds	r7, #48	@ 0x30
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b082      	sub	sp, #8
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800a220:	4b18      	ldr	r3, [pc, #96]	@ (800a284 <McpsConfirm+0x6c>)
 800a222:	2201      	movs	r2, #1
 800a224:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	785a      	ldrb	r2, [r3, #1]
 800a22a:	4b16      	ldr	r3, [pc, #88]	@ (800a284 <McpsConfirm+0x6c>)
 800a22c:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	789b      	ldrb	r3, [r3, #2]
 800a232:	b25a      	sxtb	r2, r3
 800a234:	4b13      	ldr	r3, [pc, #76]	@ (800a284 <McpsConfirm+0x6c>)
 800a236:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	68db      	ldr	r3, [r3, #12]
 800a23c:	4a11      	ldr	r2, [pc, #68]	@ (800a284 <McpsConfirm+0x6c>)
 800a23e:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800a246:	4b0f      	ldr	r3, [pc, #60]	@ (800a284 <McpsConfirm+0x6c>)
 800a248:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	691b      	ldr	r3, [r3, #16]
 800a24e:	b2da      	uxtb	r2, r3
 800a250:	4b0c      	ldr	r3, [pc, #48]	@ (800a284 <McpsConfirm+0x6c>)
 800a252:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	791b      	ldrb	r3, [r3, #4]
 800a258:	461a      	mov	r2, r3
 800a25a:	4b0a      	ldr	r3, [pc, #40]	@ (800a284 <McpsConfirm+0x6c>)
 800a25c:	725a      	strb	r2, [r3, #9]

    if( LmHandlerCallbacks->OnTxData != NULL )
 800a25e:	4b0a      	ldr	r3, [pc, #40]	@ (800a288 <McpsConfirm+0x70>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a264:	2b00      	cmp	r3, #0
 800a266:	d004      	beq.n	800a272 <McpsConfirm+0x5a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800a268:	4b07      	ldr	r3, [pc, #28]	@ (800a288 <McpsConfirm+0x70>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a26e:	4805      	ldr	r0, [pc, #20]	@ (800a284 <McpsConfirm+0x6c>)
 800a270:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800a272:	6879      	ldr	r1, [r7, #4]
 800a274:	2000      	movs	r0, #0
 800a276:	f000 f963 	bl	800a540 <LmHandlerPackagesNotify>
}
 800a27a:	bf00      	nop
 800a27c:	3708      	adds	r7, #8
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}
 800a282:	bf00      	nop
 800a284:	20000084 	.word	0x20000084
 800a288:	200009f4 	.word	0x200009f4

0800a28c <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b086      	sub	sp, #24
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800a296:	2300      	movs	r3, #0
 800a298:	73fb      	strb	r3, [r7, #15]
    RxParams.IsMcpsIndication = 1;
 800a29a:	4b2d      	ldr	r3, [pc, #180]	@ (800a350 <McpsIndication+0xc4>)
 800a29c:	2201      	movs	r2, #1
 800a29e:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	785a      	ldrb	r2, [r3, #1]
 800a2a4:	4b2a      	ldr	r3, [pc, #168]	@ (800a350 <McpsIndication+0xc4>)
 800a2a6:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800a2a8:	4b29      	ldr	r3, [pc, #164]	@ (800a350 <McpsIndication+0xc4>)
 800a2aa:	785b      	ldrb	r3, [r3, #1]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d14b      	bne.n	800a348 <McpsIndication+0xbc>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	791b      	ldrb	r3, [r3, #4]
 800a2b4:	b25a      	sxtb	r2, r3
 800a2b6:	4b26      	ldr	r3, [pc, #152]	@ (800a350 <McpsIndication+0xc4>)
 800a2b8:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a2c0:	b25a      	sxtb	r2, r3
 800a2c2:	4b23      	ldr	r3, [pc, #140]	@ (800a350 <McpsIndication+0xc4>)
 800a2c4:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800a2cc:	4b20      	ldr	r3, [pc, #128]	@ (800a350 <McpsIndication+0xc4>)
 800a2ce:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	78da      	ldrb	r2, [r3, #3]
 800a2d4:	4b1e      	ldr	r3, [pc, #120]	@ (800a350 <McpsIndication+0xc4>)
 800a2d6:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	691b      	ldr	r3, [r3, #16]
 800a2dc:	4a1c      	ldr	r2, [pc, #112]	@ (800a350 <McpsIndication+0xc4>)
 800a2de:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	78db      	ldrb	r3, [r3, #3]
 800a2e4:	743b      	strb	r3, [r7, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	7b1b      	ldrb	r3, [r3, #12]
 800a2ea:	747b      	strb	r3, [r7, #17]
    appData.Buffer = mcpsIndication->Buffer;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	689b      	ldr	r3, [r3, #8]
 800a2f0:	617b      	str	r3, [r7, #20]

    if( LmHandlerCallbacks->OnRxData != NULL )
 800a2f2:	4b18      	ldr	r3, [pc, #96]	@ (800a354 <McpsIndication+0xc8>)
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d007      	beq.n	800a30c <McpsIndication+0x80>
    {
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800a2fc:	4b15      	ldr	r3, [pc, #84]	@ (800a354 <McpsIndication+0xc8>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a302:	f107 0210 	add.w	r2, r7, #16
 800a306:	4912      	ldr	r1, [pc, #72]	@ (800a350 <McpsIndication+0xc4>)
 800a308:	4610      	mov	r0, r2
 800a30a:	4798      	blx	r3
    }

    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 800a30c:	4b11      	ldr	r3, [pc, #68]	@ (800a354 <McpsIndication+0xc8>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a312:	2b00      	cmp	r3, #0
 800a314:	d007      	beq.n	800a326 <McpsIndication+0x9a>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	7e1b      	ldrb	r3, [r3, #24]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d003      	beq.n	800a326 <McpsIndication+0x9a>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800a31e:	4b0d      	ldr	r3, [pc, #52]	@ (800a354 <McpsIndication+0xc8>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a324:	4798      	blx	r3
    }
    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800a326:	6879      	ldr	r1, [r7, #4]
 800a328:	2001      	movs	r0, #1
 800a32a:	f000 f909 	bl	800a540 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800a32e:	f107 030f 	add.w	r3, r7, #15
 800a332:	4618      	mov	r0, r3
 800a334:	f7ff ff10 	bl	800a158 <LmHandlerGetCurrentClass>
            .Port = 0
        };
        LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( mcpsIndication->IsUplinkTxPending != 0 )
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	795b      	ldrb	r3, [r3, #5]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d004      	beq.n	800a34a <McpsIndication+0xbe>
    {
        /* The server signals that it has pending data to be sent. */
        /* We schedule an uplink as soon as possible to flush the server. */
        IsUplinkTxPending = true;
 800a340:	4b05      	ldr	r3, [pc, #20]	@ (800a358 <McpsIndication+0xcc>)
 800a342:	2201      	movs	r2, #1
 800a344:	701a      	strb	r2, [r3, #0]
 800a346:	e000      	b.n	800a34a <McpsIndication+0xbe>
        return;
 800a348:	bf00      	nop
    }
#endif /* LORAMAC_VERSION */
}
 800a34a:	3718      	adds	r7, #24
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}
 800a350:	200000a0 	.word	0x200000a0
 800a354:	200009f4 	.word	0x200009f4
 800a358:	20000a24 	.word	0x20000a24

0800a35c <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b08c      	sub	sp, #48	@ 0x30
 800a360:	af00      	add	r7, sp, #0
 800a362:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800a364:	4b49      	ldr	r3, [pc, #292]	@ (800a48c <MlmeConfirm+0x130>)
 800a366:	2200      	movs	r2, #0
 800a368:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	785a      	ldrb	r2, [r3, #1]
 800a36e:	4b47      	ldr	r3, [pc, #284]	@ (800a48c <MlmeConfirm+0x130>)
 800a370:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 800a372:	4b47      	ldr	r3, [pc, #284]	@ (800a490 <MlmeConfirm+0x134>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d004      	beq.n	800a386 <MlmeConfirm+0x2a>
    {
        LmHandlerCallbacks->OnTxData( &TxParams );
 800a37c:	4b44      	ldr	r3, [pc, #272]	@ (800a490 <MlmeConfirm+0x134>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a382:	4842      	ldr	r0, [pc, #264]	@ (800a48c <MlmeConfirm+0x130>)
 800a384:	4798      	blx	r3
    }

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800a386:	6879      	ldr	r1, [r7, #4]
 800a388:	2002      	movs	r0, #2
 800a38a:	f000 f8d9 	bl	800a540 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	781b      	ldrb	r3, [r3, #0]
 800a392:	3b01      	subs	r3, #1
 800a394:	2b0b      	cmp	r3, #11
 800a396:	d872      	bhi.n	800a47e <MlmeConfirm+0x122>
 800a398:	a201      	add	r2, pc, #4	@ (adr r2, 800a3a0 <MlmeConfirm+0x44>)
 800a39a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a39e:	bf00      	nop
 800a3a0:	0800a3d1 	.word	0x0800a3d1
 800a3a4:	0800a47f 	.word	0x0800a47f
 800a3a8:	0800a47f 	.word	0x0800a47f
 800a3ac:	0800a47f 	.word	0x0800a47f
 800a3b0:	0800a44d 	.word	0x0800a44d
 800a3b4:	0800a47f 	.word	0x0800a47f
 800a3b8:	0800a47f 	.word	0x0800a47f
 800a3bc:	0800a47f 	.word	0x0800a47f
 800a3c0:	0800a47f 	.word	0x0800a47f
 800a3c4:	0800a47f 	.word	0x0800a47f
 800a3c8:	0800a465 	.word	0x0800a465
 800a3cc:	0800a47f 	.word	0x0800a47f
    {
        case MLME_JOIN:
            {
                MibRequestConfirm_t mibReq;
                mibReq.Type = MIB_DEV_ADDR;
 800a3d0:	2306      	movs	r3, #6
 800a3d2:	723b      	strb	r3, [r7, #8]
                LoRaMacMibGetRequestConfirm( &mibReq );
 800a3d4:	f107 0308 	add.w	r3, r7, #8
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f003 ff9d 	bl	800e318 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 800a3de:	4b2d      	ldr	r3, [pc, #180]	@ (800a494 <MlmeConfirm+0x138>)
 800a3e0:	79db      	ldrb	r3, [r3, #7]
 800a3e2:	68fa      	ldr	r2, [r7, #12]
 800a3e4:	4611      	mov	r1, r2
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	f00c fa98 	bl	801691c <SecureElementSetDevAddr>
 800a3ec:	4603      	mov	r3, r0
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d102      	bne.n	800a3f8 <MlmeConfirm+0x9c>
                {
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	4a28      	ldr	r2, [pc, #160]	@ (800a498 <MlmeConfirm+0x13c>)
 800a3f6:	6153      	str	r3, [r2, #20]
                }
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800a3f8:	4828      	ldr	r0, [pc, #160]	@ (800a49c <MlmeConfirm+0x140>)
 800a3fa:	f7ff fecd 	bl	800a198 <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 800a3fe:	4828      	ldr	r0, [pc, #160]	@ (800a4a0 <MlmeConfirm+0x144>)
 800a400:	f000 f91a 	bl	800a638 <LmHandlerGetTxPower>

                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800a404:	4b21      	ldr	r3, [pc, #132]	@ (800a48c <MlmeConfirm+0x130>)
 800a406:	785b      	ldrb	r3, [r3, #1]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d108      	bne.n	800a41e <MlmeConfirm+0xc2>
                {
                    /* Status is OK, node has joined the network */
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800a40c:	4b21      	ldr	r3, [pc, #132]	@ (800a494 <MlmeConfirm+0x138>)
 800a40e:	2200      	movs	r2, #0
 800a410:	719a      	strb	r2, [r3, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800a412:	4b24      	ldr	r3, [pc, #144]	@ (800a4a4 <MlmeConfirm+0x148>)
 800a414:	785b      	ldrb	r3, [r3, #1]
 800a416:	4618      	mov	r0, r3
 800a418:	f7ff fe16 	bl	800a048 <LmHandlerRequestClass>
 800a41c:	e002      	b.n	800a424 <MlmeConfirm+0xc8>
                }
                else
                {
                    /* Join was not successful. Try to join again */
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800a41e:	4b1d      	ldr	r3, [pc, #116]	@ (800a494 <MlmeConfirm+0x138>)
 800a420:	22ff      	movs	r2, #255	@ 0xff
 800a422:	719a      	strb	r2, [r3, #6]
                }
                /* Notify upper layer */
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800a424:	4b1a      	ldr	r3, [pc, #104]	@ (800a490 <MlmeConfirm+0x134>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d004      	beq.n	800a438 <MlmeConfirm+0xdc>
                {
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800a42e:	4b18      	ldr	r3, [pc, #96]	@ (800a490 <MlmeConfirm+0x134>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a434:	4817      	ldr	r0, [pc, #92]	@ (800a494 <MlmeConfirm+0x138>)
 800a436:	4798      	blx	r3
                }
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800a438:	4b14      	ldr	r3, [pc, #80]	@ (800a48c <MlmeConfirm+0x130>)
 800a43a:	785b      	ldrb	r3, [r3, #1]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d120      	bne.n	800a482 <MlmeConfirm+0x126>
                {
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 800a440:	4b14      	ldr	r3, [pc, #80]	@ (800a494 <MlmeConfirm+0x138>)
 800a442:	79db      	ldrb	r3, [r3, #7]
 800a444:	4618      	mov	r0, r3
 800a446:	f00c f82b 	bl	80164a0 <SecureElementPrintSessionKeys>
                }
            }
            break;
 800a44a:	e01a      	b.n	800a482 <MlmeConfirm+0x126>
        case MLME_LINK_CHECK:
            {
                RxParams.LinkCheck = true;
 800a44c:	4b16      	ldr	r3, [pc, #88]	@ (800a4a8 <MlmeConfirm+0x14c>)
 800a44e:	2201      	movs	r2, #1
 800a450:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	7a1a      	ldrb	r2, [r3, #8]
 800a456:	4b14      	ldr	r3, [pc, #80]	@ (800a4a8 <MlmeConfirm+0x14c>)
 800a458:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	7a5a      	ldrb	r2, [r3, #9]
 800a45e:	4b12      	ldr	r3, [pc, #72]	@ (800a4a8 <MlmeConfirm+0x14c>)
 800a460:	74da      	strb	r2, [r3, #19]
            }
            break;
 800a462:	e00f      	b.n	800a484 <MlmeConfirm+0x128>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        case MLME_BEACON_ACQUISITION:
            {
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	785b      	ldrb	r3, [r3, #1]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d105      	bne.n	800a478 <MlmeConfirm+0x11c>
                {
                    /* Beacon has been acquired */
                    /* Request server for ping slot */
                    LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800a46c:	4b0d      	ldr	r3, [pc, #52]	@ (800a4a4 <MlmeConfirm+0x148>)
 800a46e:	7c1b      	ldrb	r3, [r3, #16]
 800a470:	4618      	mov	r0, r3
 800a472:	f7ff fddd 	bl	800a030 <LmHandlerPingSlotReq>
                    /* Beacon not acquired */
                    /* Request Device Time again. */
                    LmHandlerDeviceTimeReq( );
                }
            }
            break;
 800a476:	e005      	b.n	800a484 <MlmeConfirm+0x128>
                    LmHandlerDeviceTimeReq( );
 800a478:	f7ff fdbe 	bl	8009ff8 <LmHandlerDeviceTimeReq>
            break;
 800a47c:	e002      	b.n	800a484 <MlmeConfirm+0x128>
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800a47e:	bf00      	nop
 800a480:	e000      	b.n	800a484 <MlmeConfirm+0x128>
            break;
 800a482:	bf00      	nop
    }
}
 800a484:	bf00      	nop
 800a486:	3730      	adds	r7, #48	@ 0x30
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}
 800a48c:	20000084 	.word	0x20000084
 800a490:	200009f4 	.word	0x200009f4
 800a494:	20000078 	.word	0x20000078
 800a498:	200009b0 	.word	0x200009b0
 800a49c:	2000007c 	.word	0x2000007c
 800a4a0:	2000007d 	.word	0x2000007d
 800a4a4:	200009dc 	.word	0x200009dc
 800a4a8:	200000a0 	.word	0x200000a0

0800a4ac <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b082      	sub	sp, #8
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800a4b6:	4b20      	ldr	r3, [pc, #128]	@ (800a538 <MlmeIndication+0x8c>)
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	785a      	ldrb	r2, [r3, #1]
 800a4c0:	4b1d      	ldr	r3, [pc, #116]	@ (800a538 <MlmeIndication+0x8c>)
 800a4c2:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	789b      	ldrb	r3, [r3, #2]
 800a4c8:	b25a      	sxtb	r2, r3
 800a4ca:	4b1b      	ldr	r3, [pc, #108]	@ (800a538 <MlmeIndication+0x8c>)
 800a4cc:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a4d4:	b25a      	sxtb	r2, r3
 800a4d6:	4b18      	ldr	r3, [pc, #96]	@ (800a538 <MlmeIndication+0x8c>)
 800a4d8:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800a4e0:	4b15      	ldr	r3, [pc, #84]	@ (800a538 <MlmeIndication+0x8c>)
 800a4e2:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	78da      	ldrb	r2, [r3, #3]
 800a4e8:	4b13      	ldr	r3, [pc, #76]	@ (800a538 <MlmeIndication+0x8c>)
 800a4ea:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	685b      	ldr	r3, [r3, #4]
 800a4f0:	4a11      	ldr	r2, [pc, #68]	@ (800a538 <MlmeIndication+0x8c>)
 800a4f2:	60d3      	str	r3, [r2, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 800a4f4:	4b11      	ldr	r3, [pc, #68]	@ (800a53c <MlmeIndication+0x90>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d00d      	beq.n	800a51a <MlmeIndication+0x6e>
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	781b      	ldrb	r3, [r3, #0]
 800a502:	2b0a      	cmp	r3, #10
 800a504:	d009      	beq.n	800a51a <MlmeIndication+0x6e>
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	781b      	ldrb	r3, [r3, #0]
 800a50a:	2b0e      	cmp	r3, #14
 800a50c:	d005      	beq.n	800a51a <MlmeIndication+0x6e>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800a50e:	4b0b      	ldr	r3, [pc, #44]	@ (800a53c <MlmeIndication+0x90>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a514:	4908      	ldr	r1, [pc, #32]	@ (800a538 <MlmeIndication+0x8c>)
 800a516:	2000      	movs	r0, #0
 800a518:	4798      	blx	r3
    }

    /* Call packages RxProcess function */
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800a51a:	6879      	ldr	r1, [r7, #4]
 800a51c:	2003      	movs	r0, #3
 800a51e:	f000 f80f 	bl	800a540 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	781b      	ldrb	r3, [r3, #0]
 800a526:	2b0a      	cmp	r3, #10
 800a528:	d001      	beq.n	800a52e <MlmeIndication+0x82>
 800a52a:	2b0e      	cmp	r3, #14
                }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
            }
            break;
        default:
            break;
 800a52c:	e000      	b.n	800a530 <MlmeIndication+0x84>
            break;
 800a52e:	bf00      	nop
    }
}
 800a530:	bf00      	nop
 800a532:	3708      	adds	r7, #8
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}
 800a538:	200000a0 	.word	0x200000a0
 800a53c:	200009f4 	.word	0x200009f4

0800a540 <LmHandlerPackagesNotify>:
        return false;
    }
}

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b084      	sub	sp, #16
 800a544:	af00      	add	r7, sp, #0
 800a546:	4603      	mov	r3, r0
 800a548:	6039      	str	r1, [r7, #0]
 800a54a:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800a54c:	2300      	movs	r3, #0
 800a54e:	73fb      	strb	r3, [r7, #15]
 800a550:	e067      	b.n	800a622 <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 800a552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a556:	4a37      	ldr	r2, [pc, #220]	@ (800a634 <LmHandlerPackagesNotify+0xf4>)
 800a558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d05a      	beq.n	800a616 <LmHandlerPackagesNotify+0xd6>
        {
            switch( notifyType )
 800a560:	79fb      	ldrb	r3, [r7, #7]
 800a562:	2b03      	cmp	r3, #3
 800a564:	d84e      	bhi.n	800a604 <LmHandlerPackagesNotify+0xc4>
 800a566:	a201      	add	r2, pc, #4	@ (adr r2, 800a56c <LmHandlerPackagesNotify+0x2c>)
 800a568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a56c:	0800a57d 	.word	0x0800a57d
 800a570:	0800a59f 	.word	0x0800a59f
 800a574:	0800a5c1 	.word	0x0800a5c1
 800a578:	0800a5e3 	.word	0x0800a5e3
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800a57c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a580:	4a2c      	ldr	r2, [pc, #176]	@ (800a634 <LmHandlerPackagesNotify+0xf4>)
 800a582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a586:	699b      	ldr	r3, [r3, #24]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d03d      	beq.n	800a608 <LmHandlerPackagesNotify+0xc8>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 800a58c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a590:	4a28      	ldr	r2, [pc, #160]	@ (800a634 <LmHandlerPackagesNotify+0xf4>)
 800a592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a596:	699b      	ldr	r3, [r3, #24]
 800a598:	6838      	ldr	r0, [r7, #0]
 800a59a:	4798      	blx	r3
                        }
                        break;
 800a59c:	e034      	b.n	800a608 <LmHandlerPackagesNotify+0xc8>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 800a59e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5a2:	4a24      	ldr	r2, [pc, #144]	@ (800a634 <LmHandlerPackagesNotify+0xf4>)
 800a5a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5a8:	69db      	ldr	r3, [r3, #28]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d02e      	beq.n	800a60c <LmHandlerPackagesNotify+0xcc>
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 800a5ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5b2:	4a20      	ldr	r2, [pc, #128]	@ (800a634 <LmHandlerPackagesNotify+0xf4>)
 800a5b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5b8:	69db      	ldr	r3, [r3, #28]
 800a5ba:	6838      	ldr	r0, [r7, #0]
 800a5bc:	4798      	blx	r3
                        }
                        break;
 800a5be:	e025      	b.n	800a60c <LmHandlerPackagesNotify+0xcc>
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800a5c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5c4:	4a1b      	ldr	r2, [pc, #108]	@ (800a634 <LmHandlerPackagesNotify+0xf4>)
 800a5c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5ca:	6a1b      	ldr	r3, [r3, #32]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d01f      	beq.n	800a610 <LmHandlerPackagesNotify+0xd0>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 800a5d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5d4:	4a17      	ldr	r2, [pc, #92]	@ (800a634 <LmHandlerPackagesNotify+0xf4>)
 800a5d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5da:	6a1b      	ldr	r3, [r3, #32]
 800a5dc:	6838      	ldr	r0, [r7, #0]
 800a5de:	4798      	blx	r3
                        }
                        break;
 800a5e0:	e016      	b.n	800a610 <LmHandlerPackagesNotify+0xd0>
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800a5e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5e6:	4a13      	ldr	r2, [pc, #76]	@ (800a634 <LmHandlerPackagesNotify+0xf4>)
 800a5e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d010      	beq.n	800a614 <LmHandlerPackagesNotify+0xd4>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800a5f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5f6:	4a0f      	ldr	r2, [pc, #60]	@ (800a634 <LmHandlerPackagesNotify+0xf4>)
 800a5f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5fe:	6838      	ldr	r0, [r7, #0]
 800a600:	4798      	blx	r3
                        }
                        break;
 800a602:	e007      	b.n	800a614 <LmHandlerPackagesNotify+0xd4>
                    }
                default:
                    {
                        break;
 800a604:	bf00      	nop
 800a606:	e006      	b.n	800a616 <LmHandlerPackagesNotify+0xd6>
                        break;
 800a608:	bf00      	nop
 800a60a:	e004      	b.n	800a616 <LmHandlerPackagesNotify+0xd6>
                        break;
 800a60c:	bf00      	nop
 800a60e:	e002      	b.n	800a616 <LmHandlerPackagesNotify+0xd6>
                        break;
 800a610:	bf00      	nop
 800a612:	e000      	b.n	800a616 <LmHandlerPackagesNotify+0xd6>
                        break;
 800a614:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800a616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a61a:	b2db      	uxtb	r3, r3
 800a61c:	3301      	adds	r3, #1
 800a61e:	b2db      	uxtb	r3, r3
 800a620:	73fb      	strb	r3, [r7, #15]
 800a622:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a626:	2b04      	cmp	r3, #4
 800a628:	dd93      	ble.n	800a552 <LmHandlerPackagesNotify+0x12>
                    }
            }
        }
    }
}
 800a62a:	bf00      	nop
 800a62c:	bf00      	nop
 800a62e:	3710      	adds	r7, #16
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}
 800a634:	200009c8 	.word	0x200009c8

0800a638 <LmHandlerGetTxPower>:
    rxParams->Datarate = mibReq.Param.Rx2Channel.Datarate;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b08c      	sub	sp, #48	@ 0x30
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d102      	bne.n	800a64c <LmHandlerGetTxPower+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800a646:	f04f 33ff 	mov.w	r3, #4294967295
 800a64a:	e016      	b.n	800a67a <LmHandlerGetTxPower+0x42>
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 800a64c:	2321      	movs	r3, #33	@ 0x21
 800a64e:	723b      	strb	r3, [r7, #8]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800a650:	f107 0308 	add.w	r3, r7, #8
 800a654:	4618      	mov	r0, r3
 800a656:	f003 fe5f 	bl	800e318 <LoRaMacMibGetRequestConfirm>
 800a65a:	4603      	mov	r3, r0
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d002      	beq.n	800a666 <LmHandlerGetTxPower+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800a660:	f04f 33ff 	mov.w	r3, #4294967295
 800a664:	e009      	b.n	800a67a <LmHandlerGetTxPower+0x42>
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 800a666:	f997 200c 	ldrsb.w	r2, [r7, #12]
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxPower = *txPower;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f993 2000 	ldrsb.w	r2, [r3]
 800a674:	4b03      	ldr	r3, [pc, #12]	@ (800a684 <LmHandlerGetTxPower+0x4c>)
 800a676:	715a      	strb	r2, [r3, #5]
    return LORAMAC_HANDLER_SUCCESS;
 800a678:	2300      	movs	r3, #0
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3730      	adds	r7, #48	@ 0x30
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}
 800a682:	bf00      	nop
 800a684:	200009dc 	.word	0x200009dc

0800a688 <OnRadioTxDone>:
}RxDoneParams_t;

static RxDoneParams_t RxDoneParams;

static void OnRadioTxDone( void )
{
 800a688:	b590      	push	{r4, r7, lr}
 800a68a:	b083      	sub	sp, #12
 800a68c:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800a68e:	f00f feb9 	bl	801a404 <UTIL_TIMER_GetCurrentTime>
 800a692:	4603      	mov	r3, r0
 800a694:	4a0c      	ldr	r2, [pc, #48]	@ (800a6c8 <OnRadioTxDone+0x40>)
 800a696:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800a698:	4c0c      	ldr	r4, [pc, #48]	@ (800a6cc <OnRadioTxDone+0x44>)
 800a69a:	463b      	mov	r3, r7
 800a69c:	4618      	mov	r0, r3
 800a69e:	f00f fca5 	bl	8019fec <SysTimeGet>
 800a6a2:	f504 734e 	add.w	r3, r4, #824	@ 0x338
 800a6a6:	463a      	mov	r2, r7
 800a6a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a6ac:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 800a6b0:	4a07      	ldr	r2, [pc, #28]	@ (800a6d0 <OnRadioTxDone+0x48>)
 800a6b2:	7813      	ldrb	r3, [r2, #0]
 800a6b4:	f043 0320 	orr.w	r3, r3, #32
 800a6b8:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800a6ba:	f003 fa89 	bl	800dbd0 <OnMacProcessNotify>
//    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );

}
 800a6be:	bf00      	nop
 800a6c0:	370c      	adds	r7, #12
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd90      	pop	{r4, r7, pc}
 800a6c6:	bf00      	nop
 800a6c8:	20000fd8 	.word	0x20000fd8
 800a6cc:	20000a28 	.word	0x20000a28
 800a6d0:	20000fd4 	.word	0x20000fd4

0800a6d4 <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b084      	sub	sp, #16
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	60f8      	str	r0, [r7, #12]
 800a6dc:	4608      	mov	r0, r1
 800a6de:	4611      	mov	r1, r2
 800a6e0:	461a      	mov	r2, r3
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	817b      	strh	r3, [r7, #10]
 800a6e6:	460b      	mov	r3, r1
 800a6e8:	813b      	strh	r3, [r7, #8]
 800a6ea:	4613      	mov	r3, r2
 800a6ec:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800a6ee:	f00f fe89 	bl	801a404 <UTIL_TIMER_GetCurrentTime>
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	4a11      	ldr	r2, [pc, #68]	@ (800a73c <OnRadioRxDone+0x68>)
 800a6f6:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800a6f8:	4a10      	ldr	r2, [pc, #64]	@ (800a73c <OnRadioRxDone+0x68>)
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800a6fe:	4a0f      	ldr	r2, [pc, #60]	@ (800a73c <OnRadioRxDone+0x68>)
 800a700:	897b      	ldrh	r3, [r7, #10]
 800a702:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800a704:	4a0d      	ldr	r2, [pc, #52]	@ (800a73c <OnRadioRxDone+0x68>)
 800a706:	893b      	ldrh	r3, [r7, #8]
 800a708:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800a70a:	4a0c      	ldr	r2, [pc, #48]	@ (800a73c <OnRadioRxDone+0x68>)
 800a70c:	79fb      	ldrb	r3, [r7, #7]
 800a70e:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800a710:	4a0b      	ldr	r2, [pc, #44]	@ (800a740 <OnRadioRxDone+0x6c>)
 800a712:	7813      	ldrb	r3, [r2, #0]
 800a714:	f043 0310 	orr.w	r3, r3, #16
 800a718:	7013      	strb	r3, [r2, #0]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800a71a:	4a09      	ldr	r2, [pc, #36]	@ (800a740 <OnRadioRxDone+0x6c>)
 800a71c:	7813      	ldrb	r3, [r2, #0]
 800a71e:	f043 0301 	orr.w	r3, r3, #1
 800a722:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    OnMacProcessNotify( );
 800a724:	f003 fa54 	bl	800dbd0 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800a728:	4b06      	ldr	r3, [pc, #24]	@ (800a744 <OnRadioRxDone+0x70>)
 800a72a:	2201      	movs	r2, #1
 800a72c:	2100      	movs	r1, #0
 800a72e:	2002      	movs	r0, #2
 800a730:	f00e fef4 	bl	801951c <UTIL_ADV_TRACE_COND_FSend>
}
 800a734:	bf00      	nop
 800a736:	3710      	adds	r7, #16
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}
 800a73c:	20000fdc 	.word	0x20000fdc
 800a740:	20000fd4 	.word	0x20000fd4
 800a744:	080206e4 	.word	0x080206e4

0800a748 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800a74c:	4a07      	ldr	r2, [pc, #28]	@ (800a76c <OnRadioTxTimeout+0x24>)
 800a74e:	7813      	ldrb	r3, [r2, #0]
 800a750:	f043 0308 	orr.w	r3, r3, #8
 800a754:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800a756:	f003 fa3b 	bl	800dbd0 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800a75a:	4b05      	ldr	r3, [pc, #20]	@ (800a770 <OnRadioTxTimeout+0x28>)
 800a75c:	2201      	movs	r2, #1
 800a75e:	2100      	movs	r1, #0
 800a760:	2002      	movs	r0, #2
 800a762:	f00e fedb 	bl	801951c <UTIL_ADV_TRACE_COND_FSend>

}
 800a766:	bf00      	nop
 800a768:	bd80      	pop	{r7, pc}
 800a76a:	bf00      	nop
 800a76c:	20000fd4 	.word	0x20000fd4
 800a770:	080206f4 	.word	0x080206f4

0800a774 <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800a774:	b580      	push	{r7, lr}
 800a776:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800a778:	4a04      	ldr	r2, [pc, #16]	@ (800a78c <OnRadioRxError+0x18>)
 800a77a:	7813      	ldrb	r3, [r2, #0]
 800a77c:	f043 0304 	orr.w	r3, r3, #4
 800a780:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800a782:	f003 fa25 	bl	800dbd0 <OnMacProcessNotify>
}
 800a786:	bf00      	nop
 800a788:	bd80      	pop	{r7, pc}
 800a78a:	bf00      	nop
 800a78c:	20000fd4 	.word	0x20000fd4

0800a790 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800a790:	b580      	push	{r7, lr}
 800a792:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800a794:	4a07      	ldr	r2, [pc, #28]	@ (800a7b4 <OnRadioRxTimeout+0x24>)
 800a796:	7813      	ldrb	r3, [r2, #0]
 800a798:	f043 0302 	orr.w	r3, r3, #2
 800a79c:	7013      	strb	r3, [r2, #0]

    OnMacProcessNotify( );
 800a79e:	f003 fa17 	bl	800dbd0 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800a7a2:	4b05      	ldr	r3, [pc, #20]	@ (800a7b8 <OnRadioRxTimeout+0x28>)
 800a7a4:	2201      	movs	r2, #1
 800a7a6:	2100      	movs	r1, #0
 800a7a8:	2002      	movs	r0, #2
 800a7aa:	f00e feb7 	bl	801951c <UTIL_ADV_TRACE_COND_FSend>
}
 800a7ae:	bf00      	nop
 800a7b0:	bd80      	pop	{r7, pc}
 800a7b2:	bf00      	nop
 800a7b4:	20000fd4 	.word	0x20000fd4
 800a7b8:	08020704 	.word	0x08020704

0800a7bc <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800a7bc:	b480      	push	{r7}
 800a7be:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800a7c0:	4b08      	ldr	r3, [pc, #32]	@ (800a7e4 <UpdateRxSlotIdleState+0x28>)
 800a7c2:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800a7c6:	2b02      	cmp	r3, #2
 800a7c8:	d004      	beq.n	800a7d4 <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800a7ca:	4b07      	ldr	r3, [pc, #28]	@ (800a7e8 <UpdateRxSlotIdleState+0x2c>)
 800a7cc:	2206      	movs	r2, #6
 800a7ce:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800a7d2:	e003      	b.n	800a7dc <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800a7d4:	4b04      	ldr	r3, [pc, #16]	@ (800a7e8 <UpdateRxSlotIdleState+0x2c>)
 800a7d6:	2202      	movs	r2, #2
 800a7d8:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
}
 800a7dc:	bf00      	nop
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bc80      	pop	{r7}
 800a7e2:	4770      	bx	lr
 800a7e4:	20008000 	.word	0x20008000
 800a7e8:	20000a28 	.word	0x20000a28

0800a7ec <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b092      	sub	sp, #72	@ 0x48
 800a7f0:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800a7f2:	4b54      	ldr	r3, [pc, #336]	@ (800a944 <ProcessRadioTxDone+0x158>)
 800a7f4:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800a7f8:	2b02      	cmp	r3, #2
 800a7fa:	d002      	beq.n	800a802 <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800a7fc:	4b52      	ldr	r3, [pc, #328]	@ (800a948 <ProcessRadioTxDone+0x15c>)
 800a7fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a800:	4798      	blx	r3
    TimerStart( &MacCtx.RxWindowTimer1 );
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
    TimerStart( &MacCtx.RxWindowTimer2 );
    CRITICAL_SECTION_END( );
#else
    if (Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE)
 800a802:	4b50      	ldr	r3, [pc, #320]	@ (800a944 <ProcessRadioTxDone+0x158>)
 800a804:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d12b      	bne.n	800a864 <ProcessRadioTxDone+0x78>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a80c:	f3ef 8310 	mrs	r3, PRIMASK
 800a810:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800a812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    {
        // Setup timers
        CRITICAL_SECTION_BEGIN( );
 800a814:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("cpsid i" : : : "memory");
 800a816:	b672      	cpsid	i
}
 800a818:	bf00      	nop
        uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 800a81a:	f00f fdf3 	bl	801a404 <UTIL_TIMER_GetCurrentTime>
 800a81e:	4602      	mov	r2, r0
 800a820:	4b4a      	ldr	r3, [pc, #296]	@ (800a94c <ProcessRadioTxDone+0x160>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	1ad3      	subs	r3, r2, r3
 800a826:	63bb      	str	r3, [r7, #56]	@ 0x38
        TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 800a828:	4b49      	ldr	r3, [pc, #292]	@ (800a950 <ProcessRadioTxDone+0x164>)
 800a82a:	f8d3 23b0 	ldr.w	r2, [r3, #944]	@ 0x3b0
 800a82e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a830:	1ad3      	subs	r3, r2, r3
 800a832:	4619      	mov	r1, r3
 800a834:	4847      	ldr	r0, [pc, #284]	@ (800a954 <ProcessRadioTxDone+0x168>)
 800a836:	f00f fdbb 	bl	801a3b0 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RxWindowTimer1 );
 800a83a:	4846      	ldr	r0, [pc, #280]	@ (800a954 <ProcessRadioTxDone+0x168>)
 800a83c:	f00f fcda 	bl	801a1f4 <UTIL_TIMER_Start>
        TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 800a840:	4b43      	ldr	r3, [pc, #268]	@ (800a950 <ProcessRadioTxDone+0x164>)
 800a842:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 800a846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a848:	1ad3      	subs	r3, r2, r3
 800a84a:	4619      	mov	r1, r3
 800a84c:	4842      	ldr	r0, [pc, #264]	@ (800a958 <ProcessRadioTxDone+0x16c>)
 800a84e:	f00f fdaf 	bl	801a3b0 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RxWindowTimer2 );
 800a852:	4841      	ldr	r0, [pc, #260]	@ (800a958 <ProcessRadioTxDone+0x16c>)
 800a854:	f00f fcce 	bl	801a1f4 <UTIL_TIMER_Start>
 800a858:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a85a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a85c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a85e:	f383 8810 	msr	PRIMASK, r3
}
 800a862:	e00e      	b.n	800a882 <ProcessRadioTxDone+0x96>
        CRITICAL_SECTION_END( );
    }
    else
    {
        MacCtx.MacState |= LORAMAC_RX_ABORT;
 800a864:	4b3a      	ldr	r3, [pc, #232]	@ (800a950 <ProcessRadioTxDone+0x164>)
 800a866:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800a86a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a86e:	4a38      	ldr	r2, [pc, #224]	@ (800a950 <ProcessRadioTxDone+0x164>)
 800a870:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        MacCtx.MacFlags.Bits.MacDone = 1;
 800a874:	4a36      	ldr	r2, [pc, #216]	@ (800a950 <ProcessRadioTxDone+0x164>)
 800a876:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800a87a:	f043 0310 	orr.w	r3, r3, #16
 800a87e:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
        TimerStart( &MacCtx.AckTimeoutTimer );
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.NodeAckRequested == true )
 800a882:	4b33      	ldr	r3, [pc, #204]	@ (800a950 <ProcessRadioTxDone+0x164>)
 800a884:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d01a      	beq.n	800a8c2 <ProcessRadioTxDone+0xd6>
    {
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 800a88c:	2315      	movs	r3, #21
 800a88e:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a892:	4b2c      	ldr	r3, [pc, #176]	@ (800a944 <ProcessRadioTxDone+0x158>)
 800a894:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800a898:	f107 0220 	add.w	r2, r7, #32
 800a89c:	4611      	mov	r1, r2
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f006 fe39 	bl	8011516 <RegionGetPhyParam>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800a8a8:	4b29      	ldr	r3, [pc, #164]	@ (800a950 <ProcessRadioTxDone+0x164>)
 800a8aa:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 800a8ae:	69fb      	ldr	r3, [r7, #28]
 800a8b0:	4413      	add	r3, r2
 800a8b2:	4619      	mov	r1, r3
 800a8b4:	4829      	ldr	r0, [pc, #164]	@ (800a95c <ProcessRadioTxDone+0x170>)
 800a8b6:	f00f fd7b 	bl	801a3b0 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 800a8ba:	4828      	ldr	r0, [pc, #160]	@ (800a95c <ProcessRadioTxDone+0x170>)
 800a8bc:	f00f fc9a 	bl	801a1f4 <UTIL_TIMER_Start>
 800a8c0:	e003      	b.n	800a8ca <ProcessRadioTxDone+0xde>
    }
    else
    {
        // Transmission successful, setup status directly
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800a8c2:	4b23      	ldr	r3, [pc, #140]	@ (800a950 <ProcessRadioTxDone+0x164>)
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800a8ca:	4b20      	ldr	r3, [pc, #128]	@ (800a94c <ProcessRadioTxDone+0x160>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	4a1d      	ldr	r2, [pc, #116]	@ (800a944 <ProcessRadioTxDone+0x158>)
 800a8d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

     //Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800a8d2:	4b1f      	ldr	r3, [pc, #124]	@ (800a950 <ProcessRadioTxDone+0x164>)
 800a8d4:	f893 341b 	ldrb.w	r3, [r3, #1051]	@ 0x41b
 800a8d8:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800a8da:	4b1c      	ldr	r3, [pc, #112]	@ (800a94c <ProcessRadioTxDone+0x160>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800a8e0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f00f fbb9 	bl	801a05c <SysTimeGetMcuTime>
 800a8ea:	4638      	mov	r0, r7
 800a8ec:	4b15      	ldr	r3, [pc, #84]	@ (800a944 <ProcessRadioTxDone+0x158>)
 800a8ee:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
 800a8f2:	9200      	str	r2, [sp, #0]
 800a8f4:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800a8f8:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800a8fc:	ca06      	ldmia	r2, {r1, r2}
 800a8fe:	f00f fb0e 	bl	8019f1e <SysTimeSub>
 800a902:	f107 0314 	add.w	r3, r7, #20
 800a906:	463a      	mov	r2, r7
 800a908:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a90c:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800a910:	4b0f      	ldr	r3, [pc, #60]	@ (800a950 <ProcessRadioTxDone+0x164>)
 800a912:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 800a916:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800a918:	2301      	movs	r3, #1
 800a91a:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800a91c:	4b09      	ldr	r3, [pc, #36]	@ (800a944 <ProcessRadioTxDone+0x158>)
 800a91e:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800a922:	2b00      	cmp	r3, #0
 800a924:	d101      	bne.n	800a92a <ProcessRadioTxDone+0x13e>
    {
        txDone.Joined  = false;
 800a926:	2300      	movs	r3, #0
 800a928:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800a92a:	4b06      	ldr	r3, [pc, #24]	@ (800a944 <ProcessRadioTxDone+0x158>)
 800a92c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800a930:	f107 0208 	add.w	r2, r7, #8
 800a934:	4611      	mov	r1, r2
 800a936:	4618      	mov	r0, r3
 800a938:	f006 fe0e 	bl	8011558 <RegionSetBandTxDone>
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */

}
 800a93c:	bf00      	nop
 800a93e:	3740      	adds	r7, #64	@ 0x40
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}
 800a944:	20008000 	.word	0x20008000
 800a948:	080210e8 	.word	0x080210e8
 800a94c:	20000fd8 	.word	0x20000fd8
 800a950:	20000a28 	.word	0x20000a28
 800a954:	20000da8 	.word	0x20000da8
 800a958:	20000dc0 	.word	0x20000dc0
 800a95c:	20000e28 	.word	0x20000e28

0800a960 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800a960:	b580      	push	{r7, lr}
 800a962:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800a964:	4b10      	ldr	r3, [pc, #64]	@ (800a9a8 <PrepareRxDoneAbort+0x48>)
 800a966:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800a96a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a96e:	4a0e      	ldr	r2, [pc, #56]	@ (800a9a8 <PrepareRxDoneAbort+0x48>)
 800a970:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    if( MacCtx.NodeAckRequested == true )
 800a974:	4b0c      	ldr	r3, [pc, #48]	@ (800a9a8 <PrepareRxDoneAbort+0x48>)
 800a976:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d002      	beq.n	800a984 <PrepareRxDoneAbort+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        OnRetransmitTimeoutTimerEvent( NULL );
 800a97e:	2000      	movs	r0, #0
 800a980:	f001 f9fa 	bl	800bd78 <OnRetransmitTimeoutTimerEvent>
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800a984:	4a08      	ldr	r2, [pc, #32]	@ (800a9a8 <PrepareRxDoneAbort+0x48>)
 800a986:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800a98a:	f043 0302 	orr.w	r3, r3, #2
 800a98e:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    MacCtx.MacFlags.Bits.MacDone = 1;
 800a992:	4a05      	ldr	r2, [pc, #20]	@ (800a9a8 <PrepareRxDoneAbort+0x48>)
 800a994:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800a998:	f043 0310 	orr.w	r3, r3, #16
 800a99c:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491

    UpdateRxSlotIdleState( );
 800a9a0:	f7ff ff0c 	bl	800a7bc <UpdateRxSlotIdleState>
}
 800a9a4:	bf00      	nop
 800a9a6:	bd80      	pop	{r7, pc}
 800a9a8:	20000a28 	.word	0x20000a28

0800a9ac <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800a9ac:	b590      	push	{r4, r7, lr}
 800a9ae:	b0ab      	sub	sp, #172	@ 0xac
 800a9b0:	af02      	add	r7, sp, #8
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800a9b2:	2312      	movs	r3, #18
 800a9b4:	f887 3098 	strb.w	r3, [r7, #152]	@ 0x98

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800a9b8:	4b81      	ldr	r3, [pc, #516]	@ (800abc0 <ProcessRadioRxDone+0x214>)
 800a9ba:	685b      	ldr	r3, [r3, #4]
 800a9bc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    uint16_t size = RxDoneParams.Size;
 800a9c0:	4b7f      	ldr	r3, [pc, #508]	@ (800abc0 <ProcessRadioRxDone+0x214>)
 800a9c2:	891b      	ldrh	r3, [r3, #8]
 800a9c4:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
    int16_t rssi = RxDoneParams.Rssi;
 800a9c8:	4b7d      	ldr	r3, [pc, #500]	@ (800abc0 <ProcessRadioRxDone+0x214>)
 800a9ca:	895b      	ldrh	r3, [r3, #10]
 800a9cc:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
    int8_t snr = RxDoneParams.Snr;
 800a9d0:	4b7b      	ldr	r3, [pc, #492]	@ (800abc0 <ProcessRadioRxDone+0x214>)
 800a9d2:	7b1b      	ldrb	r3, [r3, #12]
 800a9d4:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f

    uint8_t pktHeaderLen = 0;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e

    uint32_t downLinkCounter = 0;
 800a9de:	2300      	movs	r3, #0
 800a9e0:	617b      	str	r3, [r7, #20]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800a9e2:	4b78      	ldr	r3, [pc, #480]	@ (800abc4 <ProcessRadioRxDone+0x218>)
 800a9e4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a9e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    uint8_t multicast = 0;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	f887 309a 	strb.w	r3, [r7, #154]	@ 0x9a
    FCntIdentifier_t fCntID;
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    uint8_t macCmdPayload[2] = { 0 };
#endif /* LORAMAC_VERSION */
    Mlme_t joinType = MLME_JOIN;
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 800a9fe:	4a72      	ldr	r2, [pc, #456]	@ (800abc8 <ProcessRadioRxDone+0x21c>)
 800aa00:	7813      	ldrb	r3, [r2, #0]
 800aa02:	f023 0301 	bic.w	r3, r3, #1
 800aa06:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800aa08:	4b70      	ldr	r3, [pc, #448]	@ (800abcc <ProcessRadioRxDone+0x220>)
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444
    MacCtx.RxStatus.Rssi = rssi;
 800aa10:	4a6e      	ldr	r2, [pc, #440]	@ (800abcc <ProcessRadioRxDone+0x220>)
 800aa12:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800aa16:	f8a2 348c 	strh.w	r3, [r2, #1164]	@ 0x48c
    MacCtx.RxStatus.Snr = snr;
 800aa1a:	4a6c      	ldr	r2, [pc, #432]	@ (800abcc <ProcessRadioRxDone+0x220>)
 800aa1c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800aa20:	f882 348e 	strb.w	r3, [r2, #1166]	@ 0x48e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800aa24:	4b69      	ldr	r3, [pc, #420]	@ (800abcc <ProcessRadioRxDone+0x220>)
 800aa26:	f893 2490 	ldrb.w	r2, [r3, #1168]	@ 0x490
 800aa2a:	4b68      	ldr	r3, [pc, #416]	@ (800abcc <ProcessRadioRxDone+0x220>)
 800aa2c:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
    MacCtx.McpsIndication.Port = 0;
 800aa30:	4b66      	ldr	r3, [pc, #408]	@ (800abcc <ProcessRadioRxDone+0x220>)
 800aa32:	2200      	movs	r2, #0
 800aa34:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
    MacCtx.McpsIndication.Multicast = 0;
 800aa38:	4b64      	ldr	r3, [pc, #400]	@ (800abcc <ProcessRadioRxDone+0x220>)
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	f883 2422 	strb.w	r2, [r3, #1058]	@ 0x422
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 800aa40:	4b62      	ldr	r3, [pc, #392]	@ (800abcc <ProcessRadioRxDone+0x220>)
 800aa42:	2200      	movs	r2, #0
 800aa44:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 800aa48:	4b60      	ldr	r3, [pc, #384]	@ (800abcc <ProcessRadioRxDone+0x220>)
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 800aa50:	4b5e      	ldr	r3, [pc, #376]	@ (800abcc <ProcessRadioRxDone+0x220>)
 800aa52:	2200      	movs	r2, #0
 800aa54:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
    MacCtx.McpsIndication.RxData = false;
 800aa58:	4b5c      	ldr	r3, [pc, #368]	@ (800abcc <ProcessRadioRxDone+0x220>)
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
    MacCtx.McpsIndication.AckReceived = false;
 800aa60:	4b5a      	ldr	r3, [pc, #360]	@ (800abcc <ProcessRadioRxDone+0x220>)
 800aa62:	2200      	movs	r2, #0
 800aa64:	f883 242e 	strb.w	r2, [r3, #1070]	@ 0x42e
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800aa68:	4b58      	ldr	r3, [pc, #352]	@ (800abcc <ProcessRadioRxDone+0x220>)
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800aa70:	4b56      	ldr	r3, [pc, #344]	@ (800abcc <ProcessRadioRxDone+0x220>)
 800aa72:	2200      	movs	r2, #0
 800aa74:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 800aa78:	4b54      	ldr	r3, [pc, #336]	@ (800abcc <ProcessRadioRxDone+0x220>)
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800aa80:	4b52      	ldr	r3, [pc, #328]	@ (800abcc <ProcessRadioRxDone+0x220>)
 800aa82:	2200      	movs	r2, #0
 800aa84:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.McpsIndication.ResponseTimeout = 0;
 800aa88:	4b50      	ldr	r3, [pc, #320]	@ (800abcc <ProcessRadioRxDone+0x220>)
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	f8c3 243c 	str.w	r2, [r3, #1084]	@ 0x43c
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800aa90:	4b4f      	ldr	r3, [pc, #316]	@ (800abd0 <ProcessRadioRxDone+0x224>)
 800aa92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa94:	4798      	blx	r3

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800aa96:	4b4d      	ldr	r3, [pc, #308]	@ (800abcc <ProcessRadioRxDone+0x220>)
 800aa98:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d102      	bne.n	800aaa6 <ProcessRadioRxDone+0xfa>
    {
        TimerStop( &MacCtx.RxWindowTimer2 );
 800aaa0:	484c      	ldr	r0, [pc, #304]	@ (800abd4 <ProcessRadioRxDone+0x228>)
 800aaa2:	f00f fc15 	bl	801a2d0 <UTIL_TIMER_Stop>
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800aaa6:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800aaaa:	4619      	mov	r1, r3
 800aaac:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800aab0:	f004 fdae 	bl	800f610 <LoRaMacClassBRxBeacon>
 800aab4:	4603      	mov	r3, r0
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d00b      	beq.n	800aad2 <ProcessRadioRxDone+0x126>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800aaba:	4a44      	ldr	r2, [pc, #272]	@ (800abcc <ProcessRadioRxDone+0x220>)
 800aabc:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800aac0:	f8a2 347e 	strh.w	r3, [r2, #1150]	@ 0x47e
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800aac4:	4a41      	ldr	r2, [pc, #260]	@ (800abcc <ProcessRadioRxDone+0x220>)
 800aac6:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800aaca:	f882 3480 	strb.w	r3, [r2, #1152]	@ 0x480
        return;
 800aace:	f000 bc75 	b.w	800b3bc <ProcessRadioRxDone+0xa10>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800aad2:	4b3c      	ldr	r3, [pc, #240]	@ (800abc4 <ProcessRadioRxDone+0x218>)
 800aad4:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800aad8:	2b01      	cmp	r3, #1
 800aada:	d11e      	bne.n	800ab1a <ProcessRadioRxDone+0x16e>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800aadc:	f004 fdab 	bl	800f636 <LoRaMacClassBIsPingExpected>
 800aae0:	4603      	mov	r3, r0
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d00a      	beq.n	800aafc <ProcessRadioRxDone+0x150>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800aae6:	2000      	movs	r0, #0
 800aae8:	f004 fd5c 	bl	800f5a4 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800aaec:	2000      	movs	r0, #0
 800aaee:	f004 fd7d 	bl	800f5ec <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800aaf2:	4b36      	ldr	r3, [pc, #216]	@ (800abcc <ProcessRadioRxDone+0x220>)
 800aaf4:	2204      	movs	r2, #4
 800aaf6:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
 800aafa:	e00e      	b.n	800ab1a <ProcessRadioRxDone+0x16e>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800aafc:	f004 fda2 	bl	800f644 <LoRaMacClassBIsMulticastExpected>
 800ab00:	4603      	mov	r3, r0
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d009      	beq.n	800ab1a <ProcessRadioRxDone+0x16e>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ab06:	2000      	movs	r0, #0
 800ab08:	f004 fd56 	bl	800f5b8 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800ab0c:	2000      	movs	r0, #0
 800ab0e:	f004 fd76 	bl	800f5fe <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800ab12:	4b2e      	ldr	r3, [pc, #184]	@ (800abcc <ProcessRadioRxDone+0x220>)
 800ab14:	2205      	movs	r2, #5
 800ab16:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
        }
    }

    // Abort on empty radio frames
    if( size == 0 )
 800ab1a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d107      	bne.n	800ab32 <ProcessRadioRxDone+0x186>
    {
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ab22:	4b2a      	ldr	r3, [pc, #168]	@ (800abcc <ProcessRadioRxDone+0x220>)
 800ab24:	2201      	movs	r2, #1
 800ab26:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
        PrepareRxDoneAbort( );
 800ab2a:	f7ff ff19 	bl	800a960 <PrepareRxDoneAbort>
        return;
 800ab2e:	f000 bc45 	b.w	800b3bc <ProcessRadioRxDone+0xa10>
    }

    macHdr.Value = payload[pktHeaderLen++];
 800ab32:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800ab36:	1c5a      	adds	r2, r3, #1
 800ab38:	f887 208e 	strb.w	r2, [r7, #142]	@ 0x8e
 800ab3c:	461a      	mov	r2, r3
 800ab3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ab42:	4413      	add	r3, r2
 800ab44:	781b      	ldrb	r3, [r3, #0]
 800ab46:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
        PrepareRxDoneAbort( );
        return;
    }
#endif /* LORAMAC_VERSION */

    switch( macHdr.Bits.MType )
 800ab4a:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800ab4e:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800ab52:	b2db      	uxtb	r3, r3
 800ab54:	3b01      	subs	r3, #1
 800ab56:	2b06      	cmp	r3, #6
 800ab58:	f200 8403 	bhi.w	800b362 <ProcessRadioRxDone+0x9b6>
 800ab5c:	a201      	add	r2, pc, #4	@ (adr r2, 800ab64 <ProcessRadioRxDone+0x1b8>)
 800ab5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab62:	bf00      	nop
 800ab64:	0800ab81 	.word	0x0800ab81
 800ab68:	0800b363 	.word	0x0800b363
 800ab6c:	0800ad7f 	.word	0x0800ad7f
 800ab70:	0800b363 	.word	0x0800b363
 800ab74:	0800ad77 	.word	0x0800ad77
 800ab78:	0800b363 	.word	0x0800b363
 800ab7c:	0800b307 	.word	0x0800b307
    {
        case FRAME_TYPE_JOIN_ACCEPT:
        {
            uint8_t joinEui[SE_EUI_SIZE];
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800ab80:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800ab84:	2b10      	cmp	r3, #16
 800ab86:	d807      	bhi.n	800ab98 <ProcessRadioRxDone+0x1ec>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ab88:	4b10      	ldr	r3, [pc, #64]	@ (800abcc <ProcessRadioRxDone+0x220>)
 800ab8a:	2201      	movs	r2, #1
 800ab8c:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800ab90:	f7ff fee6 	bl	800a960 <PrepareRxDoneAbort>
                return;
 800ab94:	f000 bc12 	b.w	800b3bc <ProcessRadioRxDone+0xa10>
            }
            macMsgJoinAccept.Buffer = payload;
 800ab98:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ab9c:	61bb      	str	r3, [r7, #24]
            macMsgJoinAccept.BufSize = size;
 800ab9e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800aba2:	b2db      	uxtb	r3, r3
 800aba4:	773b      	strb	r3, [r7, #28]

            // Abort in case if the device is already joined and no rejoin request is ongoing.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
            if( ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) && ( Nvm.MacGroup2.IsRejoinAcceptPending == false ) )
#else
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800aba6:	4b07      	ldr	r3, [pc, #28]	@ (800abc4 <ProcessRadioRxDone+0x218>)
 800aba8:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800abac:	2b00      	cmp	r3, #0
 800abae:	d013      	beq.n	800abd8 <ProcessRadioRxDone+0x22c>
#endif /* LORAMAC_VERSION */
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800abb0:	4b06      	ldr	r3, [pc, #24]	@ (800abcc <ProcessRadioRxDone+0x220>)
 800abb2:	2201      	movs	r2, #1
 800abb4:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800abb8:	f7ff fed2 	bl	800a960 <PrepareRxDoneAbort>
                return;
 800abbc:	e3fe      	b.n	800b3bc <ProcessRadioRxDone+0xa10>
 800abbe:	bf00      	nop
 800abc0:	20000fdc 	.word	0x20000fdc
 800abc4:	20008000 	.word	0x20008000
 800abc8:	20000fd4 	.word	0x20000fd4
 800abcc:	20000a28 	.word	0x20000a28
 800abd0:	080210e8 	.word	0x080210e8
 800abd4:	20000dc0 	.word	0x20000dc0
            }

            SecureElementGetJoinEui( joinEui );
 800abd8:	f107 0308 	add.w	r3, r7, #8
 800abdc:	4618      	mov	r0, r3
 800abde:	f00b feb7 	bl	8016950 <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 800abe2:	f107 0218 	add.w	r2, r7, #24
 800abe6:	f107 0308 	add.w	r3, r7, #8
 800abea:	4619      	mov	r1, r3
 800abec:	20ff      	movs	r0, #255	@ 0xff
 800abee:	f005 ff17 	bl	8010a20 <LoRaMacCryptoHandleJoinAccept>
 800abf2:	4603      	mov	r3, r0
 800abf4:	f887 3098 	strb.w	r3, [r7, #152]	@ 0x98
                joinType = MLME_REJOIN_2;
            }
#endif /* LORAMAC_VERSION */

            VerifyParams_t verifyRxDr;
            bool rxDrValid = false;
 800abf8:	2300      	movs	r3, #0
 800abfa:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800abfe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ac02:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800ac06:	b2db      	uxtb	r3, r3
 800ac08:	b25b      	sxtb	r3, r3
 800ac0a:	713b      	strb	r3, [r7, #4]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ac0c:	4bb1      	ldr	r3, [pc, #708]	@ (800aed4 <ProcessRadioRxDone+0x528>)
 800ac0e:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800ac12:	717b      	strb	r3, [r7, #5]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 800ac14:	4baf      	ldr	r3, [pc, #700]	@ (800aed4 <ProcessRadioRxDone+0x528>)
 800ac16:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ac1a:	1d39      	adds	r1, r7, #4
 800ac1c:	2207      	movs	r2, #7
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f006 fcc7 	bl	80115b2 <RegionVerify>
 800ac24:	4603      	mov	r3, r0
 800ac26:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c

            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 800ac2a:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	f040 8095 	bne.w	800ad5e <ProcessRadioRxDone+0x3b2>
 800ac34:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	f000 8090 	beq.w	800ad5e <ProcessRadioRxDone+0x3b2>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800ac3e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800ac42:	461a      	mov	r2, r3
 800ac44:	4ba3      	ldr	r3, [pc, #652]	@ (800aed4 <ProcessRadioRxDone+0x528>)
 800ac46:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800ac4a:	4ba2      	ldr	r3, [pc, #648]	@ (800aed4 <ProcessRadioRxDone+0x528>)
 800ac4c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800ac50:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800ac54:	021b      	lsls	r3, r3, #8
 800ac56:	4313      	orrs	r3, r2
 800ac58:	4a9e      	ldr	r2, [pc, #632]	@ (800aed4 <ProcessRadioRxDone+0x528>)
 800ac5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800ac5e:	4b9d      	ldr	r3, [pc, #628]	@ (800aed4 <ProcessRadioRxDone+0x528>)
 800ac60:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800ac64:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ac68:	041b      	lsls	r3, r3, #16
 800ac6a:	4313      	orrs	r3, r2
 800ac6c:	4a99      	ldr	r2, [pc, #612]	@ (800aed4 <ProcessRadioRxDone+0x528>)
 800ac6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800ac72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac74:	4a97      	ldr	r2, [pc, #604]	@ (800aed4 <ProcessRadioRxDone+0x528>)
 800ac76:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
                // Update NVM DevAddrOTAA with network value
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 800ac7a:	4b96      	ldr	r3, [pc, #600]	@ (800aed4 <ProcessRadioRxDone+0x528>)
 800ac7c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800ac80:	4619      	mov	r1, r3
 800ac82:	2002      	movs	r0, #2
 800ac84:	f00b fe4a 	bl	801691c <SecureElementSetDevAddr>

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800ac88:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ac8c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800ac90:	b2db      	uxtb	r3, r3
 800ac92:	461a      	mov	r2, r3
 800ac94:	4b8f      	ldr	r3, [pc, #572]	@ (800aed4 <ProcessRadioRxDone+0x528>)
 800ac96:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800ac9a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ac9e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800aca2:	b2db      	uxtb	r3, r3
 800aca4:	461a      	mov	r2, r3
 800aca6:	4b8b      	ldr	r3, [pc, #556]	@ (800aed4 <ProcessRadioRxDone+0x528>)
 800aca8:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800acac:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800acb0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800acb4:	b2db      	uxtb	r3, r3
 800acb6:	461a      	mov	r2, r3
 800acb8:	4b86      	ldr	r3, [pc, #536]	@ (800aed4 <ProcessRadioRxDone+0x528>)
 800acba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800acbe:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800acc2:	461a      	mov	r2, r3
 800acc4:	4b83      	ldr	r3, [pc, #524]	@ (800aed4 <ProcessRadioRxDone+0x528>)
 800acc6:	659a      	str	r2, [r3, #88]	@ 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800acc8:	4b82      	ldr	r3, [pc, #520]	@ (800aed4 <ProcessRadioRxDone+0x528>)
 800acca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800accc:	2b00      	cmp	r3, #0
 800acce:	d102      	bne.n	800acd6 <ProcessRadioRxDone+0x32a>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800acd0:	4b80      	ldr	r3, [pc, #512]	@ (800aed4 <ProcessRadioRxDone+0x528>)
 800acd2:	2201      	movs	r2, #1
 800acd4:	659a      	str	r2, [r3, #88]	@ 0x58
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800acd6:	4b7f      	ldr	r3, [pc, #508]	@ (800aed4 <ProcessRadioRxDone+0x528>)
 800acd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800acda:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800acde:	fb02 f303 	mul.w	r3, r2, r3
 800ace2:	4a7c      	ldr	r2, [pc, #496]	@ (800aed4 <ProcessRadioRxDone+0x528>)
 800ace4:	6593      	str	r3, [r2, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800ace6:	4b7b      	ldr	r3, [pc, #492]	@ (800aed4 <ProcessRadioRxDone+0x528>)
 800ace8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800acea:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800acee:	4a79      	ldr	r2, [pc, #484]	@ (800aed4 <ProcessRadioRxDone+0x528>)
 800acf0:	65d3      	str	r3, [r2, #92]	@ 0x5c

                // Reset NbTrans to default value
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 800acf2:	4b78      	ldr	r3, [pc, #480]	@ (800aed4 <ProcessRadioRxDone+0x528>)
 800acf4:	2201      	movs	r2, #1
 800acf6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                else
                {
                    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
                }
#else
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800acfa:	4b76      	ldr	r3, [pc, #472]	@ (800aed4 <ProcessRadioRxDone+0x528>)
 800acfc:	2200      	movs	r2, #0
 800acfe:	f883 212e 	strb.w	r2, [r3, #302]	@ 0x12e
#endif /* LORAMAC_VERSION */

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800ad02:	f107 0318 	add.w	r3, r7, #24
 800ad06:	3312      	adds	r3, #18
 800ad08:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800ad0c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800ad10:	b2db      	uxtb	r3, r3
 800ad12:	3b11      	subs	r3, #17
 800ad14:	b2db      	uxtb	r3, r3
 800ad16:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
 800ad1a:	4b6f      	ldr	r3, [pc, #444]	@ (800aed8 <ProcessRadioRxDone+0x52c>)
 800ad1c:	f893 341b 	ldrb.w	r3, [r3, #1051]	@ 0x41b
 800ad20:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800ad24:	4b6b      	ldr	r3, [pc, #428]	@ (800aed4 <ProcessRadioRxDone+0x528>)
 800ad26:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ad2a:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 800ad2e:	4611      	mov	r1, r2
 800ad30:	4618      	mov	r0, r3
 800ad32:	f006 fc5f 	bl	80115f4 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800ad36:	4b67      	ldr	r3, [pc, #412]	@ (800aed4 <ProcessRadioRxDone+0x528>)
 800ad38:	2202      	movs	r2, #2
 800ad3a:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                    LoRaMacCommandsAddCmd( MOTE_MAC_REKEY_IND, macCmdPayload, 1 );
                }
#endif /* LORAMAC_VERSION */

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800ad3e:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800ad42:	4618      	mov	r0, r3
 800ad44:	f005 f97a 	bl	801003c <LoRaMacConfirmQueueIsCmdActive>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	f000 8311 	beq.w	800b372 <ProcessRadioRxDone+0x9c6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 800ad50:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800ad54:	4619      	mov	r1, r3
 800ad56:	2000      	movs	r0, #0
 800ad58:	f005 f8e4 	bl	800ff24 <LoRaMacConfirmQueueSetStatus>
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800ad5c:	e309      	b.n	800b372 <ProcessRadioRxDone+0x9c6>
#endif /* LORAMAC_VERSION */
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800ad5e:	2001      	movs	r0, #1
 800ad60:	f005 f96c 	bl	801003c <LoRaMacConfirmQueueIsCmdActive>
 800ad64:	4603      	mov	r3, r0
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	f000 8302 	beq.w	800b370 <ProcessRadioRxDone+0x9c4>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800ad6c:	2101      	movs	r1, #1
 800ad6e:	2007      	movs	r0, #7
 800ad70:	f005 f8d8 	bl	800ff24 <LoRaMacConfirmQueueSetStatus>
                }
            }

            break;
 800ad74:	e2fc      	b.n	800b370 <ProcessRadioRxDone+0x9c4>
        }
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800ad76:	4b58      	ldr	r3, [pc, #352]	@ (800aed8 <ProcessRadioRxDone+0x52c>)
 800ad78:	2201      	movs	r2, #1
 800ad7a:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ad7e:	4b55      	ldr	r3, [pc, #340]	@ (800aed4 <ProcessRadioRxDone+0x528>)
 800ad80:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800ad84:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800ad88:	4b53      	ldr	r3, [pc, #332]	@ (800aed8 <ProcessRadioRxDone+0x52c>)
 800ad8a:	f893 3424 	ldrb.w	r3, [r3, #1060]	@ 0x424
 800ad8e:	b25b      	sxtb	r3, r3
 800ad90:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800ad94:	230d      	movs	r3, #13
 800ad96:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74

            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800ad9a:	4b4e      	ldr	r3, [pc, #312]	@ (800aed4 <ProcessRadioRxDone+0x528>)
 800ad9c:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d002      	beq.n	800adaa <ProcessRadioRxDone+0x3fe>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800ada4:	230e      	movs	r3, #14
 800ada6:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
            }

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800adaa:	4b4a      	ldr	r3, [pc, #296]	@ (800aed4 <ProcessRadioRxDone+0x528>)
 800adac:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800adb0:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 800adb4:	4611      	mov	r1, r2
 800adb6:	4618      	mov	r0, r3
 800adb8:	f006 fbad 	bl	8011516 <RegionGetPhyParam>
 800adbc:	4603      	mov	r3, r0
 800adbe:	673b      	str	r3, [r7, #112]	@ 0x70
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800adc0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800adc4:	3b0d      	subs	r3, #13
 800adc6:	b29b      	uxth	r3, r3
 800adc8:	b21b      	sxth	r3, r3
 800adca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800adce:	b21a      	sxth	r2, r3
 800add0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800add2:	b21b      	sxth	r3, r3
 800add4:	429a      	cmp	r2, r3
 800add6:	dc03      	bgt.n	800ade0 <ProcessRadioRxDone+0x434>
 800add8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800addc:	2b0b      	cmp	r3, #11
 800adde:	d806      	bhi.n	800adee <ProcessRadioRxDone+0x442>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ade0:	4b3d      	ldr	r3, [pc, #244]	@ (800aed8 <ProcessRadioRxDone+0x52c>)
 800ade2:	2201      	movs	r2, #1
 800ade4:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800ade8:	f7ff fdba 	bl	800a960 <PrepareRxDoneAbort>
                return;
 800adec:	e2e6      	b.n	800b3bc <ProcessRadioRxDone+0xa10>
            }
            macMsgData.Buffer = payload;
 800adee:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800adf2:	643b      	str	r3, [r7, #64]	@ 0x40
            macMsgData.BufSize = size;
 800adf4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800adf8:	b2db      	uxtb	r3, r3
 800adfa:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800adfe:	4b37      	ldr	r3, [pc, #220]	@ (800aedc <ProcessRadioRxDone+0x530>)
 800ae00:	667b      	str	r3, [r7, #100]	@ 0x64
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800ae02:	23ff      	movs	r3, #255	@ 0xff
 800ae04:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800ae08:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	f006 f904 	bl	801101a <LoRaMacParserData>
 800ae12:	4603      	mov	r3, r0
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d006      	beq.n	800ae26 <ProcessRadioRxDone+0x47a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ae18:	4b2f      	ldr	r3, [pc, #188]	@ (800aed8 <ProcessRadioRxDone+0x52c>)
 800ae1a:	2201      	movs	r2, #1
 800ae1c:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800ae20:	f7ff fd9e 	bl	800a960 <PrepareRxDoneAbort>
                return;
 800ae24:	e2ca      	b.n	800b3bc <ProcessRadioRxDone+0xa10>
            }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Handle Class B
            // Check if we expect a ping or a multicast slot.
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800ae26:	4b2b      	ldr	r3, [pc, #172]	@ (800aed4 <ProcessRadioRxDone+0x528>)
 800ae28:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800ae2c:	2b01      	cmp	r3, #1
 800ae2e:	d132      	bne.n	800ae96 <ProcessRadioRxDone+0x4ea>
            {
                if( LoRaMacClassBIsPingExpected( ) == true )
 800ae30:	f004 fc01 	bl	800f636 <LoRaMacClassBIsPingExpected>
 800ae34:	4603      	mov	r3, r0
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d014      	beq.n	800ae64 <ProcessRadioRxDone+0x4b8>
                {
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ae3a:	2000      	movs	r0, #0
 800ae3c:	f004 fbb2 	bl	800f5a4 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 800ae40:	2000      	movs	r0, #0
 800ae42:	f004 fbd3 	bl	800f5ec <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800ae46:	4b24      	ldr	r3, [pc, #144]	@ (800aed8 <ProcessRadioRxDone+0x52c>)
 800ae48:	2204      	movs	r2, #4
 800ae4a:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800ae4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ae50:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800ae54:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800ae58:	b2db      	uxtb	r3, r3
 800ae5a:	4619      	mov	r1, r3
 800ae5c:	4610      	mov	r0, r2
 800ae5e:	f004 fc73 	bl	800f748 <LoRaMacClassBSetFPendingBit>
 800ae62:	e018      	b.n	800ae96 <ProcessRadioRxDone+0x4ea>
                }
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800ae64:	f004 fbee 	bl	800f644 <LoRaMacClassBIsMulticastExpected>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d013      	beq.n	800ae96 <ProcessRadioRxDone+0x4ea>
                {
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ae6e:	2000      	movs	r0, #0
 800ae70:	f004 fba2 	bl	800f5b8 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800ae74:	2000      	movs	r0, #0
 800ae76:	f004 fbc2 	bl	800f5fe <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800ae7a:	4b17      	ldr	r3, [pc, #92]	@ (800aed8 <ProcessRadioRxDone+0x52c>)
 800ae7c:	2205      	movs	r2, #5
 800ae7e:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800ae82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ae84:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800ae88:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800ae8c:	b2db      	uxtb	r3, r3
 800ae8e:	4619      	mov	r1, r3
 800ae90:	4610      	mov	r0, r2
 800ae92:	f004 fc59 	bl	800f748 <LoRaMacClassBSetFPendingBit>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800ae96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ae98:	4a0f      	ldr	r2, [pc, #60]	@ (800aed8 <ProcessRadioRxDone+0x52c>)
 800ae9a:	f8c2 3434 	str.w	r3, [r2, #1076]	@ 0x434

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800ae9e:	f107 0212 	add.w	r2, r7, #18
 800aea2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800aea6:	4611      	mov	r1, r2
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f002 fd8d 	bl	800d9c8 <DetermineFrameType>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d006      	beq.n	800aec2 <ProcessRadioRxDone+0x516>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800aeb4:	4b08      	ldr	r3, [pc, #32]	@ (800aed8 <ProcessRadioRxDone+0x52c>)
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800aebc:	f7ff fd50 	bl	800a960 <PrepareRxDoneAbort>
                return;
 800aec0:	e27c      	b.n	800b3bc <ProcessRadioRxDone+0xa10>
            }

            //Check if it is a multicast message
            multicast = 0;
 800aec2:	2300      	movs	r3, #0
 800aec4:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
            downLinkCounter = 0;
 800aec8:	2300      	movs	r3, #0
 800aeca:	617b      	str	r3, [r7, #20]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800aecc:	2300      	movs	r3, #0
 800aece:	f887 3099 	strb.w	r3, [r7, #153]	@ 0x99
 800aed2:	e055      	b.n	800af80 <ProcessRadioRxDone+0x5d4>
 800aed4:	20008000 	.word	0x20008000
 800aed8:	20000a28 	.word	0x20000a28
 800aedc:	20000c60 	.word	0x20000c60
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800aee0:	f897 2099 	ldrb.w	r2, [r7, #153]	@ 0x99
 800aee4:	499f      	ldr	r1, [pc, #636]	@ (800b164 <ProcessRadioRxDone+0x7b8>)
 800aee6:	4613      	mov	r3, r2
 800aee8:	005b      	lsls	r3, r3, #1
 800aeea:	4413      	add	r3, r2
 800aeec:	011b      	lsls	r3, r3, #4
 800aeee:	440b      	add	r3, r1
 800aef0:	33ec      	adds	r3, #236	@ 0xec
 800aef2:	681a      	ldr	r2, [r3, #0]
 800aef4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aef6:	429a      	cmp	r2, r3
 800aef8:	d13d      	bne.n	800af76 <ProcessRadioRxDone+0x5ca>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800aefa:	f897 2099 	ldrb.w	r2, [r7, #153]	@ 0x99
 800aefe:	4999      	ldr	r1, [pc, #612]	@ (800b164 <ProcessRadioRxDone+0x7b8>)
 800af00:	4613      	mov	r3, r2
 800af02:	005b      	lsls	r3, r3, #1
 800af04:	4413      	add	r3, r2
 800af06:	011b      	lsls	r3, r3, #4
 800af08:	440b      	add	r3, r1
 800af0a:	33e9      	adds	r3, #233	@ 0xe9
 800af0c:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d031      	beq.n	800af76 <ProcessRadioRxDone+0x5ca>
                {
                    multicast = 1;
 800af12:	2301      	movs	r3, #1
 800af14:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800af18:	f897 2099 	ldrb.w	r2, [r7, #153]	@ 0x99
 800af1c:	4991      	ldr	r1, [pc, #580]	@ (800b164 <ProcessRadioRxDone+0x7b8>)
 800af1e:	4613      	mov	r3, r2
 800af20:	005b      	lsls	r3, r3, #1
 800af22:	4413      	add	r3, r2
 800af24:	011b      	lsls	r3, r3, #4
 800af26:	440b      	add	r3, r1
 800af28:	33ea      	adds	r3, #234	@ 0xea
 800af2a:	781b      	ldrb	r3, [r3, #0]
 800af2c:	f887 309a 	strb.w	r3, [r7, #154]	@ 0x9a
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800af30:	f897 2099 	ldrb.w	r2, [r7, #153]	@ 0x99
 800af34:	498b      	ldr	r1, [pc, #556]	@ (800b164 <ProcessRadioRxDone+0x7b8>)
 800af36:	4613      	mov	r3, r2
 800af38:	005b      	lsls	r3, r3, #1
 800af3a:	4413      	add	r3, r2
 800af3c:	011b      	lsls	r3, r3, #4
 800af3e:	440b      	add	r3, r1
 800af40:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	617b      	str	r3, [r7, #20]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800af4a:	f897 2099 	ldrb.w	r2, [r7, #153]	@ 0x99
 800af4e:	4985      	ldr	r1, [pc, #532]	@ (800b164 <ProcessRadioRxDone+0x7b8>)
 800af50:	4613      	mov	r3, r2
 800af52:	005b      	lsls	r3, r3, #1
 800af54:	4413      	add	r3, r2
 800af56:	011b      	lsls	r3, r3, #4
 800af58:	440b      	add	r3, r1
 800af5a:	33ec      	adds	r3, #236	@ 0xec
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800af62:	4b80      	ldr	r3, [pc, #512]	@ (800b164 <ProcessRadioRxDone+0x7b8>)
 800af64:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800af68:	2b02      	cmp	r3, #2
 800af6a:	d10e      	bne.n	800af8a <ProcessRadioRxDone+0x5de>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800af6c:	4b7e      	ldr	r3, [pc, #504]	@ (800b168 <ProcessRadioRxDone+0x7bc>)
 800af6e:	2203      	movs	r2, #3
 800af70:	f883 248f 	strb.w	r2, [r3, #1167]	@ 0x48f
                    }
                    break;
 800af74:	e009      	b.n	800af8a <ProcessRadioRxDone+0x5de>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800af76:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
 800af7a:	3301      	adds	r3, #1
 800af7c:	f887 3099 	strb.w	r3, [r7, #153]	@ 0x99
 800af80:	f897 3099 	ldrb.w	r3, [r7, #153]	@ 0x99
 800af84:	2b00      	cmp	r3, #0
 800af86:	d0ab      	beq.n	800aee0 <ProcessRadioRxDone+0x534>
 800af88:	e000      	b.n	800af8c <ProcessRadioRxDone+0x5e0>
                    break;
 800af8a:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800af8c:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 800af90:	2b01      	cmp	r3, #1
 800af92:	d117      	bne.n	800afc4 <ProcessRadioRxDone+0x618>
 800af94:	7cbb      	ldrb	r3, [r7, #18]
 800af96:	2b03      	cmp	r3, #3
 800af98:	d10d      	bne.n	800afb6 <ProcessRadioRxDone+0x60a>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800af9a:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800af9e:	f003 0320 	and.w	r3, r3, #32
 800afa2:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d106      	bne.n	800afb6 <ProcessRadioRxDone+0x60a>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800afa8:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800afac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800afb0:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d006      	beq.n	800afc4 <ProcessRadioRxDone+0x618>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800afb6:	4b6c      	ldr	r3, [pc, #432]	@ (800b168 <ProcessRadioRxDone+0x7bc>)
 800afb8:	2201      	movs	r2, #1
 800afba:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                PrepareRxDoneAbort( );
 800afbe:	f7ff fccf 	bl	800a960 <PrepareRxDoneAbort>
                return;
 800afc2:	e1fb      	b.n	800b3bc <ProcessRadioRxDone+0xa10>
                PrepareRxDoneAbort( );
                return;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 800afc4:	7cb9      	ldrb	r1, [r7, #18]
 800afc6:	4c67      	ldr	r4, [pc, #412]	@ (800b164 <ProcessRadioRxDone+0x7b8>)
 800afc8:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800afcc:	f897 009a 	ldrb.w	r0, [r7, #154]	@ 0x9a
 800afd0:	f107 0314 	add.w	r3, r7, #20
 800afd4:	9301      	str	r3, [sp, #4]
 800afd6:	f107 0313 	add.w	r3, r7, #19
 800afda:	9300      	str	r3, [sp, #0]
 800afdc:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
 800afe0:	f000 fee4 	bl	800bdac <GetFCntDown>
 800afe4:	4603      	mov	r3, r0
 800afe6:	f887 3098 	strb.w	r3, [r7, #152]	@ 0x98
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800afea:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d017      	beq.n	800b022 <ProcessRadioRxDone+0x676>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800aff2:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800aff6:	2b07      	cmp	r3, #7
 800aff8:	d104      	bne.n	800b004 <ProcessRadioRxDone+0x658>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800affa:	4b5b      	ldr	r3, [pc, #364]	@ (800b168 <ProcessRadioRxDone+0x7bc>)
 800affc:	2208      	movs	r2, #8
 800affe:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
 800b002:	e003      	b.n	800b00c <ProcessRadioRxDone+0x660>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b004:	4b58      	ldr	r3, [pc, #352]	@ (800b168 <ProcessRadioRxDone+0x7bc>)
 800b006:	2201      	movs	r2, #1
 800b008:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	4a56      	ldr	r2, [pc, #344]	@ (800b168 <ProcessRadioRxDone+0x7bc>)
 800b010:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800b014:	697b      	ldr	r3, [r7, #20]
 800b016:	4a54      	ldr	r2, [pc, #336]	@ (800b168 <ProcessRadioRxDone+0x7bc>)
 800b018:	f8c2 346c 	str.w	r3, [r2, #1132]	@ 0x46c
                PrepareRxDoneAbort( );
 800b01c:	f7ff fca0 	bl	800a960 <PrepareRxDoneAbort>
                return;
 800b020:	e1cc      	b.n	800b3bc <ProcessRadioRxDone+0xa10>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800b022:	7cfa      	ldrb	r2, [r7, #19]
 800b024:	6979      	ldr	r1, [r7, #20]
 800b026:	f897 009a 	ldrb.w	r0, [r7, #154]	@ 0x9a
 800b02a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800b02e:	9300      	str	r3, [sp, #0]
 800b030:	460b      	mov	r3, r1
 800b032:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 800b036:	f005 fe53 	bl	8010ce0 <LoRaMacCryptoUnsecureMessage>
 800b03a:	4603      	mov	r3, r0
 800b03c:	f887 3098 	strb.w	r3, [r7, #152]	@ 0x98
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800b040:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800b044:	2b00      	cmp	r3, #0
 800b046:	d00f      	beq.n	800b068 <ProcessRadioRxDone+0x6bc>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800b048:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800b04c:	2b02      	cmp	r3, #2
 800b04e:	d104      	bne.n	800b05a <ProcessRadioRxDone+0x6ae>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800b050:	4b45      	ldr	r3, [pc, #276]	@ (800b168 <ProcessRadioRxDone+0x7bc>)
 800b052:	220a      	movs	r2, #10
 800b054:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
 800b058:	e003      	b.n	800b062 <ProcessRadioRxDone+0x6b6>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800b05a:	4b43      	ldr	r3, [pc, #268]	@ (800b168 <ProcessRadioRxDone+0x7bc>)
 800b05c:	220b      	movs	r2, #11
 800b05e:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                }
                PrepareRxDoneAbort( );
 800b062:	f7ff fc7d 	bl	800a960 <PrepareRxDoneAbort>
                return;
 800b066:	e1a9      	b.n	800b3bc <ProcessRadioRxDone+0xa10>
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800b068:	4b3f      	ldr	r3, [pc, #252]	@ (800b168 <ProcessRadioRxDone+0x7bc>)
 800b06a:	2200      	movs	r2, #0
 800b06c:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
            MacCtx.McpsIndication.Multicast = multicast;
 800b070:	4a3d      	ldr	r2, [pc, #244]	@ (800b168 <ProcessRadioRxDone+0x7bc>)
 800b072:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 800b076:	f882 3422 	strb.w	r3, [r2, #1058]	@ 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 800b07a:	4b3b      	ldr	r3, [pc, #236]	@ (800b168 <ProcessRadioRxDone+0x7bc>)
 800b07c:	2200      	movs	r2, #0
 800b07e:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 800b082:	4b39      	ldr	r3, [pc, #228]	@ (800b168 <ProcessRadioRxDone+0x7bc>)
 800b084:	2200      	movs	r2, #0
 800b086:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	4a36      	ldr	r2, [pc, #216]	@ (800b168 <ProcessRadioRxDone+0x7bc>)
 800b08e:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800b092:	697b      	ldr	r3, [r7, #20]
 800b094:	4a34      	ldr	r2, [pc, #208]	@ (800b168 <ProcessRadioRxDone+0x7bc>)
 800b096:	f8c2 346c 	str.w	r3, [r2, #1132]	@ 0x46c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800b09a:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800b09e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b0a2:	b2db      	uxtb	r3, r3
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	bf14      	ite	ne
 800b0a8:	2301      	movne	r3, #1
 800b0aa:	2300      	moveq	r3, #0
 800b0ac:	b2da      	uxtb	r2, r3
 800b0ae:	4b2e      	ldr	r3, [pc, #184]	@ (800b168 <ProcessRadioRxDone+0x7bc>)
 800b0b0:	f883 242e 	strb.w	r2, [r3, #1070]	@ 0x42e

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800b0b4:	4b2c      	ldr	r3, [pc, #176]	@ (800b168 <ProcessRadioRxDone+0x7bc>)
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800b0bc:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800b0c0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800b0c4:	b2db      	uxtb	r3, r3
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	bf14      	ite	ne
 800b0ca:	2301      	movne	r3, #1
 800b0cc:	2300      	moveq	r3, #0
 800b0ce:	b2da      	uxtb	r2, r3
 800b0d0:	4b25      	ldr	r3, [pc, #148]	@ (800b168 <ProcessRadioRxDone+0x7bc>)
 800b0d2:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800b0d6:	4b24      	ldr	r3, [pc, #144]	@ (800b168 <ProcessRadioRxDone+0x7bc>)
 800b0d8:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d004      	beq.n	800b0ea <ProcessRadioRxDone+0x73e>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800b0e0:	4b21      	ldr	r3, [pc, #132]	@ (800b168 <ProcessRadioRxDone+0x7bc>)
 800b0e2:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800b0e6:	2b01      	cmp	r3, #1
 800b0e8:	d106      	bne.n	800b0f8 <ProcessRadioRxDone+0x74c>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800b0ea:	4b1e      	ldr	r3, [pc, #120]	@ (800b164 <ProcessRadioRxDone+0x7b8>)
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	629a      	str	r2, [r3, #40]	@ 0x28
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                Nvm.MacGroup2.DownlinkReceived = true;
 800b0f0:	4b1c      	ldr	r3, [pc, #112]	@ (800b164 <ProcessRadioRxDone+0x7b8>)
 800b0f2:	2201      	movs	r2, #1
 800b0f4:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800b0f8:	f897 309b 	ldrb.w	r3, [r7, #155]	@ 0x9b
 800b0fc:	2b01      	cmp	r3, #1
 800b0fe:	d104      	bne.n	800b10a <ProcessRadioRxDone+0x75e>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800b100:	4b19      	ldr	r3, [pc, #100]	@ (800b168 <ProcessRadioRxDone+0x7bc>)
 800b102:	2202      	movs	r2, #2
 800b104:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
 800b108:	e03a      	b.n	800b180 <ProcessRadioRxDone+0x7d4>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800b10a:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800b10e:	f023 031f 	bic.w	r3, r3, #31
 800b112:	b2db      	uxtb	r3, r3
 800b114:	2ba0      	cmp	r3, #160	@ 0xa0
 800b116:	d12b      	bne.n	800b170 <ProcessRadioRxDone+0x7c4>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800b118:	4b12      	ldr	r3, [pc, #72]	@ (800b164 <ProcessRadioRxDone+0x7b8>)
 800b11a:	2201      	movs	r2, #1
 800b11c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800b120:	4b10      	ldr	r3, [pc, #64]	@ (800b164 <ProcessRadioRxDone+0x7b8>)
 800b122:	f893 312e 	ldrb.w	r3, [r3, #302]	@ 0x12e
 800b126:	2b00      	cmp	r3, #0
 800b128:	d102      	bne.n	800b130 <ProcessRadioRxDone+0x784>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800b12a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b12c:	4a0d      	ldr	r2, [pc, #52]	@ (800b164 <ProcessRadioRxDone+0x7b8>)
 800b12e:	6353      	str	r3, [r2, #52]	@ 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800b130:	4b0d      	ldr	r3, [pc, #52]	@ (800b168 <ProcessRadioRxDone+0x7bc>)
 800b132:	2201      	movs	r2, #1
 800b134:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // Handle response timeout for class c and class b downlinks
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800b138:	4b0b      	ldr	r3, [pc, #44]	@ (800b168 <ProcessRadioRxDone+0x7bc>)
 800b13a:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d01e      	beq.n	800b180 <ProcessRadioRxDone+0x7d4>
                        ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) )
 800b142:	4b09      	ldr	r3, [pc, #36]	@ (800b168 <ProcessRadioRxDone+0x7bc>)
 800b144:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800b148:	2b01      	cmp	r3, #1
 800b14a:	d019      	beq.n	800b180 <ProcessRadioRxDone+0x7d4>
                    {
                        // Calculate timeout
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800b14c:	4b05      	ldr	r3, [pc, #20]	@ (800b164 <ProcessRadioRxDone+0x7b8>)
 800b14e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b152:	4a05      	ldr	r2, [pc, #20]	@ (800b168 <ProcessRadioRxDone+0x7bc>)
 800b154:	f8c2 343c 	str.w	r3, [r2, #1084]	@ 0x43c
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 800b158:	4b04      	ldr	r3, [pc, #16]	@ (800b16c <ProcessRadioRxDone+0x7c0>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	4a02      	ldr	r2, [pc, #8]	@ (800b168 <ProcessRadioRxDone+0x7bc>)
 800b15e:	f8c2 3498 	str.w	r3, [r2, #1176]	@ 0x498
 800b162:	e00d      	b.n	800b180 <ProcessRadioRxDone+0x7d4>
 800b164:	20008000 	.word	0x20008000
 800b168:	20000a28 	.word	0x20000a28
 800b16c:	20000fdc 	.word	0x20000fdc
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800b170:	4b94      	ldr	r3, [pc, #592]	@ (800b3c4 <ProcessRadioRxDone+0xa18>)
 800b172:	2200      	movs	r2, #0
 800b174:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800b178:	4b93      	ldr	r3, [pc, #588]	@ (800b3c8 <ProcessRadioRxDone+0xa1c>)
 800b17a:	2200      	movs	r2, #0
 800b17c:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
            }

            // Set the pending status
            /* if( ( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) ) ||
                ( MacCtx.McpsIndication.ResponseTimeout > 0 ) ) */
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 800b180:	4b90      	ldr	r3, [pc, #576]	@ (800b3c4 <ProcessRadioRxDone+0xa18>)
 800b182:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800b186:	2b00      	cmp	r3, #0
 800b188:	d106      	bne.n	800b198 <ProcessRadioRxDone+0x7ec>
 800b18a:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800b18e:	f003 0310 	and.w	r3, r3, #16
 800b192:	b2db      	uxtb	r3, r3
 800b194:	2b00      	cmp	r3, #0
 800b196:	d008      	beq.n	800b1aa <ProcessRadioRxDone+0x7fe>
 800b198:	4b8a      	ldr	r3, [pc, #552]	@ (800b3c4 <ProcessRadioRxDone+0xa18>)
 800b19a:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d103      	bne.n	800b1aa <ProcessRadioRxDone+0x7fe>
            {
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 800b1a2:	4b89      	ldr	r3, [pc, #548]	@ (800b3c8 <ProcessRadioRxDone+0xa1c>)
 800b1a4:	2201      	movs	r2, #1
 800b1a6:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800b1aa:	4b87      	ldr	r3, [pc, #540]	@ (800b3c8 <ProcessRadioRxDone+0xa1c>)
 800b1ac:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800b1b0:	4a85      	ldr	r2, [pc, #532]	@ (800b3c8 <ProcessRadioRxDone+0xa1c>)
 800b1b2:	f892 2440 	ldrb.w	r2, [r2, #1088]	@ 0x440
 800b1b6:	f897 104c 	ldrb.w	r1, [r7, #76]	@ 0x4c
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f001 ff98 	bl	800d0f0 <RemoveMacCommands>

            switch( fType )
 800b1c0:	7cbb      	ldrb	r3, [r7, #18]
 800b1c2:	2b03      	cmp	r3, #3
 800b1c4:	d873      	bhi.n	800b2ae <ProcessRadioRxDone+0x902>
 800b1c6:	a201      	add	r2, pc, #4	@ (adr r2, 800b1cc <ProcessRadioRxDone+0x820>)
 800b1c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1cc:	0800b1dd 	.word	0x0800b1dd
 800b1d0:	0800b22d 	.word	0x0800b22d
 800b1d4:	0800b263 	.word	0x0800b263
 800b1d8:	0800b289 	.word	0x0800b289
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800b1dc:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800b1e0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800b1e4:	b2db      	uxtb	r3, r3
 800b1e6:	461c      	mov	r4, r3
 800b1e8:	4b77      	ldr	r3, [pc, #476]	@ (800b3c8 <ProcessRadioRxDone+0xa1c>)
 800b1ea:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800b1ee:	f997 108f 	ldrsb.w	r1, [r7, #143]	@ 0x8f
 800b1f2:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800b1f6:	f102 0010 	add.w	r0, r2, #16
 800b1fa:	9300      	str	r3, [sp, #0]
 800b1fc:	460b      	mov	r3, r1
 800b1fe:	4622      	mov	r2, r4
 800b200:	2100      	movs	r1, #0
 800b202:	f000 ff4f 	bl	800c0a4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800b206:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 800b20a:	4b6f      	ldr	r3, [pc, #444]	@ (800b3c8 <ProcessRadioRxDone+0xa1c>)
 800b20c:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800b210:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b212:	4a6d      	ldr	r2, [pc, #436]	@ (800b3c8 <ProcessRadioRxDone+0xa1c>)
 800b214:	f8c2 3428 	str.w	r3, [r2, #1064]	@ 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800b218:	f897 2068 	ldrb.w	r2, [r7, #104]	@ 0x68
 800b21c:	4b6a      	ldr	r3, [pc, #424]	@ (800b3c8 <ProcessRadioRxDone+0xa1c>)
 800b21e:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
                    MacCtx.McpsIndication.RxData = true;
 800b222:	4b69      	ldr	r3, [pc, #420]	@ (800b3c8 <ProcessRadioRxDone+0xa1c>)
 800b224:	2201      	movs	r2, #1
 800b226:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
                    break;
 800b22a:	e047      	b.n	800b2bc <ProcessRadioRxDone+0x910>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800b22c:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800b230:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800b234:	b2db      	uxtb	r3, r3
 800b236:	461c      	mov	r4, r3
 800b238:	4b63      	ldr	r3, [pc, #396]	@ (800b3c8 <ProcessRadioRxDone+0xa1c>)
 800b23a:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800b23e:	f997 108f 	ldrsb.w	r1, [r7, #143]	@ 0x8f
 800b242:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800b246:	f102 0010 	add.w	r0, r2, #16
 800b24a:	9300      	str	r3, [sp, #0]
 800b24c:	460b      	mov	r3, r1
 800b24e:	4622      	mov	r2, r4
 800b250:	2100      	movs	r1, #0
 800b252:	f000 ff27 	bl	800c0a4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800b256:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 800b25a:	4b5b      	ldr	r3, [pc, #364]	@ (800b3c8 <ProcessRadioRxDone+0xa1c>)
 800b25c:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    break;
 800b260:	e02c      	b.n	800b2bc <ProcessRadioRxDone+0x910>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800b262:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800b264:	f897 2068 	ldrb.w	r2, [r7, #104]	@ 0x68
 800b268:	4b57      	ldr	r3, [pc, #348]	@ (800b3c8 <ProcessRadioRxDone+0xa1c>)
 800b26a:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800b26e:	f997 108f 	ldrsb.w	r1, [r7, #143]	@ 0x8f
 800b272:	9300      	str	r3, [sp, #0]
 800b274:	460b      	mov	r3, r1
 800b276:	2100      	movs	r1, #0
 800b278:	f000 ff14 	bl	800c0a4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800b27c:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 800b280:	4b51      	ldr	r3, [pc, #324]	@ (800b3c8 <ProcessRadioRxDone+0xa1c>)
 800b282:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    break;
 800b286:	e019      	b.n	800b2bc <ProcessRadioRxDone+0x910>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800b288:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 800b28c:	4b4e      	ldr	r3, [pc, #312]	@ (800b3c8 <ProcessRadioRxDone+0xa1c>)
 800b28e:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800b292:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b294:	4a4c      	ldr	r2, [pc, #304]	@ (800b3c8 <ProcessRadioRxDone+0xa1c>)
 800b296:	f8c2 3428 	str.w	r3, [r2, #1064]	@ 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800b29a:	f897 2068 	ldrb.w	r2, [r7, #104]	@ 0x68
 800b29e:	4b4a      	ldr	r3, [pc, #296]	@ (800b3c8 <ProcessRadioRxDone+0xa1c>)
 800b2a0:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
                    MacCtx.McpsIndication.RxData = true;
 800b2a4:	4b48      	ldr	r3, [pc, #288]	@ (800b3c8 <ProcessRadioRxDone+0xa1c>)
 800b2a6:	2201      	movs	r2, #1
 800b2a8:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
                    break;
 800b2ac:	e006      	b.n	800b2bc <ProcessRadioRxDone+0x910>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b2ae:	4b46      	ldr	r3, [pc, #280]	@ (800b3c8 <ProcessRadioRxDone+0xa1c>)
 800b2b0:	2201      	movs	r2, #1
 800b2b2:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
                    PrepareRxDoneAbort( );
 800b2b6:	f7ff fb53 	bl	800a960 <PrepareRxDoneAbort>
                    break;
 800b2ba:	bf00      	nop
                }
            }
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800b2bc:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 800b2c0:	2be0      	cmp	r3, #224	@ 0xe0
 800b2c2:	d118      	bne.n	800b2f6 <ProcessRadioRxDone+0x94a>
 800b2c4:	4b3f      	ldr	r3, [pc, #252]	@ (800b3c4 <ProcessRadioRxDone+0xa18>)
 800b2c6:	f893 311f 	ldrb.w	r3, [r3, #287]	@ 0x11f
 800b2ca:	f083 0301 	eor.w	r3, r3, #1
 800b2ce:	b2db      	uxtb	r3, r3
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d010      	beq.n	800b2f6 <ProcessRadioRxDone+0x94a>
            { // Do not notify the upper layer of data reception on FPort LORAMAC_CERT_FPORT if the port
              // handling is disabled.
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 800b2d4:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 800b2d8:	4b3b      	ldr	r3, [pc, #236]	@ (800b3c8 <ProcessRadioRxDone+0xa1c>)
 800b2da:	f883 2423 	strb.w	r2, [r3, #1059]	@ 0x423
                MacCtx.McpsIndication.Buffer = NULL;
 800b2de:	4b3a      	ldr	r3, [pc, #232]	@ (800b3c8 <ProcessRadioRxDone+0xa1c>)
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
                MacCtx.McpsIndication.BufferSize = 0;
 800b2e6:	4b38      	ldr	r3, [pc, #224]	@ (800b3c8 <ProcessRadioRxDone+0xa1c>)
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c
                MacCtx.McpsIndication.RxData = false;
 800b2ee:	4b36      	ldr	r3, [pc, #216]	@ (800b3c8 <ProcessRadioRxDone+0xa1c>)
 800b2f0:	2200      	movs	r2, #0
 800b2f2:	f883 242d 	strb.w	r2, [r3, #1069]	@ 0x42d
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800b2f6:	4a34      	ldr	r2, [pc, #208]	@ (800b3c8 <ProcessRadioRxDone+0xa1c>)
 800b2f8:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800b2fc:	f043 0302 	orr.w	r3, r3, #2
 800b300:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491

            break;
 800b304:	e035      	b.n	800b372 <ProcessRadioRxDone+0x9c6>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800b306:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800b30a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b30e:	18d1      	adds	r1, r2, r3
 800b310:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800b314:	b29b      	uxth	r3, r3
 800b316:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800b31a:	1ad3      	subs	r3, r2, r3
 800b31c:	b29b      	uxth	r3, r3
 800b31e:	461a      	mov	r2, r3
 800b320:	482a      	ldr	r0, [pc, #168]	@ (800b3cc <ProcessRadioRxDone+0xa20>)
 800b322:	f00b fb96 	bl	8016a52 <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800b326:	4b28      	ldr	r3, [pc, #160]	@ (800b3c8 <ProcessRadioRxDone+0xa1c>)
 800b328:	2203      	movs	r2, #3
 800b32a:	f883 2420 	strb.w	r2, [r3, #1056]	@ 0x420
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800b32e:	4b26      	ldr	r3, [pc, #152]	@ (800b3c8 <ProcessRadioRxDone+0xa1c>)
 800b330:	2200      	movs	r2, #0
 800b332:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800b336:	4b24      	ldr	r3, [pc, #144]	@ (800b3c8 <ProcessRadioRxDone+0xa1c>)
 800b338:	4a24      	ldr	r2, [pc, #144]	@ (800b3cc <ProcessRadioRxDone+0xa20>)
 800b33a:	f8c3 2428 	str.w	r2, [r3, #1064]	@ 0x428
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800b33e:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800b342:	b2da      	uxtb	r2, r3
 800b344:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800b348:	1ad3      	subs	r3, r2, r3
 800b34a:	b2da      	uxtb	r2, r3
 800b34c:	4b1e      	ldr	r3, [pc, #120]	@ (800b3c8 <ProcessRadioRxDone+0xa1c>)
 800b34e:	f883 242c 	strb.w	r2, [r3, #1068]	@ 0x42c

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800b352:	4a1d      	ldr	r2, [pc, #116]	@ (800b3c8 <ProcessRadioRxDone+0xa1c>)
 800b354:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800b358:	f043 0302 	orr.w	r3, r3, #2
 800b35c:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
            break;
 800b360:	e007      	b.n	800b372 <ProcessRadioRxDone+0x9c6>
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b362:	4b19      	ldr	r3, [pc, #100]	@ (800b3c8 <ProcessRadioRxDone+0xa1c>)
 800b364:	2201      	movs	r2, #1
 800b366:	f883 2421 	strb.w	r2, [r3, #1057]	@ 0x421
            PrepareRxDoneAbort( );
 800b36a:	f7ff faf9 	bl	800a960 <PrepareRxDoneAbort>
            break;
 800b36e:	e000      	b.n	800b372 <ProcessRadioRxDone+0x9c6>
            break;
 800b370:	bf00      	nop
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Verify if we need to disable the RetransmitTimeoutTimer
    // Only applies if downlink is received on Rx1 or Rx2 windows.
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800b372:	4b15      	ldr	r3, [pc, #84]	@ (800b3c8 <ProcessRadioRxDone+0xa1c>)
 800b374:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d004      	beq.n	800b386 <ProcessRadioRxDone+0x9da>
        ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800b37c:	4b12      	ldr	r3, [pc, #72]	@ (800b3c8 <ProcessRadioRxDone+0xa1c>)
 800b37e:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800b382:	2b01      	cmp	r3, #1
 800b384:	d10c      	bne.n	800b3a0 <ProcessRadioRxDone+0x9f4>
    {
        if( MacCtx.NodeAckRequested == true )
 800b386:	4b10      	ldr	r3, [pc, #64]	@ (800b3c8 <ProcessRadioRxDone+0xa1c>)
 800b388:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d007      	beq.n	800b3a0 <ProcessRadioRxDone+0x9f4>
        {
            if( MacCtx.McpsConfirm.AckReceived == true )
 800b390:	4b0d      	ldr	r3, [pc, #52]	@ (800b3c8 <ProcessRadioRxDone+0xa1c>)
 800b392:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 800b396:	2b00      	cmp	r3, #0
 800b398:	d002      	beq.n	800b3a0 <ProcessRadioRxDone+0x9f4>
            {
                OnRetransmitTimeoutTimerEvent( NULL );
 800b39a:	2000      	movs	r0, #0
 800b39c:	f000 fcec 	bl	800bd78 <OnRetransmitTimeoutTimerEvent>
            }
        }
    }

    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 800b3a0:	4b09      	ldr	r3, [pc, #36]	@ (800b3c8 <ProcessRadioRxDone+0xa1c>)
 800b3a2:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800b3a6:	2b02      	cmp	r3, #2
 800b3a8:	d006      	beq.n	800b3b8 <ProcessRadioRxDone+0xa0c>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800b3aa:	4a07      	ldr	r2, [pc, #28]	@ (800b3c8 <ProcessRadioRxDone+0xa1c>)
 800b3ac:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800b3b0:	f043 0310 	orr.w	r3, r3, #16
 800b3b4:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 800b3b8:	f7ff fa00 	bl	800a7bc <UpdateRxSlotIdleState>
}
 800b3bc:	37a4      	adds	r7, #164	@ 0xa4
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	bd90      	pop	{r4, r7, pc}
 800b3c2:	bf00      	nop
 800b3c4:	20008000 	.word	0x20008000
 800b3c8:	20000a28 	.word	0x20000a28
 800b3cc:	20000c60 	.word	0x20000c60

0800b3d0 <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800b3d4:	4b11      	ldr	r3, [pc, #68]	@ (800b41c <ProcessRadioTxTimeout+0x4c>)
 800b3d6:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800b3da:	2b02      	cmp	r3, #2
 800b3dc:	d002      	beq.n	800b3e4 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800b3de:	4b10      	ldr	r3, [pc, #64]	@ (800b420 <ProcessRadioTxTimeout+0x50>)
 800b3e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3e2:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800b3e4:	f7ff f9ea 	bl	800a7bc <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800b3e8:	4b0e      	ldr	r3, [pc, #56]	@ (800b424 <ProcessRadioTxTimeout+0x54>)
 800b3ea:	2202      	movs	r2, #2
 800b3ec:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800b3f0:	2002      	movs	r0, #2
 800b3f2:	f004 fdef 	bl	800ffd4 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800b3f6:	4b0b      	ldr	r3, [pc, #44]	@ (800b424 <ProcessRadioTxTimeout+0x54>)
 800b3f8:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d003      	beq.n	800b408 <ProcessRadioTxTimeout+0x38>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        MacCtx.RetransmitTimeoutRetry = true;
 800b400:	4b08      	ldr	r3, [pc, #32]	@ (800b424 <ProcessRadioTxTimeout+0x54>)
 800b402:	2201      	movs	r2, #1
 800b404:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800b408:	4a06      	ldr	r2, [pc, #24]	@ (800b424 <ProcessRadioTxTimeout+0x54>)
 800b40a:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800b40e:	f043 0310 	orr.w	r3, r3, #16
 800b412:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
}
 800b416:	bf00      	nop
 800b418:	bd80      	pop	{r7, pc}
 800b41a:	bf00      	nop
 800b41c:	20008000 	.word	0x20008000
 800b420:	080210e8 	.word	0x080210e8
 800b424:	20000a28 	.word	0x20000a28

0800b428 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b084      	sub	sp, #16
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	4603      	mov	r3, r0
 800b430:	460a      	mov	r2, r1
 800b432:	71fb      	strb	r3, [r7, #7]
 800b434:	4613      	mov	r3, r2
 800b436:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800b438:	2300      	movs	r3, #0
 800b43a:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800b43c:	4b3d      	ldr	r3, [pc, #244]	@ (800b534 <HandleRadioRxErrorTimeout+0x10c>)
 800b43e:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800b442:	2b02      	cmp	r3, #2
 800b444:	d002      	beq.n	800b44c <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800b446:	4b3c      	ldr	r3, [pc, #240]	@ (800b538 <HandleRadioRxErrorTimeout+0x110>)
 800b448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b44a:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800b44c:	f004 f8ec 	bl	800f628 <LoRaMacClassBIsBeaconExpected>
 800b450:	4603      	mov	r3, r0
 800b452:	2b00      	cmp	r3, #0
 800b454:	d007      	beq.n	800b466 <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800b456:	2002      	movs	r0, #2
 800b458:	f004 f89a 	bl	800f590 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800b45c:	2000      	movs	r0, #0
 800b45e:	f004 f8bc 	bl	800f5da <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800b462:	2301      	movs	r3, #1
 800b464:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800b466:	4b33      	ldr	r3, [pc, #204]	@ (800b534 <HandleRadioRxErrorTimeout+0x10c>)
 800b468:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800b46c:	2b01      	cmp	r3, #1
 800b46e:	d119      	bne.n	800b4a4 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800b470:	f004 f8e1 	bl	800f636 <LoRaMacClassBIsPingExpected>
 800b474:	4603      	mov	r3, r0
 800b476:	2b00      	cmp	r3, #0
 800b478:	d007      	beq.n	800b48a <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800b47a:	2000      	movs	r0, #0
 800b47c:	f004 f892 	bl	800f5a4 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800b480:	2000      	movs	r0, #0
 800b482:	f004 f8b3 	bl	800f5ec <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800b486:	2301      	movs	r3, #1
 800b488:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800b48a:	f004 f8db 	bl	800f644 <LoRaMacClassBIsMulticastExpected>
 800b48e:	4603      	mov	r3, r0
 800b490:	2b00      	cmp	r3, #0
 800b492:	d007      	beq.n	800b4a4 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800b494:	2000      	movs	r0, #0
 800b496:	f004 f88f 	bl	800f5b8 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800b49a:	2000      	movs	r0, #0
 800b49c:	f004 f8af 	bl	800f5fe <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800b4a4:	7bfb      	ldrb	r3, [r7, #15]
 800b4a6:	f083 0301 	eor.w	r3, r3, #1
 800b4aa:	b2db      	uxtb	r3, r3
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d03b      	beq.n	800b528 <HandleRadioRxErrorTimeout+0x100>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800b4b0:	4b22      	ldr	r3, [pc, #136]	@ (800b53c <HandleRadioRxErrorTimeout+0x114>)
 800b4b2:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d122      	bne.n	800b500 <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800b4ba:	4b20      	ldr	r3, [pc, #128]	@ (800b53c <HandleRadioRxErrorTimeout+0x114>)
 800b4bc:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d003      	beq.n	800b4cc <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800b4c4:	4a1d      	ldr	r2, [pc, #116]	@ (800b53c <HandleRadioRxErrorTimeout+0x114>)
 800b4c6:	79fb      	ldrb	r3, [r7, #7]
 800b4c8:	f882 3441 	strb.w	r3, [r2, #1089]	@ 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800b4cc:	79fb      	ldrb	r3, [r7, #7]
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f004 fd80 	bl	800ffd4 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800b4d4:	4b17      	ldr	r3, [pc, #92]	@ (800b534 <HandleRadioRxErrorTimeout+0x10c>)
 800b4d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4d8:	4618      	mov	r0, r3
 800b4da:	f00e ffa5 	bl	801a428 <UTIL_TIMER_GetElapsedTime>
 800b4de:	4602      	mov	r2, r0
 800b4e0:	4b16      	ldr	r3, [pc, #88]	@ (800b53c <HandleRadioRxErrorTimeout+0x114>)
 800b4e2:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	d31e      	bcc.n	800b528 <HandleRadioRxErrorTimeout+0x100>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800b4ea:	4815      	ldr	r0, [pc, #84]	@ (800b540 <HandleRadioRxErrorTimeout+0x118>)
 800b4ec:	f00e fef0 	bl	801a2d0 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800b4f0:	4a12      	ldr	r2, [pc, #72]	@ (800b53c <HandleRadioRxErrorTimeout+0x114>)
 800b4f2:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800b4f6:	f043 0310 	orr.w	r3, r3, #16
 800b4fa:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 800b4fe:	e013      	b.n	800b528 <HandleRadioRxErrorTimeout+0x100>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800b500:	4b0e      	ldr	r3, [pc, #56]	@ (800b53c <HandleRadioRxErrorTimeout+0x114>)
 800b502:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800b506:	2b00      	cmp	r3, #0
 800b508:	d003      	beq.n	800b512 <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800b50a:	4a0c      	ldr	r2, [pc, #48]	@ (800b53c <HandleRadioRxErrorTimeout+0x114>)
 800b50c:	79bb      	ldrb	r3, [r7, #6]
 800b50e:	f882 3441 	strb.w	r3, [r2, #1089]	@ 0x441
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800b512:	79bb      	ldrb	r3, [r7, #6]
 800b514:	4618      	mov	r0, r3
 800b516:	f004 fd5d 	bl	800ffd4 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.MacFlags.Bits.MacDone = 1;
 800b51a:	4a08      	ldr	r2, [pc, #32]	@ (800b53c <HandleRadioRxErrorTimeout+0x114>)
 800b51c:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800b520:	f043 0310 	orr.w	r3, r3, #16
 800b524:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 800b528:	f7ff f948 	bl	800a7bc <UpdateRxSlotIdleState>
}
 800b52c:	bf00      	nop
 800b52e:	3710      	adds	r7, #16
 800b530:	46bd      	mov	sp, r7
 800b532:	bd80      	pop	{r7, pc}
 800b534:	20008000 	.word	0x20008000
 800b538:	080210e8 	.word	0x080210e8
 800b53c:	20000a28 	.word	0x20000a28
 800b540:	20000dc0 	.word	0x20000dc0

0800b544 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800b544:	b580      	push	{r7, lr}
 800b546:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800b548:	2106      	movs	r1, #6
 800b54a:	2005      	movs	r0, #5
 800b54c:	f7ff ff6c 	bl	800b428 <HandleRadioRxErrorTimeout>
}
 800b550:	bf00      	nop
 800b552:	bd80      	pop	{r7, pc}

0800b554 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800b554:	b580      	push	{r7, lr}
 800b556:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800b558:	2104      	movs	r1, #4
 800b55a:	2003      	movs	r0, #3
 800b55c:	f7ff ff64 	bl	800b428 <HandleRadioRxErrorTimeout>
}
 800b560:	bf00      	nop
 800b562:	bd80      	pop	{r7, pc}

0800b564 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b084      	sub	sp, #16
 800b568:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b56a:	f3ef 8310 	mrs	r3, PRIMASK
 800b56e:	607b      	str	r3, [r7, #4]
  return(result);
 800b570:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800b572:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800b574:	b672      	cpsid	i
}
 800b576:	bf00      	nop
    events = LoRaMacRadioEvents;
 800b578:	4b1d      	ldr	r3, [pc, #116]	@ (800b5f0 <LoRaMacHandleIrqEvents+0x8c>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800b57e:	4b1c      	ldr	r3, [pc, #112]	@ (800b5f0 <LoRaMacHandleIrqEvents+0x8c>)
 800b580:	2200      	movs	r2, #0
 800b582:	601a      	str	r2, [r3, #0]
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	f383 8810 	msr	PRIMASK, r3
}
 800b58e:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d027      	beq.n	800b5e6 <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800b596:	783b      	ldrb	r3, [r7, #0]
 800b598:	f003 0320 	and.w	r3, r3, #32
 800b59c:	b2db      	uxtb	r3, r3
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d001      	beq.n	800b5a6 <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800b5a2:	f7ff f923 	bl	800a7ec <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800b5a6:	783b      	ldrb	r3, [r7, #0]
 800b5a8:	f003 0310 	and.w	r3, r3, #16
 800b5ac:	b2db      	uxtb	r3, r3
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d001      	beq.n	800b5b6 <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800b5b2:	f7ff f9fb 	bl	800a9ac <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800b5b6:	783b      	ldrb	r3, [r7, #0]
 800b5b8:	f003 0308 	and.w	r3, r3, #8
 800b5bc:	b2db      	uxtb	r3, r3
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d001      	beq.n	800b5c6 <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800b5c2:	f7ff ff05 	bl	800b3d0 <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800b5c6:	783b      	ldrb	r3, [r7, #0]
 800b5c8:	f003 0304 	and.w	r3, r3, #4
 800b5cc:	b2db      	uxtb	r3, r3
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d001      	beq.n	800b5d6 <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800b5d2:	f7ff ffb7 	bl	800b544 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800b5d6:	783b      	ldrb	r3, [r7, #0]
 800b5d8:	f003 0302 	and.w	r3, r3, #2
 800b5dc:	b2db      	uxtb	r3, r3
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d001      	beq.n	800b5e6 <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800b5e2:	f7ff ffb7 	bl	800b554 <ProcessRadioRxTimeout>
        }
    }
}
 800b5e6:	bf00      	nop
 800b5e8:	3710      	adds	r7, #16
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	bd80      	pop	{r7, pc}
 800b5ee:	bf00      	nop
 800b5f0:	20000fd4 	.word	0x20000fd4

0800b5f4 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800b5f4:	b480      	push	{r7}
 800b5f6:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800b5f8:	4b10      	ldr	r3, [pc, #64]	@ (800b63c <LoRaMacIsBusy+0x48>)
 800b5fa:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800b5fe:	2b01      	cmp	r3, #1
 800b600:	d101      	bne.n	800b606 <LoRaMacIsBusy+0x12>
    {
        return false;
 800b602:	2300      	movs	r3, #0
 800b604:	e015      	b.n	800b632 <LoRaMacIsBusy+0x3e>
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 800b606:	4b0e      	ldr	r3, [pc, #56]	@ (800b640 <LoRaMacIsBusy+0x4c>)
 800b608:	781b      	ldrb	r3, [r3, #0]
 800b60a:	f003 0301 	and.w	r3, r3, #1
 800b60e:	b2db      	uxtb	r3, r3
 800b610:	2b00      	cmp	r3, #0
 800b612:	d001      	beq.n	800b618 <LoRaMacIsBusy+0x24>
    {
        return true;
 800b614:	2301      	movs	r3, #1
 800b616:	e00c      	b.n	800b632 <LoRaMacIsBusy+0x3e>
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800b618:	4b08      	ldr	r3, [pc, #32]	@ (800b63c <LoRaMacIsBusy+0x48>)
 800b61a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d106      	bne.n	800b630 <LoRaMacIsBusy+0x3c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800b622:	4b06      	ldr	r3, [pc, #24]	@ (800b63c <LoRaMacIsBusy+0x48>)
 800b624:	f893 3492 	ldrb.w	r3, [r3, #1170]	@ 0x492
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800b628:	2b01      	cmp	r3, #1
 800b62a:	d101      	bne.n	800b630 <LoRaMacIsBusy+0x3c>
    {
        return false;
 800b62c:	2300      	movs	r3, #0
 800b62e:	e000      	b.n	800b632 <LoRaMacIsBusy+0x3e>
    }
    return true;
 800b630:	2301      	movs	r3, #1
}
 800b632:	4618      	mov	r0, r3
 800b634:	46bd      	mov	sp, r7
 800b636:	bc80      	pop	{r7}
 800b638:	4770      	bx	lr
 800b63a:	bf00      	nop
 800b63c:	20000a28 	.word	0x20000a28
 800b640:	20000fd4 	.word	0x20000fd4

0800b644 <LoRaMacIsStopped>:

bool LoRaMacIsStopped( void )
{
 800b644:	b480      	push	{r7}
 800b646:	af00      	add	r7, sp, #0
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800b648:	4b05      	ldr	r3, [pc, #20]	@ (800b660 <LoRaMacIsStopped+0x1c>)
 800b64a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800b64e:	2b01      	cmp	r3, #1
 800b650:	d101      	bne.n	800b656 <LoRaMacIsStopped+0x12>
    {
        return true;
 800b652:	2301      	movs	r3, #1
 800b654:	e000      	b.n	800b658 <LoRaMacIsStopped+0x14>
    }
    return false;
 800b656:	2300      	movs	r3, #0
}
 800b658:	4618      	mov	r0, r3
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bc80      	pop	{r7}
 800b65e:	4770      	bx	lr
 800b660:	20000a28 	.word	0x20000a28

0800b664 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800b664:	b480      	push	{r7}
 800b666:	b083      	sub	sp, #12
 800b668:	af00      	add	r7, sp, #0
 800b66a:	4603      	mov	r3, r0
 800b66c:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800b66e:	4a04      	ldr	r2, [pc, #16]	@ (800b680 <LoRaMacEnableRequests+0x1c>)
 800b670:	79fb      	ldrb	r3, [r7, #7]
 800b672:	f882 3492 	strb.w	r3, [r2, #1170]	@ 0x492
}
 800b676:	bf00      	nop
 800b678:	370c      	adds	r7, #12
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bc80      	pop	{r7}
 800b67e:	4770      	bx	lr
 800b680:	20000a28 	.word	0x20000a28

0800b684 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b082      	sub	sp, #8
 800b688:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800b68a:	4b2c      	ldr	r3, [pc, #176]	@ (800b73c <LoRaMacHandleRequestEvents+0xb8>)
 800b68c:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800b690:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800b692:	4b2a      	ldr	r3, [pc, #168]	@ (800b73c <LoRaMacHandleRequestEvents+0xb8>)
 800b694:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d14a      	bne.n	800b732 <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800b69c:	4b27      	ldr	r3, [pc, #156]	@ (800b73c <LoRaMacHandleRequestEvents+0xb8>)
 800b69e:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800b6a2:	f003 0301 	and.w	r3, r3, #1
 800b6a6:	b2db      	uxtb	r3, r3
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d006      	beq.n	800b6ba <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800b6ac:	4a23      	ldr	r2, [pc, #140]	@ (800b73c <LoRaMacHandleRequestEvents+0xb8>)
 800b6ae:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800b6b2:	f023 0301 	bic.w	r3, r3, #1
 800b6b6:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800b6ba:	4b20      	ldr	r3, [pc, #128]	@ (800b73c <LoRaMacHandleRequestEvents+0xb8>)
 800b6bc:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800b6c0:	f003 0304 	and.w	r3, r3, #4
 800b6c4:	b2db      	uxtb	r3, r3
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d006      	beq.n	800b6d8 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800b6ca:	4a1c      	ldr	r2, [pc, #112]	@ (800b73c <LoRaMacHandleRequestEvents+0xb8>)
 800b6cc:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800b6d0:	f023 0304 	bic.w	r3, r3, #4
 800b6d4:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800b6d8:	2001      	movs	r0, #1
 800b6da:	f7ff ffc3 	bl	800b664 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800b6de:	793b      	ldrb	r3, [r7, #4]
 800b6e0:	f003 0301 	and.w	r3, r3, #1
 800b6e4:	b2db      	uxtb	r3, r3
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d005      	beq.n	800b6f6 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800b6ea:	4b14      	ldr	r3, [pc, #80]	@ (800b73c <LoRaMacHandleRequestEvents+0xb8>)
 800b6ec:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	4813      	ldr	r0, [pc, #76]	@ (800b740 <LoRaMacHandleRequestEvents+0xbc>)
 800b6f4:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800b6f6:	793b      	ldrb	r3, [r7, #4]
 800b6f8:	f003 0304 	and.w	r3, r3, #4
 800b6fc:	b2db      	uxtb	r3, r3
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d00e      	beq.n	800b720 <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800b702:	4810      	ldr	r0, [pc, #64]	@ (800b744 <LoRaMacHandleRequestEvents+0xc0>)
 800b704:	f004 fcb4 	bl	8010070 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800b708:	f004 fd04 	bl	8010114 <LoRaMacConfirmQueueGetCnt>
 800b70c:	4603      	mov	r3, r0
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d006      	beq.n	800b720 <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800b712:	4a0a      	ldr	r2, [pc, #40]	@ (800b73c <LoRaMacHandleRequestEvents+0xb8>)
 800b714:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800b718:	f043 0304 	orr.w	r3, r3, #4
 800b71c:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800b720:	f003 ffae 	bl	800f680 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800b724:	4a05      	ldr	r2, [pc, #20]	@ (800b73c <LoRaMacHandleRequestEvents+0xb8>)
 800b726:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800b72a:	f023 0310 	bic.w	r3, r3, #16
 800b72e:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
}
 800b732:	bf00      	nop
 800b734:	3708      	adds	r7, #8
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}
 800b73a:	bf00      	nop
 800b73c:	20000a28 	.word	0x20000a28
 800b740:	20000e68 	.word	0x20000e68
 800b744:	20000e7c 	.word	0x20000e7c

0800b748 <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800b74c:	4b16      	ldr	r3, [pc, #88]	@ (800b7a8 <LoRaMacHandleIndicationEvents+0x60>)
 800b74e:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800b752:	f003 0308 	and.w	r3, r3, #8
 800b756:	b2db      	uxtb	r3, r3
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d00d      	beq.n	800b778 <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800b75c:	4a12      	ldr	r2, [pc, #72]	@ (800b7a8 <LoRaMacHandleIndicationEvents+0x60>)
 800b75e:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800b762:	f023 0308 	bic.w	r3, r3, #8
 800b766:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800b76a:	4b0f      	ldr	r3, [pc, #60]	@ (800b7a8 <LoRaMacHandleIndicationEvents+0x60>)
 800b76c:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800b770:	68db      	ldr	r3, [r3, #12]
 800b772:	490e      	ldr	r1, [pc, #56]	@ (800b7ac <LoRaMacHandleIndicationEvents+0x64>)
 800b774:	480e      	ldr	r0, [pc, #56]	@ (800b7b0 <LoRaMacHandleIndicationEvents+0x68>)
 800b776:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800b778:	4b0b      	ldr	r3, [pc, #44]	@ (800b7a8 <LoRaMacHandleIndicationEvents+0x60>)
 800b77a:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800b77e:	f003 0302 	and.w	r3, r3, #2
 800b782:	b2db      	uxtb	r3, r3
 800b784:	2b00      	cmp	r3, #0
 800b786:	d00d      	beq.n	800b7a4 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800b788:	4a07      	ldr	r2, [pc, #28]	@ (800b7a8 <LoRaMacHandleIndicationEvents+0x60>)
 800b78a:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800b78e:	f023 0302 	bic.w	r3, r3, #2
 800b792:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800b796:	4b04      	ldr	r3, [pc, #16]	@ (800b7a8 <LoRaMacHandleIndicationEvents+0x60>)
 800b798:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800b79c:	685b      	ldr	r3, [r3, #4]
 800b79e:	4903      	ldr	r1, [pc, #12]	@ (800b7ac <LoRaMacHandleIndicationEvents+0x64>)
 800b7a0:	4804      	ldr	r0, [pc, #16]	@ (800b7b4 <LoRaMacHandleIndicationEvents+0x6c>)
 800b7a2:	4798      	blx	r3
    }
}
 800b7a4:	bf00      	nop
 800b7a6:	bd80      	pop	{r7, pc}
 800b7a8:	20000a28 	.word	0x20000a28
 800b7ac:	20000eb4 	.word	0x20000eb4
 800b7b0:	20000e90 	.word	0x20000e90
 800b7b4:	20000e48 	.word	0x20000e48

0800b7b8 <LoRaMacHandleMcpsRequest>:
    }
}
#endif /* LORAMAC_VERSION */

static void LoRaMacHandleMcpsRequest( void )
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b082      	sub	sp, #8
 800b7bc:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800b7be:	4b2a      	ldr	r3, [pc, #168]	@ (800b868 <LoRaMacHandleMcpsRequest+0xb0>)
 800b7c0:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800b7c4:	f003 0301 	and.w	r3, r3, #1
 800b7c8:	b2db      	uxtb	r3, r3
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d048      	beq.n	800b860 <LoRaMacHandleMcpsRequest+0xa8>
    {
        bool stopRetransmission = false;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800b7d6:	4b24      	ldr	r3, [pc, #144]	@ (800b868 <LoRaMacHandleMcpsRequest+0xb0>)
 800b7d8:	f893 3440 	ldrb.w	r3, [r3, #1088]	@ 0x440
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d004      	beq.n	800b7ea <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800b7e0:	4b21      	ldr	r3, [pc, #132]	@ (800b868 <LoRaMacHandleMcpsRequest+0xb0>)
 800b7e2:	f893 3440 	ldrb.w	r3, [r3, #1088]	@ 0x440
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800b7e6:	2b03      	cmp	r3, #3
 800b7e8:	d104      	bne.n	800b7f4 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800b7ea:	f002 f94f 	bl	800da8c <CheckRetransUnconfirmedUplink>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	71fb      	strb	r3, [r7, #7]
 800b7f2:	e010      	b.n	800b816 <LoRaMacHandleMcpsRequest+0x5e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800b7f4:	4b1c      	ldr	r3, [pc, #112]	@ (800b868 <LoRaMacHandleMcpsRequest+0xb0>)
 800b7f6:	f893 3440 	ldrb.w	r3, [r3, #1088]	@ 0x440
 800b7fa:	2b01      	cmp	r3, #1
 800b7fc:	d10b      	bne.n	800b816 <LoRaMacHandleMcpsRequest+0x5e>
            else
            {
                waitForRetransmission = true;
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.RetransmitTimeoutRetry == true )
 800b7fe:	4b1a      	ldr	r3, [pc, #104]	@ (800b868 <LoRaMacHandleMcpsRequest+0xb0>)
 800b800:	f893 3419 	ldrb.w	r3, [r3, #1049]	@ 0x419
 800b804:	2b00      	cmp	r3, #0
 800b806:	d004      	beq.n	800b812 <LoRaMacHandleMcpsRequest+0x5a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800b808:	f002 f96c 	bl	800dae4 <CheckRetransConfirmedUplink>
 800b80c:	4603      	mov	r3, r0
 800b80e:	71fb      	strb	r3, [r7, #7]
 800b810:	e001      	b.n	800b816 <LoRaMacHandleMcpsRequest+0x5e>
            }
            else
            {
                waitForRetransmission = true;
 800b812:	2301      	movs	r3, #1
 800b814:	71bb      	strb	r3, [r7, #6]
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 800b816:	79fb      	ldrb	r3, [r7, #7]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d00d      	beq.n	800b838 <LoRaMacHandleMcpsRequest+0x80>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800b81c:	4813      	ldr	r0, [pc, #76]	@ (800b86c <LoRaMacHandleMcpsRequest+0xb4>)
 800b81e:	f00e fd57 	bl	801a2d0 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800b822:	4b11      	ldr	r3, [pc, #68]	@ (800b868 <LoRaMacHandleMcpsRequest+0xb0>)
 800b824:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800b828:	f023 0320 	bic.w	r3, r3, #32
 800b82c:	4a0e      	ldr	r2, [pc, #56]	@ (800b868 <LoRaMacHandleMcpsRequest+0xb0>)
 800b82e:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            StopRetransmission( );
 800b832:	f002 f991 	bl	800db58 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800b836:	e013      	b.n	800b860 <LoRaMacHandleMcpsRequest+0xa8>
        else if( waitForRetransmission == false )
 800b838:	79bb      	ldrb	r3, [r7, #6]
 800b83a:	f083 0301 	eor.w	r3, r3, #1
 800b83e:	b2db      	uxtb	r3, r3
 800b840:	2b00      	cmp	r3, #0
 800b842:	d00d      	beq.n	800b860 <LoRaMacHandleMcpsRequest+0xa8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800b844:	4a08      	ldr	r2, [pc, #32]	@ (800b868 <LoRaMacHandleMcpsRequest+0xb0>)
 800b846:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800b84a:	f023 0310 	bic.w	r3, r3, #16
 800b84e:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
            MacCtx.RetransmitTimeoutRetry = false;
 800b852:	4b05      	ldr	r3, [pc, #20]	@ (800b868 <LoRaMacHandleMcpsRequest+0xb0>)
 800b854:	2200      	movs	r2, #0
 800b856:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
            OnTxDelayedTimerEvent( NULL );
 800b85a:	2000      	movs	r0, #0
 800b85c:	f000 f9c8 	bl	800bbf0 <OnTxDelayedTimerEvent>
}
 800b860:	bf00      	nop
 800b862:	3708      	adds	r7, #8
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}
 800b868:	20000a28 	.word	0x20000a28
 800b86c:	20000d90 	.word	0x20000d90

0800b870 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800b870:	b580      	push	{r7, lr}
 800b872:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800b874:	4b18      	ldr	r3, [pc, #96]	@ (800b8d8 <LoRaMacHandleMlmeRequest+0x68>)
 800b876:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800b87a:	f003 0304 	and.w	r3, r3, #4
 800b87e:	b2db      	uxtb	r3, r3
 800b880:	2b00      	cmp	r3, #0
 800b882:	d026      	beq.n	800b8d2 <LoRaMacHandleMlmeRequest+0x62>
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_1 ) == true ) ||
            ( LoRaMacConfirmQueueIsCmdActive( MLME_REJOIN_2 ) == true ) )
        {
            MacCtx.ChannelsNbTransCounter = 0;
#else
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800b884:	2001      	movs	r0, #1
 800b886:	f004 fbd9 	bl	801003c <LoRaMacConfirmQueueIsCmdActive>
 800b88a:	4603      	mov	r3, r0
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d012      	beq.n	800b8b6 <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800b890:	2001      	movs	r0, #1
 800b892:	f004 fb75 	bl	800ff80 <LoRaMacConfirmQueueGetStatus>
 800b896:	4603      	mov	r3, r0
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d103      	bne.n	800b8a4 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800b89c:	4b0e      	ldr	r3, [pc, #56]	@ (800b8d8 <LoRaMacHandleMlmeRequest+0x68>)
 800b89e:	2200      	movs	r2, #0
 800b8a0:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
            }
#endif /* LORAMAC_VERSION */
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800b8a4:	4b0c      	ldr	r3, [pc, #48]	@ (800b8d8 <LoRaMacHandleMlmeRequest+0x68>)
 800b8a6:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800b8aa:	f023 0302 	bic.w	r3, r3, #2
 800b8ae:	4a0a      	ldr	r2, [pc, #40]	@ (800b8d8 <LoRaMacHandleMlmeRequest+0x68>)
 800b8b0:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 800b8b4:	e00d      	b.n	800b8d2 <LoRaMacHandleMlmeRequest+0x62>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 800b8b6:	2006      	movs	r0, #6
 800b8b8:	f004 fbc0 	bl	801003c <LoRaMacConfirmQueueIsCmdActive>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d007      	beq.n	800b8d2 <LoRaMacHandleMlmeRequest+0x62>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800b8c2:	4b05      	ldr	r3, [pc, #20]	@ (800b8d8 <LoRaMacHandleMlmeRequest+0x68>)
 800b8c4:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800b8c8:	f023 0302 	bic.w	r3, r3, #2
 800b8cc:	4a02      	ldr	r2, [pc, #8]	@ (800b8d8 <LoRaMacHandleMlmeRequest+0x68>)
 800b8ce:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
}
 800b8d2:	bf00      	nop
 800b8d4:	bd80      	pop	{r7, pc}
 800b8d6:	bf00      	nop
 800b8d8:	20000a28 	.word	0x20000a28

0800b8dc <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800b8e0:	200b      	movs	r0, #11
 800b8e2:	f004 fbab 	bl	801003c <LoRaMacConfirmQueueIsCmdActive>
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d019      	beq.n	800b920 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800b8ec:	4b0e      	ldr	r3, [pc, #56]	@ (800b928 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800b8ee:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800b8f2:	f003 0301 	and.w	r3, r3, #1
 800b8f6:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d111      	bne.n	800b920 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800b8fc:	4b0a      	ldr	r3, [pc, #40]	@ (800b928 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800b8fe:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800b902:	f003 0304 	and.w	r3, r3, #4
 800b906:	b2db      	uxtb	r3, r3
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d009      	beq.n	800b920 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800b90c:	4b06      	ldr	r3, [pc, #24]	@ (800b928 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800b90e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800b912:	f023 0302 	bic.w	r3, r3, #2
 800b916:	4a04      	ldr	r2, [pc, #16]	@ (800b928 <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800b918:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            return 0x01;
 800b91c:	2301      	movs	r3, #1
 800b91e:	e000      	b.n	800b922 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800b920:	2300      	movs	r3, #0
}
 800b922:	4618      	mov	r0, r3
 800b924:	bd80      	pop	{r7, pc}
 800b926:	bf00      	nop
 800b928:	20000a28 	.word	0x20000a28

0800b92c <CheckForMinimumAbpDatarate>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
 800b92c:	b480      	push	{r7}
 800b92e:	b083      	sub	sp, #12
 800b930:	af00      	add	r7, sp, #0
 800b932:	4603      	mov	r3, r0
 800b934:	71fb      	strb	r3, [r7, #7]
 800b936:	460b      	mov	r3, r1
 800b938:	71bb      	strb	r3, [r7, #6]
 800b93a:	4613      	mov	r3, r2
 800b93c:	717b      	strb	r3, [r7, #5]
    if( ( adr == true ) &&
 800b93e:	79fb      	ldrb	r3, [r7, #7]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d00a      	beq.n	800b95a <CheckForMinimumAbpDatarate+0x2e>
 800b944:	79bb      	ldrb	r3, [r7, #6]
 800b946:	2b01      	cmp	r3, #1
 800b948:	d107      	bne.n	800b95a <CheckForMinimumAbpDatarate+0x2e>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
 800b94a:	797b      	ldrb	r3, [r7, #5]
 800b94c:	f083 0301 	eor.w	r3, r3, #1
 800b950:	b2db      	uxtb	r3, r3
        ( activation == ACTIVATION_TYPE_ABP ) &&
 800b952:	2b00      	cmp	r3, #0
 800b954:	d001      	beq.n	800b95a <CheckForMinimumAbpDatarate+0x2e>
    {
        return true;
 800b956:	2301      	movs	r3, #1
 800b958:	e000      	b.n	800b95c <CheckForMinimumAbpDatarate+0x30>
    }
    return false;
 800b95a:	2300      	movs	r3, #0
}
 800b95c:	4618      	mov	r0, r3
 800b95e:	370c      	adds	r7, #12
 800b960:	46bd      	mov	sp, r7
 800b962:	bc80      	pop	{r7}
 800b964:	4770      	bx	lr
	...

0800b968 <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 800b968:	b480      	push	{r7}
 800b96a:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800b96c:	4b0d      	ldr	r3, [pc, #52]	@ (800b9a4 <LoRaMacCheckForRxAbort+0x3c>)
 800b96e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800b972:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b976:	2b00      	cmp	r3, #0
 800b978:	d00f      	beq.n	800b99a <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800b97a:	4b0a      	ldr	r3, [pc, #40]	@ (800b9a4 <LoRaMacCheckForRxAbort+0x3c>)
 800b97c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800b980:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b984:	4a07      	ldr	r2, [pc, #28]	@ (800b9a4 <LoRaMacCheckForRxAbort+0x3c>)
 800b986:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800b98a:	4b06      	ldr	r3, [pc, #24]	@ (800b9a4 <LoRaMacCheckForRxAbort+0x3c>)
 800b98c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800b990:	f023 0302 	bic.w	r3, r3, #2
 800b994:	4a03      	ldr	r2, [pc, #12]	@ (800b9a4 <LoRaMacCheckForRxAbort+0x3c>)
 800b996:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    }
}
 800b99a:	bf00      	nop
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bc80      	pop	{r7}
 800b9a0:	4770      	bx	lr
 800b9a2:	bf00      	nop
 800b9a4:	20000a28 	.word	0x20000a28

0800b9a8 <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b084      	sub	sp, #16
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800b9b8:	4b51      	ldr	r3, [pc, #324]	@ (800bb00 <LoRaMacHandleNvm+0x158>)
 800b9ba:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	f040 8099 	bne.w	800baf6 <LoRaMacHandleNvm+0x14e>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2124      	movs	r1, #36	@ 0x24
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f00b f897 	bl	8016afc <Crc32>
 800b9ce:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9d4:	68ba      	ldr	r2, [r7, #8]
 800b9d6:	429a      	cmp	r2, r3
 800b9d8:	d006      	beq.n	800b9e8 <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	68ba      	ldr	r2, [r7, #8]
 800b9de:	625a      	str	r2, [r3, #36]	@ 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800b9e0:	89fb      	ldrh	r3, [r7, #14]
 800b9e2:	f043 0301 	orr.w	r3, r3, #1
 800b9e6:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	3328      	adds	r3, #40	@ 0x28
 800b9ec:	211c      	movs	r1, #28
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f00b f884 	bl	8016afc <Crc32>
 800b9f4:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b9fa:	68ba      	ldr	r2, [r7, #8]
 800b9fc:	429a      	cmp	r2, r3
 800b9fe:	d006      	beq.n	800ba0e <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	68ba      	ldr	r2, [r7, #8]
 800ba04:	645a      	str	r2, [r3, #68]	@ 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800ba06:	89fb      	ldrh	r3, [r7, #14]
 800ba08:	f043 0302 	orr.w	r3, r3, #2
 800ba0c:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	3348      	adds	r3, #72	@ 0x48
 800ba12:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800ba16:	4618      	mov	r0, r3
 800ba18:	f00b f870 	bl	8016afc <Crc32>
 800ba1c:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800ba24:	68ba      	ldr	r2, [r7, #8]
 800ba26:	429a      	cmp	r2, r3
 800ba28:	d007      	beq.n	800ba3a <LoRaMacHandleNvm+0x92>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	68ba      	ldr	r2, [r7, #8]
 800ba2e:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800ba32:	89fb      	ldrh	r3, [r7, #14]
 800ba34:	f043 0304 	orr.w	r3, r3, #4
 800ba38:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800ba40:	21d4      	movs	r1, #212	@ 0xd4
 800ba42:	4618      	mov	r0, r3
 800ba44:	f00b f85a 	bl	8016afc <Crc32>
 800ba48:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800ba50:	68ba      	ldr	r2, [r7, #8]
 800ba52:	429a      	cmp	r2, r3
 800ba54:	d007      	beq.n	800ba66 <LoRaMacHandleNvm+0xbe>
    {
        nvmData->SecureElement.Crc32 = crc;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	68ba      	ldr	r2, [r7, #8]
 800ba5a:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800ba5e:	89fb      	ldrh	r3, [r7, #14]
 800ba60:	f043 0308 	orr.w	r3, r3, #8
 800ba64:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	f503 7309 	add.w	r3, r3, #548	@ 0x224
 800ba6c:	2110      	movs	r1, #16
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f00b f844 	bl	8016afc <Crc32>
 800ba74:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 800ba7c:	68ba      	ldr	r2, [r7, #8]
 800ba7e:	429a      	cmp	r2, r3
 800ba80:	d007      	beq.n	800ba92 <LoRaMacHandleNvm+0xea>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	68ba      	ldr	r2, [r7, #8]
 800ba86:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800ba8a:	89fb      	ldrh	r3, [r7, #14]
 800ba8c:	f043 0310 	orr.w	r3, r3, #16
 800ba90:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	f503 730e 	add.w	r3, r3, #568	@ 0x238
 800ba98:	f44f 715e 	mov.w	r1, #888	@ 0x378
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	f00b f82d 	bl	8016afc <Crc32>
 800baa2:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	@ 0x5b0
 800baaa:	68ba      	ldr	r2, [r7, #8]
 800baac:	429a      	cmp	r2, r3
 800baae:	d007      	beq.n	800bac0 <LoRaMacHandleNvm+0x118>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	68ba      	ldr	r2, [r7, #8]
 800bab4:	f8c3 25b0 	str.w	r2, [r3, #1456]	@ 0x5b0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800bab8:	89fb      	ldrh	r3, [r7, #14]
 800baba:	f043 0320 	orr.w	r3, r3, #32
 800babe:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f203 53b4 	addw	r3, r3, #1460	@ 0x5b4
 800bac6:	2114      	movs	r1, #20
 800bac8:	4618      	mov	r0, r3
 800baca:	f00b f817 	bl	8016afc <Crc32>
 800bace:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f8d3 35c8 	ldr.w	r3, [r3, #1480]	@ 0x5c8
 800bad6:	68ba      	ldr	r2, [r7, #8]
 800bad8:	429a      	cmp	r2, r3
 800bada:	d007      	beq.n	800baec <LoRaMacHandleNvm+0x144>
    {
        nvmData->ClassB.Crc32 = crc;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	68ba      	ldr	r2, [r7, #8]
 800bae0:	f8c3 25c8 	str.w	r2, [r3, #1480]	@ 0x5c8
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800bae4:	89fb      	ldrh	r3, [r7, #14]
 800bae6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800baea:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800baec:	89fb      	ldrh	r3, [r7, #14]
 800baee:	4618      	mov	r0, r3
 800baf0:	f002 f884 	bl	800dbfc <CallNvmDataChangeCallback>
 800baf4:	e000      	b.n	800baf8 <LoRaMacHandleNvm+0x150>
        return;
 800baf6:	bf00      	nop
}
 800baf8:	3710      	adds	r7, #16
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}
 800bafe:	bf00      	nop
 800bb00:	20000a28 	.word	0x20000a28

0800bb04 <LoRaMacHandleResponseTimeout>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool LoRaMacHandleResponseTimeout( TimerTime_t timeoutInMs, TimerTime_t startTimeInMs )
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b084      	sub	sp, #16
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
 800bb0c:	6039      	str	r1, [r7, #0]
    if( startTimeInMs != 0 )
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d00d      	beq.n	800bb30 <LoRaMacHandleResponseTimeout+0x2c>
    {
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 800bb14:	6838      	ldr	r0, [r7, #0]
 800bb16:	f00e fc87 	bl	801a428 <UTIL_TIMER_GetElapsedTime>
 800bb1a:	60f8      	str	r0, [r7, #12]
        if( elapsedTime > timeoutInMs )
 800bb1c:	68fa      	ldr	r2, [r7, #12]
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	429a      	cmp	r2, r3
 800bb22:	d905      	bls.n	800bb30 <LoRaMacHandleResponseTimeout+0x2c>
        {
            Nvm.MacGroup1.SrvAckRequested = false;
 800bb24:	4b05      	ldr	r3, [pc, #20]	@ (800bb3c <LoRaMacHandleResponseTimeout+0x38>)
 800bb26:	2200      	movs	r2, #0
 800bb28:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            return true;
 800bb2c:	2301      	movs	r3, #1
 800bb2e:	e000      	b.n	800bb32 <LoRaMacHandleResponseTimeout+0x2e>
        }
    }
    return false;
 800bb30:	2300      	movs	r3, #0
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	3710      	adds	r7, #16
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}
 800bb3a:	bf00      	nop
 800bb3c:	20008000 	.word	0x20008000

0800bb40 <LoRaMacProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b082      	sub	sp, #8
 800bb44:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800bb46:	2300      	movs	r3, #0
 800bb48:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800bb4a:	f7ff fd0b 	bl	800b564 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800bb4e:	f003 fe06 	bl	800f75e <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800bb52:	4b25      	ldr	r3, [pc, #148]	@ (800bbe8 <LoRaMacProcess+0xa8>)
 800bb54:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800bb58:	f003 0310 	and.w	r3, r3, #16
 800bb5c:	b2db      	uxtb	r3, r3
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d023      	beq.n	800bbaa <LoRaMacProcess+0x6a>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800bb62:	2000      	movs	r0, #0
 800bb64:	f7ff fd7e 	bl	800b664 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800bb68:	f7ff fefe 	bl	800b968 <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800bb6c:	f002 f864 	bl	800dc38 <IsRequestPending>
 800bb70:	4603      	mov	r3, r0
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d006      	beq.n	800bb84 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800bb76:	f7ff feb1 	bl	800b8dc <LoRaMacCheckForBeaconAcquisition>
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	461a      	mov	r2, r3
 800bb7e:	79fb      	ldrb	r3, [r7, #7]
 800bb80:	4313      	orrs	r3, r2
 800bb82:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800bb84:	79fb      	ldrb	r3, [r7, #7]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d103      	bne.n	800bb92 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800bb8a:	f7ff fe71 	bl	800b870 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800bb8e:	f7ff fe13 	bl	800b7b8 <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800bb92:	f7ff fd77 	bl	800b684 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800bb96:	2001      	movs	r0, #1
 800bb98:	f7ff fd64 	bl	800b664 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800bb9c:	4a12      	ldr	r2, [pc, #72]	@ (800bbe8 <LoRaMacProcess+0xa8>)
 800bb9e:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800bba2:	f043 0320 	orr.w	r3, r3, #32
 800bba6:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
    LoRaMacHandleIndicationEvents( );
 800bbaa:	f7ff fdcd 	bl	800b748 <LoRaMacHandleIndicationEvents>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    LoRaMacHandleRejoinEvents( );
#endif /* LORAMAC_VERSION */

    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800bbae:	4b0e      	ldr	r3, [pc, #56]	@ (800bbe8 <LoRaMacProcess+0xa8>)
 800bbb0:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800bbb4:	2b02      	cmp	r3, #2
 800bbb6:	d101      	bne.n	800bbbc <LoRaMacProcess+0x7c>
    {
        OpenContinuousRxCWindow( );
 800bbb8:	f001 fc28 	bl	800d40c <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800bbbc:	4b0a      	ldr	r3, [pc, #40]	@ (800bbe8 <LoRaMacProcess+0xa8>)
 800bbbe:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800bbc2:	f003 0320 	and.w	r3, r3, #32
 800bbc6:	b2db      	uxtb	r3, r3
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d009      	beq.n	800bbe0 <LoRaMacProcess+0xa0>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800bbcc:	4a06      	ldr	r2, [pc, #24]	@ (800bbe8 <LoRaMacProcess+0xa8>)
 800bbce:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800bbd2:	f023 0320 	bic.w	r3, r3, #32
 800bbd6:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
        LoRaMacHandleNvm( &Nvm );
 800bbda:	4804      	ldr	r0, [pc, #16]	@ (800bbec <LoRaMacProcess+0xac>)
 800bbdc:	f7ff fee4 	bl	800b9a8 <LoRaMacHandleNvm>
    }
}
 800bbe0:	bf00      	nop
 800bbe2:	3708      	adds	r7, #8
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}
 800bbe8:	20000a28 	.word	0x20000a28
 800bbec:	20008000 	.word	0x20008000

0800bbf0 <OnTxDelayedTimerEvent>:


static void OnTxDelayedTimerEvent( void* context )
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b082      	sub	sp, #8
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800bbf8:	481e      	ldr	r0, [pc, #120]	@ (800bc74 <OnTxDelayedTimerEvent+0x84>)
 800bbfa:	f00e fb69 	bl	801a2d0 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800bbfe:	4b1e      	ldr	r3, [pc, #120]	@ (800bc78 <OnTxDelayedTimerEvent+0x88>)
 800bc00:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800bc04:	f023 0320 	bic.w	r3, r3, #32
 800bc08:	4a1b      	ldr	r2, [pc, #108]	@ (800bc78 <OnTxDelayedTimerEvent+0x88>)
 800bc0a:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800bc0e:	4b1b      	ldr	r3, [pc, #108]	@ (800bc7c <OnTxDelayedTimerEvent+0x8c>)
 800bc10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc14:	4a18      	ldr	r2, [pc, #96]	@ (800bc78 <OnTxDelayedTimerEvent+0x88>)
 800bc16:	f8d2 2498 	ldr.w	r2, [r2, #1176]	@ 0x498
 800bc1a:	4611      	mov	r1, r2
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f7ff ff71 	bl	800bb04 <LoRaMacHandleResponseTimeout>
 800bc22:	4603      	mov	r3, r0
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d11e      	bne.n	800bc66 <OnTxDelayedTimerEvent+0x76>
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800bc28:	2001      	movs	r0, #1
 800bc2a:	f001 f939 	bl	800cea0 <ScheduleTx>
 800bc2e:	4603      	mov	r3, r0
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d01a      	beq.n	800bc6a <OnTxDelayedTimerEvent+0x7a>
 800bc34:	2b0b      	cmp	r3, #11
 800bc36:	d018      	beq.n	800bc6a <OnTxDelayedTimerEvent+0x7a>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800bc38:	4b10      	ldr	r3, [pc, #64]	@ (800bc7c <OnTxDelayedTimerEvent+0x8c>)
 800bc3a:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800bc3e:	b2da      	uxtb	r2, r3
 800bc40:	4b0d      	ldr	r3, [pc, #52]	@ (800bc78 <OnTxDelayedTimerEvent+0x88>)
 800bc42:	f883 2442 	strb.w	r2, [r3, #1090]	@ 0x442
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800bc46:	4b0c      	ldr	r3, [pc, #48]	@ (800bc78 <OnTxDelayedTimerEvent+0x88>)
 800bc48:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800bc4c:	4b0a      	ldr	r3, [pc, #40]	@ (800bc78 <OnTxDelayedTimerEvent+0x88>)
 800bc4e:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800bc52:	4b09      	ldr	r3, [pc, #36]	@ (800bc78 <OnTxDelayedTimerEvent+0x88>)
 800bc54:	2209      	movs	r2, #9
 800bc56:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800bc5a:	2009      	movs	r0, #9
 800bc5c:	f004 f9ba 	bl	800ffd4 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800bc60:	f001 ff7a 	bl	800db58 <StopRetransmission>
            break;
 800bc64:	e002      	b.n	800bc6c <OnTxDelayedTimerEvent+0x7c>
        return;
 800bc66:	bf00      	nop
 800bc68:	e000      	b.n	800bc6c <OnTxDelayedTimerEvent+0x7c>
            break;
 800bc6a:	bf00      	nop
        }
    }
}
 800bc6c:	3708      	adds	r7, #8
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}
 800bc72:	bf00      	nop
 800bc74:	20000d90 	.word	0x20000d90
 800bc78:	20000a28 	.word	0x20000a28
 800bc7c:	20008000 	.word	0x20008000

0800bc80 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b082      	sub	sp, #8
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800bc88:	4b17      	ldr	r3, [pc, #92]	@ (800bce8 <OnRxWindow1TimerEvent+0x68>)
 800bc8a:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 800bc8e:	4b16      	ldr	r3, [pc, #88]	@ (800bce8 <OnRxWindow1TimerEvent+0x68>)
 800bc90:	f883 23b8 	strb.w	r2, [r3, #952]	@ 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800bc94:	4b15      	ldr	r3, [pc, #84]	@ (800bcec <OnRxWindow1TimerEvent+0x6c>)
 800bc96:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 800bc9a:	b25a      	sxtb	r2, r3
 800bc9c:	4b12      	ldr	r3, [pc, #72]	@ (800bce8 <OnRxWindow1TimerEvent+0x68>)
 800bc9e:	f883 23bb 	strb.w	r2, [r3, #955]	@ 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800bca2:	4b12      	ldr	r3, [pc, #72]	@ (800bcec <OnRxWindow1TimerEvent+0x6c>)
 800bca4:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800bca8:	4b0f      	ldr	r3, [pc, #60]	@ (800bce8 <OnRxWindow1TimerEvent+0x68>)
 800bcaa:	f883 23c8 	strb.w	r2, [r3, #968]	@ 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800bcae:	4b0f      	ldr	r3, [pc, #60]	@ (800bcec <OnRxWindow1TimerEvent+0x6c>)
 800bcb0:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800bcb4:	4b0c      	ldr	r3, [pc, #48]	@ (800bce8 <OnRxWindow1TimerEvent+0x68>)
 800bcb6:	f883 23c9 	strb.w	r2, [r3, #969]	@ 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800bcba:	4b0b      	ldr	r3, [pc, #44]	@ (800bce8 <OnRxWindow1TimerEvent+0x68>)
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	f883 23ca 	strb.w	r2, [r3, #970]	@ 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800bcc2:	4b09      	ldr	r3, [pc, #36]	@ (800bce8 <OnRxWindow1TimerEvent+0x68>)
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	f883 23cb 	strb.w	r2, [r3, #971]	@ 0x3cb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800bcca:	4b08      	ldr	r3, [pc, #32]	@ (800bcec <OnRxWindow1TimerEvent+0x6c>)
 800bccc:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 800bcd0:	4b05      	ldr	r3, [pc, #20]	@ (800bce8 <OnRxWindow1TimerEvent+0x68>)
 800bcd2:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800bcd6:	4906      	ldr	r1, [pc, #24]	@ (800bcf0 <OnRxWindow1TimerEvent+0x70>)
 800bcd8:	4806      	ldr	r0, [pc, #24]	@ (800bcf4 <OnRxWindow1TimerEvent+0x74>)
 800bcda:	f001 fb63 	bl	800d3a4 <RxWindowSetup>
}
 800bcde:	bf00      	nop
 800bce0:	3708      	adds	r7, #8
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}
 800bce6:	bf00      	nop
 800bce8:	20000a28 	.word	0x20000a28
 800bcec:	20008000 	.word	0x20008000
 800bcf0:	20000de0 	.word	0x20000de0
 800bcf4:	20000da8 	.word	0x20000da8

0800bcf8 <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b082      	sub	sp, #8
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800bd00:	4b19      	ldr	r3, [pc, #100]	@ (800bd68 <OnRxWindow2TimerEvent+0x70>)
 800bd02:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d029      	beq.n	800bd5e <OnRxWindow2TimerEvent+0x66>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800bd0a:	4b17      	ldr	r3, [pc, #92]	@ (800bd68 <OnRxWindow2TimerEvent+0x70>)
 800bd0c:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 800bd10:	4b15      	ldr	r3, [pc, #84]	@ (800bd68 <OnRxWindow2TimerEvent+0x70>)
 800bd12:	f883 23d0 	strb.w	r2, [r3, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800bd16:	4b15      	ldr	r3, [pc, #84]	@ (800bd6c <OnRxWindow2TimerEvent+0x74>)
 800bd18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bd1a:	4a13      	ldr	r2, [pc, #76]	@ (800bd68 <OnRxWindow2TimerEvent+0x70>)
 800bd1c:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800bd20:	4b12      	ldr	r3, [pc, #72]	@ (800bd6c <OnRxWindow2TimerEvent+0x74>)
 800bd22:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800bd26:	4b10      	ldr	r3, [pc, #64]	@ (800bd68 <OnRxWindow2TimerEvent+0x70>)
 800bd28:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800bd2c:	4b0f      	ldr	r3, [pc, #60]	@ (800bd6c <OnRxWindow2TimerEvent+0x74>)
 800bd2e:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800bd32:	4b0d      	ldr	r3, [pc, #52]	@ (800bd68 <OnRxWindow2TimerEvent+0x70>)
 800bd34:	f883 23e1 	strb.w	r2, [r3, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800bd38:	4b0b      	ldr	r3, [pc, #44]	@ (800bd68 <OnRxWindow2TimerEvent+0x70>)
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	f883 23e2 	strb.w	r2, [r3, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800bd40:	4b09      	ldr	r3, [pc, #36]	@ (800bd68 <OnRxWindow2TimerEvent+0x70>)
 800bd42:	2201      	movs	r2, #1
 800bd44:	f883 23e3 	strb.w	r2, [r3, #995]	@ 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800bd48:	4b08      	ldr	r3, [pc, #32]	@ (800bd6c <OnRxWindow2TimerEvent+0x74>)
 800bd4a:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 800bd4e:	4b06      	ldr	r3, [pc, #24]	@ (800bd68 <OnRxWindow2TimerEvent+0x70>)
 800bd50:	f883 23e4 	strb.w	r2, [r3, #996]	@ 0x3e4
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800bd54:	4906      	ldr	r1, [pc, #24]	@ (800bd70 <OnRxWindow2TimerEvent+0x78>)
 800bd56:	4807      	ldr	r0, [pc, #28]	@ (800bd74 <OnRxWindow2TimerEvent+0x7c>)
 800bd58:	f001 fb24 	bl	800d3a4 <RxWindowSetup>
 800bd5c:	e000      	b.n	800bd60 <OnRxWindow2TimerEvent+0x68>
        return;
 800bd5e:	bf00      	nop
}
 800bd60:	3708      	adds	r7, #8
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}
 800bd66:	bf00      	nop
 800bd68:	20000a28 	.word	0x20000a28
 800bd6c:	20008000 	.word	0x20008000
 800bd70:	20000df8 	.word	0x20000df8
 800bd74:	20000dc0 	.word	0x20000dc0

0800bd78 <OnRetransmitTimeoutTimerEvent>:

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void OnRetransmitTimeoutTimerEvent( void* context )
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b082      	sub	sp, #8
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800bd80:	4808      	ldr	r0, [pc, #32]	@ (800bda4 <OnRetransmitTimeoutTimerEvent+0x2c>)
 800bd82:	f00e faa5 	bl	801a2d0 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800bd86:	4b08      	ldr	r3, [pc, #32]	@ (800bda8 <OnRetransmitTimeoutTimerEvent+0x30>)
 800bd88:	f893 341a 	ldrb.w	r3, [r3, #1050]	@ 0x41a
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d003      	beq.n	800bd98 <OnRetransmitTimeoutTimerEvent+0x20>
    {
        MacCtx.RetransmitTimeoutRetry = true;
 800bd90:	4b05      	ldr	r3, [pc, #20]	@ (800bda8 <OnRetransmitTimeoutTimerEvent+0x30>)
 800bd92:	2201      	movs	r2, #1
 800bd94:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
    }
    OnMacProcessNotify( );
 800bd98:	f001 ff1a 	bl	800dbd0 <OnMacProcessNotify>
}
 800bd9c:	bf00      	nop
 800bd9e:	3708      	adds	r7, #8
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}
 800bda4:	20000e28 	.word	0x20000e28
 800bda8:	20000a28 	.word	0x20000a28

0800bdac <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b084      	sub	sp, #16
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	60ba      	str	r2, [r7, #8]
 800bdb4:	607b      	str	r3, [r7, #4]
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	73fb      	strb	r3, [r7, #15]
 800bdba:	460b      	mov	r3, r1
 800bdbc:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d005      	beq.n	800bdd0 <GetFCntDown+0x24>
 800bdc4:	69bb      	ldr	r3, [r7, #24]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d002      	beq.n	800bdd0 <GetFCntDown+0x24>
 800bdca:	69fb      	ldr	r3, [r7, #28]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d101      	bne.n	800bdd4 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bdd0:	2309      	movs	r3, #9
 800bdd2:	e028      	b.n	800be26 <GetFCntDown+0x7a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800bdd4:	7bfb      	ldrb	r3, [r7, #15]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d016      	beq.n	800be08 <GetFCntDown+0x5c>
 800bdda:	2b01      	cmp	r3, #1
 800bddc:	d118      	bne.n	800be10 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800bdde:	79bb      	ldrb	r3, [r7, #6]
 800bde0:	2b01      	cmp	r3, #1
 800bde2:	d10d      	bne.n	800be00 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800bde4:	7bbb      	ldrb	r3, [r7, #14]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d002      	beq.n	800bdf0 <GetFCntDown+0x44>
 800bdea:	7bbb      	ldrb	r3, [r7, #14]
 800bdec:	2b03      	cmp	r3, #3
 800bdee:	d103      	bne.n	800bdf8 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800bdf0:	69bb      	ldr	r3, [r7, #24]
 800bdf2:	2202      	movs	r2, #2
 800bdf4:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800bdf6:	e00d      	b.n	800be14 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800bdf8:	69bb      	ldr	r3, [r7, #24]
 800bdfa:	2201      	movs	r2, #1
 800bdfc:	701a      	strb	r2, [r3, #0]
            break;
 800bdfe:	e009      	b.n	800be14 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800be00:	69bb      	ldr	r3, [r7, #24]
 800be02:	2203      	movs	r2, #3
 800be04:	701a      	strb	r2, [r3, #0]
            break;
 800be06:	e005      	b.n	800be14 <GetFCntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800be08:	69bb      	ldr	r3, [r7, #24]
 800be0a:	2204      	movs	r2, #4
 800be0c:	701a      	strb	r2, [r3, #0]
            break;
 800be0e:	e001      	b.n	800be14 <GetFCntDown+0x68>
        case MULTICAST_3_ADDR:
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800be10:	2305      	movs	r3, #5
 800be12:	e008      	b.n	800be26 <GetFCntDown+0x7a>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 800be14:	69bb      	ldr	r3, [r7, #24]
 800be16:	7818      	ldrb	r0, [r3, #0]
 800be18:	68bb      	ldr	r3, [r7, #8]
 800be1a:	89db      	ldrh	r3, [r3, #14]
 800be1c:	69fa      	ldr	r2, [r7, #28]
 800be1e:	4619      	mov	r1, r3
 800be20:	f004 fd12 	bl	8010848 <LoRaMacCryptoGetFCntDown>
 800be24:	4603      	mov	r3, r0
}
 800be26:	4618      	mov	r0, r3
 800be28:	3710      	adds	r7, #16
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}
	...

0800be30 <SwitchClass>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800be30:	b5b0      	push	{r4, r5, r7, lr}
 800be32:	b084      	sub	sp, #16
 800be34:	af00      	add	r7, sp, #0
 800be36:	4603      	mov	r3, r0
 800be38:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800be3a:	2303      	movs	r3, #3
 800be3c:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800be3e:	4b6e      	ldr	r3, [pc, #440]	@ (800bff8 <SwitchClass+0x1c8>)
 800be40:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800be44:	2b02      	cmp	r3, #2
 800be46:	f000 80bb 	beq.w	800bfc0 <SwitchClass+0x190>
 800be4a:	2b02      	cmp	r3, #2
 800be4c:	f300 80ce 	bgt.w	800bfec <SwitchClass+0x1bc>
 800be50:	2b00      	cmp	r3, #0
 800be52:	d003      	beq.n	800be5c <SwitchClass+0x2c>
 800be54:	2b01      	cmp	r3, #1
 800be56:	f000 80a5 	beq.w	800bfa4 <SwitchClass+0x174>
 800be5a:	e0c7      	b.n	800bfec <SwitchClass+0x1bc>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800be5c:	79fb      	ldrb	r3, [r7, #7]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d109      	bne.n	800be76 <SwitchClass+0x46>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800be62:	4b65      	ldr	r3, [pc, #404]	@ (800bff8 <SwitchClass+0x1c8>)
 800be64:	4a64      	ldr	r2, [pc, #400]	@ (800bff8 <SwitchClass+0x1c8>)
 800be66:	3374      	adds	r3, #116	@ 0x74
 800be68:	326c      	adds	r2, #108	@ 0x6c
 800be6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800be6e:	e883 0003 	stmia.w	r3, {r0, r1}

                status = LORAMAC_STATUS_OK;
 800be72:	2300      	movs	r3, #0
 800be74:	73fb      	strb	r3, [r7, #15]
            }
            if( deviceClass == CLASS_B )
 800be76:	79fb      	ldrb	r3, [r7, #7]
 800be78:	2b01      	cmp	r3, #1
 800be7a:	d10c      	bne.n	800be96 <SwitchClass+0x66>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800be7c:	79fb      	ldrb	r3, [r7, #7]
 800be7e:	4618      	mov	r0, r3
 800be80:	f003 fc04 	bl	800f68c <LoRaMacClassBSwitchClass>
 800be84:	4603      	mov	r3, r0
 800be86:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800be88:	7bfb      	ldrb	r3, [r7, #15]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d103      	bne.n	800be96 <SwitchClass+0x66>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800be8e:	4a5a      	ldr	r2, [pc, #360]	@ (800bff8 <SwitchClass+0x1c8>)
 800be90:	79fb      	ldrb	r3, [r7, #7]
 800be92:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118
                }
            }

            if( deviceClass == CLASS_C )
 800be96:	79fb      	ldrb	r3, [r7, #7]
 800be98:	2b02      	cmp	r3, #2
 800be9a:	f040 80a2 	bne.w	800bfe2 <SwitchClass+0x1b2>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800be9e:	4a56      	ldr	r2, [pc, #344]	@ (800bff8 <SwitchClass+0x1c8>)
 800bea0:	79fb      	ldrb	r3, [r7, #7]
 800bea2:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800bea6:	4a55      	ldr	r2, [pc, #340]	@ (800bffc <SwitchClass+0x1cc>)
 800bea8:	4b54      	ldr	r3, [pc, #336]	@ (800bffc <SwitchClass+0x1cc>)
 800beaa:	f502 747a 	add.w	r4, r2, #1000	@ 0x3e8
 800beae:	f503 7574 	add.w	r5, r3, #976	@ 0x3d0
 800beb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800beb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800beb6:	e895 0003 	ldmia.w	r5, {r0, r1}
 800beba:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800bebe:	4b4f      	ldr	r3, [pc, #316]	@ (800bffc <SwitchClass+0x1cc>)
 800bec0:	2202      	movs	r2, #2
 800bec2:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800bec6:	2300      	movs	r3, #0
 800bec8:	73bb      	strb	r3, [r7, #14]
 800beca:	e05b      	b.n	800bf84 <SwitchClass+0x154>
                {
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800becc:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800bed0:	4949      	ldr	r1, [pc, #292]	@ (800bff8 <SwitchClass+0x1c8>)
 800bed2:	4613      	mov	r3, r2
 800bed4:	005b      	lsls	r3, r3, #1
 800bed6:	4413      	add	r3, r2
 800bed8:	011b      	lsls	r3, r3, #4
 800beda:	440b      	add	r3, r1
 800bedc:	33e9      	adds	r3, #233	@ 0xe9
 800bede:	781b      	ldrb	r3, [r3, #0]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d049      	beq.n	800bf78 <SwitchClass+0x148>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 800bee4:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800bee8:	4943      	ldr	r1, [pc, #268]	@ (800bff8 <SwitchClass+0x1c8>)
 800beea:	4613      	mov	r3, r2
 800beec:	005b      	lsls	r3, r3, #1
 800beee:	4413      	add	r3, r2
 800bef0:	011b      	lsls	r3, r3, #4
 800bef2:	440b      	add	r3, r1
 800bef4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800bef8:	781b      	ldrb	r3, [r3, #0]
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800befa:	2b02      	cmp	r3, #2
 800befc:	d13c      	bne.n	800bf78 <SwitchClass+0x148>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 800befe:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800bf02:	493d      	ldr	r1, [pc, #244]	@ (800bff8 <SwitchClass+0x1c8>)
 800bf04:	4613      	mov	r3, r2
 800bf06:	005b      	lsls	r3, r3, #1
 800bf08:	4413      	add	r3, r2
 800bf0a:	011b      	lsls	r3, r3, #4
 800bf0c:	440b      	add	r3, r1
 800bf0e:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	4a38      	ldr	r2, [pc, #224]	@ (800bff8 <SwitchClass+0x1c8>)
 800bf16:	6753      	str	r3, [r2, #116]	@ 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 800bf18:	f997 200e 	ldrsb.w	r2, [r7, #14]
 800bf1c:	4936      	ldr	r1, [pc, #216]	@ (800bff8 <SwitchClass+0x1c8>)
 800bf1e:	4613      	mov	r3, r2
 800bf20:	005b      	lsls	r3, r3, #1
 800bf22:	4413      	add	r3, r2
 800bf24:	011b      	lsls	r3, r3, #4
 800bf26:	440b      	add	r3, r1
 800bf28:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800bf2c:	f993 3000 	ldrsb.w	r3, [r3]
 800bf30:	b2da      	uxtb	r2, r3
 800bf32:	4b31      	ldr	r3, [pc, #196]	@ (800bff8 <SwitchClass+0x1c8>)
 800bf34:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800bf38:	4b30      	ldr	r3, [pc, #192]	@ (800bffc <SwitchClass+0x1cc>)
 800bf3a:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 800bf3e:	4b2f      	ldr	r3, [pc, #188]	@ (800bffc <SwitchClass+0x1cc>)
 800bf40:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800bf44:	4b2c      	ldr	r3, [pc, #176]	@ (800bff8 <SwitchClass+0x1c8>)
 800bf46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bf48:	4a2c      	ldr	r2, [pc, #176]	@ (800bffc <SwitchClass+0x1cc>)
 800bf4a:	f8c2 33ec 	str.w	r3, [r2, #1004]	@ 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800bf4e:	4b2a      	ldr	r3, [pc, #168]	@ (800bff8 <SwitchClass+0x1c8>)
 800bf50:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800bf54:	4b29      	ldr	r3, [pc, #164]	@ (800bffc <SwitchClass+0x1cc>)
 800bf56:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800bf5a:	4b27      	ldr	r3, [pc, #156]	@ (800bff8 <SwitchClass+0x1c8>)
 800bf5c:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800bf60:	4b26      	ldr	r3, [pc, #152]	@ (800bffc <SwitchClass+0x1cc>)
 800bf62:	f883 23f9 	strb.w	r2, [r3, #1017]	@ 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800bf66:	4b25      	ldr	r3, [pc, #148]	@ (800bffc <SwitchClass+0x1cc>)
 800bf68:	2203      	movs	r2, #3
 800bf6a:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800bf6e:	4b23      	ldr	r3, [pc, #140]	@ (800bffc <SwitchClass+0x1cc>)
 800bf70:	2201      	movs	r2, #1
 800bf72:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
                        break;
 800bf76:	e009      	b.n	800bf8c <SwitchClass+0x15c>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800bf78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bf7c:	b2db      	uxtb	r3, r3
 800bf7e:	3301      	adds	r3, #1
 800bf80:	b2db      	uxtb	r3, r3
 800bf82:	73bb      	strb	r3, [r7, #14]
 800bf84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	dd9f      	ble.n	800becc <SwitchClass+0x9c>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800bf8c:	4b1b      	ldr	r3, [pc, #108]	@ (800bffc <SwitchClass+0x1cc>)
 800bf8e:	2200      	movs	r2, #0
 800bf90:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800bf94:	4b1a      	ldr	r3, [pc, #104]	@ (800c000 <SwitchClass+0x1d0>)
 800bf96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf98:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800bf9a:	f001 fa37 	bl	800d40c <OpenContinuousRxCWindow>
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */

                status = LORAMAC_STATUS_OK;
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800bfa2:	e01e      	b.n	800bfe2 <SwitchClass+0x1b2>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800bfa4:	79fb      	ldrb	r3, [r7, #7]
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	f003 fb70 	bl	800f68c <LoRaMacClassBSwitchClass>
 800bfac:	4603      	mov	r3, r0
 800bfae:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800bfb0:	7bfb      	ldrb	r3, [r7, #15]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d117      	bne.n	800bfe6 <SwitchClass+0x1b6>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800bfb6:	4a10      	ldr	r2, [pc, #64]	@ (800bff8 <SwitchClass+0x1c8>)
 800bfb8:	79fb      	ldrb	r3, [r7, #7]
 800bfba:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118
            }
            break;
 800bfbe:	e012      	b.n	800bfe6 <SwitchClass+0x1b6>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800bfc0:	79fb      	ldrb	r3, [r7, #7]
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d111      	bne.n	800bfea <SwitchClass+0x1ba>
            {
                // Reset RxSlot to NONE
                MacCtx.RxSlot = RX_SLOT_NONE;
 800bfc6:	4b0d      	ldr	r3, [pc, #52]	@ (800bffc <SwitchClass+0x1cc>)
 800bfc8:	2206      	movs	r2, #6
 800bfca:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490

                Nvm.MacGroup2.DeviceClass = deviceClass;
 800bfce:	4a0a      	ldr	r2, [pc, #40]	@ (800bff8 <SwitchClass+0x1c8>)
 800bfd0:	79fb      	ldrb	r3, [r7, #7]
 800bfd2:	f882 3118 	strb.w	r3, [r2, #280]	@ 0x118

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800bfd6:	4b0a      	ldr	r3, [pc, #40]	@ (800c000 <SwitchClass+0x1d0>)
 800bfd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfda:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	73fb      	strb	r3, [r7, #15]
                {
                    LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_MODE_IND, ( uint8_t* )&Nvm.MacGroup2.DeviceClass, 1 );
                }
#endif /* LORAMAC_VERSION */
            }
            break;
 800bfe0:	e003      	b.n	800bfea <SwitchClass+0x1ba>
            break;
 800bfe2:	bf00      	nop
 800bfe4:	e002      	b.n	800bfec <SwitchClass+0x1bc>
            break;
 800bfe6:	bf00      	nop
 800bfe8:	e000      	b.n	800bfec <SwitchClass+0x1bc>
            break;
 800bfea:	bf00      	nop
        }
    }

    return status;
 800bfec:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfee:	4618      	mov	r0, r3
 800bff0:	3710      	adds	r7, #16
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bdb0      	pop	{r4, r5, r7, pc}
 800bff6:	bf00      	nop
 800bff8:	20008000 	.word	0x20008000
 800bffc:	20000a28 	.word	0x20000a28
 800c000:	080210e8 	.word	0x080210e8

0800c004 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b086      	sub	sp, #24
 800c008:	af00      	add	r7, sp, #0
 800c00a:	4603      	mov	r3, r0
 800c00c:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800c00e:	4b10      	ldr	r3, [pc, #64]	@ (800c050 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800c010:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800c014:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800c016:	79fb      	ldrb	r3, [r7, #7]
 800c018:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800c01a:	230d      	movs	r3, #13
 800c01c:	743b      	strb	r3, [r7, #16]

    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800c01e:	4b0c      	ldr	r3, [pc, #48]	@ (800c050 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800c020:	f893 308c 	ldrb.w	r3, [r3, #140]	@ 0x8c
 800c024:	2b00      	cmp	r3, #0
 800c026:	d001      	beq.n	800c02c <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800c028:	230e      	movs	r3, #14
 800c02a:	743b      	strb	r3, [r7, #16]
    }
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c02c:	4b08      	ldr	r3, [pc, #32]	@ (800c050 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800c02e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800c032:	f107 0210 	add.w	r2, r7, #16
 800c036:	4611      	mov	r1, r2
 800c038:	4618      	mov	r0, r3
 800c03a:	f005 fa6c 	bl	8011516 <RegionGetPhyParam>
 800c03e:	4603      	mov	r3, r0
 800c040:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	b2db      	uxtb	r3, r3
}
 800c046:	4618      	mov	r0, r3
 800c048:	3718      	adds	r7, #24
 800c04a:	46bd      	mov	sp, r7
 800c04c:	bd80      	pop	{r7, pc}
 800c04e:	bf00      	nop
 800c050:	20008000 	.word	0x20008000

0800c054 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b084      	sub	sp, #16
 800c058:	af00      	add	r7, sp, #0
 800c05a:	4603      	mov	r3, r0
 800c05c:	71fb      	strb	r3, [r7, #7]
 800c05e:	460b      	mov	r3, r1
 800c060:	71bb      	strb	r3, [r7, #6]
 800c062:	4613      	mov	r3, r2
 800c064:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800c066:	2300      	movs	r3, #0
 800c068:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800c06a:	2300      	movs	r3, #0
 800c06c:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800c06e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800c072:	4618      	mov	r0, r3
 800c074:	f7ff ffc6 	bl	800c004 <GetMaxAppPayloadWithoutFOptsLength>
 800c078:	4603      	mov	r3, r0
 800c07a:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800c07c:	79fb      	ldrb	r3, [r7, #7]
 800c07e:	b29a      	uxth	r2, r3
 800c080:	797b      	ldrb	r3, [r7, #5]
 800c082:	b29b      	uxth	r3, r3
 800c084:	4413      	add	r3, r2
 800c086:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800c088:	89ba      	ldrh	r2, [r7, #12]
 800c08a:	89fb      	ldrh	r3, [r7, #14]
 800c08c:	429a      	cmp	r2, r3
 800c08e:	d804      	bhi.n	800c09a <ValidatePayloadLength+0x46>
 800c090:	89bb      	ldrh	r3, [r7, #12]
 800c092:	2bff      	cmp	r3, #255	@ 0xff
 800c094:	d801      	bhi.n	800c09a <ValidatePayloadLength+0x46>
    {
        return true;
 800c096:	2301      	movs	r3, #1
 800c098:	e000      	b.n	800c09c <ValidatePayloadLength+0x48>
    }
    return false;
 800c09a:	2300      	movs	r3, #0
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	3710      	adds	r7, #16
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}

0800c0a4 <ProcessMacCommands>:

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800c0a4:	b590      	push	{r4, r7, lr}
 800c0a6:	b0a5      	sub	sp, #148	@ 0x94
 800c0a8:	af02      	add	r7, sp, #8
 800c0aa:	6078      	str	r0, [r7, #4]
 800c0ac:	4608      	mov	r0, r1
 800c0ae:	4611      	mov	r1, r2
 800c0b0:	461a      	mov	r2, r3
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	70fb      	strb	r3, [r7, #3]
 800c0b6:	460b      	mov	r3, r1
 800c0b8:	70bb      	strb	r3, [r7, #2]
 800c0ba:	4613      	mov	r3, r2
 800c0bc:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 800c0be:	2300      	movs	r3, #0
 800c0c0:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    bool adrBlockFound = false;
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    MacCommand_t* macCmd;
#endif /* LORAMAC_VERSION */

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 800c0d0:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	f000 84b9 	beq.w	800ca4c <ProcessMacCommands+0x9a8>
 800c0da:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800c0de:	2b01      	cmp	r3, #1
 800c0e0:	f040 84ba 	bne.w	800ca58 <ProcessMacCommands+0x9b4>
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 800c0e4:	f000 bcb2 	b.w	800ca4c <ProcessMacCommands+0x9a8>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800c0e8:	78fb      	ldrb	r3, [r7, #3]
 800c0ea:	687a      	ldr	r2, [r7, #4]
 800c0ec:	4413      	add	r3, r2
 800c0ee:	781b      	ldrb	r3, [r3, #0]
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f003 fdcb 	bl	800fc8c <LoRaMacCommandsGetCmdSize>
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	461a      	mov	r2, r3
 800c0fa:	78fb      	ldrb	r3, [r7, #3]
 800c0fc:	441a      	add	r2, r3
 800c0fe:	78bb      	ldrb	r3, [r7, #2]
 800c100:	429a      	cmp	r2, r3
 800c102:	f300 84ab 	bgt.w	800ca5c <ProcessMacCommands+0x9b8>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800c106:	78fb      	ldrb	r3, [r7, #3]
 800c108:	1c5a      	adds	r2, r3, #1
 800c10a:	70fa      	strb	r2, [r7, #3]
 800c10c:	461a      	mov	r2, r3
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	4413      	add	r3, r2
 800c112:	781b      	ldrb	r3, [r3, #0]
 800c114:	3b02      	subs	r3, #2
 800c116:	2b11      	cmp	r3, #17
 800c118:	f200 84a2 	bhi.w	800ca60 <ProcessMacCommands+0x9bc>
 800c11c:	a201      	add	r2, pc, #4	@ (adr r2, 800c124 <ProcessMacCommands+0x80>)
 800c11e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c122:	bf00      	nop
 800c124:	0800c16d 	.word	0x0800c16d
 800c128:	0800c1af 	.word	0x0800c1af
 800c12c:	0800c32b 	.word	0x0800c32b
 800c130:	0800c369 	.word	0x0800c369
 800c134:	0800c461 	.word	0x0800c461
 800c138:	0800c4b1 	.word	0x0800c4b1
 800c13c:	0800c56d 	.word	0x0800c56d
 800c140:	0800c5c3 	.word	0x0800c5c3
 800c144:	0800c6a9 	.word	0x0800c6a9
 800c148:	0800ca61 	.word	0x0800ca61
 800c14c:	0800ca61 	.word	0x0800ca61
 800c150:	0800c751 	.word	0x0800c751
 800c154:	0800ca61 	.word	0x0800ca61
 800c158:	0800ca61 	.word	0x0800ca61
 800c15c:	0800c871 	.word	0x0800c871
 800c160:	0800c8a5 	.word	0x0800c8a5
 800c164:	0800c935 	.word	0x0800c935
 800c168:	0800c9ad 	.word	0x0800c9ad
                break;
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800c16c:	2005      	movs	r0, #5
 800c16e:	f003 ff65 	bl	801003c <LoRaMacConfirmQueueIsCmdActive>
 800c172:	4603      	mov	r3, r0
 800c174:	2b00      	cmp	r3, #0
 800c176:	f000 845c 	beq.w	800ca32 <ProcessMacCommands+0x98e>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800c17a:	2105      	movs	r1, #5
 800c17c:	2000      	movs	r0, #0
 800c17e:	f003 fed1 	bl	800ff24 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800c182:	78fb      	ldrb	r3, [r7, #3]
 800c184:	1c5a      	adds	r2, r3, #1
 800c186:	70fa      	strb	r2, [r7, #3]
 800c188:	461a      	mov	r2, r3
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	4413      	add	r3, r2
 800c18e:	781a      	ldrb	r2, [r3, #0]
 800c190:	4bb0      	ldr	r3, [pc, #704]	@ (800c454 <ProcessMacCommands+0x3b0>)
 800c192:	f883 245c 	strb.w	r2, [r3, #1116]	@ 0x45c
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800c196:	78fb      	ldrb	r3, [r7, #3]
 800c198:	1c5a      	adds	r2, r3, #1
 800c19a:	70fa      	strb	r2, [r7, #3]
 800c19c:	461a      	mov	r2, r3
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	4413      	add	r3, r2
 800c1a2:	781a      	ldrb	r2, [r3, #0]
 800c1a4:	4bab      	ldr	r3, [pc, #684]	@ (800c454 <ProcessMacCommands+0x3b0>)
 800c1a6:	f883 245d 	strb.w	r2, [r3, #1117]	@ 0x45d
                }
                break;
 800c1aa:	f000 bc42 	b.w	800ca32 <ProcessMacCommands+0x98e>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
                uint8_t linkAdrNbRep = 0;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
                }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                if( adrBlockFound == false )
 800c1c6:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800c1ca:	f083 0301 	eor.w	r3, r3, #1
 800c1ce:	b2db      	uxtb	r3, r3
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	f000 80a6 	beq.w	800c322 <ProcessMacCommands+0x27e>
                {
                    adrBlockFound = true;
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

                    do
                    {
                        // Fill parameter structure
                        linkAdrReq.Payload = &payload[macIndex - 1];
 800c1dc:	78fb      	ldrb	r3, [r7, #3]
 800c1de:	3b01      	subs	r3, #1
 800c1e0:	687a      	ldr	r2, [r7, #4]
 800c1e2:	4413      	add	r3, r2
 800c1e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800c1e6:	4b9c      	ldr	r3, [pc, #624]	@ (800c458 <ProcessMacCommands+0x3b4>)
 800c1e8:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800c1ec:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800c1f0:	4b99      	ldr	r3, [pc, #612]	@ (800c458 <ProcessMacCommands+0x3b4>)
 800c1f2:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800c1f6:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800c1fa:	4b97      	ldr	r3, [pc, #604]	@ (800c458 <ProcessMacCommands+0x3b4>)
 800c1fc:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800c200:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800c204:	4b94      	ldr	r3, [pc, #592]	@ (800c458 <ProcessMacCommands+0x3b4>)
 800c206:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800c20a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800c20e:	4b92      	ldr	r3, [pc, #584]	@ (800c458 <ProcessMacCommands+0x3b4>)
 800c210:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800c214:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 800c218:	4b8f      	ldr	r3, [pc, #572]	@ (800c458 <ProcessMacCommands+0x3b4>)
 800c21a:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 800c21e:	65bb      	str	r3, [r7, #88]	@ 0x58

                        // There is a fundamental difference in reporting the status
                        // of the LinkAdrRequests when ADR is on or off. When ADR is on, every
                        // LinkAdrAns contains the same value. This does not hold when ADR is off,
                        // where every LinkAdrAns requires an individual status.
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800c220:	4b8d      	ldr	r3, [pc, #564]	@ (800c458 <ProcessMacCommands+0x3b4>)
 800c222:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800c226:	2b00      	cmp	r3, #0
 800c228:	d008      	beq.n	800c23c <ProcessMacCommands+0x198>
                        {
                            // When ADR is on, the function RegionLinkAdrReq will take care
                            // about the parsing and interpretation of the LinkAdrRequest block and
                            // it provides one status which shall be applied to every LinkAdrAns
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800c22a:	78ba      	ldrb	r2, [r7, #2]
 800c22c:	78fb      	ldrb	r3, [r7, #3]
 800c22e:	1ad3      	subs	r3, r2, r3
 800c230:	b2db      	uxtb	r3, r3
 800c232:	3301      	adds	r3, #1
 800c234:	b2db      	uxtb	r3, r3
 800c236:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
 800c23a:	e002      	b.n	800c242 <ProcessMacCommands+0x19e>
                            // When ADR is off, this function will loop over the individual LinkAdrRequests
                            // and will call RegionLinkAdrReq for each individually, as every request
                            // requires an individual answer.
                            // When ADR is off, the function RegionLinkAdrReq ignores the new values for
                            // ChannelsDatarate, ChannelsTxPower and ChannelsNbTrans.
                            linkAdrReq.PayloadSize = 5;
 800c23c:	2305      	movs	r3, #5
 800c23e:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
                        }

                        // Process the ADR requests
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800c242:	4b85      	ldr	r3, [pc, #532]	@ (800c458 <ProcessMacCommands+0x3b4>)
 800c244:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800c248:	f107 0456 	add.w	r4, r7, #86	@ 0x56
 800c24c:	f107 0257 	add.w	r2, r7, #87	@ 0x57
 800c250:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800c254:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800c258:	9301      	str	r3, [sp, #4]
 800c25a:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 800c25e:	9300      	str	r3, [sp, #0]
 800c260:	4623      	mov	r3, r4
 800c262:	f005 fa5b 	bl	801171c <RegionLinkAdrReq>
 800c266:	4603      	mov	r3, r0
 800c268:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                                                &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                        if( ( status & 0x07 ) == 0x07 )
 800c26c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800c270:	f003 0307 	and.w	r3, r3, #7
 800c274:	2b07      	cmp	r3, #7
 800c276:	d119      	bne.n	800c2ac <ProcessMacCommands+0x208>
                        {
                            // Set the status that the datarate has been increased
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 800c278:	4b77      	ldr	r3, [pc, #476]	@ (800c458 <ProcessMacCommands+0x3b4>)
 800c27a:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 800c27e:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800c282:	429a      	cmp	r2, r3
 800c284:	da03      	bge.n	800c28e <ProcessMacCommands+0x1ea>
                            {
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 800c286:	4b74      	ldr	r3, [pc, #464]	@ (800c458 <ProcessMacCommands+0x3b4>)
 800c288:	2201      	movs	r2, #1
 800c28a:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
                            }
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800c28e:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 800c292:	4b71      	ldr	r3, [pc, #452]	@ (800c458 <ProcessMacCommands+0x3b4>)
 800c294:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800c298:	f997 2056 	ldrsb.w	r2, [r7, #86]	@ 0x56
 800c29c:	4b6e      	ldr	r3, [pc, #440]	@ (800c458 <ProcessMacCommands+0x3b4>)
 800c29e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800c2a2:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800c2a6:	4b6c      	ldr	r3, [pc, #432]	@ (800c458 <ProcessMacCommands+0x3b4>)
 800c2a8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                        }

                        // Add the answers to the buffer
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 800c2b2:	e00b      	b.n	800c2cc <ProcessMacCommands+0x228>
                        {
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800c2b4:	f107 036b 	add.w	r3, r7, #107	@ 0x6b
 800c2b8:	2201      	movs	r2, #1
 800c2ba:	4619      	mov	r1, r3
 800c2bc:	2003      	movs	r0, #3
 800c2be:	f003 fb85 	bl	800f9cc <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800c2c2:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800c2c6:	3301      	adds	r3, #1
 800c2c8:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 800c2cc:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800c2d0:	4a62      	ldr	r2, [pc, #392]	@ (800c45c <ProcessMacCommands+0x3b8>)
 800c2d2:	fba2 2303 	umull	r2, r3, r2, r3
 800c2d6:	089b      	lsrs	r3, r3, #2
 800c2d8:	b2db      	uxtb	r3, r3
 800c2da:	f897 2086 	ldrb.w	r2, [r7, #134]	@ 0x86
 800c2de:	429a      	cmp	r2, r3
 800c2e0:	d3e8      	bcc.n	800c2b4 <ProcessMacCommands+0x210>
                        }
                        // Update MAC index
                        macIndex += linkAdrNbBytesParsed - 1;
 800c2e2:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800c2e6:	78fb      	ldrb	r3, [r7, #3]
 800c2e8:	4413      	add	r3, r2
 800c2ea:	b2db      	uxtb	r3, r3
 800c2ec:	3b01      	subs	r3, #1
 800c2ee:	70fb      	strb	r3, [r7, #3]

                        // Check to prevent invalid access
                        if( macIndex >= commandsSize )
 800c2f0:	78fa      	ldrb	r2, [r7, #3]
 800c2f2:	78bb      	ldrb	r3, [r7, #2]
 800c2f4:	429a      	cmp	r2, r3
 800c2f6:	d20a      	bcs.n	800c30e <ProcessMacCommands+0x26a>
                            break;

                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 800c2f8:	78fb      	ldrb	r3, [r7, #3]
 800c2fa:	1c5a      	adds	r2, r3, #1
 800c2fc:	70fa      	strb	r2, [r7, #3]
 800c2fe:	461a      	mov	r2, r3
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	4413      	add	r3, r2
 800c304:	781b      	ldrb	r3, [r3, #0]
 800c306:	2b03      	cmp	r3, #3
 800c308:	f43f af68 	beq.w	800c1dc <ProcessMacCommands+0x138>
 800c30c:	e000      	b.n	800c310 <ProcessMacCommands+0x26c>
                            break;
 800c30e:	bf00      	nop

                    if( macIndex < commandsSize )
 800c310:	78fa      	ldrb	r2, [r7, #3]
 800c312:	78bb      	ldrb	r3, [r7, #2]
 800c314:	429a      	cmp	r2, r3
 800c316:	f080 838e 	bcs.w	800ca36 <ProcessMacCommands+0x992>
                    {
                        // Decrease the index such that it points to the next MAC command
                        macIndex--;
 800c31a:	78fb      	ldrb	r3, [r7, #3]
 800c31c:	3b01      	subs	r3, #1
 800c31e:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 800c320:	e389      	b.n	800ca36 <ProcessMacCommands+0x992>
                    macIndex += 4;
 800c322:	78fb      	ldrb	r3, [r7, #3]
 800c324:	3304      	adds	r3, #4
 800c326:	70fb      	strb	r3, [r7, #3]
                break;
 800c328:	e385      	b.n	800ca36 <ProcessMacCommands+0x992>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800c32a:	78fb      	ldrb	r3, [r7, #3]
 800c32c:	1c5a      	adds	r2, r3, #1
 800c32e:	70fa      	strb	r2, [r7, #3]
 800c330:	461a      	mov	r2, r3
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	4413      	add	r3, r2
 800c336:	781b      	ldrb	r3, [r3, #0]
 800c338:	f003 030f 	and.w	r3, r3, #15
 800c33c:	b2da      	uxtb	r2, r3
 800c33e:	4b46      	ldr	r3, [pc, #280]	@ (800c458 <ProcessMacCommands+0x3b4>)
 800c340:	f883 211b 	strb.w	r2, [r3, #283]	@ 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800c344:	4b44      	ldr	r3, [pc, #272]	@ (800c458 <ProcessMacCommands+0x3b4>)
 800c346:	f893 311b 	ldrb.w	r3, [r3, #283]	@ 0x11b
 800c34a:	461a      	mov	r2, r3
 800c34c:	2301      	movs	r3, #1
 800c34e:	4093      	lsls	r3, r2
 800c350:	b29a      	uxth	r2, r3
 800c352:	4b41      	ldr	r3, [pc, #260]	@ (800c458 <ProcessMacCommands+0x3b4>)
 800c354:	f8a3 2120 	strh.w	r2, [r3, #288]	@ 0x120
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800c358:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800c35c:	2200      	movs	r2, #0
 800c35e:	4619      	mov	r1, r3
 800c360:	2004      	movs	r0, #4
 800c362:	f003 fb33 	bl	800f9cc <LoRaMacCommandsAddCmd>
                break;
 800c366:	e371      	b.n	800ca4c <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800c368:	2307      	movs	r3, #7
 800c36a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800c36e:	78fb      	ldrb	r3, [r7, #3]
 800c370:	687a      	ldr	r2, [r7, #4]
 800c372:	4413      	add	r3, r2
 800c374:	781b      	ldrb	r3, [r3, #0]
 800c376:	091b      	lsrs	r3, r3, #4
 800c378:	b2db      	uxtb	r3, r3
 800c37a:	b25b      	sxtb	r3, r3
 800c37c:	f003 0307 	and.w	r3, r3, #7
 800c380:	b25b      	sxtb	r3, r3
 800c382:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800c386:	78fb      	ldrb	r3, [r7, #3]
 800c388:	687a      	ldr	r2, [r7, #4]
 800c38a:	4413      	add	r3, r2
 800c38c:	781b      	ldrb	r3, [r3, #0]
 800c38e:	b25b      	sxtb	r3, r3
 800c390:	f003 030f 	and.w	r3, r3, #15
 800c394:	b25b      	sxtb	r3, r3
 800c396:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
                macIndex++;
 800c39a:	78fb      	ldrb	r3, [r7, #3]
 800c39c:	3301      	adds	r3, #1
 800c39e:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800c3a0:	78fb      	ldrb	r3, [r7, #3]
 800c3a2:	1c5a      	adds	r2, r3, #1
 800c3a4:	70fa      	strb	r2, [r7, #3]
 800c3a6:	461a      	mov	r2, r3
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	4413      	add	r3, r2
 800c3ac:	781b      	ldrb	r3, [r3, #0]
 800c3ae:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800c3b0:	78fb      	ldrb	r3, [r7, #3]
 800c3b2:	1c5a      	adds	r2, r3, #1
 800c3b4:	70fa      	strb	r2, [r7, #3]
 800c3b6:	461a      	mov	r2, r3
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	4413      	add	r3, r2
 800c3bc:	781b      	ldrb	r3, [r3, #0]
 800c3be:	021a      	lsls	r2, r3, #8
 800c3c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c3c2:	4313      	orrs	r3, r2
 800c3c4:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800c3c6:	78fb      	ldrb	r3, [r7, #3]
 800c3c8:	1c5a      	adds	r2, r3, #1
 800c3ca:	70fa      	strb	r2, [r7, #3]
 800c3cc:	461a      	mov	r2, r3
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	4413      	add	r3, r2
 800c3d2:	781b      	ldrb	r3, [r3, #0]
 800c3d4:	041a      	lsls	r2, r3, #16
 800c3d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c3d8:	4313      	orrs	r3, r2
 800c3da:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency *= 100;
 800c3dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c3de:	2264      	movs	r2, #100	@ 0x64
 800c3e0:	fb02 f303 	mul.w	r3, r2, r3
 800c3e4:	653b      	str	r3, [r7, #80]	@ 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800c3e6:	4b1c      	ldr	r3, [pc, #112]	@ (800c458 <ProcessMacCommands+0x3b4>)
 800c3e8:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800c3ec:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800c3f0:	4611      	mov	r1, r2
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	f005 f9b9 	bl	801176a <RegionRxParamSetupReq>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( status & 0x07 ) == 0x07 )
 800c3fe:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800c402:	f003 0307 	and.w	r3, r3, #7
 800c406:	2b07      	cmp	r3, #7
 800c408:	d117      	bne.n	800c43a <ProcessMacCommands+0x396>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800c40a:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 800c40e:	b2da      	uxtb	r2, r3
 800c410:	4b11      	ldr	r3, [pc, #68]	@ (800c458 <ProcessMacCommands+0x3b4>)
 800c412:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800c416:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 800c41a:	b2da      	uxtb	r2, r3
 800c41c:	4b0e      	ldr	r3, [pc, #56]	@ (800c458 <ProcessMacCommands+0x3b4>)
 800c41e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800c422:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c424:	4a0c      	ldr	r2, [pc, #48]	@ (800c458 <ProcessMacCommands+0x3b4>)
 800c426:	66d3      	str	r3, [r2, #108]	@ 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800c428:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c42a:	4a0b      	ldr	r2, [pc, #44]	@ (800c458 <ProcessMacCommands+0x3b4>)
 800c42c:	6753      	str	r3, [r2, #116]	@ 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800c42e:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 800c432:	b2da      	uxtb	r2, r3
 800c434:	4b08      	ldr	r3, [pc, #32]	@ (800c458 <ProcessMacCommands+0x3b4>)
 800c436:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
                }
                macCmdPayload[0] = status;
 800c43a:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800c43e:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800c442:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800c446:	2201      	movs	r2, #1
 800c448:	4619      	mov	r1, r3
 800c44a:	2005      	movs	r0, #5
 800c44c:	f003 fabe 	bl	800f9cc <LoRaMacCommandsAddCmd>
                break;
 800c450:	e2fc      	b.n	800ca4c <ProcessMacCommands+0x9a8>
 800c452:	bf00      	nop
 800c454:	20000a28 	.word	0x20000a28
 800c458:	20008000 	.word	0x20008000
 800c45c:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800c460:	23ff      	movs	r3, #255	@ 0xff
 800c462:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800c466:	4bb7      	ldr	r3, [pc, #732]	@ (800c744 <ProcessMacCommands+0x6a0>)
 800c468:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d00d      	beq.n	800c48c <ProcessMacCommands+0x3e8>
 800c470:	4bb4      	ldr	r3, [pc, #720]	@ (800c744 <ProcessMacCommands+0x6a0>)
 800c472:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d007      	beq.n	800c48c <ProcessMacCommands+0x3e8>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800c47c:	4bb1      	ldr	r3, [pc, #708]	@ (800c744 <ProcessMacCommands+0x6a0>)
 800c47e:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	4798      	blx	r3
 800c486:	4603      	mov	r3, r0
 800c488:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                }
                macCmdPayload[0] = batteryLevel;
 800c48c:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800c490:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800c494:	787b      	ldrb	r3, [r7, #1]
 800c496:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c49a:	b2db      	uxtb	r3, r3
 800c49c:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800c4a0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800c4a4:	2202      	movs	r2, #2
 800c4a6:	4619      	mov	r1, r3
 800c4a8:	2006      	movs	r0, #6
 800c4aa:	f003 fa8f 	bl	800f9cc <LoRaMacCommandsAddCmd>
                break;
 800c4ae:	e2cd      	b.n	800ca4c <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800c4b0:	2303      	movs	r3, #3
 800c4b2:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 800c4b6:	78fb      	ldrb	r3, [r7, #3]
 800c4b8:	1c5a      	adds	r2, r3, #1
 800c4ba:	70fa      	strb	r2, [r7, #3]
 800c4bc:	461a      	mov	r2, r3
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	4413      	add	r3, r2
 800c4c2:	781b      	ldrb	r3, [r3, #0]
 800c4c4:	b25b      	sxtb	r3, r3
 800c4c6:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
                newChannelReq.NewChannel = &chParam;
 800c4ca:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800c4ce:	647b      	str	r3, [r7, #68]	@ 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800c4d0:	78fb      	ldrb	r3, [r7, #3]
 800c4d2:	1c5a      	adds	r2, r3, #1
 800c4d4:	70fa      	strb	r2, [r7, #3]
 800c4d6:	461a      	mov	r2, r3
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	4413      	add	r3, r2
 800c4dc:	781b      	ldrb	r3, [r3, #0]
 800c4de:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800c4e0:	78fb      	ldrb	r3, [r7, #3]
 800c4e2:	1c5a      	adds	r2, r3, #1
 800c4e4:	70fa      	strb	r2, [r7, #3]
 800c4e6:	461a      	mov	r2, r3
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	4413      	add	r3, r2
 800c4ec:	781b      	ldrb	r3, [r3, #0]
 800c4ee:	021a      	lsls	r2, r3, #8
 800c4f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4f2:	4313      	orrs	r3, r2
 800c4f4:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800c4f6:	78fb      	ldrb	r3, [r7, #3]
 800c4f8:	1c5a      	adds	r2, r3, #1
 800c4fa:	70fa      	strb	r2, [r7, #3]
 800c4fc:	461a      	mov	r2, r3
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	4413      	add	r3, r2
 800c502:	781b      	ldrb	r3, [r3, #0]
 800c504:	041a      	lsls	r2, r3, #16
 800c506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c508:	4313      	orrs	r3, r2
 800c50a:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency *= 100;
 800c50c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c50e:	2264      	movs	r2, #100	@ 0x64
 800c510:	fb02 f303 	mul.w	r3, r2, r3
 800c514:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Rx1Frequency = 0;
 800c516:	2300      	movs	r3, #0
 800c518:	63fb      	str	r3, [r7, #60]	@ 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 800c51a:	78fb      	ldrb	r3, [r7, #3]
 800c51c:	1c5a      	adds	r2, r3, #1
 800c51e:	70fa      	strb	r2, [r7, #3]
 800c520:	461a      	mov	r2, r3
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	4413      	add	r3, r2
 800c526:	781b      	ldrb	r3, [r3, #0]
 800c528:	b25b      	sxtb	r3, r3
 800c52a:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800c52e:	4b86      	ldr	r3, [pc, #536]	@ (800c748 <ProcessMacCommands+0x6a4>)
 800c530:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800c534:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800c538:	4611      	mov	r1, r2
 800c53a:	4618      	mov	r0, r3
 800c53c:	f005 f930 	bl	80117a0 <RegionNewChannelReq>
 800c540:	4603      	mov	r3, r0
 800c542:	b2db      	uxtb	r3, r3
 800c544:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 800c548:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800c54c:	b25b      	sxtb	r3, r3
 800c54e:	2b00      	cmp	r3, #0
 800c550:	f2c0 8273 	blt.w	800ca3a <ProcessMacCommands+0x996>
                {
                    macCmdPayload[0] = status;
 800c554:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800c558:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800c55c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800c560:	2201      	movs	r2, #1
 800c562:	4619      	mov	r1, r3
 800c564:	2007      	movs	r0, #7
 800c566:	f003 fa31 	bl	800f9cc <LoRaMacCommandsAddCmd>
                }
                break;
 800c56a:	e266      	b.n	800ca3a <ProcessMacCommands+0x996>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800c56c:	78fb      	ldrb	r3, [r7, #3]
 800c56e:	1c5a      	adds	r2, r3, #1
 800c570:	70fa      	strb	r2, [r7, #3]
 800c572:	461a      	mov	r2, r3
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	4413      	add	r3, r2
 800c578:	781b      	ldrb	r3, [r3, #0]
 800c57a:	f003 030f 	and.w	r3, r3, #15
 800c57e:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84

                if( delay == 0 )
 800c582:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800c586:	2b00      	cmp	r3, #0
 800c588:	d104      	bne.n	800c594 <ProcessMacCommands+0x4f0>
                {
                    delay++;
 800c58a:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800c58e:	3301      	adds	r3, #1
 800c590:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800c594:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800c598:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c59c:	fb02 f303 	mul.w	r3, r2, r3
 800c5a0:	461a      	mov	r2, r3
 800c5a2:	4b69      	ldr	r3, [pc, #420]	@ (800c748 <ProcessMacCommands+0x6a4>)
 800c5a4:	659a      	str	r2, [r3, #88]	@ 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800c5a6:	4b68      	ldr	r3, [pc, #416]	@ (800c748 <ProcessMacCommands+0x6a4>)
 800c5a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c5aa:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800c5ae:	4a66      	ldr	r2, [pc, #408]	@ (800c748 <ProcessMacCommands+0x6a4>)
 800c5b0:	65d3      	str	r3, [r2, #92]	@ 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800c5b2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	4619      	mov	r1, r3
 800c5ba:	2008      	movs	r0, #8
 800c5bc:	f003 fa06 	bl	800f9cc <LoRaMacCommandsAddCmd>
                break;
 800c5c0:	e244      	b.n	800ca4c <ProcessMacCommands+0x9a8>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800c5c2:	78fb      	ldrb	r3, [r7, #3]
 800c5c4:	1c5a      	adds	r2, r3, #1
 800c5c6:	70fa      	strb	r2, [r7, #3]
 800c5c8:	461a      	mov	r2, r3
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	4413      	add	r3, r2
 800c5ce:	781b      	ldrb	r3, [r3, #0]
 800c5d0:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 800c5da:	2300      	movs	r3, #0
 800c5dc:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800c5e0:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800c5e4:	f003 0320 	and.w	r3, r3, #32
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d002      	beq.n	800c5f2 <ProcessMacCommands+0x54e>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800c5ec:	2301      	movs	r3, #1
 800c5ee:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800c5f2:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800c5f6:	f003 0310 	and.w	r3, r3, #16
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d002      	beq.n	800c604 <ProcessMacCommands+0x560>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800c5fe:	2301      	movs	r3, #1
 800c600:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800c604:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800c608:	f003 030f 	and.w	r3, r3, #15
 800c60c:	b2db      	uxtb	r3, r3
 800c60e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800c612:	4b4d      	ldr	r3, [pc, #308]	@ (800c748 <ProcessMacCommands+0x6a4>)
 800c614:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800c618:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800c61c:	4611      	mov	r1, r2
 800c61e:	4618      	mov	r0, r3
 800c620:	f005 f8d9 	bl	80117d6 <RegionTxParamSetupReq>
 800c624:	4603      	mov	r3, r0
 800c626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c62a:	f000 8208 	beq.w	800ca3e <ProcessMacCommands+0x99a>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800c62e:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 800c632:	4b45      	ldr	r3, [pc, #276]	@ (800c748 <ProcessMacCommands+0x6a4>)
 800c634:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800c638:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 800c63c:	4b42      	ldr	r3, [pc, #264]	@ (800c748 <ProcessMacCommands+0x6a4>)
 800c63e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800c642:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800c646:	461a      	mov	r2, r3
 800c648:	4b40      	ldr	r3, [pc, #256]	@ (800c74c <ProcessMacCommands+0x6a8>)
 800c64a:	5c9b      	ldrb	r3, [r3, r2]
 800c64c:	4618      	mov	r0, r3
 800c64e:	f7f4 f911 	bl	8000874 <__aeabi_ui2f>
 800c652:	4603      	mov	r3, r0
 800c654:	4a3c      	ldr	r2, [pc, #240]	@ (800c748 <ProcessMacCommands+0x6a4>)
 800c656:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800c65a:	2302      	movs	r3, #2
 800c65c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800c660:	4b39      	ldr	r3, [pc, #228]	@ (800c748 <ProcessMacCommands+0x6a4>)
 800c662:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800c666:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c66a:	4b37      	ldr	r3, [pc, #220]	@ (800c748 <ProcessMacCommands+0x6a4>)
 800c66c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800c670:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800c674:	4611      	mov	r1, r2
 800c676:	4618      	mov	r0, r3
 800c678:	f004 ff4d 	bl	8011516 <RegionGetPhyParam>
 800c67c:	4603      	mov	r3, r0
 800c67e:	62bb      	str	r3, [r7, #40]	@ 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800c680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c682:	b25a      	sxtb	r2, r3
 800c684:	4b30      	ldr	r3, [pc, #192]	@ (800c748 <ProcessMacCommands+0x6a4>)
 800c686:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800c68a:	4293      	cmp	r3, r2
 800c68c:	bfb8      	it	lt
 800c68e:	4613      	movlt	r3, r2
 800c690:	b25a      	sxtb	r2, r3
 800c692:	4b2d      	ldr	r3, [pc, #180]	@ (800c748 <ProcessMacCommands+0x6a4>)
 800c694:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800c698:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800c69c:	2200      	movs	r2, #0
 800c69e:	4619      	mov	r1, r3
 800c6a0:	2009      	movs	r0, #9
 800c6a2:	f003 f993 	bl	800f9cc <LoRaMacCommandsAddCmd>
                }
                break;
 800c6a6:	e1ca      	b.n	800ca3e <ProcessMacCommands+0x99a>
            }
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 800c6a8:	2303      	movs	r3, #3
 800c6aa:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 800c6ae:	78fb      	ldrb	r3, [r7, #3]
 800c6b0:	1c5a      	adds	r2, r3, #1
 800c6b2:	70fa      	strb	r2, [r7, #3]
 800c6b4:	461a      	mov	r2, r3
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	4413      	add	r3, r2
 800c6ba:	781b      	ldrb	r3, [r3, #0]
 800c6bc:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800c6c0:	78fb      	ldrb	r3, [r7, #3]
 800c6c2:	1c5a      	adds	r2, r3, #1
 800c6c4:	70fa      	strb	r2, [r7, #3]
 800c6c6:	461a      	mov	r2, r3
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	4413      	add	r3, r2
 800c6cc:	781b      	ldrb	r3, [r3, #0]
 800c6ce:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800c6d0:	78fb      	ldrb	r3, [r7, #3]
 800c6d2:	1c5a      	adds	r2, r3, #1
 800c6d4:	70fa      	strb	r2, [r7, #3]
 800c6d6:	461a      	mov	r2, r3
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	4413      	add	r3, r2
 800c6dc:	781b      	ldrb	r3, [r3, #0]
 800c6de:	021a      	lsls	r2, r3, #8
 800c6e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6e2:	4313      	orrs	r3, r2
 800c6e4:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800c6e6:	78fb      	ldrb	r3, [r7, #3]
 800c6e8:	1c5a      	adds	r2, r3, #1
 800c6ea:	70fa      	strb	r2, [r7, #3]
 800c6ec:	461a      	mov	r2, r3
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	4413      	add	r3, r2
 800c6f2:	781b      	ldrb	r3, [r3, #0]
 800c6f4:	041a      	lsls	r2, r3, #16
 800c6f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6f8:	4313      	orrs	r3, r2
 800c6fa:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency *= 100;
 800c6fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6fe:	2264      	movs	r2, #100	@ 0x64
 800c700:	fb02 f303 	mul.w	r3, r2, r3
 800c704:	627b      	str	r3, [r7, #36]	@ 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800c706:	4b10      	ldr	r3, [pc, #64]	@ (800c748 <ProcessMacCommands+0x6a4>)
 800c708:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800c70c:	f107 0220 	add.w	r2, r7, #32
 800c710:	4611      	mov	r1, r2
 800c712:	4618      	mov	r0, r3
 800c714:	f005 f87a 	bl	801180c <RegionDlChannelReq>
 800c718:	4603      	mov	r3, r0
 800c71a:	b2db      	uxtb	r3, r3
 800c71c:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 800c720:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800c724:	b25b      	sxtb	r3, r3
 800c726:	2b00      	cmp	r3, #0
 800c728:	f2c0 818b 	blt.w	800ca42 <ProcessMacCommands+0x99e>
                {
                    macCmdPayload[0] = status;
 800c72c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800c730:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800c734:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800c738:	2201      	movs	r2, #1
 800c73a:	4619      	mov	r1, r3
 800c73c:	200a      	movs	r0, #10
 800c73e:	f003 f945 	bl	800f9cc <LoRaMacCommandsAddCmd>
                }
                break;
 800c742:	e17e      	b.n	800ca42 <ProcessMacCommands+0x99e>
 800c744:	20000a28 	.word	0x20000a28
 800c748:	20008000 	.word	0x20008000
 800c74c:	08020c98 	.word	0x08020c98
#endif /* LORAMAC_VERSION */
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800c750:	2009      	movs	r0, #9
 800c752:	f003 fc73 	bl	801003c <LoRaMacConfirmQueueIsCmdActive>
 800c756:	4603      	mov	r3, r0
 800c758:	2b00      	cmp	r3, #0
 800c75a:	f000 8084 	beq.w	800c866 <ProcessMacCommands+0x7c2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800c75e:	2109      	movs	r1, #9
 800c760:	2000      	movs	r0, #0
 800c762:	f003 fbdf 	bl	800ff24 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 800c766:	f107 0318 	add.w	r3, r7, #24
 800c76a:	2200      	movs	r2, #0
 800c76c:	601a      	str	r2, [r3, #0]
 800c76e:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 800c770:	f107 0310 	add.w	r3, r7, #16
 800c774:	2200      	movs	r2, #0
 800c776:	601a      	str	r2, [r3, #0]
 800c778:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 800c77a:	f107 0308 	add.w	r3, r7, #8
 800c77e:	2200      	movs	r2, #0
 800c780:	601a      	str	r2, [r3, #0]
 800c782:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800c784:	78fb      	ldrb	r3, [r7, #3]
 800c786:	1c5a      	adds	r2, r3, #1
 800c788:	70fa      	strb	r2, [r7, #3]
 800c78a:	461a      	mov	r2, r3
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	4413      	add	r3, r2
 800c790:	781b      	ldrb	r3, [r3, #0]
 800c792:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800c794:	78fb      	ldrb	r3, [r7, #3]
 800c796:	1c5a      	adds	r2, r3, #1
 800c798:	70fa      	strb	r2, [r7, #3]
 800c79a:	461a      	mov	r2, r3
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	4413      	add	r3, r2
 800c7a0:	781b      	ldrb	r3, [r3, #0]
 800c7a2:	021a      	lsls	r2, r3, #8
 800c7a4:	69bb      	ldr	r3, [r7, #24]
 800c7a6:	4313      	orrs	r3, r2
 800c7a8:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800c7aa:	78fb      	ldrb	r3, [r7, #3]
 800c7ac:	1c5a      	adds	r2, r3, #1
 800c7ae:	70fa      	strb	r2, [r7, #3]
 800c7b0:	461a      	mov	r2, r3
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	4413      	add	r3, r2
 800c7b6:	781b      	ldrb	r3, [r3, #0]
 800c7b8:	041a      	lsls	r2, r3, #16
 800c7ba:	69bb      	ldr	r3, [r7, #24]
 800c7bc:	4313      	orrs	r3, r2
 800c7be:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800c7c0:	78fb      	ldrb	r3, [r7, #3]
 800c7c2:	1c5a      	adds	r2, r3, #1
 800c7c4:	70fa      	strb	r2, [r7, #3]
 800c7c6:	461a      	mov	r2, r3
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	4413      	add	r3, r2
 800c7cc:	781b      	ldrb	r3, [r3, #0]
 800c7ce:	061a      	lsls	r2, r3, #24
 800c7d0:	69bb      	ldr	r3, [r7, #24]
 800c7d2:	4313      	orrs	r3, r2
 800c7d4:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800c7d6:	78fb      	ldrb	r3, [r7, #3]
 800c7d8:	1c5a      	adds	r2, r3, #1
 800c7da:	70fa      	strb	r2, [r7, #3]
 800c7dc:	461a      	mov	r2, r3
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	4413      	add	r3, r2
 800c7e2:	781b      	ldrb	r3, [r3, #0]
 800c7e4:	b21b      	sxth	r3, r3
 800c7e6:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800c7e8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800c7ec:	461a      	mov	r2, r3
 800c7ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c7f2:	fb02 f303 	mul.w	r3, r2, r3
 800c7f6:	121b      	asrs	r3, r3, #8
 800c7f8:	b21b      	sxth	r3, r3
 800c7fa:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 800c7fc:	f107 0310 	add.w	r3, r7, #16
 800c800:	f107 0218 	add.w	r2, r7, #24
 800c804:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c808:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800c80c:	693a      	ldr	r2, [r7, #16]
 800c80e:	4b96      	ldr	r3, [pc, #600]	@ (800ca68 <ProcessMacCommands+0x9c4>)
 800c810:	4413      	add	r3, r2
 800c812:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 800c814:	f107 0308 	add.w	r3, r7, #8
 800c818:	4618      	mov	r0, r3
 800c81a:	f00d fbe7 	bl	8019fec <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800c81e:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 800c822:	4b92      	ldr	r3, [pc, #584]	@ (800ca6c <ProcessMacCommands+0x9c8>)
 800c824:	f8d3 233c 	ldr.w	r2, [r3, #828]	@ 0x33c
 800c828:	9200      	str	r2, [sp, #0]
 800c82a:	f8d3 3338 	ldr.w	r3, [r3, #824]	@ 0x338
 800c82e:	f107 0210 	add.w	r2, r7, #16
 800c832:	ca06      	ldmia	r2, {r1, r2}
 800c834:	f00d fb73 	bl	8019f1e <SysTimeSub>
 800c838:	f107 0010 	add.w	r0, r7, #16
 800c83c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c83e:	9300      	str	r3, [sp, #0]
 800c840:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c842:	f107 0208 	add.w	r2, r7, #8
 800c846:	ca06      	ldmia	r2, {r1, r2}
 800c848:	f00d fb30 	bl	8019eac <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 800c84c:	f107 0310 	add.w	r3, r7, #16
 800c850:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c854:	f00d fb9c 	bl	8019f90 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800c858:	f002 ff56 	bl	800f708 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800c85c:	4b83      	ldr	r3, [pc, #524]	@ (800ca6c <ProcessMacCommands+0x9c8>)
 800c85e:	2201      	movs	r2, #1
 800c860:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 800c864:	e0f2      	b.n	800ca4c <ProcessMacCommands+0x9a8>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800c866:	4b81      	ldr	r3, [pc, #516]	@ (800ca6c <ProcessMacCommands+0x9c8>)
 800c868:	2200      	movs	r2, #0
 800c86a:	f883 2438 	strb.w	r2, [r3, #1080]	@ 0x438
                break;
 800c86e:	e0ed      	b.n	800ca4c <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800c870:	200c      	movs	r0, #12
 800c872:	f003 fbe3 	bl	801003c <LoRaMacConfirmQueueIsCmdActive>
 800c876:	4603      	mov	r3, r0
 800c878:	2b00      	cmp	r3, #0
 800c87a:	f000 80e4 	beq.w	800ca46 <ProcessMacCommands+0x9a2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800c87e:	210c      	movs	r1, #12
 800c880:	2000      	movs	r0, #0
 800c882:	f003 fb4f 	bl	800ff24 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800c886:	4b79      	ldr	r3, [pc, #484]	@ (800ca6c <ProcessMacCommands+0x9c8>)
 800c888:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800c88c:	2b04      	cmp	r3, #4
 800c88e:	f000 80da 	beq.w	800ca46 <ProcessMacCommands+0x9a2>
 800c892:	4b76      	ldr	r3, [pc, #472]	@ (800ca6c <ProcessMacCommands+0x9c8>)
 800c894:	f893 3490 	ldrb.w	r3, [r3, #1168]	@ 0x490
 800c898:	2b05      	cmp	r3, #5
 800c89a:	f000 80d4 	beq.w	800ca46 <ProcessMacCommands+0x9a2>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 800c89e:	f002 ff14 	bl	800f6ca <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 800c8a2:	e0d0      	b.n	800ca46 <ProcessMacCommands+0x9a2>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 800c8a4:	2303      	movs	r3, #3
 800c8a6:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                uint32_t frequency = 0;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	67bb      	str	r3, [r7, #120]	@ 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 800c8ae:	78fb      	ldrb	r3, [r7, #3]
 800c8b0:	1c5a      	adds	r2, r3, #1
 800c8b2:	70fa      	strb	r2, [r7, #3]
 800c8b4:	461a      	mov	r2, r3
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	4413      	add	r3, r2
 800c8ba:	781b      	ldrb	r3, [r3, #0]
 800c8bc:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800c8be:	78fb      	ldrb	r3, [r7, #3]
 800c8c0:	1c5a      	adds	r2, r3, #1
 800c8c2:	70fa      	strb	r2, [r7, #3]
 800c8c4:	461a      	mov	r2, r3
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	4413      	add	r3, r2
 800c8ca:	781b      	ldrb	r3, [r3, #0]
 800c8cc:	021b      	lsls	r3, r3, #8
 800c8ce:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800c8d0:	4313      	orrs	r3, r2
 800c8d2:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800c8d4:	78fb      	ldrb	r3, [r7, #3]
 800c8d6:	1c5a      	adds	r2, r3, #1
 800c8d8:	70fa      	strb	r2, [r7, #3]
 800c8da:	461a      	mov	r2, r3
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	4413      	add	r3, r2
 800c8e0:	781b      	ldrb	r3, [r3, #0]
 800c8e2:	041b      	lsls	r3, r3, #16
 800c8e4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800c8e6:	4313      	orrs	r3, r2
 800c8e8:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency *= 100;
 800c8ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c8ec:	2264      	movs	r2, #100	@ 0x64
 800c8ee:	fb02 f303 	mul.w	r3, r2, r3
 800c8f2:	67bb      	str	r3, [r7, #120]	@ 0x78
                datarate = payload[macIndex++] & 0x0F;
 800c8f4:	78fb      	ldrb	r3, [r7, #3]
 800c8f6:	1c5a      	adds	r2, r3, #1
 800c8f8:	70fa      	strb	r2, [r7, #3]
 800c8fa:	461a      	mov	r2, r3
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	4413      	add	r3, r2
 800c900:	781b      	ldrb	r3, [r3, #0]
 800c902:	f003 030f 	and.w	r3, r3, #15
 800c906:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800c90a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800c90e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800c910:	4618      	mov	r0, r3
 800c912:	f002 fee0 	bl	800f6d6 <LoRaMacClassBPingSlotChannelReq>
 800c916:	4603      	mov	r3, r0
 800c918:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                macCmdPayload[0] = status;
 800c91c:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 800c920:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 800c924:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800c928:	2201      	movs	r2, #1
 800c92a:	4619      	mov	r1, r3
 800c92c:	2011      	movs	r0, #17
 800c92e:	f003 f84d 	bl	800f9cc <LoRaMacCommandsAddCmd>
#endif /* LORAMAC_VERSION */
                break;
 800c932:	e08b      	b.n	800ca4c <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800c934:	200d      	movs	r0, #13
 800c936:	f003 fb81 	bl	801003c <LoRaMacConfirmQueueIsCmdActive>
 800c93a:	4603      	mov	r3, r0
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	f000 8084 	beq.w	800ca4a <ProcessMacCommands+0x9a6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800c942:	210d      	movs	r1, #13
 800c944:	2000      	movs	r0, #0
 800c946:	f003 faed 	bl	800ff24 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 800c94a:	2300      	movs	r3, #0
 800c94c:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    uint8_t beaconTimingChannel = 0;
 800c950:	2300      	movs	r3, #0
 800c952:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800c956:	78fb      	ldrb	r3, [r7, #3]
 800c958:	1c5a      	adds	r2, r3, #1
 800c95a:	70fa      	strb	r2, [r7, #3]
 800c95c:	461a      	mov	r2, r3
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	4413      	add	r3, r2
 800c962:	781b      	ldrb	r3, [r3, #0]
 800c964:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800c968:	78fb      	ldrb	r3, [r7, #3]
 800c96a:	1c5a      	adds	r2, r3, #1
 800c96c:	70fa      	strb	r2, [r7, #3]
 800c96e:	461a      	mov	r2, r3
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	4413      	add	r3, r2
 800c974:	781b      	ldrb	r3, [r3, #0]
 800c976:	021b      	lsls	r3, r3, #8
 800c978:	b21a      	sxth	r2, r3
 800c97a:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 800c97e:	4313      	orrs	r3, r2
 800c980:	b21b      	sxth	r3, r3
 800c982:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingChannel = payload[macIndex++];
 800c986:	78fb      	ldrb	r3, [r7, #3]
 800c988:	1c5a      	adds	r2, r3, #1
 800c98a:	70fa      	strb	r2, [r7, #3]
 800c98c:	461a      	mov	r2, r3
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	4413      	add	r3, r2
 800c992:	781b      	ldrb	r3, [r3, #0]
 800c994:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800c998:	4b35      	ldr	r3, [pc, #212]	@ (800ca70 <ProcessMacCommands+0x9cc>)
 800c99a:	681a      	ldr	r2, [r3, #0]
 800c99c:	f897 107d 	ldrb.w	r1, [r7, #125]	@ 0x7d
 800c9a0:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	f002 fea2 	bl	800f6ee <LoRaMacClassBBeaconTimingAns>
                }
                break;
 800c9aa:	e04e      	b.n	800ca4a <ProcessMacCommands+0x9a6>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 800c9b2:	78fb      	ldrb	r3, [r7, #3]
 800c9b4:	1c5a      	adds	r2, r3, #1
 800c9b6:	70fa      	strb	r2, [r7, #3]
 800c9b8:	461a      	mov	r2, r3
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	4413      	add	r3, r2
 800c9be:	781b      	ldrb	r3, [r3, #0]
 800c9c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800c9c4:	78fb      	ldrb	r3, [r7, #3]
 800c9c6:	1c5a      	adds	r2, r3, #1
 800c9c8:	70fa      	strb	r2, [r7, #3]
 800c9ca:	461a      	mov	r2, r3
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	4413      	add	r3, r2
 800c9d0:	781b      	ldrb	r3, [r3, #0]
 800c9d2:	021b      	lsls	r3, r3, #8
 800c9d4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c9d8:	4313      	orrs	r3, r2
 800c9da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800c9de:	78fb      	ldrb	r3, [r7, #3]
 800c9e0:	1c5a      	adds	r2, r3, #1
 800c9e2:	70fa      	strb	r2, [r7, #3]
 800c9e4:	461a      	mov	r2, r3
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	4413      	add	r3, r2
 800c9ea:	781b      	ldrb	r3, [r3, #0]
 800c9ec:	041b      	lsls	r3, r3, #16
 800c9ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c9f2:	4313      	orrs	r3, r2
 800c9f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency *= 100;
 800c9f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800c9fc:	2264      	movs	r2, #100	@ 0x64
 800c9fe:	fb02 f303 	mul.w	r3, r2, r3
 800ca02:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800ca06:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800ca0a:	f002 fe83 	bl	800f714 <LoRaMacClassBBeaconFreqReq>
 800ca0e:	4603      	mov	r3, r0
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d003      	beq.n	800ca1c <ProcessMacCommands+0x978>
                    {
                        macCmdPayload[0] = 1;
 800ca14:	2301      	movs	r3, #1
 800ca16:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
 800ca1a:	e002      	b.n	800ca22 <ProcessMacCommands+0x97e>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800ca22:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800ca26:	2201      	movs	r2, #1
 800ca28:	4619      	mov	r1, r3
 800ca2a:	2013      	movs	r0, #19
 800ca2c:	f002 ffce 	bl	800f9cc <LoRaMacCommandsAddCmd>
                }
                break;
 800ca30:	e00c      	b.n	800ca4c <ProcessMacCommands+0x9a8>
                break;
 800ca32:	bf00      	nop
 800ca34:	e00a      	b.n	800ca4c <ProcessMacCommands+0x9a8>
                break;
 800ca36:	bf00      	nop
 800ca38:	e008      	b.n	800ca4c <ProcessMacCommands+0x9a8>
                break;
 800ca3a:	bf00      	nop
 800ca3c:	e006      	b.n	800ca4c <ProcessMacCommands+0x9a8>
                break;
 800ca3e:	bf00      	nop
 800ca40:	e004      	b.n	800ca4c <ProcessMacCommands+0x9a8>
                break;
 800ca42:	bf00      	nop
 800ca44:	e002      	b.n	800ca4c <ProcessMacCommands+0x9a8>
                break;
 800ca46:	bf00      	nop
 800ca48:	e000      	b.n	800ca4c <ProcessMacCommands+0x9a8>
                break;
 800ca4a:	bf00      	nop
    while( macIndex < commandsSize )
 800ca4c:	78fa      	ldrb	r2, [r7, #3]
 800ca4e:	78bb      	ldrb	r3, [r7, #2]
 800ca50:	429a      	cmp	r2, r3
 800ca52:	f4ff ab49 	bcc.w	800c0e8 <ProcessMacCommands+0x44>
 800ca56:	e004      	b.n	800ca62 <ProcessMacCommands+0x9be>
        return;
 800ca58:	bf00      	nop
 800ca5a:	e002      	b.n	800ca62 <ProcessMacCommands+0x9be>
            return;
 800ca5c:	bf00      	nop
 800ca5e:	e000      	b.n	800ca62 <ProcessMacCommands+0x9be>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 800ca60:	bf00      	nop
        }
    }
}
 800ca62:	378c      	adds	r7, #140	@ 0x8c
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bd90      	pop	{r4, r7, pc}
 800ca68:	12d53d80 	.word	0x12d53d80
 800ca6c:	20000a28 	.word	0x20000a28
 800ca70:	20000fdc 	.word	0x20000fdc

0800ca74 <Send>:

static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b08e      	sub	sp, #56	@ 0x38
 800ca78:	af02      	add	r7, sp, #8
 800ca7a:	60f8      	str	r0, [r7, #12]
 800ca7c:	607a      	str	r2, [r7, #4]
 800ca7e:	461a      	mov	r2, r3
 800ca80:	460b      	mov	r3, r1
 800ca82:	72fb      	strb	r3, [r7, #11]
 800ca84:	4613      	mov	r3, r2
 800ca86:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ca88:	2303      	movs	r3, #3
 800ca8a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800ca8e:	4b66      	ldr	r3, [pc, #408]	@ (800cc28 <Send+0x1b4>)
 800ca90:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800ca94:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800ca98:	4b63      	ldr	r3, [pc, #396]	@ (800cc28 <Send+0x1b4>)
 800ca9a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ca9e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800caa2:	4b61      	ldr	r3, [pc, #388]	@ (800cc28 <Send+0x1b4>)
 800caa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800caa6:	62bb      	str	r3, [r7, #40]	@ 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800caa8:	4b5f      	ldr	r3, [pc, #380]	@ (800cc28 <Send+0x1b4>)
 800caaa:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d101      	bne.n	800cab6 <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800cab2:	2307      	movs	r3, #7
 800cab4:	e0b4      	b.n	800cc20 <Send+0x1ac>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800cab6:	4b5c      	ldr	r3, [pc, #368]	@ (800cc28 <Send+0x1b4>)
 800cab8:	f893 311b 	ldrb.w	r3, [r3, #283]	@ 0x11b
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d102      	bne.n	800cac6 <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800cac0:	4b59      	ldr	r3, [pc, #356]	@ (800cc28 <Send+0x1b4>)
 800cac2:	2200      	movs	r2, #0
 800cac4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    fCtrl.Value = 0;
 800cac6:	2300      	movs	r3, #0
 800cac8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 800cacc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800cad0:	f023 030f 	bic.w	r3, r3, #15
 800cad4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800cad8:	4b53      	ldr	r3, [pc, #332]	@ (800cc28 <Send+0x1b4>)
 800cada:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 800cade:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800cae2:	f362 13c7 	bfi	r3, r2, #7, #1
 800cae6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800caea:	4b4f      	ldr	r3, [pc, #316]	@ (800cc28 <Send+0x1b4>)
 800caec:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800caf0:	2b01      	cmp	r3, #1
 800caf2:	d106      	bne.n	800cb02 <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 800caf4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800caf8:	f043 0310 	orr.w	r3, r3, #16
 800cafc:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 800cb00:	e005      	b.n	800cb0e <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 800cb02:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800cb06:	f023 0310 	bic.w	r3, r3, #16
 800cb0a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800cb0e:	4b46      	ldr	r3, [pc, #280]	@ (800cc28 <Send+0x1b4>)
 800cb10:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d005      	beq.n	800cb24 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 800cb18:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800cb1c:	f043 0320 	orr.w	r3, r3, #32
 800cb20:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // ADR next request
    adrNext.UpdateChanMask = true;
 800cb24:	2301      	movs	r3, #1
 800cb26:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800cb28:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800cb2c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800cb30:	b2db      	uxtb	r3, r3
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	bf14      	ite	ne
 800cb36:	2301      	movne	r3, #1
 800cb38:	2300      	moveq	r3, #0
 800cb3a:	b2db      	uxtb	r3, r3
 800cb3c:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800cb3e:	4b3a      	ldr	r3, [pc, #232]	@ (800cc28 <Send+0x1b4>)
 800cb40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb42:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800cb44:	4b38      	ldr	r3, [pc, #224]	@ (800cc28 <Send+0x1b4>)
 800cb46:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 800cb4a:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800cb4c:	4b36      	ldr	r3, [pc, #216]	@ (800cc28 <Send+0x1b4>)
 800cb4e:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 800cb52:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800cb54:	4b34      	ldr	r3, [pc, #208]	@ (800cc28 <Send+0x1b4>)
 800cb56:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800cb5a:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800cb5e:	4b32      	ldr	r3, [pc, #200]	@ (800cc28 <Send+0x1b4>)
 800cb60:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800cb64:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800cb68:	4b2f      	ldr	r3, [pc, #188]	@ (800cc28 <Send+0x1b4>)
 800cb6a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800cb6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 800cb72:	4b2d      	ldr	r3, [pc, #180]	@ (800cc28 <Send+0x1b4>)
 800cb74:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800cb78:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800cb7c:	4b2a      	ldr	r3, [pc, #168]	@ (800cc28 <Send+0x1b4>)
 800cb7e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800cb82:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800cb86:	f107 0014 	add.w	r0, r7, #20
 800cb8a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800cb8e:	9300      	str	r3, [sp, #0]
 800cb90:	4b26      	ldr	r3, [pc, #152]	@ (800cc2c <Send+0x1b8>)
 800cb92:	4a27      	ldr	r2, [pc, #156]	@ (800cc30 <Send+0x1bc>)
 800cb94:	4927      	ldr	r1, [pc, #156]	@ (800cc34 <Send+0x1c0>)
 800cb96:	f002 fc37 	bl	800f408 <LoRaMacAdrCalcNext>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	461a      	mov	r2, r3
 800cb9e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800cba2:	f362 1386 	bfi	r3, r2, #6, #1
 800cba6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800cbaa:	7afa      	ldrb	r2, [r7, #11]
 800cbac:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800cbb0:	893b      	ldrh	r3, [r7, #8]
 800cbb2:	9300      	str	r3, [sp, #0]
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	68f8      	ldr	r0, [r7, #12]
 800cbb8:	f000 fc72 	bl	800d4a0 <PrepareFrame>
 800cbbc:	4603      	mov	r3, r0
 800cbbe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800cbc2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d003      	beq.n	800cbd2 <Send+0x15e>
 800cbca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cbce:	2b0a      	cmp	r3, #10
 800cbd0:	d107      	bne.n	800cbe2 <Send+0x16e>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx );
 800cbd2:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f000 f962 	bl	800cea0 <ScheduleTx>
 800cbdc:	4603      	mov	r3, r0
 800cbde:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 800cbe2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d00a      	beq.n	800cc00 <Send+0x18c>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800cbea:	4a0f      	ldr	r2, [pc, #60]	@ (800cc28 <Send+0x1b4>)
 800cbec:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800cbf0:	f882 3039 	strb.w	r3, [r2, #57]	@ 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800cbf4:	4a0c      	ldr	r2, [pc, #48]	@ (800cc28 <Send+0x1b4>)
 800cbf6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800cbfa:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
 800cbfe:	e00d      	b.n	800cc1c <Send+0x1a8>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 800cc00:	4b09      	ldr	r3, [pc, #36]	@ (800cc28 <Send+0x1b4>)
 800cc02:	2200      	movs	r2, #0
 800cc04:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800cc08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc0a:	4a07      	ldr	r2, [pc, #28]	@ (800cc28 <Send+0x1b4>)
 800cc0c:	6293      	str	r3, [r2, #40]	@ 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800cc0e:	f002 ff83 	bl	800fb18 <LoRaMacCommandsRemoveNoneStickyCmds>
 800cc12:	4603      	mov	r3, r0
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d001      	beq.n	800cc1c <Send+0x1a8>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800cc18:	2313      	movs	r3, #19
 800cc1a:	e001      	b.n	800cc20 <Send+0x1ac>
        }
    }
    return status;
 800cc1c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800cc20:	4618      	mov	r0, r3
 800cc22:	3730      	adds	r7, #48	@ 0x30
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}
 800cc28:	20008000 	.word	0x20008000
 800cc2c:	20008068 	.word	0x20008068
 800cc30:	20008038 	.word	0x20008038
 800cc34:	20008039 	.word	0x20008039

0800cc38 <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b084      	sub	sp, #16
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	4603      	mov	r3, r0
 800cc40:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800cc42:	2300      	movs	r3, #0
 800cc44:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 800cc46:	2300      	movs	r3, #0
 800cc48:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 800cc4a:	2301      	movs	r3, #1
 800cc4c:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 800cc4e:	79fb      	ldrb	r3, [r7, #7]
 800cc50:	2bff      	cmp	r3, #255	@ 0xff
 800cc52:	d11f      	bne.n	800cc94 <SendReJoinReq+0x5c>
            break;
        }
#endif /* LORAMAC_VERSION */
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 800cc54:	2000      	movs	r0, #0
 800cc56:	f7ff f8eb 	bl	800be30 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800cc5a:	4b15      	ldr	r3, [pc, #84]	@ (800ccb0 <SendReJoinReq+0x78>)
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800cc62:	4b13      	ldr	r3, [pc, #76]	@ (800ccb0 <SendReJoinReq+0x78>)
 800cc64:	4a13      	ldr	r2, [pc, #76]	@ (800ccb4 <SendReJoinReq+0x7c>)
 800cc66:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800cc6a:	4b11      	ldr	r3, [pc, #68]	@ (800ccb0 <SendReJoinReq+0x78>)
 800cc6c:	22ff      	movs	r2, #255	@ 0xff
 800cc6e:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 800cc72:	7b3b      	ldrb	r3, [r7, #12]
 800cc74:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 800cc78:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800cc7a:	7b3a      	ldrb	r2, [r7, #12]
 800cc7c:	4b0c      	ldr	r3, [pc, #48]	@ (800ccb0 <SendReJoinReq+0x78>)
 800cc7e:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d

            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 800cc82:	480d      	ldr	r0, [pc, #52]	@ (800ccb8 <SendReJoinReq+0x80>)
 800cc84:	f009 fe64 	bl	8016950 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 800cc88:	480c      	ldr	r0, [pc, #48]	@ (800ccbc <SendReJoinReq+0x84>)
 800cc8a:	f009 fe17 	bl	80168bc <SecureElementGetDevEui>

            allowDelayedTx = false;
 800cc8e:	2300      	movs	r3, #0
 800cc90:	73fb      	strb	r3, [r7, #15]

            break;
 800cc92:	e002      	b.n	800cc9a <SendReJoinReq+0x62>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800cc94:	2302      	movs	r3, #2
 800cc96:	73bb      	strb	r3, [r7, #14]
            break;
 800cc98:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 800cc9a:	7bfb      	ldrb	r3, [r7, #15]
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	f000 f8ff 	bl	800cea0 <ScheduleTx>
 800cca2:	4603      	mov	r3, r0
 800cca4:	73bb      	strb	r3, [r7, #14]
    return status;
 800cca6:	7bbb      	ldrb	r3, [r7, #14]
}
 800cca8:	4618      	mov	r0, r3
 800ccaa:	3710      	adds	r7, #16
 800ccac:	46bd      	mov	sp, r7
 800ccae:	bd80      	pop	{r7, pc}
 800ccb0:	20000a28 	.word	0x20000a28
 800ccb4:	20000a2a 	.word	0x20000a2a
 800ccb8:	20000b36 	.word	0x20000b36
 800ccbc:	20000b3e 	.word	0x20000b3e

0800ccc0 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800ccc4:	f002 fcb0 	bl	800f628 <LoRaMacClassBIsBeaconExpected>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d001      	beq.n	800ccd2 <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800ccce:	230e      	movs	r3, #14
 800ccd0:	e013      	b.n	800ccfa <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800ccd2:	4b0b      	ldr	r3, [pc, #44]	@ (800cd00 <CheckForClassBCollision+0x40>)
 800ccd4:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800ccd8:	2b01      	cmp	r3, #1
 800ccda:	d10d      	bne.n	800ccf8 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800ccdc:	f002 fcab 	bl	800f636 <LoRaMacClassBIsPingExpected>
 800cce0:	4603      	mov	r3, r0
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d001      	beq.n	800ccea <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800cce6:	230f      	movs	r3, #15
 800cce8:	e007      	b.n	800ccfa <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800ccea:	f002 fcab 	bl	800f644 <LoRaMacClassBIsMulticastExpected>
 800ccee:	4603      	mov	r3, r0
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d001      	beq.n	800ccf8 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800ccf4:	230f      	movs	r3, #15
 800ccf6:	e000      	b.n	800ccfa <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 800ccf8:	2300      	movs	r3, #0
}
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	bd80      	pop	{r7, pc}
 800ccfe:	bf00      	nop
 800cd00:	20008000 	.word	0x20008000

0800cd04 <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 800cd04:	b590      	push	{r4, r7, lr}
 800cd06:	b083      	sub	sp, #12
 800cd08:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800cd0a:	4b2d      	ldr	r3, [pc, #180]	@ (800cdc0 <ComputeRxWindowParameters+0xbc>)
 800cd0c:	f893 4048 	ldrb.w	r4, [r3, #72]	@ 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800cd10:	4b2b      	ldr	r3, [pc, #172]	@ (800cdc0 <ComputeRxWindowParameters+0xbc>)
 800cd12:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800cd16:	4b2a      	ldr	r3, [pc, #168]	@ (800cdc0 <ComputeRxWindowParameters+0xbc>)
 800cd18:	f893 107d 	ldrb.w	r1, [r3, #125]	@ 0x7d
 800cd1c:	4b28      	ldr	r3, [pc, #160]	@ (800cdc0 <ComputeRxWindowParameters+0xbc>)
 800cd1e:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 800cd22:	4b27      	ldr	r3, [pc, #156]	@ (800cdc0 <ComputeRxWindowParameters+0xbc>)
 800cd24:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800cd28:	b25b      	sxtb	r3, r3
 800cd2a:	f004 fdd3 	bl	80118d4 <RegionApplyDrOffset>
 800cd2e:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800cd30:	b259      	sxtb	r1, r3
 800cd32:	4b23      	ldr	r3, [pc, #140]	@ (800cdc0 <ComputeRxWindowParameters+0xbc>)
 800cd34:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 800cd38:	4b21      	ldr	r3, [pc, #132]	@ (800cdc0 <ComputeRxWindowParameters+0xbc>)
 800cd3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cd3c:	4821      	ldr	r0, [pc, #132]	@ (800cdc4 <ComputeRxWindowParameters+0xc0>)
 800cd3e:	9000      	str	r0, [sp, #0]
 800cd40:	4620      	mov	r0, r4
 800cd42:	f004 fc89 	bl	8011658 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800cd46:	4b1e      	ldr	r3, [pc, #120]	@ (800cdc0 <ComputeRxWindowParameters+0xbc>)
 800cd48:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 800cd4c:	4b1c      	ldr	r3, [pc, #112]	@ (800cdc0 <ComputeRxWindowParameters+0xbc>)
 800cd4e:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800cd52:	b259      	sxtb	r1, r3
 800cd54:	4b1a      	ldr	r3, [pc, #104]	@ (800cdc0 <ComputeRxWindowParameters+0xbc>)
 800cd56:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 800cd5a:	4b19      	ldr	r3, [pc, #100]	@ (800cdc0 <ComputeRxWindowParameters+0xbc>)
 800cd5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cd5e:	4c1a      	ldr	r4, [pc, #104]	@ (800cdc8 <ComputeRxWindowParameters+0xc4>)
 800cd60:	9400      	str	r4, [sp, #0]
 800cd62:	f004 fc79 	bl	8011658 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800cd66:	4b16      	ldr	r3, [pc, #88]	@ (800cdc0 <ComputeRxWindowParameters+0xbc>)
 800cd68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cd6a:	4a18      	ldr	r2, [pc, #96]	@ (800cdcc <ComputeRxWindowParameters+0xc8>)
 800cd6c:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 800cd70:	4413      	add	r3, r2
 800cd72:	4a16      	ldr	r2, [pc, #88]	@ (800cdcc <ComputeRxWindowParameters+0xc8>)
 800cd74:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800cd78:	4b11      	ldr	r3, [pc, #68]	@ (800cdc0 <ComputeRxWindowParameters+0xbc>)
 800cd7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cd7c:	4a13      	ldr	r2, [pc, #76]	@ (800cdcc <ComputeRxWindowParameters+0xc8>)
 800cd7e:	f8d2 23dc 	ldr.w	r2, [r2, #988]	@ 0x3dc
 800cd82:	4413      	add	r3, r2
 800cd84:	4a11      	ldr	r2, [pc, #68]	@ (800cdcc <ComputeRxWindowParameters+0xc8>)
 800cd86:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4

    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 800cd8a:	4b10      	ldr	r3, [pc, #64]	@ (800cdcc <ComputeRxWindowParameters+0xc8>)
 800cd8c:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800cd90:	2b04      	cmp	r3, #4
 800cd92:	d011      	beq.n	800cdb8 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800cd94:	4b0a      	ldr	r3, [pc, #40]	@ (800cdc0 <ComputeRxWindowParameters+0xbc>)
 800cd96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cd98:	4a0c      	ldr	r2, [pc, #48]	@ (800cdcc <ComputeRxWindowParameters+0xc8>)
 800cd9a:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 800cd9e:	4413      	add	r3, r2
 800cda0:	4a0a      	ldr	r2, [pc, #40]	@ (800cdcc <ComputeRxWindowParameters+0xc8>)
 800cda2:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800cda6:	4b06      	ldr	r3, [pc, #24]	@ (800cdc0 <ComputeRxWindowParameters+0xbc>)
 800cda8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800cdaa:	4a08      	ldr	r2, [pc, #32]	@ (800cdcc <ComputeRxWindowParameters+0xc8>)
 800cdac:	f8d2 23dc 	ldr.w	r2, [r2, #988]	@ 0x3dc
 800cdb0:	4413      	add	r3, r2
 800cdb2:	4a06      	ldr	r2, [pc, #24]	@ (800cdcc <ComputeRxWindowParameters+0xc8>)
 800cdb4:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4
    }
}
 800cdb8:	bf00      	nop
 800cdba:	3704      	adds	r7, #4
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd90      	pop	{r4, r7, pc}
 800cdc0:	20008000 	.word	0x20008000
 800cdc4:	20000de0 	.word	0x20000de0
 800cdc8:	20000df8 	.word	0x20000df8
 800cdcc:	20000a28 	.word	0x20000a28

0800cdd0 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b082      	sub	sp, #8
 800cdd4:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800cdda:	4b13      	ldr	r3, [pc, #76]	@ (800ce28 <VerifyTxFrame+0x58>)
 800cddc:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d01b      	beq.n	800ce1c <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800cde4:	1d3b      	adds	r3, r7, #4
 800cde6:	4618      	mov	r0, r3
 800cde8:	f002 fee6 	bl	800fbb8 <LoRaMacCommandsGetSizeSerializedCmds>
 800cdec:	4603      	mov	r3, r0
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d001      	beq.n	800cdf6 <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800cdf2:	2313      	movs	r3, #19
 800cdf4:	e013      	b.n	800ce1e <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800cdf6:	4b0d      	ldr	r3, [pc, #52]	@ (800ce2c <VerifyTxFrame+0x5c>)
 800cdf8:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800cdfc:	4a0a      	ldr	r2, [pc, #40]	@ (800ce28 <VerifyTxFrame+0x58>)
 800cdfe:	f992 1039 	ldrsb.w	r1, [r2, #57]	@ 0x39
 800ce02:	687a      	ldr	r2, [r7, #4]
 800ce04:	b2d2      	uxtb	r2, r2
 800ce06:	4618      	mov	r0, r3
 800ce08:	f7ff f924 	bl	800c054 <ValidatePayloadLength>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	f083 0301 	eor.w	r3, r3, #1
 800ce12:	b2db      	uxtb	r3, r3
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d001      	beq.n	800ce1c <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 800ce18:	2308      	movs	r3, #8
 800ce1a:	e000      	b.n	800ce1e <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 800ce1c:	2300      	movs	r3, #0
}
 800ce1e:	4618      	mov	r0, r3
 800ce20:	3708      	adds	r7, #8
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}
 800ce26:	bf00      	nop
 800ce28:	20008000 	.word	0x20008000
 800ce2c:	20000a28 	.word	0x20000a28

0800ce30 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b082      	sub	sp, #8
 800ce34:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 800ce36:	4b18      	ldr	r3, [pc, #96]	@ (800ce98 <SerializeTxFrame+0x68>)
 800ce38:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d002      	beq.n	800ce46 <SerializeTxFrame+0x16>
 800ce40:	2b04      	cmp	r3, #4
 800ce42:	d011      	beq.n	800ce68 <SerializeTxFrame+0x38>
 800ce44:	e021      	b.n	800ce8a <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800ce46:	4815      	ldr	r0, [pc, #84]	@ (800ce9c <SerializeTxFrame+0x6c>)
 800ce48:	f004 f9d9 	bl	80111fe <LoRaMacSerializerJoinRequest>
 800ce4c:	4603      	mov	r3, r0
 800ce4e:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800ce50:	79fb      	ldrb	r3, [r7, #7]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d001      	beq.n	800ce5a <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800ce56:	2311      	movs	r3, #17
 800ce58:	e01a      	b.n	800ce90 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800ce5a:	4b0f      	ldr	r3, [pc, #60]	@ (800ce98 <SerializeTxFrame+0x68>)
 800ce5c:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800ce60:	461a      	mov	r2, r3
 800ce62:	4b0d      	ldr	r3, [pc, #52]	@ (800ce98 <SerializeTxFrame+0x68>)
 800ce64:	801a      	strh	r2, [r3, #0]
            break;
 800ce66:	e012      	b.n	800ce8e <SerializeTxFrame+0x5e>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800ce68:	480c      	ldr	r0, [pc, #48]	@ (800ce9c <SerializeTxFrame+0x6c>)
 800ce6a:	f004 fa4a 	bl	8011302 <LoRaMacSerializerData>
 800ce6e:	4603      	mov	r3, r0
 800ce70:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800ce72:	79fb      	ldrb	r3, [r7, #7]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d001      	beq.n	800ce7c <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800ce78:	2311      	movs	r3, #17
 800ce7a:	e009      	b.n	800ce90 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800ce7c:	4b06      	ldr	r3, [pc, #24]	@ (800ce98 <SerializeTxFrame+0x68>)
 800ce7e:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800ce82:	461a      	mov	r2, r3
 800ce84:	4b04      	ldr	r3, [pc, #16]	@ (800ce98 <SerializeTxFrame+0x68>)
 800ce86:	801a      	strh	r2, [r3, #0]
            break;
 800ce88:	e001      	b.n	800ce8e <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800ce8a:	2303      	movs	r3, #3
 800ce8c:	e000      	b.n	800ce90 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 800ce8e:	2300      	movs	r3, #0
}
 800ce90:	4618      	mov	r0, r3
 800ce92:	3708      	adds	r7, #8
 800ce94:	46bd      	mov	sp, r7
 800ce96:	bd80      	pop	{r7, pc}
 800ce98:	20000a28 	.word	0x20000a28
 800ce9c:	20000b30 	.word	0x20000b30

0800cea0 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b090      	sub	sp, #64	@ 0x40
 800cea4:	af02      	add	r7, sp, #8
 800cea6:	4603      	mov	r3, r0
 800cea8:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ceaa:	2303      	movs	r3, #3
 800ceac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 800ceb0:	f7ff ff06 	bl	800ccc0 <CheckForClassBCollision>
 800ceb4:	4603      	mov	r3, r0
 800ceb6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 800ceba:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d002      	beq.n	800cec8 <ScheduleTx+0x28>
    {
        return status;
 800cec2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cec6:	e092      	b.n	800cfee <ScheduleTx+0x14e>
    }

    // Update back-off
    CalculateBackOff( );
 800cec8:	f000 f8f8 	bl	800d0bc <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 800cecc:	f7ff ffb0 	bl	800ce30 <SerializeTxFrame>
 800ced0:	4603      	mov	r3, r0
 800ced2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 800ced6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d002      	beq.n	800cee4 <ScheduleTx+0x44>
    {
        return status;
 800cede:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cee2:	e084      	b.n	800cfee <ScheduleTx+0x14e>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800cee4:	4b44      	ldr	r3, [pc, #272]	@ (800cff8 <ScheduleTx+0x158>)
 800cee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cee8:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800ceea:	4b43      	ldr	r3, [pc, #268]	@ (800cff8 <ScheduleTx+0x158>)
 800ceec:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800cef0:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800cef2:	4b41      	ldr	r3, [pc, #260]	@ (800cff8 <ScheduleTx+0x158>)
 800cef4:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800cef8:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800cefa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800cefe:	4618      	mov	r0, r3
 800cf00:	f00d f8ac 	bl	801a05c <SysTimeGetMcuTime>
 800cf04:	4638      	mov	r0, r7
 800cf06:	4b3c      	ldr	r3, [pc, #240]	@ (800cff8 <ScheduleTx+0x158>)
 800cf08:	f8d3 2128 	ldr.w	r2, [r3, #296]	@ 0x128
 800cf0c:	9200      	str	r2, [sp, #0]
 800cf0e:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800cf12:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800cf16:	ca06      	ldmia	r2, {r1, r2}
 800cf18:	f00d f801 	bl	8019f1e <SysTimeSub>
 800cf1c:	f107 0320 	add.w	r3, r7, #32
 800cf20:	463a      	mov	r2, r7
 800cf22:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cf26:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800cf2a:	4b33      	ldr	r3, [pc, #204]	@ (800cff8 <ScheduleTx+0x158>)
 800cf2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf2e:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 800cf30:	2300      	movs	r3, #0
 800cf32:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    nextChan.Joined = true;
 800cf36:	2301      	movs	r3, #1
 800cf38:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800cf3a:	4b30      	ldr	r3, [pc, #192]	@ (800cffc <ScheduleTx+0x15c>)
 800cf3c:	881b      	ldrh	r3, [r3, #0]
 800cf3e:	857b      	strh	r3, [r7, #42]	@ 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800cf40:	4b2d      	ldr	r3, [pc, #180]	@ (800cff8 <ScheduleTx+0x158>)
 800cf42:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d104      	bne.n	800cf54 <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 800cf4a:	2301      	movs	r3, #1
 800cf4c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        nextChan.Joined = false;
 800cf50:	2300      	movs	r3, #0
 800cf52:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800cf54:	4b28      	ldr	r3, [pc, #160]	@ (800cff8 <ScheduleTx+0x158>)
 800cf56:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800cf5a:	f107 0114 	add.w	r1, r7, #20
 800cf5e:	4b28      	ldr	r3, [pc, #160]	@ (800d000 <ScheduleTx+0x160>)
 800cf60:	9300      	str	r3, [sp, #0]
 800cf62:	4b28      	ldr	r3, [pc, #160]	@ (800d004 <ScheduleTx+0x164>)
 800cf64:	4a28      	ldr	r2, [pc, #160]	@ (800d008 <ScheduleTx+0x168>)
 800cf66:	f004 fc92 	bl	801188e <RegionNextChannel>
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( status != LORAMAC_STATUS_OK )
 800cf70:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d025      	beq.n	800cfc4 <ScheduleTx+0x124>
    {
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 800cf78:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cf7c:	2b0b      	cmp	r3, #11
 800cf7e:	d11e      	bne.n	800cfbe <ScheduleTx+0x11e>
        {
            if( MacCtx.DutyCycleWaitTime != 0 )
 800cf80:	4b1e      	ldr	r3, [pc, #120]	@ (800cffc <ScheduleTx+0x15c>)
 800cf82:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d01c      	beq.n	800cfc4 <ScheduleTx+0x124>
            {
                if( allowDelayedTx == true )
 800cf8a:	7bfb      	ldrb	r3, [r7, #15]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d013      	beq.n	800cfb8 <ScheduleTx+0x118>
                {
                    // Allow delayed transmissions. We have to allow it in case
                    // the MAC must retransmit a frame with the frame repetitions
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800cf90:	4b1a      	ldr	r3, [pc, #104]	@ (800cffc <ScheduleTx+0x15c>)
 800cf92:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800cf96:	f043 0320 	orr.w	r3, r3, #32
 800cf9a:	4a18      	ldr	r2, [pc, #96]	@ (800cffc <ScheduleTx+0x15c>)
 800cf9c:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800cfa0:	4b16      	ldr	r3, [pc, #88]	@ (800cffc <ScheduleTx+0x15c>)
 800cfa2:	f8d3 3494 	ldr.w	r3, [r3, #1172]	@ 0x494
 800cfa6:	4619      	mov	r1, r3
 800cfa8:	4818      	ldr	r0, [pc, #96]	@ (800d00c <ScheduleTx+0x16c>)
 800cfaa:	f00d fa01 	bl	801a3b0 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 800cfae:	4817      	ldr	r0, [pc, #92]	@ (800d00c <ScheduleTx+0x16c>)
 800cfb0:	f00d f920 	bl	801a1f4 <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	e01a      	b.n	800cfee <ScheduleTx+0x14e>
                }
                // Need to delay, but allowDelayedTx does not allow it
                return status;
 800cfb8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cfbc:	e017      	b.n	800cfee <ScheduleTx+0x14e>
            }
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 800cfbe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cfc2:	e014      	b.n	800cfee <ScheduleTx+0x14e>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 800cfc4:	f7ff fe9e 	bl	800cd04 <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 800cfc8:	f7ff ff02 	bl	800cdd0 <VerifyTxFrame>
 800cfcc:	4603      	mov	r3, r0
 800cfce:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 800cfd2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d002      	beq.n	800cfe0 <ScheduleTx+0x140>
    {
        return status;
 800cfda:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800cfde:	e006      	b.n	800cfee <ScheduleTx+0x14e>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 800cfe0:	4b06      	ldr	r3, [pc, #24]	@ (800cffc <ScheduleTx+0x15c>)
 800cfe2:	f893 341b 	ldrb.w	r3, [r3, #1051]	@ 0x41b
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	f000 fb74 	bl	800d6d4 <SendFrameOnChannel>
 800cfec:	4603      	mov	r3, r0
}
 800cfee:	4618      	mov	r0, r3
 800cff0:	3738      	adds	r7, #56	@ 0x38
 800cff2:	46bd      	mov	sp, r7
 800cff4:	bd80      	pop	{r7, pc}
 800cff6:	bf00      	nop
 800cff8:	20008000 	.word	0x20008000
 800cffc:	20000a28 	.word	0x20000a28
 800d000:	20008030 	.word	0x20008030
 800d004:	20000ebc 	.word	0x20000ebc
 800d008:	20000e43 	.word	0x20000e43
 800d00c:	20000d90 	.word	0x20000d90

0800d010 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b084      	sub	sp, #16
 800d014:	af00      	add	r7, sp, #0
 800d016:	4603      	mov	r3, r0
 800d018:	460a      	mov	r2, r1
 800d01a:	71fb      	strb	r3, [r7, #7]
 800d01c:	4613      	mov	r3, r2
 800d01e:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800d020:	2312      	movs	r3, #18
 800d022:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 800d024:	2300      	movs	r3, #0
 800d026:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 800d028:	4b22      	ldr	r3, [pc, #136]	@ (800d0b4 <SecureFrame+0xa4>)
 800d02a:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d002      	beq.n	800d038 <SecureFrame+0x28>
 800d032:	2b04      	cmp	r3, #4
 800d034:	d011      	beq.n	800d05a <SecureFrame+0x4a>
 800d036:	e036      	b.n	800d0a6 <SecureFrame+0x96>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800d038:	481f      	ldr	r0, [pc, #124]	@ (800d0b8 <SecureFrame+0xa8>)
 800d03a:	f003 fcb3 	bl	80109a4 <LoRaMacCryptoPrepareJoinRequest>
 800d03e:	4603      	mov	r3, r0
 800d040:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800d042:	7bfb      	ldrb	r3, [r7, #15]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d001      	beq.n	800d04c <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800d048:	2311      	movs	r3, #17
 800d04a:	e02f      	b.n	800d0ac <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800d04c:	4b19      	ldr	r3, [pc, #100]	@ (800d0b4 <SecureFrame+0xa4>)
 800d04e:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800d052:	461a      	mov	r2, r3
 800d054:	4b17      	ldr	r3, [pc, #92]	@ (800d0b4 <SecureFrame+0xa4>)
 800d056:	801a      	strh	r2, [r3, #0]
            break;
 800d058:	e027      	b.n	800d0aa <SecureFrame+0x9a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.ReJoin0or2.BufSize;
            break;
#endif /* LORAMAC_VERSION */
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800d05a:	f107 0308 	add.w	r3, r7, #8
 800d05e:	4618      	mov	r0, r3
 800d060:	f003 fbda 	bl	8010818 <LoRaMacCryptoGetFCntUp>
 800d064:	4603      	mov	r3, r0
 800d066:	2b00      	cmp	r3, #0
 800d068:	d001      	beq.n	800d06e <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800d06a:	2312      	movs	r3, #18
 800d06c:	e01e      	b.n	800d0ac <SecureFrame+0x9c>
            }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 800d06e:	4b11      	ldr	r3, [pc, #68]	@ (800d0b4 <SecureFrame+0xa4>)
 800d070:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800d074:	2b00      	cmp	r3, #0
 800d076:	d002      	beq.n	800d07e <SecureFrame+0x6e>
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 800d078:	68bb      	ldr	r3, [r7, #8]
 800d07a:	3b01      	subs	r3, #1
 800d07c:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800d07e:	68b8      	ldr	r0, [r7, #8]
 800d080:	79ba      	ldrb	r2, [r7, #6]
 800d082:	79f9      	ldrb	r1, [r7, #7]
 800d084:	4b0c      	ldr	r3, [pc, #48]	@ (800d0b8 <SecureFrame+0xa8>)
 800d086:	f003 fdb3 	bl	8010bf0 <LoRaMacCryptoSecureMessage>
 800d08a:	4603      	mov	r3, r0
 800d08c:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800d08e:	7bfb      	ldrb	r3, [r7, #15]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d001      	beq.n	800d098 <SecureFrame+0x88>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800d094:	2311      	movs	r3, #17
 800d096:	e009      	b.n	800d0ac <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800d098:	4b06      	ldr	r3, [pc, #24]	@ (800d0b4 <SecureFrame+0xa4>)
 800d09a:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800d09e:	461a      	mov	r2, r3
 800d0a0:	4b04      	ldr	r3, [pc, #16]	@ (800d0b4 <SecureFrame+0xa4>)
 800d0a2:	801a      	strh	r2, [r3, #0]
            break;
 800d0a4:	e001      	b.n	800d0aa <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800d0a6:	2303      	movs	r3, #3
 800d0a8:	e000      	b.n	800d0ac <SecureFrame+0x9c>
    }
    return LORAMAC_STATUS_OK;
 800d0aa:	2300      	movs	r3, #0
}
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	3710      	adds	r7, #16
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	bd80      	pop	{r7, pc}
 800d0b4:	20000a28 	.word	0x20000a28
 800d0b8:	20000b30 	.word	0x20000b30

0800d0bc <CalculateBackOff>:

static void CalculateBackOff( void )
{
 800d0bc:	b480      	push	{r7}
 800d0be:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 800d0c0:	4b09      	ldr	r3, [pc, #36]	@ (800d0e8 <CalculateBackOff+0x2c>)
 800d0c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d10a      	bne.n	800d0de <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 800d0c8:	4b07      	ldr	r3, [pc, #28]	@ (800d0e8 <CalculateBackOff+0x2c>)
 800d0ca:	f8b3 3120 	ldrh.w	r3, [r3, #288]	@ 0x120
 800d0ce:	3b01      	subs	r3, #1
 800d0d0:	4a06      	ldr	r2, [pc, #24]	@ (800d0ec <CalculateBackOff+0x30>)
 800d0d2:	f8d2 241c 	ldr.w	r2, [r2, #1052]	@ 0x41c
 800d0d6:	fb02 f303 	mul.w	r3, r2, r3
 800d0da:	4a03      	ldr	r2, [pc, #12]	@ (800d0e8 <CalculateBackOff+0x2c>)
 800d0dc:	6313      	str	r3, [r2, #48]	@ 0x30
    }
}
 800d0de:	bf00      	nop
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	bc80      	pop	{r7}
 800d0e4:	4770      	bx	lr
 800d0e6:	bf00      	nop
 800d0e8:	20008000 	.word	0x20008000
 800d0ec:	20000a28 	.word	0x20000a28

0800d0f0 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b082      	sub	sp, #8
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	7139      	strb	r1, [r7, #4]
 800d0fa:	71fb      	strb	r3, [r7, #7]
 800d0fc:	4613      	mov	r3, r2
 800d0fe:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800d100:	79fb      	ldrb	r3, [r7, #7]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d002      	beq.n	800d10c <RemoveMacCommands+0x1c>
 800d106:	79fb      	ldrb	r3, [r7, #7]
 800d108:	2b01      	cmp	r3, #1
 800d10a:	d10d      	bne.n	800d128 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 800d10c:	79bb      	ldrb	r3, [r7, #6]
 800d10e:	2b01      	cmp	r3, #1
 800d110:	d108      	bne.n	800d124 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 800d112:	793b      	ldrb	r3, [r7, #4]
 800d114:	f003 0320 	and.w	r3, r3, #32
 800d118:	b2db      	uxtb	r3, r3
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d004      	beq.n	800d128 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800d11e:	f002 fd1f 	bl	800fb60 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 800d122:	e001      	b.n	800d128 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 800d124:	f002 fd1c 	bl	800fb60 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 800d128:	bf00      	nop
 800d12a:	3708      	adds	r7, #8
 800d12c:	46bd      	mov	sp, r7
 800d12e:	bd80      	pop	{r7, pc}

0800d130 <ResetMacParameters>:

static void ResetMacParameters( bool isRejoin )
{
 800d130:	b5b0      	push	{r4, r5, r7, lr}
 800d132:	b092      	sub	sp, #72	@ 0x48
 800d134:	af00      	add	r7, sp, #0
 800d136:	4603      	mov	r3, r0
 800d138:	71fb      	strb	r3, [r7, #7]
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    if( isRejoin == false )
 800d13a:	79fb      	ldrb	r3, [r7, #7]
 800d13c:	f083 0301 	eor.w	r3, r3, #1
 800d140:	b2db      	uxtb	r3, r3
 800d142:	2b00      	cmp	r3, #0
 800d144:	d003      	beq.n	800d14e <ResetMacParameters+0x1e>
    {
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800d146:	4b88      	ldr	r3, [pc, #544]	@ (800d368 <ResetMacParameters+0x238>)
 800d148:	2200      	movs	r2, #0
 800d14a:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    }

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 800d14e:	4b86      	ldr	r3, [pc, #536]	@ (800d368 <ResetMacParameters+0x238>)
 800d150:	2200      	movs	r2, #0
 800d152:	629a      	str	r2, [r3, #40]	@ 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 800d154:	4b85      	ldr	r3, [pc, #532]	@ (800d36c <ResetMacParameters+0x23c>)
 800d156:	2200      	movs	r2, #0
 800d158:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 800d15c:	4b83      	ldr	r3, [pc, #524]	@ (800d36c <ResetMacParameters+0x23c>)
 800d15e:	2200      	movs	r2, #0
 800d160:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
    MacCtx.ResponseTimeoutStartTime = 0;
 800d164:	4b81      	ldr	r3, [pc, #516]	@ (800d36c <ResetMacParameters+0x23c>)
 800d166:	2200      	movs	r2, #0
 800d168:	f8c3 2498 	str.w	r2, [r3, #1176]	@ 0x498
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 800d16c:	4b7e      	ldr	r3, [pc, #504]	@ (800d368 <ResetMacParameters+0x238>)
 800d16e:	2200      	movs	r2, #0
 800d170:	f883 211b 	strb.w	r2, [r3, #283]	@ 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 800d174:	4b7c      	ldr	r3, [pc, #496]	@ (800d368 <ResetMacParameters+0x238>)
 800d176:	2201      	movs	r2, #1
 800d178:	f8a3 2120 	strh.w	r2, [r3, #288]	@ 0x120

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800d17c:	4b7a      	ldr	r3, [pc, #488]	@ (800d368 <ResetMacParameters+0x238>)
 800d17e:	f993 20dc 	ldrsb.w	r2, [r3, #220]	@ 0xdc
 800d182:	4b79      	ldr	r3, [pc, #484]	@ (800d368 <ResetMacParameters+0x238>)
 800d184:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800d188:	4b77      	ldr	r3, [pc, #476]	@ (800d368 <ResetMacParameters+0x238>)
 800d18a:	f993 20dd 	ldrsb.w	r2, [r3, #221]	@ 0xdd
 800d18e:	4b76      	ldr	r3, [pc, #472]	@ (800d368 <ResetMacParameters+0x238>)
 800d190:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 800d194:	4b74      	ldr	r3, [pc, #464]	@ (800d368 <ResetMacParameters+0x238>)
 800d196:	f893 20b1 	ldrb.w	r2, [r3, #177]	@ 0xb1
 800d19a:	4b73      	ldr	r3, [pc, #460]	@ (800d368 <ResetMacParameters+0x238>)
 800d19c:	f883 2069 	strb.w	r2, [r3, #105]	@ 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800d1a0:	4b71      	ldr	r3, [pc, #452]	@ (800d368 <ResetMacParameters+0x238>)
 800d1a2:	4a71      	ldr	r2, [pc, #452]	@ (800d368 <ResetMacParameters+0x238>)
 800d1a4:	336c      	adds	r3, #108	@ 0x6c
 800d1a6:	32b4      	adds	r2, #180	@ 0xb4
 800d1a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d1ac:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800d1b0:	4b6d      	ldr	r3, [pc, #436]	@ (800d368 <ResetMacParameters+0x238>)
 800d1b2:	4a6d      	ldr	r2, [pc, #436]	@ (800d368 <ResetMacParameters+0x238>)
 800d1b4:	3374      	adds	r3, #116	@ 0x74
 800d1b6:	32bc      	adds	r2, #188	@ 0xbc
 800d1b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d1bc:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800d1c0:	4b69      	ldr	r3, [pc, #420]	@ (800d368 <ResetMacParameters+0x238>)
 800d1c2:	f893 20c4 	ldrb.w	r2, [r3, #196]	@ 0xc4
 800d1c6:	4b68      	ldr	r3, [pc, #416]	@ (800d368 <ResetMacParameters+0x238>)
 800d1c8:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 800d1cc:	4b66      	ldr	r3, [pc, #408]	@ (800d368 <ResetMacParameters+0x238>)
 800d1ce:	f893 20c5 	ldrb.w	r2, [r3, #197]	@ 0xc5
 800d1d2:	4b65      	ldr	r3, [pc, #404]	@ (800d368 <ResetMacParameters+0x238>)
 800d1d4:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 800d1d8:	4b63      	ldr	r3, [pc, #396]	@ (800d368 <ResetMacParameters+0x238>)
 800d1da:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800d1de:	4a62      	ldr	r2, [pc, #392]	@ (800d368 <ResetMacParameters+0x238>)
 800d1e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800d1e4:	4b60      	ldr	r3, [pc, #384]	@ (800d368 <ResetMacParameters+0x238>)
 800d1e6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800d1ea:	4a5f      	ldr	r2, [pc, #380]	@ (800d368 <ResetMacParameters+0x238>)
 800d1ec:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 800d1f0:	4b5d      	ldr	r3, [pc, #372]	@ (800d368 <ResetMacParameters+0x238>)
 800d1f2:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	@ 0xd0
 800d1f6:	4b5c      	ldr	r3, [pc, #368]	@ (800d368 <ResetMacParameters+0x238>)
 800d1f8:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 800d1fc:	4b5a      	ldr	r3, [pc, #360]	@ (800d368 <ResetMacParameters+0x238>)
 800d1fe:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	@ 0xd2
 800d202:	4b59      	ldr	r3, [pc, #356]	@ (800d368 <ResetMacParameters+0x238>)
 800d204:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a

    MacCtx.NodeAckRequested = false;
 800d208:	4b58      	ldr	r3, [pc, #352]	@ (800d36c <ResetMacParameters+0x23c>)
 800d20a:	2200      	movs	r2, #0
 800d20c:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
    Nvm.MacGroup1.SrvAckRequested = false;
 800d210:	4b55      	ldr	r3, [pc, #340]	@ (800d368 <ResetMacParameters+0x238>)
 800d212:	2200      	movs	r2, #0
 800d214:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800d218:	4b53      	ldr	r3, [pc, #332]	@ (800d368 <ResetMacParameters+0x238>)
 800d21a:	2200      	movs	r2, #0
 800d21c:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
    Nvm.MacGroup2.DownlinkReceived = false;
 800d220:	4b51      	ldr	r3, [pc, #324]	@ (800d368 <ResetMacParameters+0x238>)
 800d222:	2200      	movs	r2, #0
 800d224:	f883 211e 	strb.w	r2, [r3, #286]	@ 0x11e
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 800d228:	4b4f      	ldr	r3, [pc, #316]	@ (800d368 <ResetMacParameters+0x238>)
 800d22a:	2200      	movs	r2, #0
 800d22c:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 800d230:	4b4d      	ldr	r3, [pc, #308]	@ (800d368 <ResetMacParameters+0x238>)
 800d232:	2200      	movs	r2, #0
 800d234:	f883 2138 	strb.w	r2, [r3, #312]	@ 0x138
    Nvm.MacGroup2.ForceRejoinType = 0;
 800d238:	4b4b      	ldr	r3, [pc, #300]	@ (800d368 <ResetMacParameters+0x238>)
 800d23a:	2200      	movs	r2, #0
 800d23c:	f883 2139 	strb.w	r2, [r3, #313]	@ 0x139
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 800d240:	4b49      	ldr	r3, [pc, #292]	@ (800d368 <ResetMacParameters+0x238>)
 800d242:	2200      	movs	r2, #0
 800d244:	f8c3 213c 	str.w	r2, [r3, #316]	@ 0x13c
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 800d248:	4b47      	ldr	r3, [pc, #284]	@ (800d368 <ResetMacParameters+0x238>)
 800d24a:	2200      	movs	r2, #0
 800d24c:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 800d250:	4b45      	ldr	r3, [pc, #276]	@ (800d368 <ResetMacParameters+0x238>)
 800d252:	2200      	movs	r2, #0
 800d254:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 800d258:	4b43      	ldr	r3, [pc, #268]	@ (800d368 <ResetMacParameters+0x238>)
 800d25a:	2200      	movs	r2, #0
 800d25c:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 800d260:	4b41      	ldr	r3, [pc, #260]	@ (800d368 <ResetMacParameters+0x238>)
 800d262:	2200      	movs	r2, #0
 800d264:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 800d268:	2301      	movs	r3, #1
 800d26a:	763b      	strb	r3, [r7, #24]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800d26c:	4b40      	ldr	r3, [pc, #256]	@ (800d370 <ResetMacParameters+0x240>)
 800d26e:	60fb      	str	r3, [r7, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800d270:	4b40      	ldr	r3, [pc, #256]	@ (800d374 <ResetMacParameters+0x244>)
 800d272:	613b      	str	r3, [r7, #16]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    params.Bands = &RegionBands;
 800d274:	4b40      	ldr	r3, [pc, #256]	@ (800d378 <ResetMacParameters+0x248>)
 800d276:	617b      	str	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800d278:	4b3b      	ldr	r3, [pc, #236]	@ (800d368 <ResetMacParameters+0x238>)
 800d27a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800d27e:	f107 020c 	add.w	r2, r7, #12
 800d282:	4611      	mov	r1, r2
 800d284:	4618      	mov	r0, r3
 800d286:	f004 f97d 	bl	8011584 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 800d28a:	4b38      	ldr	r3, [pc, #224]	@ (800d36c <ResetMacParameters+0x23c>)
 800d28c:	2200      	movs	r2, #0
 800d28e:	f883 241b 	strb.w	r2, [r3, #1051]	@ 0x41b

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800d292:	4b36      	ldr	r3, [pc, #216]	@ (800d36c <ResetMacParameters+0x23c>)
 800d294:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 800d298:	4b34      	ldr	r3, [pc, #208]	@ (800d36c <ResetMacParameters+0x23c>)
 800d29a:	f883 23d0 	strb.w	r2, [r3, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800d29e:	4b32      	ldr	r3, [pc, #200]	@ (800d368 <ResetMacParameters+0x238>)
 800d2a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d2a2:	4a32      	ldr	r2, [pc, #200]	@ (800d36c <ResetMacParameters+0x23c>)
 800d2a4:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800d2a8:	4b2f      	ldr	r3, [pc, #188]	@ (800d368 <ResetMacParameters+0x238>)
 800d2aa:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800d2ae:	4b2f      	ldr	r3, [pc, #188]	@ (800d36c <ResetMacParameters+0x23c>)
 800d2b0:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800d2b4:	4b2c      	ldr	r3, [pc, #176]	@ (800d368 <ResetMacParameters+0x238>)
 800d2b6:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800d2ba:	4b2c      	ldr	r3, [pc, #176]	@ (800d36c <ResetMacParameters+0x23c>)
 800d2bc:	f883 23e1 	strb.w	r2, [r3, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800d2c0:	4b2a      	ldr	r3, [pc, #168]	@ (800d36c <ResetMacParameters+0x23c>)
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	f883 23e2 	strb.w	r2, [r3, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800d2c8:	4b28      	ldr	r3, [pc, #160]	@ (800d36c <ResetMacParameters+0x23c>)
 800d2ca:	2201      	movs	r2, #1
 800d2cc:	f883 23e3 	strb.w	r2, [r3, #995]	@ 0x3e3
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800d2d0:	4b25      	ldr	r3, [pc, #148]	@ (800d368 <ResetMacParameters+0x238>)
 800d2d2:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 800d2d6:	4b25      	ldr	r3, [pc, #148]	@ (800d36c <ResetMacParameters+0x23c>)
 800d2d8:	f883 23e4 	strb.w	r2, [r3, #996]	@ 0x3e4
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800d2dc:	4a23      	ldr	r2, [pc, #140]	@ (800d36c <ResetMacParameters+0x23c>)
 800d2de:	4b23      	ldr	r3, [pc, #140]	@ (800d36c <ResetMacParameters+0x23c>)
 800d2e0:	f502 747a 	add.w	r4, r2, #1000	@ 0x3e8
 800d2e4:	f503 7574 	add.w	r5, r3, #976	@ 0x3d0
 800d2e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d2ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d2ec:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d2f0:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800d2f4:	4b1d      	ldr	r3, [pc, #116]	@ (800d36c <ResetMacParameters+0x23c>)
 800d2f6:	2201      	movs	r2, #1
 800d2f8:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800d2fc:	4b1b      	ldr	r3, [pc, #108]	@ (800d36c <ResetMacParameters+0x23c>)
 800d2fe:	2202      	movs	r2, #2
 800d300:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 800d304:	2300      	movs	r3, #0
 800d306:	643b      	str	r3, [r7, #64]	@ 0x40
    classBCallbacks.MacProcessNotify = NULL;
 800d308:	2300      	movs	r3, #0
 800d30a:	647b      	str	r3, [r7, #68]	@ 0x44

    if( MacCtx.MacCallbacks != NULL )
 800d30c:	4b17      	ldr	r3, [pc, #92]	@ (800d36c <ResetMacParameters+0x23c>)
 800d30e:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d312:	2b00      	cmp	r3, #0
 800d314:	d009      	beq.n	800d32a <ResetMacParameters+0x1fa>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 800d316:	4b15      	ldr	r3, [pc, #84]	@ (800d36c <ResetMacParameters+0x23c>)
 800d318:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d31c:	685b      	ldr	r3, [r3, #4]
 800d31e:	643b      	str	r3, [r7, #64]	@ 0x40
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800d320:	4b12      	ldr	r3, [pc, #72]	@ (800d36c <ResetMacParameters+0x23c>)
 800d322:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d326:	695b      	ldr	r3, [r3, #20]
 800d328:	647b      	str	r3, [r7, #68]	@ 0x44
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800d32a:	4b14      	ldr	r3, [pc, #80]	@ (800d37c <ResetMacParameters+0x24c>)
 800d32c:	61fb      	str	r3, [r7, #28]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800d32e:	4b14      	ldr	r3, [pc, #80]	@ (800d380 <ResetMacParameters+0x250>)
 800d330:	623b      	str	r3, [r7, #32]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800d332:	4b14      	ldr	r3, [pc, #80]	@ (800d384 <ResetMacParameters+0x254>)
 800d334:	627b      	str	r3, [r7, #36]	@ 0x24
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800d336:	4b14      	ldr	r3, [pc, #80]	@ (800d388 <ResetMacParameters+0x258>)
 800d338:	62bb      	str	r3, [r7, #40]	@ 0x28
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 800d33a:	4b14      	ldr	r3, [pc, #80]	@ (800d38c <ResetMacParameters+0x25c>)
 800d33c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800d33e:	4b14      	ldr	r3, [pc, #80]	@ (800d390 <ResetMacParameters+0x260>)
 800d340:	633b      	str	r3, [r7, #48]	@ 0x30
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 800d342:	4b14      	ldr	r3, [pc, #80]	@ (800d394 <ResetMacParameters+0x264>)
 800d344:	637b      	str	r3, [r7, #52]	@ 0x34
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800d346:	4b14      	ldr	r3, [pc, #80]	@ (800d398 <ResetMacParameters+0x268>)
 800d348:	63bb      	str	r3, [r7, #56]	@ 0x38
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 800d34a:	4b14      	ldr	r3, [pc, #80]	@ (800d39c <ResetMacParameters+0x26c>)
 800d34c:	63fb      	str	r3, [r7, #60]	@ 0x3c
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800d34e:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800d352:	f107 031c 	add.w	r3, r7, #28
 800d356:	4a12      	ldr	r2, [pc, #72]	@ (800d3a0 <ResetMacParameters+0x270>)
 800d358:	4618      	mov	r0, r3
 800d35a:	f002 f90e 	bl	800f57a <LoRaMacClassBInit>
}
 800d35e:	bf00      	nop
 800d360:	3748      	adds	r7, #72	@ 0x48
 800d362:	46bd      	mov	sp, r7
 800d364:	bdb0      	pop	{r4, r5, r7, pc}
 800d366:	bf00      	nop
 800d368:	20008000 	.word	0x20008000
 800d36c:	20000a28 	.word	0x20000a28
 800d370:	20008224 	.word	0x20008224
 800d374:	20008238 	.word	0x20008238
 800d378:	20000f44 	.word	0x20000f44
 800d37c:	20000e90 	.word	0x20000e90
 800d380:	20000e48 	.word	0x20000e48
 800d384:	20000e7c 	.word	0x20000e7c
 800d388:	20000eb9 	.word	0x20000eb9
 800d38c:	200080e4 	.word	0x200080e4
 800d390:	20008048 	.word	0x20008048
 800d394:	2000804c 	.word	0x2000804c
 800d398:	200080e8 	.word	0x200080e8
 800d39c:	20008130 	.word	0x20008130
 800d3a0:	200085b4 	.word	0x200085b4

0800d3a4 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	b082      	sub	sp, #8
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
 800d3ac:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 800d3ae:	6878      	ldr	r0, [r7, #4]
 800d3b0:	f00c ff8e 	bl	801a2d0 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 800d3b4:	4b11      	ldr	r3, [pc, #68]	@ (800d3fc <RxWindowSetup+0x58>)
 800d3b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d3b8:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800d3ba:	4b11      	ldr	r3, [pc, #68]	@ (800d400 <RxWindowSetup+0x5c>)
 800d3bc:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800d3c0:	4a10      	ldr	r2, [pc, #64]	@ (800d404 <RxWindowSetup+0x60>)
 800d3c2:	6839      	ldr	r1, [r7, #0]
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	f004 f96a 	bl	801169e <RegionRxConfig>
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d010      	beq.n	800d3f2 <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800d3d0:	4b0d      	ldr	r3, [pc, #52]	@ (800d408 <RxWindowSetup+0x64>)
 800d3d2:	f893 2424 	ldrb.w	r2, [r3, #1060]	@ 0x424
 800d3d6:	4b0c      	ldr	r3, [pc, #48]	@ (800d408 <RxWindowSetup+0x64>)
 800d3d8:	f883 246a 	strb.w	r2, [r3, #1130]	@ 0x46a
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 800d3dc:	4b07      	ldr	r3, [pc, #28]	@ (800d3fc <RxWindowSetup+0x58>)
 800d3de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3e0:	4a07      	ldr	r2, [pc, #28]	@ (800d400 <RxWindowSetup+0x5c>)
 800d3e2:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800d3e4:	4610      	mov	r0, r2
 800d3e6:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	7cda      	ldrb	r2, [r3, #19]
 800d3ec:	4b06      	ldr	r3, [pc, #24]	@ (800d408 <RxWindowSetup+0x64>)
 800d3ee:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
    }
}
 800d3f2:	bf00      	nop
 800d3f4:	3708      	adds	r7, #8
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	bd80      	pop	{r7, pc}
 800d3fa:	bf00      	nop
 800d3fc:	080210e8 	.word	0x080210e8
 800d400:	20008000 	.word	0x20008000
 800d404:	20000e4c 	.word	0x20000e4c
 800d408:	20000a28 	.word	0x20000a28

0800d40c <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 800d40c:	b590      	push	{r4, r7, lr}
 800d40e:	b083      	sub	sp, #12
 800d410:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800d412:	4b1e      	ldr	r3, [pc, #120]	@ (800d48c <OpenContinuousRxCWindow+0x80>)
 800d414:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 800d418:	4b1c      	ldr	r3, [pc, #112]	@ (800d48c <OpenContinuousRxCWindow+0x80>)
 800d41a:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800d41e:	b259      	sxtb	r1, r3
 800d420:	4b1a      	ldr	r3, [pc, #104]	@ (800d48c <OpenContinuousRxCWindow+0x80>)
 800d422:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 800d426:	4b19      	ldr	r3, [pc, #100]	@ (800d48c <OpenContinuousRxCWindow+0x80>)
 800d428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d42a:	4c19      	ldr	r4, [pc, #100]	@ (800d490 <OpenContinuousRxCWindow+0x84>)
 800d42c:	9400      	str	r4, [sp, #0]
 800d42e:	f004 f913 	bl	8011658 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800d432:	4b18      	ldr	r3, [pc, #96]	@ (800d494 <OpenContinuousRxCWindow+0x88>)
 800d434:	2202      	movs	r2, #2
 800d436:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800d43a:	4b14      	ldr	r3, [pc, #80]	@ (800d48c <OpenContinuousRxCWindow+0x80>)
 800d43c:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 800d440:	4b14      	ldr	r3, [pc, #80]	@ (800d494 <OpenContinuousRxCWindow+0x88>)
 800d442:	f883 23fc 	strb.w	r2, [r3, #1020]	@ 0x3fc
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800d446:	4b13      	ldr	r3, [pc, #76]	@ (800d494 <OpenContinuousRxCWindow+0x88>)
 800d448:	2201      	movs	r2, #1
 800d44a:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800d44e:	4b0f      	ldr	r3, [pc, #60]	@ (800d48c <OpenContinuousRxCWindow+0x80>)
 800d450:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800d454:	4a10      	ldr	r2, [pc, #64]	@ (800d498 <OpenContinuousRxCWindow+0x8c>)
 800d456:	490e      	ldr	r1, [pc, #56]	@ (800d490 <OpenContinuousRxCWindow+0x84>)
 800d458:	4618      	mov	r0, r3
 800d45a:	f004 f920 	bl	801169e <RegionRxConfig>
 800d45e:	4603      	mov	r3, r0
 800d460:	2b00      	cmp	r3, #0
 800d462:	d00f      	beq.n	800d484 <OpenContinuousRxCWindow+0x78>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800d464:	4b0b      	ldr	r3, [pc, #44]	@ (800d494 <OpenContinuousRxCWindow+0x88>)
 800d466:	f893 2424 	ldrb.w	r2, [r3, #1060]	@ 0x424
 800d46a:	4b0a      	ldr	r3, [pc, #40]	@ (800d494 <OpenContinuousRxCWindow+0x88>)
 800d46c:	f883 246a 	strb.w	r2, [r3, #1130]	@ 0x46a
        Radio.Rx( 0 ); // Continuous mode
 800d470:	4b0a      	ldr	r3, [pc, #40]	@ (800d49c <OpenContinuousRxCWindow+0x90>)
 800d472:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d474:	2000      	movs	r0, #0
 800d476:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800d478:	4b06      	ldr	r3, [pc, #24]	@ (800d494 <OpenContinuousRxCWindow+0x88>)
 800d47a:	f893 23fb 	ldrb.w	r2, [r3, #1019]	@ 0x3fb
 800d47e:	4b05      	ldr	r3, [pc, #20]	@ (800d494 <OpenContinuousRxCWindow+0x88>)
 800d480:	f883 2490 	strb.w	r2, [r3, #1168]	@ 0x490
    }
}
 800d484:	bf00      	nop
 800d486:	3704      	adds	r7, #4
 800d488:	46bd      	mov	sp, r7
 800d48a:	bd90      	pop	{r4, r7, pc}
 800d48c:	20008000 	.word	0x20008000
 800d490:	20000e10 	.word	0x20000e10
 800d494:	20000a28 	.word	0x20000a28
 800d498:	20000e4c 	.word	0x20000e4c
 800d49c:	080210e8 	.word	0x080210e8

0800d4a0 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b088      	sub	sp, #32
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	60f8      	str	r0, [r7, #12]
 800d4a8:	60b9      	str	r1, [r7, #8]
 800d4aa:	603b      	str	r3, [r7, #0]
 800d4ac:	4613      	mov	r3, r2
 800d4ae:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 800d4b0:	4b81      	ldr	r3, [pc, #516]	@ (800d6b8 <PrepareFrame+0x218>)
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 800d4b6:	4b80      	ldr	r3, [pc, #512]	@ (800d6b8 <PrepareFrame+0x218>)
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
    uint32_t fCntUp = 0;
 800d4be:	2300      	movs	r3, #0
 800d4c0:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 800d4ca:	683b      	ldr	r3, [r7, #0]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d101      	bne.n	800d4d4 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	853b      	strh	r3, [r7, #40]	@ 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800d4d4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d4d6:	461a      	mov	r2, r3
 800d4d8:	6839      	ldr	r1, [r7, #0]
 800d4da:	4878      	ldr	r0, [pc, #480]	@ (800d6bc <PrepareFrame+0x21c>)
 800d4dc:	f009 fab9 	bl	8016a52 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800d4e0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d4e2:	b2da      	uxtb	r2, r3
 800d4e4:	4b74      	ldr	r3, [pc, #464]	@ (800d6b8 <PrepareFrame+0x218>)
 800d4e6:	f883 2237 	strb.w	r2, [r3, #567]	@ 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	781a      	ldrb	r2, [r3, #0]
 800d4ee:	4b72      	ldr	r3, [pc, #456]	@ (800d6b8 <PrepareFrame+0x218>)
 800d4f0:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	781b      	ldrb	r3, [r3, #0]
 800d4f6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800d4fa:	b2db      	uxtb	r3, r3
 800d4fc:	2b07      	cmp	r3, #7
 800d4fe:	f000 80b9 	beq.w	800d674 <PrepareFrame+0x1d4>
 800d502:	2b07      	cmp	r3, #7
 800d504:	f300 80ce 	bgt.w	800d6a4 <PrepareFrame+0x204>
 800d508:	2b02      	cmp	r3, #2
 800d50a:	d006      	beq.n	800d51a <PrepareFrame+0x7a>
 800d50c:	2b04      	cmp	r3, #4
 800d50e:	f040 80c9 	bne.w	800d6a4 <PrepareFrame+0x204>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 800d512:	4b69      	ldr	r3, [pc, #420]	@ (800d6b8 <PrepareFrame+0x218>)
 800d514:	2201      	movs	r2, #1
 800d516:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800d51a:	4b67      	ldr	r3, [pc, #412]	@ (800d6b8 <PrepareFrame+0x218>)
 800d51c:	2204      	movs	r2, #4
 800d51e:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800d522:	4b65      	ldr	r3, [pc, #404]	@ (800d6b8 <PrepareFrame+0x218>)
 800d524:	4a66      	ldr	r2, [pc, #408]	@ (800d6c0 <PrepareFrame+0x220>)
 800d526:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800d52a:	4b63      	ldr	r3, [pc, #396]	@ (800d6b8 <PrepareFrame+0x218>)
 800d52c:	22ff      	movs	r2, #255	@ 0xff
 800d52e:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	781a      	ldrb	r2, [r3, #0]
 800d536:	4b60      	ldr	r3, [pc, #384]	@ (800d6b8 <PrepareFrame+0x218>)
 800d538:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800d53c:	4a5e      	ldr	r2, [pc, #376]	@ (800d6b8 <PrepareFrame+0x218>)
 800d53e:	79fb      	ldrb	r3, [r7, #7]
 800d540:	f882 3128 	strb.w	r3, [r2, #296]	@ 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800d544:	4b5f      	ldr	r3, [pc, #380]	@ (800d6c4 <PrepareFrame+0x224>)
 800d546:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800d54a:	4a5b      	ldr	r2, [pc, #364]	@ (800d6b8 <PrepareFrame+0x218>)
 800d54c:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800d550:	68bb      	ldr	r3, [r7, #8]
 800d552:	781a      	ldrb	r2, [r3, #0]
 800d554:	4b58      	ldr	r3, [pc, #352]	@ (800d6b8 <PrepareFrame+0x218>)
 800d556:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800d55a:	4b57      	ldr	r3, [pc, #348]	@ (800d6b8 <PrepareFrame+0x218>)
 800d55c:	f893 2237 	ldrb.w	r2, [r3, #567]	@ 0x237
 800d560:	4b55      	ldr	r3, [pc, #340]	@ (800d6b8 <PrepareFrame+0x218>)
 800d562:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800d566:	4b54      	ldr	r3, [pc, #336]	@ (800d6b8 <PrepareFrame+0x218>)
 800d568:	4a54      	ldr	r2, [pc, #336]	@ (800d6bc <PrepareFrame+0x21c>)
 800d56a:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800d56e:	f107 0318 	add.w	r3, r7, #24
 800d572:	4618      	mov	r0, r3
 800d574:	f003 f950 	bl	8010818 <LoRaMacCryptoGetFCntUp>
 800d578:	4603      	mov	r3, r0
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d001      	beq.n	800d582 <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800d57e:	2312      	movs	r3, #18
 800d580:	e096      	b.n	800d6b0 <PrepareFrame+0x210>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800d582:	69bb      	ldr	r3, [r7, #24]
 800d584:	b29a      	uxth	r2, r3
 800d586:	4b4c      	ldr	r3, [pc, #304]	@ (800d6b8 <PrepareFrame+0x218>)
 800d588:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116

            // Reset confirm parameters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            MacCtx.McpsConfirm.NbTrans = 0;
 800d58c:	4b4a      	ldr	r3, [pc, #296]	@ (800d6b8 <PrepareFrame+0x218>)
 800d58e:	2200      	movs	r2, #0
 800d590:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 800d594:	4b48      	ldr	r3, [pc, #288]	@ (800d6b8 <PrepareFrame+0x218>)
 800d596:	2200      	movs	r2, #0
 800d598:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800d59c:	69bb      	ldr	r3, [r7, #24]
 800d59e:	4a46      	ldr	r2, [pc, #280]	@ (800d6b8 <PrepareFrame+0x218>)
 800d5a0:	f8c2 344c 	str.w	r3, [r2, #1100]	@ 0x44c

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800d5a4:	f107 0314 	add.w	r3, r7, #20
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	f002 fb05 	bl	800fbb8 <LoRaMacCommandsGetSizeSerializedCmds>
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d001      	beq.n	800d5b8 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d5b4:	2313      	movs	r3, #19
 800d5b6:	e07b      	b.n	800d6b0 <PrepareFrame+0x210>
            }

            if( macCmdsSize > 0 )
 800d5b8:	697b      	ldr	r3, [r7, #20]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d074      	beq.n	800d6a8 <PrepareFrame+0x208>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 800d5be:	4b41      	ldr	r3, [pc, #260]	@ (800d6c4 <PrepareFrame+0x224>)
 800d5c0:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	f7fe fd1d 	bl	800c004 <GetMaxAppPayloadWithoutFOptsLength>
 800d5ca:	4603      	mov	r3, r0
 800d5cc:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800d5ce:	4b3a      	ldr	r3, [pc, #232]	@ (800d6b8 <PrepareFrame+0x218>)
 800d5d0:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d01d      	beq.n	800d614 <PrepareFrame+0x174>
 800d5d8:	697b      	ldr	r3, [r7, #20]
 800d5da:	2b0f      	cmp	r3, #15
 800d5dc:	d81a      	bhi.n	800d614 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800d5de:	f107 0314 	add.w	r3, r7, #20
 800d5e2:	4a39      	ldr	r2, [pc, #228]	@ (800d6c8 <PrepareFrame+0x228>)
 800d5e4:	4619      	mov	r1, r3
 800d5e6:	200f      	movs	r0, #15
 800d5e8:	f002 fafc 	bl	800fbe4 <LoRaMacCommandsSerializeCmds>
 800d5ec:	4603      	mov	r3, r0
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d001      	beq.n	800d5f6 <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d5f2:	2313      	movs	r3, #19
 800d5f4:	e05c      	b.n	800d6b0 <PrepareFrame+0x210>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800d5f6:	697b      	ldr	r3, [r7, #20]
 800d5f8:	f003 030f 	and.w	r3, r3, #15
 800d5fc:	b2d9      	uxtb	r1, r3
 800d5fe:	68ba      	ldr	r2, [r7, #8]
 800d600:	7813      	ldrb	r3, [r2, #0]
 800d602:	f361 0303 	bfi	r3, r1, #0, #4
 800d606:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800d608:	68bb      	ldr	r3, [r7, #8]
 800d60a:	781a      	ldrb	r2, [r3, #0]
 800d60c:	4b2a      	ldr	r3, [pc, #168]	@ (800d6b8 <PrepareFrame+0x218>)
 800d60e:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 800d612:	e049      	b.n	800d6a8 <PrepareFrame+0x208>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800d614:	4b28      	ldr	r3, [pc, #160]	@ (800d6b8 <PrepareFrame+0x218>)
 800d616:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d010      	beq.n	800d640 <PrepareFrame+0x1a0>
 800d61e:	697b      	ldr	r3, [r7, #20]
 800d620:	2b0f      	cmp	r3, #15
 800d622:	d90d      	bls.n	800d640 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800d624:	7ffb      	ldrb	r3, [r7, #31]
 800d626:	f107 0114 	add.w	r1, r7, #20
 800d62a:	4a28      	ldr	r2, [pc, #160]	@ (800d6cc <PrepareFrame+0x22c>)
 800d62c:	4618      	mov	r0, r3
 800d62e:	f002 fad9 	bl	800fbe4 <LoRaMacCommandsSerializeCmds>
 800d632:	4603      	mov	r3, r0
 800d634:	2b00      	cmp	r3, #0
 800d636:	d001      	beq.n	800d63c <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d638:	2313      	movs	r3, #19
 800d63a:	e039      	b.n	800d6b0 <PrepareFrame+0x210>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 800d63c:	230a      	movs	r3, #10
 800d63e:	e037      	b.n	800d6b0 <PrepareFrame+0x210>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800d640:	7ffb      	ldrb	r3, [r7, #31]
 800d642:	f107 0114 	add.w	r1, r7, #20
 800d646:	4a21      	ldr	r2, [pc, #132]	@ (800d6cc <PrepareFrame+0x22c>)
 800d648:	4618      	mov	r0, r3
 800d64a:	f002 facb 	bl	800fbe4 <LoRaMacCommandsSerializeCmds>
 800d64e:	4603      	mov	r3, r0
 800d650:	2b00      	cmp	r3, #0
 800d652:	d001      	beq.n	800d658 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800d654:	2313      	movs	r3, #19
 800d656:	e02b      	b.n	800d6b0 <PrepareFrame+0x210>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800d658:	4b17      	ldr	r3, [pc, #92]	@ (800d6b8 <PrepareFrame+0x218>)
 800d65a:	2200      	movs	r2, #0
 800d65c:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 800d660:	4b15      	ldr	r3, [pc, #84]	@ (800d6b8 <PrepareFrame+0x218>)
 800d662:	4a1a      	ldr	r2, [pc, #104]	@ (800d6cc <PrepareFrame+0x22c>)
 800d664:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800d668:	697b      	ldr	r3, [r7, #20]
 800d66a:	b2da      	uxtb	r2, r3
 800d66c:	4b12      	ldr	r3, [pc, #72]	@ (800d6b8 <PrepareFrame+0x218>)
 800d66e:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            break;
 800d672:	e019      	b.n	800d6a8 <PrepareFrame+0x208>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d018      	beq.n	800d6ac <PrepareFrame+0x20c>
 800d67a:	4b0f      	ldr	r3, [pc, #60]	@ (800d6b8 <PrepareFrame+0x218>)
 800d67c:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800d680:	2b00      	cmp	r3, #0
 800d682:	d013      	beq.n	800d6ac <PrepareFrame+0x20c>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800d684:	4812      	ldr	r0, [pc, #72]	@ (800d6d0 <PrepareFrame+0x230>)
 800d686:	4b0c      	ldr	r3, [pc, #48]	@ (800d6b8 <PrepareFrame+0x218>)
 800d688:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800d68c:	461a      	mov	r2, r3
 800d68e:	6839      	ldr	r1, [r7, #0]
 800d690:	f009 f9df 	bl	8016a52 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800d694:	4b08      	ldr	r3, [pc, #32]	@ (800d6b8 <PrepareFrame+0x218>)
 800d696:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800d69a:	3301      	adds	r3, #1
 800d69c:	b29a      	uxth	r2, r3
 800d69e:	4b06      	ldr	r3, [pc, #24]	@ (800d6b8 <PrepareFrame+0x218>)
 800d6a0:	801a      	strh	r2, [r3, #0]
            }
            break;
 800d6a2:	e003      	b.n	800d6ac <PrepareFrame+0x20c>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800d6a4:	2302      	movs	r3, #2
 800d6a6:	e003      	b.n	800d6b0 <PrepareFrame+0x210>
            break;
 800d6a8:	bf00      	nop
 800d6aa:	e000      	b.n	800d6ae <PrepareFrame+0x20e>
            break;
 800d6ac:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 800d6ae:	2300      	movs	r3, #0
}
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	3720      	adds	r7, #32
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	bd80      	pop	{r7, pc}
 800d6b8:	20000a28 	.word	0x20000a28
 800d6bc:	20000b60 	.word	0x20000b60
 800d6c0:	20000a2a 	.word	0x20000a2a
 800d6c4:	20008000 	.word	0x20008000
 800d6c8:	20000b40 	.word	0x20000b40
 800d6cc:	20000ec4 	.word	0x20000ec4
 800d6d0:	20000a2b 	.word	0x20000a2b

0800d6d4 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b08a      	sub	sp, #40	@ 0x28
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	4603      	mov	r3, r0
 800d6dc:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800d6de:	2303      	movs	r3, #3
 800d6e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 800d6e8:	79fb      	ldrb	r3, [r7, #7]
 800d6ea:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800d6ec:	4b4b      	ldr	r3, [pc, #300]	@ (800d81c <SendFrameOnChannel+0x148>)
 800d6ee:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800d6f2:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800d6f4:	4b49      	ldr	r3, [pc, #292]	@ (800d81c <SendFrameOnChannel+0x148>)
 800d6f6:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800d6fa:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800d6fc:	4b47      	ldr	r3, [pc, #284]	@ (800d81c <SendFrameOnChannel+0x148>)
 800d6fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d702:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800d704:	4b45      	ldr	r3, [pc, #276]	@ (800d81c <SendFrameOnChannel+0x148>)
 800d706:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d70a:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800d70c:	4b44      	ldr	r3, [pc, #272]	@ (800d820 <SendFrameOnChannel+0x14c>)
 800d70e:	881b      	ldrh	r3, [r3, #0]
 800d710:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800d712:	4b42      	ldr	r3, [pc, #264]	@ (800d81c <SendFrameOnChannel+0x148>)
 800d714:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800d718:	77bb      	strb	r3, [r7, #30]
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800d71a:	4b40      	ldr	r3, [pc, #256]	@ (800d81c <SendFrameOnChannel+0x148>)
 800d71c:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800d720:	f107 020f 	add.w	r2, r7, #15
 800d724:	f107 0110 	add.w	r1, r7, #16
 800d728:	4b3e      	ldr	r3, [pc, #248]	@ (800d824 <SendFrameOnChannel+0x150>)
 800d72a:	f003 ffd6 	bl	80116da <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800d72e:	4b3c      	ldr	r3, [pc, #240]	@ (800d820 <SendFrameOnChannel+0x14c>)
 800d730:	2201      	movs	r2, #1
 800d732:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800d736:	4b39      	ldr	r3, [pc, #228]	@ (800d81c <SendFrameOnChannel+0x148>)
 800d738:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800d73c:	b2da      	uxtb	r2, r3
 800d73e:	4b38      	ldr	r3, [pc, #224]	@ (800d820 <SendFrameOnChannel+0x14c>)
 800d740:	f883 2442 	strb.w	r2, [r3, #1090]	@ 0x442
    MacCtx.McpsConfirm.TxPower = txPower;
 800d744:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800d748:	4b35      	ldr	r3, [pc, #212]	@ (800d820 <SendFrameOnChannel+0x14c>)
 800d74a:	f883 2443 	strb.w	r2, [r3, #1091]	@ 0x443
    MacCtx.McpsConfirm.Channel = channel;
 800d74e:	79fb      	ldrb	r3, [r7, #7]
 800d750:	4a33      	ldr	r2, [pc, #204]	@ (800d820 <SendFrameOnChannel+0x14c>)
 800d752:	f8c2 3450 	str.w	r3, [r2, #1104]	@ 0x450

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800d756:	4b32      	ldr	r3, [pc, #200]	@ (800d820 <SendFrameOnChannel+0x14c>)
 800d758:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 800d75c:	4a30      	ldr	r2, [pc, #192]	@ (800d820 <SendFrameOnChannel+0x14c>)
 800d75e:	f8c2 3448 	str.w	r3, [r2, #1096]	@ 0x448
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800d762:	4b2f      	ldr	r3, [pc, #188]	@ (800d820 <SendFrameOnChannel+0x14c>)
 800d764:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 800d768:	4a2d      	ldr	r2, [pc, #180]	@ (800d820 <SendFrameOnChannel+0x14c>)
 800d76a:	f8c2 3458 	str.w	r3, [r2, #1112]	@ 0x458

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800d76e:	f001 ff70 	bl	800f652 <LoRaMacClassBIsBeaconModeActive>
 800d772:	4603      	mov	r3, r0
 800d774:	2b00      	cmp	r3, #0
 800d776:	d00b      	beq.n	800d790 <SendFrameOnChannel+0xbc>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800d778:	4b29      	ldr	r3, [pc, #164]	@ (800d820 <SendFrameOnChannel+0x14c>)
 800d77a:	f8d3 341c 	ldr.w	r3, [r3, #1052]	@ 0x41c
 800d77e:	4618      	mov	r0, r3
 800d780:	f001 ffd2 	bl	800f728 <LoRaMacClassBIsUplinkCollision>
 800d784:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 800d786:	6a3b      	ldr	r3, [r7, #32]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d001      	beq.n	800d790 <SendFrameOnChannel+0xbc>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800d78c:	2310      	movs	r3, #16
 800d78e:	e040      	b.n	800d812 <SendFrameOnChannel+0x13e>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800d790:	4b22      	ldr	r3, [pc, #136]	@ (800d81c <SendFrameOnChannel+0x148>)
 800d792:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800d796:	2b01      	cmp	r3, #1
 800d798:	d101      	bne.n	800d79e <SendFrameOnChannel+0xca>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 800d79a:	f001 ffcf 	bl	800f73c <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 800d79e:	f001 ff69 	bl	800f674 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 800d7a2:	4b1e      	ldr	r3, [pc, #120]	@ (800d81c <SendFrameOnChannel+0x148>)
 800d7a4:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800d7a8:	b2db      	uxtb	r3, r3
 800d7aa:	4a1d      	ldr	r2, [pc, #116]	@ (800d820 <SendFrameOnChannel+0x14c>)
 800d7ac:	f892 241b 	ldrb.w	r2, [r2, #1051]	@ 0x41b
 800d7b0:	4611      	mov	r1, r2
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	f7ff fc2c 	bl	800d010 <SecureFrame>
 800d7b8:	4603      	mov	r3, r0
 800d7ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if( status != LORAMAC_STATUS_OK )
 800d7be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d002      	beq.n	800d7cc <SendFrameOnChannel+0xf8>
    {
        return status;
 800d7c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d7ca:	e022      	b.n	800d812 <SendFrameOnChannel+0x13e>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800d7cc:	4b14      	ldr	r3, [pc, #80]	@ (800d820 <SendFrameOnChannel+0x14c>)
 800d7ce:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800d7d2:	f043 0302 	orr.w	r3, r3, #2
 800d7d6:	4a12      	ldr	r2, [pc, #72]	@ (800d820 <SendFrameOnChannel+0x14c>)
 800d7d8:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.ChannelsNbTransCounter++;
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.ChannelsNbTransCounter++;
 800d7dc:	4b10      	ldr	r3, [pc, #64]	@ (800d820 <SendFrameOnChannel+0x14c>)
 800d7de:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800d7e2:	3301      	adds	r3, #1
 800d7e4:	b2da      	uxtb	r2, r3
 800d7e6:	4b0e      	ldr	r3, [pc, #56]	@ (800d820 <SendFrameOnChannel+0x14c>)
 800d7e8:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800d7ec:	4b0c      	ldr	r3, [pc, #48]	@ (800d820 <SendFrameOnChannel+0x14c>)
 800d7ee:	f893 2418 	ldrb.w	r2, [r3, #1048]	@ 0x418
 800d7f2:	4b0b      	ldr	r3, [pc, #44]	@ (800d820 <SendFrameOnChannel+0x14c>)
 800d7f4:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
    MacCtx.ResponseTimeoutStartTime = 0;
 800d7f8:	4b09      	ldr	r3, [pc, #36]	@ (800d820 <SendFrameOnChannel+0x14c>)
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	f8c3 2498 	str.w	r2, [r3, #1176]	@ 0x498
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800d800:	4b09      	ldr	r3, [pc, #36]	@ (800d828 <SendFrameOnChannel+0x154>)
 800d802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d804:	4a06      	ldr	r2, [pc, #24]	@ (800d820 <SendFrameOnChannel+0x14c>)
 800d806:	8812      	ldrh	r2, [r2, #0]
 800d808:	b2d2      	uxtb	r2, r2
 800d80a:	4611      	mov	r1, r2
 800d80c:	4807      	ldr	r0, [pc, #28]	@ (800d82c <SendFrameOnChannel+0x158>)
 800d80e:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 800d810:	2300      	movs	r3, #0
}
 800d812:	4618      	mov	r0, r3
 800d814:	3728      	adds	r7, #40	@ 0x28
 800d816:	46bd      	mov	sp, r7
 800d818:	bd80      	pop	{r7, pc}
 800d81a:	bf00      	nop
 800d81c:	20008000 	.word	0x20008000
 800d820:	20000a28 	.word	0x20000a28
 800d824:	20000e44 	.word	0x20000e44
 800d828:	080210e8 	.word	0x080210e8
 800d82c:	20000a2a 	.word	0x20000a2a

0800d830 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 800d830:	b580      	push	{r7, lr}
 800d832:	b082      	sub	sp, #8
 800d834:	af00      	add	r7, sp, #0
 800d836:	4603      	mov	r3, r0
 800d838:	6039      	str	r1, [r7, #0]
 800d83a:	80fb      	strh	r3, [r7, #6]
 800d83c:	4613      	mov	r3, r2
 800d83e:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 800d840:	4b09      	ldr	r3, [pc, #36]	@ (800d868 <SetTxContinuousWave+0x38>)
 800d842:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d844:	f997 1005 	ldrsb.w	r1, [r7, #5]
 800d848:	88fa      	ldrh	r2, [r7, #6]
 800d84a:	6838      	ldr	r0, [r7, #0]
 800d84c:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800d84e:	4b07      	ldr	r3, [pc, #28]	@ (800d86c <SetTxContinuousWave+0x3c>)
 800d850:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800d854:	f043 0302 	orr.w	r3, r3, #2
 800d858:	4a04      	ldr	r2, [pc, #16]	@ (800d86c <SetTxContinuousWave+0x3c>)
 800d85a:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 800d85e:	2300      	movs	r3, #0
}
 800d860:	4618      	mov	r0, r3
 800d862:	3708      	adds	r7, #8
 800d864:	46bd      	mov	sp, r7
 800d866:	bd80      	pop	{r7, pc}
 800d868:	080210e8 	.word	0x080210e8
 800d86c:	20000a28 	.word	0x20000a28

0800d870 <RestoreNvmData>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b082      	sub	sp, #8
 800d874:	af00      	add	r7, sp, #0
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    uint32_t crc = 0;
 800d876:	2300      	movs	r3, #0
 800d878:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 800d87a:	4b49      	ldr	r3, [pc, #292]	@ (800d9a0 <RestoreNvmData+0x130>)
 800d87c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800d880:	2b01      	cmp	r3, #1
 800d882:	d001      	beq.n	800d888 <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 800d884:	2301      	movs	r3, #1
 800d886:	e087      	b.n	800d998 <RestoreNvmData+0x128>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 800d888:	2124      	movs	r1, #36	@ 0x24
 800d88a:	4846      	ldr	r0, [pc, #280]	@ (800d9a4 <RestoreNvmData+0x134>)
 800d88c:	f009 f936 	bl	8016afc <Crc32>
 800d890:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 800d892:	4b44      	ldr	r3, [pc, #272]	@ (800d9a4 <RestoreNvmData+0x134>)
 800d894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d896:	687a      	ldr	r2, [r7, #4]
 800d898:	429a      	cmp	r2, r3
 800d89a:	d001      	beq.n	800d8a0 <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800d89c:	2317      	movs	r3, #23
 800d89e:	e07b      	b.n	800d998 <RestoreNvmData+0x128>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 800d8a0:	211c      	movs	r1, #28
 800d8a2:	4841      	ldr	r0, [pc, #260]	@ (800d9a8 <RestoreNvmData+0x138>)
 800d8a4:	f009 f92a 	bl	8016afc <Crc32>
 800d8a8:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 800d8aa:	4b3e      	ldr	r3, [pc, #248]	@ (800d9a4 <RestoreNvmData+0x134>)
 800d8ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d8ae:	687a      	ldr	r2, [r7, #4]
 800d8b0:	429a      	cmp	r2, r3
 800d8b2:	d001      	beq.n	800d8b8 <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800d8b4:	2317      	movs	r3, #23
 800d8b6:	e06f      	b.n	800d998 <RestoreNvmData+0x128>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 800d8b8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800d8bc:	483b      	ldr	r0, [pc, #236]	@ (800d9ac <RestoreNvmData+0x13c>)
 800d8be:	f009 f91d 	bl	8016afc <Crc32>
 800d8c2:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 800d8c4:	4b37      	ldr	r3, [pc, #220]	@ (800d9a4 <RestoreNvmData+0x134>)
 800d8c6:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800d8ca:	687a      	ldr	r2, [r7, #4]
 800d8cc:	429a      	cmp	r2, r3
 800d8ce:	d001      	beq.n	800d8d4 <RestoreNvmData+0x64>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800d8d0:	2317      	movs	r3, #23
 800d8d2:	e061      	b.n	800d998 <RestoreNvmData+0x128>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 800d8d4:	21d4      	movs	r1, #212	@ 0xd4
 800d8d6:	4836      	ldr	r0, [pc, #216]	@ (800d9b0 <RestoreNvmData+0x140>)
 800d8d8:	f009 f910 	bl	8016afc <Crc32>
 800d8dc:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 800d8de:	4b31      	ldr	r3, [pc, #196]	@ (800d9a4 <RestoreNvmData+0x134>)
 800d8e0:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 800d8e4:	687a      	ldr	r2, [r7, #4]
 800d8e6:	429a      	cmp	r2, r3
 800d8e8:	d001      	beq.n	800d8ee <RestoreNvmData+0x7e>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800d8ea:	2317      	movs	r3, #23
 800d8ec:	e054      	b.n	800d998 <RestoreNvmData+0x128>
    }

    // RegionGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 800d8ee:	2110      	movs	r1, #16
 800d8f0:	4830      	ldr	r0, [pc, #192]	@ (800d9b4 <RestoreNvmData+0x144>)
 800d8f2:	f009 f903 	bl	8016afc <Crc32>
 800d8f6:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 800d8f8:	4b2a      	ldr	r3, [pc, #168]	@ (800d9a4 <RestoreNvmData+0x134>)
 800d8fa:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 800d8fe:	687a      	ldr	r2, [r7, #4]
 800d900:	429a      	cmp	r2, r3
 800d902:	d001      	beq.n	800d908 <RestoreNvmData+0x98>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800d904:	2317      	movs	r3, #23
 800d906:	e047      	b.n	800d998 <RestoreNvmData+0x128>
    }

    // RegionGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup2), sizeof( NvmBackup.RegionGroup2 ) -
 800d908:	f44f 715e 	mov.w	r1, #888	@ 0x378
 800d90c:	482a      	ldr	r0, [pc, #168]	@ (800d9b8 <RestoreNvmData+0x148>)
 800d90e:	f009 f8f5 	bl	8016afc <Crc32>
 800d912:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup2.Crc32 ) );
    if( crc != NvmBackup.RegionGroup2.Crc32 )
 800d914:	4b23      	ldr	r3, [pc, #140]	@ (800d9a4 <RestoreNvmData+0x134>)
 800d916:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	@ 0x5b0
 800d91a:	687a      	ldr	r2, [r7, #4]
 800d91c:	429a      	cmp	r2, r3
 800d91e:	d001      	beq.n	800d924 <RestoreNvmData+0xb4>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800d920:	2317      	movs	r3, #23
 800d922:	e039      	b.n	800d998 <RestoreNvmData+0x128>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 800d924:	2114      	movs	r1, #20
 800d926:	4825      	ldr	r0, [pc, #148]	@ (800d9bc <RestoreNvmData+0x14c>)
 800d928:	f009 f8e8 	bl	8016afc <Crc32>
 800d92c:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 800d92e:	4b1d      	ldr	r3, [pc, #116]	@ (800d9a4 <RestoreNvmData+0x134>)
 800d930:	f8d3 35c8 	ldr.w	r3, [r3, #1480]	@ 0x5c8
 800d934:	687a      	ldr	r2, [r7, #4]
 800d936:	429a      	cmp	r2, r3
 800d938:	d001      	beq.n	800d93e <RestoreNvmData+0xce>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800d93a:	2317      	movs	r3, #23
 800d93c:	e02c      	b.n	800d998 <RestoreNvmData+0x128>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 800d93e:	f240 52cc 	movw	r2, #1484	@ 0x5cc
 800d942:	4918      	ldr	r1, [pc, #96]	@ (800d9a4 <RestoreNvmData+0x134>)
 800d944:	481e      	ldr	r0, [pc, #120]	@ (800d9c0 <RestoreNvmData+0x150>)
 800d946:	f009 f884 	bl	8016a52 <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 800d94a:	f240 52cc 	movw	r2, #1484	@ 0x5cc
 800d94e:	2100      	movs	r1, #0
 800d950:	4814      	ldr	r0, [pc, #80]	@ (800d9a4 <RestoreNvmData+0x134>)
 800d952:	f009 f8b9 	bl	8016ac8 <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800d956:	4b12      	ldr	r3, [pc, #72]	@ (800d9a0 <RestoreNvmData+0x130>)
 800d958:	f893 241b 	ldrb.w	r2, [r3, #1051]	@ 0x41b
 800d95c:	4b10      	ldr	r3, [pc, #64]	@ (800d9a0 <RestoreNvmData+0x130>)
 800d95e:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800d962:	4b17      	ldr	r3, [pc, #92]	@ (800d9c0 <RestoreNvmData+0x150>)
 800d964:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d966:	4a0e      	ldr	r2, [pc, #56]	@ (800d9a0 <RestoreNvmData+0x130>)
 800d968:	f8c2 33ec 	str.w	r3, [r2, #1004]	@ 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800d96c:	4b14      	ldr	r3, [pc, #80]	@ (800d9c0 <RestoreNvmData+0x150>)
 800d96e:	f893 207d 	ldrb.w	r2, [r3, #125]	@ 0x7d
 800d972:	4b0b      	ldr	r3, [pc, #44]	@ (800d9a0 <RestoreNvmData+0x130>)
 800d974:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800d978:	4b09      	ldr	r3, [pc, #36]	@ (800d9a0 <RestoreNvmData+0x130>)
 800d97a:	2201      	movs	r2, #1
 800d97c:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800d980:	4b07      	ldr	r3, [pc, #28]	@ (800d9a0 <RestoreNvmData+0x130>)
 800d982:	2202      	movs	r2, #2
 800d984:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

    // The public/private network flag may change upon reloading MacGroup2
    // from NVM and we thus need to synchronize the radio. The same function
    // is invoked in LoRaMacInitialization.
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800d988:	4b0e      	ldr	r3, [pc, #56]	@ (800d9c4 <RestoreNvmData+0x154>)
 800d98a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d98c:	4a0c      	ldr	r2, [pc, #48]	@ (800d9c0 <RestoreNvmData+0x150>)
 800d98e:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 800d992:	4610      	mov	r0, r2
 800d994:	4798      	blx	r3
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

    return LORAMAC_STATUS_OK;
 800d996:	2300      	movs	r3, #0
}
 800d998:	4618      	mov	r0, r3
 800d99a:	3708      	adds	r7, #8
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bd80      	pop	{r7, pc}
 800d9a0:	20000a28 	.word	0x20000a28
 800d9a4:	200085cc 	.word	0x200085cc
 800d9a8:	200085f4 	.word	0x200085f4
 800d9ac:	20008614 	.word	0x20008614
 800d9b0:	20008718 	.word	0x20008718
 800d9b4:	200087f0 	.word	0x200087f0
 800d9b8:	20008804 	.word	0x20008804
 800d9bc:	20008b80 	.word	0x20008b80
 800d9c0:	20008000 	.word	0x20008000
 800d9c4:	080210e8 	.word	0x080210e8

0800d9c8 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 800d9c8:	b480      	push	{r7}
 800d9ca:	b083      	sub	sp, #12
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
 800d9d0:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d002      	beq.n	800d9de <DetermineFrameType+0x16>
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d101      	bne.n	800d9e2 <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800d9de:	2303      	movs	r3, #3
 800d9e0:	e03b      	b.n	800da5a <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	7b1b      	ldrb	r3, [r3, #12]
 800d9e6:	f003 030f 	and.w	r3, r3, #15
 800d9ea:	b2db      	uxtb	r3, r3
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d008      	beq.n	800da02 <DetermineFrameType+0x3a>
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d003      	beq.n	800da02 <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 800d9fa:	683b      	ldr	r3, [r7, #0]
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	701a      	strb	r2, [r3, #0]
 800da00:	e02a      	b.n	800da58 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d103      	bne.n	800da14 <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 800da0c:	683b      	ldr	r3, [r7, #0]
 800da0e:	2201      	movs	r2, #1
 800da10:	701a      	strb	r2, [r3, #0]
 800da12:	e021      	b.n	800da58 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	7b1b      	ldrb	r3, [r3, #12]
 800da18:	f003 030f 	and.w	r3, r3, #15
 800da1c:	b2db      	uxtb	r3, r3
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d108      	bne.n	800da34 <DetermineFrameType+0x6c>
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	f893 3020 	ldrb.w	r3, [r3, #32]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d103      	bne.n	800da34 <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	2202      	movs	r2, #2
 800da30:	701a      	strb	r2, [r3, #0]
 800da32:	e011      	b.n	800da58 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	7b1b      	ldrb	r3, [r3, #12]
 800da38:	f003 030f 	and.w	r3, r3, #15
 800da3c:	b2db      	uxtb	r3, r3
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d108      	bne.n	800da54 <DetermineFrameType+0x8c>
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	f893 3020 	ldrb.w	r3, [r3, #32]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d003      	beq.n	800da54 <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 800da4c:	683b      	ldr	r3, [r7, #0]
 800da4e:	2203      	movs	r2, #3
 800da50:	701a      	strb	r2, [r3, #0]
 800da52:	e001      	b.n	800da58 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 800da54:	2318      	movs	r3, #24
 800da56:	e000      	b.n	800da5a <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 800da58:	2300      	movs	r3, #0
}
 800da5a:	4618      	mov	r0, r3
 800da5c:	370c      	adds	r7, #12
 800da5e:	46bd      	mov	sp, r7
 800da60:	bc80      	pop	{r7}
 800da62:	4770      	bx	lr

0800da64 <CheckRetrans>:
    }
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
 800da64:	b480      	push	{r7}
 800da66:	b083      	sub	sp, #12
 800da68:	af00      	add	r7, sp, #0
 800da6a:	4603      	mov	r3, r0
 800da6c:	460a      	mov	r2, r1
 800da6e:	71fb      	strb	r3, [r7, #7]
 800da70:	4613      	mov	r3, r2
 800da72:	71bb      	strb	r3, [r7, #6]
    if( counter >= limit )
 800da74:	79fa      	ldrb	r2, [r7, #7]
 800da76:	79bb      	ldrb	r3, [r7, #6]
 800da78:	429a      	cmp	r2, r3
 800da7a:	d301      	bcc.n	800da80 <CheckRetrans+0x1c>
    {
        return true;
 800da7c:	2301      	movs	r3, #1
 800da7e:	e000      	b.n	800da82 <CheckRetrans+0x1e>
    }
    return false;
 800da80:	2300      	movs	r3, #0
}
 800da82:	4618      	mov	r0, r3
 800da84:	370c      	adds	r7, #12
 800da86:	46bd      	mov	sp, r7
 800da88:	bc80      	pop	{r7}
 800da8a:	4770      	bx	lr

0800da8c <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 800da90:	4b12      	ldr	r3, [pc, #72]	@ (800dadc <CheckRetransUnconfirmedUplink+0x50>)
 800da92:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800da96:	4a12      	ldr	r2, [pc, #72]	@ (800dae0 <CheckRetransUnconfirmedUplink+0x54>)
 800da98:	f892 2068 	ldrb.w	r2, [r2, #104]	@ 0x68
 800da9c:	4611      	mov	r1, r2
 800da9e:	4618      	mov	r0, r3
 800daa0:	f7ff ffe0 	bl	800da64 <CheckRetrans>
 800daa4:	4603      	mov	r3, r0
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d001      	beq.n	800daae <CheckRetransUnconfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 800daaa:	2301      	movs	r3, #1
 800daac:	e014      	b.n	800dad8 <CheckRetransUnconfirmedUplink+0x4c>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800daae:	4b0b      	ldr	r3, [pc, #44]	@ (800dadc <CheckRetransUnconfirmedUplink+0x50>)
 800dab0:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800dab4:	f003 0302 	and.w	r3, r3, #2
 800dab8:	b2db      	uxtb	r3, r3
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d00b      	beq.n	800dad6 <CheckRetransUnconfirmedUplink+0x4a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800dabe:	4b07      	ldr	r3, [pc, #28]	@ (800dadc <CheckRetransUnconfirmedUplink+0x50>)
 800dac0:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d004      	beq.n	800dad2 <CheckRetransUnconfirmedUplink+0x46>
            ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800dac8:	4b04      	ldr	r3, [pc, #16]	@ (800dadc <CheckRetransUnconfirmedUplink+0x50>)
 800daca:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800dace:	2b01      	cmp	r3, #1
 800dad0:	d101      	bne.n	800dad6 <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 800dad2:	2301      	movs	r3, #1
 800dad4:	e000      	b.n	800dad8 <CheckRetransUnconfirmedUplink+0x4c>
        }
    }
    return false;
 800dad6:	2300      	movs	r3, #0
}
 800dad8:	4618      	mov	r0, r3
 800dada:	bd80      	pop	{r7, pc}
 800dadc:	20000a28 	.word	0x20000a28
 800dae0:	20008000 	.word	0x20008000

0800dae4 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 800dae4:	b580      	push	{r7, lr}
 800dae6:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 800dae8:	4b10      	ldr	r3, [pc, #64]	@ (800db2c <CheckRetransConfirmedUplink+0x48>)
 800daea:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800daee:	4a10      	ldr	r2, [pc, #64]	@ (800db30 <CheckRetransConfirmedUplink+0x4c>)
 800daf0:	f892 2068 	ldrb.w	r2, [r2, #104]	@ 0x68
 800daf4:	4611      	mov	r1, r2
 800daf6:	4618      	mov	r0, r3
 800daf8:	f7ff ffb4 	bl	800da64 <CheckRetrans>
 800dafc:	4603      	mov	r3, r0
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d001      	beq.n	800db06 <CheckRetransConfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 800db02:	2301      	movs	r3, #1
 800db04:	e00f      	b.n	800db26 <CheckRetransConfirmedUplink+0x42>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800db06:	4b09      	ldr	r3, [pc, #36]	@ (800db2c <CheckRetransConfirmedUplink+0x48>)
 800db08:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800db0c:	f003 0302 	and.w	r3, r3, #2
 800db10:	b2db      	uxtb	r3, r3
 800db12:	2b00      	cmp	r3, #0
 800db14:	d006      	beq.n	800db24 <CheckRetransConfirmedUplink+0x40>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800db16:	4b05      	ldr	r3, [pc, #20]	@ (800db2c <CheckRetransConfirmedUplink+0x48>)
 800db18:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d001      	beq.n	800db24 <CheckRetransConfirmedUplink+0x40>
        {
            return true;
 800db20:	2301      	movs	r3, #1
 800db22:	e000      	b.n	800db26 <CheckRetransConfirmedUplink+0x42>
        }
    }
    return false;
 800db24:	2300      	movs	r3, #0
}
 800db26:	4618      	mov	r0, r3
 800db28:	bd80      	pop	{r7, pc}
 800db2a:	bf00      	nop
 800db2c:	20000a28 	.word	0x20000a28
 800db30:	20008000 	.word	0x20008000

0800db34 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
 800db34:	b480      	push	{r7}
 800db36:	b083      	sub	sp, #12
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
    if( counter < ADR_ACK_COUNTER_MAX )
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db42:	d002      	beq.n	800db4a <IncreaseAdrAckCounter+0x16>
    {
        counter++;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	3301      	adds	r3, #1
 800db48:	607b      	str	r3, [r7, #4]
    }
    return counter;
 800db4a:	687b      	ldr	r3, [r7, #4]
}
 800db4c:	4618      	mov	r0, r3
 800db4e:	370c      	adds	r7, #12
 800db50:	46bd      	mov	sp, r7
 800db52:	bc80      	pop	{r7}
 800db54:	4770      	bx	lr
	...

0800db58 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	af00      	add	r7, sp, #0
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800db5c:	4b1a      	ldr	r3, [pc, #104]	@ (800dbc8 <StopRetransmission+0x70>)
 800db5e:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800db62:	f003 0302 	and.w	r3, r3, #2
 800db66:	b2db      	uxtb	r3, r3
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d009      	beq.n	800db80 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800db6c:	4b16      	ldr	r3, [pc, #88]	@ (800dbc8 <StopRetransmission+0x70>)
 800db6e:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800db72:	2b00      	cmp	r3, #0
 800db74:	d011      	beq.n	800db9a <StopRetransmission+0x42>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 800db76:	4b14      	ldr	r3, [pc, #80]	@ (800dbc8 <StopRetransmission+0x70>)
 800db78:	f893 348f 	ldrb.w	r3, [r3, #1167]	@ 0x48f
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800db7c:	2b01      	cmp	r3, #1
 800db7e:	d00c      	beq.n	800db9a <StopRetransmission+0x42>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800db80:	4b12      	ldr	r3, [pc, #72]	@ (800dbcc <StopRetransmission+0x74>)
 800db82:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800db86:	2b00      	cmp	r3, #0
 800db88:	d007      	beq.n	800db9a <StopRetransmission+0x42>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 800db8a:	4b10      	ldr	r3, [pc, #64]	@ (800dbcc <StopRetransmission+0x74>)
 800db8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db8e:	4618      	mov	r0, r3
 800db90:	f7ff ffd0 	bl	800db34 <IncreaseAdrAckCounter>
 800db94:	4603      	mov	r3, r0
 800db96:	4a0d      	ldr	r2, [pc, #52]	@ (800dbcc <StopRetransmission+0x74>)
 800db98:	6293      	str	r3, [r2, #40]	@ 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 800db9a:	4b0b      	ldr	r3, [pc, #44]	@ (800dbc8 <StopRetransmission+0x70>)
 800db9c:	2200      	movs	r2, #0
 800db9e:	f883 2418 	strb.w	r2, [r3, #1048]	@ 0x418
    MacCtx.NodeAckRequested = false;
 800dba2:	4b09      	ldr	r3, [pc, #36]	@ (800dbc8 <StopRetransmission+0x70>)
 800dba4:	2200      	movs	r2, #0
 800dba6:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 800dbaa:	4b07      	ldr	r3, [pc, #28]	@ (800dbc8 <StopRetransmission+0x70>)
 800dbac:	2200      	movs	r2, #0
 800dbae:	f883 2419 	strb.w	r2, [r3, #1049]	@ 0x419
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800dbb2:	4b05      	ldr	r3, [pc, #20]	@ (800dbc8 <StopRetransmission+0x70>)
 800dbb4:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800dbb8:	f023 0302 	bic.w	r3, r3, #2
 800dbbc:	4a02      	ldr	r2, [pc, #8]	@ (800dbc8 <StopRetransmission+0x70>)
 800dbbe:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return true;
 800dbc2:	2301      	movs	r3, #1
}
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	bd80      	pop	{r7, pc}
 800dbc8:	20000a28 	.word	0x20000a28
 800dbcc:	20008000 	.word	0x20008000

0800dbd0 <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800dbd4:	4b08      	ldr	r3, [pc, #32]	@ (800dbf8 <OnMacProcessNotify+0x28>)
 800dbd6:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d00a      	beq.n	800dbf4 <OnMacProcessNotify+0x24>
 800dbde:	4b06      	ldr	r3, [pc, #24]	@ (800dbf8 <OnMacProcessNotify+0x28>)
 800dbe0:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800dbe4:	695b      	ldr	r3, [r3, #20]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d004      	beq.n	800dbf4 <OnMacProcessNotify+0x24>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800dbea:	4b03      	ldr	r3, [pc, #12]	@ (800dbf8 <OnMacProcessNotify+0x28>)
 800dbec:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800dbf0:	695b      	ldr	r3, [r3, #20]
 800dbf2:	4798      	blx	r3
    }
}
 800dbf4:	bf00      	nop
 800dbf6:	bd80      	pop	{r7, pc}
 800dbf8:	20000a28 	.word	0x20000a28

0800dbfc <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b082      	sub	sp, #8
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	4603      	mov	r3, r0
 800dc04:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 800dc06:	4b0b      	ldr	r3, [pc, #44]	@ (800dc34 <CallNvmDataChangeCallback+0x38>)
 800dc08:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d00c      	beq.n	800dc2a <CallNvmDataChangeCallback+0x2e>
 800dc10:	4b08      	ldr	r3, [pc, #32]	@ (800dc34 <CallNvmDataChangeCallback+0x38>)
 800dc12:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800dc16:	691b      	ldr	r3, [r3, #16]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d006      	beq.n	800dc2a <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 800dc1c:	4b05      	ldr	r3, [pc, #20]	@ (800dc34 <CallNvmDataChangeCallback+0x38>)
 800dc1e:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800dc22:	691b      	ldr	r3, [r3, #16]
 800dc24:	88fa      	ldrh	r2, [r7, #6]
 800dc26:	4610      	mov	r0, r2
 800dc28:	4798      	blx	r3
    }
}
 800dc2a:	bf00      	nop
 800dc2c:	3708      	adds	r7, #8
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	bd80      	pop	{r7, pc}
 800dc32:	bf00      	nop
 800dc34:	20000a28 	.word	0x20000a28

0800dc38 <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 800dc38:	b480      	push	{r7}
 800dc3a:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800dc3c:	4b0b      	ldr	r3, [pc, #44]	@ (800dc6c <IsRequestPending+0x34>)
 800dc3e:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800dc42:	f003 0304 	and.w	r3, r3, #4
 800dc46:	b2db      	uxtb	r3, r3
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d107      	bne.n	800dc5c <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 800dc4c:	4b07      	ldr	r3, [pc, #28]	@ (800dc6c <IsRequestPending+0x34>)
 800dc4e:	f893 3491 	ldrb.w	r3, [r3, #1169]	@ 0x491
 800dc52:	f003 0301 	and.w	r3, r3, #1
 800dc56:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d001      	beq.n	800dc60 <IsRequestPending+0x28>
    {
        return 1;
 800dc5c:	2301      	movs	r3, #1
 800dc5e:	e000      	b.n	800dc62 <IsRequestPending+0x2a>
    }
    return 0;
 800dc60:	2300      	movs	r3, #0
}
 800dc62:	4618      	mov	r0, r3
 800dc64:	46bd      	mov	sp, r7
 800dc66:	bc80      	pop	{r7}
 800dc68:	4770      	bx	lr
 800dc6a:	bf00      	nop
 800dc6c:	20000a28 	.word	0x20000a28

0800dc70 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800dc70:	b590      	push	{r4, r7, lr}
 800dc72:	b091      	sub	sp, #68	@ 0x44
 800dc74:	af02      	add	r7, sp, #8
 800dc76:	6178      	str	r0, [r7, #20]
 800dc78:	6139      	str	r1, [r7, #16]
 800dc7a:	4613      	mov	r3, r2
 800dc7c:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 800dc7e:	697b      	ldr	r3, [r7, #20]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d002      	beq.n	800dc8a <LoRaMacInitialization+0x1a>
 800dc84:	693b      	ldr	r3, [r7, #16]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d101      	bne.n	800dc8e <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800dc8a:	2303      	movs	r3, #3
 800dc8c:	e27a      	b.n	800e184 <LoRaMacInitialization+0x514>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800dc8e:	697b      	ldr	r3, [r7, #20]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d00b      	beq.n	800dcae <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 800dc96:	697b      	ldr	r3, [r7, #20]
 800dc98:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d007      	beq.n	800dcae <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800dc9e:	697b      	ldr	r3, [r7, #20]
 800dca0:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d003      	beq.n	800dcae <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 800dca6:	697b      	ldr	r3, [r7, #20]
 800dca8:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d101      	bne.n	800dcb2 <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800dcae:	2303      	movs	r3, #3
 800dcb0:	e268      	b.n	800e184 <LoRaMacInitialization+0x514>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800dcb2:	7bfb      	ldrb	r3, [r7, #15]
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	f003 fc19 	bl	80114ec <RegionIsActive>
 800dcba:	4603      	mov	r3, r0
 800dcbc:	f083 0301 	eor.w	r3, r3, #1
 800dcc0:	b2db      	uxtb	r3, r3
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d001      	beq.n	800dcca <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800dcc6:	2309      	movs	r3, #9
 800dcc8:	e25c      	b.n	800e184 <LoRaMacInitialization+0x514>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 800dcca:	6978      	ldr	r0, [r7, #20]
 800dccc:	f002 f8ac 	bl	800fe28 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 800dcd0:	f240 52cc 	movw	r2, #1484	@ 0x5cc
 800dcd4:	2100      	movs	r1, #0
 800dcd6:	48c7      	ldr	r0, [pc, #796]	@ (800dff4 <LoRaMacInitialization+0x384>)
 800dcd8:	f008 fef6 	bl	8016ac8 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800dcdc:	f240 521c 	movw	r2, #1308	@ 0x51c
 800dce0:	2100      	movs	r1, #0
 800dce2:	48c5      	ldr	r0, [pc, #788]	@ (800dff8 <LoRaMacInitialization+0x388>)
 800dce4:	f008 fef0 	bl	8016ac8 <memset1>
    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 800dce8:	4ac2      	ldr	r2, [pc, #776]	@ (800dff4 <LoRaMacInitialization+0x384>)
 800dcea:	7bfb      	ldrb	r3, [r7, #15]
 800dcec:	f882 3048 	strb.w	r3, [r2, #72]	@ 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800dcf0:	4bc0      	ldr	r3, [pc, #768]	@ (800dff4 <LoRaMacInitialization+0x384>)
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	f883 2118 	strb.w	r2, [r3, #280]	@ 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 800dcf8:	4bbe      	ldr	r3, [pc, #760]	@ (800dff4 <LoRaMacInitialization+0x384>)
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 800dd00:	4bbc      	ldr	r3, [pc, #752]	@ (800dff4 <LoRaMacInitialization+0x384>)
 800dd02:	4abe      	ldr	r2, [pc, #760]	@ (800dffc <LoRaMacInitialization+0x38c>)
 800dd04:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 800dd08:	2300      	movs	r3, #0
 800dd0a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800dd0e:	4bbc      	ldr	r3, [pc, #752]	@ (800e000 <LoRaMacInitialization+0x390>)
 800dd10:	61fb      	str	r3, [r7, #28]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800dd12:	4bbc      	ldr	r3, [pc, #752]	@ (800e004 <LoRaMacInitialization+0x394>)
 800dd14:	623b      	str	r3, [r7, #32]
    params.Bands = &RegionBands;
 800dd16:	4bbc      	ldr	r3, [pc, #752]	@ (800e008 <LoRaMacInitialization+0x398>)
 800dd18:	627b      	str	r3, [r7, #36]	@ 0x24
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800dd1a:	4bb6      	ldr	r3, [pc, #728]	@ (800dff4 <LoRaMacInitialization+0x384>)
 800dd1c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800dd20:	f107 021c 	add.w	r2, r7, #28
 800dd24:	4611      	mov	r1, r2
 800dd26:	4618      	mov	r0, r3
 800dd28:	f003 fc2c 	bl	8011584 <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800dd2c:	230f      	movs	r3, #15
 800dd2e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800dd32:	4bb0      	ldr	r3, [pc, #704]	@ (800dff4 <LoRaMacInitialization+0x384>)
 800dd34:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800dd38:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800dd3c:	4611      	mov	r1, r2
 800dd3e:	4618      	mov	r0, r3
 800dd40:	f003 fbe9 	bl	8011516 <RegionGetPhyParam>
 800dd44:	4603      	mov	r3, r0
 800dd46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800dd48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	bf14      	ite	ne
 800dd4e:	2301      	movne	r3, #1
 800dd50:	2300      	moveq	r3, #0
 800dd52:	b2da      	uxtb	r2, r3
 800dd54:	4ba7      	ldr	r3, [pc, #668]	@ (800dff4 <LoRaMacInitialization+0x384>)
 800dd56:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800dd5a:	230a      	movs	r3, #10
 800dd5c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800dd60:	4ba4      	ldr	r3, [pc, #656]	@ (800dff4 <LoRaMacInitialization+0x384>)
 800dd62:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800dd66:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800dd6a:	4611      	mov	r1, r2
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	f003 fbd2 	bl	8011516 <RegionGetPhyParam>
 800dd72:	4603      	mov	r3, r0
 800dd74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 800dd76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd78:	b25a      	sxtb	r2, r3
 800dd7a:	4b9e      	ldr	r3, [pc, #632]	@ (800dff4 <LoRaMacInitialization+0x384>)
 800dd7c:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 800dd80:	2306      	movs	r3, #6
 800dd82:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800dd86:	4b9b      	ldr	r3, [pc, #620]	@ (800dff4 <LoRaMacInitialization+0x384>)
 800dd88:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800dd8c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800dd90:	4611      	mov	r1, r2
 800dd92:	4618      	mov	r0, r3
 800dd94:	f003 fbbf 	bl	8011516 <RegionGetPhyParam>
 800dd98:	4603      	mov	r3, r0
 800dd9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 800dd9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd9e:	b25a      	sxtb	r2, r3
 800dda0:	4b94      	ldr	r3, [pc, #592]	@ (800dff4 <LoRaMacInitialization+0x384>)
 800dda2:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800dda6:	2310      	movs	r3, #16
 800dda8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ddac:	4b91      	ldr	r3, [pc, #580]	@ (800dff4 <LoRaMacInitialization+0x384>)
 800ddae:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ddb2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800ddb6:	4611      	mov	r1, r2
 800ddb8:	4618      	mov	r0, r3
 800ddba:	f003 fbac 	bl	8011516 <RegionGetPhyParam>
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800ddc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddc4:	4a8b      	ldr	r2, [pc, #556]	@ (800dff4 <LoRaMacInitialization+0x384>)
 800ddc6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800ddca:	2311      	movs	r3, #17
 800ddcc:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ddd0:	4b88      	ldr	r3, [pc, #544]	@ (800dff4 <LoRaMacInitialization+0x384>)
 800ddd2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ddd6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800ddda:	4611      	mov	r1, r2
 800dddc:	4618      	mov	r0, r3
 800ddde:	f003 fb9a 	bl	8011516 <RegionGetPhyParam>
 800dde2:	4603      	mov	r3, r0
 800dde4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800dde6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dde8:	4a82      	ldr	r2, [pc, #520]	@ (800dff4 <LoRaMacInitialization+0x384>)
 800ddea:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800ddee:	2312      	movs	r3, #18
 800ddf0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ddf4:	4b7f      	ldr	r3, [pc, #508]	@ (800dff4 <LoRaMacInitialization+0x384>)
 800ddf6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ddfa:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800ddfe:	4611      	mov	r1, r2
 800de00:	4618      	mov	r0, r3
 800de02:	f003 fb88 	bl	8011516 <RegionGetPhyParam>
 800de06:	4603      	mov	r3, r0
 800de08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800de0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de0c:	4a79      	ldr	r2, [pc, #484]	@ (800dff4 <LoRaMacInitialization+0x384>)
 800de0e:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800de12:	2313      	movs	r3, #19
 800de14:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800de18:	4b76      	ldr	r3, [pc, #472]	@ (800dff4 <LoRaMacInitialization+0x384>)
 800de1a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800de1e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800de22:	4611      	mov	r1, r2
 800de24:	4618      	mov	r0, r3
 800de26:	f003 fb76 	bl	8011516 <RegionGetPhyParam>
 800de2a:	4603      	mov	r3, r0
 800de2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800de2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de30:	4a70      	ldr	r2, [pc, #448]	@ (800dff4 <LoRaMacInitialization+0x384>)
 800de32:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800de36:	2314      	movs	r3, #20
 800de38:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800de3c:	4b6d      	ldr	r3, [pc, #436]	@ (800dff4 <LoRaMacInitialization+0x384>)
 800de3e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800de42:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800de46:	4611      	mov	r1, r2
 800de48:	4618      	mov	r0, r3
 800de4a:	f003 fb64 	bl	8011516 <RegionGetPhyParam>
 800de4e:	4603      	mov	r3, r0
 800de50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800de52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de54:	4a67      	ldr	r2, [pc, #412]	@ (800dff4 <LoRaMacInitialization+0x384>)
 800de56:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800de5a:	2316      	movs	r3, #22
 800de5c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800de60:	4b64      	ldr	r3, [pc, #400]	@ (800dff4 <LoRaMacInitialization+0x384>)
 800de62:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800de66:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800de6a:	4611      	mov	r1, r2
 800de6c:	4618      	mov	r0, r3
 800de6e:	f003 fb52 	bl	8011516 <RegionGetPhyParam>
 800de72:	4603      	mov	r3, r0
 800de74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800de76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de78:	b2da      	uxtb	r2, r3
 800de7a:	4b5e      	ldr	r3, [pc, #376]	@ (800dff4 <LoRaMacInitialization+0x384>)
 800de7c:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800de80:	2317      	movs	r3, #23
 800de82:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800de86:	4b5b      	ldr	r3, [pc, #364]	@ (800dff4 <LoRaMacInitialization+0x384>)
 800de88:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800de8c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800de90:	4611      	mov	r1, r2
 800de92:	4618      	mov	r0, r3
 800de94:	f003 fb3f 	bl	8011516 <RegionGetPhyParam>
 800de98:	4603      	mov	r3, r0
 800de9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800de9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de9e:	4a55      	ldr	r2, [pc, #340]	@ (800dff4 <LoRaMacInitialization+0x384>)
 800dea0:	f8c2 30b4 	str.w	r3, [r2, #180]	@ 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800dea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dea6:	4a53      	ldr	r2, [pc, #332]	@ (800dff4 <LoRaMacInitialization+0x384>)
 800dea8:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800deac:	2318      	movs	r3, #24
 800deae:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800deb2:	4b50      	ldr	r3, [pc, #320]	@ (800dff4 <LoRaMacInitialization+0x384>)
 800deb4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800deb8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800debc:	4611      	mov	r1, r2
 800debe:	4618      	mov	r0, r3
 800dec0:	f003 fb29 	bl	8011516 <RegionGetPhyParam>
 800dec4:	4603      	mov	r3, r0
 800dec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800dec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800deca:	b2da      	uxtb	r2, r3
 800decc:	4b49      	ldr	r3, [pc, #292]	@ (800dff4 <LoRaMacInitialization+0x384>)
 800dece:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800ded2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ded4:	b2da      	uxtb	r2, r3
 800ded6:	4b47      	ldr	r3, [pc, #284]	@ (800dff4 <LoRaMacInitialization+0x384>)
 800ded8:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800dedc:	231d      	movs	r3, #29
 800dede:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800dee2:	4b44      	ldr	r3, [pc, #272]	@ (800dff4 <LoRaMacInitialization+0x384>)
 800dee4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800dee8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800deec:	4611      	mov	r1, r2
 800deee:	4618      	mov	r0, r3
 800def0:	f003 fb11 	bl	8011516 <RegionGetPhyParam>
 800def4:	4603      	mov	r3, r0
 800def6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800def8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800defa:	b2da      	uxtb	r2, r3
 800defc:	4b3d      	ldr	r3, [pc, #244]	@ (800dff4 <LoRaMacInitialization+0x384>)
 800defe:	f883 20c4 	strb.w	r2, [r3, #196]	@ 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800df02:	231e      	movs	r3, #30
 800df04:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800df08:	4b3a      	ldr	r3, [pc, #232]	@ (800dff4 <LoRaMacInitialization+0x384>)
 800df0a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800df0e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800df12:	4611      	mov	r1, r2
 800df14:	4618      	mov	r0, r3
 800df16:	f003 fafe 	bl	8011516 <RegionGetPhyParam>
 800df1a:	4603      	mov	r3, r0
 800df1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800df1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df20:	b2da      	uxtb	r2, r3
 800df22:	4b34      	ldr	r3, [pc, #208]	@ (800dff4 <LoRaMacInitialization+0x384>)
 800df24:	f883 20c5 	strb.w	r2, [r3, #197]	@ 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800df28:	231f      	movs	r3, #31
 800df2a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800df2e:	4b31      	ldr	r3, [pc, #196]	@ (800dff4 <LoRaMacInitialization+0x384>)
 800df30:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800df34:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800df38:	4611      	mov	r1, r2
 800df3a:	4618      	mov	r0, r3
 800df3c:	f003 faeb 	bl	8011516 <RegionGetPhyParam>
 800df40:	4603      	mov	r3, r0
 800df42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 800df44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df46:	4a2b      	ldr	r2, [pc, #172]	@ (800dff4 <LoRaMacInitialization+0x384>)
 800df48:	f8c2 30c8 	str.w	r3, [r2, #200]	@ 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800df4c:	2320      	movs	r3, #32
 800df4e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800df52:	4b28      	ldr	r3, [pc, #160]	@ (800dff4 <LoRaMacInitialization+0x384>)
 800df54:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800df58:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800df5c:	4611      	mov	r1, r2
 800df5e:	4618      	mov	r0, r3
 800df60:	f003 fad9 	bl	8011516 <RegionGetPhyParam>
 800df64:	4603      	mov	r3, r0
 800df66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 800df68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df6a:	4a22      	ldr	r2, [pc, #136]	@ (800dff4 <LoRaMacInitialization+0x384>)
 800df6c:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800df70:	230b      	movs	r3, #11
 800df72:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800df76:	4b1f      	ldr	r3, [pc, #124]	@ (800dff4 <LoRaMacInitialization+0x384>)
 800df78:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800df7c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800df80:	4611      	mov	r1, r2
 800df82:	4618      	mov	r0, r3
 800df84:	f003 fac7 	bl	8011516 <RegionGetPhyParam>
 800df88:	4603      	mov	r3, r0
 800df8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 800df8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df8e:	b29a      	uxth	r2, r3
 800df90:	4b18      	ldr	r3, [pc, #96]	@ (800dff4 <LoRaMacInitialization+0x384>)
 800df92:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800df96:	230c      	movs	r3, #12
 800df98:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800df9c:	4b15      	ldr	r3, [pc, #84]	@ (800dff4 <LoRaMacInitialization+0x384>)
 800df9e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800dfa2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800dfa6:	4611      	mov	r1, r2
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	f003 fab4 	bl	8011516 <RegionGetPhyParam>
 800dfae:	4603      	mov	r3, r0
 800dfb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 800dfb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfb4:	b29a      	uxth	r2, r3
 800dfb6:	4b0f      	ldr	r3, [pc, #60]	@ (800dff4 <LoRaMacInitialization+0x384>)
 800dfb8:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800dfbc:	4b0d      	ldr	r3, [pc, #52]	@ (800dff4 <LoRaMacInitialization+0x384>)
 800dfbe:	2201      	movs	r2, #1
 800dfc0:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 800dfc4:	4b0b      	ldr	r3, [pc, #44]	@ (800dff4 <LoRaMacInitialization+0x384>)
 800dfc6:	220a      	movs	r2, #10
 800dfc8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 800dfcc:	4b09      	ldr	r3, [pc, #36]	@ (800dff4 <LoRaMacInitialization+0x384>)
 800dfce:	2206      	movs	r2, #6
 800dfd0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 800dfd4:	4b07      	ldr	r3, [pc, #28]	@ (800dff4 <LoRaMacInitialization+0x384>)
 800dfd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800dfda:	4a06      	ldr	r2, [pc, #24]	@ (800dff4 <LoRaMacInitialization+0x384>)
 800dfdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 800dfde:	4b05      	ldr	r3, [pc, #20]	@ (800dff4 <LoRaMacInitialization+0x384>)
 800dfe0:	f893 2098 	ldrb.w	r2, [r3, #152]	@ 0x98
 800dfe4:	4b03      	ldr	r3, [pc, #12]	@ (800dff4 <LoRaMacInitialization+0x384>)
 800dfe6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 800dfea:	4b02      	ldr	r3, [pc, #8]	@ (800dff4 <LoRaMacInitialization+0x384>)
 800dfec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800dff0:	e00c      	b.n	800e00c <LoRaMacInitialization+0x39c>
 800dff2:	bf00      	nop
 800dff4:	20008000 	.word	0x20008000
 800dff8:	20000a28 	.word	0x20000a28
 800dffc:	01000400 	.word	0x01000400
 800e000:	20008224 	.word	0x20008224
 800e004:	20008238 	.word	0x20008238
 800e008:	20000f44 	.word	0x20000f44
 800e00c:	4a5f      	ldr	r2, [pc, #380]	@ (800e18c <LoRaMacInitialization+0x51c>)
 800e00e:	6553      	str	r3, [r2, #84]	@ 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 800e010:	4b5e      	ldr	r3, [pc, #376]	@ (800e18c <LoRaMacInitialization+0x51c>)
 800e012:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e016:	4a5d      	ldr	r2, [pc, #372]	@ (800e18c <LoRaMacInitialization+0x51c>)
 800e018:	6593      	str	r3, [r2, #88]	@ 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 800e01a:	4b5c      	ldr	r3, [pc, #368]	@ (800e18c <LoRaMacInitialization+0x51c>)
 800e01c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e020:	4a5a      	ldr	r2, [pc, #360]	@ (800e18c <LoRaMacInitialization+0x51c>)
 800e022:	65d3      	str	r3, [r2, #92]	@ 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 800e024:	4b59      	ldr	r3, [pc, #356]	@ (800e18c <LoRaMacInitialization+0x51c>)
 800e026:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800e02a:	4a58      	ldr	r2, [pc, #352]	@ (800e18c <LoRaMacInitialization+0x51c>)
 800e02c:	6613      	str	r3, [r2, #96]	@ 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 800e02e:	4b57      	ldr	r3, [pc, #348]	@ (800e18c <LoRaMacInitialization+0x51c>)
 800e030:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800e034:	4a55      	ldr	r2, [pc, #340]	@ (800e18c <LoRaMacInitialization+0x51c>)
 800e036:	6653      	str	r3, [r2, #100]	@ 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 800e038:	4b54      	ldr	r3, [pc, #336]	@ (800e18c <LoRaMacInitialization+0x51c>)
 800e03a:	f893 20b0 	ldrb.w	r2, [r3, #176]	@ 0xb0
 800e03e:	4b53      	ldr	r3, [pc, #332]	@ (800e18c <LoRaMacInitialization+0x51c>)
 800e040:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 800e044:	4b51      	ldr	r3, [pc, #324]	@ (800e18c <LoRaMacInitialization+0x51c>)
 800e046:	2201      	movs	r2, #1
 800e048:	f883 211f 	strb.w	r2, [r3, #287]	@ 0x11f
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 800e04c:	4a50      	ldr	r2, [pc, #320]	@ (800e190 <LoRaMacInitialization+0x520>)
 800e04e:	693b      	ldr	r3, [r7, #16]
 800e050:	f8c2 3348 	str.w	r3, [r2, #840]	@ 0x348
    ResetMacParameters( false );
 800e054:	2000      	movs	r0, #0
 800e056:	f7ff f86b 	bl	800d130 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 800e05a:	4b4c      	ldr	r3, [pc, #304]	@ (800e18c <LoRaMacInitialization+0x51c>)
 800e05c:	2201      	movs	r2, #1
 800e05e:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119

    MacCtx.MacPrimitives = primitives;
 800e062:	4a4b      	ldr	r2, [pc, #300]	@ (800e190 <LoRaMacInitialization+0x520>)
 800e064:	697b      	ldr	r3, [r7, #20]
 800e066:	f8c2 3344 	str.w	r3, [r2, #836]	@ 0x344
    MacCtx.MacFlags.Value = 0;
 800e06a:	4b49      	ldr	r3, [pc, #292]	@ (800e190 <LoRaMacInitialization+0x520>)
 800e06c:	2200      	movs	r2, #0
 800e06e:	f883 2491 	strb.w	r2, [r3, #1169]	@ 0x491
    MacCtx.MacState = LORAMAC_STOPPED;
 800e072:	4b47      	ldr	r3, [pc, #284]	@ (800e190 <LoRaMacInitialization+0x520>)
 800e074:	2201      	movs	r2, #1
 800e076:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 800e07a:	4b44      	ldr	r3, [pc, #272]	@ (800e18c <LoRaMacInitialization+0x51c>)
 800e07c:	2200      	movs	r2, #0
 800e07e:	62da      	str	r2, [r3, #44]	@ 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 800e080:	4b42      	ldr	r3, [pc, #264]	@ (800e18c <LoRaMacInitialization+0x51c>)
 800e082:	2200      	movs	r2, #0
 800e084:	631a      	str	r2, [r3, #48]	@ 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800e086:	2300      	movs	r3, #0
 800e088:	9300      	str	r3, [sp, #0]
 800e08a:	4b42      	ldr	r3, [pc, #264]	@ (800e194 <LoRaMacInitialization+0x524>)
 800e08c:	2200      	movs	r2, #0
 800e08e:	f04f 31ff 	mov.w	r1, #4294967295
 800e092:	4841      	ldr	r0, [pc, #260]	@ (800e198 <LoRaMacInitialization+0x528>)
 800e094:	f00c f878 	bl	801a188 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800e098:	2300      	movs	r3, #0
 800e09a:	9300      	str	r3, [sp, #0]
 800e09c:	4b3f      	ldr	r3, [pc, #252]	@ (800e19c <LoRaMacInitialization+0x52c>)
 800e09e:	2200      	movs	r2, #0
 800e0a0:	f04f 31ff 	mov.w	r1, #4294967295
 800e0a4:	483e      	ldr	r0, [pc, #248]	@ (800e1a0 <LoRaMacInitialization+0x530>)
 800e0a6:	f00c f86f 	bl	801a188 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	9300      	str	r3, [sp, #0]
 800e0ae:	4b3d      	ldr	r3, [pc, #244]	@ (800e1a4 <LoRaMacInitialization+0x534>)
 800e0b0:	2200      	movs	r2, #0
 800e0b2:	f04f 31ff 	mov.w	r1, #4294967295
 800e0b6:	483c      	ldr	r0, [pc, #240]	@ (800e1a8 <LoRaMacInitialization+0x538>)
 800e0b8:	f00c f866 	bl	801a188 <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 800e0bc:	2300      	movs	r3, #0
 800e0be:	9300      	str	r3, [sp, #0]
 800e0c0:	4b3a      	ldr	r3, [pc, #232]	@ (800e1ac <LoRaMacInitialization+0x53c>)
 800e0c2:	2200      	movs	r2, #0
 800e0c4:	f04f 31ff 	mov.w	r1, #4294967295
 800e0c8:	4839      	ldr	r0, [pc, #228]	@ (800e1b0 <LoRaMacInitialization+0x540>)
 800e0ca:	f00c f85d 	bl	801a188 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800e0ce:	4c2f      	ldr	r4, [pc, #188]	@ (800e18c <LoRaMacInitialization+0x51c>)
 800e0d0:	463b      	mov	r3, r7
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	f00b ffc2 	bl	801a05c <SysTimeGetMcuTime>
 800e0d8:	f504 7392 	add.w	r3, r4, #292	@ 0x124
 800e0dc:	463a      	mov	r2, r7
 800e0de:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e0e2:	e883 0003 	stmia.w	r3, {r0, r1}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 800e0e6:	4b33      	ldr	r3, [pc, #204]	@ (800e1b4 <LoRaMacInitialization+0x544>)
 800e0e8:	2200      	movs	r2, #0
 800e0ea:	601a      	str	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800e0ec:	4b28      	ldr	r3, [pc, #160]	@ (800e190 <LoRaMacInitialization+0x520>)
 800e0ee:	4a32      	ldr	r2, [pc, #200]	@ (800e1b8 <LoRaMacInitialization+0x548>)
 800e0f0:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800e0f4:	4b26      	ldr	r3, [pc, #152]	@ (800e190 <LoRaMacInitialization+0x520>)
 800e0f6:	4a31      	ldr	r2, [pc, #196]	@ (800e1bc <LoRaMacInitialization+0x54c>)
 800e0f8:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800e0fc:	4b24      	ldr	r3, [pc, #144]	@ (800e190 <LoRaMacInitialization+0x520>)
 800e0fe:	4a30      	ldr	r2, [pc, #192]	@ (800e1c0 <LoRaMacInitialization+0x550>)
 800e100:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800e104:	4b22      	ldr	r3, [pc, #136]	@ (800e190 <LoRaMacInitialization+0x520>)
 800e106:	4a2f      	ldr	r2, [pc, #188]	@ (800e1c4 <LoRaMacInitialization+0x554>)
 800e108:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800e10c:	4b20      	ldr	r3, [pc, #128]	@ (800e190 <LoRaMacInitialization+0x520>)
 800e10e:	4a2e      	ldr	r2, [pc, #184]	@ (800e1c8 <LoRaMacInitialization+0x558>)
 800e110:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358
    Radio.Init( &MacCtx.RadioEvents );
 800e114:	4b2d      	ldr	r3, [pc, #180]	@ (800e1cc <LoRaMacInitialization+0x55c>)
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	482d      	ldr	r0, [pc, #180]	@ (800e1d0 <LoRaMacInitialization+0x560>)
 800e11a:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 800e11c:	482d      	ldr	r0, [pc, #180]	@ (800e1d4 <LoRaMacInitialization+0x564>)
 800e11e:	f008 f90f 	bl	8016340 <SecureElementInit>
 800e122:	4603      	mov	r3, r0
 800e124:	2b00      	cmp	r3, #0
 800e126:	d001      	beq.n	800e12c <LoRaMacInitialization+0x4bc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800e128:	2311      	movs	r3, #17
 800e12a:	e02b      	b.n	800e184 <LoRaMacInitialization+0x514>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 800e12c:	4817      	ldr	r0, [pc, #92]	@ (800e18c <LoRaMacInitialization+0x51c>)
 800e12e:	f002 fb37 	bl	80107a0 <LoRaMacCryptoInit>
 800e132:	4603      	mov	r3, r0
 800e134:	2b00      	cmp	r3, #0
 800e136:	d001      	beq.n	800e13c <LoRaMacInitialization+0x4cc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800e138:	2311      	movs	r3, #17
 800e13a:	e023      	b.n	800e184 <LoRaMacInitialization+0x514>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 800e13c:	f001 fc36 	bl	800f9ac <LoRaMacCommandsInit>
 800e140:	4603      	mov	r3, r0
 800e142:	2b00      	cmp	r3, #0
 800e144:	d001      	beq.n	800e14a <LoRaMacInitialization+0x4da>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e146:	2313      	movs	r3, #19
 800e148:	e01c      	b.n	800e184 <LoRaMacInitialization+0x514>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800e14a:	4823      	ldr	r0, [pc, #140]	@ (800e1d8 <LoRaMacInitialization+0x568>)
 800e14c:	f002 fbc8 	bl	80108e0 <LoRaMacCryptoSetMulticastReference>
 800e150:	4603      	mov	r3, r0
 800e152:	2b00      	cmp	r3, #0
 800e154:	d001      	beq.n	800e15a <LoRaMacInitialization+0x4ea>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800e156:	2311      	movs	r3, #17
 800e158:	e014      	b.n	800e184 <LoRaMacInitialization+0x514>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 800e15a:	4b1c      	ldr	r3, [pc, #112]	@ (800e1cc <LoRaMacInitialization+0x55c>)
 800e15c:	695b      	ldr	r3, [r3, #20]
 800e15e:	4798      	blx	r3
 800e160:	4603      	mov	r3, r0
 800e162:	4618      	mov	r0, r3
 800e164:	f008 fc50 	bl	8016a08 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800e168:	4b18      	ldr	r3, [pc, #96]	@ (800e1cc <LoRaMacInitialization+0x55c>)
 800e16a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e16c:	4a07      	ldr	r2, [pc, #28]	@ (800e18c <LoRaMacInitialization+0x51c>)
 800e16e:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 800e172:	4610      	mov	r0, r2
 800e174:	4798      	blx	r3
    Radio.Sleep( );
 800e176:	4b15      	ldr	r3, [pc, #84]	@ (800e1cc <LoRaMacInitialization+0x55c>)
 800e178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e17a:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800e17c:	2001      	movs	r0, #1
 800e17e:	f7fd fa71 	bl	800b664 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 800e182:	2300      	movs	r3, #0
}
 800e184:	4618      	mov	r0, r3
 800e186:	373c      	adds	r7, #60	@ 0x3c
 800e188:	46bd      	mov	sp, r7
 800e18a:	bd90      	pop	{r4, r7, pc}
 800e18c:	20008000 	.word	0x20008000
 800e190:	20000a28 	.word	0x20000a28
 800e194:	0800bbf1 	.word	0x0800bbf1
 800e198:	20000d90 	.word	0x20000d90
 800e19c:	0800bc81 	.word	0x0800bc81
 800e1a0:	20000da8 	.word	0x20000da8
 800e1a4:	0800bcf9 	.word	0x0800bcf9
 800e1a8:	20000dc0 	.word	0x20000dc0
 800e1ac:	0800bd79 	.word	0x0800bd79
 800e1b0:	20000e28 	.word	0x20000e28
 800e1b4:	20000fd4 	.word	0x20000fd4
 800e1b8:	0800a689 	.word	0x0800a689
 800e1bc:	0800a6d5 	.word	0x0800a6d5
 800e1c0:	0800a775 	.word	0x0800a775
 800e1c4:	0800a749 	.word	0x0800a749
 800e1c8:	0800a791 	.word	0x0800a791
 800e1cc:	080210e8 	.word	0x080210e8
 800e1d0:	20000d74 	.word	0x20000d74
 800e1d4:	2000814c 	.word	0x2000814c
 800e1d8:	200080e8 	.word	0x200080e8

0800e1dc <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 800e1e0:	4b04      	ldr	r3, [pc, #16]	@ (800e1f4 <LoRaMacStart+0x18>)
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    UpdateRxSlotIdleState();
 800e1e8:	f7fc fae8 	bl	800a7bc <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
 800e1ec:	2300      	movs	r3, #0
}
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	bd80      	pop	{r7, pc}
 800e1f2:	bf00      	nop
 800e1f4:	20000a28 	.word	0x20000a28

0800e1f8 <LoRaMacQueryTxPossible>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800e1f8:	b590      	push	{r4, r7, lr}
 800e1fa:	b08d      	sub	sp, #52	@ 0x34
 800e1fc:	af02      	add	r7, sp, #8
 800e1fe:	4603      	mov	r3, r0
 800e200:	6039      	str	r1, [r7, #0]
 800e202:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800e204:	4b42      	ldr	r3, [pc, #264]	@ (800e310 <LoRaMacQueryTxPossible+0x118>)
 800e206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e208:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800e20a:	4b41      	ldr	r3, [pc, #260]	@ (800e310 <LoRaMacQueryTxPossible+0x118>)
 800e20c:	f993 30dd 	ldrsb.w	r3, [r3, #221]	@ 0xdd
 800e210:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800e212:	4b3f      	ldr	r3, [pc, #252]	@ (800e310 <LoRaMacQueryTxPossible+0x118>)
 800e214:	f993 30dc 	ldrsb.w	r3, [r3, #220]	@ 0xdc
 800e218:	73bb      	strb	r3, [r7, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 800e21a:	4b3e      	ldr	r3, [pc, #248]	@ (800e314 <LoRaMacQueryTxPossible+0x11c>)
 800e21c:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800e220:	737b      	strb	r3, [r7, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 800e222:	2300      	movs	r3, #0
 800e224:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 800e226:	683b      	ldr	r3, [r7, #0]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d101      	bne.n	800e230 <LoRaMacQueryTxPossible+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e22c:	2303      	movs	r3, #3
 800e22e:	e06b      	b.n	800e308 <LoRaMacQueryTxPossible+0x110>

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 800e230:	2300      	movs	r3, #0
 800e232:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800e234:	4b36      	ldr	r3, [pc, #216]	@ (800e310 <LoRaMacQueryTxPossible+0x118>)
 800e236:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800e23a:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800e23c:	4b34      	ldr	r3, [pc, #208]	@ (800e310 <LoRaMacQueryTxPossible+0x118>)
 800e23e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e240:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800e242:	4b33      	ldr	r3, [pc, #204]	@ (800e310 <LoRaMacQueryTxPossible+0x118>)
 800e244:	f8b3 3088 	ldrh.w	r3, [r3, #136]	@ 0x88
 800e248:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800e24a:	4b31      	ldr	r3, [pc, #196]	@ (800e310 <LoRaMacQueryTxPossible+0x118>)
 800e24c:	f8b3 308a 	ldrh.w	r3, [r3, #138]	@ 0x8a
 800e250:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800e252:	4b2f      	ldr	r3, [pc, #188]	@ (800e310 <LoRaMacQueryTxPossible+0x118>)
 800e254:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800e258:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800e25c:	4b2c      	ldr	r3, [pc, #176]	@ (800e310 <LoRaMacQueryTxPossible+0x118>)
 800e25e:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800e262:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 800e266:	4b2b      	ldr	r3, [pc, #172]	@ (800e314 <LoRaMacQueryTxPossible+0x11c>)
 800e268:	f893 3418 	ldrb.w	r3, [r3, #1048]	@ 0x418
 800e26c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800e270:	4b27      	ldr	r3, [pc, #156]	@ (800e310 <LoRaMacQueryTxPossible+0x118>)
 800e272:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800e276:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 800e27a:	4b25      	ldr	r3, [pc, #148]	@ (800e310 <LoRaMacQueryTxPossible+0x118>)
 800e27c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e280:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 800e284:	f107 040d 	add.w	r4, r7, #13
 800e288:	f107 020e 	add.w	r2, r7, #14
 800e28c:	f107 010f 	add.w	r1, r7, #15
 800e290:	f107 0014 	add.w	r0, r7, #20
 800e294:	f107 0310 	add.w	r3, r7, #16
 800e298:	9300      	str	r3, [sp, #0]
 800e29a:	4623      	mov	r3, r4
 800e29c:	f001 f8b4 	bl	800f408 <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800e2a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	f7fd fead 	bl	800c004 <GetMaxAppPayloadWithoutFOptsLength>
 800e2aa:	4603      	mov	r3, r0
 800e2ac:	461a      	mov	r2, r3
 800e2ae:	683b      	ldr	r3, [r7, #0]
 800e2b0:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800e2b2:	f107 0308 	add.w	r3, r7, #8
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	f001 fc7e 	bl	800fbb8 <LoRaMacCommandsGetSizeSerializedCmds>
 800e2bc:	4603      	mov	r3, r0
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d001      	beq.n	800e2c6 <LoRaMacQueryTxPossible+0xce>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800e2c2:	2313      	movs	r3, #19
 800e2c4:	e020      	b.n	800e308 <LoRaMacQueryTxPossible+0x110>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800e2c6:	68bb      	ldr	r3, [r7, #8]
 800e2c8:	2b0f      	cmp	r3, #15
 800e2ca:	d819      	bhi.n	800e300 <LoRaMacQueryTxPossible+0x108>
 800e2cc:	683b      	ldr	r3, [r7, #0]
 800e2ce:	785b      	ldrb	r3, [r3, #1]
 800e2d0:	461a      	mov	r2, r3
 800e2d2:	68bb      	ldr	r3, [r7, #8]
 800e2d4:	429a      	cmp	r2, r3
 800e2d6:	d313      	bcc.n	800e300 <LoRaMacQueryTxPossible+0x108>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800e2d8:	683b      	ldr	r3, [r7, #0]
 800e2da:	785a      	ldrb	r2, [r3, #1]
 800e2dc:	68bb      	ldr	r3, [r7, #8]
 800e2de:	b2db      	uxtb	r3, r3
 800e2e0:	1ad3      	subs	r3, r2, r3
 800e2e2:	b2da      	uxtb	r2, r3
 800e2e4:	683b      	ldr	r3, [r7, #0]
 800e2e6:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800e2e8:	683b      	ldr	r3, [r7, #0]
 800e2ea:	785b      	ldrb	r3, [r3, #1]
 800e2ec:	4619      	mov	r1, r3
 800e2ee:	79fa      	ldrb	r2, [r7, #7]
 800e2f0:	68bb      	ldr	r3, [r7, #8]
 800e2f2:	4413      	add	r3, r2
 800e2f4:	4299      	cmp	r1, r3
 800e2f6:	d301      	bcc.n	800e2fc <LoRaMacQueryTxPossible+0x104>
        {
            return LORAMAC_STATUS_OK;
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	e005      	b.n	800e308 <LoRaMacQueryTxPossible+0x110>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 800e2fc:	2308      	movs	r3, #8
 800e2fe:	e003      	b.n	800e308 <LoRaMacQueryTxPossible+0x110>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 800e300:	683b      	ldr	r3, [r7, #0]
 800e302:	2200      	movs	r2, #0
 800e304:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800e306:	2308      	movs	r3, #8
    }
}
 800e308:	4618      	mov	r0, r3
 800e30a:	372c      	adds	r7, #44	@ 0x2c
 800e30c:	46bd      	mov	sp, r7
 800e30e:	bd90      	pop	{r4, r7, pc}
 800e310:	20008000 	.word	0x20008000
 800e314:	20000a28 	.word	0x20000a28

0800e318 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 800e318:	b590      	push	{r4, r7, lr}
 800e31a:	b087      	sub	sp, #28
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e320:	2300      	movs	r3, #0
 800e322:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d101      	bne.n	800e32e <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e32a:	2303      	movs	r3, #3
 800e32c:	e1c4      	b.n	800e6b8 <LoRaMacMibGetRequestConfirm+0x3a0>
    }

    switch( mibGet->Type )
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	781b      	ldrb	r3, [r3, #0]
 800e332:	2b41      	cmp	r3, #65	@ 0x41
 800e334:	f200 81b9 	bhi.w	800e6aa <LoRaMacMibGetRequestConfirm+0x392>
 800e338:	a201      	add	r2, pc, #4	@ (adr r2, 800e340 <LoRaMacMibGetRequestConfirm+0x28>)
 800e33a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e33e:	bf00      	nop
 800e340:	0800e449 	.word	0x0800e449
 800e344:	0800e455 	.word	0x0800e455
 800e348:	0800e461 	.word	0x0800e461
 800e34c:	0800e46d 	.word	0x0800e46d
 800e350:	0800e479 	.word	0x0800e479
 800e354:	0800e485 	.word	0x0800e485
 800e358:	0800e491 	.word	0x0800e491
 800e35c:	0800e6ab 	.word	0x0800e6ab
 800e360:	0800e6ab 	.word	0x0800e6ab
 800e364:	0800e6ab 	.word	0x0800e6ab
 800e368:	0800e6ab 	.word	0x0800e6ab
 800e36c:	0800e6ab 	.word	0x0800e6ab
 800e370:	0800e6ab 	.word	0x0800e6ab
 800e374:	0800e6ab 	.word	0x0800e6ab
 800e378:	0800e6ab 	.word	0x0800e6ab
 800e37c:	0800e4a5 	.word	0x0800e4a5
 800e380:	0800e4b1 	.word	0x0800e4b1
 800e384:	0800e4bd 	.word	0x0800e4bd
 800e388:	0800e4df 	.word	0x0800e4df
 800e38c:	0800e4f1 	.word	0x0800e4f1
 800e390:	0800e503 	.word	0x0800e503
 800e394:	0800e515 	.word	0x0800e515
 800e398:	0800e549 	.word	0x0800e549
 800e39c:	0800e527 	.word	0x0800e527
 800e3a0:	0800e56b 	.word	0x0800e56b
 800e3a4:	0800e577 	.word	0x0800e577
 800e3a8:	0800e581 	.word	0x0800e581
 800e3ac:	0800e58b 	.word	0x0800e58b
 800e3b0:	0800e595 	.word	0x0800e595
 800e3b4:	0800e59f 	.word	0x0800e59f
 800e3b8:	0800e5a9 	.word	0x0800e5a9
 800e3bc:	0800e5d5 	.word	0x0800e5d5
 800e3c0:	0800e5e1 	.word	0x0800e5e1
 800e3c4:	0800e5f9 	.word	0x0800e5f9
 800e3c8:	0800e5ed 	.word	0x0800e5ed
 800e3cc:	0800e605 	.word	0x0800e605
 800e3d0:	0800e60f 	.word	0x0800e60f
 800e3d4:	0800e61b 	.word	0x0800e61b
 800e3d8:	0800e637 	.word	0x0800e637
 800e3dc:	0800e627 	.word	0x0800e627
 800e3e0:	0800e62f 	.word	0x0800e62f
 800e3e4:	0800e6ab 	.word	0x0800e6ab
 800e3e8:	0800e643 	.word	0x0800e643
 800e3ec:	0800e6ab 	.word	0x0800e6ab
 800e3f0:	0800e6ab 	.word	0x0800e6ab
 800e3f4:	0800e6ab 	.word	0x0800e6ab
 800e3f8:	0800e6ab 	.word	0x0800e6ab
 800e3fc:	0800e6ab 	.word	0x0800e6ab
 800e400:	0800e6ab 	.word	0x0800e6ab
 800e404:	0800e6ab 	.word	0x0800e6ab
 800e408:	0800e6ab 	.word	0x0800e6ab
 800e40c:	0800e6ab 	.word	0x0800e6ab
 800e410:	0800e6ab 	.word	0x0800e6ab
 800e414:	0800e6ab 	.word	0x0800e6ab
 800e418:	0800e6ab 	.word	0x0800e6ab
 800e41c:	0800e6ab 	.word	0x0800e6ab
 800e420:	0800e6ab 	.word	0x0800e6ab
 800e424:	0800e6ab 	.word	0x0800e6ab
 800e428:	0800e657 	.word	0x0800e657
 800e42c:	0800e663 	.word	0x0800e663
 800e430:	0800e66f 	.word	0x0800e66f
 800e434:	0800e67b 	.word	0x0800e67b
 800e438:	0800e687 	.word	0x0800e687
 800e43c:	0800e693 	.word	0x0800e693
 800e440:	0800e69f 	.word	0x0800e69f
 800e444:	0800e6a5 	.word	0x0800e6a5
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 800e448:	4b9d      	ldr	r3, [pc, #628]	@ (800e6c0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e44a:	f893 2118 	ldrb.w	r2, [r3, #280]	@ 0x118
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	711a      	strb	r2, [r3, #4]
            break;
 800e452:	e130      	b.n	800e6b6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800e454:	4b9a      	ldr	r3, [pc, #616]	@ (800e6c0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e456:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	711a      	strb	r2, [r3, #4]
            break;
 800e45e:	e12a      	b.n	800e6b6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	685b      	ldr	r3, [r3, #4]
 800e464:	4618      	mov	r0, r3
 800e466:	f008 fa29 	bl	80168bc <SecureElementGetDevEui>
            break;
 800e46a:	e124      	b.n	800e6b6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	685b      	ldr	r3, [r3, #4]
 800e470:	4618      	mov	r0, r3
 800e472:	f008 fa6d 	bl	8016950 <SecureElementGetJoinEui>
            break;
 800e476:	e11e      	b.n	800e6b6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 800e478:	4b91      	ldr	r3, [pc, #580]	@ (800e6c0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e47a:	f893 211a 	ldrb.w	r2, [r3, #282]	@ 0x11a
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	711a      	strb	r2, [r3, #4]
            break;
 800e482:	e118      	b.n	800e6b6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 800e484:	4b8e      	ldr	r3, [pc, #568]	@ (800e6c0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e486:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	605a      	str	r2, [r3, #4]
            break;
 800e48e:	e112      	b.n	800e6b6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 800e490:	4b8b      	ldr	r3, [pc, #556]	@ (800e6c0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e492:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	3304      	adds	r3, #4
 800e49a:	4619      	mov	r1, r3
 800e49c:	4610      	mov	r0, r2
 800e49e:	f008 fa6f 	bl	8016980 <SecureElementGetDevAddr>
            break;
 800e4a2:	e108      	b.n	800e6b6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 800e4a4:	4b86      	ldr	r3, [pc, #536]	@ (800e6c0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e4a6:	f893 2119 	ldrb.w	r2, [r3, #281]	@ 0x119
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	711a      	strb	r2, [r3, #4]
            break;
 800e4ae:	e102      	b.n	800e6b6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800e4b0:	4b83      	ldr	r3, [pc, #524]	@ (800e6c0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e4b2:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	711a      	strb	r2, [r3, #4]
            break;
 800e4ba:	e0fc      	b.n	800e6b6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 800e4bc:	231c      	movs	r3, #28
 800e4be:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e4c0:	4b7f      	ldr	r3, [pc, #508]	@ (800e6c0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e4c2:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e4c6:	f107 0210 	add.w	r2, r7, #16
 800e4ca:	4611      	mov	r1, r2
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	f003 f822 	bl	8011516 <RegionGetPhyParam>
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 800e4d6:	68fa      	ldr	r2, [r7, #12]
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	605a      	str	r2, [r3, #4]
            break;
 800e4dc:	e0eb      	b.n	800e6b6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	4a77      	ldr	r2, [pc, #476]	@ (800e6c0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e4e2:	3304      	adds	r3, #4
 800e4e4:	326c      	adds	r2, #108	@ 0x6c
 800e4e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e4ea:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 800e4ee:	e0e2      	b.n	800e6b6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	4a73      	ldr	r2, [pc, #460]	@ (800e6c0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e4f4:	3304      	adds	r3, #4
 800e4f6:	32b4      	adds	r2, #180	@ 0xb4
 800e4f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e4fc:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 800e500:	e0d9      	b.n	800e6b6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	4a6e      	ldr	r2, [pc, #440]	@ (800e6c0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e506:	3304      	adds	r3, #4
 800e508:	3274      	adds	r2, #116	@ 0x74
 800e50a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e50e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 800e512:	e0d0      	b.n	800e6b6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	4a6a      	ldr	r2, [pc, #424]	@ (800e6c0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e518:	3304      	adds	r3, #4
 800e51a:	32bc      	adds	r2, #188	@ 0xbc
 800e51c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e520:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 800e524:	e0c7      	b.n	800e6b6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800e526:	231a      	movs	r3, #26
 800e528:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e52a:	4b65      	ldr	r3, [pc, #404]	@ (800e6c0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e52c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e530:	f107 0210 	add.w	r2, r7, #16
 800e534:	4611      	mov	r1, r2
 800e536:	4618      	mov	r0, r3
 800e538:	f002 ffed 	bl	8011516 <RegionGetPhyParam>
 800e53c:	4603      	mov	r3, r0
 800e53e:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800e540:	68fa      	ldr	r2, [r7, #12]
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	605a      	str	r2, [r3, #4]
            break;
 800e546:	e0b6      	b.n	800e6b6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800e548:	2319      	movs	r3, #25
 800e54a:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e54c:	4b5c      	ldr	r3, [pc, #368]	@ (800e6c0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e54e:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e552:	f107 0210 	add.w	r2, r7, #16
 800e556:	4611      	mov	r1, r2
 800e558:	4618      	mov	r0, r3
 800e55a:	f002 ffdc 	bl	8011516 <RegionGetPhyParam>
 800e55e:	4603      	mov	r3, r0
 800e560:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800e562:	68fa      	ldr	r2, [r7, #12]
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	605a      	str	r2, [r3, #4]
            break;
 800e568:	e0a5      	b.n	800e6b6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800e56a:	4b55      	ldr	r3, [pc, #340]	@ (800e6c0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e56c:	f893 2068 	ldrb.w	r2, [r3, #104]	@ 0x68
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	711a      	strb	r2, [r3, #4]
            break;
 800e574:	e09f      	b.n	800e6b6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 800e576:	4b52      	ldr	r3, [pc, #328]	@ (800e6c0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e578:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	605a      	str	r2, [r3, #4]
            break;
 800e57e:	e09a      	b.n	800e6b6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 800e580:	4b4f      	ldr	r3, [pc, #316]	@ (800e6c0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e582:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	605a      	str	r2, [r3, #4]
            break;
 800e588:	e095      	b.n	800e6b6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 800e58a:	4b4d      	ldr	r3, [pc, #308]	@ (800e6c0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e58c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	605a      	str	r2, [r3, #4]
            break;
 800e592:	e090      	b.n	800e6b6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 800e594:	4b4a      	ldr	r3, [pc, #296]	@ (800e6c0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e596:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	605a      	str	r2, [r3, #4]
            break;
 800e59c:	e08b      	b.n	800e6b6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 800e59e:	4b48      	ldr	r3, [pc, #288]	@ (800e6c0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e5a0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	605a      	str	r2, [r3, #4]
            break;
 800e5a6:	e086      	b.n	800e6b6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 800e5a8:	2302      	movs	r3, #2
 800e5aa:	743b      	strb	r3, [r7, #16]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800e5ac:	4b44      	ldr	r3, [pc, #272]	@ (800e6c0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e5ae:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800e5b2:	74bb      	strb	r3, [r7, #18]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e5b4:	4b42      	ldr	r3, [pc, #264]	@ (800e6c0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e5b6:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800e5ba:	f107 0210 	add.w	r2, r7, #16
 800e5be:	4611      	mov	r1, r2
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	f002 ffa8 	bl	8011516 <RegionGetPhyParam>
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	b25a      	sxtb	r2, r3
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	711a      	strb	r2, [r3, #4]
            break;
 800e5d2:	e070      	b.n	800e6b6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800e5d4:	4b3a      	ldr	r3, [pc, #232]	@ (800e6c0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e5d6:	f993 20dd 	ldrsb.w	r2, [r3, #221]	@ 0xdd
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	711a      	strb	r2, [r3, #4]
            break;
 800e5de:	e06a      	b.n	800e6b6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800e5e0:	4b37      	ldr	r3, [pc, #220]	@ (800e6c0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e5e2:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	711a      	strb	r2, [r3, #4]
            break;
 800e5ea:	e064      	b.n	800e6b6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800e5ec:	4b34      	ldr	r3, [pc, #208]	@ (800e6c0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e5ee:	f993 20dc 	ldrsb.w	r2, [r3, #220]	@ 0xdc
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	711a      	strb	r2, [r3, #4]
            break;
 800e5f6:	e05e      	b.n	800e6b6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800e5f8:	4b31      	ldr	r3, [pc, #196]	@ (800e6c0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e5fa:	f993 2038 	ldrsb.w	r2, [r3, #56]	@ 0x38
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	711a      	strb	r2, [r3, #4]
            break;
 800e602:	e058      	b.n	800e6b6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 800e604:	4b2e      	ldr	r3, [pc, #184]	@ (800e6c0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e606:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	605a      	str	r2, [r3, #4]
            break;
 800e60c:	e053      	b.n	800e6b6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 800e60e:	4b2c      	ldr	r3, [pc, #176]	@ (800e6c0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e610:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	711a      	strb	r2, [r3, #4]
            break;
 800e618:	e04d      	b.n	800e6b6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800e61a:	4b29      	ldr	r3, [pc, #164]	@ (800e6c0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e61c:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	605a      	str	r2, [r3, #4]
            break;
 800e624:	e047      	b.n	800e6b6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	4a25      	ldr	r2, [pc, #148]	@ (800e6c0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e62a:	605a      	str	r2, [r3, #4]
            break;
 800e62c:	e043      	b.n	800e6b6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	4a24      	ldr	r2, [pc, #144]	@ (800e6c4 <LoRaMacMibGetRequestConfirm+0x3ac>)
 800e632:	605a      	str	r2, [r3, #4]
#else
            mibGet->Param.BackupContexts = NULL;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 800e634:	e03f      	b.n	800e6b6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800e636:	4b22      	ldr	r3, [pc, #136]	@ (800e6c0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e638:	f8d3 20cc 	ldr.w	r2, [r3, #204]	@ 0xcc
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	605a      	str	r2, [r3, #4]
            break;
 800e640:	e039      	b.n	800e6b6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	4a1e      	ldr	r2, [pc, #120]	@ (800e6c0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e646:	f8d2 212c 	ldr.w	r2, [r2, #300]	@ 0x12c
 800e64a:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800e64c:	687c      	ldr	r4, [r7, #4]
 800e64e:	f003 f96f 	bl	8011930 <RegionGetVersion>
 800e652:	60a0      	str	r0, [r4, #8]
            break;
 800e654:	e02f      	b.n	800e6b6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800e656:	4b1a      	ldr	r3, [pc, #104]	@ (800e6c0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e658:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	605a      	str	r2, [r3, #4]
            break;
 800e660:	e029      	b.n	800e6b6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 800e662:	4b17      	ldr	r3, [pc, #92]	@ (800e6c0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e664:	f893 211f 	ldrb.w	r2, [r3, #287]	@ 0x11f
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	711a      	strb	r2, [r3, #4]
            break;
 800e66c:	e023      	b.n	800e6b6 <LoRaMacMibGetRequestConfirm+0x39e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800e66e:	4b14      	ldr	r3, [pc, #80]	@ (800e6c0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e670:	f8b3 2088 	ldrh.w	r2, [r3, #136]	@ 0x88
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	809a      	strh	r2, [r3, #4]
            break;
 800e678:	e01d      	b.n	800e6b6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800e67a:	4b11      	ldr	r3, [pc, #68]	@ (800e6c0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e67c:	f8b3 208a 	ldrh.w	r2, [r3, #138]	@ 0x8a
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	809a      	strh	r2, [r3, #4]
            break;
 800e684:	e017      	b.n	800e6b6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 800e686:	4b0e      	ldr	r3, [pc, #56]	@ (800e6c0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e688:	f8b3 20d0 	ldrh.w	r2, [r3, #208]	@ 0xd0
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	809a      	strh	r2, [r3, #4]
            break;
 800e690:	e011      	b.n	800e6b6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 800e692:	4b0b      	ldr	r3, [pc, #44]	@ (800e6c0 <LoRaMacMibGetRequestConfirm+0x3a8>)
 800e694:	f8b3 20d2 	ldrh.w	r2, [r3, #210]	@ 0xd2
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	809a      	strh	r2, [r3, #4]
            break;
 800e69c:	e00b      	b.n	800e6b6 <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 800e69e:	2318      	movs	r3, #24
 800e6a0:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 800e6a2:	e008      	b.n	800e6b6 <LoRaMacMibGetRequestConfirm+0x39e>
            else
            {
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 800e6a4:	2318      	movs	r3, #24
 800e6a6:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 800e6a8:	e005      	b.n	800e6b6 <LoRaMacMibGetRequestConfirm+0x39e>
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800e6aa:	6878      	ldr	r0, [r7, #4]
 800e6ac:	f000 fff9 	bl	800f6a2 <LoRaMacClassBMibGetRequestConfirm>
 800e6b0:	4603      	mov	r3, r0
 800e6b2:	75fb      	strb	r3, [r7, #23]
            break;
 800e6b4:	bf00      	nop
        }
    }
    return status;
 800e6b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	371c      	adds	r7, #28
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	bd90      	pop	{r4, r7, pc}
 800e6c0:	20008000 	.word	0x20008000
 800e6c4:	200085cc 	.word	0x200085cc

0800e6c8 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b086      	sub	sp, #24
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800e6d0:	2300      	movs	r3, #0
 800e6d2:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d101      	bne.n	800e6de <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800e6da:	2303      	movs	r3, #3
 800e6dc:	e396      	b.n	800ee0c <LoRaMacMibSetRequestConfirm+0x744>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800e6de:	4bbd      	ldr	r3, [pc, #756]	@ (800e9d4 <LoRaMacMibSetRequestConfirm+0x30c>)
 800e6e0:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e6e4:	f003 0302 	and.w	r3, r3, #2
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d001      	beq.n	800e6f0 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 800e6ec:	2301      	movs	r3, #1
 800e6ee:	e38d      	b.n	800ee0c <LoRaMacMibSetRequestConfirm+0x744>
    }

    switch( mibSet->Type )
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	781b      	ldrb	r3, [r3, #0]
 800e6f4:	2b41      	cmp	r3, #65	@ 0x41
 800e6f6:	f200 835d 	bhi.w	800edb4 <LoRaMacMibSetRequestConfirm+0x6ec>
 800e6fa:	a201      	add	r2, pc, #4	@ (adr r2, 800e700 <LoRaMacMibSetRequestConfirm+0x38>)
 800e6fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e700:	0800e809 	.word	0x0800e809
 800e704:	0800e819 	.word	0x0800e819
 800e708:	0800e833 	.word	0x0800e833
 800e70c:	0800e84b 	.word	0x0800e84b
 800e710:	0800e863 	.word	0x0800e863
 800e714:	0800e86f 	.word	0x0800e86f
 800e718:	0800e87b 	.word	0x0800e87b
 800e71c:	0800e8a5 	.word	0x0800e8a5
 800e720:	0800e8cb 	.word	0x0800e8cb
 800e724:	0800e8f1 	.word	0x0800e8f1
 800e728:	0800e917 	.word	0x0800e917
 800e72c:	0800e93d 	.word	0x0800e93d
 800e730:	0800e963 	.word	0x0800e963
 800e734:	0800e989 	.word	0x0800e989
 800e738:	0800e9af 	.word	0x0800e9af
 800e73c:	0800e9dd 	.word	0x0800e9dd
 800e740:	0800e9fd 	.word	0x0800e9fd
 800e744:	0800edb5 	.word	0x0800edb5
 800e748:	0800ea09 	.word	0x0800ea09
 800e74c:	0800ea79 	.word	0x0800ea79
 800e750:	0800eab9 	.word	0x0800eab9
 800e754:	0800eb1b 	.word	0x0800eb1b
 800e758:	0800eb8b 	.word	0x0800eb8b
 800e75c:	0800eb5b 	.word	0x0800eb5b
 800e760:	0800ebbb 	.word	0x0800ebbb
 800e764:	0800ebdd 	.word	0x0800ebdd
 800e768:	0800ebe7 	.word	0x0800ebe7
 800e76c:	0800ebf1 	.word	0x0800ebf1
 800e770:	0800ebfb 	.word	0x0800ebfb
 800e774:	0800ec05 	.word	0x0800ec05
 800e778:	0800edb5 	.word	0x0800edb5
 800e77c:	0800ec0f 	.word	0x0800ec0f
 800e780:	0800ec41 	.word	0x0800ec41
 800e784:	0800ecb5 	.word	0x0800ecb5
 800e788:	0800ec7b 	.word	0x0800ec7b
 800e78c:	0800ece7 	.word	0x0800ece7
 800e790:	0800ecfd 	.word	0x0800ecfd
 800e794:	0800ed15 	.word	0x0800ed15
 800e798:	0800ed21 	.word	0x0800ed21
 800e79c:	0800ed2d 	.word	0x0800ed2d
 800e7a0:	0800edb5 	.word	0x0800edb5
 800e7a4:	0800ed37 	.word	0x0800ed37
 800e7a8:	0800edb5 	.word	0x0800edb5
 800e7ac:	0800edb5 	.word	0x0800edb5
 800e7b0:	0800edb5 	.word	0x0800edb5
 800e7b4:	0800edb5 	.word	0x0800edb5
 800e7b8:	0800edb5 	.word	0x0800edb5
 800e7bc:	0800edb5 	.word	0x0800edb5
 800e7c0:	0800edb5 	.word	0x0800edb5
 800e7c4:	0800edb5 	.word	0x0800edb5
 800e7c8:	0800edb5 	.word	0x0800edb5
 800e7cc:	0800edb5 	.word	0x0800edb5
 800e7d0:	0800edb5 	.word	0x0800edb5
 800e7d4:	0800edb5 	.word	0x0800edb5
 800e7d8:	0800edb5 	.word	0x0800edb5
 800e7dc:	0800edb5 	.word	0x0800edb5
 800e7e0:	0800edb5 	.word	0x0800edb5
 800e7e4:	0800edb5 	.word	0x0800edb5
 800e7e8:	0800ed61 	.word	0x0800ed61
 800e7ec:	0800ed6d 	.word	0x0800ed6d
 800e7f0:	0800ed79 	.word	0x0800ed79
 800e7f4:	0800ed85 	.word	0x0800ed85
 800e7f8:	0800ed91 	.word	0x0800ed91
 800e7fc:	0800ed9d 	.word	0x0800ed9d
 800e800:	0800eda9 	.word	0x0800eda9
 800e804:	0800edaf 	.word	0x0800edaf
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	791b      	ldrb	r3, [r3, #4]
 800e80c:	4618      	mov	r0, r3
 800e80e:	f7fd fb0f 	bl	800be30 <SwitchClass>
 800e812:	4603      	mov	r3, r0
 800e814:	75fb      	strb	r3, [r7, #23]
            break;
 800e816:	e2ee      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	791b      	ldrb	r3, [r3, #4]
 800e81c:	2b02      	cmp	r3, #2
 800e81e:	d005      	beq.n	800e82c <LoRaMacMibSetRequestConfirm+0x164>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	791a      	ldrb	r2, [r3, #4]
 800e824:	4b6c      	ldr	r3, [pc, #432]	@ (800e9d8 <LoRaMacMibSetRequestConfirm+0x310>)
 800e826:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800e82a:	e2e4      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e82c:	2303      	movs	r3, #3
 800e82e:	75fb      	strb	r3, [r7, #23]
            break;
 800e830:	e2e1      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	685b      	ldr	r3, [r3, #4]
 800e836:	4618      	mov	r0, r3
 800e838:	f008 f828 	bl	801688c <SecureElementSetDevEui>
 800e83c:	4603      	mov	r3, r0
 800e83e:	2b00      	cmp	r3, #0
 800e840:	f000 82be 	beq.w	800edc0 <LoRaMacMibSetRequestConfirm+0x6f8>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e844:	2303      	movs	r3, #3
 800e846:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800e848:	e2ba      	b.n	800edc0 <LoRaMacMibSetRequestConfirm+0x6f8>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	685b      	ldr	r3, [r3, #4]
 800e84e:	4618      	mov	r0, r3
 800e850:	f008 f84c 	bl	80168ec <SecureElementSetJoinEui>
 800e854:	4603      	mov	r3, r0
 800e856:	2b00      	cmp	r3, #0
 800e858:	f000 82b4 	beq.w	800edc4 <LoRaMacMibSetRequestConfirm+0x6fc>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e85c:	2303      	movs	r3, #3
 800e85e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800e860:	e2b0      	b.n	800edc4 <LoRaMacMibSetRequestConfirm+0x6fc>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	791a      	ldrb	r2, [r3, #4]
 800e866:	4b5c      	ldr	r3, [pc, #368]	@ (800e9d8 <LoRaMacMibSetRequestConfirm+0x310>)
 800e868:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a
            break;
 800e86c:	e2c3      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	685b      	ldr	r3, [r3, #4]
 800e872:	4a59      	ldr	r2, [pc, #356]	@ (800e9d8 <LoRaMacMibSetRequestConfirm+0x310>)
 800e874:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
            break;
 800e878:	e2bd      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEV_ADDR:
        {
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 800e87a:	4b57      	ldr	r3, [pc, #348]	@ (800e9d8 <LoRaMacMibSetRequestConfirm+0x310>)
 800e87c:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	685b      	ldr	r3, [r3, #4]
 800e884:	4619      	mov	r1, r3
 800e886:	4610      	mov	r0, r2
 800e888:	f008 f848 	bl	801691c <SecureElementSetDevAddr>
 800e88c:	4603      	mov	r3, r0
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d002      	beq.n	800e898 <LoRaMacMibSetRequestConfirm+0x1d0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e892:	2303      	movs	r3, #3
 800e894:	75fb      	strb	r3, [r7, #23]
            else
            {
                /* Update Nvm.MacGroup2.devAdr to handle set/get sequence */
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
            }
            break;
 800e896:	e2ae      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	685b      	ldr	r3, [r3, #4]
 800e89c:	4a4e      	ldr	r2, [pc, #312]	@ (800e9d8 <LoRaMacMibSetRequestConfirm+0x310>)
 800e89e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
            break;
 800e8a2:	e2a8      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	685b      	ldr	r3, [r3, #4]
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d00b      	beq.n	800e8c4 <LoRaMacMibSetRequestConfirm+0x1fc>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	685b      	ldr	r3, [r3, #4]
 800e8b0:	4619      	mov	r1, r3
 800e8b2:	2000      	movs	r0, #0
 800e8b4:	f002 f83e 	bl	8010934 <LoRaMacCryptoSetKey>
 800e8b8:	4603      	mov	r3, r0
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	f000 8284 	beq.w	800edc8 <LoRaMacMibSetRequestConfirm+0x700>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e8c0:	2311      	movs	r3, #17
 800e8c2:	e2a3      	b.n	800ee0c <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e8c4:	2303      	movs	r3, #3
 800e8c6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800e8c8:	e27e      	b.n	800edc8 <LoRaMacMibSetRequestConfirm+0x700>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	685b      	ldr	r3, [r3, #4]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d00b      	beq.n	800e8ea <LoRaMacMibSetRequestConfirm+0x222>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	685b      	ldr	r3, [r3, #4]
 800e8d6:	4619      	mov	r1, r3
 800e8d8:	2001      	movs	r0, #1
 800e8da:	f002 f82b 	bl	8010934 <LoRaMacCryptoSetKey>
 800e8de:	4603      	mov	r3, r0
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	f000 8273 	beq.w	800edcc <LoRaMacMibSetRequestConfirm+0x704>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e8e6:	2311      	movs	r3, #17
 800e8e8:	e290      	b.n	800ee0c <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e8ea:	2303      	movs	r3, #3
 800e8ec:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800e8ee:	e26d      	b.n	800edcc <LoRaMacMibSetRequestConfirm+0x704>
            break;
        }
#else
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	685b      	ldr	r3, [r3, #4]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d00b      	beq.n	800e910 <LoRaMacMibSetRequestConfirm+0x248>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	685b      	ldr	r3, [r3, #4]
 800e8fc:	4619      	mov	r1, r3
 800e8fe:	2008      	movs	r0, #8
 800e900:	f002 f818 	bl	8010934 <LoRaMacCryptoSetKey>
 800e904:	4603      	mov	r3, r0
 800e906:	2b00      	cmp	r3, #0
 800e908:	f000 8262 	beq.w	800edd0 <LoRaMacMibSetRequestConfirm+0x708>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e90c:	2311      	movs	r3, #17
 800e90e:	e27d      	b.n	800ee0c <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e910:	2303      	movs	r3, #3
 800e912:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800e914:	e25c      	b.n	800edd0 <LoRaMacMibSetRequestConfirm+0x708>
        }
#endif /* LORAMAC_VERSION */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	685b      	ldr	r3, [r3, #4]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d00b      	beq.n	800e936 <LoRaMacMibSetRequestConfirm+0x26e>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	685b      	ldr	r3, [r3, #4]
 800e922:	4619      	mov	r1, r3
 800e924:	2009      	movs	r0, #9
 800e926:	f002 f805 	bl	8010934 <LoRaMacCryptoSetKey>
 800e92a:	4603      	mov	r3, r0
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	f000 8251 	beq.w	800edd4 <LoRaMacMibSetRequestConfirm+0x70c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e932:	2311      	movs	r3, #17
 800e934:	e26a      	b.n	800ee0c <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e936:	2303      	movs	r3, #3
 800e938:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800e93a:	e24b      	b.n	800edd4 <LoRaMacMibSetRequestConfirm+0x70c>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	685b      	ldr	r3, [r3, #4]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d00b      	beq.n	800e95c <LoRaMacMibSetRequestConfirm+0x294>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	685b      	ldr	r3, [r3, #4]
 800e948:	4619      	mov	r1, r3
 800e94a:	200c      	movs	r0, #12
 800e94c:	f001 fff2 	bl	8010934 <LoRaMacCryptoSetKey>
 800e950:	4603      	mov	r3, r0
 800e952:	2b00      	cmp	r3, #0
 800e954:	f000 8240 	beq.w	800edd8 <LoRaMacMibSetRequestConfirm+0x710>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e958:	2311      	movs	r3, #17
 800e95a:	e257      	b.n	800ee0c <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e95c:	2303      	movs	r3, #3
 800e95e:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800e960:	e23a      	b.n	800edd8 <LoRaMacMibSetRequestConfirm+0x710>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	685b      	ldr	r3, [r3, #4]
 800e966:	2b00      	cmp	r3, #0
 800e968:	d00b      	beq.n	800e982 <LoRaMacMibSetRequestConfirm+0x2ba>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	685b      	ldr	r3, [r3, #4]
 800e96e:	4619      	mov	r1, r3
 800e970:	200d      	movs	r0, #13
 800e972:	f001 ffdf 	bl	8010934 <LoRaMacCryptoSetKey>
 800e976:	4603      	mov	r3, r0
 800e978:	2b00      	cmp	r3, #0
 800e97a:	f000 822f 	beq.w	800eddc <LoRaMacMibSetRequestConfirm+0x714>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e97e:	2311      	movs	r3, #17
 800e980:	e244      	b.n	800ee0c <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e982:	2303      	movs	r3, #3
 800e984:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800e986:	e229      	b.n	800eddc <LoRaMacMibSetRequestConfirm+0x714>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	685b      	ldr	r3, [r3, #4]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d00b      	beq.n	800e9a8 <LoRaMacMibSetRequestConfirm+0x2e0>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	685b      	ldr	r3, [r3, #4]
 800e994:	4619      	mov	r1, r3
 800e996:	200e      	movs	r0, #14
 800e998:	f001 ffcc 	bl	8010934 <LoRaMacCryptoSetKey>
 800e99c:	4603      	mov	r3, r0
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	f000 821e 	beq.w	800ede0 <LoRaMacMibSetRequestConfirm+0x718>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e9a4:	2311      	movs	r3, #17
 800e9a6:	e231      	b.n	800ee0c <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e9a8:	2303      	movs	r3, #3
 800e9aa:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800e9ac:	e218      	b.n	800ede0 <LoRaMacMibSetRequestConfirm+0x718>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	685b      	ldr	r3, [r3, #4]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d00b      	beq.n	800e9ce <LoRaMacMibSetRequestConfirm+0x306>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	685b      	ldr	r3, [r3, #4]
 800e9ba:	4619      	mov	r1, r3
 800e9bc:	200f      	movs	r0, #15
 800e9be:	f001 ffb9 	bl	8010934 <LoRaMacCryptoSetKey>
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	f000 820d 	beq.w	800ede4 <LoRaMacMibSetRequestConfirm+0x71c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800e9ca:	2311      	movs	r3, #17
 800e9cc:	e21e      	b.n	800ee0c <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800e9ce:	2303      	movs	r3, #3
 800e9d0:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800e9d2:	e207      	b.n	800ede4 <LoRaMacMibSetRequestConfirm+0x71c>
 800e9d4:	20000a28 	.word	0x20000a28
 800e9d8:	20008000 	.word	0x20008000
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	791a      	ldrb	r2, [r3, #4]
 800e9e0:	4bb2      	ldr	r3, [pc, #712]	@ (800ecac <LoRaMacMibSetRequestConfirm+0x5e4>)
 800e9e2:	f883 2119 	strb.w	r2, [r3, #281]	@ 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800e9e6:	4bb2      	ldr	r3, [pc, #712]	@ (800ecb0 <LoRaMacMibSetRequestConfirm+0x5e8>)
 800e9e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e9ea:	4ab0      	ldr	r2, [pc, #704]	@ (800ecac <LoRaMacMibSetRequestConfirm+0x5e4>)
 800e9ec:	f892 2119 	ldrb.w	r2, [r2, #281]	@ 0x119
 800e9f0:	4610      	mov	r0, r2
 800e9f2:	4798      	blx	r3
            Radio.Sleep( );
 800e9f4:	4bae      	ldr	r3, [pc, #696]	@ (800ecb0 <LoRaMacMibSetRequestConfirm+0x5e8>)
 800e9f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9f8:	4798      	blx	r3
            break;
 800e9fa:	e1fc      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	791a      	ldrb	r2, [r3, #4]
 800ea00:	4baa      	ldr	r3, [pc, #680]	@ (800ecac <LoRaMacMibSetRequestConfirm+0x5e4>)
 800ea02:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
            break;
 800ea06:	e1f6      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	7a1b      	ldrb	r3, [r3, #8]
 800ea0c:	b25b      	sxtb	r3, r3
 800ea0e:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ea10:	4ba6      	ldr	r3, [pc, #664]	@ (800ecac <LoRaMacMibSetRequestConfirm+0x5e4>)
 800ea12:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800ea16:	727b      	strb	r3, [r7, #9]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 800ea18:	4ba4      	ldr	r3, [pc, #656]	@ (800ecac <LoRaMacMibSetRequestConfirm+0x5e4>)
 800ea1a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ea1e:	f107 0108 	add.w	r1, r7, #8
 800ea22:	2207      	movs	r2, #7
 800ea24:	4618      	mov	r0, r3
 800ea26:	f002 fdc4 	bl	80115b2 <RegionVerify>
 800ea2a:	4603      	mov	r3, r0
 800ea2c:	f083 0301 	eor.w	r3, r3, #1
 800ea30:	b2db      	uxtb	r3, r3
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d002      	beq.n	800ea3c <LoRaMacMibSetRequestConfirm+0x374>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ea36:	2303      	movs	r3, #3
 800ea38:	75fb      	strb	r3, [r7, #23]
                else
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            break;
 800ea3a:	e1dc      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	685b      	ldr	r3, [r3, #4]
 800ea40:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 800ea42:	4b9a      	ldr	r3, [pc, #616]	@ (800ecac <LoRaMacMibSetRequestConfirm+0x5e4>)
 800ea44:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ea48:	f107 0108 	add.w	r1, r7, #8
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	4618      	mov	r0, r3
 800ea50:	f002 fdaf 	bl	80115b2 <RegionVerify>
 800ea54:	4603      	mov	r3, r0
 800ea56:	f083 0301 	eor.w	r3, r3, #1
 800ea5a:	b2db      	uxtb	r3, r3
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d002      	beq.n	800ea66 <LoRaMacMibSetRequestConfirm+0x39e>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ea60:	2303      	movs	r3, #3
 800ea62:	75fb      	strb	r3, [r7, #23]
            break;
 800ea64:	e1c7      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800ea66:	4b91      	ldr	r3, [pc, #580]	@ (800ecac <LoRaMacMibSetRequestConfirm+0x5e4>)
 800ea68:	687a      	ldr	r2, [r7, #4]
 800ea6a:	336c      	adds	r3, #108	@ 0x6c
 800ea6c:	3204      	adds	r2, #4
 800ea6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ea72:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 800ea76:	e1be      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	7a1b      	ldrb	r3, [r3, #8]
 800ea7c:	b25b      	sxtb	r3, r3
 800ea7e:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ea80:	4b8a      	ldr	r3, [pc, #552]	@ (800ecac <LoRaMacMibSetRequestConfirm+0x5e4>)
 800ea82:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800ea86:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800ea88:	4b88      	ldr	r3, [pc, #544]	@ (800ecac <LoRaMacMibSetRequestConfirm+0x5e4>)
 800ea8a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ea8e:	f107 0108 	add.w	r1, r7, #8
 800ea92:	2207      	movs	r2, #7
 800ea94:	4618      	mov	r0, r3
 800ea96:	f002 fd8c 	bl	80115b2 <RegionVerify>
 800ea9a:	4603      	mov	r3, r0
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d008      	beq.n	800eab2 <LoRaMacMibSetRequestConfirm+0x3ea>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800eaa0:	4b82      	ldr	r3, [pc, #520]	@ (800ecac <LoRaMacMibSetRequestConfirm+0x5e4>)
 800eaa2:	687a      	ldr	r2, [r7, #4]
 800eaa4:	33b4      	adds	r3, #180	@ 0xb4
 800eaa6:	3204      	adds	r2, #4
 800eaa8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800eaac:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800eab0:	e1a1      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800eab2:	2303      	movs	r3, #3
 800eab4:	75fb      	strb	r3, [r7, #23]
            break;
 800eab6:	e19e      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	7a1b      	ldrb	r3, [r3, #8]
 800eabc:	b25b      	sxtb	r3, r3
 800eabe:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800eac0:	4b7a      	ldr	r3, [pc, #488]	@ (800ecac <LoRaMacMibSetRequestConfirm+0x5e4>)
 800eac2:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800eac6:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800eac8:	4b78      	ldr	r3, [pc, #480]	@ (800ecac <LoRaMacMibSetRequestConfirm+0x5e4>)
 800eaca:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800eace:	f107 0108 	add.w	r1, r7, #8
 800ead2:	2207      	movs	r2, #7
 800ead4:	4618      	mov	r0, r3
 800ead6:	f002 fd6c 	bl	80115b2 <RegionVerify>
 800eada:	4603      	mov	r3, r0
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d019      	beq.n	800eb14 <LoRaMacMibSetRequestConfirm+0x44c>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800eae0:	4b72      	ldr	r3, [pc, #456]	@ (800ecac <LoRaMacMibSetRequestConfirm+0x5e4>)
 800eae2:	687a      	ldr	r2, [r7, #4]
 800eae4:	3374      	adds	r3, #116	@ 0x74
 800eae6:	3204      	adds	r2, #4
 800eae8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800eaec:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800eaf0:	4b6e      	ldr	r3, [pc, #440]	@ (800ecac <LoRaMacMibSetRequestConfirm+0x5e4>)
 800eaf2:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800eaf6:	2b02      	cmp	r3, #2
 800eaf8:	f040 8176 	bne.w	800ede8 <LoRaMacMibSetRequestConfirm+0x720>
 800eafc:	4b6b      	ldr	r3, [pc, #428]	@ (800ecac <LoRaMacMibSetRequestConfirm+0x5e4>)
 800eafe:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	f000 8170 	beq.w	800ede8 <LoRaMacMibSetRequestConfirm+0x720>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 800eb08:	4b69      	ldr	r3, [pc, #420]	@ (800ecb0 <LoRaMacMibSetRequestConfirm+0x5e8>)
 800eb0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb0c:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 800eb0e:	f7fe fc7d 	bl	800d40c <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800eb12:	e169      	b.n	800ede8 <LoRaMacMibSetRequestConfirm+0x720>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800eb14:	2303      	movs	r3, #3
 800eb16:	75fb      	strb	r3, [r7, #23]
            break;
 800eb18:	e166      	b.n	800ede8 <LoRaMacMibSetRequestConfirm+0x720>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	7a1b      	ldrb	r3, [r3, #8]
 800eb1e:	b25b      	sxtb	r3, r3
 800eb20:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800eb22:	4b62      	ldr	r3, [pc, #392]	@ (800ecac <LoRaMacMibSetRequestConfirm+0x5e4>)
 800eb24:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800eb28:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800eb2a:	4b60      	ldr	r3, [pc, #384]	@ (800ecac <LoRaMacMibSetRequestConfirm+0x5e4>)
 800eb2c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800eb30:	f107 0108 	add.w	r1, r7, #8
 800eb34:	2207      	movs	r2, #7
 800eb36:	4618      	mov	r0, r3
 800eb38:	f002 fd3b 	bl	80115b2 <RegionVerify>
 800eb3c:	4603      	mov	r3, r0
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d008      	beq.n	800eb54 <LoRaMacMibSetRequestConfirm+0x48c>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800eb42:	4b5a      	ldr	r3, [pc, #360]	@ (800ecac <LoRaMacMibSetRequestConfirm+0x5e4>)
 800eb44:	687a      	ldr	r2, [r7, #4]
 800eb46:	33bc      	adds	r3, #188	@ 0xbc
 800eb48:	3204      	adds	r2, #4
 800eb4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800eb4e:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800eb52:	e150      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800eb54:	2303      	movs	r3, #3
 800eb56:	75fb      	strb	r3, [r7, #23]
            break;
 800eb58:	e14d      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	685b      	ldr	r3, [r3, #4]
 800eb5e:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800eb60:	2301      	movs	r3, #1
 800eb62:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800eb64:	4b51      	ldr	r3, [pc, #324]	@ (800ecac <LoRaMacMibSetRequestConfirm+0x5e4>)
 800eb66:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800eb6a:	f107 020c 	add.w	r2, r7, #12
 800eb6e:	4611      	mov	r1, r2
 800eb70:	4618      	mov	r0, r3
 800eb72:	f002 fd56 	bl	8011622 <RegionChanMaskSet>
 800eb76:	4603      	mov	r3, r0
 800eb78:	f083 0301 	eor.w	r3, r3, #1
 800eb7c:	b2db      	uxtb	r3, r3
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	f000 8134 	beq.w	800edec <LoRaMacMibSetRequestConfirm+0x724>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800eb84:	2303      	movs	r3, #3
 800eb86:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800eb88:	e130      	b.n	800edec <LoRaMacMibSetRequestConfirm+0x724>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	685b      	ldr	r3, [r3, #4]
 800eb8e:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800eb90:	2300      	movs	r3, #0
 800eb92:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800eb94:	4b45      	ldr	r3, [pc, #276]	@ (800ecac <LoRaMacMibSetRequestConfirm+0x5e4>)
 800eb96:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800eb9a:	f107 020c 	add.w	r2, r7, #12
 800eb9e:	4611      	mov	r1, r2
 800eba0:	4618      	mov	r0, r3
 800eba2:	f002 fd3e 	bl	8011622 <RegionChanMaskSet>
 800eba6:	4603      	mov	r3, r0
 800eba8:	f083 0301 	eor.w	r3, r3, #1
 800ebac:	b2db      	uxtb	r3, r3
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	f000 811e 	beq.w	800edf0 <LoRaMacMibSetRequestConfirm+0x728>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ebb4:	2303      	movs	r3, #3
 800ebb6:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800ebb8:	e11a      	b.n	800edf0 <LoRaMacMibSetRequestConfirm+0x728>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	791b      	ldrb	r3, [r3, #4]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d009      	beq.n	800ebd6 <LoRaMacMibSetRequestConfirm+0x50e>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800ebc6:	2b0f      	cmp	r3, #15
 800ebc8:	d805      	bhi.n	800ebd6 <LoRaMacMibSetRequestConfirm+0x50e>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	791a      	ldrb	r2, [r3, #4]
 800ebce:	4b37      	ldr	r3, [pc, #220]	@ (800ecac <LoRaMacMibSetRequestConfirm+0x5e4>)
 800ebd0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800ebd4:	e10f      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ebd6:	2303      	movs	r3, #3
 800ebd8:	75fb      	strb	r3, [r7, #23]
            break;
 800ebda:	e10c      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	685b      	ldr	r3, [r3, #4]
 800ebe0:	4a32      	ldr	r2, [pc, #200]	@ (800ecac <LoRaMacMibSetRequestConfirm+0x5e4>)
 800ebe2:	6553      	str	r3, [r2, #84]	@ 0x54
            break;
 800ebe4:	e107      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	685b      	ldr	r3, [r3, #4]
 800ebea:	4a30      	ldr	r2, [pc, #192]	@ (800ecac <LoRaMacMibSetRequestConfirm+0x5e4>)
 800ebec:	6593      	str	r3, [r2, #88]	@ 0x58
            break;
 800ebee:	e102      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	685b      	ldr	r3, [r3, #4]
 800ebf4:	4a2d      	ldr	r2, [pc, #180]	@ (800ecac <LoRaMacMibSetRequestConfirm+0x5e4>)
 800ebf6:	65d3      	str	r3, [r2, #92]	@ 0x5c
            break;
 800ebf8:	e0fd      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	685b      	ldr	r3, [r3, #4]
 800ebfe:	4a2b      	ldr	r2, [pc, #172]	@ (800ecac <LoRaMacMibSetRequestConfirm+0x5e4>)
 800ec00:	6613      	str	r3, [r2, #96]	@ 0x60
            break;
 800ec02:	e0f8      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	685b      	ldr	r3, [r3, #4]
 800ec08:	4a28      	ldr	r2, [pc, #160]	@ (800ecac <LoRaMacMibSetRequestConfirm+0x5e4>)
 800ec0a:	6653      	str	r3, [r2, #100]	@ 0x64
            break;
 800ec0c:	e0f3      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800ec14:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800ec16:	4b25      	ldr	r3, [pc, #148]	@ (800ecac <LoRaMacMibSetRequestConfirm+0x5e4>)
 800ec18:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ec1c:	f107 0108 	add.w	r1, r7, #8
 800ec20:	2206      	movs	r2, #6
 800ec22:	4618      	mov	r0, r3
 800ec24:	f002 fcc5 	bl	80115b2 <RegionVerify>
 800ec28:	4603      	mov	r3, r0
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d005      	beq.n	800ec3a <LoRaMacMibSetRequestConfirm+0x572>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 800ec2e:	f997 2008 	ldrsb.w	r2, [r7, #8]
 800ec32:	4b1e      	ldr	r3, [pc, #120]	@ (800ecac <LoRaMacMibSetRequestConfirm+0x5e4>)
 800ec34:	f883 20dd 	strb.w	r2, [r3, #221]	@ 0xdd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800ec38:	e0dd      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ec3a:	2303      	movs	r3, #3
 800ec3c:	75fb      	strb	r3, [r7, #23]
            break;
 800ec3e:	e0da      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800ec46:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800ec48:	4b18      	ldr	r3, [pc, #96]	@ (800ecac <LoRaMacMibSetRequestConfirm+0x5e4>)
 800ec4a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800ec4e:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800ec50:	4b16      	ldr	r3, [pc, #88]	@ (800ecac <LoRaMacMibSetRequestConfirm+0x5e4>)
 800ec52:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ec56:	f107 0108 	add.w	r1, r7, #8
 800ec5a:	2205      	movs	r2, #5
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	f002 fca8 	bl	80115b2 <RegionVerify>
 800ec62:	4603      	mov	r3, r0
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d005      	beq.n	800ec74 <LoRaMacMibSetRequestConfirm+0x5ac>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800ec68:	f997 2008 	ldrsb.w	r2, [r7, #8]
 800ec6c:	4b0f      	ldr	r3, [pc, #60]	@ (800ecac <LoRaMacMibSetRequestConfirm+0x5e4>)
 800ec6e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800ec72:	e0c0      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ec74:	2303      	movs	r3, #3
 800ec76:	75fb      	strb	r3, [r7, #23]
            break;
 800ec78:	e0bd      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800ec80:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 800ec82:	4b0a      	ldr	r3, [pc, #40]	@ (800ecac <LoRaMacMibSetRequestConfirm+0x5e4>)
 800ec84:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ec88:	f107 0108 	add.w	r1, r7, #8
 800ec8c:	220a      	movs	r2, #10
 800ec8e:	4618      	mov	r0, r3
 800ec90:	f002 fc8f 	bl	80115b2 <RegionVerify>
 800ec94:	4603      	mov	r3, r0
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d005      	beq.n	800eca6 <LoRaMacMibSetRequestConfirm+0x5de>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 800ec9a:	f997 2008 	ldrsb.w	r2, [r7, #8]
 800ec9e:	4b03      	ldr	r3, [pc, #12]	@ (800ecac <LoRaMacMibSetRequestConfirm+0x5e4>)
 800eca0:	f883 20dc 	strb.w	r2, [r3, #220]	@ 0xdc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800eca4:	e0a7      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800eca6:	2303      	movs	r3, #3
 800eca8:	75fb      	strb	r3, [r7, #23]
            break;
 800ecaa:	e0a4      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
 800ecac:	20008000 	.word	0x20008000
 800ecb0:	080210e8 	.word	0x080210e8
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800ecba:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 800ecbc:	4b55      	ldr	r3, [pc, #340]	@ (800ee14 <LoRaMacMibSetRequestConfirm+0x74c>)
 800ecbe:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ecc2:	f107 0108 	add.w	r1, r7, #8
 800ecc6:	2209      	movs	r2, #9
 800ecc8:	4618      	mov	r0, r3
 800ecca:	f002 fc72 	bl	80115b2 <RegionVerify>
 800ecce:	4603      	mov	r3, r0
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d005      	beq.n	800ece0 <LoRaMacMibSetRequestConfirm+0x618>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 800ecd4:	f997 2008 	ldrsb.w	r2, [r7, #8]
 800ecd8:	4b4e      	ldr	r3, [pc, #312]	@ (800ee14 <LoRaMacMibSetRequestConfirm+0x74c>)
 800ecda:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 800ecde:	e08a      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ece0:	2303      	movs	r3, #3
 800ece2:	75fb      	strb	r3, [r7, #23]
            break;
 800ece4:	e087      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	685b      	ldr	r3, [r3, #4]
 800ecea:	4a4a      	ldr	r2, [pc, #296]	@ (800ee14 <LoRaMacMibSetRequestConfirm+0x74c>)
 800ecec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800ecf0:	4b48      	ldr	r3, [pc, #288]	@ (800ee14 <LoRaMacMibSetRequestConfirm+0x74c>)
 800ecf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ecf6:	4a47      	ldr	r2, [pc, #284]	@ (800ee14 <LoRaMacMibSetRequestConfirm+0x74c>)
 800ecf8:	64d3      	str	r3, [r2, #76]	@ 0x4c
            break;
 800ecfa:	e07c      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	791a      	ldrb	r2, [r3, #4]
 800ed00:	4b44      	ldr	r3, [pc, #272]	@ (800ee14 <LoRaMacMibSetRequestConfirm+0x74c>)
 800ed02:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
 800ed06:	4b43      	ldr	r3, [pc, #268]	@ (800ee14 <LoRaMacMibSetRequestConfirm+0x74c>)
 800ed08:	f893 2098 	ldrb.w	r2, [r3, #152]	@ 0x98
 800ed0c:	4b41      	ldr	r3, [pc, #260]	@ (800ee14 <LoRaMacMibSetRequestConfirm+0x74c>)
 800ed0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            break;
 800ed12:	e070      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	685b      	ldr	r3, [r3, #4]
 800ed18:	4a3e      	ldr	r2, [pc, #248]	@ (800ee14 <LoRaMacMibSetRequestConfirm+0x74c>)
 800ed1a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
            break;
 800ed1e:	e06a      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	685b      	ldr	r3, [r3, #4]
 800ed24:	4a3b      	ldr	r2, [pc, #236]	@ (800ee14 <LoRaMacMibSetRequestConfirm+0x74c>)
 800ed26:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
            break;
 800ed2a:	e064      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 800ed2c:	f7fe fda0 	bl	800d870 <RestoreNvmData>
 800ed30:	4603      	mov	r3, r0
 800ed32:	75fb      	strb	r3, [r7, #23]
            break;
 800ed34:	e05f      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	799b      	ldrb	r3, [r3, #6]
 800ed3a:	2b01      	cmp	r3, #1
 800ed3c:	d80d      	bhi.n	800ed5a <LoRaMacMibSetRequestConfirm+0x692>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 800ed3e:	4a35      	ldr	r2, [pc, #212]	@ (800ee14 <LoRaMacMibSetRequestConfirm+0x74c>)
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	685b      	ldr	r3, [r3, #4]
 800ed44:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	6858      	ldr	r0, [r3, #4]
 800ed4c:	f001 fd54 	bl	80107f8 <LoRaMacCryptoSetLrWanVersion>
 800ed50:	4603      	mov	r3, r0
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d04e      	beq.n	800edf4 <LoRaMacMibSetRequestConfirm+0x72c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800ed56:	2311      	movs	r3, #17
 800ed58:	e058      	b.n	800ee0c <LoRaMacMibSetRequestConfirm+0x744>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ed5a:	2303      	movs	r3, #3
 800ed5c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 800ed5e:	e049      	b.n	800edf4 <LoRaMacMibSetRequestConfirm+0x72c>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	685b      	ldr	r3, [r3, #4]
 800ed64:	4a2b      	ldr	r2, [pc, #172]	@ (800ee14 <LoRaMacMibSetRequestConfirm+0x74c>)
 800ed66:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
            break;
 800ed6a:	e044      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	791a      	ldrb	r2, [r3, #4]
 800ed70:	4b28      	ldr	r3, [pc, #160]	@ (800ee14 <LoRaMacMibSetRequestConfirm+0x74c>)
 800ed72:	f883 211f 	strb.w	r2, [r3, #287]	@ 0x11f
            break;
 800ed76:	e03e      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	889a      	ldrh	r2, [r3, #4]
 800ed7c:	4b25      	ldr	r3, [pc, #148]	@ (800ee14 <LoRaMacMibSetRequestConfirm+0x74c>)
 800ed7e:	f8a3 2088 	strh.w	r2, [r3, #136]	@ 0x88
            break;
 800ed82:	e038      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DELAY:
        {
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	889a      	ldrh	r2, [r3, #4]
 800ed88:	4b22      	ldr	r3, [pc, #136]	@ (800ee14 <LoRaMacMibSetRequestConfirm+0x74c>)
 800ed8a:	f8a3 208a 	strh.w	r2, [r3, #138]	@ 0x8a
            break;
 800ed8e:	e032      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	889a      	ldrh	r2, [r3, #4]
 800ed94:	4b1f      	ldr	r3, [pc, #124]	@ (800ee14 <LoRaMacMibSetRequestConfirm+0x74c>)
 800ed96:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
            break;
 800ed9a:	e02c      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	889a      	ldrh	r2, [r3, #4]
 800eda0:	4b1c      	ldr	r3, [pc, #112]	@ (800ee14 <LoRaMacMibSetRequestConfirm+0x74c>)
 800eda2:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2
            break;
 800eda6:	e026      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
            else
            {
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 800eda8:	2318      	movs	r3, #24
 800edaa:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 800edac:	e023      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
            else
            {
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
            }
#else
            status = LORAMAC_STATUS_ERROR;
 800edae:	2318      	movs	r3, #24
 800edb0:	75fb      	strb	r3, [r7, #23]
#endif
            break;
 800edb2:	e020      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800edb4:	6878      	ldr	r0, [r7, #4]
 800edb6:	f000 fc7e 	bl	800f6b6 <LoRaMacMibClassBSetRequestConfirm>
 800edba:	4603      	mov	r3, r0
 800edbc:	75fb      	strb	r3, [r7, #23]
            break;
 800edbe:	e01a      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800edc0:	bf00      	nop
 800edc2:	e018      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800edc4:	bf00      	nop
 800edc6:	e016      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800edc8:	bf00      	nop
 800edca:	e014      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800edcc:	bf00      	nop
 800edce:	e012      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800edd0:	bf00      	nop
 800edd2:	e010      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800edd4:	bf00      	nop
 800edd6:	e00e      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800edd8:	bf00      	nop
 800edda:	e00c      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800eddc:	bf00      	nop
 800edde:	e00a      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800ede0:	bf00      	nop
 800ede2:	e008      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800ede4:	bf00      	nop
 800ede6:	e006      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800ede8:	bf00      	nop
 800edea:	e004      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800edec:	bf00      	nop
 800edee:	e002      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800edf0:	bf00      	nop
 800edf2:	e000      	b.n	800edf6 <LoRaMacMibSetRequestConfirm+0x72e>
            break;
 800edf4:	bf00      	nop
        }
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( status == LORAMAC_STATUS_OK )
 800edf6:	7dfb      	ldrb	r3, [r7, #23]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d106      	bne.n	800ee0a <LoRaMacMibSetRequestConfirm+0x742>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800edfc:	4a06      	ldr	r2, [pc, #24]	@ (800ee18 <LoRaMacMibSetRequestConfirm+0x750>)
 800edfe:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800ee02:	f043 0320 	orr.w	r3, r3, #32
 800ee06:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
#endif /* LORAMAC_VERSION */
    return status;
 800ee0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	3718      	adds	r7, #24
 800ee10:	46bd      	mov	sp, r7
 800ee12:	bd80      	pop	{r7, pc}
 800ee14:	20008000 	.word	0x20008000
 800ee18:	20000a28 	.word	0x20000a28

0800ee1c <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b08a      	sub	sp, #40	@ 0x28
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800ee24:	2302      	movs	r3, #2
 800ee26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	83bb      	strh	r3, [r7, #28]

    if( mlmeRequest == NULL )
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d101      	bne.n	800ee38 <LoRaMacMlmeRequest+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ee34:	2303      	movs	r3, #3
 800ee36:	e17e      	b.n	800f136 <LoRaMacMlmeRequest+0x31a>
    }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	2200      	movs	r2, #0
 800ee3c:	611a      	str	r2, [r3, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 800ee3e:	f7fc fbd9 	bl	800b5f4 <LoRaMacIsBusy>
 800ee42:	4603      	mov	r3, r0
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d001      	beq.n	800ee4c <LoRaMacMlmeRequest+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 800ee48:	2301      	movs	r3, #1
 800ee4a:	e174      	b.n	800f136 <LoRaMacMlmeRequest+0x31a>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800ee4c:	f001 f96e 	bl	801012c <LoRaMacConfirmQueueIsFull>
 800ee50:	4603      	mov	r3, r0
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d001      	beq.n	800ee5a <LoRaMacMlmeRequest+0x3e>
    {
        return LORAMAC_STATUS_BUSY;
 800ee56:	2301      	movs	r3, #1
 800ee58:	e16d      	b.n	800f136 <LoRaMacMlmeRequest+0x31a>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800ee5a:	f001 f95b 	bl	8010114 <LoRaMacConfirmQueueGetCnt>
 800ee5e:	4603      	mov	r3, r0
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d104      	bne.n	800ee6e <LoRaMacMlmeRequest+0x52>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800ee64:	2214      	movs	r2, #20
 800ee66:	2100      	movs	r1, #0
 800ee68:	48b5      	ldr	r0, [pc, #724]	@ (800f140 <LoRaMacMlmeRequest+0x324>)
 800ee6a:	f007 fe2d 	bl	8016ac8 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ee6e:	4bb5      	ldr	r3, [pc, #724]	@ (800f144 <LoRaMacMlmeRequest+0x328>)
 800ee70:	2201      	movs	r2, #1
 800ee72:	f883 2455 	strb.w	r2, [r3, #1109]	@ 0x455

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800ee76:	4ab3      	ldr	r2, [pc, #716]	@ (800f144 <LoRaMacMlmeRequest+0x328>)
 800ee78:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800ee7c:	f043 0304 	orr.w	r3, r3, #4
 800ee80:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    queueElement.Request = mlmeRequest->Type;
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	781b      	ldrb	r3, [r3, #0]
 800ee88:	f887 3020 	strb.w	r3, [r7, #32]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ee8c:	2301      	movs	r3, #1
 800ee8e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    queueElement.RestrictCommonReadyToHandle = false;
 800ee92:	2300      	movs	r3, #0
 800ee94:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    queueElement.ReadyToHandle = false;
 800ee98:	2300      	movs	r3, #0
 800ee9a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	781b      	ldrb	r3, [r3, #0]
 800eea2:	3b01      	subs	r3, #1
 800eea4:	2b0c      	cmp	r3, #12
 800eea6:	f200 811a 	bhi.w	800f0de <LoRaMacMlmeRequest+0x2c2>
 800eeaa:	a201      	add	r2, pc, #4	@ (adr r2, 800eeb0 <LoRaMacMlmeRequest+0x94>)
 800eeac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeb0:	0800eee5 	.word	0x0800eee5
 800eeb4:	0800f0df 	.word	0x0800f0df
 800eeb8:	0800f0df 	.word	0x0800f0df
 800eebc:	0800f0df 	.word	0x0800f0df
 800eec0:	0800efc3 	.word	0x0800efc3
 800eec4:	0800efe7 	.word	0x0800efe7
 800eec8:	0800f0df 	.word	0x0800f0df
 800eecc:	0800f0df 	.word	0x0800f0df
 800eed0:	0800f005 	.word	0x0800f005
 800eed4:	0800f0df 	.word	0x0800f0df
 800eed8:	0800f0ad 	.word	0x0800f0ad
 800eedc:	0800f041 	.word	0x0800f041
 800eee0:	0800f08b 	.word	0x0800f08b
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800eee4:	4b97      	ldr	r3, [pc, #604]	@ (800f144 <LoRaMacMlmeRequest+0x328>)
 800eee6:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800eeea:	f003 0320 	and.w	r3, r3, #32
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d001      	beq.n	800eef6 <LoRaMacMlmeRequest+0xda>
            {
                return LORAMAC_STATUS_BUSY;
 800eef2:	2301      	movs	r3, #1
 800eef4:	e11f      	b.n	800f136 <LoRaMacMlmeRequest+0x31a>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
            }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	791b      	ldrb	r3, [r3, #4]
 800eefa:	2b02      	cmp	r3, #2
 800eefc:	d135      	bne.n	800ef6a <LoRaMacMlmeRequest+0x14e>
            {
                ResetMacParameters( false );
 800eefe:	2000      	movs	r0, #0
 800ef00:	f7fe f916 	bl	800d130 <ResetMacParameters>

                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800ef04:	4b90      	ldr	r3, [pc, #576]	@ (800f148 <LoRaMacMlmeRequest+0x32c>)
 800ef06:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	795b      	ldrb	r3, [r3, #5]
 800ef0e:	b25b      	sxtb	r3, r3
 800ef10:	2200      	movs	r2, #0
 800ef12:	4619      	mov	r1, r3
 800ef14:	f002 fc95 	bl	8011842 <RegionAlternateDr>
 800ef18:	4603      	mov	r3, r0
 800ef1a:	461a      	mov	r2, r3
 800ef1c:	4b8a      	ldr	r3, [pc, #552]	@ (800f148 <LoRaMacMlmeRequest+0x32c>)
 800ef1e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	f993 2006 	ldrsb.w	r2, [r3, #6]
 800ef28:	4b87      	ldr	r3, [pc, #540]	@ (800f148 <LoRaMacMlmeRequest+0x32c>)
 800ef2a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800ef2e:	2307      	movs	r3, #7
 800ef30:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

                status = SendReJoinReq( JOIN_REQ );
 800ef34:	20ff      	movs	r0, #255	@ 0xff
 800ef36:	f7fd fe7f 	bl	800cc38 <SendReJoinReq>
 800ef3a:	4603      	mov	r3, r0
 800ef3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                if( status != LORAMAC_STATUS_OK )
 800ef40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	f000 80cc 	beq.w	800f0e2 <LoRaMacMlmeRequest+0x2c6>
                {
                    // Revert back the previous datarate ( mainly used for US915 like regions )
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800ef4a:	4b7f      	ldr	r3, [pc, #508]	@ (800f148 <LoRaMacMlmeRequest+0x32c>)
 800ef4c:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	795b      	ldrb	r3, [r3, #5]
 800ef54:	b25b      	sxtb	r3, r3
 800ef56:	2201      	movs	r2, #1
 800ef58:	4619      	mov	r1, r3
 800ef5a:	f002 fc72 	bl	8011842 <RegionAlternateDr>
 800ef5e:	4603      	mov	r3, r0
 800ef60:	461a      	mov	r2, r3
 800ef62:	4b79      	ldr	r3, [pc, #484]	@ (800f148 <LoRaMacMlmeRequest+0x32c>)
 800ef64:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                OnMacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 800ef68:	e0bb      	b.n	800f0e2 <LoRaMacMlmeRequest+0x2c6>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	791b      	ldrb	r3, [r3, #4]
 800ef6e:	2b01      	cmp	r3, #1
 800ef70:	f040 80b7 	bne.w	800f0e2 <LoRaMacMlmeRequest+0x2c6>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800ef74:	4b74      	ldr	r3, [pc, #464]	@ (800f148 <LoRaMacMlmeRequest+0x32c>)
 800ef76:	2200      	movs	r2, #0
 800ef78:	f883 211d 	strb.w	r2, [r3, #285]	@ 0x11d
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800ef7c:	2302      	movs	r3, #2
 800ef7e:	763b      	strb	r3, [r7, #24]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800ef80:	4b71      	ldr	r3, [pc, #452]	@ (800f148 <LoRaMacMlmeRequest+0x32c>)
 800ef82:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800ef86:	f107 020c 	add.w	r2, r7, #12
 800ef8a:	4611      	mov	r1, r2
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	f002 faf9 	bl	8011584 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	791a      	ldrb	r2, [r3, #4]
 800ef96:	4b6c      	ldr	r3, [pc, #432]	@ (800f148 <LoRaMacMlmeRequest+0x32c>)
 800ef98:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
                queueElement.ReadyToHandle = true;
 800efa2:	2301      	movs	r3, #1
 800efa4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
                OnMacProcessNotify( );
 800efa8:	f7fe fe12 	bl	800dbd0 <OnMacProcessNotify>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800efac:	4a65      	ldr	r2, [pc, #404]	@ (800f144 <LoRaMacMlmeRequest+0x328>)
 800efae:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800efb2:	f043 0310 	orr.w	r3, r3, #16
 800efb6:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
                status = LORAMAC_STATUS_OK;
 800efba:	2300      	movs	r3, #0
 800efbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800efc0:	e08f      	b.n	800f0e2 <LoRaMacMlmeRequest+0x2c6>
        }
#endif /* LORAMAC_VERSION */
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 800efc2:	2300      	movs	r3, #0
 800efc4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800efc8:	f107 031c 	add.w	r3, r7, #28
 800efcc:	2200      	movs	r2, #0
 800efce:	4619      	mov	r1, r3
 800efd0:	2002      	movs	r0, #2
 800efd2:	f000 fcfb 	bl	800f9cc <LoRaMacCommandsAddCmd>
 800efd6:	4603      	mov	r3, r0
 800efd8:	2b00      	cmp	r3, #0
 800efda:	f000 8084 	beq.w	800f0e6 <LoRaMacMlmeRequest+0x2ca>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800efde:	2313      	movs	r3, #19
 800efe0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 800efe4:	e07f      	b.n	800f0e6 <LoRaMacMlmeRequest+0x2ca>
            break;
        }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	8898      	ldrh	r0, [r3, #4]
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	6899      	ldr	r1, [r3, #8]
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800eff4:	b2db      	uxtb	r3, r3
 800eff6:	461a      	mov	r2, r3
 800eff8:	f7fe fc1a 	bl	800d830 <SetTxContinuousWave>
 800effc:	4603      	mov	r3, r0
 800effe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800f002:	e077      	b.n	800f0f4 <LoRaMacMlmeRequest+0x2d8>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 800f004:	2300      	movs	r3, #0
 800f006:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            MacCommand_t* newCmd;
            /* ST_CODE Begin: Add MAC command condition to prevent some duplicated request */
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 800f00a:	f107 0308 	add.w	r3, r7, #8
 800f00e:	4619      	mov	r1, r3
 800f010:	200d      	movs	r0, #13
 800f012:	f000 fd5b 	bl	800facc <LoRaMacCommandsGetCmd>
 800f016:	4603      	mov	r3, r0
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d103      	bne.n	800f024 <LoRaMacMlmeRequest+0x208>
            {
                status = LORAMAC_STATUS_OK;
 800f01c:	2300      	movs	r3, #0
 800f01e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            /* ST_CODE End */
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
            }
            break;
 800f022:	e062      	b.n	800f0ea <LoRaMacMlmeRequest+0x2ce>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800f024:	f107 031c 	add.w	r3, r7, #28
 800f028:	2200      	movs	r2, #0
 800f02a:	4619      	mov	r1, r3
 800f02c:	200d      	movs	r0, #13
 800f02e:	f000 fccd 	bl	800f9cc <LoRaMacCommandsAddCmd>
 800f032:	4603      	mov	r3, r0
 800f034:	2b00      	cmp	r3, #0
 800f036:	d058      	beq.n	800f0ea <LoRaMacMlmeRequest+0x2ce>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f038:	2313      	movs	r3, #19
 800f03a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800f03e:	e054      	b.n	800f0ea <LoRaMacMlmeRequest+0x2ce>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800f040:	4b41      	ldr	r3, [pc, #260]	@ (800f148 <LoRaMacMlmeRequest+0x32c>)
 800f042:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
 800f046:	2b00      	cmp	r3, #0
 800f048:	d151      	bne.n	800f0ee <LoRaMacMlmeRequest+0x2d2>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	791b      	ldrb	r3, [r3, #4]
 800f04e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	791b      	ldrb	r3, [r3, #4]
 800f056:	f3c3 0302 	ubfx	r3, r3, #0, #3
 800f05a:	b2db      	uxtb	r3, r3
 800f05c:	4618      	mov	r0, r3
 800f05e:	f000 faff 	bl	800f660 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800f062:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f066:	773b      	strb	r3, [r7, #28]
                status = LORAMAC_STATUS_OK;
 800f068:	2300      	movs	r3, #0
 800f06a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800f06e:	f107 031c 	add.w	r3, r7, #28
 800f072:	2201      	movs	r2, #1
 800f074:	4619      	mov	r1, r3
 800f076:	2010      	movs	r0, #16
 800f078:	f000 fca8 	bl	800f9cc <LoRaMacCommandsAddCmd>
 800f07c:	4603      	mov	r3, r0
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d035      	beq.n	800f0ee <LoRaMacMlmeRequest+0x2d2>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f082:	2313      	movs	r3, #19
 800f084:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                }
            }
            break;
 800f088:	e031      	b.n	800f0ee <LoRaMacMlmeRequest+0x2d2>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 800f08a:	2300      	movs	r3, #0
 800f08c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800f090:	f107 031c 	add.w	r3, r7, #28
 800f094:	2200      	movs	r2, #0
 800f096:	4619      	mov	r1, r3
 800f098:	2012      	movs	r0, #18
 800f09a:	f000 fc97 	bl	800f9cc <LoRaMacCommandsAddCmd>
 800f09e:	4603      	mov	r3, r0
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d026      	beq.n	800f0f2 <LoRaMacMlmeRequest+0x2d6>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800f0a4:	2313      	movs	r3, #19
 800f0a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 800f0aa:	e022      	b.n	800f0f2 <LoRaMacMlmeRequest+0x2d6>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 800f0ac:	2301      	movs	r3, #1
 800f0ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800f0b2:	f000 fa8b 	bl	800f5cc <LoRaMacClassBIsAcquisitionInProgress>
 800f0b6:	4603      	mov	r3, r0
 800f0b8:	f083 0301 	eor.w	r3, r3, #1
 800f0bc:	b2db      	uxtb	r3, r3
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d009      	beq.n	800f0d6 <LoRaMacMlmeRequest+0x2ba>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800f0c2:	2000      	movs	r0, #0
 800f0c4:	f000 fa64 	bl	800f590 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800f0c8:	2000      	movs	r0, #0
 800f0ca:	f000 fa86 	bl	800f5da <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 800f0d4:	e00e      	b.n	800f0f4 <LoRaMacMlmeRequest+0x2d8>
                status = LORAMAC_STATUS_BUSY;
 800f0d6:	2301      	movs	r3, #1
 800f0d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800f0dc:	e00a      	b.n	800f0f4 <LoRaMacMlmeRequest+0x2d8>
        }
        default:
            break;
 800f0de:	bf00      	nop
 800f0e0:	e008      	b.n	800f0f4 <LoRaMacMlmeRequest+0x2d8>
            break;
 800f0e2:	bf00      	nop
 800f0e4:	e006      	b.n	800f0f4 <LoRaMacMlmeRequest+0x2d8>
            break;
 800f0e6:	bf00      	nop
 800f0e8:	e004      	b.n	800f0f4 <LoRaMacMlmeRequest+0x2d8>
            break;
 800f0ea:	bf00      	nop
 800f0ec:	e002      	b.n	800f0f4 <LoRaMacMlmeRequest+0x2d8>
            break;
 800f0ee:	bf00      	nop
 800f0f0:	e000      	b.n	800f0f4 <LoRaMacMlmeRequest+0x2d8>
            break;
 800f0f2:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800f0f4:	4b13      	ldr	r3, [pc, #76]	@ (800f144 <LoRaMacMlmeRequest+0x328>)
 800f0f6:	f8d3 2494 	ldr.w	r2, [r3, #1172]	@ 0x494
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 800f0fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f102:	2b00      	cmp	r3, #0
 800f104:	d010      	beq.n	800f128 <LoRaMacMlmeRequest+0x30c>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800f106:	f001 f805 	bl	8010114 <LoRaMacConfirmQueueGetCnt>
 800f10a:	4603      	mov	r3, r0
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d110      	bne.n	800f132 <LoRaMacMlmeRequest+0x316>
        {
            MacCtx.NodeAckRequested = false;
 800f110:	4b0c      	ldr	r3, [pc, #48]	@ (800f144 <LoRaMacMlmeRequest+0x328>)
 800f112:	2200      	movs	r2, #0
 800f114:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800f118:	4a0a      	ldr	r2, [pc, #40]	@ (800f144 <LoRaMacMlmeRequest+0x328>)
 800f11a:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800f11e:	f023 0304 	bic.w	r3, r3, #4
 800f122:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 800f126:	e004      	b.n	800f132 <LoRaMacMlmeRequest+0x316>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 800f128:	f107 0320 	add.w	r3, r7, #32
 800f12c:	4618      	mov	r0, r3
 800f12e:	f000 fe9d 	bl	800fe6c <LoRaMacConfirmQueueAdd>
    }
    return status;
 800f132:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800f136:	4618      	mov	r0, r3
 800f138:	3728      	adds	r7, #40	@ 0x28
 800f13a:	46bd      	mov	sp, r7
 800f13c:	bd80      	pop	{r7, pc}
 800f13e:	bf00      	nop
 800f140:	20000e7c 	.word	0x20000e7c
 800f144:	20000a28 	.word	0x20000a28
 800f148:	20008000 	.word	0x20008000

0800f14c <LoRaMacMcpsRequest>:
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 800f14c:	b5b0      	push	{r4, r5, r7, lr}
 800f14e:	b092      	sub	sp, #72	@ 0x48
 800f150:	af02      	add	r7, sp, #8
 800f152:	6078      	str	r0, [r7, #4]
 800f154:	460b      	mov	r3, r1
 800f156:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800f158:	2302      	movs	r3, #2
 800f15a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 800f15e:	2300      	movs	r3, #0
 800f160:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    void* fBuffer = NULL;
 800f164:	2300      	movs	r3, #0
 800f166:	63bb      	str	r3, [r7, #56]	@ 0x38
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 800f168:	2300      	movs	r3, #0
 800f16a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    bool readyToSend = false;
 800f16e:	2300      	movs	r3, #0
 800f170:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    if( mcpsRequest == NULL )
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d101      	bne.n	800f17e <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f17a:	2303      	movs	r3, #3
 800f17c:	e113      	b.n	800f3a6 <LoRaMacMcpsRequest+0x25a>
        }
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	2200      	movs	r2, #0
 800f182:	611a      	str	r2, [r3, #16]

    if( LoRaMacIsBusy( ) == true )
 800f184:	f7fc fa36 	bl	800b5f4 <LoRaMacIsBusy>
 800f188:	4603      	mov	r3, r0
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d001      	beq.n	800f192 <LoRaMacMcpsRequest+0x46>
    {
        return LORAMAC_STATUS_BUSY;
 800f18e:	2301      	movs	r3, #1
 800f190:	e109      	b.n	800f3a6 <LoRaMacMcpsRequest+0x25a>
    }

    McpsReq_t request = *mcpsRequest;
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	f107 040c 	add.w	r4, r7, #12
 800f198:	461d      	mov	r5, r3
 800f19a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f19c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f19e:	682b      	ldr	r3, [r5, #0]
 800f1a0:	6023      	str	r3, [r4, #0]

    macHdr.Value = 0;
 800f1a2:	2300      	movs	r3, #0
 800f1a4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800f1a8:	2214      	movs	r2, #20
 800f1aa:	2100      	movs	r1, #0
 800f1ac:	4880      	ldr	r0, [pc, #512]	@ (800f3b0 <LoRaMacMcpsRequest+0x264>)
 800f1ae:	f007 fc8b 	bl	8016ac8 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800f1b2:	4b80      	ldr	r3, [pc, #512]	@ (800f3b4 <LoRaMacMcpsRequest+0x268>)
 800f1b4:	2201      	movs	r2, #1
 800f1b6:	f883 2441 	strb.w	r2, [r3, #1089]	@ 0x441

    // Apply confirmed downlinks, if the device has not received a valid
    // downlink after a join accept.
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800f1ba:	4b7f      	ldr	r3, [pc, #508]	@ (800f3b8 <LoRaMacMcpsRequest+0x26c>)
 800f1bc:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 800f1c0:	2b02      	cmp	r3, #2
 800f1c2:	d111      	bne.n	800f1e8 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800f1c4:	4b7c      	ldr	r3, [pc, #496]	@ (800f3b8 <LoRaMacMcpsRequest+0x26c>)
 800f1c6:	f893 3118 	ldrb.w	r3, [r3, #280]	@ 0x118
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800f1ca:	2b02      	cmp	r3, #2
 800f1cc:	d10c      	bne.n	800f1e8 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 800f1ce:	4b7a      	ldr	r3, [pc, #488]	@ (800f3b8 <LoRaMacMcpsRequest+0x26c>)
 800f1d0:	f893 311e 	ldrb.w	r3, [r3, #286]	@ 0x11e
 800f1d4:	f083 0301 	eor.w	r3, r3, #1
 800f1d8:	b2db      	uxtb	r3, r3
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d004      	beq.n	800f1e8 <LoRaMacMcpsRequest+0x9c>
        ( request.Type == MCPS_UNCONFIRMED ) )
 800f1de:	7b3b      	ldrb	r3, [r7, #12]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d101      	bne.n	800f1e8 <LoRaMacMcpsRequest+0x9c>
    {
        request.Type = MCPS_CONFIRMED;
 800f1e4:	2301      	movs	r3, #1
 800f1e6:	733b      	strb	r3, [r7, #12]
    }

    switch( request.Type )
 800f1e8:	7b3b      	ldrb	r3, [r7, #12]
 800f1ea:	2b03      	cmp	r3, #3
 800f1ec:	d030      	beq.n	800f250 <LoRaMacMcpsRequest+0x104>
 800f1ee:	2b03      	cmp	r3, #3
 800f1f0:	dc3f      	bgt.n	800f272 <LoRaMacMcpsRequest+0x126>
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d002      	beq.n	800f1fc <LoRaMacMcpsRequest+0xb0>
 800f1f6:	2b01      	cmp	r3, #1
 800f1f8:	d015      	beq.n	800f226 <LoRaMacMcpsRequest+0xda>
            fBufferSize = request.Req.Proprietary.fBufferSize;
            datarate = request.Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 800f1fa:	e03a      	b.n	800f272 <LoRaMacMcpsRequest+0x126>
            readyToSend = true;
 800f1fc:	2301      	movs	r3, #1
 800f1fe:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800f202:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f206:	2202      	movs	r2, #2
 800f208:	f362 1347 	bfi	r3, r2, #5, #3
 800f20c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fPort = request.Req.Unconfirmed.fPort;
 800f210:	7c3b      	ldrb	r3, [r7, #16]
 800f212:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            fBuffer = request.Req.Unconfirmed.fBuffer;
 800f216:	697b      	ldr	r3, [r7, #20]
 800f218:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 800f21a:	8b3b      	ldrh	r3, [r7, #24]
 800f21c:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Unconfirmed.Datarate;
 800f21e:	7ebb      	ldrb	r3, [r7, #26]
 800f220:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 800f224:	e026      	b.n	800f274 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 800f226:	2301      	movs	r3, #1
 800f228:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800f22c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f230:	2204      	movs	r2, #4
 800f232:	f362 1347 	bfi	r3, r2, #5, #3
 800f236:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fPort = request.Req.Confirmed.fPort;
 800f23a:	7c3b      	ldrb	r3, [r7, #16]
 800f23c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            fBuffer = request.Req.Confirmed.fBuffer;
 800f240:	697b      	ldr	r3, [r7, #20]
 800f242:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Confirmed.fBufferSize;
 800f244:	8b3b      	ldrh	r3, [r7, #24]
 800f246:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Confirmed.Datarate;
 800f248:	7ebb      	ldrb	r3, [r7, #26]
 800f24a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 800f24e:	e011      	b.n	800f274 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 800f250:	2301      	movs	r3, #1
 800f252:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800f256:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f25a:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 800f25e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fBuffer = request.Req.Proprietary.fBuffer;
 800f262:	693b      	ldr	r3, [r7, #16]
 800f264:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Proprietary.fBufferSize;
 800f266:	8abb      	ldrh	r3, [r7, #20]
 800f268:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Proprietary.Datarate;
 800f26a:	7dbb      	ldrb	r3, [r7, #22]
 800f26c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 800f270:	e000      	b.n	800f274 <LoRaMacMcpsRequest+0x128>
            break;
 800f272:	bf00      	nop
    }

    // Make sure that the input datarate is compliant
    // to the regional specification.
    getPhy.Attribute = PHY_MIN_TX_DR;
 800f274:	2302      	movs	r3, #2
 800f276:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f27a:	4b4f      	ldr	r3, [pc, #316]	@ (800f3b8 <LoRaMacMcpsRequest+0x26c>)
 800f27c:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800f280:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f284:	4b4c      	ldr	r3, [pc, #304]	@ (800f3b8 <LoRaMacMcpsRequest+0x26c>)
 800f286:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f28a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800f28e:	4611      	mov	r1, r2
 800f290:	4618      	mov	r0, r3
 800f292:	f002 f940 	bl	8011516 <RegionGetPhyParam>
 800f296:	4603      	mov	r3, r0
 800f298:	62bb      	str	r3, [r7, #40]	@ 0x28
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800f29a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f29c:	b25b      	sxtb	r3, r3
 800f29e:	f997 2035 	ldrsb.w	r2, [r7, #53]	@ 0x35
 800f2a2:	4293      	cmp	r3, r2
 800f2a4:	bfb8      	it	lt
 800f2a6:	4613      	movlt	r3, r2
 800f2a8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    // Apply minimum datarate in this special case.
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 800f2ac:	4b42      	ldr	r3, [pc, #264]	@ (800f3b8 <LoRaMacMcpsRequest+0x26c>)
 800f2ae:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800f2b2:	4a41      	ldr	r2, [pc, #260]	@ (800f3b8 <LoRaMacMcpsRequest+0x26c>)
 800f2b4:	f892 1130 	ldrb.w	r1, [r2, #304]	@ 0x130
 800f2b8:	4a3f      	ldr	r2, [pc, #252]	@ (800f3b8 <LoRaMacMcpsRequest+0x26c>)
 800f2ba:	f892 211d 	ldrb.w	r2, [r2, #285]	@ 0x11d
 800f2be:	4618      	mov	r0, r3
 800f2c0:	f7fc fb34 	bl	800b92c <CheckForMinimumAbpDatarate>
 800f2c4:	4603      	mov	r3, r0
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d002      	beq.n	800f2d0 <LoRaMacMcpsRequest+0x184>
                                    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true )
    {
        datarate = ( int8_t )phyParam.Value;
 800f2ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f2cc:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if( readyToSend == true )
 800f2d0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d05f      	beq.n	800f398 <LoRaMacMcpsRequest+0x24c>
    {
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 800f2d8:	4b37      	ldr	r3, [pc, #220]	@ (800f3b8 <LoRaMacMcpsRequest+0x26c>)
 800f2da:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800f2de:	f083 0301 	eor.w	r3, r3, #1
 800f2e2:	b2db      	uxtb	r3, r3
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d10e      	bne.n	800f306 <LoRaMacMcpsRequest+0x1ba>
            ( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 800f2e8:	4b33      	ldr	r3, [pc, #204]	@ (800f3b8 <LoRaMacMcpsRequest+0x26c>)
 800f2ea:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800f2ee:	4a32      	ldr	r2, [pc, #200]	@ (800f3b8 <LoRaMacMcpsRequest+0x26c>)
 800f2f0:	f892 1130 	ldrb.w	r1, [r2, #304]	@ 0x130
 800f2f4:	4a30      	ldr	r2, [pc, #192]	@ (800f3b8 <LoRaMacMcpsRequest+0x26c>)
 800f2f6:	f892 211d 	ldrb.w	r2, [r2, #285]	@ 0x11d
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	f7fc fb16 	bl	800b92c <CheckForMinimumAbpDatarate>
 800f300:	4603      	mov	r3, r0
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 800f302:	2b00      	cmp	r3, #0
 800f304:	d01c      	beq.n	800f340 <LoRaMacMcpsRequest+0x1f4>
                                          Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true ) )
        {
            verify.DatarateParams.Datarate = datarate;
 800f306:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800f30a:	f887 3020 	strb.w	r3, [r7, #32]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f30e:	4b2a      	ldr	r3, [pc, #168]	@ (800f3b8 <LoRaMacMcpsRequest+0x26c>)
 800f310:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 800f314:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800f318:	4b27      	ldr	r3, [pc, #156]	@ (800f3b8 <LoRaMacMcpsRequest+0x26c>)
 800f31a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f31e:	f107 0120 	add.w	r1, r7, #32
 800f322:	2205      	movs	r2, #5
 800f324:	4618      	mov	r0, r3
 800f326:	f002 f944 	bl	80115b2 <RegionVerify>
 800f32a:	4603      	mov	r3, r0
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d005      	beq.n	800f33c <LoRaMacMcpsRequest+0x1f0>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800f330:	f997 2020 	ldrsb.w	r2, [r7, #32]
 800f334:	4b20      	ldr	r3, [pc, #128]	@ (800f3b8 <LoRaMacMcpsRequest+0x26c>)
 800f336:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800f33a:	e001      	b.n	800f340 <LoRaMacMcpsRequest+0x1f4>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800f33c:	2303      	movs	r3, #3
 800f33e:	e032      	b.n	800f3a6 <LoRaMacMcpsRequest+0x25a>
            }
        }

        // Verification of response timeout for class b and class c
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800f340:	4b1d      	ldr	r3, [pc, #116]	@ (800f3b8 <LoRaMacMcpsRequest+0x26c>)
 800f342:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f346:	4a1b      	ldr	r2, [pc, #108]	@ (800f3b4 <LoRaMacMcpsRequest+0x268>)
 800f348:	f8d2 2498 	ldr.w	r2, [r2, #1176]	@ 0x498
 800f34c:	4611      	mov	r1, r2
 800f34e:	4618      	mov	r0, r3
 800f350:	f7fc fbd8 	bl	800bb04 <LoRaMacHandleResponseTimeout>
                                      MacCtx.ResponseTimeoutStartTime );

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 800f354:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800f356:	f897 103e 	ldrb.w	r1, [r7, #62]	@ 0x3e
 800f35a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800f35e:	78fb      	ldrb	r3, [r7, #3]
 800f360:	9300      	str	r3, [sp, #0]
 800f362:	4613      	mov	r3, r2
 800f364:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f366:	f7fd fb85 	bl	800ca74 <Send>
 800f36a:	4603      	mov	r3, r0
 800f36c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

        if( status == LORAMAC_STATUS_OK )
 800f370:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800f374:	2b00      	cmp	r3, #0
 800f376:	d10b      	bne.n	800f390 <LoRaMacMcpsRequest+0x244>
        {
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 800f378:	7b3a      	ldrb	r2, [r7, #12]
 800f37a:	4b0e      	ldr	r3, [pc, #56]	@ (800f3b4 <LoRaMacMcpsRequest+0x268>)
 800f37c:	f883 2440 	strb.w	r2, [r3, #1088]	@ 0x440
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800f380:	4a0c      	ldr	r2, [pc, #48]	@ (800f3b4 <LoRaMacMcpsRequest+0x268>)
 800f382:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800f386:	f043 0301 	orr.w	r3, r3, #1
 800f38a:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
 800f38e:	e003      	b.n	800f398 <LoRaMacMcpsRequest+0x24c>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 800f390:	4b08      	ldr	r3, [pc, #32]	@ (800f3b4 <LoRaMacMcpsRequest+0x268>)
 800f392:	2200      	movs	r2, #0
 800f394:	f883 241a 	strb.w	r2, [r3, #1050]	@ 0x41a
        }
    }
#endif /* LORAMAC_VERSION */

     // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800f398:	4b06      	ldr	r3, [pc, #24]	@ (800f3b4 <LoRaMacMcpsRequest+0x268>)
 800f39a:	f8d3 2494 	ldr.w	r2, [r3, #1172]	@ 0x494
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	611a      	str	r2, [r3, #16]

    return status;
 800f3a2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	3740      	adds	r7, #64	@ 0x40
 800f3aa:	46bd      	mov	sp, r7
 800f3ac:	bdb0      	pop	{r4, r5, r7, pc}
 800f3ae:	bf00      	nop
 800f3b0:	20000e68 	.word	0x20000e68
 800f3b4:	20000a28 	.word	0x20000a28
 800f3b8:	20008000 	.word	0x20008000

0800f3bc <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800f3bc:	b580      	push	{r7, lr}
 800f3be:	b084      	sub	sp, #16
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	4603      	mov	r3, r0
 800f3c4:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 800f3c6:	79fb      	ldrb	r3, [r7, #7]
 800f3c8:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800f3ca:	4b0d      	ldr	r3, [pc, #52]	@ (800f400 <LoRaMacTestSetDutyCycleOn+0x44>)
 800f3cc:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800f3d0:	f107 010c 	add.w	r1, r7, #12
 800f3d4:	220f      	movs	r2, #15
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f002 f8eb 	bl	80115b2 <RegionVerify>
 800f3dc:	4603      	mov	r3, r0
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d00a      	beq.n	800f3f8 <LoRaMacTestSetDutyCycleOn+0x3c>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 800f3e2:	4a07      	ldr	r2, [pc, #28]	@ (800f400 <LoRaMacTestSetDutyCycleOn+0x44>)
 800f3e4:	79fb      	ldrb	r3, [r7, #7]
 800f3e6:	f882 311c 	strb.w	r3, [r2, #284]	@ 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800f3ea:	4a06      	ldr	r2, [pc, #24]	@ (800f404 <LoRaMacTestSetDutyCycleOn+0x48>)
 800f3ec:	f892 3491 	ldrb.w	r3, [r2, #1169]	@ 0x491
 800f3f0:	f043 0320 	orr.w	r3, r3, #32
 800f3f4:	f882 3491 	strb.w	r3, [r2, #1169]	@ 0x491
    }
}
 800f3f8:	bf00      	nop
 800f3fa:	3710      	adds	r7, #16
 800f3fc:	46bd      	mov	sp, r7
 800f3fe:	bd80      	pop	{r7, pc}
 800f400:	20008000 	.word	0x20008000
 800f404:	20000a28 	.word	0x20000a28

0800f408 <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 800f408:	b580      	push	{r7, lr}
 800f40a:	b08c      	sub	sp, #48	@ 0x30
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	60f8      	str	r0, [r7, #12]
 800f410:	60b9      	str	r1, [r7, #8]
 800f412:	607a      	str	r2, [r7, #4]
 800f414:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 800f416:	2300      	movs	r3, #0
 800f418:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = adrNext->Datarate;
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	7b1b      	ldrb	r3, [r3, #12]
 800f420:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = adrNext->TxPower;
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	7b5b      	ldrb	r3, [r3, #13]
 800f428:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint8_t nbTrans = adrNext->NbTrans;
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	7b9b      	ldrb	r3, [r3, #14]
 800f430:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	685a      	ldr	r2, [r3, #4]
 800f438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f43a:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	785b      	ldrb	r3, [r3, #1]
 800f440:	2b00      	cmp	r3, #0
 800f442:	f000 8088 	beq.w	800f556 <LoRaMacAdrCalcNext+0x14e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 800f446:	2302      	movs	r3, #2
 800f448:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	7bdb      	ldrb	r3, [r3, #15]
 800f450:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	7c1b      	ldrb	r3, [r3, #16]
 800f458:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800f45c:	4611      	mov	r1, r2
 800f45e:	4618      	mov	r0, r3
 800f460:	f002 f859 	bl	8011516 <RegionGetPhyParam>
 800f464:	4603      	mov	r3, r0
 800f466:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 800f468:	6a3b      	ldr	r3, [r7, #32]
 800f46a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        datarate = MAX( datarate, minTxDatarate );
 800f46e:	f997 202b 	ldrsb.w	r2, [r7, #43]	@ 0x2b
 800f472:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 800f476:	4293      	cmp	r3, r2
 800f478:	bfb8      	it	lt
 800f47a:	4613      	movlt	r3, r2
 800f47c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	685b      	ldr	r3, [r3, #4]
 800f484:	68fa      	ldr	r2, [r7, #12]
 800f486:	8912      	ldrh	r2, [r2, #8]
 800f488:	4293      	cmp	r3, r2
 800f48a:	d302      	bcc.n	800f492 <LoRaMacAdrCalcNext+0x8a>
        {
            adrAckReq = true;
 800f48c:	2301      	movs	r3, #1
 800f48e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	685b      	ldr	r3, [r3, #4]
 800f496:	68fa      	ldr	r2, [r7, #12]
 800f498:	8912      	ldrh	r2, [r2, #8]
 800f49a:	4611      	mov	r1, r2
 800f49c:	68fa      	ldr	r2, [r7, #12]
 800f49e:	8952      	ldrh	r2, [r2, #10]
 800f4a0:	440a      	add	r2, r1
 800f4a2:	4293      	cmp	r3, r2
 800f4a4:	d30f      	bcc.n	800f4c6 <LoRaMacAdrCalcNext+0xbe>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
 800f4a6:	230a      	movs	r3, #10
 800f4a8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	7c1b      	ldrb	r3, [r3, #16]
 800f4b0:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800f4b4:	4611      	mov	r1, r2
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	f002 f82d 	bl	8011516 <RegionGetPhyParam>
 800f4bc:	4603      	mov	r3, r0
 800f4be:	623b      	str	r3, [r7, #32]
            txPower = phyParam.Value;
 800f4c0:	6a3b      	ldr	r3, [r7, #32]
 800f4c2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	685b      	ldr	r3, [r3, #4]
 800f4ca:	68fa      	ldr	r2, [r7, #12]
 800f4cc:	8912      	ldrh	r2, [r2, #8]
 800f4ce:	4611      	mov	r1, r2
 800f4d0:	68fa      	ldr	r2, [r7, #12]
 800f4d2:	8952      	ldrh	r2, [r2, #10]
 800f4d4:	0052      	lsls	r2, r2, #1
 800f4d6:	440a      	add	r2, r1
 800f4d8:	4293      	cmp	r3, r2
 800f4da:	d33c      	bcc.n	800f556 <LoRaMacAdrCalcNext+0x14e>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	685b      	ldr	r3, [r3, #4]
 800f4e0:	68fa      	ldr	r2, [r7, #12]
 800f4e2:	8912      	ldrh	r2, [r2, #8]
 800f4e4:	1a9b      	subs	r3, r3, r2
 800f4e6:	68fa      	ldr	r2, [r7, #12]
 800f4e8:	8952      	ldrh	r2, [r2, #10]
 800f4ea:	fbb3 f1f2 	udiv	r1, r3, r2
 800f4ee:	fb01 f202 	mul.w	r2, r1, r2
 800f4f2:	1a9b      	subs	r3, r3, r2
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d12e      	bne.n	800f556 <LoRaMacAdrCalcNext+0x14e>
            {
                if( datarate == minTxDatarate )
 800f4f8:	f997 202e 	ldrsb.w	r2, [r7, #46]	@ 0x2e
 800f4fc:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800f500:	429a      	cmp	r2, r3
 800f502:	d110      	bne.n	800f526 <LoRaMacAdrCalcNext+0x11e>
                {
                    // Restore the channel mask
                    if( adrNext->UpdateChanMask == true )
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	781b      	ldrb	r3, [r3, #0]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d009      	beq.n	800f520 <LoRaMacAdrCalcNext+0x118>
                    {
                        InitDefaultsParams_t params;
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800f50c:	2302      	movs	r3, #2
 800f50e:	773b      	strb	r3, [r7, #28]
                        RegionInitDefaults( adrNext->Region, &params );
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	7c1b      	ldrb	r3, [r3, #16]
 800f514:	f107 0210 	add.w	r2, r7, #16
 800f518:	4611      	mov	r1, r2
 800f51a:	4618      	mov	r0, r3
 800f51c:	f002 f832 	bl	8011584 <RegionInitDefaults>
                    }

                    // Restore NbTrans
                    nbTrans = 1;
 800f520:	2301      	movs	r3, #1
 800f522:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800f526:	2321      	movs	r3, #33	@ 0x21
 800f528:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
                getPhy.Datarate = datarate;
 800f52c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800f530:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	7bdb      	ldrb	r3, [r3, #15]
 800f538:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	7c1b      	ldrb	r3, [r3, #16]
 800f540:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800f544:	4611      	mov	r1, r2
 800f546:	4618      	mov	r0, r3
 800f548:	f001 ffe5 	bl	8011516 <RegionGetPhyParam>
 800f54c:	4603      	mov	r3, r0
 800f54e:	623b      	str	r3, [r7, #32]
                datarate = phyParam.Value;
 800f550:	6a3b      	ldr	r3, [r7, #32]
 800f552:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            }
        }
    }

    *drOut = datarate;
 800f556:	68bb      	ldr	r3, [r7, #8]
 800f558:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 800f55c:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 800f564:	701a      	strb	r2, [r3, #0]
    *nbTransOut = nbTrans;
 800f566:	683b      	ldr	r3, [r7, #0]
 800f568:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800f56c:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 800f56e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800f572:	4618      	mov	r0, r3
 800f574:	3730      	adds	r7, #48	@ 0x30
 800f576:	46bd      	mov	sp, r7
 800f578:	bd80      	pop	{r7, pc}

0800f57a <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 800f57a:	b480      	push	{r7}
 800f57c:	b085      	sub	sp, #20
 800f57e:	af00      	add	r7, sp, #0
 800f580:	60f8      	str	r0, [r7, #12]
 800f582:	60b9      	str	r1, [r7, #8]
 800f584:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f586:	bf00      	nop
 800f588:	3714      	adds	r7, #20
 800f58a:	46bd      	mov	sp, r7
 800f58c:	bc80      	pop	{r7}
 800f58e:	4770      	bx	lr

0800f590 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 800f590:	b480      	push	{r7}
 800f592:	b083      	sub	sp, #12
 800f594:	af00      	add	r7, sp, #0
 800f596:	4603      	mov	r3, r0
 800f598:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f59a:	bf00      	nop
 800f59c:	370c      	adds	r7, #12
 800f59e:	46bd      	mov	sp, r7
 800f5a0:	bc80      	pop	{r7}
 800f5a2:	4770      	bx	lr

0800f5a4 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 800f5a4:	b480      	push	{r7}
 800f5a6:	b083      	sub	sp, #12
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	4603      	mov	r3, r0
 800f5ac:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f5ae:	bf00      	nop
 800f5b0:	370c      	adds	r7, #12
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	bc80      	pop	{r7}
 800f5b6:	4770      	bx	lr

0800f5b8 <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 800f5b8:	b480      	push	{r7}
 800f5ba:	b083      	sub	sp, #12
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	4603      	mov	r3, r0
 800f5c0:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f5c2:	bf00      	nop
 800f5c4:	370c      	adds	r7, #12
 800f5c6:	46bd      	mov	sp, r7
 800f5c8:	bc80      	pop	{r7}
 800f5ca:	4770      	bx	lr

0800f5cc <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 800f5cc:	b480      	push	{r7}
 800f5ce:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 800f5d0:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	46bd      	mov	sp, r7
 800f5d6:	bc80      	pop	{r7}
 800f5d8:	4770      	bx	lr

0800f5da <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 800f5da:	b480      	push	{r7}
 800f5dc:	b083      	sub	sp, #12
 800f5de:	af00      	add	r7, sp, #0
 800f5e0:	6078      	str	r0, [r7, #4]
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f5e2:	bf00      	nop
 800f5e4:	370c      	adds	r7, #12
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	bc80      	pop	{r7}
 800f5ea:	4770      	bx	lr

0800f5ec <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 800f5ec:	b480      	push	{r7}
 800f5ee:	b083      	sub	sp, #12
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f5f4:	bf00      	nop
 800f5f6:	370c      	adds	r7, #12
 800f5f8:	46bd      	mov	sp, r7
 800f5fa:	bc80      	pop	{r7}
 800f5fc:	4770      	bx	lr

0800f5fe <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 800f5fe:	b480      	push	{r7}
 800f600:	b083      	sub	sp, #12
 800f602:	af00      	add	r7, sp, #0
 800f604:	6078      	str	r0, [r7, #4]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f606:	bf00      	nop
 800f608:	370c      	adds	r7, #12
 800f60a:	46bd      	mov	sp, r7
 800f60c:	bc80      	pop	{r7}
 800f60e:	4770      	bx	lr

0800f610 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 800f610:	b480      	push	{r7}
 800f612:	b083      	sub	sp, #12
 800f614:	af00      	add	r7, sp, #0
 800f616:	6078      	str	r0, [r7, #4]
 800f618:	460b      	mov	r3, r1
 800f61a:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 800f61c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f61e:	4618      	mov	r0, r3
 800f620:	370c      	adds	r7, #12
 800f622:	46bd      	mov	sp, r7
 800f624:	bc80      	pop	{r7}
 800f626:	4770      	bx	lr

0800f628 <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 800f628:	b480      	push	{r7}
 800f62a:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 800f62c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f62e:	4618      	mov	r0, r3
 800f630:	46bd      	mov	sp, r7
 800f632:	bc80      	pop	{r7}
 800f634:	4770      	bx	lr

0800f636 <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 800f636:	b480      	push	{r7}
 800f638:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 800f63a:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f63c:	4618      	mov	r0, r3
 800f63e:	46bd      	mov	sp, r7
 800f640:	bc80      	pop	{r7}
 800f642:	4770      	bx	lr

0800f644 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 800f644:	b480      	push	{r7}
 800f646:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 800f648:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f64a:	4618      	mov	r0, r3
 800f64c:	46bd      	mov	sp, r7
 800f64e:	bc80      	pop	{r7}
 800f650:	4770      	bx	lr

0800f652 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 800f652:	b480      	push	{r7}
 800f654:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 800f656:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f658:	4618      	mov	r0, r3
 800f65a:	46bd      	mov	sp, r7
 800f65c:	bc80      	pop	{r7}
 800f65e:	4770      	bx	lr

0800f660 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 800f660:	b480      	push	{r7}
 800f662:	b083      	sub	sp, #12
 800f664:	af00      	add	r7, sp, #0
 800f666:	4603      	mov	r3, r0
 800f668:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f66a:	bf00      	nop
 800f66c:	370c      	adds	r7, #12
 800f66e:	46bd      	mov	sp, r7
 800f670:	bc80      	pop	{r7}
 800f672:	4770      	bx	lr

0800f674 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 800f674:	b480      	push	{r7}
 800f676:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f678:	bf00      	nop
 800f67a:	46bd      	mov	sp, r7
 800f67c:	bc80      	pop	{r7}
 800f67e:	4770      	bx	lr

0800f680 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 800f680:	b480      	push	{r7}
 800f682:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f684:	bf00      	nop
 800f686:	46bd      	mov	sp, r7
 800f688:	bc80      	pop	{r7}
 800f68a:	4770      	bx	lr

0800f68c <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 800f68c:	b480      	push	{r7}
 800f68e:	b083      	sub	sp, #12
 800f690:	af00      	add	r7, sp, #0
 800f692:	4603      	mov	r3, r0
 800f694:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800f696:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f698:	4618      	mov	r0, r3
 800f69a:	370c      	adds	r7, #12
 800f69c:	46bd      	mov	sp, r7
 800f69e:	bc80      	pop	{r7}
 800f6a0:	4770      	bx	lr

0800f6a2 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 800f6a2:	b480      	push	{r7}
 800f6a4:	b083      	sub	sp, #12
 800f6a6:	af00      	add	r7, sp, #0
 800f6a8:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800f6aa:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	370c      	adds	r7, #12
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	bc80      	pop	{r7}
 800f6b4:	4770      	bx	lr

0800f6b6 <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 800f6b6:	b480      	push	{r7}
 800f6b8:	b083      	sub	sp, #12
 800f6ba:	af00      	add	r7, sp, #0
 800f6bc:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800f6be:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	370c      	adds	r7, #12
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	bc80      	pop	{r7}
 800f6c8:	4770      	bx	lr

0800f6ca <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 800f6ca:	b480      	push	{r7}
 800f6cc:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f6ce:	bf00      	nop
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	bc80      	pop	{r7}
 800f6d4:	4770      	bx	lr

0800f6d6 <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 800f6d6:	b480      	push	{r7}
 800f6d8:	b083      	sub	sp, #12
 800f6da:	af00      	add	r7, sp, #0
 800f6dc:	4603      	mov	r3, r0
 800f6de:	6039      	str	r1, [r7, #0]
 800f6e0:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 800f6e2:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	370c      	adds	r7, #12
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	bc80      	pop	{r7}
 800f6ec:	4770      	bx	lr

0800f6ee <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 800f6ee:	b480      	push	{r7}
 800f6f0:	b083      	sub	sp, #12
 800f6f2:	af00      	add	r7, sp, #0
 800f6f4:	4603      	mov	r3, r0
 800f6f6:	603a      	str	r2, [r7, #0]
 800f6f8:	80fb      	strh	r3, [r7, #6]
 800f6fa:	460b      	mov	r3, r1
 800f6fc:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f6fe:	bf00      	nop
 800f700:	370c      	adds	r7, #12
 800f702:	46bd      	mov	sp, r7
 800f704:	bc80      	pop	{r7}
 800f706:	4770      	bx	lr

0800f708 <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 800f708:	b480      	push	{r7}
 800f70a:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f70c:	bf00      	nop
 800f70e:	46bd      	mov	sp, r7
 800f710:	bc80      	pop	{r7}
 800f712:	4770      	bx	lr

0800f714 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 800f714:	b480      	push	{r7}
 800f716:	b083      	sub	sp, #12
 800f718:	af00      	add	r7, sp, #0
 800f71a:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 800f71c:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f71e:	4618      	mov	r0, r3
 800f720:	370c      	adds	r7, #12
 800f722:	46bd      	mov	sp, r7
 800f724:	bc80      	pop	{r7}
 800f726:	4770      	bx	lr

0800f728 <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 800f728:	b480      	push	{r7}
 800f72a:	b083      	sub	sp, #12
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 800f730:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f732:	4618      	mov	r0, r3
 800f734:	370c      	adds	r7, #12
 800f736:	46bd      	mov	sp, r7
 800f738:	bc80      	pop	{r7}
 800f73a:	4770      	bx	lr

0800f73c <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 800f73c:	b480      	push	{r7}
 800f73e:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f740:	bf00      	nop
 800f742:	46bd      	mov	sp, r7
 800f744:	bc80      	pop	{r7}
 800f746:	4770      	bx	lr

0800f748 <LoRaMacClassBSetFPendingBit>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
void LoRaMacClassBSetFPendingBit( uint32_t address, uint8_t fPendingSet )
{
 800f748:	b480      	push	{r7}
 800f74a:	b083      	sub	sp, #12
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
 800f750:	460b      	mov	r3, r1
 800f752:	70fb      	strb	r3, [r7, #3]
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f754:	bf00      	nop
 800f756:	370c      	adds	r7, #12
 800f758:	46bd      	mov	sp, r7
 800f75a:	bc80      	pop	{r7}
 800f75c:	4770      	bx	lr

0800f75e <LoRaMacClassBProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 800f75e:	b480      	push	{r7}
 800f760:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800f762:	bf00      	nop
 800f764:	46bd      	mov	sp, r7
 800f766:	bc80      	pop	{r7}
 800f768:	4770      	bx	lr

0800f76a <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 800f76a:	b480      	push	{r7}
 800f76c:	b085      	sub	sp, #20
 800f76e:	af00      	add	r7, sp, #0
 800f770:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800f776:	2300      	movs	r3, #0
 800f778:	81fb      	strh	r3, [r7, #14]
 800f77a:	e00a      	b.n	800f792 <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 800f77c:	89fb      	ldrh	r3, [r7, #14]
 800f77e:	68ba      	ldr	r2, [r7, #8]
 800f780:	4413      	add	r3, r2
 800f782:	781b      	ldrb	r3, [r3, #0]
 800f784:	2b00      	cmp	r3, #0
 800f786:	d001      	beq.n	800f78c <IsSlotFree+0x22>
        {
            return false;
 800f788:	2300      	movs	r3, #0
 800f78a:	e006      	b.n	800f79a <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800f78c:	89fb      	ldrh	r3, [r7, #14]
 800f78e:	3301      	adds	r3, #1
 800f790:	81fb      	strh	r3, [r7, #14]
 800f792:	89fb      	ldrh	r3, [r7, #14]
 800f794:	2b0f      	cmp	r3, #15
 800f796:	d9f1      	bls.n	800f77c <IsSlotFree+0x12>
        }
    }
    return true;
 800f798:	2301      	movs	r3, #1
}
 800f79a:	4618      	mov	r0, r3
 800f79c:	3714      	adds	r7, #20
 800f79e:	46bd      	mov	sp, r7
 800f7a0:	bc80      	pop	{r7}
 800f7a2:	4770      	bx	lr

0800f7a4 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b082      	sub	sp, #8
 800f7a8:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800f7ae:	e007      	b.n	800f7c0 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 800f7b0:	79fb      	ldrb	r3, [r7, #7]
 800f7b2:	3301      	adds	r3, #1
 800f7b4:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 800f7b6:	79fb      	ldrb	r3, [r7, #7]
 800f7b8:	2b20      	cmp	r3, #32
 800f7ba:	d101      	bne.n	800f7c0 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 800f7bc:	2300      	movs	r3, #0
 800f7be:	e012      	b.n	800f7e6 <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800f7c0:	79fb      	ldrb	r3, [r7, #7]
 800f7c2:	011b      	lsls	r3, r3, #4
 800f7c4:	3308      	adds	r3, #8
 800f7c6:	4a0a      	ldr	r2, [pc, #40]	@ (800f7f0 <MallocNewMacCommandSlot+0x4c>)
 800f7c8:	4413      	add	r3, r2
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	f7ff ffcd 	bl	800f76a <IsSlotFree>
 800f7d0:	4603      	mov	r3, r0
 800f7d2:	f083 0301 	eor.w	r3, r3, #1
 800f7d6:	b2db      	uxtb	r3, r3
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d1e9      	bne.n	800f7b0 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 800f7dc:	79fb      	ldrb	r3, [r7, #7]
 800f7de:	011b      	lsls	r3, r3, #4
 800f7e0:	3308      	adds	r3, #8
 800f7e2:	4a03      	ldr	r2, [pc, #12]	@ (800f7f0 <MallocNewMacCommandSlot+0x4c>)
 800f7e4:	4413      	add	r3, r2
}
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	3708      	adds	r7, #8
 800f7ea:	46bd      	mov	sp, r7
 800f7ec:	bd80      	pop	{r7, pc}
 800f7ee:	bf00      	nop
 800f7f0:	20000fec 	.word	0x20000fec

0800f7f4 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 800f7f4:	b580      	push	{r7, lr}
 800f7f6:	b082      	sub	sp, #8
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d101      	bne.n	800f806 <FreeMacCommandSlot+0x12>
    {
        return false;
 800f802:	2300      	movs	r3, #0
 800f804:	e005      	b.n	800f812 <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800f806:	2210      	movs	r2, #16
 800f808:	2100      	movs	r1, #0
 800f80a:	6878      	ldr	r0, [r7, #4]
 800f80c:	f007 f95c 	bl	8016ac8 <memset1>

    return true;
 800f810:	2301      	movs	r3, #1
}
 800f812:	4618      	mov	r0, r3
 800f814:	3708      	adds	r7, #8
 800f816:	46bd      	mov	sp, r7
 800f818:	bd80      	pop	{r7, pc}

0800f81a <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 800f81a:	b480      	push	{r7}
 800f81c:	b083      	sub	sp, #12
 800f81e:	af00      	add	r7, sp, #0
 800f820:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d101      	bne.n	800f82c <LinkedListInit+0x12>
    {
        return false;
 800f828:	2300      	movs	r3, #0
 800f82a:	e006      	b.n	800f83a <LinkedListInit+0x20>
    }

    list->First = NULL;
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	2200      	movs	r2, #0
 800f830:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	2200      	movs	r2, #0
 800f836:	605a      	str	r2, [r3, #4]

    return true;
 800f838:	2301      	movs	r3, #1
}
 800f83a:	4618      	mov	r0, r3
 800f83c:	370c      	adds	r7, #12
 800f83e:	46bd      	mov	sp, r7
 800f840:	bc80      	pop	{r7}
 800f842:	4770      	bx	lr

0800f844 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 800f844:	b480      	push	{r7}
 800f846:	b083      	sub	sp, #12
 800f848:	af00      	add	r7, sp, #0
 800f84a:	6078      	str	r0, [r7, #4]
 800f84c:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	2b00      	cmp	r3, #0
 800f852:	d002      	beq.n	800f85a <LinkedListAdd+0x16>
 800f854:	683b      	ldr	r3, [r7, #0]
 800f856:	2b00      	cmp	r3, #0
 800f858:	d101      	bne.n	800f85e <LinkedListAdd+0x1a>
    {
        return false;
 800f85a:	2300      	movs	r3, #0
 800f85c:	e015      	b.n	800f88a <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d102      	bne.n	800f86c <LinkedListAdd+0x28>
    {
        list->First = element;
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	683a      	ldr	r2, [r7, #0]
 800f86a:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	685b      	ldr	r3, [r3, #4]
 800f870:	2b00      	cmp	r3, #0
 800f872:	d003      	beq.n	800f87c <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	685b      	ldr	r3, [r3, #4]
 800f878:	683a      	ldr	r2, [r7, #0]
 800f87a:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 800f87c:	683b      	ldr	r3, [r7, #0]
 800f87e:	2200      	movs	r2, #0
 800f880:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	683a      	ldr	r2, [r7, #0]
 800f886:	605a      	str	r2, [r3, #4]

    return true;
 800f888:	2301      	movs	r3, #1
}
 800f88a:	4618      	mov	r0, r3
 800f88c:	370c      	adds	r7, #12
 800f88e:	46bd      	mov	sp, r7
 800f890:	bc80      	pop	{r7}
 800f892:	4770      	bx	lr

0800f894 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 800f894:	b480      	push	{r7}
 800f896:	b085      	sub	sp, #20
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
 800f89c:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d002      	beq.n	800f8aa <LinkedListGetPrevious+0x16>
 800f8a4:	683b      	ldr	r3, [r7, #0]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d101      	bne.n	800f8ae <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	e016      	b.n	800f8dc <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 800f8b4:	683a      	ldr	r2, [r7, #0]
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	429a      	cmp	r2, r3
 800f8ba:	d00c      	beq.n	800f8d6 <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800f8bc:	e002      	b.n	800f8c4 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d007      	beq.n	800f8da <LinkedListGetPrevious+0x46>
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	683a      	ldr	r2, [r7, #0]
 800f8d0:	429a      	cmp	r2, r3
 800f8d2:	d1f4      	bne.n	800f8be <LinkedListGetPrevious+0x2a>
 800f8d4:	e001      	b.n	800f8da <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 800f8da:	68fb      	ldr	r3, [r7, #12]
}
 800f8dc:	4618      	mov	r0, r3
 800f8de:	3714      	adds	r7, #20
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	bc80      	pop	{r7}
 800f8e4:	4770      	bx	lr

0800f8e6 <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 800f8e6:	b580      	push	{r7, lr}
 800f8e8:	b084      	sub	sp, #16
 800f8ea:	af00      	add	r7, sp, #0
 800f8ec:	6078      	str	r0, [r7, #4]
 800f8ee:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d002      	beq.n	800f8fc <LinkedListRemove+0x16>
 800f8f6:	683b      	ldr	r3, [r7, #0]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d101      	bne.n	800f900 <LinkedListRemove+0x1a>
    {
        return false;
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	e020      	b.n	800f942 <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 800f900:	6839      	ldr	r1, [r7, #0]
 800f902:	6878      	ldr	r0, [r7, #4]
 800f904:	f7ff ffc6 	bl	800f894 <LinkedListGetPrevious>
 800f908:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	683a      	ldr	r2, [r7, #0]
 800f910:	429a      	cmp	r2, r3
 800f912:	d103      	bne.n	800f91c <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 800f914:	683b      	ldr	r3, [r7, #0]
 800f916:	681a      	ldr	r2, [r3, #0]
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	685b      	ldr	r3, [r3, #4]
 800f920:	683a      	ldr	r2, [r7, #0]
 800f922:	429a      	cmp	r2, r3
 800f924:	d102      	bne.n	800f92c <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	68fa      	ldr	r2, [r7, #12]
 800f92a:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d003      	beq.n	800f93a <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 800f932:	683b      	ldr	r3, [r7, #0]
 800f934:	681a      	ldr	r2, [r3, #0]
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 800f93a:	683b      	ldr	r3, [r7, #0]
 800f93c:	2200      	movs	r2, #0
 800f93e:	601a      	str	r2, [r3, #0]

    return true;
 800f940:	2301      	movs	r3, #1
}
 800f942:	4618      	mov	r0, r3
 800f944:	3710      	adds	r7, #16
 800f946:	46bd      	mov	sp, r7
 800f948:	bd80      	pop	{r7, pc}
	...

0800f94c <IsSticky>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 800f94c:	b480      	push	{r7}
 800f94e:	b083      	sub	sp, #12
 800f950:	af00      	add	r7, sp, #0
 800f952:	4603      	mov	r3, r0
 800f954:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 800f956:	79fb      	ldrb	r3, [r7, #7]
 800f958:	2b11      	cmp	r3, #17
 800f95a:	bf8c      	ite	hi
 800f95c:	2201      	movhi	r2, #1
 800f95e:	2200      	movls	r2, #0
 800f960:	b2d2      	uxtb	r2, r2
 800f962:	2a00      	cmp	r2, #0
 800f964:	d10d      	bne.n	800f982 <IsSticky+0x36>
 800f966:	4a0a      	ldr	r2, [pc, #40]	@ (800f990 <IsSticky+0x44>)
 800f968:	fa22 f303 	lsr.w	r3, r2, r3
 800f96c:	f003 0301 	and.w	r3, r3, #1
 800f970:	2b00      	cmp	r3, #0
 800f972:	bf14      	ite	ne
 800f974:	2301      	movne	r3, #1
 800f976:	2300      	moveq	r3, #0
 800f978:	b2db      	uxtb	r3, r3
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d001      	beq.n	800f982 <IsSticky+0x36>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 800f97e:	2301      	movs	r3, #1
 800f980:	e000      	b.n	800f984 <IsSticky+0x38>
        default:
            return false;
 800f982:	2300      	movs	r3, #0
    }
}
 800f984:	4618      	mov	r0, r3
 800f986:	370c      	adds	r7, #12
 800f988:	46bd      	mov	sp, r7
 800f98a:	bc80      	pop	{r7}
 800f98c:	4770      	bx	lr
 800f98e:	bf00      	nop
 800f990:	00020720 	.word	0x00020720

0800f994 <IsConfirmationRequired>:
 * \param[IN]   cid            - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsConfirmationRequired( uint8_t cid )
{
 800f994:	b480      	push	{r7}
 800f996:	b083      	sub	sp, #12
 800f998:	af00      	add	r7, sp, #0
 800f99a:	4603      	mov	r3, r0
 800f99c:	71fb      	strb	r3, [r7, #7]
        case MOTE_MAC_REKEY_IND:
        case MOTE_MAC_DEVICE_MODE_IND:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
 800f99e:	2300      	movs	r3, #0
    }
}
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	370c      	adds	r7, #12
 800f9a4:	46bd      	mov	sp, r7
 800f9a6:	bc80      	pop	{r7}
 800f9a8:	4770      	bx	lr
	...

0800f9ac <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 800f9ac:	b580      	push	{r7, lr}
 800f9ae:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 800f9b0:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 800f9b4:	2100      	movs	r1, #0
 800f9b6:	4804      	ldr	r0, [pc, #16]	@ (800f9c8 <LoRaMacCommandsInit+0x1c>)
 800f9b8:	f007 f886 	bl	8016ac8 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 800f9bc:	4802      	ldr	r0, [pc, #8]	@ (800f9c8 <LoRaMacCommandsInit+0x1c>)
 800f9be:	f7ff ff2c 	bl	800f81a <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 800f9c2:	2300      	movs	r3, #0
}
 800f9c4:	4618      	mov	r0, r3
 800f9c6:	bd80      	pop	{r7, pc}
 800f9c8:	20000fec 	.word	0x20000fec

0800f9cc <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b086      	sub	sp, #24
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	4603      	mov	r3, r0
 800f9d4:	60b9      	str	r1, [r7, #8]
 800f9d6:	607a      	str	r2, [r7, #4]
 800f9d8:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 800f9da:	68bb      	ldr	r3, [r7, #8]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d101      	bne.n	800f9e4 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800f9e0:	2301      	movs	r3, #1
 800f9e2:	e03b      	b.n	800fa5c <LoRaMacCommandsAddCmd+0x90>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 800f9e4:	f7ff fede 	bl	800f7a4 <MallocNewMacCommandSlot>
 800f9e8:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 800f9ea:	697b      	ldr	r3, [r7, #20]
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d101      	bne.n	800f9f4 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800f9f0:	2302      	movs	r3, #2
 800f9f2:	e033      	b.n	800fa5c <LoRaMacCommandsAddCmd+0x90>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 800f9f4:	6979      	ldr	r1, [r7, #20]
 800f9f6:	481b      	ldr	r0, [pc, #108]	@ (800fa64 <LoRaMacCommandsAddCmd+0x98>)
 800f9f8:	f7ff ff24 	bl	800f844 <LinkedListAdd>
 800f9fc:	4603      	mov	r3, r0
 800f9fe:	f083 0301 	eor.w	r3, r3, #1
 800fa02:	b2db      	uxtb	r3, r3
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d001      	beq.n	800fa0c <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 800fa08:	2305      	movs	r3, #5
 800fa0a:	e027      	b.n	800fa5c <LoRaMacCommandsAddCmd+0x90>
    }

    // Set Values
    newCmd->CID = cid;
 800fa0c:	697b      	ldr	r3, [r7, #20]
 800fa0e:	7bfa      	ldrb	r2, [r7, #15]
 800fa10:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 800fa12:	697b      	ldr	r3, [r7, #20]
 800fa14:	687a      	ldr	r2, [r7, #4]
 800fa16:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800fa18:	697b      	ldr	r3, [r7, #20]
 800fa1a:	3305      	adds	r3, #5
 800fa1c:	687a      	ldr	r2, [r7, #4]
 800fa1e:	b292      	uxth	r2, r2
 800fa20:	68b9      	ldr	r1, [r7, #8]
 800fa22:	4618      	mov	r0, r3
 800fa24:	f007 f815 	bl	8016a52 <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 800fa28:	7bfb      	ldrb	r3, [r7, #15]
 800fa2a:	4618      	mov	r0, r3
 800fa2c:	f7ff ff8e 	bl	800f94c <IsSticky>
 800fa30:	4603      	mov	r3, r0
 800fa32:	461a      	mov	r2, r3
 800fa34:	697b      	ldr	r3, [r7, #20]
 800fa36:	731a      	strb	r2, [r3, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 800fa38:	7bfb      	ldrb	r3, [r7, #15]
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	f7ff ffaa 	bl	800f994 <IsConfirmationRequired>
 800fa40:	4603      	mov	r3, r0
 800fa42:	461a      	mov	r2, r3
 800fa44:	697b      	ldr	r3, [r7, #20]
 800fa46:	735a      	strb	r2, [r3, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800fa48:	4b06      	ldr	r3, [pc, #24]	@ (800fa64 <LoRaMacCommandsAddCmd+0x98>)
 800fa4a:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	4413      	add	r3, r2
 800fa52:	3301      	adds	r3, #1
 800fa54:	4a03      	ldr	r2, [pc, #12]	@ (800fa64 <LoRaMacCommandsAddCmd+0x98>)
 800fa56:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 800fa5a:	2300      	movs	r3, #0
}
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	3718      	adds	r7, #24
 800fa60:	46bd      	mov	sp, r7
 800fa62:	bd80      	pop	{r7, pc}
 800fa64:	20000fec 	.word	0x20000fec

0800fa68 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	b082      	sub	sp, #8
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d101      	bne.n	800fa7a <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800fa76:	2301      	movs	r3, #1
 800fa78:	e021      	b.n	800fabe <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 800fa7a:	6879      	ldr	r1, [r7, #4]
 800fa7c:	4812      	ldr	r0, [pc, #72]	@ (800fac8 <LoRaMacCommandsRemoveCmd+0x60>)
 800fa7e:	f7ff ff32 	bl	800f8e6 <LinkedListRemove>
 800fa82:	4603      	mov	r3, r0
 800fa84:	f083 0301 	eor.w	r3, r3, #1
 800fa88:	b2db      	uxtb	r3, r3
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d001      	beq.n	800fa92 <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800fa8e:	2303      	movs	r3, #3
 800fa90:	e015      	b.n	800fabe <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800fa92:	4b0d      	ldr	r3, [pc, #52]	@ (800fac8 <LoRaMacCommandsRemoveCmd+0x60>)
 800fa94:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	689b      	ldr	r3, [r3, #8]
 800fa9c:	1ad3      	subs	r3, r2, r3
 800fa9e:	3b01      	subs	r3, #1
 800faa0:	4a09      	ldr	r2, [pc, #36]	@ (800fac8 <LoRaMacCommandsRemoveCmd+0x60>)
 800faa2:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 800faa6:	6878      	ldr	r0, [r7, #4]
 800faa8:	f7ff fea4 	bl	800f7f4 <FreeMacCommandSlot>
 800faac:	4603      	mov	r3, r0
 800faae:	f083 0301 	eor.w	r3, r3, #1
 800fab2:	b2db      	uxtb	r3, r3
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d001      	beq.n	800fabc <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 800fab8:	2305      	movs	r3, #5
 800faba:	e000      	b.n	800fabe <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800fabc:	2300      	movs	r3, #0
}
 800fabe:	4618      	mov	r0, r3
 800fac0:	3708      	adds	r7, #8
 800fac2:	46bd      	mov	sp, r7
 800fac4:	bd80      	pop	{r7, pc}
 800fac6:	bf00      	nop
 800fac8:	20000fec 	.word	0x20000fec

0800facc <LoRaMacCommandsGetCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
 800facc:	b480      	push	{r7}
 800face:	b085      	sub	sp, #20
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	4603      	mov	r3, r0
 800fad4:	6039      	str	r1, [r7, #0]
 800fad6:	71fb      	strb	r3, [r7, #7]
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800fad8:	4b0e      	ldr	r3, [pc, #56]	@ (800fb14 <LoRaMacCommandsGetCmd+0x48>)
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	60fb      	str	r3, [r7, #12]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 800fade:	e002      	b.n	800fae6 <LoRaMacCommandsGetCmd+0x1a>
    {
        curElement = curElement->Next;
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	60fb      	str	r3, [r7, #12]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d004      	beq.n	800faf6 <LoRaMacCommandsGetCmd+0x2a>
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	791b      	ldrb	r3, [r3, #4]
 800faf0:	79fa      	ldrb	r2, [r7, #7]
 800faf2:	429a      	cmp	r2, r3
 800faf4:	d1f4      	bne.n	800fae0 <LoRaMacCommandsGetCmd+0x14>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 800faf6:	683b      	ldr	r3, [r7, #0]
 800faf8:	68fa      	ldr	r2, [r7, #12]
 800fafa:	601a      	str	r2, [r3, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d101      	bne.n	800fb06 <LoRaMacCommandsGetCmd+0x3a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800fb02:	2303      	movs	r3, #3
 800fb04:	e000      	b.n	800fb08 <LoRaMacCommandsGetCmd+0x3c>
    }
    return LORAMAC_COMMANDS_SUCCESS;
 800fb06:	2300      	movs	r3, #0
}
 800fb08:	4618      	mov	r0, r3
 800fb0a:	3714      	adds	r7, #20
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	bc80      	pop	{r7}
 800fb10:	4770      	bx	lr
 800fb12:	bf00      	nop
 800fb14:	20000fec 	.word	0x20000fec

0800fb18 <LoRaMacCommandsRemoveNoneStickyCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	b082      	sub	sp, #8
 800fb1c:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800fb1e:	4b0f      	ldr	r3, [pc, #60]	@ (800fb5c <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 800fb24:	e012      	b.n	800fb4c <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	7b1b      	ldrb	r3, [r3, #12]
 800fb2a:	f083 0301 	eor.w	r3, r3, #1
 800fb2e:	b2db      	uxtb	r3, r3
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d008      	beq.n	800fb46 <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 800fb3a:	6878      	ldr	r0, [r7, #4]
 800fb3c:	f7ff ff94 	bl	800fa68 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 800fb40:	683b      	ldr	r3, [r7, #0]
 800fb42:	607b      	str	r3, [r7, #4]
 800fb44:	e002      	b.n	800fb4c <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d1e9      	bne.n	800fb26 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800fb52:	2300      	movs	r3, #0
}
 800fb54:	4618      	mov	r0, r3
 800fb56:	3708      	adds	r7, #8
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	bd80      	pop	{r7, pc}
 800fb5c:	20000fec 	.word	0x20000fec

0800fb60 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800fb60:	b580      	push	{r7, lr}
 800fb62:	b082      	sub	sp, #8
 800fb64:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800fb66:	4b13      	ldr	r3, [pc, #76]	@ (800fbb4 <LoRaMacCommandsRemoveStickyAnsCmds+0x54>)
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 800fb6c:	e01a      	b.n	800fba4 <LoRaMacCommandsRemoveStickyAnsCmds+0x44>
    {
        nexElement = curElement->Next;
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	603b      	str	r3, [r7, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	791b      	ldrb	r3, [r3, #4]
 800fb78:	4618      	mov	r0, r3
 800fb7a:	f7ff fee7 	bl	800f94c <IsSticky>
 800fb7e:	4603      	mov	r3, r0
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d00d      	beq.n	800fba0 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	791b      	ldrb	r3, [r3, #4]
 800fb88:	4618      	mov	r0, r3
 800fb8a:	f7ff ff03 	bl	800f994 <IsConfirmationRequired>
 800fb8e:	4603      	mov	r3, r0
 800fb90:	f083 0301 	eor.w	r3, r3, #1
 800fb94:	b2db      	uxtb	r3, r3
        if( ( IsSticky( curElement->CID ) == true ) &&
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d002      	beq.n	800fba0 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 800fb9a:	6878      	ldr	r0, [r7, #4]
 800fb9c:	f7ff ff64 	bl	800fa68 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 800fba0:	683b      	ldr	r3, [r7, #0]
 800fba2:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d1e1      	bne.n	800fb6e <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800fbaa:	2300      	movs	r3, #0
}
 800fbac:	4618      	mov	r0, r3
 800fbae:	3708      	adds	r7, #8
 800fbb0:	46bd      	mov	sp, r7
 800fbb2:	bd80      	pop	{r7, pc}
 800fbb4:	20000fec 	.word	0x20000fec

0800fbb8 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 800fbb8:	b480      	push	{r7}
 800fbba:	b083      	sub	sp, #12
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d101      	bne.n	800fbca <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800fbc6:	2301      	movs	r3, #1
 800fbc8:	e005      	b.n	800fbd6 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 800fbca:	4b05      	ldr	r3, [pc, #20]	@ (800fbe0 <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 800fbcc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800fbd4:	2300      	movs	r3, #0
}
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	370c      	adds	r7, #12
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	bc80      	pop	{r7}
 800fbde:	4770      	bx	lr
 800fbe0:	20000fec 	.word	0x20000fec

0800fbe4 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800fbe4:	b580      	push	{r7, lr}
 800fbe6:	b088      	sub	sp, #32
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	60f8      	str	r0, [r7, #12]
 800fbec:	60b9      	str	r1, [r7, #8]
 800fbee:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800fbf0:	4b25      	ldr	r3, [pc, #148]	@ (800fc88 <LoRaMacCommandsSerializeCmds+0xa4>)
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d002      	beq.n	800fc06 <LoRaMacCommandsSerializeCmds+0x22>
 800fc00:	68bb      	ldr	r3, [r7, #8]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d126      	bne.n	800fc54 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800fc06:	2301      	movs	r3, #1
 800fc08:	e039      	b.n	800fc7e <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800fc0a:	7efb      	ldrb	r3, [r7, #27]
 800fc0c:	68fa      	ldr	r2, [r7, #12]
 800fc0e:	1ad2      	subs	r2, r2, r3
 800fc10:	69fb      	ldr	r3, [r7, #28]
 800fc12:	689b      	ldr	r3, [r3, #8]
 800fc14:	3301      	adds	r3, #1
 800fc16:	429a      	cmp	r2, r3
 800fc18:	d320      	bcc.n	800fc5c <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 800fc1a:	7efb      	ldrb	r3, [r7, #27]
 800fc1c:	1c5a      	adds	r2, r3, #1
 800fc1e:	76fa      	strb	r2, [r7, #27]
 800fc20:	461a      	mov	r2, r3
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	4413      	add	r3, r2
 800fc26:	69fa      	ldr	r2, [r7, #28]
 800fc28:	7912      	ldrb	r2, [r2, #4]
 800fc2a:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800fc2c:	7efb      	ldrb	r3, [r7, #27]
 800fc2e:	687a      	ldr	r2, [r7, #4]
 800fc30:	18d0      	adds	r0, r2, r3
 800fc32:	69fb      	ldr	r3, [r7, #28]
 800fc34:	1d59      	adds	r1, r3, #5
 800fc36:	69fb      	ldr	r3, [r7, #28]
 800fc38:	689b      	ldr	r3, [r3, #8]
 800fc3a:	b29b      	uxth	r3, r3
 800fc3c:	461a      	mov	r2, r3
 800fc3e:	f006 ff08 	bl	8016a52 <memcpy1>
            itr += curElement->PayloadSize;
 800fc42:	69fb      	ldr	r3, [r7, #28]
 800fc44:	689b      	ldr	r3, [r3, #8]
 800fc46:	b2da      	uxtb	r2, r3
 800fc48:	7efb      	ldrb	r3, [r7, #27]
 800fc4a:	4413      	add	r3, r2
 800fc4c:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 800fc4e:	69fb      	ldr	r3, [r7, #28]
 800fc50:	681b      	ldr	r3, [r3, #0]
 800fc52:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 800fc54:	69fb      	ldr	r3, [r7, #28]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d1d7      	bne.n	800fc0a <LoRaMacCommandsSerializeCmds+0x26>
 800fc5a:	e009      	b.n	800fc70 <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 800fc5c:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 800fc5e:	e007      	b.n	800fc70 <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 800fc60:	69fb      	ldr	r3, [r7, #28]
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 800fc66:	69f8      	ldr	r0, [r7, #28]
 800fc68:	f7ff fefe 	bl	800fa68 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 800fc6c:	697b      	ldr	r3, [r7, #20]
 800fc6e:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 800fc70:	69fb      	ldr	r3, [r7, #28]
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d1f4      	bne.n	800fc60 <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800fc76:	68b8      	ldr	r0, [r7, #8]
 800fc78:	f7ff ff9e 	bl	800fbb8 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800fc7c:	2300      	movs	r3, #0
}
 800fc7e:	4618      	mov	r0, r3
 800fc80:	3720      	adds	r7, #32
 800fc82:	46bd      	mov	sp, r7
 800fc84:	bd80      	pop	{r7, pc}
 800fc86:	bf00      	nop
 800fc88:	20000fec 	.word	0x20000fec

0800fc8c <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 800fc8c:	b480      	push	{r7}
 800fc8e:	b085      	sub	sp, #20
 800fc90:	af00      	add	r7, sp, #0
 800fc92:	4603      	mov	r3, r0
 800fc94:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 800fc96:	2300      	movs	r3, #0
 800fc98:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 800fc9a:	79fb      	ldrb	r3, [r7, #7]
 800fc9c:	3b02      	subs	r3, #2
 800fc9e:	2b11      	cmp	r3, #17
 800fca0:	d850      	bhi.n	800fd44 <LoRaMacCommandsGetCmdSize+0xb8>
 800fca2:	a201      	add	r2, pc, #4	@ (adr r2, 800fca8 <LoRaMacCommandsGetCmdSize+0x1c>)
 800fca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fca8:	0800fcf1 	.word	0x0800fcf1
 800fcac:	0800fcf7 	.word	0x0800fcf7
 800fcb0:	0800fcfd 	.word	0x0800fcfd
 800fcb4:	0800fd03 	.word	0x0800fd03
 800fcb8:	0800fd09 	.word	0x0800fd09
 800fcbc:	0800fd0f 	.word	0x0800fd0f
 800fcc0:	0800fd15 	.word	0x0800fd15
 800fcc4:	0800fd1b 	.word	0x0800fd1b
 800fcc8:	0800fd21 	.word	0x0800fd21
 800fccc:	0800fd45 	.word	0x0800fd45
 800fcd0:	0800fd45 	.word	0x0800fd45
 800fcd4:	0800fd27 	.word	0x0800fd27
 800fcd8:	0800fd45 	.word	0x0800fd45
 800fcdc:	0800fd45 	.word	0x0800fd45
 800fce0:	0800fd2d 	.word	0x0800fd2d
 800fce4:	0800fd33 	.word	0x0800fd33
 800fce8:	0800fd39 	.word	0x0800fd39
 800fcec:	0800fd3f 	.word	0x0800fd3f
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 800fcf0:	2303      	movs	r3, #3
 800fcf2:	73fb      	strb	r3, [r7, #15]
            break;
 800fcf4:	e027      	b.n	800fd46 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 800fcf6:	2305      	movs	r3, #5
 800fcf8:	73fb      	strb	r3, [r7, #15]
            break;
 800fcfa:	e024      	b.n	800fd46 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 800fcfc:	2302      	movs	r3, #2
 800fcfe:	73fb      	strb	r3, [r7, #15]
            break;
 800fd00:	e021      	b.n	800fd46 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 800fd02:	2305      	movs	r3, #5
 800fd04:	73fb      	strb	r3, [r7, #15]
            break;
 800fd06:	e01e      	b.n	800fd46 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 800fd08:	2301      	movs	r3, #1
 800fd0a:	73fb      	strb	r3, [r7, #15]
            break;
 800fd0c:	e01b      	b.n	800fd46 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 800fd0e:	2306      	movs	r3, #6
 800fd10:	73fb      	strb	r3, [r7, #15]
            break;
 800fd12:	e018      	b.n	800fd46 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 800fd14:	2302      	movs	r3, #2
 800fd16:	73fb      	strb	r3, [r7, #15]
            break;
 800fd18:	e015      	b.n	800fd46 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 800fd1a:	2302      	movs	r3, #2
 800fd1c:	73fb      	strb	r3, [r7, #15]
            break;
 800fd1e:	e012      	b.n	800fd46 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 800fd20:	2305      	movs	r3, #5
 800fd22:	73fb      	strb	r3, [r7, #15]
            break;
 800fd24:	e00f      	b.n	800fd46 <LoRaMacCommandsGetCmdSize+0xba>
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 800fd26:	2306      	movs	r3, #6
 800fd28:	73fb      	strb	r3, [r7, #15]
            break;
 800fd2a:	e00c      	b.n	800fd46 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 800fd2c:	2301      	movs	r3, #1
 800fd2e:	73fb      	strb	r3, [r7, #15]
            break;
 800fd30:	e009      	b.n	800fd46 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 800fd32:	2305      	movs	r3, #5
 800fd34:	73fb      	strb	r3, [r7, #15]
            break;
 800fd36:	e006      	b.n	800fd46 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 800fd38:	2304      	movs	r3, #4
 800fd3a:	73fb      	strb	r3, [r7, #15]
            break;
 800fd3c:	e003      	b.n	800fd46 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 800fd3e:	2304      	movs	r3, #4
 800fd40:	73fb      	strb	r3, [r7, #15]
            break;
 800fd42:	e000      	b.n	800fd46 <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 800fd44:	bf00      	nop
        }
    }
    return cidSize;
 800fd46:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd48:	4618      	mov	r0, r3
 800fd4a:	3714      	adds	r7, #20
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	bc80      	pop	{r7}
 800fd50:	4770      	bx	lr
 800fd52:	bf00      	nop

0800fd54 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 800fd54:	b480      	push	{r7}
 800fd56:	b083      	sub	sp, #12
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	4a07      	ldr	r2, [pc, #28]	@ (800fd7c <IncreaseBufferPointer+0x28>)
 800fd60:	4293      	cmp	r3, r2
 800fd62:	d102      	bne.n	800fd6a <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800fd64:	4b06      	ldr	r3, [pc, #24]	@ (800fd80 <IncreaseBufferPointer+0x2c>)
 800fd66:	607b      	str	r3, [r7, #4]
 800fd68:	e002      	b.n	800fd70 <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	3304      	adds	r3, #4
 800fd6e:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 800fd70:	687b      	ldr	r3, [r7, #4]
}
 800fd72:	4618      	mov	r0, r3
 800fd74:	370c      	adds	r7, #12
 800fd76:	46bd      	mov	sp, r7
 800fd78:	bc80      	pop	{r7}
 800fd7a:	4770      	bx	lr
 800fd7c:	20001214 	.word	0x20001214
 800fd80:	20001204 	.word	0x20001204

0800fd84 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 800fd84:	b480      	push	{r7}
 800fd86:	b083      	sub	sp, #12
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	4603      	mov	r3, r0
 800fd8c:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 800fd8e:	79fb      	ldrb	r3, [r7, #7]
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d101      	bne.n	800fd98 <IsListEmpty+0x14>
    {
        return true;
 800fd94:	2301      	movs	r3, #1
 800fd96:	e000      	b.n	800fd9a <IsListEmpty+0x16>
    }
    return false;
 800fd98:	2300      	movs	r3, #0
}
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	370c      	adds	r7, #12
 800fd9e:	46bd      	mov	sp, r7
 800fda0:	bc80      	pop	{r7}
 800fda2:	4770      	bx	lr

0800fda4 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 800fda4:	b480      	push	{r7}
 800fda6:	b083      	sub	sp, #12
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	4603      	mov	r3, r0
 800fdac:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800fdae:	79fb      	ldrb	r3, [r7, #7]
 800fdb0:	2b04      	cmp	r3, #4
 800fdb2:	d901      	bls.n	800fdb8 <IsListFull+0x14>
    {
        return true;
 800fdb4:	2301      	movs	r3, #1
 800fdb6:	e000      	b.n	800fdba <IsListFull+0x16>
    }
    return false;
 800fdb8:	2300      	movs	r3, #0
}
 800fdba:	4618      	mov	r0, r3
 800fdbc:	370c      	adds	r7, #12
 800fdbe:	46bd      	mov	sp, r7
 800fdc0:	bc80      	pop	{r7}
 800fdc2:	4770      	bx	lr

0800fdc4 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 800fdc4:	b580      	push	{r7, lr}
 800fdc6:	b086      	sub	sp, #24
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	4603      	mov	r3, r0
 800fdcc:	60b9      	str	r1, [r7, #8]
 800fdce:	607a      	str	r2, [r7, #4]
 800fdd0:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 800fdd2:	68bb      	ldr	r3, [r7, #8]
 800fdd4:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800fdd6:	4b13      	ldr	r3, [pc, #76]	@ (800fe24 <GetElement+0x60>)
 800fdd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800fddc:	4618      	mov	r0, r3
 800fdde:	f7ff ffd1 	bl	800fd84 <IsListEmpty>
 800fde2:	4603      	mov	r3, r0
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d001      	beq.n	800fdec <GetElement+0x28>
    {
        return NULL;
 800fde8:	2300      	movs	r3, #0
 800fdea:	e017      	b.n	800fe1c <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800fdec:	2300      	movs	r3, #0
 800fdee:	74fb      	strb	r3, [r7, #19]
 800fdf0:	e00d      	b.n	800fe0e <GetElement+0x4a>
    {
        if( element->Request == request )
 800fdf2:	697b      	ldr	r3, [r7, #20]
 800fdf4:	781b      	ldrb	r3, [r3, #0]
 800fdf6:	7bfa      	ldrb	r2, [r7, #15]
 800fdf8:	429a      	cmp	r2, r3
 800fdfa:	d101      	bne.n	800fe00 <GetElement+0x3c>
        {
            // We have found the element
            return element;
 800fdfc:	697b      	ldr	r3, [r7, #20]
 800fdfe:	e00d      	b.n	800fe1c <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 800fe00:	6978      	ldr	r0, [r7, #20]
 800fe02:	f7ff ffa7 	bl	800fd54 <IncreaseBufferPointer>
 800fe06:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800fe08:	7cfb      	ldrb	r3, [r7, #19]
 800fe0a:	3301      	adds	r3, #1
 800fe0c:	74fb      	strb	r3, [r7, #19]
 800fe0e:	4b05      	ldr	r3, [pc, #20]	@ (800fe24 <GetElement+0x60>)
 800fe10:	f893 3020 	ldrb.w	r3, [r3, #32]
 800fe14:	7cfa      	ldrb	r2, [r7, #19]
 800fe16:	429a      	cmp	r2, r3
 800fe18:	d3eb      	bcc.n	800fdf2 <GetElement+0x2e>
    }

    return NULL;
 800fe1a:	2300      	movs	r3, #0
}
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	3718      	adds	r7, #24
 800fe20:	46bd      	mov	sp, r7
 800fe22:	bd80      	pop	{r7, pc}
 800fe24:	200011f8 	.word	0x200011f8

0800fe28 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 800fe28:	b580      	push	{r7, lr}
 800fe2a:	b082      	sub	sp, #8
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 800fe30:	4a0c      	ldr	r2, [pc, #48]	@ (800fe64 <LoRaMacConfirmQueueInit+0x3c>)
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800fe36:	4b0b      	ldr	r3, [pc, #44]	@ (800fe64 <LoRaMacConfirmQueueInit+0x3c>)
 800fe38:	2200      	movs	r2, #0
 800fe3a:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800fe3e:	4b09      	ldr	r3, [pc, #36]	@ (800fe64 <LoRaMacConfirmQueueInit+0x3c>)
 800fe40:	4a09      	ldr	r2, [pc, #36]	@ (800fe68 <LoRaMacConfirmQueueInit+0x40>)
 800fe42:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800fe44:	4b07      	ldr	r3, [pc, #28]	@ (800fe64 <LoRaMacConfirmQueueInit+0x3c>)
 800fe46:	4a08      	ldr	r2, [pc, #32]	@ (800fe68 <LoRaMacConfirmQueueInit+0x40>)
 800fe48:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800fe4a:	2214      	movs	r2, #20
 800fe4c:	21ff      	movs	r1, #255	@ 0xff
 800fe4e:	4806      	ldr	r0, [pc, #24]	@ (800fe68 <LoRaMacConfirmQueueInit+0x40>)
 800fe50:	f006 fe3a 	bl	8016ac8 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800fe54:	4b03      	ldr	r3, [pc, #12]	@ (800fe64 <LoRaMacConfirmQueueInit+0x3c>)
 800fe56:	2201      	movs	r2, #1
 800fe58:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 800fe5c:	bf00      	nop
 800fe5e:	3708      	adds	r7, #8
 800fe60:	46bd      	mov	sp, r7
 800fe62:	bd80      	pop	{r7, pc}
 800fe64:	200011f8 	.word	0x200011f8
 800fe68:	20001204 	.word	0x20001204

0800fe6c <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800fe6c:	b580      	push	{r7, lr}
 800fe6e:	b082      	sub	sp, #8
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800fe74:	4b19      	ldr	r3, [pc, #100]	@ (800fedc <LoRaMacConfirmQueueAdd+0x70>)
 800fe76:	f893 3020 	ldrb.w	r3, [r3, #32]
 800fe7a:	4618      	mov	r0, r3
 800fe7c:	f7ff ff92 	bl	800fda4 <IsListFull>
 800fe80:	4603      	mov	r3, r0
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d001      	beq.n	800fe8a <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 800fe86:	2300      	movs	r3, #0
 800fe88:	e024      	b.n	800fed4 <LoRaMacConfirmQueueAdd+0x68>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800fe8a:	4b14      	ldr	r3, [pc, #80]	@ (800fedc <LoRaMacConfirmQueueAdd+0x70>)
 800fe8c:	689b      	ldr	r3, [r3, #8]
 800fe8e:	687a      	ldr	r2, [r7, #4]
 800fe90:	7812      	ldrb	r2, [r2, #0]
 800fe92:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800fe94:	4b11      	ldr	r3, [pc, #68]	@ (800fedc <LoRaMacConfirmQueueAdd+0x70>)
 800fe96:	689b      	ldr	r3, [r3, #8]
 800fe98:	687a      	ldr	r2, [r7, #4]
 800fe9a:	7852      	ldrb	r2, [r2, #1]
 800fe9c:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800fe9e:	4b0f      	ldr	r3, [pc, #60]	@ (800fedc <LoRaMacConfirmQueueAdd+0x70>)
 800fea0:	689b      	ldr	r3, [r3, #8]
 800fea2:	687a      	ldr	r2, [r7, #4]
 800fea4:	78d2      	ldrb	r2, [r2, #3]
 800fea6:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 800fea8:	4b0c      	ldr	r3, [pc, #48]	@ (800fedc <LoRaMacConfirmQueueAdd+0x70>)
 800feaa:	689b      	ldr	r3, [r3, #8]
 800feac:	687a      	ldr	r2, [r7, #4]
 800feae:	7892      	ldrb	r2, [r2, #2]
 800feb0:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800feb2:	4b0a      	ldr	r3, [pc, #40]	@ (800fedc <LoRaMacConfirmQueueAdd+0x70>)
 800feb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800feb8:	3301      	adds	r3, #1
 800feba:	b2da      	uxtb	r2, r3
 800febc:	4b07      	ldr	r3, [pc, #28]	@ (800fedc <LoRaMacConfirmQueueAdd+0x70>)
 800febe:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800fec2:	4b06      	ldr	r3, [pc, #24]	@ (800fedc <LoRaMacConfirmQueueAdd+0x70>)
 800fec4:	689b      	ldr	r3, [r3, #8]
 800fec6:	4618      	mov	r0, r3
 800fec8:	f7ff ff44 	bl	800fd54 <IncreaseBufferPointer>
 800fecc:	4603      	mov	r3, r0
 800fece:	4a03      	ldr	r2, [pc, #12]	@ (800fedc <LoRaMacConfirmQueueAdd+0x70>)
 800fed0:	6093      	str	r3, [r2, #8]

    return true;
 800fed2:	2301      	movs	r3, #1
}
 800fed4:	4618      	mov	r0, r3
 800fed6:	3708      	adds	r7, #8
 800fed8:	46bd      	mov	sp, r7
 800feda:	bd80      	pop	{r7, pc}
 800fedc:	200011f8 	.word	0x200011f8

0800fee0 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 800fee0:	b580      	push	{r7, lr}
 800fee2:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800fee4:	4b0e      	ldr	r3, [pc, #56]	@ (800ff20 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 800fee6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800feea:	4618      	mov	r0, r3
 800feec:	f7ff ff4a 	bl	800fd84 <IsListEmpty>
 800fef0:	4603      	mov	r3, r0
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d001      	beq.n	800fefa <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 800fef6:	2300      	movs	r3, #0
 800fef8:	e010      	b.n	800ff1c <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800fefa:	4b09      	ldr	r3, [pc, #36]	@ (800ff20 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 800fefc:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ff00:	3b01      	subs	r3, #1
 800ff02:	b2da      	uxtb	r2, r3
 800ff04:	4b06      	ldr	r3, [pc, #24]	@ (800ff20 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 800ff06:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800ff0a:	4b05      	ldr	r3, [pc, #20]	@ (800ff20 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 800ff0c:	685b      	ldr	r3, [r3, #4]
 800ff0e:	4618      	mov	r0, r3
 800ff10:	f7ff ff20 	bl	800fd54 <IncreaseBufferPointer>
 800ff14:	4603      	mov	r3, r0
 800ff16:	4a02      	ldr	r2, [pc, #8]	@ (800ff20 <LoRaMacConfirmQueueRemoveFirst+0x40>)
 800ff18:	6053      	str	r3, [r2, #4]

    return true;
 800ff1a:	2301      	movs	r3, #1
}
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	bd80      	pop	{r7, pc}
 800ff20:	200011f8 	.word	0x200011f8

0800ff24 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b084      	sub	sp, #16
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	4603      	mov	r3, r0
 800ff2c:	460a      	mov	r2, r1
 800ff2e:	71fb      	strb	r3, [r7, #7]
 800ff30:	4613      	mov	r3, r2
 800ff32:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 800ff34:	2300      	movs	r3, #0
 800ff36:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800ff38:	4b10      	ldr	r3, [pc, #64]	@ (800ff7c <LoRaMacConfirmQueueSetStatus+0x58>)
 800ff3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ff3e:	4618      	mov	r0, r3
 800ff40:	f7ff ff20 	bl	800fd84 <IsListEmpty>
 800ff44:	4603      	mov	r3, r0
 800ff46:	f083 0301 	eor.w	r3, r3, #1
 800ff4a:	b2db      	uxtb	r3, r3
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d011      	beq.n	800ff74 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800ff50:	4b0a      	ldr	r3, [pc, #40]	@ (800ff7c <LoRaMacConfirmQueueSetStatus+0x58>)
 800ff52:	6859      	ldr	r1, [r3, #4]
 800ff54:	4b09      	ldr	r3, [pc, #36]	@ (800ff7c <LoRaMacConfirmQueueSetStatus+0x58>)
 800ff56:	689a      	ldr	r2, [r3, #8]
 800ff58:	79bb      	ldrb	r3, [r7, #6]
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	f7ff ff32 	bl	800fdc4 <GetElement>
 800ff60:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d005      	beq.n	800ff74 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	79fa      	ldrb	r2, [r7, #7]
 800ff6c:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	2201      	movs	r2, #1
 800ff72:	709a      	strb	r2, [r3, #2]
        }
    }
}
 800ff74:	bf00      	nop
 800ff76:	3710      	adds	r7, #16
 800ff78:	46bd      	mov	sp, r7
 800ff7a:	bd80      	pop	{r7, pc}
 800ff7c:	200011f8 	.word	0x200011f8

0800ff80 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800ff80:	b580      	push	{r7, lr}
 800ff82:	b084      	sub	sp, #16
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	4603      	mov	r3, r0
 800ff88:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 800ff8a:	2300      	movs	r3, #0
 800ff8c:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800ff8e:	4b10      	ldr	r3, [pc, #64]	@ (800ffd0 <LoRaMacConfirmQueueGetStatus+0x50>)
 800ff90:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ff94:	4618      	mov	r0, r3
 800ff96:	f7ff fef5 	bl	800fd84 <IsListEmpty>
 800ff9a:	4603      	mov	r3, r0
 800ff9c:	f083 0301 	eor.w	r3, r3, #1
 800ffa0:	b2db      	uxtb	r3, r3
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d00e      	beq.n	800ffc4 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800ffa6:	4b0a      	ldr	r3, [pc, #40]	@ (800ffd0 <LoRaMacConfirmQueueGetStatus+0x50>)
 800ffa8:	6859      	ldr	r1, [r3, #4]
 800ffaa:	4b09      	ldr	r3, [pc, #36]	@ (800ffd0 <LoRaMacConfirmQueueGetStatus+0x50>)
 800ffac:	689a      	ldr	r2, [r3, #8]
 800ffae:	79fb      	ldrb	r3, [r7, #7]
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	f7ff ff07 	bl	800fdc4 <GetElement>
 800ffb6:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d002      	beq.n	800ffc4 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	785b      	ldrb	r3, [r3, #1]
 800ffc2:	e000      	b.n	800ffc6 <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ffc4:	2301      	movs	r3, #1
}
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	3710      	adds	r7, #16
 800ffca:	46bd      	mov	sp, r7
 800ffcc:	bd80      	pop	{r7, pc}
 800ffce:	bf00      	nop
 800ffd0:	200011f8 	.word	0x200011f8

0800ffd4 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800ffd4:	b580      	push	{r7, lr}
 800ffd6:	b084      	sub	sp, #16
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	4603      	mov	r3, r0
 800ffdc:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800ffde:	4b16      	ldr	r3, [pc, #88]	@ (8010038 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 800ffe0:	685b      	ldr	r3, [r3, #4]
 800ffe2:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 800ffe4:	4a14      	ldr	r2, [pc, #80]	@ (8010038 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 800ffe6:	79fb      	ldrb	r3, [r7, #7]
 800ffe8:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800ffec:	4b12      	ldr	r3, [pc, #72]	@ (8010038 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 800ffee:	f893 3020 	ldrb.w	r3, [r3, #32]
 800fff2:	4618      	mov	r0, r3
 800fff4:	f7ff fec6 	bl	800fd84 <IsListEmpty>
 800fff8:	4603      	mov	r3, r0
 800fffa:	f083 0301 	eor.w	r3, r3, #1
 800fffe:	b2db      	uxtb	r3, r3
 8010000:	2b00      	cmp	r3, #0
 8010002:	d015      	beq.n	8010030 <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	79fa      	ldrb	r2, [r7, #7]
 8010008:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	78db      	ldrb	r3, [r3, #3]
 801000e:	f083 0301 	eor.w	r3, r3, #1
 8010012:	b2db      	uxtb	r3, r3
 8010014:	2b00      	cmp	r3, #0
 8010016:	d002      	beq.n	801001e <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	2201      	movs	r2, #1
 801001c:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 801001e:	68f8      	ldr	r0, [r7, #12]
 8010020:	f7ff fe98 	bl	800fd54 <IncreaseBufferPointer>
 8010024:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8010026:	4b04      	ldr	r3, [pc, #16]	@ (8010038 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8010028:	689b      	ldr	r3, [r3, #8]
 801002a:	68fa      	ldr	r2, [r7, #12]
 801002c:	429a      	cmp	r2, r3
 801002e:	d1e9      	bne.n	8010004 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 8010030:	bf00      	nop
 8010032:	3710      	adds	r7, #16
 8010034:	46bd      	mov	sp, r7
 8010036:	bd80      	pop	{r7, pc}
 8010038:	200011f8 	.word	0x200011f8

0801003c <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 801003c:	b580      	push	{r7, lr}
 801003e:	b082      	sub	sp, #8
 8010040:	af00      	add	r7, sp, #0
 8010042:	4603      	mov	r3, r0
 8010044:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8010046:	4b09      	ldr	r3, [pc, #36]	@ (801006c <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8010048:	6859      	ldr	r1, [r3, #4]
 801004a:	4b08      	ldr	r3, [pc, #32]	@ (801006c <LoRaMacConfirmQueueIsCmdActive+0x30>)
 801004c:	689a      	ldr	r2, [r3, #8]
 801004e:	79fb      	ldrb	r3, [r7, #7]
 8010050:	4618      	mov	r0, r3
 8010052:	f7ff feb7 	bl	800fdc4 <GetElement>
 8010056:	4603      	mov	r3, r0
 8010058:	2b00      	cmp	r3, #0
 801005a:	d001      	beq.n	8010060 <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 801005c:	2301      	movs	r3, #1
 801005e:	e000      	b.n	8010062 <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 8010060:	2300      	movs	r3, #0
}
 8010062:	4618      	mov	r0, r3
 8010064:	3708      	adds	r7, #8
 8010066:	46bd      	mov	sp, r7
 8010068:	bd80      	pop	{r7, pc}
 801006a:	bf00      	nop
 801006c:	200011f8 	.word	0x200011f8

08010070 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 8010070:	b580      	push	{r7, lr}
 8010072:	b084      	sub	sp, #16
 8010074:	af00      	add	r7, sp, #0
 8010076:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8010078:	4b25      	ldr	r3, [pc, #148]	@ (8010110 <LoRaMacConfirmQueueHandleCb+0xa0>)
 801007a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801007e:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 8010080:	2300      	movs	r3, #0
 8010082:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 8010084:	f107 0308 	add.w	r3, r7, #8
 8010088:	2204      	movs	r2, #4
 801008a:	2100      	movs	r1, #0
 801008c:	4618      	mov	r0, r3
 801008e:	f006 fd1b 	bl	8016ac8 <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 8010092:	2300      	movs	r3, #0
 8010094:	73fb      	strb	r3, [r7, #15]
 8010096:	e032      	b.n	80100fe <LoRaMacConfirmQueueHandleCb+0x8e>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8010098:	4b1d      	ldr	r3, [pc, #116]	@ (8010110 <LoRaMacConfirmQueueHandleCb+0xa0>)
 801009a:	685b      	ldr	r3, [r3, #4]
 801009c:	781a      	ldrb	r2, [r3, #0]
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 80100a2:	4b1b      	ldr	r3, [pc, #108]	@ (8010110 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80100a4:	685b      	ldr	r3, [r3, #4]
 80100a6:	785a      	ldrb	r2, [r3, #1]
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 80100ac:	4b18      	ldr	r3, [pc, #96]	@ (8010110 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80100ae:	685b      	ldr	r3, [r3, #4]
 80100b0:	789b      	ldrb	r3, [r3, #2]
 80100b2:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 80100b4:	7b7b      	ldrb	r3, [r7, #13]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d005      	beq.n	80100c6 <LoRaMacConfirmQueueHandleCb+0x56>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 80100ba:	4b15      	ldr	r3, [pc, #84]	@ (8010110 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	689b      	ldr	r3, [r3, #8]
 80100c0:	6878      	ldr	r0, [r7, #4]
 80100c2:	4798      	blx	r3
 80100c4:	e00b      	b.n	80100de <LoRaMacConfirmQueueHandleCb+0x6e>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 80100c6:	4b12      	ldr	r3, [pc, #72]	@ (8010110 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80100c8:	685b      	ldr	r3, [r3, #4]
 80100ca:	781b      	ldrb	r3, [r3, #0]
 80100cc:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 80100ce:	4b10      	ldr	r3, [pc, #64]	@ (8010110 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80100d0:	685b      	ldr	r3, [r3, #4]
 80100d2:	785b      	ldrb	r3, [r3, #1]
 80100d4:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 80100d6:	4b0e      	ldr	r3, [pc, #56]	@ (8010110 <LoRaMacConfirmQueueHandleCb+0xa0>)
 80100d8:	685b      	ldr	r3, [r3, #4]
 80100da:	78db      	ldrb	r3, [r3, #3]
 80100dc:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 80100de:	f7ff feff 	bl	800fee0 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 80100e2:	7b7b      	ldrb	r3, [r7, #13]
 80100e4:	f083 0301 	eor.w	r3, r3, #1
 80100e8:	b2db      	uxtb	r3, r3
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d004      	beq.n	80100f8 <LoRaMacConfirmQueueHandleCb+0x88>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 80100ee:	f107 0308 	add.w	r3, r7, #8
 80100f2:	4618      	mov	r0, r3
 80100f4:	f7ff feba 	bl	800fe6c <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 80100f8:	7bfb      	ldrb	r3, [r7, #15]
 80100fa:	3301      	adds	r3, #1
 80100fc:	73fb      	strb	r3, [r7, #15]
 80100fe:	7bfa      	ldrb	r2, [r7, #15]
 8010100:	7bbb      	ldrb	r3, [r7, #14]
 8010102:	429a      	cmp	r2, r3
 8010104:	d3c8      	bcc.n	8010098 <LoRaMacConfirmQueueHandleCb+0x28>
        }
    }
}
 8010106:	bf00      	nop
 8010108:	bf00      	nop
 801010a:	3710      	adds	r7, #16
 801010c:	46bd      	mov	sp, r7
 801010e:	bd80      	pop	{r7, pc}
 8010110:	200011f8 	.word	0x200011f8

08010114 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8010114:	b480      	push	{r7}
 8010116:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8010118:	4b03      	ldr	r3, [pc, #12]	@ (8010128 <LoRaMacConfirmQueueGetCnt+0x14>)
 801011a:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 801011e:	4618      	mov	r0, r3
 8010120:	46bd      	mov	sp, r7
 8010122:	bc80      	pop	{r7}
 8010124:	4770      	bx	lr
 8010126:	bf00      	nop
 8010128:	200011f8 	.word	0x200011f8

0801012c <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 801012c:	b580      	push	{r7, lr}
 801012e:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8010130:	4b06      	ldr	r3, [pc, #24]	@ (801014c <LoRaMacConfirmQueueIsFull+0x20>)
 8010132:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010136:	4618      	mov	r0, r3
 8010138:	f7ff fe34 	bl	800fda4 <IsListFull>
 801013c:	4603      	mov	r3, r0
 801013e:	2b00      	cmp	r3, #0
 8010140:	d001      	beq.n	8010146 <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8010142:	2301      	movs	r3, #1
 8010144:	e000      	b.n	8010148 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8010146:	2300      	movs	r3, #0
    }
}
 8010148:	4618      	mov	r0, r3
 801014a:	bd80      	pop	{r7, pc}
 801014c:	200011f8 	.word	0x200011f8

08010150 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8010150:	b580      	push	{r7, lr}
 8010152:	b08e      	sub	sp, #56	@ 0x38
 8010154:	af00      	add	r7, sp, #0
 8010156:	60f8      	str	r0, [r7, #12]
 8010158:	607b      	str	r3, [r7, #4]
 801015a:	460b      	mov	r3, r1
 801015c:	817b      	strh	r3, [r7, #10]
 801015e:	4613      	mov	r3, r2
 8010160:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	2b00      	cmp	r3, #0
 8010166:	d101      	bne.n	801016c <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010168:	2309      	movs	r3, #9
 801016a:	e084      	b.n	8010276 <PayloadEncrypt+0x126>
    }

    uint8_t bufferIndex = 0;
 801016c:	2300      	movs	r3, #0
 801016e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint16_t ctr = 1;
 8010172:	2301      	movs	r3, #1
 8010174:	86bb      	strh	r3, [r7, #52]	@ 0x34
    uint8_t sBlock[16] = { 0 };
 8010176:	f107 0320 	add.w	r3, r7, #32
 801017a:	2200      	movs	r2, #0
 801017c:	601a      	str	r2, [r3, #0]
 801017e:	605a      	str	r2, [r3, #4]
 8010180:	609a      	str	r2, [r3, #8]
 8010182:	60da      	str	r2, [r3, #12]
    uint8_t aBlock[16] = { 0 };
 8010184:	f107 0310 	add.w	r3, r7, #16
 8010188:	2200      	movs	r2, #0
 801018a:	601a      	str	r2, [r3, #0]
 801018c:	605a      	str	r2, [r3, #4]
 801018e:	609a      	str	r2, [r3, #8]
 8010190:	60da      	str	r2, [r3, #12]

    aBlock[0] = 0x01;
 8010192:	2301      	movs	r3, #1
 8010194:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 8010196:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 801019a:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	b2db      	uxtb	r3, r3
 80101a0:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	0a1b      	lsrs	r3, r3, #8
 80101a6:	b2db      	uxtb	r3, r3
 80101a8:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	0c1b      	lsrs	r3, r3, #16
 80101ae:	b2db      	uxtb	r3, r3
 80101b0:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	0e1b      	lsrs	r3, r3, #24
 80101b6:	b2db      	uxtb	r3, r3
 80101b8:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 80101ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80101bc:	b2db      	uxtb	r3, r3
 80101be:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 80101c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80101c2:	0a1b      	lsrs	r3, r3, #8
 80101c4:	b2db      	uxtb	r3, r3
 80101c6:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 80101c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80101ca:	0c1b      	lsrs	r3, r3, #16
 80101cc:	b2db      	uxtb	r3, r3
 80101ce:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 80101d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80101d2:	0e1b      	lsrs	r3, r3, #24
 80101d4:	b2db      	uxtb	r3, r3
 80101d6:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 80101d8:	e048      	b.n	801026c <PayloadEncrypt+0x11c>
    {
        aBlock[15] = ctr & 0xFF;
 80101da:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80101dc:	b2db      	uxtb	r3, r3
 80101de:	77fb      	strb	r3, [r7, #31]
        ctr++;
 80101e0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80101e2:	3301      	adds	r3, #1
 80101e4:	86bb      	strh	r3, [r7, #52]	@ 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 80101e6:	f107 0320 	add.w	r3, r7, #32
 80101ea:	7a7a      	ldrb	r2, [r7, #9]
 80101ec:	f107 0010 	add.w	r0, r7, #16
 80101f0:	2110      	movs	r1, #16
 80101f2:	f006 fa17 	bl	8016624 <SecureElementAesEncrypt>
 80101f6:	4603      	mov	r3, r0
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d001      	beq.n	8010200 <PayloadEncrypt+0xb0>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80101fc:	230e      	movs	r3, #14
 80101fe:	e03a      	b.n	8010276 <PayloadEncrypt+0x126>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8010200:	2300      	movs	r3, #0
 8010202:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8010206:	e01e      	b.n	8010246 <PayloadEncrypt+0xf6>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 8010208:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 801020c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8010210:	4413      	add	r3, r2
 8010212:	461a      	mov	r2, r3
 8010214:	68fb      	ldr	r3, [r7, #12]
 8010216:	4413      	add	r3, r2
 8010218:	7819      	ldrb	r1, [r3, #0]
 801021a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801021e:	3338      	adds	r3, #56	@ 0x38
 8010220:	443b      	add	r3, r7
 8010222:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8010226:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 801022a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801022e:	4403      	add	r3, r0
 8010230:	4618      	mov	r0, r3
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	4403      	add	r3, r0
 8010236:	404a      	eors	r2, r1
 8010238:	b2d2      	uxtb	r2, r2
 801023a:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 801023c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8010240:	3301      	adds	r3, #1
 8010242:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8010246:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801024a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 801024e:	2a10      	cmp	r2, #16
 8010250:	bfa8      	it	ge
 8010252:	2210      	movge	r2, #16
 8010254:	b212      	sxth	r2, r2
 8010256:	4293      	cmp	r3, r2
 8010258:	dbd6      	blt.n	8010208 <PayloadEncrypt+0xb8>
        }
        size -= 16;
 801025a:	897b      	ldrh	r3, [r7, #10]
 801025c:	3b10      	subs	r3, #16
 801025e:	b29b      	uxth	r3, r3
 8010260:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8010262:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010266:	3310      	adds	r3, #16
 8010268:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    while( size > 0 )
 801026c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8010270:	2b00      	cmp	r3, #0
 8010272:	dcb2      	bgt.n	80101da <PayloadEncrypt+0x8a>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8010274:	2300      	movs	r3, #0
}
 8010276:	4618      	mov	r0, r3
 8010278:	3738      	adds	r7, #56	@ 0x38
 801027a:	46bd      	mov	sp, r7
 801027c:	bd80      	pop	{r7, pc}

0801027e <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 801027e:	b490      	push	{r4, r7}
 8010280:	b082      	sub	sp, #8
 8010282:	af00      	add	r7, sp, #0
 8010284:	4604      	mov	r4, r0
 8010286:	4608      	mov	r0, r1
 8010288:	4611      	mov	r1, r2
 801028a:	461a      	mov	r2, r3
 801028c:	4623      	mov	r3, r4
 801028e:	80fb      	strh	r3, [r7, #6]
 8010290:	4603      	mov	r3, r0
 8010292:	717b      	strb	r3, [r7, #5]
 8010294:	460b      	mov	r3, r1
 8010296:	713b      	strb	r3, [r7, #4]
 8010298:	4613      	mov	r3, r2
 801029a:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 801029c:	69bb      	ldr	r3, [r7, #24]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d101      	bne.n	80102a6 <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80102a2:	2309      	movs	r3, #9
 80102a4:	e04e      	b.n	8010344 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 80102a6:	69bb      	ldr	r3, [r7, #24]
 80102a8:	2249      	movs	r2, #73	@ 0x49
 80102aa:	701a      	strb	r2, [r3, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 80102ac:	69bb      	ldr	r3, [r7, #24]
 80102ae:	3301      	adds	r3, #1
 80102b0:	2200      	movs	r2, #0
 80102b2:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 80102b4:	69bb      	ldr	r3, [r7, #24]
 80102b6:	3302      	adds	r3, #2
 80102b8:	2200      	movs	r2, #0
 80102ba:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 80102bc:	69bb      	ldr	r3, [r7, #24]
 80102be:	3303      	adds	r3, #3
 80102c0:	2200      	movs	r2, #0
 80102c2:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 80102c4:	69bb      	ldr	r3, [r7, #24]
 80102c6:	3304      	adds	r3, #4
 80102c8:	2200      	movs	r2, #0
 80102ca:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 80102cc:	69bb      	ldr	r3, [r7, #24]
 80102ce:	3305      	adds	r3, #5
 80102d0:	78fa      	ldrb	r2, [r7, #3]
 80102d2:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 80102d4:	69bb      	ldr	r3, [r7, #24]
 80102d6:	3306      	adds	r3, #6
 80102d8:	693a      	ldr	r2, [r7, #16]
 80102da:	b2d2      	uxtb	r2, r2
 80102dc:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 80102de:	693b      	ldr	r3, [r7, #16]
 80102e0:	0a1a      	lsrs	r2, r3, #8
 80102e2:	69bb      	ldr	r3, [r7, #24]
 80102e4:	3307      	adds	r3, #7
 80102e6:	b2d2      	uxtb	r2, r2
 80102e8:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 80102ea:	693b      	ldr	r3, [r7, #16]
 80102ec:	0c1a      	lsrs	r2, r3, #16
 80102ee:	69bb      	ldr	r3, [r7, #24]
 80102f0:	3308      	adds	r3, #8
 80102f2:	b2d2      	uxtb	r2, r2
 80102f4:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 80102f6:	693b      	ldr	r3, [r7, #16]
 80102f8:	0e1a      	lsrs	r2, r3, #24
 80102fa:	69bb      	ldr	r3, [r7, #24]
 80102fc:	3309      	adds	r3, #9
 80102fe:	b2d2      	uxtb	r2, r2
 8010300:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8010302:	69bb      	ldr	r3, [r7, #24]
 8010304:	330a      	adds	r3, #10
 8010306:	697a      	ldr	r2, [r7, #20]
 8010308:	b2d2      	uxtb	r2, r2
 801030a:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 801030c:	697b      	ldr	r3, [r7, #20]
 801030e:	0a1a      	lsrs	r2, r3, #8
 8010310:	69bb      	ldr	r3, [r7, #24]
 8010312:	330b      	adds	r3, #11
 8010314:	b2d2      	uxtb	r2, r2
 8010316:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 8010318:	697b      	ldr	r3, [r7, #20]
 801031a:	0c1a      	lsrs	r2, r3, #16
 801031c:	69bb      	ldr	r3, [r7, #24]
 801031e:	330c      	adds	r3, #12
 8010320:	b2d2      	uxtb	r2, r2
 8010322:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8010324:	697b      	ldr	r3, [r7, #20]
 8010326:	0e1a      	lsrs	r2, r3, #24
 8010328:	69bb      	ldr	r3, [r7, #24]
 801032a:	330d      	adds	r3, #13
 801032c:	b2d2      	uxtb	r2, r2
 801032e:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8010330:	69bb      	ldr	r3, [r7, #24]
 8010332:	330e      	adds	r3, #14
 8010334:	2200      	movs	r2, #0
 8010336:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 8010338:	69bb      	ldr	r3, [r7, #24]
 801033a:	330f      	adds	r3, #15
 801033c:	88fa      	ldrh	r2, [r7, #6]
 801033e:	b2d2      	uxtb	r2, r2
 8010340:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8010342:	2300      	movs	r3, #0
}
 8010344:	4618      	mov	r0, r3
 8010346:	3708      	adds	r7, #8
 8010348:	46bd      	mov	sp, r7
 801034a:	bc90      	pop	{r4, r7}
 801034c:	4770      	bx	lr

0801034e <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 801034e:	b590      	push	{r4, r7, lr}
 8010350:	b08b      	sub	sp, #44	@ 0x2c
 8010352:	af04      	add	r7, sp, #16
 8010354:	6078      	str	r0, [r7, #4]
 8010356:	4608      	mov	r0, r1
 8010358:	4611      	mov	r1, r2
 801035a:	461a      	mov	r2, r3
 801035c:	4603      	mov	r3, r0
 801035e:	807b      	strh	r3, [r7, #2]
 8010360:	460b      	mov	r3, r1
 8010362:	707b      	strb	r3, [r7, #1]
 8010364:	4613      	mov	r3, r2
 8010366:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	2b00      	cmp	r3, #0
 801036c:	d002      	beq.n	8010374 <ComputeCmacB0+0x26>
 801036e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010370:	2b00      	cmp	r3, #0
 8010372:	d101      	bne.n	8010378 <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010374:	2309      	movs	r3, #9
 8010376:	e024      	b.n	80103c2 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8010378:	887b      	ldrh	r3, [r7, #2]
 801037a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801037e:	d901      	bls.n	8010384 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8010380:	230d      	movs	r3, #13
 8010382:	e01e      	b.n	80103c2 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE] ALIGN(4);

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8010384:	f897 4028 	ldrb.w	r4, [r7, #40]	@ 0x28
 8010388:	783a      	ldrb	r2, [r7, #0]
 801038a:	7879      	ldrb	r1, [r7, #1]
 801038c:	8878      	ldrh	r0, [r7, #2]
 801038e:	f107 0308 	add.w	r3, r7, #8
 8010392:	9302      	str	r3, [sp, #8]
 8010394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010396:	9301      	str	r3, [sp, #4]
 8010398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801039a:	9300      	str	r3, [sp, #0]
 801039c:	4623      	mov	r3, r4
 801039e:	f7ff ff6e 	bl	801027e <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 80103a2:	887a      	ldrh	r2, [r7, #2]
 80103a4:	7879      	ldrb	r1, [r7, #1]
 80103a6:	f107 0008 	add.w	r0, r7, #8
 80103aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80103ac:	9300      	str	r3, [sp, #0]
 80103ae:	460b      	mov	r3, r1
 80103b0:	6879      	ldr	r1, [r7, #4]
 80103b2:	f006 f8f1 	bl	8016598 <SecureElementComputeAesCmac>
 80103b6:	4603      	mov	r3, r0
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d001      	beq.n	80103c0 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80103bc:	230e      	movs	r3, #14
 80103be:	e000      	b.n	80103c2 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80103c0:	2300      	movs	r3, #0
}
 80103c2:	4618      	mov	r0, r3
 80103c4:	371c      	adds	r7, #28
 80103c6:	46bd      	mov	sp, r7
 80103c8:	bd90      	pop	{r4, r7, pc}

080103ca <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 80103ca:	b590      	push	{r4, r7, lr}
 80103cc:	b0cd      	sub	sp, #308	@ 0x134
 80103ce:	af04      	add	r7, sp, #16
 80103d0:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 80103d4:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 80103d8:	6020      	str	r0, [r4, #0]
 80103da:	460c      	mov	r4, r1
 80103dc:	4610      	mov	r0, r2
 80103de:	4619      	mov	r1, r3
 80103e0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80103e4:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 80103e8:	4622      	mov	r2, r4
 80103ea:	801a      	strh	r2, [r3, #0]
 80103ec:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80103f0:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 80103f4:	4602      	mov	r2, r0
 80103f6:	701a      	strb	r2, [r3, #0]
 80103f8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80103fc:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8010400:	460a      	mov	r2, r1
 8010402:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8010404:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010408:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	2b00      	cmp	r3, #0
 8010410:	d101      	bne.n	8010416 <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010412:	2309      	movs	r3, #9
 8010414:	e063      	b.n	80104de <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 8010416:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801041a:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 801041e:	881b      	ldrh	r3, [r3, #0]
 8010420:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010424:	d901      	bls.n	801042a <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8010426:	230d      	movs	r3, #13
 8010428:	e059      	b.n	80104de <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 801042a:	f107 030c 	add.w	r3, r7, #12
 801042e:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8010432:	2100      	movs	r1, #0
 8010434:	4618      	mov	r0, r3
 8010436:	f006 fb47 	bl	8016ac8 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 801043a:	f897 4130 	ldrb.w	r4, [r7, #304]	@ 0x130
 801043e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010442:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8010446:	781a      	ldrb	r2, [r3, #0]
 8010448:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801044c:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8010450:	7819      	ldrb	r1, [r3, #0]
 8010452:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8010456:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 801045a:	8818      	ldrh	r0, [r3, #0]
 801045c:	f107 030c 	add.w	r3, r7, #12
 8010460:	9302      	str	r3, [sp, #8]
 8010462:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8010466:	9301      	str	r3, [sp, #4]
 8010468:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801046c:	9300      	str	r3, [sp, #0]
 801046e:	4623      	mov	r3, r4
 8010470:	f7ff ff05 	bl	801027e <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8010474:	f107 030c 	add.w	r3, r7, #12
 8010478:	3310      	adds	r3, #16
 801047a:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 801047e:	f5a2 728f 	sub.w	r2, r2, #286	@ 0x11e
 8010482:	8812      	ldrh	r2, [r2, #0]
 8010484:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 8010488:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 801048c:	6809      	ldr	r1, [r1, #0]
 801048e:	4618      	mov	r0, r3
 8010490:	f006 fadf 	bl	8016a52 <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8010494:	2306      	movs	r3, #6
 8010496:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 801049a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801049e:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 80104a2:	881b      	ldrh	r3, [r3, #0]
 80104a4:	3310      	adds	r3, #16
 80104a6:	4619      	mov	r1, r3
 80104a8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80104ac:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 80104b0:	781b      	ldrb	r3, [r3, #0]
 80104b2:	f107 000c 	add.w	r0, r7, #12
 80104b6:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 80104ba:	f006 f887 	bl	80165cc <SecureElementVerifyAesCmac>
 80104be:	4603      	mov	r3, r0
 80104c0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 80104c4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d101      	bne.n	80104d0 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 80104cc:	2300      	movs	r3, #0
 80104ce:	e006      	b.n	80104de <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 80104d0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80104d4:	2b01      	cmp	r3, #1
 80104d6:	d101      	bne.n	80104dc <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 80104d8:	2301      	movs	r3, #1
 80104da:	e000      	b.n	80104de <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80104dc:	230e      	movs	r3, #14
}
 80104de:	4618      	mov	r0, r3
 80104e0:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 80104e4:	46bd      	mov	sp, r7
 80104e6:	bd90      	pop	{r4, r7, pc}

080104e8 <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 80104e8:	b480      	push	{r7}
 80104ea:	b085      	sub	sp, #20
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	4603      	mov	r3, r0
 80104f0:	6039      	str	r1, [r7, #0]
 80104f2:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 80104f4:	2300      	movs	r3, #0
 80104f6:	73fb      	strb	r3, [r7, #15]
 80104f8:	e011      	b.n	801051e <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 80104fa:	7bfb      	ldrb	r3, [r7, #15]
 80104fc:	4a0c      	ldr	r2, [pc, #48]	@ (8010530 <GetKeyAddrItem+0x48>)
 80104fe:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8010502:	79fa      	ldrb	r2, [r7, #7]
 8010504:	429a      	cmp	r2, r3
 8010506:	d107      	bne.n	8010518 <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 8010508:	7bfb      	ldrb	r3, [r7, #15]
 801050a:	009b      	lsls	r3, r3, #2
 801050c:	4a08      	ldr	r2, [pc, #32]	@ (8010530 <GetKeyAddrItem+0x48>)
 801050e:	441a      	add	r2, r3
 8010510:	683b      	ldr	r3, [r7, #0]
 8010512:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8010514:	2300      	movs	r3, #0
 8010516:	e006      	b.n	8010526 <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8010518:	7bfb      	ldrb	r3, [r7, #15]
 801051a:	3301      	adds	r3, #1
 801051c:	73fb      	strb	r3, [r7, #15]
 801051e:	7bfb      	ldrb	r3, [r7, #15]
 8010520:	2b01      	cmp	r3, #1
 8010522:	d9ea      	bls.n	80104fa <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8010524:	230b      	movs	r3, #11
}
 8010526:	4618      	mov	r0, r3
 8010528:	3714      	adds	r7, #20
 801052a:	46bd      	mov	sp, r7
 801052c:	bc80      	pop	{r7}
 801052e:	4770      	bx	lr
 8010530:	200000b4 	.word	0x200000b4

08010534 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8010534:	b580      	push	{r7, lr}
 8010536:	b088      	sub	sp, #32
 8010538:	af00      	add	r7, sp, #0
 801053a:	60b9      	str	r1, [r7, #8]
 801053c:	607a      	str	r2, [r7, #4]
 801053e:	461a      	mov	r2, r3
 8010540:	4603      	mov	r3, r0
 8010542:	73fb      	strb	r3, [r7, #15]
 8010544:	4613      	mov	r3, r2
 8010546:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 8010548:	f107 0310 	add.w	r3, r7, #16
 801054c:	2200      	movs	r2, #0
 801054e:	601a      	str	r2, [r3, #0]
 8010550:	605a      	str	r2, [r3, #4]
 8010552:	609a      	str	r2, [r3, #8]
 8010554:	60da      	str	r2, [r3, #12]

    switch( keyID )
 8010556:	7bfb      	ldrb	r3, [r7, #15]
 8010558:	2b08      	cmp	r3, #8
 801055a:	d002      	beq.n	8010562 <DeriveSessionKey10x+0x2e>
 801055c:	2b09      	cmp	r3, #9
 801055e:	d003      	beq.n	8010568 <DeriveSessionKey10x+0x34>
 8010560:	e005      	b.n	801056e <DeriveSessionKey10x+0x3a>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else
        case NWK_S_KEY:
#endif /* LORAMAC_VERSION */
            compBase[0] = 0x01;
 8010562:	2301      	movs	r3, #1
 8010564:	743b      	strb	r3, [r7, #16]
            break;
 8010566:	e004      	b.n	8010572 <DeriveSessionKey10x+0x3e>
        case APP_S_KEY:
            compBase[0] = 0x02;
 8010568:	2302      	movs	r3, #2
 801056a:	743b      	strb	r3, [r7, #16]
            break;
 801056c:	e001      	b.n	8010572 <DeriveSessionKey10x+0x3e>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 801056e:	230a      	movs	r3, #10
 8010570:	e02a      	b.n	80105c8 <DeriveSessionKey10x+0x94>
    }

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8010572:	68bb      	ldr	r3, [r7, #8]
 8010574:	b2db      	uxtb	r3, r3
 8010576:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 8010578:	68bb      	ldr	r3, [r7, #8]
 801057a:	0a1b      	lsrs	r3, r3, #8
 801057c:	b2db      	uxtb	r3, r3
 801057e:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 8010580:	68bb      	ldr	r3, [r7, #8]
 8010582:	0c1b      	lsrs	r3, r3, #16
 8010584:	b2db      	uxtb	r3, r3
 8010586:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	b2db      	uxtb	r3, r3
 801058c:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	0a1b      	lsrs	r3, r3, #8
 8010592:	b2db      	uxtb	r3, r3
 8010594:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	0c1b      	lsrs	r3, r3, #16
 801059a:	b2db      	uxtb	r3, r3
 801059c:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 801059e:	89bb      	ldrh	r3, [r7, #12]
 80105a0:	b2db      	uxtb	r3, r3
 80105a2:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 80105a4:	89bb      	ldrh	r3, [r7, #12]
 80105a6:	0a1b      	lsrs	r3, r3, #8
 80105a8:	b29b      	uxth	r3, r3
 80105aa:	b2db      	uxtb	r3, r3
 80105ac:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 80105ae:	7bfa      	ldrb	r2, [r7, #15]
 80105b0:	f107 0310 	add.w	r3, r7, #16
 80105b4:	2101      	movs	r1, #1
 80105b6:	4618      	mov	r0, r3
 80105b8:	f006 f8b4 	bl	8016724 <SecureElementDeriveAndStoreKey>
 80105bc:	4603      	mov	r3, r0
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d001      	beq.n	80105c6 <DeriveSessionKey10x+0x92>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80105c2:	230e      	movs	r3, #14
 80105c4:	e000      	b.n	80105c8 <DeriveSessionKey10x+0x94>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80105c6:	2300      	movs	r3, #0
}
 80105c8:	4618      	mov	r0, r3
 80105ca:	3720      	adds	r7, #32
 80105cc:	46bd      	mov	sp, r7
 80105ce:	bd80      	pop	{r7, pc}

080105d0 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 80105d0:	b480      	push	{r7}
 80105d2:	b083      	sub	sp, #12
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	4603      	mov	r3, r0
 80105d8:	6039      	str	r1, [r7, #0]
 80105da:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 80105dc:	683b      	ldr	r3, [r7, #0]
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d101      	bne.n	80105e6 <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80105e2:	2309      	movs	r3, #9
 80105e4:	e029      	b.n	801063a <GetLastFcntDown+0x6a>
    }
    switch( fCntID )
 80105e6:	79fb      	ldrb	r3, [r7, #7]
 80105e8:	3b01      	subs	r3, #1
 80105ea:	2b03      	cmp	r3, #3
 80105ec:	d822      	bhi.n	8010634 <GetLastFcntDown+0x64>
 80105ee:	a201      	add	r2, pc, #4	@ (adr r2, 80105f4 <GetLastFcntDown+0x24>)
 80105f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105f4:	08010605 	.word	0x08010605
 80105f8:	08010611 	.word	0x08010611
 80105fc:	0801061d 	.word	0x0801061d
 8010600:	08010629 	.word	0x08010629
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8010604:	4b0f      	ldr	r3, [pc, #60]	@ (8010644 <GetLastFcntDown+0x74>)
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	691a      	ldr	r2, [r3, #16]
 801060a:	683b      	ldr	r3, [r7, #0]
 801060c:	601a      	str	r2, [r3, #0]
            break;
 801060e:	e013      	b.n	8010638 <GetLastFcntDown+0x68>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8010610:	4b0c      	ldr	r3, [pc, #48]	@ (8010644 <GetLastFcntDown+0x74>)
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	695a      	ldr	r2, [r3, #20]
 8010616:	683b      	ldr	r3, [r7, #0]
 8010618:	601a      	str	r2, [r3, #0]
            break;
 801061a:	e00d      	b.n	8010638 <GetLastFcntDown+0x68>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 801061c:	4b09      	ldr	r3, [pc, #36]	@ (8010644 <GetLastFcntDown+0x74>)
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	699a      	ldr	r2, [r3, #24]
 8010622:	683b      	ldr	r3, [r7, #0]
 8010624:	601a      	str	r2, [r3, #0]
            break;
 8010626:	e007      	b.n	8010638 <GetLastFcntDown+0x68>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8010628:	4b06      	ldr	r3, [pc, #24]	@ (8010644 <GetLastFcntDown+0x74>)
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	69da      	ldr	r2, [r3, #28]
 801062e:	683b      	ldr	r3, [r7, #0]
 8010630:	601a      	str	r2, [r3, #0]
            break;
 8010632:	e001      	b.n	8010638 <GetLastFcntDown+0x68>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8010634:	2305      	movs	r3, #5
 8010636:	e000      	b.n	801063a <GetLastFcntDown+0x6a>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8010638:	2300      	movs	r3, #0
}
 801063a:	4618      	mov	r0, r3
 801063c:	370c      	adds	r7, #12
 801063e:	46bd      	mov	sp, r7
 8010640:	bc80      	pop	{r7}
 8010642:	4770      	bx	lr
 8010644:	2000121c 	.word	0x2000121c

08010648 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8010648:	b580      	push	{r7, lr}
 801064a:	b084      	sub	sp, #16
 801064c:	af00      	add	r7, sp, #0
 801064e:	4603      	mov	r3, r0
 8010650:	6039      	str	r1, [r7, #0]
 8010652:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 8010654:	2300      	movs	r3, #0
 8010656:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 8010658:	f107 020c 	add.w	r2, r7, #12
 801065c:	79fb      	ldrb	r3, [r7, #7]
 801065e:	4611      	mov	r1, r2
 8010660:	4618      	mov	r0, r3
 8010662:	f7ff ffb5 	bl	80105d0 <GetLastFcntDown>
 8010666:	4603      	mov	r3, r0
 8010668:	2b00      	cmp	r3, #0
 801066a:	d001      	beq.n	8010670 <CheckFCntDown+0x28>
    {
        return false;
 801066c:	2300      	movs	r3, #0
 801066e:	e00a      	b.n	8010686 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 8010670:	68fb      	ldr	r3, [r7, #12]
 8010672:	683a      	ldr	r2, [r7, #0]
 8010674:	429a      	cmp	r2, r3
 8010676:	d803      	bhi.n	8010680 <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITIAL_VALUE ) )
 8010678:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 801067a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801067e:	d101      	bne.n	8010684 <CheckFCntDown+0x3c>
    {
        return true;
 8010680:	2301      	movs	r3, #1
 8010682:	e000      	b.n	8010686 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 8010684:	2300      	movs	r3, #0
    }
}
 8010686:	4618      	mov	r0, r3
 8010688:	3710      	adds	r7, #16
 801068a:	46bd      	mov	sp, r7
 801068c:	bd80      	pop	{r7, pc}
	...

08010690 <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8010690:	b480      	push	{r7}
 8010692:	b083      	sub	sp, #12
 8010694:	af00      	add	r7, sp, #0
 8010696:	4603      	mov	r3, r0
 8010698:	6039      	str	r1, [r7, #0]
 801069a:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 801069c:	79fb      	ldrb	r3, [r7, #7]
 801069e:	3b01      	subs	r3, #1
 80106a0:	2b03      	cmp	r3, #3
 80106a2:	d82b      	bhi.n	80106fc <UpdateFCntDown+0x6c>
 80106a4:	a201      	add	r2, pc, #4	@ (adr r2, 80106ac <UpdateFCntDown+0x1c>)
 80106a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106aa:	bf00      	nop
 80106ac:	080106bd 	.word	0x080106bd
 80106b0:	080106cf 	.word	0x080106cf
 80106b4:	080106e1 	.word	0x080106e1
 80106b8:	080106f3 	.word	0x080106f3
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 80106bc:	4b12      	ldr	r3, [pc, #72]	@ (8010708 <UpdateFCntDown+0x78>)
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	683a      	ldr	r2, [r7, #0]
 80106c2:	611a      	str	r2, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 80106c4:	4b10      	ldr	r3, [pc, #64]	@ (8010708 <UpdateFCntDown+0x78>)
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	683a      	ldr	r2, [r7, #0]
 80106ca:	621a      	str	r2, [r3, #32]
            break;
 80106cc:	e017      	b.n	80106fe <UpdateFCntDown+0x6e>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 80106ce:	4b0e      	ldr	r3, [pc, #56]	@ (8010708 <UpdateFCntDown+0x78>)
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	683a      	ldr	r2, [r7, #0]
 80106d4:	615a      	str	r2, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 80106d6:	4b0c      	ldr	r3, [pc, #48]	@ (8010708 <UpdateFCntDown+0x78>)
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	683a      	ldr	r2, [r7, #0]
 80106dc:	621a      	str	r2, [r3, #32]
            break;
 80106de:	e00e      	b.n	80106fe <UpdateFCntDown+0x6e>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 80106e0:	4b09      	ldr	r3, [pc, #36]	@ (8010708 <UpdateFCntDown+0x78>)
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	683a      	ldr	r2, [r7, #0]
 80106e6:	619a      	str	r2, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 80106e8:	4b07      	ldr	r3, [pc, #28]	@ (8010708 <UpdateFCntDown+0x78>)
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	683a      	ldr	r2, [r7, #0]
 80106ee:	621a      	str	r2, [r3, #32]
            break;
 80106f0:	e005      	b.n	80106fe <UpdateFCntDown+0x6e>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 80106f2:	4b05      	ldr	r3, [pc, #20]	@ (8010708 <UpdateFCntDown+0x78>)
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	683a      	ldr	r2, [r7, #0]
 80106f8:	61da      	str	r2, [r3, #28]
            break;
 80106fa:	e000      	b.n	80106fe <UpdateFCntDown+0x6e>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 80106fc:	bf00      	nop
    }
}
 80106fe:	bf00      	nop
 8010700:	370c      	adds	r7, #12
 8010702:	46bd      	mov	sp, r7
 8010704:	bc80      	pop	{r7}
 8010706:	4770      	bx	lr
 8010708:	2000121c 	.word	0x2000121c

0801070c <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 801070c:	b480      	push	{r7}
 801070e:	b083      	sub	sp, #12
 8010710:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 8010712:	4b18      	ldr	r3, [pc, #96]	@ (8010774 <ResetFCnts+0x68>)
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	2200      	movs	r2, #0
 8010718:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 801071a:	4b16      	ldr	r3, [pc, #88]	@ (8010774 <ResetFCnts+0x68>)
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	f04f 32ff 	mov.w	r2, #4294967295
 8010722:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8010724:	4b13      	ldr	r3, [pc, #76]	@ (8010774 <ResetFCnts+0x68>)
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	f04f 32ff 	mov.w	r2, #4294967295
 801072c:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 801072e:	4b11      	ldr	r3, [pc, #68]	@ (8010774 <ResetFCnts+0x68>)
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	f04f 32ff 	mov.w	r2, #4294967295
 8010736:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8010738:	4b0e      	ldr	r3, [pc, #56]	@ (8010774 <ResetFCnts+0x68>)
 801073a:	681a      	ldr	r2, [r3, #0]
 801073c:	4b0d      	ldr	r3, [pc, #52]	@ (8010774 <ResetFCnts+0x68>)
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	6992      	ldr	r2, [r2, #24]
 8010742:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010744:	2300      	movs	r3, #0
 8010746:	607b      	str	r3, [r7, #4]
 8010748:	e00b      	b.n	8010762 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 801074a:	4b0a      	ldr	r3, [pc, #40]	@ (8010774 <ResetFCnts+0x68>)
 801074c:	681a      	ldr	r2, [r3, #0]
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	3306      	adds	r3, #6
 8010752:	009b      	lsls	r3, r3, #2
 8010754:	4413      	add	r3, r2
 8010756:	f04f 32ff 	mov.w	r2, #4294967295
 801075a:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	3301      	adds	r3, #1
 8010760:	607b      	str	r3, [r7, #4]
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	2b00      	cmp	r3, #0
 8010766:	ddf0      	ble.n	801074a <ResetFCnts+0x3e>
    }
}
 8010768:	bf00      	nop
 801076a:	bf00      	nop
 801076c:	370c      	adds	r7, #12
 801076e:	46bd      	mov	sp, r7
 8010770:	bc80      	pop	{r7}
 8010772:	4770      	bx	lr
 8010774:	2000121c 	.word	0x2000121c

08010778 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
 8010778:	b480      	push	{r7}
 801077a:	b083      	sub	sp, #12
 801077c:	af00      	add	r7, sp, #0
 801077e:	6078      	str	r0, [r7, #4]
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 8010780:	4b06      	ldr	r3, [pc, #24]	@ (801079c <IsJoinNonce10xOk+0x24>)
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	689b      	ldr	r3, [r3, #8]
 8010786:	687a      	ldr	r2, [r7, #4]
 8010788:	429a      	cmp	r2, r3
 801078a:	bf8c      	ite	hi
 801078c:	2301      	movhi	r3, #1
 801078e:	2300      	movls	r3, #0
 8010790:	b2db      	uxtb	r3, r3
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 8010792:	4618      	mov	r0, r3
 8010794:	370c      	adds	r7, #12
 8010796:	46bd      	mov	sp, r7
 8010798:	bc80      	pop	{r7}
 801079a:	4770      	bx	lr
 801079c:	2000121c 	.word	0x2000121c

080107a0 <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 80107a0:	b580      	push	{r7, lr}
 80107a2:	b082      	sub	sp, #8
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d101      	bne.n	80107b2 <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 80107ae:	2308      	movs	r3, #8
 80107b0:	e01c      	b.n	80107ec <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 80107b2:	4a10      	ldr	r2, [pc, #64]	@ (80107f4 <LoRaMacCryptoInit+0x54>)
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 80107b8:	4b0e      	ldr	r3, [pc, #56]	@ (80107f4 <LoRaMacCryptoInit+0x54>)
 80107ba:	681b      	ldr	r3, [r3, #0]
 80107bc:	2228      	movs	r2, #40	@ 0x28
 80107be:	2100      	movs	r1, #0
 80107c0:	4618      	mov	r0, r3
 80107c2:	f006 f981 	bl	8016ac8 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 80107c6:	4b0b      	ldr	r3, [pc, #44]	@ (80107f4 <LoRaMacCryptoInit+0x54>)
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	2201      	movs	r2, #1
 80107cc:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 80107ce:	4b09      	ldr	r3, [pc, #36]	@ (80107f4 <LoRaMacCryptoInit+0x54>)
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	2201      	movs	r2, #1
 80107d4:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 80107d6:	4b07      	ldr	r3, [pc, #28]	@ (80107f4 <LoRaMacCryptoInit+0x54>)
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	2201      	movs	r2, #1
 80107dc:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 80107de:	4b05      	ldr	r3, [pc, #20]	@ (80107f4 <LoRaMacCryptoInit+0x54>)
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	2200      	movs	r2, #0
 80107e4:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 80107e6:	f7ff ff91 	bl	801070c <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 80107ea:	2300      	movs	r3, #0
}
 80107ec:	4618      	mov	r0, r3
 80107ee:	3708      	adds	r7, #8
 80107f0:	46bd      	mov	sp, r7
 80107f2:	bd80      	pop	{r7, pc}
 80107f4:	2000121c 	.word	0x2000121c

080107f8 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 80107f8:	b480      	push	{r7}
 80107fa:	b083      	sub	sp, #12
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 8010800:	4b04      	ldr	r3, [pc, #16]	@ (8010814 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	687a      	ldr	r2, [r7, #4]
 8010806:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8010808:	2300      	movs	r3, #0
}
 801080a:	4618      	mov	r0, r3
 801080c:	370c      	adds	r7, #12
 801080e:	46bd      	mov	sp, r7
 8010810:	bc80      	pop	{r7}
 8010812:	4770      	bx	lr
 8010814:	2000121c 	.word	0x2000121c

08010818 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8010818:	b480      	push	{r7}
 801081a:	b083      	sub	sp, #12
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	2b00      	cmp	r3, #0
 8010824:	d101      	bne.n	801082a <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010826:	2309      	movs	r3, #9
 8010828:	e006      	b.n	8010838 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 801082a:	4b06      	ldr	r3, [pc, #24]	@ (8010844 <LoRaMacCryptoGetFCntUp+0x2c>)
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	68db      	ldr	r3, [r3, #12]
 8010830:	1c5a      	adds	r2, r3, #1
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8010836:	2300      	movs	r3, #0
}
 8010838:	4618      	mov	r0, r3
 801083a:	370c      	adds	r7, #12
 801083c:	46bd      	mov	sp, r7
 801083e:	bc80      	pop	{r7}
 8010840:	4770      	bx	lr
 8010842:	bf00      	nop
 8010844:	2000121c 	.word	0x2000121c

08010848 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 8010848:	b580      	push	{r7, lr}
 801084a:	b088      	sub	sp, #32
 801084c:	af00      	add	r7, sp, #0
 801084e:	4603      	mov	r3, r0
 8010850:	60b9      	str	r1, [r7, #8]
 8010852:	607a      	str	r2, [r7, #4]
 8010854:	73fb      	strb	r3, [r7, #15]
    uint32_t lastDown = 0;
 8010856:	2300      	movs	r3, #0
 8010858:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 801085a:	2300      	movs	r3, #0
 801085c:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 801085e:	2312      	movs	r3, #18
 8010860:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	2b00      	cmp	r3, #0
 8010866:	d101      	bne.n	801086c <LoRaMacCryptoGetFCntDown+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010868:	2309      	movs	r3, #9
 801086a:	e035      	b.n	80108d8 <LoRaMacCryptoGetFCntDown+0x90>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 801086c:	f107 0214 	add.w	r2, r7, #20
 8010870:	7bfb      	ldrb	r3, [r7, #15]
 8010872:	4611      	mov	r1, r2
 8010874:	4618      	mov	r0, r3
 8010876:	f7ff feab 	bl	80105d0 <GetLastFcntDown>
 801087a:	4603      	mov	r3, r0
 801087c:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 801087e:	7efb      	ldrb	r3, [r7, #27]
 8010880:	2b00      	cmp	r3, #0
 8010882:	d001      	beq.n	8010888 <LoRaMacCryptoGetFCntDown+0x40>
    {
        return cryptoStatus;
 8010884:	7efb      	ldrb	r3, [r7, #27]
 8010886:	e027      	b.n	80108d8 <LoRaMacCryptoGetFCntDown+0x90>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 8010888:	697b      	ldr	r3, [r7, #20]
 801088a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801088e:	d103      	bne.n	8010898 <LoRaMacCryptoGetFCntDown+0x50>
    {
        *currentDown = frameFcnt;
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	68ba      	ldr	r2, [r7, #8]
 8010894:	601a      	str	r2, [r3, #0]
 8010896:	e01e      	b.n	80108d6 <LoRaMacCryptoGetFCntDown+0x8e>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8010898:	697b      	ldr	r3, [r7, #20]
 801089a:	b29b      	uxth	r3, r3
 801089c:	68ba      	ldr	r2, [r7, #8]
 801089e:	1ad3      	subs	r3, r2, r3
 80108a0:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 80108a2:	69fb      	ldr	r3, [r7, #28]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	dd05      	ble.n	80108b4 <LoRaMacCryptoGetFCntDown+0x6c>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 80108a8:	697a      	ldr	r2, [r7, #20]
 80108aa:	69fb      	ldr	r3, [r7, #28]
 80108ac:	441a      	add	r2, r3
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	601a      	str	r2, [r3, #0]
 80108b2:	e010      	b.n	80108d6 <LoRaMacCryptoGetFCntDown+0x8e>
        }
        else if( fCntDiff == 0 )
 80108b4:	69fb      	ldr	r3, [r7, #28]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d104      	bne.n	80108c4 <LoRaMacCryptoGetFCntDown+0x7c>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 80108ba:	697a      	ldr	r2, [r7, #20]
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 80108c0:	2307      	movs	r3, #7
 80108c2:	e009      	b.n	80108d8 <LoRaMacCryptoGetFCntDown+0x90>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 80108c4:	697b      	ldr	r3, [r7, #20]
 80108c6:	0c1b      	lsrs	r3, r3, #16
 80108c8:	041b      	lsls	r3, r3, #16
 80108ca:	68ba      	ldr	r2, [r7, #8]
 80108cc:	4413      	add	r3, r2
 80108ce:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	601a      	str	r2, [r3, #0]
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80108d6:	2300      	movs	r3, #0
}
 80108d8:	4618      	mov	r0, r3
 80108da:	3720      	adds	r7, #32
 80108dc:	46bd      	mov	sp, r7
 80108de:	bd80      	pop	{r7, pc}

080108e0 <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 80108e0:	b480      	push	{r7}
 80108e2:	b085      	sub	sp, #20
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d101      	bne.n	80108f2 <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80108ee:	2309      	movs	r3, #9
 80108f0:	e019      	b.n	8010926 <LoRaMacCryptoSetMulticastReference+0x46>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80108f2:	2300      	movs	r3, #0
 80108f4:	60fb      	str	r3, [r7, #12]
 80108f6:	e012      	b.n	801091e <LoRaMacCryptoSetMulticastReference+0x3e>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 80108f8:	4b0d      	ldr	r3, [pc, #52]	@ (8010930 <LoRaMacCryptoSetMulticastReference+0x50>)
 80108fa:	6819      	ldr	r1, [r3, #0]
 80108fc:	68fa      	ldr	r2, [r7, #12]
 80108fe:	4613      	mov	r3, r2
 8010900:	005b      	lsls	r3, r3, #1
 8010902:	4413      	add	r3, r2
 8010904:	011b      	lsls	r3, r3, #4
 8010906:	461a      	mov	r2, r3
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	4413      	add	r3, r2
 801090c:	68fa      	ldr	r2, [r7, #12]
 801090e:	3206      	adds	r2, #6
 8010910:	0092      	lsls	r2, r2, #2
 8010912:	440a      	add	r2, r1
 8010914:	3204      	adds	r2, #4
 8010916:	625a      	str	r2, [r3, #36]	@ 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	3301      	adds	r3, #1
 801091c:	60fb      	str	r3, [r7, #12]
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	2b00      	cmp	r3, #0
 8010922:	dde9      	ble.n	80108f8 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8010924:	2300      	movs	r3, #0
}
 8010926:	4618      	mov	r0, r3
 8010928:	3714      	adds	r7, #20
 801092a:	46bd      	mov	sp, r7
 801092c:	bc80      	pop	{r7}
 801092e:	4770      	bx	lr
 8010930:	2000121c 	.word	0x2000121c

08010934 <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 8010934:	b580      	push	{r7, lr}
 8010936:	b082      	sub	sp, #8
 8010938:	af00      	add	r7, sp, #0
 801093a:	4603      	mov	r3, r0
 801093c:	6039      	str	r1, [r7, #0]
 801093e:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8010940:	79fb      	ldrb	r3, [r7, #7]
 8010942:	6839      	ldr	r1, [r7, #0]
 8010944:	4618      	mov	r0, r3
 8010946:	f005 fdc9 	bl	80164dc <SecureElementSetKey>
 801094a:	4603      	mov	r3, r0
 801094c:	2b00      	cmp	r3, #0
 801094e:	d001      	beq.n	8010954 <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010950:	230e      	movs	r3, #14
 8010952:	e021      	b.n	8010998 <LoRaMacCryptoSetKey+0x64>
    }
    if( keyID == APP_KEY )
 8010954:	79fb      	ldrb	r3, [r7, #7]
 8010956:	2b00      	cmp	r3, #0
 8010958:	d11d      	bne.n	8010996 <LoRaMacCryptoSetKey+0x62>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 801095a:	4b11      	ldr	r3, [pc, #68]	@ (80109a0 <LoRaMacCryptoSetKey+0x6c>)
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	789b      	ldrb	r3, [r3, #2]
 8010960:	210b      	movs	r1, #11
 8010962:	4618      	mov	r0, r3
 8010964:	f000 fa54 	bl	8010e10 <LoRaMacCryptoDeriveLifeTimeKey>
 8010968:	4603      	mov	r3, r0
 801096a:	2b00      	cmp	r3, #0
 801096c:	d001      	beq.n	8010972 <LoRaMacCryptoSetKey+0x3e>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801096e:	230e      	movs	r3, #14
 8010970:	e012      	b.n	8010998 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8010972:	210c      	movs	r1, #12
 8010974:	2000      	movs	r0, #0
 8010976:	f000 fa4b 	bl	8010e10 <LoRaMacCryptoDeriveLifeTimeKey>
 801097a:	4603      	mov	r3, r0
 801097c:	2b00      	cmp	r3, #0
 801097e:	d001      	beq.n	8010984 <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010980:	230e      	movs	r3, #14
 8010982:	e009      	b.n	8010998 <LoRaMacCryptoSetKey+0x64>
        }
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8010984:	210a      	movs	r1, #10
 8010986:	2000      	movs	r0, #0
 8010988:	f000 fa42 	bl	8010e10 <LoRaMacCryptoDeriveLifeTimeKey>
 801098c:	4603      	mov	r3, r0
 801098e:	2b00      	cmp	r3, #0
 8010990:	d001      	beq.n	8010996 <LoRaMacCryptoSetKey+0x62>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010992:	230e      	movs	r3, #14
 8010994:	e000      	b.n	8010998 <LoRaMacCryptoSetKey+0x64>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8010996:	2300      	movs	r3, #0
}
 8010998:	4618      	mov	r0, r3
 801099a:	3708      	adds	r7, #8
 801099c:	46bd      	mov	sp, r7
 801099e:	bd80      	pop	{r7, pc}
 80109a0:	2000121c 	.word	0x2000121c

080109a4 <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80109a4:	b580      	push	{r7, lr}
 80109a6:	b086      	sub	sp, #24
 80109a8:	af02      	add	r7, sp, #8
 80109aa:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d101      	bne.n	80109b6 <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80109b2:	2309      	movs	r3, #9
 80109b4:	e02d      	b.n	8010a12 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 80109b6:	2301      	movs	r3, #1
 80109b8:	73fb      	strb	r3, [r7, #15]
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 80109ba:	4b18      	ldr	r3, [pc, #96]	@ (8010a1c <LoRaMacCryptoPrepareJoinRequest+0x78>)
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	889a      	ldrh	r2, [r3, #4]
 80109c0:	3201      	adds	r2, #1
 80109c2:	b292      	uxth	r2, r2
 80109c4:	809a      	strh	r2, [r3, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 80109c6:	4b15      	ldr	r3, [pc, #84]	@ (8010a1c <LoRaMacCryptoPrepareJoinRequest+0x78>)
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	889a      	ldrh	r2, [r3, #4]
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80109d0:	6878      	ldr	r0, [r7, #4]
 80109d2:	f000 fc14 	bl	80111fe <LoRaMacSerializerJoinRequest>
 80109d6:	4603      	mov	r3, r0
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d001      	beq.n	80109e0 <LoRaMacCryptoPrepareJoinRequest+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80109dc:	2310      	movs	r3, #16
 80109de:	e018      	b.n	8010a12 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	6819      	ldr	r1, [r3, #0]
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	3318      	adds	r3, #24
 80109e8:	7bfa      	ldrb	r2, [r7, #15]
 80109ea:	9300      	str	r3, [sp, #0]
 80109ec:	4613      	mov	r3, r2
 80109ee:	2213      	movs	r2, #19
 80109f0:	2000      	movs	r0, #0
 80109f2:	f005 fdd1 	bl	8016598 <SecureElementComputeAesCmac>
 80109f6:	4603      	mov	r3, r0
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d001      	beq.n	8010a00 <LoRaMacCryptoPrepareJoinRequest+0x5c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80109fc:	230e      	movs	r3, #14
 80109fe:	e008      	b.n	8010a12 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8010a00:	6878      	ldr	r0, [r7, #4]
 8010a02:	f000 fbfc 	bl	80111fe <LoRaMacSerializerJoinRequest>
 8010a06:	4603      	mov	r3, r0
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d001      	beq.n	8010a10 <LoRaMacCryptoPrepareJoinRequest+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8010a0c:	2310      	movs	r3, #16
 8010a0e:	e000      	b.n	8010a12 <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8010a10:	2300      	movs	r3, #0
}
 8010a12:	4618      	mov	r0, r3
 8010a14:	3710      	adds	r7, #16
 8010a16:	46bd      	mov	sp, r7
 8010a18:	bd80      	pop	{r7, pc}
 8010a1a:	bf00      	nop
 8010a1c:	2000121c 	.word	0x2000121c

08010a20 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_ERROR;
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8010a20:	b590      	push	{r4, r7, lr}
 8010a22:	b097      	sub	sp, #92	@ 0x5c
 8010a24:	af04      	add	r7, sp, #16
 8010a26:	4603      	mov	r3, r0
 8010a28:	60b9      	str	r1, [r7, #8]
 8010a2a:	607a      	str	r2, [r7, #4]
 8010a2c:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d002      	beq.n	8010a3a <LoRaMacCryptoHandleJoinAccept+0x1a>
 8010a34:	68bb      	ldr	r3, [r7, #8]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d101      	bne.n	8010a3e <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010a3a:	2309      	movs	r3, #9
 8010a3c:	e0d1      	b.n	8010be2 <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8010a3e:	2312      	movs	r3, #18
 8010a40:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8010a44:	f107 0314 	add.w	r3, r7, #20
 8010a48:	2221      	movs	r2, #33	@ 0x21
 8010a4a:	2100      	movs	r1, #0
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	f00e ff49 	bl	801f8e4 <memset>
    uint8_t versionMinor         = 0;
 8010a52:	2300      	movs	r3, #0
 8010a54:	74fb      	strb	r3, [r7, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8010a56:	4b65      	ldr	r3, [pc, #404]	@ (8010bec <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	889b      	ldrh	r3, [r3, #4]
 8010a5c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* LORAMAC_VERSION */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	681c      	ldr	r4, [r3, #0]
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	791b      	ldrb	r3, [r3, #4]
 8010a68:	f8b7 1044 	ldrh.w	r1, [r7, #68]	@ 0x44
 8010a6c:	7bf8      	ldrb	r0, [r7, #15]
 8010a6e:	f107 0213 	add.w	r2, r7, #19
 8010a72:	9202      	str	r2, [sp, #8]
 8010a74:	f107 0214 	add.w	r2, r7, #20
 8010a78:	9201      	str	r2, [sp, #4]
 8010a7a:	9300      	str	r3, [sp, #0]
 8010a7c:	4623      	mov	r3, r4
 8010a7e:	460a      	mov	r2, r1
 8010a80:	68b9      	ldr	r1, [r7, #8]
 8010a82:	f005 fe8e 	bl	80167a2 <SecureElementProcessJoinAccept>
 8010a86:	4603      	mov	r3, r0
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d001      	beq.n	8010a90 <LoRaMacCryptoHandleJoinAccept+0x70>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010a8c:	230e      	movs	r3, #14
 8010a8e:	e0a8      	b.n	8010be2 <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	6818      	ldr	r0, [r3, #0]
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	791b      	ldrb	r3, [r3, #4]
 8010a98:	461a      	mov	r2, r3
 8010a9a:	f107 0314 	add.w	r3, r7, #20
 8010a9e:	4619      	mov	r1, r3
 8010aa0:	f005 ffd7 	bl	8016a52 <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8010aa4:	6878      	ldr	r0, [r7, #4]
 8010aa6:	f000 f9ed 	bl	8010e84 <LoRaMacParserJoinAccept>
 8010aaa:	4603      	mov	r3, r0
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d001      	beq.n	8010ab4 <LoRaMacCryptoHandleJoinAccept+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8010ab0:	230f      	movs	r3, #15
 8010ab2:	e096      	b.n	8010be2 <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    uint32_t currentJoinNonce;
    bool isJoinNonceOk = false;
 8010ab4:	2300      	movs	r3, #0
 8010ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	799b      	ldrb	r3, [r3, #6]
 8010abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	79db      	ldrb	r3, [r3, #7]
 8010ac4:	021b      	lsls	r3, r3, #8
 8010ac6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010ac8:	4313      	orrs	r3, r2
 8010aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	7a1b      	ldrb	r3, [r3, #8]
 8010ad0:	041b      	lsls	r3, r3, #16
 8010ad2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010ad4:	4313      	orrs	r3, r2
 8010ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        isJoinNonceOk = IsJoinNonce11xOk( currentJoinNonce );
    }
    else
#endif /* LORAMAC_VERSION */
    {
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 8010ad8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8010ada:	f7ff fe4d 	bl	8010778 <IsJoinNonce10xOk>
 8010ade:	4603      	mov	r3, r0
 8010ae0:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    }

    if( isJoinNonceOk == true )
 8010ae4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d010      	beq.n	8010b0e <LoRaMacCryptoHandleJoinAccept+0xee>
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8010aec:	4b3f      	ldr	r3, [pc, #252]	@ (8010bec <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010af2:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 8010af4:	7cfb      	ldrb	r3, [r7, #19]
 8010af6:	210b      	movs	r1, #11
 8010af8:	4618      	mov	r0, r3
 8010afa:	f000 f989 	bl	8010e10 <LoRaMacCryptoDeriveLifeTimeKey>
 8010afe:	4603      	mov	r3, r0
 8010b00:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010b04:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d005      	beq.n	8010b18 <LoRaMacCryptoHandleJoinAccept+0xf8>
 8010b0c:	e001      	b.n	8010b12 <LoRaMacCryptoHandleJoinAccept+0xf2>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8010b0e:	2303      	movs	r3, #3
 8010b10:	e067      	b.n	8010be2 <LoRaMacCryptoHandleJoinAccept+0x1c2>
    {
        return retval;
 8010b12:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8010b16:	e064      	b.n	8010be2 <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 8010b18:	210c      	movs	r1, #12
 8010b1a:	2000      	movs	r0, #0
 8010b1c:	f000 f978 	bl	8010e10 <LoRaMacCryptoDeriveLifeTimeKey>
 8010b20:	4603      	mov	r3, r0
 8010b22:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010b26:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d002      	beq.n	8010b34 <LoRaMacCryptoHandleJoinAccept+0x114>
    {
        return retval;
 8010b2e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8010b32:	e056      	b.n	8010be2 <LoRaMacCryptoHandleJoinAccept+0x1c2>
    }

    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 8010b34:	210a      	movs	r1, #10
 8010b36:	2000      	movs	r0, #0
 8010b38:	f000 f96a 	bl	8010e10 <LoRaMacCryptoDeriveLifeTimeKey>
 8010b3c:	4603      	mov	r3, r0
 8010b3e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010b42:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d002      	beq.n	8010b50 <LoRaMacCryptoHandleJoinAccept+0x130>
    {
        return retval;
 8010b4a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8010b4e:	e048      	b.n	8010be2 <LoRaMacCryptoHandleJoinAccept+0x1c2>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	7a5b      	ldrb	r3, [r3, #9]
 8010b54:	63bb      	str	r3, [r7, #56]	@ 0x38
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	7a9b      	ldrb	r3, [r3, #10]
 8010b5a:	021b      	lsls	r3, r3, #8
 8010b5c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010b5e:	4313      	orrs	r3, r2
 8010b60:	63bb      	str	r3, [r7, #56]	@ 0x38
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	7adb      	ldrb	r3, [r3, #11]
 8010b66:	041b      	lsls	r3, r3, #16
 8010b68:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010b6a:	4313      	orrs	r3, r2
 8010b6c:	63bb      	str	r3, [r7, #56]	@ 0x38

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8010b6e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8010b72:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010b74:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010b76:	2009      	movs	r0, #9
 8010b78:	f7ff fcdc 	bl	8010534 <DeriveSessionKey10x>
 8010b7c:	4603      	mov	r3, r0
 8010b7e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010b82:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d002      	beq.n	8010b90 <LoRaMacCryptoHandleJoinAccept+0x170>
        {
            return retval;
 8010b8a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8010b8e:	e028      	b.n	8010be2 <LoRaMacCryptoHandleJoinAccept+0x1c2>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8010b90:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8010b94:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010b96:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010b98:	2008      	movs	r0, #8
 8010b9a:	f7ff fccb 	bl	8010534 <DeriveSessionKey10x>
 8010b9e:	4603      	mov	r3, r0
 8010ba0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#endif /* LORAMAC_VERSION */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010ba4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d002      	beq.n	8010bb2 <LoRaMacCryptoHandleJoinAccept+0x192>
        {
            return retval;
 8010bac:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8010bb0:	e017      	b.n	8010be2 <LoRaMacCryptoHandleJoinAccept+0x1c2>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8010bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8010bec <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	7cfa      	ldrb	r2, [r7, #19]
 8010bb8:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    RJcount0 = 0;
#endif /* LORAMAC_VERSION */
    CryptoNvm->FCntList.FCntUp = 0;
 8010bba:	4b0c      	ldr	r3, [pc, #48]	@ (8010bec <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	2200      	movs	r2, #0
 8010bc0:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 8010bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8010bec <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8010bca:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8010bcc:	4b07      	ldr	r3, [pc, #28]	@ (8010bec <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8010bd4:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8010bd6:	4b05      	ldr	r3, [pc, #20]	@ (8010bec <LoRaMacCryptoHandleJoinAccept+0x1cc>)
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	f04f 32ff 	mov.w	r2, #4294967295
 8010bde:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8010be0:	2300      	movs	r3, #0
}
 8010be2:	4618      	mov	r0, r3
 8010be4:	374c      	adds	r7, #76	@ 0x4c
 8010be6:	46bd      	mov	sp, r7
 8010be8:	bd90      	pop	{r4, r7, pc}
 8010bea:	bf00      	nop
 8010bec:	2000121c 	.word	0x2000121c

08010bf0 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8010bf0:	b590      	push	{r4, r7, lr}
 8010bf2:	b08b      	sub	sp, #44	@ 0x2c
 8010bf4:	af04      	add	r7, sp, #16
 8010bf6:	60f8      	str	r0, [r7, #12]
 8010bf8:	607b      	str	r3, [r7, #4]
 8010bfa:	460b      	mov	r3, r1
 8010bfc:	72fb      	strb	r3, [r7, #11]
 8010bfe:	4613      	mov	r3, r2
 8010c00:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8010c02:	2312      	movs	r3, #18
 8010c04:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8010c06:	2309      	movs	r3, #9
 8010c08:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d101      	bne.n	8010c14 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010c10:	2309      	movs	r3, #9
 8010c12:	e05e      	b.n	8010cd2 <LoRaMacCryptoSecureMessage+0xe2>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8010c14:	4b31      	ldr	r3, [pc, #196]	@ (8010cdc <LoRaMacCryptoSecureMessage+0xec>)
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	68db      	ldr	r3, [r3, #12]
 8010c1a:	68fa      	ldr	r2, [r7, #12]
 8010c1c:	429a      	cmp	r2, r3
 8010c1e:	d201      	bcs.n	8010c24 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8010c20:	2306      	movs	r3, #6
 8010c22:	e056      	b.n	8010cd2 <LoRaMacCryptoSecureMessage+0xe2>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d101      	bne.n	8010c32 <LoRaMacCryptoSecureMessage+0x42>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8010c2e:	2308      	movs	r3, #8
 8010c30:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8010c32:	4b2a      	ldr	r3, [pc, #168]	@ (8010cdc <LoRaMacCryptoSecureMessage+0xec>)
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	68db      	ldr	r3, [r3, #12]
 8010c38:	68fa      	ldr	r2, [r7, #12]
 8010c3a:	429a      	cmp	r2, r3
 8010c3c:	d916      	bls.n	8010c6c <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010c48:	b219      	sxth	r1, r3
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	689c      	ldr	r4, [r3, #8]
 8010c4e:	7dfa      	ldrb	r2, [r7, #23]
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	9301      	str	r3, [sp, #4]
 8010c54:	2300      	movs	r3, #0
 8010c56:	9300      	str	r3, [sp, #0]
 8010c58:	4623      	mov	r3, r4
 8010c5a:	f7ff fa79 	bl	8010150 <PayloadEncrypt>
 8010c5e:	4603      	mov	r3, r0
 8010c60:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010c62:	7dbb      	ldrb	r3, [r7, #22]
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d001      	beq.n	8010c6c <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8010c68:	7dbb      	ldrb	r3, [r7, #22]
 8010c6a:	e032      	b.n	8010cd2 <LoRaMacCryptoSecureMessage+0xe2>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8010c6c:	6878      	ldr	r0, [r7, #4]
 8010c6e:	f000 fb48 	bl	8011302 <LoRaMacSerializerData>
 8010c72:	4603      	mov	r3, r0
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d001      	beq.n	8010c7c <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8010c78:	2310      	movs	r3, #16
 8010c7a:	e02a      	b.n	8010cd2 <LoRaMacCryptoSecureMessage+0xe2>
    {
        // Use network session key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8010c7c:	2308      	movs	r3, #8
 8010c7e:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	6818      	ldr	r0, [r3, #0]
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	791b      	ldrb	r3, [r3, #4]
 8010c88:	3b04      	subs	r3, #4
 8010c8a:	b299      	uxth	r1, r3
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	689b      	ldr	r3, [r3, #8]
 8010c90:	687a      	ldr	r2, [r7, #4]
 8010c92:	322c      	adds	r2, #44	@ 0x2c
 8010c94:	7dfc      	ldrb	r4, [r7, #23]
 8010c96:	9203      	str	r2, [sp, #12]
 8010c98:	68fa      	ldr	r2, [r7, #12]
 8010c9a:	9202      	str	r2, [sp, #8]
 8010c9c:	9301      	str	r3, [sp, #4]
 8010c9e:	2300      	movs	r3, #0
 8010ca0:	9300      	str	r3, [sp, #0]
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	4622      	mov	r2, r4
 8010ca6:	f7ff fb52 	bl	801034e <ComputeCmacB0>
 8010caa:	4603      	mov	r3, r0
 8010cac:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010cae:	7dbb      	ldrb	r3, [r7, #22]
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d001      	beq.n	8010cb8 <LoRaMacCryptoSecureMessage+0xc8>
        {
            return retval;
 8010cb4:	7dbb      	ldrb	r3, [r7, #22]
 8010cb6:	e00c      	b.n	8010cd2 <LoRaMacCryptoSecureMessage+0xe2>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8010cb8:	6878      	ldr	r0, [r7, #4]
 8010cba:	f000 fb22 	bl	8011302 <LoRaMacSerializerData>
 8010cbe:	4603      	mov	r3, r0
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d001      	beq.n	8010cc8 <LoRaMacCryptoSecureMessage+0xd8>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8010cc4:	2310      	movs	r3, #16
 8010cc6:	e004      	b.n	8010cd2 <LoRaMacCryptoSecureMessage+0xe2>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8010cc8:	4b04      	ldr	r3, [pc, #16]	@ (8010cdc <LoRaMacCryptoSecureMessage+0xec>)
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	68fa      	ldr	r2, [r7, #12]
 8010cce:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8010cd0:	2300      	movs	r3, #0
}
 8010cd2:	4618      	mov	r0, r3
 8010cd4:	371c      	adds	r7, #28
 8010cd6:	46bd      	mov	sp, r7
 8010cd8:	bd90      	pop	{r4, r7, pc}
 8010cda:	bf00      	nop
 8010cdc:	2000121c 	.word	0x2000121c

08010ce0 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8010ce0:	b590      	push	{r4, r7, lr}
 8010ce2:	b08b      	sub	sp, #44	@ 0x2c
 8010ce4:	af04      	add	r7, sp, #16
 8010ce6:	60b9      	str	r1, [r7, #8]
 8010ce8:	607b      	str	r3, [r7, #4]
 8010cea:	4603      	mov	r3, r0
 8010cec:	73fb      	strb	r3, [r7, #15]
 8010cee:	4613      	mov	r3, r2
 8010cf0:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8010cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d101      	bne.n	8010cfc <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8010cf8:	2309      	movs	r3, #9
 8010cfa:	e083      	b.n	8010e04 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8010cfc:	7bbb      	ldrb	r3, [r7, #14]
 8010cfe:	6879      	ldr	r1, [r7, #4]
 8010d00:	4618      	mov	r0, r3
 8010d02:	f7ff fca1 	bl	8010648 <CheckFCntDown>
 8010d06:	4603      	mov	r3, r0
 8010d08:	f083 0301 	eor.w	r3, r3, #1
 8010d0c:	b2db      	uxtb	r3, r3
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d001      	beq.n	8010d16 <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8010d12:	2306      	movs	r3, #6
 8010d14:	e076      	b.n	8010e04 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8010d16:	2312      	movs	r3, #18
 8010d18:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8010d1a:	2309      	movs	r3, #9
 8010d1c:	75fb      	strb	r3, [r7, #23]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8010d1e:	2308      	movs	r3, #8
 8010d20:	753b      	strb	r3, [r7, #20]
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8010d22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010d24:	f000 f979 	bl	801101a <LoRaMacParserData>
 8010d28:	4603      	mov	r3, r0
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d001      	beq.n	8010d32 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8010d2e:	230f      	movs	r3, #15
 8010d30:	e068      	b.n	8010e04 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8010d32:	f107 0210 	add.w	r2, r7, #16
 8010d36:	7bfb      	ldrb	r3, [r7, #15]
 8010d38:	4611      	mov	r1, r2
 8010d3a:	4618      	mov	r0, r3
 8010d3c:	f7ff fbd4 	bl	80104e8 <GetKeyAddrItem>
 8010d40:	4603      	mov	r3, r0
 8010d42:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010d44:	7d7b      	ldrb	r3, [r7, #21]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d001      	beq.n	8010d4e <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 8010d4a:	7d7b      	ldrb	r3, [r7, #21]
 8010d4c:	e05a      	b.n	8010e04 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8010d4e:	693b      	ldr	r3, [r7, #16]
 8010d50:	785b      	ldrb	r3, [r3, #1]
 8010d52:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8010d54:	693b      	ldr	r3, [r7, #16]
 8010d56:	789b      	ldrb	r3, [r3, #2]
 8010d58:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8010d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d5c:	689b      	ldr	r3, [r3, #8]
 8010d5e:	68ba      	ldr	r2, [r7, #8]
 8010d60:	429a      	cmp	r2, r3
 8010d62:	d001      	beq.n	8010d68 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8010d64:	2302      	movs	r3, #2
 8010d66:	e04d      	b.n	8010e04 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8010d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d6a:	7b1b      	ldrb	r3, [r3, #12]
 8010d6c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8010d70:	b2db      	uxtb	r3, r3
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	bf14      	ite	ne
 8010d76:	2301      	movne	r3, #1
 8010d78:	2300      	moveq	r3, #0
 8010d7a:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8010d7c:	4b23      	ldr	r3, [pc, #140]	@ (8010e0c <LoRaMacCryptoUnsecureMessage+0x12c>)
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	789b      	ldrb	r3, [r3, #2]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d101      	bne.n	8010d8a <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8010d86:	2300      	movs	r3, #0
 8010d88:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8010d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d8c:	6818      	ldr	r0, [r3, #0]
 8010d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d90:	791b      	ldrb	r3, [r3, #4]
 8010d92:	3b04      	subs	r3, #4
 8010d94:	b299      	uxth	r1, r3
 8010d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d9a:	7dbc      	ldrb	r4, [r7, #22]
 8010d9c:	7d3a      	ldrb	r2, [r7, #20]
 8010d9e:	9303      	str	r3, [sp, #12]
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	9302      	str	r3, [sp, #8]
 8010da4:	68bb      	ldr	r3, [r7, #8]
 8010da6:	9301      	str	r3, [sp, #4]
 8010da8:	2301      	movs	r3, #1
 8010daa:	9300      	str	r3, [sp, #0]
 8010dac:	4623      	mov	r3, r4
 8010dae:	f7ff fb0c 	bl	80103ca <VerifyCmacB0>
 8010db2:	4603      	mov	r3, r0
 8010db4:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010db6:	7d7b      	ldrb	r3, [r7, #21]
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d001      	beq.n	8010dc0 <LoRaMacCryptoUnsecureMessage+0xe0>
    {
        return retval;
 8010dbc:	7d7b      	ldrb	r3, [r7, #21]
 8010dbe:	e021      	b.n	8010e04 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8010dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010dc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d101      	bne.n	8010dce <LoRaMacCryptoUnsecureMessage+0xee>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8010dca:	2308      	movs	r3, #8
 8010dcc:	75fb      	strb	r3, [r7, #23]
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8010dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010dd0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8010dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010dd4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010dd8:	b219      	sxth	r1, r3
 8010dda:	7dfa      	ldrb	r2, [r7, #23]
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	9301      	str	r3, [sp, #4]
 8010de0:	2301      	movs	r3, #1
 8010de2:	9300      	str	r3, [sp, #0]
 8010de4:	68bb      	ldr	r3, [r7, #8]
 8010de6:	f7ff f9b3 	bl	8010150 <PayloadEncrypt>
 8010dea:	4603      	mov	r3, r0
 8010dec:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8010dee:	7d7b      	ldrb	r3, [r7, #21]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d001      	beq.n	8010df8 <LoRaMacCryptoUnsecureMessage+0x118>
    {
        return retval;
 8010df4:	7d7b      	ldrb	r3, [r7, #21]
 8010df6:	e005      	b.n	8010e04 <LoRaMacCryptoUnsecureMessage+0x124>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 8010df8:	7bbb      	ldrb	r3, [r7, #14]
 8010dfa:	6879      	ldr	r1, [r7, #4]
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	f7ff fc47 	bl	8010690 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8010e02:	2300      	movs	r3, #0
}
 8010e04:	4618      	mov	r0, r3
 8010e06:	371c      	adds	r7, #28
 8010e08:	46bd      	mov	sp, r7
 8010e0a:	bd90      	pop	{r4, r7, pc}
 8010e0c:	2000121c 	.word	0x2000121c

08010e10 <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8010e10:	b580      	push	{r7, lr}
 8010e12:	b088      	sub	sp, #32
 8010e14:	af00      	add	r7, sp, #0
 8010e16:	4603      	mov	r3, r0
 8010e18:	460a      	mov	r2, r1
 8010e1a:	71fb      	strb	r3, [r7, #7]
 8010e1c:	4613      	mov	r3, r2
 8010e1e:	71bb      	strb	r3, [r7, #6]
    uint8_t compBase[16] = { 0 };
 8010e20:	f107 030c 	add.w	r3, r7, #12
 8010e24:	2200      	movs	r2, #0
 8010e26:	601a      	str	r2, [r3, #0]
 8010e28:	605a      	str	r2, [r3, #4]
 8010e2a:	609a      	str	r2, [r3, #8]
 8010e2c:	60da      	str	r2, [r3, #12]
    KeyIdentifier_t rootKeyId = APP_KEY;
 8010e2e:	2300      	movs	r3, #0
 8010e30:	77fb      	strb	r3, [r7, #31]
    switch( keyID )
 8010e32:	79bb      	ldrb	r3, [r7, #6]
 8010e34:	2b0c      	cmp	r3, #12
 8010e36:	d00b      	beq.n	8010e50 <LoRaMacCryptoDeriveLifeTimeKey+0x40>
 8010e38:	2b0c      	cmp	r3, #12
 8010e3a:	dc0f      	bgt.n	8010e5c <LoRaMacCryptoDeriveLifeTimeKey+0x4c>
 8010e3c:	2b0a      	cmp	r3, #10
 8010e3e:	d00a      	beq.n	8010e56 <LoRaMacCryptoDeriveLifeTimeKey+0x46>
 8010e40:	2b0b      	cmp	r3, #11
 8010e42:	d10b      	bne.n	8010e5c <LoRaMacCryptoDeriveLifeTimeKey+0x4c>
    {
        case MC_ROOT_KEY:
            if( versionMinor == 1 )
 8010e44:	79fb      	ldrb	r3, [r7, #7]
 8010e46:	2b01      	cmp	r3, #1
 8010e48:	d10a      	bne.n	8010e60 <LoRaMacCryptoDeriveLifeTimeKey+0x50>
            {
                compBase[0] = 0x20;
 8010e4a:	2320      	movs	r3, #32
 8010e4c:	733b      	strb	r3, [r7, #12]
            }
            break;
 8010e4e:	e007      	b.n	8010e60 <LoRaMacCryptoDeriveLifeTimeKey+0x50>
        case MC_KE_KEY:
            rootKeyId = MC_ROOT_KEY;
 8010e50:	230b      	movs	r3, #11
 8010e52:	77fb      	strb	r3, [r7, #31]
            break;
 8010e54:	e005      	b.n	8010e62 <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        case DATABLOCK_INT_KEY:
            compBase[0] = 0x30;
 8010e56:	2330      	movs	r3, #48	@ 0x30
 8010e58:	733b      	strb	r3, [r7, #12]
            break;
 8010e5a:	e002      	b.n	8010e62 <LoRaMacCryptoDeriveLifeTimeKey+0x52>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8010e5c:	230a      	movs	r3, #10
 8010e5e:	e00d      	b.n	8010e7c <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
            break;
 8010e60:	bf00      	nop
    }

    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 8010e62:	79ba      	ldrb	r2, [r7, #6]
 8010e64:	7ff9      	ldrb	r1, [r7, #31]
 8010e66:	f107 030c 	add.w	r3, r7, #12
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	f005 fc5a 	bl	8016724 <SecureElementDeriveAndStoreKey>
 8010e70:	4603      	mov	r3, r0
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d001      	beq.n	8010e7a <LoRaMacCryptoDeriveLifeTimeKey+0x6a>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8010e76:	230e      	movs	r3, #14
 8010e78:	e000      	b.n	8010e7c <LoRaMacCryptoDeriveLifeTimeKey+0x6c>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8010e7a:	2300      	movs	r3, #0
}
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	3720      	adds	r7, #32
 8010e80:	46bd      	mov	sp, r7
 8010e82:	bd80      	pop	{r7, pc}

08010e84 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8010e84:	b580      	push	{r7, lr}
 8010e86:	b084      	sub	sp, #16
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d003      	beq.n	8010e9a <LoRaMacParserJoinAccept+0x16>
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d101      	bne.n	8010e9e <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8010e9a:	2302      	movs	r3, #2
 8010e9c:	e0b9      	b.n	8011012 <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8010e9e:	2300      	movs	r3, #0
 8010ea0:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	681a      	ldr	r2, [r3, #0]
 8010ea6:	89fb      	ldrh	r3, [r7, #14]
 8010ea8:	1c59      	adds	r1, r3, #1
 8010eaa:	81f9      	strh	r1, [r7, #14]
 8010eac:	4413      	add	r3, r2
 8010eae:	781a      	ldrb	r2, [r3, #0]
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	1d98      	adds	r0, r3, #6
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	681a      	ldr	r2, [r3, #0]
 8010ebc:	89fb      	ldrh	r3, [r7, #14]
 8010ebe:	4413      	add	r3, r2
 8010ec0:	2203      	movs	r2, #3
 8010ec2:	4619      	mov	r1, r3
 8010ec4:	f005 fdc5 	bl	8016a52 <memcpy1>
    bufItr = bufItr + 3;
 8010ec8:	89fb      	ldrh	r3, [r7, #14]
 8010eca:	3303      	adds	r3, #3
 8010ecc:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	f103 0009 	add.w	r0, r3, #9
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	681a      	ldr	r2, [r3, #0]
 8010ed8:	89fb      	ldrh	r3, [r7, #14]
 8010eda:	4413      	add	r3, r2
 8010edc:	2203      	movs	r2, #3
 8010ede:	4619      	mov	r1, r3
 8010ee0:	f005 fdb7 	bl	8016a52 <memcpy1>
    bufItr = bufItr + 3;
 8010ee4:	89fb      	ldrh	r3, [r7, #14]
 8010ee6:	3303      	adds	r3, #3
 8010ee8:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	681a      	ldr	r2, [r3, #0]
 8010eee:	89fb      	ldrh	r3, [r7, #14]
 8010ef0:	1c59      	adds	r1, r3, #1
 8010ef2:	81f9      	strh	r1, [r7, #14]
 8010ef4:	4413      	add	r3, r2
 8010ef6:	781b      	ldrb	r3, [r3, #0]
 8010ef8:	461a      	mov	r2, r3
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	681a      	ldr	r2, [r3, #0]
 8010f02:	89fb      	ldrh	r3, [r7, #14]
 8010f04:	1c59      	adds	r1, r3, #1
 8010f06:	81f9      	strh	r1, [r7, #14]
 8010f08:	4413      	add	r3, r2
 8010f0a:	781b      	ldrb	r3, [r3, #0]
 8010f0c:	021a      	lsls	r2, r3, #8
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	68db      	ldr	r3, [r3, #12]
 8010f12:	431a      	orrs	r2, r3
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	681a      	ldr	r2, [r3, #0]
 8010f1c:	89fb      	ldrh	r3, [r7, #14]
 8010f1e:	1c59      	adds	r1, r3, #1
 8010f20:	81f9      	strh	r1, [r7, #14]
 8010f22:	4413      	add	r3, r2
 8010f24:	781b      	ldrb	r3, [r3, #0]
 8010f26:	041a      	lsls	r2, r3, #16
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	68db      	ldr	r3, [r3, #12]
 8010f2c:	431a      	orrs	r2, r3
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	681a      	ldr	r2, [r3, #0]
 8010f36:	89fb      	ldrh	r3, [r7, #14]
 8010f38:	1c59      	adds	r1, r3, #1
 8010f3a:	81f9      	strh	r1, [r7, #14]
 8010f3c:	4413      	add	r3, r2
 8010f3e:	781b      	ldrb	r3, [r3, #0]
 8010f40:	061a      	lsls	r2, r3, #24
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	68db      	ldr	r3, [r3, #12]
 8010f46:	431a      	orrs	r2, r3
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	681a      	ldr	r2, [r3, #0]
 8010f50:	89fb      	ldrh	r3, [r7, #14]
 8010f52:	1c59      	adds	r1, r3, #1
 8010f54:	81f9      	strh	r1, [r7, #14]
 8010f56:	4413      	add	r3, r2
 8010f58:	781a      	ldrb	r2, [r3, #0]
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	681a      	ldr	r2, [r3, #0]
 8010f62:	89fb      	ldrh	r3, [r7, #14]
 8010f64:	1c59      	adds	r1, r3, #1
 8010f66:	81f9      	strh	r1, [r7, #14]
 8010f68:	4413      	add	r3, r2
 8010f6a:	781a      	ldrb	r2, [r3, #0]
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	791b      	ldrb	r3, [r3, #4]
 8010f74:	1f1a      	subs	r2, r3, #4
 8010f76:	89fb      	ldrh	r3, [r7, #14]
 8010f78:	1ad3      	subs	r3, r2, r3
 8010f7a:	2b10      	cmp	r3, #16
 8010f7c:	d10e      	bne.n	8010f9c <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	f103 0012 	add.w	r0, r3, #18
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	681a      	ldr	r2, [r3, #0]
 8010f88:	89fb      	ldrh	r3, [r7, #14]
 8010f8a:	4413      	add	r3, r2
 8010f8c:	2210      	movs	r2, #16
 8010f8e:	4619      	mov	r1, r3
 8010f90:	f005 fd5f 	bl	8016a52 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8010f94:	89fb      	ldrh	r3, [r7, #14]
 8010f96:	3310      	adds	r3, #16
 8010f98:	81fb      	strh	r3, [r7, #14]
 8010f9a:	e008      	b.n	8010fae <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	791b      	ldrb	r3, [r3, #4]
 8010fa0:	1f1a      	subs	r2, r3, #4
 8010fa2:	89fb      	ldrh	r3, [r7, #14]
 8010fa4:	1ad3      	subs	r3, r2, r3
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	dd01      	ble.n	8010fae <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8010faa:	2301      	movs	r3, #1
 8010fac:	e031      	b.n	8011012 <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	681a      	ldr	r2, [r3, #0]
 8010fb2:	89fb      	ldrh	r3, [r7, #14]
 8010fb4:	1c59      	adds	r1, r3, #1
 8010fb6:	81f9      	strh	r1, [r7, #14]
 8010fb8:	4413      	add	r3, r2
 8010fba:	781b      	ldrb	r3, [r3, #0]
 8010fbc:	461a      	mov	r2, r3
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	681a      	ldr	r2, [r3, #0]
 8010fc6:	89fb      	ldrh	r3, [r7, #14]
 8010fc8:	1c59      	adds	r1, r3, #1
 8010fca:	81f9      	strh	r1, [r7, #14]
 8010fcc:	4413      	add	r3, r2
 8010fce:	781b      	ldrb	r3, [r3, #0]
 8010fd0:	021a      	lsls	r2, r3, #8
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010fd6:	431a      	orrs	r2, r3
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	681a      	ldr	r2, [r3, #0]
 8010fe0:	89fb      	ldrh	r3, [r7, #14]
 8010fe2:	1c59      	adds	r1, r3, #1
 8010fe4:	81f9      	strh	r1, [r7, #14]
 8010fe6:	4413      	add	r3, r2
 8010fe8:	781b      	ldrb	r3, [r3, #0]
 8010fea:	041a      	lsls	r2, r3, #16
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ff0:	431a      	orrs	r2, r3
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	681a      	ldr	r2, [r3, #0]
 8010ffa:	89fb      	ldrh	r3, [r7, #14]
 8010ffc:	1c59      	adds	r1, r3, #1
 8010ffe:	81f9      	strh	r1, [r7, #14]
 8011000:	4413      	add	r3, r2
 8011002:	781b      	ldrb	r3, [r3, #0]
 8011004:	061a      	lsls	r2, r3, #24
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801100a:	431a      	orrs	r2, r3
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	625a      	str	r2, [r3, #36]	@ 0x24

    return LORAMAC_PARSER_SUCCESS;
 8011010:	2300      	movs	r3, #0
}
 8011012:	4618      	mov	r0, r3
 8011014:	3710      	adds	r7, #16
 8011016:	46bd      	mov	sp, r7
 8011018:	bd80      	pop	{r7, pc}

0801101a <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 801101a:	b580      	push	{r7, lr}
 801101c:	b084      	sub	sp, #16
 801101e:	af00      	add	r7, sp, #0
 8011020:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	2b00      	cmp	r3, #0
 8011026:	d003      	beq.n	8011030 <LoRaMacParserData+0x16>
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	2b00      	cmp	r3, #0
 801102e:	d101      	bne.n	8011034 <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8011030:	2302      	movs	r3, #2
 8011032:	e0e0      	b.n	80111f6 <LoRaMacParserData+0x1dc>
    }

    uint16_t bufItr = 0;
 8011034:	2300      	movs	r3, #0
 8011036:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	681a      	ldr	r2, [r3, #0]
 801103c:	89fb      	ldrh	r3, [r7, #14]
 801103e:	1c59      	adds	r1, r3, #1
 8011040:	81f9      	strh	r1, [r7, #14]
 8011042:	4413      	add	r3, r2
 8011044:	781a      	ldrb	r2, [r3, #0]
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	681a      	ldr	r2, [r3, #0]
 801104e:	89fb      	ldrh	r3, [r7, #14]
 8011050:	1c59      	adds	r1, r3, #1
 8011052:	81f9      	strh	r1, [r7, #14]
 8011054:	4413      	add	r3, r2
 8011056:	781b      	ldrb	r3, [r3, #0]
 8011058:	461a      	mov	r2, r3
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	681a      	ldr	r2, [r3, #0]
 8011062:	89fb      	ldrh	r3, [r7, #14]
 8011064:	1c59      	adds	r1, r3, #1
 8011066:	81f9      	strh	r1, [r7, #14]
 8011068:	4413      	add	r3, r2
 801106a:	781b      	ldrb	r3, [r3, #0]
 801106c:	021a      	lsls	r2, r3, #8
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	689b      	ldr	r3, [r3, #8]
 8011072:	431a      	orrs	r2, r3
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	681a      	ldr	r2, [r3, #0]
 801107c:	89fb      	ldrh	r3, [r7, #14]
 801107e:	1c59      	adds	r1, r3, #1
 8011080:	81f9      	strh	r1, [r7, #14]
 8011082:	4413      	add	r3, r2
 8011084:	781b      	ldrb	r3, [r3, #0]
 8011086:	041a      	lsls	r2, r3, #16
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	689b      	ldr	r3, [r3, #8]
 801108c:	431a      	orrs	r2, r3
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	681a      	ldr	r2, [r3, #0]
 8011096:	89fb      	ldrh	r3, [r7, #14]
 8011098:	1c59      	adds	r1, r3, #1
 801109a:	81f9      	strh	r1, [r7, #14]
 801109c:	4413      	add	r3, r2
 801109e:	781b      	ldrb	r3, [r3, #0]
 80110a0:	061a      	lsls	r2, r3, #24
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	689b      	ldr	r3, [r3, #8]
 80110a6:	431a      	orrs	r2, r3
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	681a      	ldr	r2, [r3, #0]
 80110b0:	89fb      	ldrh	r3, [r7, #14]
 80110b2:	1c59      	adds	r1, r3, #1
 80110b4:	81f9      	strh	r1, [r7, #14]
 80110b6:	4413      	add	r3, r2
 80110b8:	781a      	ldrb	r2, [r3, #0]
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	681a      	ldr	r2, [r3, #0]
 80110c2:	89fb      	ldrh	r3, [r7, #14]
 80110c4:	1c59      	adds	r1, r3, #1
 80110c6:	81f9      	strh	r1, [r7, #14]
 80110c8:	4413      	add	r3, r2
 80110ca:	781b      	ldrb	r3, [r3, #0]
 80110cc:	461a      	mov	r2, r3
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	681a      	ldr	r2, [r3, #0]
 80110d6:	89fb      	ldrh	r3, [r7, #14]
 80110d8:	1c59      	adds	r1, r3, #1
 80110da:	81f9      	strh	r1, [r7, #14]
 80110dc:	4413      	add	r3, r2
 80110de:	781b      	ldrb	r3, [r3, #0]
 80110e0:	0219      	lsls	r1, r3, #8
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	89db      	ldrh	r3, [r3, #14]
 80110e6:	b21a      	sxth	r2, r3
 80110e8:	b20b      	sxth	r3, r1
 80110ea:	4313      	orrs	r3, r2
 80110ec:	b21b      	sxth	r3, r3
 80110ee:	b29a      	uxth	r2, r3
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	81da      	strh	r2, [r3, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	f103 0010 	add.w	r0, r3, #16
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	681a      	ldr	r2, [r3, #0]
 80110fe:	89fb      	ldrh	r3, [r7, #14]
 8011100:	18d1      	adds	r1, r2, r3
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	7b1b      	ldrb	r3, [r3, #12]
 8011106:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801110a:	b2db      	uxtb	r3, r3
 801110c:	461a      	mov	r2, r3
 801110e:	f005 fca0 	bl	8016a52 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	7b1b      	ldrb	r3, [r3, #12]
 8011116:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801111a:	b2db      	uxtb	r3, r3
 801111c:	461a      	mov	r2, r3
 801111e:	89fb      	ldrh	r3, [r7, #14]
 8011120:	4413      	add	r3, r2
 8011122:	81fb      	strh	r3, [r7, #14]

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	2200      	movs	r2, #0
 8011128:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	2200      	movs	r2, #0
 8011130:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	791b      	ldrb	r3, [r3, #4]
 8011138:	461a      	mov	r2, r3
 801113a:	89fb      	ldrh	r3, [r7, #14]
 801113c:	1ad3      	subs	r3, r2, r3
 801113e:	2b04      	cmp	r3, #4
 8011140:	dd27      	ble.n	8011192 <LoRaMacParserData+0x178>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	681a      	ldr	r2, [r3, #0]
 8011146:	89fb      	ldrh	r3, [r7, #14]
 8011148:	1c59      	adds	r1, r3, #1
 801114a:	81f9      	strh	r1, [r7, #14]
 801114c:	4413      	add	r3, r2
 801114e:	781a      	ldrb	r2, [r3, #0]
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	791a      	ldrb	r2, [r3, #4]
 801115a:	89fb      	ldrh	r3, [r7, #14]
 801115c:	b2db      	uxtb	r3, r3
 801115e:	1ad3      	subs	r3, r2, r3
 8011160:	b2db      	uxtb	r3, r3
 8011162:	3b04      	subs	r3, #4
 8011164:	b2da      	uxtb	r2, r3
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	681a      	ldr	r2, [r3, #0]
 8011174:	89fb      	ldrh	r3, [r7, #14]
 8011176:	18d1      	adds	r1, r2, r3
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801117e:	461a      	mov	r2, r3
 8011180:	f005 fc67 	bl	8016a52 <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801118a:	461a      	mov	r2, r3
 801118c:	89fb      	ldrh	r3, [r7, #14]
 801118e:	4413      	add	r3, r2
 8011190:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	681a      	ldr	r2, [r3, #0]
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	791b      	ldrb	r3, [r3, #4]
 801119a:	3b04      	subs	r3, #4
 801119c:	4413      	add	r3, r2
 801119e:	781b      	ldrb	r3, [r3, #0]
 80111a0:	461a      	mov	r2, r3
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	6819      	ldr	r1, [r3, #0]
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	791b      	ldrb	r3, [r3, #4]
 80111b2:	3b03      	subs	r3, #3
 80111b4:	440b      	add	r3, r1
 80111b6:	781b      	ldrb	r3, [r3, #0]
 80111b8:	021b      	lsls	r3, r3, #8
 80111ba:	431a      	orrs	r2, r3
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	6819      	ldr	r1, [r3, #0]
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	791b      	ldrb	r3, [r3, #4]
 80111cc:	3b02      	subs	r3, #2
 80111ce:	440b      	add	r3, r1
 80111d0:	781b      	ldrb	r3, [r3, #0]
 80111d2:	041b      	lsls	r3, r3, #16
 80111d4:	431a      	orrs	r2, r3
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	6819      	ldr	r1, [r3, #0]
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	791b      	ldrb	r3, [r3, #4]
 80111e6:	3b01      	subs	r3, #1
 80111e8:	440b      	add	r3, r1
 80111ea:	781b      	ldrb	r3, [r3, #0]
 80111ec:	061b      	lsls	r3, r3, #24
 80111ee:	431a      	orrs	r2, r3
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	62da      	str	r2, [r3, #44]	@ 0x2c

    return LORAMAC_PARSER_SUCCESS;
 80111f4:	2300      	movs	r3, #0
}
 80111f6:	4618      	mov	r0, r3
 80111f8:	3710      	adds	r7, #16
 80111fa:	46bd      	mov	sp, r7
 80111fc:	bd80      	pop	{r7, pc}

080111fe <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80111fe:	b580      	push	{r7, lr}
 8011200:	b084      	sub	sp, #16
 8011202:	af00      	add	r7, sp, #0
 8011204:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	2b00      	cmp	r3, #0
 801120a:	d003      	beq.n	8011214 <LoRaMacSerializerJoinRequest+0x16>
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	2b00      	cmp	r3, #0
 8011212:	d101      	bne.n	8011218 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8011214:	2301      	movs	r3, #1
 8011216:	e070      	b.n	80112fa <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8011218:	2300      	movs	r3, #0
 801121a:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	791b      	ldrb	r3, [r3, #4]
 8011220:	2b16      	cmp	r3, #22
 8011222:	d801      	bhi.n	8011228 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8011224:	2302      	movs	r3, #2
 8011226:	e068      	b.n	80112fa <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	681a      	ldr	r2, [r3, #0]
 801122c:	89fb      	ldrh	r3, [r7, #14]
 801122e:	1c59      	adds	r1, r3, #1
 8011230:	81f9      	strh	r1, [r7, #14]
 8011232:	4413      	add	r3, r2
 8011234:	687a      	ldr	r2, [r7, #4]
 8011236:	7952      	ldrb	r2, [r2, #5]
 8011238:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	681a      	ldr	r2, [r3, #0]
 801123e:	89fb      	ldrh	r3, [r7, #14]
 8011240:	18d0      	adds	r0, r2, r3
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	3306      	adds	r3, #6
 8011246:	2208      	movs	r2, #8
 8011248:	4619      	mov	r1, r3
 801124a:	f005 fc1d 	bl	8016a88 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 801124e:	89fb      	ldrh	r3, [r7, #14]
 8011250:	3308      	adds	r3, #8
 8011252:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	681a      	ldr	r2, [r3, #0]
 8011258:	89fb      	ldrh	r3, [r7, #14]
 801125a:	18d0      	adds	r0, r2, r3
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	330e      	adds	r3, #14
 8011260:	2208      	movs	r2, #8
 8011262:	4619      	mov	r1, r3
 8011264:	f005 fc10 	bl	8016a88 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8011268:	89fb      	ldrh	r3, [r7, #14]
 801126a:	3308      	adds	r3, #8
 801126c:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	8ad9      	ldrh	r1, [r3, #22]
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	681a      	ldr	r2, [r3, #0]
 8011276:	89fb      	ldrh	r3, [r7, #14]
 8011278:	1c58      	adds	r0, r3, #1
 801127a:	81f8      	strh	r0, [r7, #14]
 801127c:	4413      	add	r3, r2
 801127e:	b2ca      	uxtb	r2, r1
 8011280:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	8adb      	ldrh	r3, [r3, #22]
 8011286:	0a1b      	lsrs	r3, r3, #8
 8011288:	b299      	uxth	r1, r3
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	681a      	ldr	r2, [r3, #0]
 801128e:	89fb      	ldrh	r3, [r7, #14]
 8011290:	1c58      	adds	r0, r3, #1
 8011292:	81f8      	strh	r0, [r7, #14]
 8011294:	4413      	add	r3, r2
 8011296:	b2ca      	uxtb	r2, r1
 8011298:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	6999      	ldr	r1, [r3, #24]
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	681a      	ldr	r2, [r3, #0]
 80112a2:	89fb      	ldrh	r3, [r7, #14]
 80112a4:	1c58      	adds	r0, r3, #1
 80112a6:	81f8      	strh	r0, [r7, #14]
 80112a8:	4413      	add	r3, r2
 80112aa:	b2ca      	uxtb	r2, r1
 80112ac:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	699b      	ldr	r3, [r3, #24]
 80112b2:	0a19      	lsrs	r1, r3, #8
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	681a      	ldr	r2, [r3, #0]
 80112b8:	89fb      	ldrh	r3, [r7, #14]
 80112ba:	1c58      	adds	r0, r3, #1
 80112bc:	81f8      	strh	r0, [r7, #14]
 80112be:	4413      	add	r3, r2
 80112c0:	b2ca      	uxtb	r2, r1
 80112c2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	699b      	ldr	r3, [r3, #24]
 80112c8:	0c19      	lsrs	r1, r3, #16
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	681a      	ldr	r2, [r3, #0]
 80112ce:	89fb      	ldrh	r3, [r7, #14]
 80112d0:	1c58      	adds	r0, r3, #1
 80112d2:	81f8      	strh	r0, [r7, #14]
 80112d4:	4413      	add	r3, r2
 80112d6:	b2ca      	uxtb	r2, r1
 80112d8:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	699b      	ldr	r3, [r3, #24]
 80112de:	0e19      	lsrs	r1, r3, #24
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	681a      	ldr	r2, [r3, #0]
 80112e4:	89fb      	ldrh	r3, [r7, #14]
 80112e6:	1c58      	adds	r0, r3, #1
 80112e8:	81f8      	strh	r0, [r7, #14]
 80112ea:	4413      	add	r3, r2
 80112ec:	b2ca      	uxtb	r2, r1
 80112ee:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80112f0:	89fb      	ldrh	r3, [r7, #14]
 80112f2:	b2da      	uxtb	r2, r3
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80112f8:	2300      	movs	r3, #0
}
 80112fa:	4618      	mov	r0, r3
 80112fc:	3710      	adds	r7, #16
 80112fe:	46bd      	mov	sp, r7
 8011300:	bd80      	pop	{r7, pc}

08011302 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 8011302:	b580      	push	{r7, lr}
 8011304:	b084      	sub	sp, #16
 8011306:	af00      	add	r7, sp, #0
 8011308:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	2b00      	cmp	r3, #0
 801130e:	d003      	beq.n	8011318 <LoRaMacSerializerData+0x16>
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	2b00      	cmp	r3, #0
 8011316:	d101      	bne.n	801131c <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8011318:	2301      	movs	r3, #1
 801131a:	e0e3      	b.n	80114e4 <LoRaMacSerializerData+0x1e2>
    }

    uint16_t bufItr = 0;
 801131c:	2300      	movs	r3, #0
 801131e:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8011320:	2308      	movs	r3, #8
 8011322:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	7b1b      	ldrb	r3, [r3, #12]
 8011328:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801132c:	b2db      	uxtb	r3, r3
 801132e:	461a      	mov	r2, r3
 8011330:	89bb      	ldrh	r3, [r7, #12]
 8011332:	4413      	add	r3, r2
 8011334:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801133c:	2b00      	cmp	r3, #0
 801133e:	d002      	beq.n	8011346 <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8011340:	89bb      	ldrh	r3, [r7, #12]
 8011342:	3301      	adds	r3, #1
 8011344:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801134c:	461a      	mov	r2, r3
 801134e:	89bb      	ldrh	r3, [r7, #12]
 8011350:	4413      	add	r3, r2
 8011352:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 8011354:	89bb      	ldrh	r3, [r7, #12]
 8011356:	3304      	adds	r3, #4
 8011358:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	791b      	ldrb	r3, [r3, #4]
 801135e:	461a      	mov	r2, r3
 8011360:	89bb      	ldrh	r3, [r7, #12]
 8011362:	4293      	cmp	r3, r2
 8011364:	d901      	bls.n	801136a <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8011366:	2302      	movs	r3, #2
 8011368:	e0bc      	b.n	80114e4 <LoRaMacSerializerData+0x1e2>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	681a      	ldr	r2, [r3, #0]
 801136e:	89fb      	ldrh	r3, [r7, #14]
 8011370:	1c59      	adds	r1, r3, #1
 8011372:	81f9      	strh	r1, [r7, #14]
 8011374:	4413      	add	r3, r2
 8011376:	687a      	ldr	r2, [r7, #4]
 8011378:	7952      	ldrb	r2, [r2, #5]
 801137a:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	6899      	ldr	r1, [r3, #8]
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	681a      	ldr	r2, [r3, #0]
 8011384:	89fb      	ldrh	r3, [r7, #14]
 8011386:	1c58      	adds	r0, r3, #1
 8011388:	81f8      	strh	r0, [r7, #14]
 801138a:	4413      	add	r3, r2
 801138c:	b2ca      	uxtb	r2, r1
 801138e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	689b      	ldr	r3, [r3, #8]
 8011394:	0a19      	lsrs	r1, r3, #8
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	681a      	ldr	r2, [r3, #0]
 801139a:	89fb      	ldrh	r3, [r7, #14]
 801139c:	1c58      	adds	r0, r3, #1
 801139e:	81f8      	strh	r0, [r7, #14]
 80113a0:	4413      	add	r3, r2
 80113a2:	b2ca      	uxtb	r2, r1
 80113a4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	689b      	ldr	r3, [r3, #8]
 80113aa:	0c19      	lsrs	r1, r3, #16
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	681a      	ldr	r2, [r3, #0]
 80113b0:	89fb      	ldrh	r3, [r7, #14]
 80113b2:	1c58      	adds	r0, r3, #1
 80113b4:	81f8      	strh	r0, [r7, #14]
 80113b6:	4413      	add	r3, r2
 80113b8:	b2ca      	uxtb	r2, r1
 80113ba:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	689b      	ldr	r3, [r3, #8]
 80113c0:	0e19      	lsrs	r1, r3, #24
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	681a      	ldr	r2, [r3, #0]
 80113c6:	89fb      	ldrh	r3, [r7, #14]
 80113c8:	1c58      	adds	r0, r3, #1
 80113ca:	81f8      	strh	r0, [r7, #14]
 80113cc:	4413      	add	r3, r2
 80113ce:	b2ca      	uxtb	r2, r1
 80113d0:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	681a      	ldr	r2, [r3, #0]
 80113d6:	89fb      	ldrh	r3, [r7, #14]
 80113d8:	1c59      	adds	r1, r3, #1
 80113da:	81f9      	strh	r1, [r7, #14]
 80113dc:	4413      	add	r3, r2
 80113de:	687a      	ldr	r2, [r7, #4]
 80113e0:	7b12      	ldrb	r2, [r2, #12]
 80113e2:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	89d9      	ldrh	r1, [r3, #14]
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	681a      	ldr	r2, [r3, #0]
 80113ec:	89fb      	ldrh	r3, [r7, #14]
 80113ee:	1c58      	adds	r0, r3, #1
 80113f0:	81f8      	strh	r0, [r7, #14]
 80113f2:	4413      	add	r3, r2
 80113f4:	b2ca      	uxtb	r2, r1
 80113f6:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	89db      	ldrh	r3, [r3, #14]
 80113fc:	0a1b      	lsrs	r3, r3, #8
 80113fe:	b299      	uxth	r1, r3
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	681a      	ldr	r2, [r3, #0]
 8011404:	89fb      	ldrh	r3, [r7, #14]
 8011406:	1c58      	adds	r0, r3, #1
 8011408:	81f8      	strh	r0, [r7, #14]
 801140a:	4413      	add	r3, r2
 801140c:	b2ca      	uxtb	r2, r1
 801140e:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	681a      	ldr	r2, [r3, #0]
 8011414:	89fb      	ldrh	r3, [r7, #14]
 8011416:	18d0      	adds	r0, r2, r3
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	f103 0110 	add.w	r1, r3, #16
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	7b1b      	ldrb	r3, [r3, #12]
 8011422:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8011426:	b2db      	uxtb	r3, r3
 8011428:	461a      	mov	r2, r3
 801142a:	f005 fb12 	bl	8016a52 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	7b1b      	ldrb	r3, [r3, #12]
 8011432:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8011436:	b2db      	uxtb	r3, r3
 8011438:	461a      	mov	r2, r3
 801143a:	89fb      	ldrh	r3, [r7, #14]
 801143c:	4413      	add	r3, r2
 801143e:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011446:	2b00      	cmp	r3, #0
 8011448:	d009      	beq.n	801145e <LoRaMacSerializerData+0x15c>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	681a      	ldr	r2, [r3, #0]
 801144e:	89fb      	ldrh	r3, [r7, #14]
 8011450:	1c59      	adds	r1, r3, #1
 8011452:	81f9      	strh	r1, [r7, #14]
 8011454:	4413      	add	r3, r2
 8011456:	687a      	ldr	r2, [r7, #4]
 8011458:	f892 2020 	ldrb.w	r2, [r2, #32]
 801145c:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	681a      	ldr	r2, [r3, #0]
 8011462:	89fb      	ldrh	r3, [r7, #14]
 8011464:	18d0      	adds	r0, r2, r3
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011470:	461a      	mov	r2, r3
 8011472:	f005 faee 	bl	8016a52 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801147c:	461a      	mov	r2, r3
 801147e:	89fb      	ldrh	r3, [r7, #14]
 8011480:	4413      	add	r3, r2
 8011482:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	681a      	ldr	r2, [r3, #0]
 801148c:	89fb      	ldrh	r3, [r7, #14]
 801148e:	1c58      	adds	r0, r3, #1
 8011490:	81f8      	strh	r0, [r7, #14]
 8011492:	4413      	add	r3, r2
 8011494:	b2ca      	uxtb	r2, r1
 8011496:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801149c:	0a19      	lsrs	r1, r3, #8
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	681a      	ldr	r2, [r3, #0]
 80114a2:	89fb      	ldrh	r3, [r7, #14]
 80114a4:	1c58      	adds	r0, r3, #1
 80114a6:	81f8      	strh	r0, [r7, #14]
 80114a8:	4413      	add	r3, r2
 80114aa:	b2ca      	uxtb	r2, r1
 80114ac:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80114b2:	0c19      	lsrs	r1, r3, #16
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	681a      	ldr	r2, [r3, #0]
 80114b8:	89fb      	ldrh	r3, [r7, #14]
 80114ba:	1c58      	adds	r0, r3, #1
 80114bc:	81f8      	strh	r0, [r7, #14]
 80114be:	4413      	add	r3, r2
 80114c0:	b2ca      	uxtb	r2, r1
 80114c2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80114c8:	0e19      	lsrs	r1, r3, #24
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	681a      	ldr	r2, [r3, #0]
 80114ce:	89fb      	ldrh	r3, [r7, #14]
 80114d0:	1c58      	adds	r0, r3, #1
 80114d2:	81f8      	strh	r0, [r7, #14]
 80114d4:	4413      	add	r3, r2
 80114d6:	b2ca      	uxtb	r2, r1
 80114d8:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80114da:	89fb      	ldrh	r3, [r7, #14]
 80114dc:	b2da      	uxtb	r2, r3
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80114e2:	2300      	movs	r3, #0
}
 80114e4:	4618      	mov	r0, r3
 80114e6:	3710      	adds	r7, #16
 80114e8:	46bd      	mov	sp, r7
 80114ea:	bd80      	pop	{r7, pc}

080114ec <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 80114ec:	b480      	push	{r7}
 80114ee:	b083      	sub	sp, #12
 80114f0:	af00      	add	r7, sp, #0
 80114f2:	4603      	mov	r3, r0
 80114f4:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80114f6:	79fb      	ldrb	r3, [r7, #7]
 80114f8:	2b05      	cmp	r3, #5
 80114fa:	d002      	beq.n	8011502 <RegionIsActive+0x16>
 80114fc:	2b08      	cmp	r3, #8
 80114fe:	d002      	beq.n	8011506 <RegionIsActive+0x1a>
 8011500:	e003      	b.n	801150a <RegionIsActive+0x1e>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 8011502:	2301      	movs	r3, #1
 8011504:	e002      	b.n	801150c <RegionIsActive+0x20>
        KR920_IS_ACTIVE( );
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
 8011506:	2301      	movs	r3, #1
 8011508:	e000      	b.n	801150c <RegionIsActive+0x20>
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 801150a:	2300      	movs	r3, #0
        }
    }
}
 801150c:	4618      	mov	r0, r3
 801150e:	370c      	adds	r7, #12
 8011510:	46bd      	mov	sp, r7
 8011512:	bc80      	pop	{r7}
 8011514:	4770      	bx	lr

08011516 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8011516:	b580      	push	{r7, lr}
 8011518:	b084      	sub	sp, #16
 801151a:	af00      	add	r7, sp, #0
 801151c:	4603      	mov	r3, r0
 801151e:	6039      	str	r1, [r7, #0]
 8011520:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8011522:	2300      	movs	r3, #0
 8011524:	60bb      	str	r3, [r7, #8]
    switch( region )
 8011526:	79fb      	ldrb	r3, [r7, #7]
 8011528:	2b05      	cmp	r3, #5
 801152a:	d002      	beq.n	8011532 <RegionGetPhyParam+0x1c>
 801152c:	2b08      	cmp	r3, #8
 801152e:	d006      	beq.n	801153e <RegionGetPhyParam+0x28>
 8011530:	e00b      	b.n	801154a <RegionGetPhyParam+0x34>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 8011532:	6838      	ldr	r0, [r7, #0]
 8011534:	f001 fad0 	bl	8012ad8 <RegionEU868GetPhyParam>
 8011538:	4603      	mov	r3, r0
 801153a:	60fb      	str	r3, [r7, #12]
 801153c:	e007      	b.n	801154e <RegionGetPhyParam+0x38>
        KR920_GET_PHY_PARAM( );
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
 801153e:	6838      	ldr	r0, [r7, #0]
 8011540:	f002 fc50 	bl	8013de4 <RegionUS915GetPhyParam>
 8011544:	4603      	mov	r3, r0
 8011546:	60fb      	str	r3, [r7, #12]
 8011548:	e001      	b.n	801154e <RegionGetPhyParam+0x38>
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 801154a:	68bb      	ldr	r3, [r7, #8]
 801154c:	60fb      	str	r3, [r7, #12]
        }
    }
}
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	4618      	mov	r0, r3
 8011552:	3710      	adds	r7, #16
 8011554:	46bd      	mov	sp, r7
 8011556:	bd80      	pop	{r7, pc}

08011558 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8011558:	b580      	push	{r7, lr}
 801155a:	b082      	sub	sp, #8
 801155c:	af00      	add	r7, sp, #0
 801155e:	4603      	mov	r3, r0
 8011560:	6039      	str	r1, [r7, #0]
 8011562:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8011564:	79fb      	ldrb	r3, [r7, #7]
 8011566:	2b05      	cmp	r3, #5
 8011568:	d002      	beq.n	8011570 <RegionSetBandTxDone+0x18>
 801156a:	2b08      	cmp	r3, #8
 801156c:	d004      	beq.n	8011578 <RegionSetBandTxDone+0x20>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 801156e:	e006      	b.n	801157e <RegionSetBandTxDone+0x26>
        EU868_SET_BAND_TX_DONE( );
 8011570:	6838      	ldr	r0, [r7, #0]
 8011572:	f001 fbf7 	bl	8012d64 <RegionEU868SetBandTxDone>
 8011576:	e002      	b.n	801157e <RegionSetBandTxDone+0x26>
        US915_SET_BAND_TX_DONE( );
 8011578:	6838      	ldr	r0, [r7, #0]
 801157a:	f002 fd8f 	bl	801409c <RegionUS915SetBandTxDone>
        }
    }
}
 801157e:	3708      	adds	r7, #8
 8011580:	46bd      	mov	sp, r7
 8011582:	bd80      	pop	{r7, pc}

08011584 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8011584:	b580      	push	{r7, lr}
 8011586:	b082      	sub	sp, #8
 8011588:	af00      	add	r7, sp, #0
 801158a:	4603      	mov	r3, r0
 801158c:	6039      	str	r1, [r7, #0]
 801158e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8011590:	79fb      	ldrb	r3, [r7, #7]
 8011592:	2b05      	cmp	r3, #5
 8011594:	d002      	beq.n	801159c <RegionInitDefaults+0x18>
 8011596:	2b08      	cmp	r3, #8
 8011598:	d004      	beq.n	80115a4 <RegionInitDefaults+0x20>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 801159a:	e006      	b.n	80115aa <RegionInitDefaults+0x26>
        EU868_INIT_DEFAULTS( );
 801159c:	6838      	ldr	r0, [r7, #0]
 801159e:	f001 fc0d 	bl	8012dbc <RegionEU868InitDefaults>
 80115a2:	e002      	b.n	80115aa <RegionInitDefaults+0x26>
        US915_INIT_DEFAULTS( );
 80115a4:	6838      	ldr	r0, [r7, #0]
 80115a6:	f002 fda5 	bl	80140f4 <RegionUS915InitDefaults>
        }
    }
}
 80115aa:	bf00      	nop
 80115ac:	3708      	adds	r7, #8
 80115ae:	46bd      	mov	sp, r7
 80115b0:	bd80      	pop	{r7, pc}

080115b2 <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 80115b2:	b580      	push	{r7, lr}
 80115b4:	b082      	sub	sp, #8
 80115b6:	af00      	add	r7, sp, #0
 80115b8:	4603      	mov	r3, r0
 80115ba:	6039      	str	r1, [r7, #0]
 80115bc:	71fb      	strb	r3, [r7, #7]
 80115be:	4613      	mov	r3, r2
 80115c0:	71bb      	strb	r3, [r7, #6]
    switch( region )
 80115c2:	79fb      	ldrb	r3, [r7, #7]
 80115c4:	2b05      	cmp	r3, #5
 80115c6:	d002      	beq.n	80115ce <RegionVerify+0x1c>
 80115c8:	2b08      	cmp	r3, #8
 80115ca:	d007      	beq.n	80115dc <RegionVerify+0x2a>
 80115cc:	e00d      	b.n	80115ea <RegionVerify+0x38>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 80115ce:	79bb      	ldrb	r3, [r7, #6]
 80115d0:	4619      	mov	r1, r3
 80115d2:	6838      	ldr	r0, [r7, #0]
 80115d4:	f001 fc90 	bl	8012ef8 <RegionEU868Verify>
 80115d8:	4603      	mov	r3, r0
 80115da:	e007      	b.n	80115ec <RegionVerify+0x3a>
        KR920_VERIFY( );
        IN865_VERIFY( );
        US915_VERIFY( );
 80115dc:	79bb      	ldrb	r3, [r7, #6]
 80115de:	4619      	mov	r1, r3
 80115e0:	6838      	ldr	r0, [r7, #0]
 80115e2:	f002 feb9 	bl	8014358 <RegionUS915Verify>
 80115e6:	4603      	mov	r3, r0
 80115e8:	e000      	b.n	80115ec <RegionVerify+0x3a>
        RU864_VERIFY( );
        default:
        {
            return false;
 80115ea:	2300      	movs	r3, #0
        }
    }
}
 80115ec:	4618      	mov	r0, r3
 80115ee:	3708      	adds	r7, #8
 80115f0:	46bd      	mov	sp, r7
 80115f2:	bd80      	pop	{r7, pc}

080115f4 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 80115f4:	b580      	push	{r7, lr}
 80115f6:	b082      	sub	sp, #8
 80115f8:	af00      	add	r7, sp, #0
 80115fa:	4603      	mov	r3, r0
 80115fc:	6039      	str	r1, [r7, #0]
 80115fe:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8011600:	79fb      	ldrb	r3, [r7, #7]
 8011602:	2b05      	cmp	r3, #5
 8011604:	d002      	beq.n	801160c <RegionApplyCFList+0x18>
 8011606:	2b08      	cmp	r3, #8
 8011608:	d004      	beq.n	8011614 <RegionApplyCFList+0x20>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 801160a:	e006      	b.n	801161a <RegionApplyCFList+0x26>
        EU868_APPLY_CF_LIST( );
 801160c:	6838      	ldr	r0, [r7, #0]
 801160e:	f001 fcef 	bl	8012ff0 <RegionEU868ApplyCFList>
 8011612:	e002      	b.n	801161a <RegionApplyCFList+0x26>
        US915_APPLY_CF_LIST( );
 8011614:	6838      	ldr	r0, [r7, #0]
 8011616:	f002 ff15 	bl	8014444 <RegionUS915ApplyCFList>
        }
    }
}
 801161a:	bf00      	nop
 801161c:	3708      	adds	r7, #8
 801161e:	46bd      	mov	sp, r7
 8011620:	bd80      	pop	{r7, pc}

08011622 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 8011622:	b580      	push	{r7, lr}
 8011624:	b082      	sub	sp, #8
 8011626:	af00      	add	r7, sp, #0
 8011628:	4603      	mov	r3, r0
 801162a:	6039      	str	r1, [r7, #0]
 801162c:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801162e:	79fb      	ldrb	r3, [r7, #7]
 8011630:	2b05      	cmp	r3, #5
 8011632:	d002      	beq.n	801163a <RegionChanMaskSet+0x18>
 8011634:	2b08      	cmp	r3, #8
 8011636:	d005      	beq.n	8011644 <RegionChanMaskSet+0x22>
 8011638:	e009      	b.n	801164e <RegionChanMaskSet+0x2c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 801163a:	6838      	ldr	r0, [r7, #0]
 801163c:	f001 fd4c 	bl	80130d8 <RegionEU868ChanMaskSet>
 8011640:	4603      	mov	r3, r0
 8011642:	e005      	b.n	8011650 <RegionChanMaskSet+0x2e>
        KR920_CHAN_MASK_SET( );
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
 8011644:	6838      	ldr	r0, [r7, #0]
 8011646:	f002 ff6f 	bl	8014528 <RegionUS915ChanMaskSet>
 801164a:	4603      	mov	r3, r0
 801164c:	e000      	b.n	8011650 <RegionChanMaskSet+0x2e>
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 801164e:	2300      	movs	r3, #0
        }
    }
}
 8011650:	4618      	mov	r0, r3
 8011652:	3708      	adds	r7, #8
 8011654:	46bd      	mov	sp, r7
 8011656:	bd80      	pop	{r7, pc}

08011658 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8011658:	b580      	push	{r7, lr}
 801165a:	b082      	sub	sp, #8
 801165c:	af00      	add	r7, sp, #0
 801165e:	603b      	str	r3, [r7, #0]
 8011660:	4603      	mov	r3, r0
 8011662:	71fb      	strb	r3, [r7, #7]
 8011664:	460b      	mov	r3, r1
 8011666:	71bb      	strb	r3, [r7, #6]
 8011668:	4613      	mov	r3, r2
 801166a:	717b      	strb	r3, [r7, #5]
    switch( region )
 801166c:	79fb      	ldrb	r3, [r7, #7]
 801166e:	2b05      	cmp	r3, #5
 8011670:	d002      	beq.n	8011678 <RegionComputeRxWindowParameters+0x20>
 8011672:	2b08      	cmp	r3, #8
 8011674:	d008      	beq.n	8011688 <RegionComputeRxWindowParameters+0x30>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 8011676:	e00e      	b.n	8011696 <RegionComputeRxWindowParameters+0x3e>
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 8011678:	7979      	ldrb	r1, [r7, #5]
 801167a:	f997 0006 	ldrsb.w	r0, [r7, #6]
 801167e:	693b      	ldr	r3, [r7, #16]
 8011680:	683a      	ldr	r2, [r7, #0]
 8011682:	f001 fd53 	bl	801312c <RegionEU868ComputeRxWindowParameters>
 8011686:	e006      	b.n	8011696 <RegionComputeRxWindowParameters+0x3e>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 8011688:	7979      	ldrb	r1, [r7, #5]
 801168a:	f997 0006 	ldrsb.w	r0, [r7, #6]
 801168e:	693b      	ldr	r3, [r7, #16]
 8011690:	683a      	ldr	r2, [r7, #0]
 8011692:	f002 ffb1 	bl	80145f8 <RegionUS915ComputeRxWindowParameters>
        }
    }
}
 8011696:	bf00      	nop
 8011698:	3708      	adds	r7, #8
 801169a:	46bd      	mov	sp, r7
 801169c:	bd80      	pop	{r7, pc}

0801169e <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801169e:	b580      	push	{r7, lr}
 80116a0:	b084      	sub	sp, #16
 80116a2:	af00      	add	r7, sp, #0
 80116a4:	4603      	mov	r3, r0
 80116a6:	60b9      	str	r1, [r7, #8]
 80116a8:	607a      	str	r2, [r7, #4]
 80116aa:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80116ac:	7bfb      	ldrb	r3, [r7, #15]
 80116ae:	2b05      	cmp	r3, #5
 80116b0:	d002      	beq.n	80116b8 <RegionRxConfig+0x1a>
 80116b2:	2b08      	cmp	r3, #8
 80116b4:	d006      	beq.n	80116c4 <RegionRxConfig+0x26>
 80116b6:	e00b      	b.n	80116d0 <RegionRxConfig+0x32>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 80116b8:	6879      	ldr	r1, [r7, #4]
 80116ba:	68b8      	ldr	r0, [r7, #8]
 80116bc:	f001 fd90 	bl	80131e0 <RegionEU868RxConfig>
 80116c0:	4603      	mov	r3, r0
 80116c2:	e006      	b.n	80116d2 <RegionRxConfig+0x34>
        KR920_RX_CONFIG( );
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
 80116c4:	6879      	ldr	r1, [r7, #4]
 80116c6:	68b8      	ldr	r0, [r7, #8]
 80116c8:	f002 ffe0 	bl	801468c <RegionUS915RxConfig>
 80116cc:	4603      	mov	r3, r0
 80116ce:	e000      	b.n	80116d2 <RegionRxConfig+0x34>
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 80116d0:	2300      	movs	r3, #0
        }
    }
}
 80116d2:	4618      	mov	r0, r3
 80116d4:	3710      	adds	r7, #16
 80116d6:	46bd      	mov	sp, r7
 80116d8:	bd80      	pop	{r7, pc}

080116da <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80116da:	b580      	push	{r7, lr}
 80116dc:	b084      	sub	sp, #16
 80116de:	af00      	add	r7, sp, #0
 80116e0:	60b9      	str	r1, [r7, #8]
 80116e2:	607a      	str	r2, [r7, #4]
 80116e4:	603b      	str	r3, [r7, #0]
 80116e6:	4603      	mov	r3, r0
 80116e8:	73fb      	strb	r3, [r7, #15]
    switch( region )
 80116ea:	7bfb      	ldrb	r3, [r7, #15]
 80116ec:	2b05      	cmp	r3, #5
 80116ee:	d002      	beq.n	80116f6 <RegionTxConfig+0x1c>
 80116f0:	2b08      	cmp	r3, #8
 80116f2:	d007      	beq.n	8011704 <RegionTxConfig+0x2a>
 80116f4:	e00d      	b.n	8011712 <RegionTxConfig+0x38>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 80116f6:	683a      	ldr	r2, [r7, #0]
 80116f8:	6879      	ldr	r1, [r7, #4]
 80116fa:	68b8      	ldr	r0, [r7, #8]
 80116fc:	f001 fe40 	bl	8013380 <RegionEU868TxConfig>
 8011700:	4603      	mov	r3, r0
 8011702:	e007      	b.n	8011714 <RegionTxConfig+0x3a>
        KR920_TX_CONFIG( );
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
 8011704:	683a      	ldr	r2, [r7, #0]
 8011706:	6879      	ldr	r1, [r7, #4]
 8011708:	68b8      	ldr	r0, [r7, #8]
 801170a:	f003 f843 	bl	8014794 <RegionUS915TxConfig>
 801170e:	4603      	mov	r3, r0
 8011710:	e000      	b.n	8011714 <RegionTxConfig+0x3a>
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8011712:	2300      	movs	r3, #0
        }
    }
}
 8011714:	4618      	mov	r0, r3
 8011716:	3710      	adds	r7, #16
 8011718:	46bd      	mov	sp, r7
 801171a:	bd80      	pop	{r7, pc}

0801171c <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801171c:	b580      	push	{r7, lr}
 801171e:	b086      	sub	sp, #24
 8011720:	af02      	add	r7, sp, #8
 8011722:	60b9      	str	r1, [r7, #8]
 8011724:	607a      	str	r2, [r7, #4]
 8011726:	603b      	str	r3, [r7, #0]
 8011728:	4603      	mov	r3, r0
 801172a:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801172c:	7bfb      	ldrb	r3, [r7, #15]
 801172e:	2b05      	cmp	r3, #5
 8011730:	d002      	beq.n	8011738 <RegionLinkAdrReq+0x1c>
 8011732:	2b08      	cmp	r3, #8
 8011734:	d00a      	beq.n	801174c <RegionLinkAdrReq+0x30>
 8011736:	e013      	b.n	8011760 <RegionLinkAdrReq+0x44>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8011738:	69fb      	ldr	r3, [r7, #28]
 801173a:	9300      	str	r3, [sp, #0]
 801173c:	69bb      	ldr	r3, [r7, #24]
 801173e:	683a      	ldr	r2, [r7, #0]
 8011740:	6879      	ldr	r1, [r7, #4]
 8011742:	68b8      	ldr	r0, [r7, #8]
 8011744:	f001 feec 	bl	8013520 <RegionEU868LinkAdrReq>
 8011748:	4603      	mov	r3, r0
 801174a:	e00a      	b.n	8011762 <RegionLinkAdrReq+0x46>
        KR920_LINK_ADR_REQ( );
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
 801174c:	69fb      	ldr	r3, [r7, #28]
 801174e:	9300      	str	r3, [sp, #0]
 8011750:	69bb      	ldr	r3, [r7, #24]
 8011752:	683a      	ldr	r2, [r7, #0]
 8011754:	6879      	ldr	r1, [r7, #4]
 8011756:	68b8      	ldr	r0, [r7, #8]
 8011758:	f003 f8c6 	bl	80148e8 <RegionUS915LinkAdrReq>
 801175c:	4603      	mov	r3, r0
 801175e:	e000      	b.n	8011762 <RegionLinkAdrReq+0x46>
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 8011760:	2300      	movs	r3, #0
        }
    }
}
 8011762:	4618      	mov	r0, r3
 8011764:	3710      	adds	r7, #16
 8011766:	46bd      	mov	sp, r7
 8011768:	bd80      	pop	{r7, pc}

0801176a <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 801176a:	b580      	push	{r7, lr}
 801176c:	b082      	sub	sp, #8
 801176e:	af00      	add	r7, sp, #0
 8011770:	4603      	mov	r3, r0
 8011772:	6039      	str	r1, [r7, #0]
 8011774:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8011776:	79fb      	ldrb	r3, [r7, #7]
 8011778:	2b05      	cmp	r3, #5
 801177a:	d002      	beq.n	8011782 <RegionRxParamSetupReq+0x18>
 801177c:	2b08      	cmp	r3, #8
 801177e:	d005      	beq.n	801178c <RegionRxParamSetupReq+0x22>
 8011780:	e009      	b.n	8011796 <RegionRxParamSetupReq+0x2c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 8011782:	6838      	ldr	r0, [r7, #0]
 8011784:	f001 ffee 	bl	8013764 <RegionEU868RxParamSetupReq>
 8011788:	4603      	mov	r3, r0
 801178a:	e005      	b.n	8011798 <RegionRxParamSetupReq+0x2e>
        KR920_RX_PARAM_SETUP_REQ( );
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
 801178c:	6838      	ldr	r0, [r7, #0]
 801178e:	f003 fac5 	bl	8014d1c <RegionUS915RxParamSetupReq>
 8011792:	4603      	mov	r3, r0
 8011794:	e000      	b.n	8011798 <RegionRxParamSetupReq+0x2e>
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8011796:	2300      	movs	r3, #0
        }
    }
}
 8011798:	4618      	mov	r0, r3
 801179a:	3708      	adds	r7, #8
 801179c:	46bd      	mov	sp, r7
 801179e:	bd80      	pop	{r7, pc}

080117a0 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 80117a0:	b580      	push	{r7, lr}
 80117a2:	b082      	sub	sp, #8
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	4603      	mov	r3, r0
 80117a8:	6039      	str	r1, [r7, #0]
 80117aa:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80117ac:	79fb      	ldrb	r3, [r7, #7]
 80117ae:	2b05      	cmp	r3, #5
 80117b0:	d002      	beq.n	80117b8 <RegionNewChannelReq+0x18>
 80117b2:	2b08      	cmp	r3, #8
 80117b4:	d005      	beq.n	80117c2 <RegionNewChannelReq+0x22>
 80117b6:	e009      	b.n	80117cc <RegionNewChannelReq+0x2c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 80117b8:	6838      	ldr	r0, [r7, #0]
 80117ba:	f002 f811 	bl	80137e0 <RegionEU868NewChannelReq>
 80117be:	4603      	mov	r3, r0
 80117c0:	e005      	b.n	80117ce <RegionNewChannelReq+0x2e>
        KR920_NEW_CHANNEL_REQ( );
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
 80117c2:	6838      	ldr	r0, [r7, #0]
 80117c4:	f003 faf6 	bl	8014db4 <RegionUS915NewChannelReq>
 80117c8:	4603      	mov	r3, r0
 80117ca:	e000      	b.n	80117ce <RegionNewChannelReq+0x2e>
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 80117cc:	2300      	movs	r3, #0
        }
    }
}
 80117ce:	4618      	mov	r0, r3
 80117d0:	3708      	adds	r7, #8
 80117d2:	46bd      	mov	sp, r7
 80117d4:	bd80      	pop	{r7, pc}

080117d6 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 80117d6:	b580      	push	{r7, lr}
 80117d8:	b082      	sub	sp, #8
 80117da:	af00      	add	r7, sp, #0
 80117dc:	4603      	mov	r3, r0
 80117de:	6039      	str	r1, [r7, #0]
 80117e0:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80117e2:	79fb      	ldrb	r3, [r7, #7]
 80117e4:	2b05      	cmp	r3, #5
 80117e6:	d002      	beq.n	80117ee <RegionTxParamSetupReq+0x18>
 80117e8:	2b08      	cmp	r3, #8
 80117ea:	d005      	beq.n	80117f8 <RegionTxParamSetupReq+0x22>
 80117ec:	e009      	b.n	8011802 <RegionTxParamSetupReq+0x2c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 80117ee:	6838      	ldr	r0, [r7, #0]
 80117f0:	f002 f854 	bl	801389c <RegionEU868TxParamSetupReq>
 80117f4:	4603      	mov	r3, r0
 80117f6:	e005      	b.n	8011804 <RegionTxParamSetupReq+0x2e>
        KR920_TX_PARAM_SETUP_REQ( );
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
 80117f8:	6838      	ldr	r0, [r7, #0]
 80117fa:	f003 fae6 	bl	8014dca <RegionUS915TxParamSetupReq>
 80117fe:	4603      	mov	r3, r0
 8011800:	e000      	b.n	8011804 <RegionTxParamSetupReq+0x2e>
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8011802:	2300      	movs	r3, #0
        }
    }
}
 8011804:	4618      	mov	r0, r3
 8011806:	3708      	adds	r7, #8
 8011808:	46bd      	mov	sp, r7
 801180a:	bd80      	pop	{r7, pc}

0801180c <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 801180c:	b580      	push	{r7, lr}
 801180e:	b082      	sub	sp, #8
 8011810:	af00      	add	r7, sp, #0
 8011812:	4603      	mov	r3, r0
 8011814:	6039      	str	r1, [r7, #0]
 8011816:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8011818:	79fb      	ldrb	r3, [r7, #7]
 801181a:	2b05      	cmp	r3, #5
 801181c:	d002      	beq.n	8011824 <RegionDlChannelReq+0x18>
 801181e:	2b08      	cmp	r3, #8
 8011820:	d005      	beq.n	801182e <RegionDlChannelReq+0x22>
 8011822:	e009      	b.n	8011838 <RegionDlChannelReq+0x2c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8011824:	6838      	ldr	r0, [r7, #0]
 8011826:	f002 f845 	bl	80138b4 <RegionEU868DlChannelReq>
 801182a:	4603      	mov	r3, r0
 801182c:	e005      	b.n	801183a <RegionDlChannelReq+0x2e>
        KR920_DL_CHANNEL_REQ( );
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
 801182e:	6838      	ldr	r0, [r7, #0]
 8011830:	f003 fad6 	bl	8014de0 <RegionUS915DlChannelReq>
 8011834:	4603      	mov	r3, r0
 8011836:	e000      	b.n	801183a <RegionDlChannelReq+0x2e>
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8011838:	2300      	movs	r3, #0
        }
    }
}
 801183a:	4618      	mov	r0, r3
 801183c:	3708      	adds	r7, #8
 801183e:	46bd      	mov	sp, r7
 8011840:	bd80      	pop	{r7, pc}

08011842 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 8011842:	b580      	push	{r7, lr}
 8011844:	b082      	sub	sp, #8
 8011846:	af00      	add	r7, sp, #0
 8011848:	4603      	mov	r3, r0
 801184a:	71fb      	strb	r3, [r7, #7]
 801184c:	460b      	mov	r3, r1
 801184e:	71bb      	strb	r3, [r7, #6]
 8011850:	4613      	mov	r3, r2
 8011852:	717b      	strb	r3, [r7, #5]
    switch( region )
 8011854:	79fb      	ldrb	r3, [r7, #7]
 8011856:	2b05      	cmp	r3, #5
 8011858:	d002      	beq.n	8011860 <RegionAlternateDr+0x1e>
 801185a:	2b08      	cmp	r3, #8
 801185c:	d009      	beq.n	8011872 <RegionAlternateDr+0x30>
 801185e:	e011      	b.n	8011884 <RegionAlternateDr+0x42>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8011860:	797a      	ldrb	r2, [r7, #5]
 8011862:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8011866:	4611      	mov	r1, r2
 8011868:	4618      	mov	r0, r3
 801186a:	f002 f86d 	bl	8013948 <RegionEU868AlternateDr>
 801186e:	4603      	mov	r3, r0
 8011870:	e009      	b.n	8011886 <RegionAlternateDr+0x44>
        KR920_ALTERNATE_DR( );
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
 8011872:	797a      	ldrb	r2, [r7, #5]
 8011874:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8011878:	4611      	mov	r1, r2
 801187a:	4618      	mov	r0, r3
 801187c:	f003 fabc 	bl	8014df8 <RegionUS915AlternateDr>
 8011880:	4603      	mov	r3, r0
 8011882:	e000      	b.n	8011886 <RegionAlternateDr+0x44>
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8011884:	2300      	movs	r3, #0
        }
    }
}
 8011886:	4618      	mov	r0, r3
 8011888:	3708      	adds	r7, #8
 801188a:	46bd      	mov	sp, r7
 801188c:	bd80      	pop	{r7, pc}

0801188e <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801188e:	b580      	push	{r7, lr}
 8011890:	b084      	sub	sp, #16
 8011892:	af00      	add	r7, sp, #0
 8011894:	60b9      	str	r1, [r7, #8]
 8011896:	607a      	str	r2, [r7, #4]
 8011898:	603b      	str	r3, [r7, #0]
 801189a:	4603      	mov	r3, r0
 801189c:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801189e:	7bfb      	ldrb	r3, [r7, #15]
 80118a0:	2b05      	cmp	r3, #5
 80118a2:	d002      	beq.n	80118aa <RegionNextChannel+0x1c>
 80118a4:	2b08      	cmp	r3, #8
 80118a6:	d008      	beq.n	80118ba <RegionNextChannel+0x2c>
 80118a8:	e00f      	b.n	80118ca <RegionNextChannel+0x3c>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 80118aa:	69bb      	ldr	r3, [r7, #24]
 80118ac:	683a      	ldr	r2, [r7, #0]
 80118ae:	6879      	ldr	r1, [r7, #4]
 80118b0:	68b8      	ldr	r0, [r7, #8]
 80118b2:	f002 f859 	bl	8013968 <RegionEU868NextChannel>
 80118b6:	4603      	mov	r3, r0
 80118b8:	e008      	b.n	80118cc <RegionNextChannel+0x3e>
        KR920_NEXT_CHANNEL( );
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
 80118ba:	69bb      	ldr	r3, [r7, #24]
 80118bc:	683a      	ldr	r2, [r7, #0]
 80118be:	6879      	ldr	r1, [r7, #4]
 80118c0:	68b8      	ldr	r0, [r7, #8]
 80118c2:	f003 facf 	bl	8014e64 <RegionUS915NextChannel>
 80118c6:	4603      	mov	r3, r0
 80118c8:	e000      	b.n	80118cc <RegionNextChannel+0x3e>
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 80118ca:	2309      	movs	r3, #9
        }
    }
}
 80118cc:	4618      	mov	r0, r3
 80118ce:	3710      	adds	r7, #16
 80118d0:	46bd      	mov	sp, r7
 80118d2:	bd80      	pop	{r7, pc}

080118d4 <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80118d4:	b590      	push	{r4, r7, lr}
 80118d6:	b083      	sub	sp, #12
 80118d8:	af00      	add	r7, sp, #0
 80118da:	4604      	mov	r4, r0
 80118dc:	4608      	mov	r0, r1
 80118de:	4611      	mov	r1, r2
 80118e0:	461a      	mov	r2, r3
 80118e2:	4623      	mov	r3, r4
 80118e4:	71fb      	strb	r3, [r7, #7]
 80118e6:	4603      	mov	r3, r0
 80118e8:	71bb      	strb	r3, [r7, #6]
 80118ea:	460b      	mov	r3, r1
 80118ec:	717b      	strb	r3, [r7, #5]
 80118ee:	4613      	mov	r3, r2
 80118f0:	713b      	strb	r3, [r7, #4]
    switch( region )
 80118f2:	79fb      	ldrb	r3, [r7, #7]
 80118f4:	2b05      	cmp	r3, #5
 80118f6:	d002      	beq.n	80118fe <RegionApplyDrOffset+0x2a>
 80118f8:	2b08      	cmp	r3, #8
 80118fa:	d00a      	beq.n	8011912 <RegionApplyDrOffset+0x3e>
 80118fc:	e013      	b.n	8011926 <RegionApplyDrOffset+0x52>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 80118fe:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8011902:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8011906:	79bb      	ldrb	r3, [r7, #6]
 8011908:	4618      	mov	r0, r3
 801190a:	f002 f9a7 	bl	8013c5c <RegionEU868ApplyDrOffset>
 801190e:	4603      	mov	r3, r0
 8011910:	e00a      	b.n	8011928 <RegionApplyDrOffset+0x54>
        KR920_APPLY_DR_OFFSET( );
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
 8011912:	f997 2004 	ldrsb.w	r2, [r7, #4]
 8011916:	f997 1005 	ldrsb.w	r1, [r7, #5]
 801191a:	79bb      	ldrb	r3, [r7, #6]
 801191c:	4618      	mov	r0, r3
 801191e:	f003 fb8d 	bl	801503c <RegionUS915ApplyDrOffset>
 8011922:	4603      	mov	r3, r0
 8011924:	e000      	b.n	8011928 <RegionApplyDrOffset+0x54>
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8011926:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 8011928:	4618      	mov	r0, r3
 801192a:	370c      	adds	r7, #12
 801192c:	46bd      	mov	sp, r7
 801192e:	bd90      	pop	{r4, r7, pc}

08011930 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 8011930:	b480      	push	{r7}
 8011932:	b083      	sub	sp, #12
 8011934:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 8011936:	4b04      	ldr	r3, [pc, #16]	@ (8011948 <RegionGetVersion+0x18>)
 8011938:	607b      	str	r3, [r7, #4]

    return version;
 801193a:	687b      	ldr	r3, [r7, #4]
}
 801193c:	4618      	mov	r0, r3
 801193e:	370c      	adds	r7, #12
 8011940:	46bd      	mov	sp, r7
 8011942:	bc80      	pop	{r7}
 8011944:	4770      	bx	lr
 8011946:	bf00      	nop
 8011948:	02010001 	.word	0x02010001

0801194c <FindAvailable125kHzChannels>:
 *
 * \retval Status
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
 801194c:	b480      	push	{r7}
 801194e:	b087      	sub	sp, #28
 8011950:	af00      	add	r7, sp, #0
 8011952:	4603      	mov	r3, r0
 8011954:	60b9      	str	r1, [r7, #8]
 8011956:	607a      	str	r2, [r7, #4]
 8011958:	81fb      	strh	r3, [r7, #14]
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 801195a:	68bb      	ldr	r3, [r7, #8]
 801195c:	2b00      	cmp	r3, #0
 801195e:	d002      	beq.n	8011966 <FindAvailable125kHzChannels+0x1a>
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	2b00      	cmp	r3, #0
 8011964:	d101      	bne.n	801196a <FindAvailable125kHzChannels+0x1e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011966:	2303      	movs	r3, #3
 8011968:	e021      	b.n	80119ae <FindAvailable125kHzChannels+0x62>
    }

    // Initialize counter
    *availableChannels = 0;
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	2200      	movs	r2, #0
 801196e:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 8011970:	2300      	movs	r3, #0
 8011972:	75fb      	strb	r3, [r7, #23]
 8011974:	e017      	b.n	80119a6 <FindAvailable125kHzChannels+0x5a>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 8011976:	89fa      	ldrh	r2, [r7, #14]
 8011978:	7dfb      	ldrb	r3, [r7, #23]
 801197a:	fa42 f303 	asr.w	r3, r2, r3
 801197e:	f003 0301 	and.w	r3, r3, #1
 8011982:	2b00      	cmp	r3, #0
 8011984:	d00c      	beq.n	80119a0 <FindAvailable125kHzChannels+0x54>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	781b      	ldrb	r3, [r3, #0]
 801198a:	461a      	mov	r2, r3
 801198c:	68bb      	ldr	r3, [r7, #8]
 801198e:	4413      	add	r3, r2
 8011990:	7dfa      	ldrb	r2, [r7, #23]
 8011992:	701a      	strb	r2, [r3, #0]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	781b      	ldrb	r3, [r3, #0]
 8011998:	3301      	adds	r3, #1
 801199a:	b2da      	uxtb	r2, r3
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	701a      	strb	r2, [r3, #0]
    for( uint8_t i = 0; i < 8; i++ )
 80119a0:	7dfb      	ldrb	r3, [r7, #23]
 80119a2:	3301      	adds	r3, #1
 80119a4:	75fb      	strb	r3, [r7, #23]
 80119a6:	7dfb      	ldrb	r3, [r7, #23]
 80119a8:	2b07      	cmp	r3, #7
 80119aa:	d9e4      	bls.n	8011976 <FindAvailable125kHzChannels+0x2a>
        }
    }

    return LORAMAC_STATUS_OK;
 80119ac:	2300      	movs	r3, #0
}
 80119ae:	4618      	mov	r0, r3
 80119b0:	371c      	adds	r7, #28
 80119b2:	46bd      	mov	sp, r7
 80119b4:	bc80      	pop	{r7}
 80119b6:	4770      	bx	lr

080119b8 <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 80119b8:	b590      	push	{r4, r7, lr}
 80119ba:	b089      	sub	sp, #36	@ 0x24
 80119bc:	af00      	add	r7, sp, #0
 80119be:	60f8      	str	r0, [r7, #12]
 80119c0:	60b9      	str	r1, [r7, #8]
 80119c2:	607a      	str	r2, [r7, #4]
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 80119c4:	f107 0314 	add.w	r3, r7, #20
 80119c8:	2200      	movs	r2, #0
 80119ca:	601a      	str	r2, [r3, #0]
 80119cc:	605a      	str	r2, [r3, #4]
    uint8_t availableChannels = 0;
 80119ce:	2300      	movs	r3, #0
 80119d0:	74fb      	strb	r3, [r7, #19]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d005      	beq.n	80119e4 <RegionBaseUSComputeNext125kHzJoinChannel+0x2c>
 80119d8:	68bb      	ldr	r3, [r7, #8]
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d002      	beq.n	80119e4 <RegionBaseUSComputeNext125kHzJoinChannel+0x2c>
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d101      	bne.n	80119e8 <RegionBaseUSComputeNext125kHzJoinChannel+0x30>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80119e4:	2303      	movs	r3, #3
 80119e6:	e055      	b.n	8011a94 <RegionBaseUSComputeNext125kHzJoinChannel+0xdc>
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 80119e8:	68bb      	ldr	r3, [r7, #8]
 80119ea:	781b      	ldrb	r3, [r3, #0]
 80119ec:	777b      	strb	r3, [r7, #29]

    do
    {
        // Current ChannelMaskRemaining, two groups per channel mask. For example Group 0 and 1 (8 bit) are ChannelMaskRemaining 0 (16 bit), etc.
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 80119ee:	7f7b      	ldrb	r3, [r7, #29]
 80119f0:	085b      	lsrs	r3, r3, #1
 80119f2:	773b      	strb	r3, [r7, #28]

        // For even numbers we need the 8 LSBs and for uneven the 8 MSBs
        if( ( startIndex % 2 ) == 0 )
 80119f4:	7f7b      	ldrb	r3, [r7, #29]
 80119f6:	f003 0301 	and.w	r3, r3, #1
 80119fa:	b2db      	uxtb	r3, r3
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d107      	bne.n	8011a10 <RegionBaseUSComputeNext125kHzJoinChannel+0x58>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 8011a00:	7f3b      	ldrb	r3, [r7, #28]
 8011a02:	005b      	lsls	r3, r3, #1
 8011a04:	68fa      	ldr	r2, [r7, #12]
 8011a06:	4413      	add	r3, r2
 8011a08:	881b      	ldrh	r3, [r3, #0]
 8011a0a:	b2db      	uxtb	r3, r3
 8011a0c:	83fb      	strh	r3, [r7, #30]
 8011a0e:	e006      	b.n	8011a1e <RegionBaseUSComputeNext125kHzJoinChannel+0x66>
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 8011a10:	7f3b      	ldrb	r3, [r7, #28]
 8011a12:	005b      	lsls	r3, r3, #1
 8011a14:	68fa      	ldr	r2, [r7, #12]
 8011a16:	4413      	add	r3, r2
 8011a18:	881b      	ldrh	r3, [r3, #0]
 8011a1a:	0a1b      	lsrs	r3, r3, #8
 8011a1c:	83fb      	strh	r3, [r7, #30]
        }

        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 8011a1e:	f107 0213 	add.w	r2, r7, #19
 8011a22:	f107 0114 	add.w	r1, r7, #20
 8011a26:	8bfb      	ldrh	r3, [r7, #30]
 8011a28:	4618      	mov	r0, r3
 8011a2a:	f7ff ff8f 	bl	801194c <FindAvailable125kHzChannels>
 8011a2e:	4603      	mov	r3, r0
 8011a30:	2b03      	cmp	r3, #3
 8011a32:	d101      	bne.n	8011a38 <RegionBaseUSComputeNext125kHzJoinChannel+0x80>
        {
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8011a34:	2303      	movs	r3, #3
 8011a36:	e02d      	b.n	8011a94 <RegionBaseUSComputeNext125kHzJoinChannel+0xdc>
        }

        if ( availableChannels > 0 )
 8011a38:	7cfb      	ldrb	r3, [r7, #19]
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d011      	beq.n	8011a62 <RegionBaseUSComputeNext125kHzJoinChannel+0xaa>
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 8011a3e:	7f7b      	ldrb	r3, [r7, #29]
 8011a40:	00db      	lsls	r3, r3, #3
 8011a42:	b2dc      	uxtb	r4, r3
 8011a44:	7cfb      	ldrb	r3, [r7, #19]
 8011a46:	3b01      	subs	r3, #1
 8011a48:	4619      	mov	r1, r3
 8011a4a:	2000      	movs	r0, #0
 8011a4c:	f004 ffea 	bl	8016a24 <randr>
 8011a50:	4603      	mov	r3, r0
 8011a52:	3320      	adds	r3, #32
 8011a54:	443b      	add	r3, r7
 8011a56:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8011a5a:	4423      	add	r3, r4
 8011a5c:	b2da      	uxtb	r2, r3
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	701a      	strb	r2, [r3, #0]
        }

        // Increment start index
        startIndex++;
 8011a62:	7f7b      	ldrb	r3, [r7, #29]
 8011a64:	3301      	adds	r3, #1
 8011a66:	777b      	strb	r3, [r7, #29]
        if ( startIndex > 7 )
 8011a68:	7f7b      	ldrb	r3, [r7, #29]
 8011a6a:	2b07      	cmp	r3, #7
 8011a6c:	d901      	bls.n	8011a72 <RegionBaseUSComputeNext125kHzJoinChannel+0xba>
        {
            startIndex = 0;
 8011a6e:	2300      	movs	r3, #0
 8011a70:	777b      	strb	r3, [r7, #29]
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 8011a72:	7cfb      	ldrb	r3, [r7, #19]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d104      	bne.n	8011a82 <RegionBaseUSComputeNext125kHzJoinChannel+0xca>
 8011a78:	68bb      	ldr	r3, [r7, #8]
 8011a7a:	781b      	ldrb	r3, [r3, #0]
 8011a7c:	7f7a      	ldrb	r2, [r7, #29]
 8011a7e:	429a      	cmp	r2, r3
 8011a80:	d1b5      	bne.n	80119ee <RegionBaseUSComputeNext125kHzJoinChannel+0x36>

    if ( availableChannels > 0 )
 8011a82:	7cfb      	ldrb	r3, [r7, #19]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d004      	beq.n	8011a92 <RegionBaseUSComputeNext125kHzJoinChannel+0xda>
    {
        *groupsCurrentIndex = startIndex;
 8011a88:	68bb      	ldr	r3, [r7, #8]
 8011a8a:	7f7a      	ldrb	r2, [r7, #29]
 8011a8c:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8011a8e:	2300      	movs	r3, #0
 8011a90:	e000      	b.n	8011a94 <RegionBaseUSComputeNext125kHzJoinChannel+0xdc>
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 8011a92:	2303      	movs	r3, #3
}
 8011a94:	4618      	mov	r0, r3
 8011a96:	3724      	adds	r7, #36	@ 0x24
 8011a98:	46bd      	mov	sp, r7
 8011a9a:	bd90      	pop	{r4, r7, pc}

08011a9c <RegionBaseUSCalcDownlinkFrequency>:
    return true;
}

uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
 8011a9c:	b480      	push	{r7}
 8011a9e:	b085      	sub	sp, #20
 8011aa0:	af00      	add	r7, sp, #0
 8011aa2:	4603      	mov	r3, r0
 8011aa4:	60b9      	str	r1, [r7, #8]
 8011aa6:	607a      	str	r2, [r7, #4]
 8011aa8:	73fb      	strb	r3, [r7, #15]
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
 8011aaa:	7bfb      	ldrb	r3, [r7, #15]
 8011aac:	687a      	ldr	r2, [r7, #4]
 8011aae:	fb03 f202 	mul.w	r2, r3, r2
 8011ab2:	68bb      	ldr	r3, [r7, #8]
 8011ab4:	4413      	add	r3, r2
}
 8011ab6:	4618      	mov	r0, r3
 8011ab8:	3714      	adds	r7, #20
 8011aba:	46bd      	mov	sp, r7
 8011abc:	bc80      	pop	{r7}
 8011abe:	4770      	bx	lr

08011ac0 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8011ac0:	b480      	push	{r7}
 8011ac2:	b087      	sub	sp, #28
 8011ac4:	af00      	add	r7, sp, #0
 8011ac6:	60f8      	str	r0, [r7, #12]
 8011ac8:	4608      	mov	r0, r1
 8011aca:	4639      	mov	r1, r7
 8011acc:	e881 000c 	stmia.w	r1, {r2, r3}
 8011ad0:	4603      	mov	r3, r0
 8011ad2:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	881b      	ldrh	r3, [r3, #0]
 8011ad8:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8011ada:	7afb      	ldrb	r3, [r7, #11]
 8011adc:	f083 0301 	eor.w	r3, r3, #1
 8011ae0:	b2db      	uxtb	r3, r3
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d01b      	beq.n	8011b1e <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8011ae6:	f242 7310 	movw	r3, #10000	@ 0x2710
 8011aea:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8011aec:	683b      	ldr	r3, [r7, #0]
 8011aee:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 8011af2:	d202      	bcs.n	8011afa <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8011af4:	2364      	movs	r3, #100	@ 0x64
 8011af6:	82bb      	strh	r3, [r7, #20]
 8011af8:	e00b      	b.n	8011b12 <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8011afa:	683b      	ldr	r3, [r7, #0]
 8011afc:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 8011b00:	4293      	cmp	r3, r2
 8011b02:	d803      	bhi.n	8011b0c <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8011b04:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011b08:	82bb      	strh	r3, [r7, #20]
 8011b0a:	e002      	b.n	8011b12 <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8011b0c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8011b10:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8011b12:	8aba      	ldrh	r2, [r7, #20]
 8011b14:	8afb      	ldrh	r3, [r7, #22]
 8011b16:	4293      	cmp	r3, r2
 8011b18:	bf38      	it	cc
 8011b1a:	4613      	movcc	r3, r2
 8011b1c:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8011b1e:	8afb      	ldrh	r3, [r7, #22]
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d101      	bne.n	8011b28 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8011b24:	2301      	movs	r3, #1
 8011b26:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8011b28:	8afb      	ldrh	r3, [r7, #22]
}
 8011b2a:	4618      	mov	r0, r3
 8011b2c:	371c      	adds	r7, #28
 8011b2e:	46bd      	mov	sp, r7
 8011b30:	bc80      	pop	{r7}
 8011b32:	4770      	bx	lr

08011b34 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8011b34:	b580      	push	{r7, lr}
 8011b36:	b08e      	sub	sp, #56	@ 0x38
 8011b38:	af02      	add	r7, sp, #8
 8011b3a:	60f8      	str	r0, [r7, #12]
 8011b3c:	4608      	mov	r0, r1
 8011b3e:	4639      	mov	r1, r7
 8011b40:	e881 000c 	stmia.w	r1, {r2, r3}
 8011b44:	4603      	mov	r3, r0
 8011b46:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	881b      	ldrh	r3, [r3, #0]
 8011b4c:	857b      	strh	r3, [r7, #42]	@ 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8011b4e:	4b4b      	ldr	r3, [pc, #300]	@ (8011c7c <SetMaxTimeCredits+0x148>)
 8011b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8011b52:	463b      	mov	r3, r7
 8011b54:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011b58:	f008 faa0 	bl	801a09c <SysTimeToMs>
 8011b5c:	6278      	str	r0, [r7, #36]	@ 0x24
    SysTime_t timeDiff = { 0 };
 8011b5e:	f107 0314 	add.w	r3, r7, #20
 8011b62:	2200      	movs	r2, #0
 8011b64:	601a      	str	r2, [r3, #0]
 8011b66:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8011b68:	7af9      	ldrb	r1, [r7, #11]
 8011b6a:	463b      	mov	r3, r7
 8011b6c:	cb0c      	ldmia	r3, {r2, r3}
 8011b6e:	68f8      	ldr	r0, [r7, #12]
 8011b70:	f7ff ffa6 	bl	8011ac0 <GetDutyCycle>
 8011b74:	4603      	mov	r3, r0
 8011b76:	857b      	strh	r3, [r7, #42]	@ 0x2a

    if( joined == false )
 8011b78:	7afb      	ldrb	r3, [r7, #11]
 8011b7a:	f083 0301 	eor.w	r3, r3, #1
 8011b7e:	b2db      	uxtb	r3, r3
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d062      	beq.n	8011c4a <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8011b84:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011b86:	2b64      	cmp	r3, #100	@ 0x64
 8011b88:	d105      	bne.n	8011b96 <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8011b8a:	4b3c      	ldr	r3, [pc, #240]	@ (8011c7c <SetMaxTimeCredits+0x148>)
 8011b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011b92:	609a      	str	r2, [r3, #8]
 8011b94:	e00b      	b.n	8011bae <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8011b96:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011b98:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8011b9c:	d105      	bne.n	8011baa <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 8011b9e:	4b38      	ldr	r3, [pc, #224]	@ (8011c80 <SetMaxTimeCredits+0x14c>)
 8011ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011ba6:	609a      	str	r2, [r3, #8]
 8011ba8:	e001      	b.n	8011bae <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 8011baa:	4b36      	ldr	r3, [pc, #216]	@ (8011c84 <SetMaxTimeCredits+0x150>)
 8011bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	689a      	ldr	r2, [r3, #8]
 8011bb2:	f107 031c 	add.w	r3, r7, #28
 8011bb6:	4611      	mov	r1, r2
 8011bb8:	4618      	mov	r0, r3
 8011bba:	f008 fa97 	bl	801a0ec <SysTimeFromMs>
 8011bbe:	f107 0014 	add.w	r0, r7, #20
 8011bc2:	6a3b      	ldr	r3, [r7, #32]
 8011bc4:	9300      	str	r3, [sp, #0]
 8011bc6:	69fb      	ldr	r3, [r7, #28]
 8011bc8:	463a      	mov	r2, r7
 8011bca:	ca06      	ldmia	r2, {r1, r2}
 8011bcc:	f008 f9a7 	bl	8019f1e <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8011bd0:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8011bd4:	f083 0301 	eor.w	r3, r3, #1
 8011bd8:	b2db      	uxtb	r3, r3
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d006      	beq.n	8011bec <SetMaxTimeCredits+0xb8>
 8011bde:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8011be2:	f083 0301 	eor.w	r3, r3, #1
 8011be6:	b2db      	uxtb	r3, r3
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	d108      	bne.n	8011bfe <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8011bec:	68fb      	ldr	r3, [r7, #12]
 8011bee:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8011bf0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011bf2:	429a      	cmp	r2, r3
 8011bf4:	d103      	bne.n	8011bfe <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8011bf6:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8011bf8:	4a23      	ldr	r2, [pc, #140]	@ (8011c88 <SetMaxTimeCredits+0x154>)
 8011bfa:	4293      	cmp	r3, r2
 8011bfc:	d92f      	bls.n	8011c5e <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011c02:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8011c04:	683b      	ldr	r3, [r7, #0]
 8011c06:	4a21      	ldr	r2, [pc, #132]	@ (8011c8c <SetMaxTimeCredits+0x158>)
 8011c08:	4293      	cmp	r3, r2
 8011c0a:	d928      	bls.n	8011c5e <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8011c0c:	683b      	ldr	r3, [r7, #0]
 8011c0e:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 8011c12:	3b30      	subs	r3, #48	@ 0x30
 8011c14:	4a1e      	ldr	r2, [pc, #120]	@ (8011c90 <SetMaxTimeCredits+0x15c>)
 8011c16:	fba2 2303 	umull	r2, r3, r2, r3
 8011c1a:	0c1b      	lsrs	r3, r3, #16
 8011c1c:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 8011c1e:	697b      	ldr	r3, [r7, #20]
 8011c20:	4a1c      	ldr	r2, [pc, #112]	@ (8011c94 <SetMaxTimeCredits+0x160>)
 8011c22:	fb02 f303 	mul.w	r3, r2, r3
 8011c26:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8011c28:	697b      	ldr	r3, [r7, #20]
 8011c2a:	f503 33f6 	add.w	r3, r3, #125952	@ 0x1ec00
 8011c2e:	3330      	adds	r3, #48	@ 0x30
 8011c30:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 8011c32:	2300      	movs	r3, #0
 8011c34:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 8011c36:	f107 0314 	add.w	r3, r7, #20
 8011c3a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011c3e:	f008 fa2d 	bl	801a09c <SysTimeToMs>
 8011c42:	4602      	mov	r2, r0
 8011c44:	68fb      	ldr	r3, [r7, #12]
 8011c46:	609a      	str	r2, [r3, #8]
 8011c48:	e009      	b.n	8011c5e <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 8011c4a:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8011c4e:	f083 0301 	eor.w	r3, r3, #1
 8011c52:	b2db      	uxtb	r3, r3
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d002      	beq.n	8011c5e <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011c5c:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 8011c5e:	68fb      	ldr	r3, [r7, #12]
 8011c60:	685b      	ldr	r3, [r3, #4]
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d102      	bne.n	8011c6c <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011c6a:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011c70:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 8011c72:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
}
 8011c74:	4618      	mov	r0, r3
 8011c76:	3730      	adds	r7, #48	@ 0x30
 8011c78:	46bd      	mov	sp, r7
 8011c7a:	bd80      	pop	{r7, pc}
 8011c7c:	001b7740 	.word	0x001b7740
 8011c80:	0112a880 	.word	0x0112a880
 8011c84:	02932e00 	.word	0x02932e00
 8011c88:	0001517f 	.word	0x0001517f
 8011c8c:	0001ec2f 	.word	0x0001ec2f
 8011c90:	c22e4507 	.word	0xc22e4507
 8011c94:	00015180 	.word	0x00015180

08011c98 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 8011c98:	b580      	push	{r7, lr}
 8011c9a:	b086      	sub	sp, #24
 8011c9c:	af02      	add	r7, sp, #8
 8011c9e:	6078      	str	r0, [r7, #4]
 8011ca0:	4608      	mov	r0, r1
 8011ca2:	4611      	mov	r1, r2
 8011ca4:	461a      	mov	r2, r3
 8011ca6:	4603      	mov	r3, r0
 8011ca8:	70fb      	strb	r3, [r7, #3]
 8011caa:	460b      	mov	r3, r1
 8011cac:	70bb      	strb	r3, [r7, #2]
 8011cae:	4613      	mov	r3, r2
 8011cb0:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8011cb2:	78f9      	ldrb	r1, [r7, #3]
 8011cb4:	787b      	ldrb	r3, [r7, #1]
 8011cb6:	9301      	str	r3, [sp, #4]
 8011cb8:	78bb      	ldrb	r3, [r7, #2]
 8011cba:	9300      	str	r3, [sp, #0]
 8011cbc:	f107 0318 	add.w	r3, r7, #24
 8011cc0:	cb0c      	ldmia	r3, {r2, r3}
 8011cc2:	6878      	ldr	r0, [r7, #4]
 8011cc4:	f7ff ff36 	bl	8011b34 <SetMaxTimeCredits>
 8011cc8:	4603      	mov	r3, r0
 8011cca:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8011ccc:	78fb      	ldrb	r3, [r7, #3]
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d00a      	beq.n	8011ce8 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	685b      	ldr	r3, [r3, #4]
 8011cd6:	4618      	mov	r0, r3
 8011cd8:	f008 fba6 	bl	801a428 <UTIL_TIMER_GetElapsedTime>
 8011cdc:	4602      	mov	r2, r0
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	68db      	ldr	r3, [r3, #12]
 8011ce2:	441a      	add	r2, r3
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	68da      	ldr	r2, [r3, #12]
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	691b      	ldr	r3, [r3, #16]
 8011cf0:	429a      	cmp	r2, r3
 8011cf2:	d903      	bls.n	8011cfc <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	691a      	ldr	r2, [r3, #16]
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	6a3a      	ldr	r2, [r7, #32]
 8011d00:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8011d02:	89fb      	ldrh	r3, [r7, #14]
}
 8011d04:	4618      	mov	r0, r3
 8011d06:	3710      	adds	r7, #16
 8011d08:	46bd      	mov	sp, r7
 8011d0a:	bd80      	pop	{r7, pc}

08011d0c <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8011d0c:	b480      	push	{r7}
 8011d0e:	b085      	sub	sp, #20
 8011d10:	af00      	add	r7, sp, #0
 8011d12:	4603      	mov	r3, r0
 8011d14:	460a      	mov	r2, r1
 8011d16:	80fb      	strh	r3, [r7, #6]
 8011d18:	4613      	mov	r3, r2
 8011d1a:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8011d1c:	2300      	movs	r3, #0
 8011d1e:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8011d20:	2300      	movs	r3, #0
 8011d22:	73bb      	strb	r3, [r7, #14]
 8011d24:	e011      	b.n	8011d4a <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8011d26:	88fa      	ldrh	r2, [r7, #6]
 8011d28:	7bbb      	ldrb	r3, [r7, #14]
 8011d2a:	2101      	movs	r1, #1
 8011d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8011d30:	401a      	ands	r2, r3
 8011d32:	7bbb      	ldrb	r3, [r7, #14]
 8011d34:	2101      	movs	r1, #1
 8011d36:	fa01 f303 	lsl.w	r3, r1, r3
 8011d3a:	429a      	cmp	r2, r3
 8011d3c:	d102      	bne.n	8011d44 <CountChannels+0x38>
        {
            nbActiveBits++;
 8011d3e:	7bfb      	ldrb	r3, [r7, #15]
 8011d40:	3301      	adds	r3, #1
 8011d42:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8011d44:	7bbb      	ldrb	r3, [r7, #14]
 8011d46:	3301      	adds	r3, #1
 8011d48:	73bb      	strb	r3, [r7, #14]
 8011d4a:	7bba      	ldrb	r2, [r7, #14]
 8011d4c:	797b      	ldrb	r3, [r7, #5]
 8011d4e:	429a      	cmp	r2, r3
 8011d50:	d3e9      	bcc.n	8011d26 <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 8011d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d54:	4618      	mov	r0, r3
 8011d56:	3714      	adds	r7, #20
 8011d58:	46bd      	mov	sp, r7
 8011d5a:	bc80      	pop	{r7}
 8011d5c:	4770      	bx	lr

08011d5e <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8011d5e:	b580      	push	{r7, lr}
 8011d60:	b084      	sub	sp, #16
 8011d62:	af00      	add	r7, sp, #0
 8011d64:	6039      	str	r1, [r7, #0]
 8011d66:	4611      	mov	r1, r2
 8011d68:	461a      	mov	r2, r3
 8011d6a:	4603      	mov	r3, r0
 8011d6c:	71fb      	strb	r3, [r7, #7]
 8011d6e:	460b      	mov	r3, r1
 8011d70:	71bb      	strb	r3, [r7, #6]
 8011d72:	4613      	mov	r3, r2
 8011d74:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8011d76:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8011d7a:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8011d7e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8011d82:	4618      	mov	r0, r3
 8011d84:	f000 f85d 	bl	8011e42 <RegionCommonValueInRange>
 8011d88:	4603      	mov	r3, r0
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d101      	bne.n	8011d92 <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 8011d8e:	2300      	movs	r3, #0
 8011d90:	e053      	b.n	8011e3a <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8011d92:	2300      	movs	r3, #0
 8011d94:	73fb      	strb	r3, [r7, #15]
 8011d96:	2300      	movs	r3, #0
 8011d98:	73bb      	strb	r3, [r7, #14]
 8011d9a:	e049      	b.n	8011e30 <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8011d9c:	2300      	movs	r3, #0
 8011d9e:	737b      	strb	r3, [r7, #13]
 8011da0:	e03d      	b.n	8011e1e <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8011da2:	7bbb      	ldrb	r3, [r7, #14]
 8011da4:	005b      	lsls	r3, r3, #1
 8011da6:	683a      	ldr	r2, [r7, #0]
 8011da8:	4413      	add	r3, r2
 8011daa:	881b      	ldrh	r3, [r3, #0]
 8011dac:	461a      	mov	r2, r3
 8011dae:	7b7b      	ldrb	r3, [r7, #13]
 8011db0:	fa42 f303 	asr.w	r3, r2, r3
 8011db4:	f003 0301 	and.w	r3, r3, #1
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d02d      	beq.n	8011e18 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8011dbc:	7bfa      	ldrb	r2, [r7, #15]
 8011dbe:	7b7b      	ldrb	r3, [r7, #13]
 8011dc0:	4413      	add	r3, r2
 8011dc2:	461a      	mov	r2, r3
 8011dc4:	4613      	mov	r3, r2
 8011dc6:	005b      	lsls	r3, r3, #1
 8011dc8:	4413      	add	r3, r2
 8011dca:	009b      	lsls	r3, r3, #2
 8011dcc:	461a      	mov	r2, r3
 8011dce:	69fb      	ldr	r3, [r7, #28]
 8011dd0:	4413      	add	r3, r2
 8011dd2:	7a1b      	ldrb	r3, [r3, #8]
 8011dd4:	f343 0303 	sbfx	r3, r3, #0, #4
 8011dd8:	b25b      	sxtb	r3, r3
 8011dda:	f003 030f 	and.w	r3, r3, #15
 8011dde:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8011de0:	7bfa      	ldrb	r2, [r7, #15]
 8011de2:	7b7b      	ldrb	r3, [r7, #13]
 8011de4:	4413      	add	r3, r2
 8011de6:	461a      	mov	r2, r3
 8011de8:	4613      	mov	r3, r2
 8011dea:	005b      	lsls	r3, r3, #1
 8011dec:	4413      	add	r3, r2
 8011dee:	009b      	lsls	r3, r3, #2
 8011df0:	461a      	mov	r2, r3
 8011df2:	69fb      	ldr	r3, [r7, #28]
 8011df4:	4413      	add	r3, r2
 8011df6:	7a1b      	ldrb	r3, [r3, #8]
 8011df8:	f343 1303 	sbfx	r3, r3, #4, #4
 8011dfc:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8011dfe:	f003 030f 	and.w	r3, r3, #15
 8011e02:	b25a      	sxtb	r2, r3
 8011e04:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8011e08:	4618      	mov	r0, r3
 8011e0a:	f000 f81a 	bl	8011e42 <RegionCommonValueInRange>
 8011e0e:	4603      	mov	r3, r0
 8011e10:	2b01      	cmp	r3, #1
 8011e12:	d101      	bne.n	8011e18 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8011e14:	2301      	movs	r3, #1
 8011e16:	e010      	b.n	8011e3a <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8011e18:	7b7b      	ldrb	r3, [r7, #13]
 8011e1a:	3301      	adds	r3, #1
 8011e1c:	737b      	strb	r3, [r7, #13]
 8011e1e:	7b7b      	ldrb	r3, [r7, #13]
 8011e20:	2b0f      	cmp	r3, #15
 8011e22:	d9be      	bls.n	8011da2 <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8011e24:	7bfb      	ldrb	r3, [r7, #15]
 8011e26:	3310      	adds	r3, #16
 8011e28:	73fb      	strb	r3, [r7, #15]
 8011e2a:	7bbb      	ldrb	r3, [r7, #14]
 8011e2c:	3301      	adds	r3, #1
 8011e2e:	73bb      	strb	r3, [r7, #14]
 8011e30:	7bfa      	ldrb	r2, [r7, #15]
 8011e32:	79fb      	ldrb	r3, [r7, #7]
 8011e34:	429a      	cmp	r2, r3
 8011e36:	d3b1      	bcc.n	8011d9c <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8011e38:	2300      	movs	r3, #0
}
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	3710      	adds	r7, #16
 8011e3e:	46bd      	mov	sp, r7
 8011e40:	bd80      	pop	{r7, pc}

08011e42 <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8011e42:	b480      	push	{r7}
 8011e44:	b083      	sub	sp, #12
 8011e46:	af00      	add	r7, sp, #0
 8011e48:	4603      	mov	r3, r0
 8011e4a:	71fb      	strb	r3, [r7, #7]
 8011e4c:	460b      	mov	r3, r1
 8011e4e:	71bb      	strb	r3, [r7, #6]
 8011e50:	4613      	mov	r3, r2
 8011e52:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8011e54:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8011e58:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8011e5c:	429a      	cmp	r2, r3
 8011e5e:	db07      	blt.n	8011e70 <RegionCommonValueInRange+0x2e>
 8011e60:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8011e64:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8011e68:	429a      	cmp	r2, r3
 8011e6a:	dc01      	bgt.n	8011e70 <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8011e6c:	2301      	movs	r3, #1
 8011e6e:	e000      	b.n	8011e72 <RegionCommonValueInRange+0x30>
    }
    return 0;
 8011e70:	2300      	movs	r3, #0
}
 8011e72:	4618      	mov	r0, r3
 8011e74:	370c      	adds	r7, #12
 8011e76:	46bd      	mov	sp, r7
 8011e78:	bc80      	pop	{r7}
 8011e7a:	4770      	bx	lr

08011e7c <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8011e7c:	b480      	push	{r7}
 8011e7e:	b085      	sub	sp, #20
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	6078      	str	r0, [r7, #4]
 8011e84:	460b      	mov	r3, r1
 8011e86:	70fb      	strb	r3, [r7, #3]
 8011e88:	4613      	mov	r3, r2
 8011e8a:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8011e8c:	78fb      	ldrb	r3, [r7, #3]
 8011e8e:	091b      	lsrs	r3, r3, #4
 8011e90:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8011e92:	78bb      	ldrb	r3, [r7, #2]
 8011e94:	091b      	lsrs	r3, r3, #4
 8011e96:	b2db      	uxtb	r3, r3
 8011e98:	7bfa      	ldrb	r2, [r7, #15]
 8011e9a:	429a      	cmp	r2, r3
 8011e9c:	d803      	bhi.n	8011ea6 <RegionCommonChanDisable+0x2a>
 8011e9e:	78fa      	ldrb	r2, [r7, #3]
 8011ea0:	78bb      	ldrb	r3, [r7, #2]
 8011ea2:	429a      	cmp	r2, r3
 8011ea4:	d301      	bcc.n	8011eaa <RegionCommonChanDisable+0x2e>
    {
        return false;
 8011ea6:	2300      	movs	r3, #0
 8011ea8:	e017      	b.n	8011eda <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8011eaa:	7bfb      	ldrb	r3, [r7, #15]
 8011eac:	005b      	lsls	r3, r3, #1
 8011eae:	687a      	ldr	r2, [r7, #4]
 8011eb0:	4413      	add	r3, r2
 8011eb2:	881b      	ldrh	r3, [r3, #0]
 8011eb4:	b21a      	sxth	r2, r3
 8011eb6:	78fb      	ldrb	r3, [r7, #3]
 8011eb8:	f003 030f 	and.w	r3, r3, #15
 8011ebc:	2101      	movs	r1, #1
 8011ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8011ec2:	b21b      	sxth	r3, r3
 8011ec4:	43db      	mvns	r3, r3
 8011ec6:	b21b      	sxth	r3, r3
 8011ec8:	4013      	ands	r3, r2
 8011eca:	b219      	sxth	r1, r3
 8011ecc:	7bfb      	ldrb	r3, [r7, #15]
 8011ece:	005b      	lsls	r3, r3, #1
 8011ed0:	687a      	ldr	r2, [r7, #4]
 8011ed2:	4413      	add	r3, r2
 8011ed4:	b28a      	uxth	r2, r1
 8011ed6:	801a      	strh	r2, [r3, #0]

    return true;
 8011ed8:	2301      	movs	r3, #1
}
 8011eda:	4618      	mov	r0, r3
 8011edc:	3714      	adds	r7, #20
 8011ede:	46bd      	mov	sp, r7
 8011ee0:	bc80      	pop	{r7}
 8011ee2:	4770      	bx	lr

08011ee4 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8011ee4:	b580      	push	{r7, lr}
 8011ee6:	b084      	sub	sp, #16
 8011ee8:	af00      	add	r7, sp, #0
 8011eea:	6078      	str	r0, [r7, #4]
 8011eec:	460b      	mov	r3, r1
 8011eee:	70fb      	strb	r3, [r7, #3]
 8011ef0:	4613      	mov	r3, r2
 8011ef2:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8011ef4:	2300      	movs	r3, #0
 8011ef6:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d101      	bne.n	8011f02 <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8011efe:	2300      	movs	r3, #0
 8011f00:	e018      	b.n	8011f34 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8011f02:	78fb      	ldrb	r3, [r7, #3]
 8011f04:	73bb      	strb	r3, [r7, #14]
 8011f06:	e010      	b.n	8011f2a <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8011f08:	7bbb      	ldrb	r3, [r7, #14]
 8011f0a:	005b      	lsls	r3, r3, #1
 8011f0c:	687a      	ldr	r2, [r7, #4]
 8011f0e:	4413      	add	r3, r2
 8011f10:	881b      	ldrh	r3, [r3, #0]
 8011f12:	2110      	movs	r1, #16
 8011f14:	4618      	mov	r0, r3
 8011f16:	f7ff fef9 	bl	8011d0c <CountChannels>
 8011f1a:	4603      	mov	r3, r0
 8011f1c:	461a      	mov	r2, r3
 8011f1e:	7bfb      	ldrb	r3, [r7, #15]
 8011f20:	4413      	add	r3, r2
 8011f22:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8011f24:	7bbb      	ldrb	r3, [r7, #14]
 8011f26:	3301      	adds	r3, #1
 8011f28:	73bb      	strb	r3, [r7, #14]
 8011f2a:	7bba      	ldrb	r2, [r7, #14]
 8011f2c:	78bb      	ldrb	r3, [r7, #2]
 8011f2e:	429a      	cmp	r2, r3
 8011f30:	d3ea      	bcc.n	8011f08 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8011f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f34:	4618      	mov	r0, r3
 8011f36:	3710      	adds	r7, #16
 8011f38:	46bd      	mov	sp, r7
 8011f3a:	bd80      	pop	{r7, pc}

08011f3c <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8011f3c:	b480      	push	{r7}
 8011f3e:	b087      	sub	sp, #28
 8011f40:	af00      	add	r7, sp, #0
 8011f42:	60f8      	str	r0, [r7, #12]
 8011f44:	60b9      	str	r1, [r7, #8]
 8011f46:	4613      	mov	r3, r2
 8011f48:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d016      	beq.n	8011f7e <RegionCommonChanMaskCopy+0x42>
 8011f50:	68bb      	ldr	r3, [r7, #8]
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	d013      	beq.n	8011f7e <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8011f56:	2300      	movs	r3, #0
 8011f58:	75fb      	strb	r3, [r7, #23]
 8011f5a:	e00c      	b.n	8011f76 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8011f5c:	7dfb      	ldrb	r3, [r7, #23]
 8011f5e:	005b      	lsls	r3, r3, #1
 8011f60:	68ba      	ldr	r2, [r7, #8]
 8011f62:	441a      	add	r2, r3
 8011f64:	7dfb      	ldrb	r3, [r7, #23]
 8011f66:	005b      	lsls	r3, r3, #1
 8011f68:	68f9      	ldr	r1, [r7, #12]
 8011f6a:	440b      	add	r3, r1
 8011f6c:	8812      	ldrh	r2, [r2, #0]
 8011f6e:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8011f70:	7dfb      	ldrb	r3, [r7, #23]
 8011f72:	3301      	adds	r3, #1
 8011f74:	75fb      	strb	r3, [r7, #23]
 8011f76:	7dfa      	ldrb	r2, [r7, #23]
 8011f78:	79fb      	ldrb	r3, [r7, #7]
 8011f7a:	429a      	cmp	r2, r3
 8011f7c:	d3ee      	bcc.n	8011f5c <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8011f7e:	bf00      	nop
 8011f80:	371c      	adds	r7, #28
 8011f82:	46bd      	mov	sp, r7
 8011f84:	bc80      	pop	{r7}
 8011f86:	4770      	bx	lr

08011f88 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8011f88:	b082      	sub	sp, #8
 8011f8a:	b580      	push	{r7, lr}
 8011f8c:	b086      	sub	sp, #24
 8011f8e:	af00      	add	r7, sp, #0
 8011f90:	60f8      	str	r0, [r7, #12]
 8011f92:	60b9      	str	r1, [r7, #8]
 8011f94:	627b      	str	r3, [r7, #36]	@ 0x24
 8011f96:	4613      	mov	r3, r2
 8011f98:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8011f9a:	79f9      	ldrb	r1, [r7, #7]
 8011f9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011fa0:	cb0c      	ldmia	r3, {r2, r3}
 8011fa2:	68f8      	ldr	r0, [r7, #12]
 8011fa4:	f7ff fd8c 	bl	8011ac0 <GetDutyCycle>
 8011fa8:	4603      	mov	r3, r0
 8011faa:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	68da      	ldr	r2, [r3, #12]
 8011fb0:	8afb      	ldrh	r3, [r7, #22]
 8011fb2:	68b9      	ldr	r1, [r7, #8]
 8011fb4:	fb01 f303 	mul.w	r3, r1, r3
 8011fb8:	429a      	cmp	r2, r3
 8011fba:	d909      	bls.n	8011fd0 <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8011fbc:	68fb      	ldr	r3, [r7, #12]
 8011fbe:	68da      	ldr	r2, [r3, #12]
 8011fc0:	8afb      	ldrh	r3, [r7, #22]
 8011fc2:	68b9      	ldr	r1, [r7, #8]
 8011fc4:	fb01 f303 	mul.w	r3, r1, r3
 8011fc8:	1ad2      	subs	r2, r2, r3
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8011fce:	e002      	b.n	8011fd6 <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	2200      	movs	r2, #0
 8011fd4:	60da      	str	r2, [r3, #12]
}
 8011fd6:	bf00      	nop
 8011fd8:	3718      	adds	r7, #24
 8011fda:	46bd      	mov	sp, r7
 8011fdc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011fe0:	b002      	add	sp, #8
 8011fe2:	4770      	bx	lr

08011fe4 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8011fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011fe6:	b08f      	sub	sp, #60	@ 0x3c
 8011fe8:	af04      	add	r7, sp, #16
 8011fea:	6039      	str	r1, [r7, #0]
 8011fec:	4611      	mov	r1, r2
 8011fee:	461a      	mov	r2, r3
 8011ff0:	4603      	mov	r3, r0
 8011ff2:	71fb      	strb	r3, [r7, #7]
 8011ff4:	460b      	mov	r3, r1
 8011ff6:	71bb      	strb	r3, [r7, #6]
 8011ff8:	4613      	mov	r3, r2
 8011ffa:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8011ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8012000:	627b      	str	r3, [r7, #36]	@ 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8012002:	f008 f9ff 	bl	801a404 <UTIL_TIMER_GetCurrentTime>
 8012006:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8012008:	2300      	movs	r3, #0
 801200a:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 801200c:	2301      	movs	r3, #1
 801200e:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8012010:	2300      	movs	r3, #0
 8012012:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8012016:	2300      	movs	r3, #0
 8012018:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801201c:	e0ba      	b.n	8012194 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 801201e:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8012022:	4613      	mov	r3, r2
 8012024:	005b      	lsls	r3, r3, #1
 8012026:	4413      	add	r3, r2
 8012028:	00db      	lsls	r3, r3, #3
 801202a:	461a      	mov	r2, r3
 801202c:	683b      	ldr	r3, [r7, #0]
 801202e:	189c      	adds	r4, r3, r2
 8012030:	f897 6040 	ldrb.w	r6, [r7, #64]	@ 0x40
 8012034:	797a      	ldrb	r2, [r7, #5]
 8012036:	79fd      	ldrb	r5, [r7, #7]
 8012038:	69fb      	ldr	r3, [r7, #28]
 801203a:	9302      	str	r3, [sp, #8]
 801203c:	46ec      	mov	ip, sp
 801203e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8012042:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012046:	e88c 0003 	stmia.w	ip, {r0, r1}
 801204a:	4633      	mov	r3, r6
 801204c:	4629      	mov	r1, r5
 801204e:	4620      	mov	r0, r4
 8012050:	f7ff fe22 	bl	8011c98 <UpdateTimeCredits>
 8012054:	4603      	mov	r3, r0
 8012056:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8012058:	8afa      	ldrh	r2, [r7, #22]
 801205a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801205c:	fb02 f303 	mul.w	r3, r2, r3
 8012060:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 8012062:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8012066:	4613      	mov	r3, r2
 8012068:	005b      	lsls	r3, r3, #1
 801206a:	4413      	add	r3, r2
 801206c:	00db      	lsls	r3, r3, #3
 801206e:	461a      	mov	r2, r3
 8012070:	683b      	ldr	r3, [r7, #0]
 8012072:	4413      	add	r3, r2
 8012074:	68db      	ldr	r3, [r3, #12]
 8012076:	69ba      	ldr	r2, [r7, #24]
 8012078:	429a      	cmp	r2, r3
 801207a:	d908      	bls.n	801208e <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 801207c:	797b      	ldrb	r3, [r7, #5]
 801207e:	f083 0301 	eor.w	r3, r3, #1
 8012082:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 8012084:	2b00      	cmp	r3, #0
 8012086:	d013      	beq.n	80120b0 <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8012088:	79fb      	ldrb	r3, [r7, #7]
 801208a:	2b00      	cmp	r3, #0
 801208c:	d010      	beq.n	80120b0 <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 801208e:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8012092:	4613      	mov	r3, r2
 8012094:	005b      	lsls	r3, r3, #1
 8012096:	4413      	add	r3, r2
 8012098:	00db      	lsls	r3, r3, #3
 801209a:	461a      	mov	r2, r3
 801209c:	683b      	ldr	r3, [r7, #0]
 801209e:	4413      	add	r3, r2
 80120a0:	2201      	movs	r2, #1
 80120a2:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 80120a4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80120a8:	3301      	adds	r3, #1
 80120aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80120ae:	e06c      	b.n	801218a <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 80120b0:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80120b4:	4613      	mov	r3, r2
 80120b6:	005b      	lsls	r3, r3, #1
 80120b8:	4413      	add	r3, r2
 80120ba:	00db      	lsls	r3, r3, #3
 80120bc:	461a      	mov	r2, r3
 80120be:	683b      	ldr	r3, [r7, #0]
 80120c0:	4413      	add	r3, r2
 80120c2:	2200      	movs	r2, #0
 80120c4:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 80120c6:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80120ca:	4613      	mov	r3, r2
 80120cc:	005b      	lsls	r3, r3, #1
 80120ce:	4413      	add	r3, r2
 80120d0:	00db      	lsls	r3, r3, #3
 80120d2:	461a      	mov	r2, r3
 80120d4:	683b      	ldr	r3, [r7, #0]
 80120d6:	4413      	add	r3, r2
 80120d8:	691b      	ldr	r3, [r3, #16]
 80120da:	69ba      	ldr	r2, [r7, #24]
 80120dc:	429a      	cmp	r2, r3
 80120de:	d815      	bhi.n	801210c <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 80120e0:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 80120e4:	4613      	mov	r3, r2
 80120e6:	005b      	lsls	r3, r3, #1
 80120e8:	4413      	add	r3, r2
 80120ea:	00db      	lsls	r3, r3, #3
 80120ec:	461a      	mov	r2, r3
 80120ee:	683b      	ldr	r3, [r7, #0]
 80120f0:	4413      	add	r3, r2
 80120f2:	68db      	ldr	r3, [r3, #12]
 80120f4:	69ba      	ldr	r2, [r7, #24]
 80120f6:	1ad3      	subs	r3, r2, r3
 80120f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80120fa:	4293      	cmp	r3, r2
 80120fc:	bf28      	it	cs
 80120fe:	4613      	movcs	r3, r2
 8012100:	627b      	str	r3, [r7, #36]	@ 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8012102:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8012106:	3301      	adds	r3, #1
 8012108:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 801210c:	79fb      	ldrb	r3, [r7, #7]
 801210e:	f083 0301 	eor.w	r3, r3, #1
 8012112:	b2db      	uxtb	r3, r3
 8012114:	2b00      	cmp	r3, #0
 8012116:	d038      	beq.n	801218a <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8012118:	2300      	movs	r3, #0
 801211a:	60fb      	str	r3, [r7, #12]
 801211c:	2300      	movs	r3, #0
 801211e:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8012120:	8afb      	ldrh	r3, [r7, #22]
 8012122:	2b64      	cmp	r3, #100	@ 0x64
 8012124:	d103      	bne.n	801212e <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8012126:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 801212a:	60fb      	str	r3, [r7, #12]
 801212c:	e009      	b.n	8012142 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 801212e:	8afb      	ldrh	r3, [r7, #22]
 8012130:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8012134:	d103      	bne.n	801213e <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8012136:	f649 23b0 	movw	r3, #39600	@ 0x9ab0
 801213a:	60fb      	str	r3, [r7, #12]
 801213c:	e001      	b.n	8012142 <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 801213e:	4b1e      	ldr	r3, [pc, #120]	@ (80121b8 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8012140:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8012142:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012144:	4a1c      	ldr	r2, [pc, #112]	@ (80121b8 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8012146:	4293      	cmp	r3, r2
 8012148:	d90e      	bls.n	8012168 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 801214a:	68fa      	ldr	r2, [r7, #12]
 801214c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801214e:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 8012152:	3b30      	subs	r3, #48	@ 0x30
 8012154:	4919      	ldr	r1, [pc, #100]	@ (80121bc <RegionCommonUpdateBandTimeOff+0x1d8>)
 8012156:	fba1 1303 	umull	r1, r3, r1, r3
 801215a:	0c1b      	lsrs	r3, r3, #16
 801215c:	3301      	adds	r3, #1
 801215e:	4918      	ldr	r1, [pc, #96]	@ (80121c0 <RegionCommonUpdateBandTimeOff+0x1dc>)
 8012160:	fb01 f303 	mul.w	r3, r1, r3
 8012164:	4413      	add	r3, r2
 8012166:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8012168:	f107 000c 	add.w	r0, r7, #12
 801216c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801216e:	9300      	str	r3, [sp, #0]
 8012170:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012172:	f107 020c 	add.w	r2, r7, #12
 8012176:	ca06      	ldmia	r2, {r1, r2}
 8012178:	f007 fed1 	bl	8019f1e <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 801217c:	f107 030c 	add.w	r3, r7, #12
 8012180:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012184:	f007 ff8a 	bl	801a09c <SysTimeToMs>
 8012188:	6278      	str	r0, [r7, #36]	@ 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 801218a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801218e:	3301      	adds	r3, #1
 8012190:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8012194:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8012198:	79bb      	ldrb	r3, [r7, #6]
 801219a:	429a      	cmp	r2, r3
 801219c:	f4ff af3f 	bcc.w	801201e <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 80121a0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d102      	bne.n	80121ae <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 80121a8:	f04f 33ff 	mov.w	r3, #4294967295
 80121ac:	e000      	b.n	80121b0 <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 80121ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80121b0:	4618      	mov	r0, r3
 80121b2:	372c      	adds	r7, #44	@ 0x2c
 80121b4:	46bd      	mov	sp, r7
 80121b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80121b8:	0001ec30 	.word	0x0001ec30
 80121bc:	c22e4507 	.word	0xc22e4507
 80121c0:	00015180 	.word	0x00015180

080121c4 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 80121c4:	b480      	push	{r7}
 80121c6:	b085      	sub	sp, #20
 80121c8:	af00      	add	r7, sp, #0
 80121ca:	6078      	str	r0, [r7, #4]
 80121cc:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 80121ce:	2300      	movs	r3, #0
 80121d0:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	781b      	ldrb	r3, [r3, #0]
 80121d6:	2b03      	cmp	r3, #3
 80121d8:	d140      	bne.n	801225c <RegionCommonParseLinkAdrReq+0x98>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	3301      	adds	r3, #1
 80121de:	781b      	ldrb	r3, [r3, #0]
 80121e0:	b25a      	sxtb	r2, r3
 80121e2:	683b      	ldr	r3, [r7, #0]
 80121e4:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 80121e6:	683b      	ldr	r3, [r7, #0]
 80121e8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80121ec:	f003 030f 	and.w	r3, r3, #15
 80121f0:	b25a      	sxtb	r2, r3
 80121f2:	683b      	ldr	r3, [r7, #0]
 80121f4:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 80121f6:	683b      	ldr	r3, [r7, #0]
 80121f8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80121fc:	b2db      	uxtb	r3, r3
 80121fe:	091b      	lsrs	r3, r3, #4
 8012200:	b2db      	uxtb	r3, r3
 8012202:	b25a      	sxtb	r2, r3
 8012204:	683b      	ldr	r3, [r7, #0]
 8012206:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	3302      	adds	r3, #2
 801220c:	781b      	ldrb	r3, [r3, #0]
 801220e:	461a      	mov	r2, r3
 8012210:	683b      	ldr	r3, [r7, #0]
 8012212:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8012214:	683b      	ldr	r3, [r7, #0]
 8012216:	889b      	ldrh	r3, [r3, #4]
 8012218:	b21a      	sxth	r2, r3
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	3303      	adds	r3, #3
 801221e:	781b      	ldrb	r3, [r3, #0]
 8012220:	b21b      	sxth	r3, r3
 8012222:	021b      	lsls	r3, r3, #8
 8012224:	b21b      	sxth	r3, r3
 8012226:	4313      	orrs	r3, r2
 8012228:	b21b      	sxth	r3, r3
 801222a:	b29a      	uxth	r2, r3
 801222c:	683b      	ldr	r3, [r7, #0]
 801222e:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	791a      	ldrb	r2, [r3, #4]
 8012234:	683b      	ldr	r3, [r7, #0]
 8012236:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8012238:	683b      	ldr	r3, [r7, #0]
 801223a:	781b      	ldrb	r3, [r3, #0]
 801223c:	091b      	lsrs	r3, r3, #4
 801223e:	b2db      	uxtb	r3, r3
 8012240:	f003 0307 	and.w	r3, r3, #7
 8012244:	b2da      	uxtb	r2, r3
 8012246:	683b      	ldr	r3, [r7, #0]
 8012248:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 801224a:	683b      	ldr	r3, [r7, #0]
 801224c:	781b      	ldrb	r3, [r3, #0]
 801224e:	f003 030f 	and.w	r3, r3, #15
 8012252:	b2da      	uxtb	r2, r3
 8012254:	683b      	ldr	r3, [r7, #0]
 8012256:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8012258:	2305      	movs	r3, #5
 801225a:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 801225c:	7bfb      	ldrb	r3, [r7, #15]
}
 801225e:	4618      	mov	r0, r3
 8012260:	3714      	adds	r7, #20
 8012262:	46bd      	mov	sp, r7
 8012264:	bc80      	pop	{r7}
 8012266:	4770      	bx	lr

08012268 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8012268:	b5b0      	push	{r4, r5, r7, lr}
 801226a:	b088      	sub	sp, #32
 801226c:	af02      	add	r7, sp, #8
 801226e:	60f8      	str	r0, [r7, #12]
 8012270:	60b9      	str	r1, [r7, #8]
 8012272:	607a      	str	r2, [r7, #4]
 8012274:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	791b      	ldrb	r3, [r3, #4]
 801227a:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	799b      	ldrb	r3, [r3, #6]
 8012280:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	79db      	ldrb	r3, [r3, #7]
 8012286:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8012288:	68fb      	ldr	r3, [r7, #12]
 801228a:	7a1b      	ldrb	r3, [r3, #8]
 801228c:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 801228e:	68fb      	ldr	r3, [r7, #12]
 8012290:	795b      	ldrb	r3, [r3, #5]
 8012292:	f083 0301 	eor.w	r3, r3, #1
 8012296:	b2db      	uxtb	r3, r3
 8012298:	2b00      	cmp	r3, #0
 801229a:	d008      	beq.n	80122ae <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	7adb      	ldrb	r3, [r3, #11]
 80122a0:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	7a5b      	ldrb	r3, [r3, #9]
 80122a6:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	7a9b      	ldrb	r3, [r3, #10]
 80122ac:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 80122ae:	7dfb      	ldrb	r3, [r7, #23]
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d04a      	beq.n	801234a <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 80122b4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80122b8:	2b0f      	cmp	r3, #15
 80122ba:	d103      	bne.n	80122c4 <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 80122bc:	68fb      	ldr	r3, [r7, #12]
 80122be:	7a5b      	ldrb	r3, [r3, #9]
 80122c0:	75bb      	strb	r3, [r7, #22]
 80122c2:	e01d      	b.n	8012300 <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	7b18      	ldrb	r0, [r3, #12]
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	6919      	ldr	r1, [r3, #16]
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	f993 5014 	ldrsb.w	r5, [r3, #20]
 80122d2:	68fb      	ldr	r3, [r7, #12]
 80122d4:	f993 3015 	ldrsb.w	r3, [r3, #21]
 80122d8:	68fa      	ldr	r2, [r7, #12]
 80122da:	6992      	ldr	r2, [r2, #24]
 80122dc:	f997 4016 	ldrsb.w	r4, [r7, #22]
 80122e0:	9201      	str	r2, [sp, #4]
 80122e2:	9300      	str	r3, [sp, #0]
 80122e4:	462b      	mov	r3, r5
 80122e6:	4622      	mov	r2, r4
 80122e8:	f7ff fd39 	bl	8011d5e <RegionCommonChanVerifyDr>
 80122ec:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 80122ee:	f083 0301 	eor.w	r3, r3, #1
 80122f2:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d003      	beq.n	8012300 <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 80122f8:	7dfb      	ldrb	r3, [r7, #23]
 80122fa:	f023 0302 	bic.w	r3, r3, #2
 80122fe:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 8012300:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8012304:	2b0f      	cmp	r3, #15
 8012306:	d103      	bne.n	8012310 <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	7a9b      	ldrb	r3, [r3, #10]
 801230c:	757b      	strb	r3, [r7, #21]
 801230e:	e01c      	b.n	801234a <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	f993 201c 	ldrsb.w	r2, [r3, #28]
 801231c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8012320:	4618      	mov	r0, r3
 8012322:	f7ff fd8e 	bl	8011e42 <RegionCommonValueInRange>
 8012326:	4603      	mov	r3, r0
 8012328:	2b00      	cmp	r3, #0
 801232a:	d10e      	bne.n	801234a <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8012332:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8012336:	429a      	cmp	r2, r3
 8012338:	da03      	bge.n	8012342 <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	7f5b      	ldrb	r3, [r3, #29]
 801233e:	757b      	strb	r3, [r7, #21]
 8012340:	e003      	b.n	801234a <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8012342:	7dfb      	ldrb	r3, [r7, #23]
 8012344:	f023 0304 	bic.w	r3, r3, #4
 8012348:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 801234a:	7dfb      	ldrb	r3, [r7, #23]
 801234c:	2b07      	cmp	r3, #7
 801234e:	d105      	bne.n	801235c <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 8012350:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8012354:	2b00      	cmp	r3, #0
 8012356:	d101      	bne.n	801235c <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 8012358:	2301      	movs	r3, #1
 801235a:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 801235c:	68bb      	ldr	r3, [r7, #8]
 801235e:	7dba      	ldrb	r2, [r7, #22]
 8012360:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	7d7a      	ldrb	r2, [r7, #21]
 8012366:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 8012368:	7d3a      	ldrb	r2, [r7, #20]
 801236a:	683b      	ldr	r3, [r7, #0]
 801236c:	701a      	strb	r2, [r3, #0]

    return status;
 801236e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012370:	4618      	mov	r0, r3
 8012372:	3718      	adds	r7, #24
 8012374:	46bd      	mov	sp, r7
 8012376:	bdb0      	pop	{r4, r5, r7, pc}

08012378 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 8012378:	b480      	push	{r7}
 801237a:	b083      	sub	sp, #12
 801237c:	af00      	add	r7, sp, #0
 801237e:	4603      	mov	r3, r0
 8012380:	6039      	str	r1, [r7, #0]
 8012382:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8012384:	79fb      	ldrb	r3, [r7, #7]
 8012386:	4a06      	ldr	r2, [pc, #24]	@ (80123a0 <RegionCommonComputeSymbolTimeLoRa+0x28>)
 8012388:	fa02 f303 	lsl.w	r3, r2, r3
 801238c:	461a      	mov	r2, r3
 801238e:	683b      	ldr	r3, [r7, #0]
 8012390:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8012394:	4618      	mov	r0, r3
 8012396:	370c      	adds	r7, #12
 8012398:	46bd      	mov	sp, r7
 801239a:	bc80      	pop	{r7}
 801239c:	4770      	bx	lr
 801239e:	bf00      	nop
 80123a0:	000f4240 	.word	0x000f4240

080123a4 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 80123a4:	b480      	push	{r7}
 80123a6:	b083      	sub	sp, #12
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	4603      	mov	r3, r0
 80123ac:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 80123ae:	79fb      	ldrb	r3, [r7, #7]
 80123b0:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80123b4:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80123b8:	4618      	mov	r0, r3
 80123ba:	370c      	adds	r7, #12
 80123bc:	46bd      	mov	sp, r7
 80123be:	bc80      	pop	{r7}
 80123c0:	4770      	bx	lr
	...

080123c4 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 80123c4:	b480      	push	{r7}
 80123c6:	b085      	sub	sp, #20
 80123c8:	af00      	add	r7, sp, #0
 80123ca:	60f8      	str	r0, [r7, #12]
 80123cc:	607a      	str	r2, [r7, #4]
 80123ce:	603b      	str	r3, [r7, #0]
 80123d0:	460b      	mov	r3, r1
 80123d2:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 80123d4:	7afa      	ldrb	r2, [r7, #11]
 80123d6:	7afb      	ldrb	r3, [r7, #11]
 80123d8:	3b04      	subs	r3, #4
 80123da:	4619      	mov	r1, r3
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	fb03 f101 	mul.w	r1, r3, r1
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80123e8:	fb00 f303 	mul.w	r3, r0, r3
 80123ec:	440b      	add	r3, r1
 80123ee:	005b      	lsls	r3, r3, #1
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d013      	beq.n	801241c <RegionCommonComputeRxWindowParameters+0x58>
 80123f4:	7afb      	ldrb	r3, [r7, #11]
 80123f6:	3b04      	subs	r3, #4
 80123f8:	4619      	mov	r1, r3
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	fb03 f101 	mul.w	r1, r3, r1
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8012406:	fb00 f303 	mul.w	r3, r0, r3
 801240a:	440b      	add	r3, r1
 801240c:	0059      	lsls	r1, r3, #1
 801240e:	68fb      	ldr	r3, [r7, #12]
 8012410:	440b      	add	r3, r1
 8012412:	1e59      	subs	r1, r3, #1
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	fbb1 f3f3 	udiv	r3, r1, r3
 801241a:	e00f      	b.n	801243c <RegionCommonComputeRxWindowParameters+0x78>
 801241c:	7afb      	ldrb	r3, [r7, #11]
 801241e:	3b04      	subs	r3, #4
 8012420:	4619      	mov	r1, r3
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	fb03 f101 	mul.w	r1, r3, r1
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801242e:	fb00 f303 	mul.w	r3, r0, r3
 8012432:	440b      	add	r3, r1
 8012434:	0059      	lsls	r1, r3, #1
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	fbb1 f3f3 	udiv	r3, r1, r3
 801243c:	429a      	cmp	r2, r3
 801243e:	bf38      	it	cc
 8012440:	461a      	movcc	r2, r3
 8012442:	69bb      	ldr	r3, [r7, #24]
 8012444:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	009b      	lsls	r3, r3, #2
 801244a:	4619      	mov	r1, r3
 801244c:	69bb      	ldr	r3, [r7, #24]
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	68fa      	ldr	r2, [r7, #12]
 8012452:	fb02 f303 	mul.w	r3, r2, r3
 8012456:	2b00      	cmp	r3, #0
 8012458:	d007      	beq.n	801246a <RegionCommonComputeRxWindowParameters+0xa6>
 801245a:	69bb      	ldr	r3, [r7, #24]
 801245c:	681b      	ldr	r3, [r3, #0]
 801245e:	68fa      	ldr	r2, [r7, #12]
 8012460:	fb02 f303 	mul.w	r3, r2, r3
 8012464:	3301      	adds	r3, #1
 8012466:	085b      	lsrs	r3, r3, #1
 8012468:	e005      	b.n	8012476 <RegionCommonComputeRxWindowParameters+0xb2>
 801246a:	69bb      	ldr	r3, [r7, #24]
 801246c:	681b      	ldr	r3, [r3, #0]
 801246e:	68fa      	ldr	r2, [r7, #12]
 8012470:	fb02 f303 	mul.w	r3, r2, r3
 8012474:	085b      	lsrs	r3, r3, #1
 8012476:	1acb      	subs	r3, r1, r3
 8012478:	683a      	ldr	r2, [r7, #0]
 801247a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801247e:	fb01 f202 	mul.w	r2, r1, r2
 8012482:	1a9b      	subs	r3, r3, r2
 8012484:	2b00      	cmp	r3, #0
 8012486:	dd27      	ble.n	80124d8 <RegionCommonComputeRxWindowParameters+0x114>
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	009b      	lsls	r3, r3, #2
 801248c:	4619      	mov	r1, r3
 801248e:	69bb      	ldr	r3, [r7, #24]
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	68fa      	ldr	r2, [r7, #12]
 8012494:	fb02 f303 	mul.w	r3, r2, r3
 8012498:	2b00      	cmp	r3, #0
 801249a:	d007      	beq.n	80124ac <RegionCommonComputeRxWindowParameters+0xe8>
 801249c:	69bb      	ldr	r3, [r7, #24]
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	68fa      	ldr	r2, [r7, #12]
 80124a2:	fb02 f303 	mul.w	r3, r2, r3
 80124a6:	3301      	adds	r3, #1
 80124a8:	085b      	lsrs	r3, r3, #1
 80124aa:	e005      	b.n	80124b8 <RegionCommonComputeRxWindowParameters+0xf4>
 80124ac:	69bb      	ldr	r3, [r7, #24]
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	68fa      	ldr	r2, [r7, #12]
 80124b2:	fb02 f303 	mul.w	r3, r2, r3
 80124b6:	085b      	lsrs	r3, r3, #1
 80124b8:	1acb      	subs	r3, r1, r3
 80124ba:	683a      	ldr	r2, [r7, #0]
 80124bc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80124c0:	fb01 f202 	mul.w	r2, r1, r2
 80124c4:	1a9b      	subs	r3, r3, r2
 80124c6:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 80124ca:	4a19      	ldr	r2, [pc, #100]	@ (8012530 <RegionCommonComputeRxWindowParameters+0x16c>)
 80124cc:	fb82 1203 	smull	r1, r2, r2, r3
 80124d0:	1192      	asrs	r2, r2, #6
 80124d2:	17db      	asrs	r3, r3, #31
 80124d4:	1ad3      	subs	r3, r2, r3
 80124d6:	e024      	b.n	8012522 <RegionCommonComputeRxWindowParameters+0x15e>
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	009b      	lsls	r3, r3, #2
 80124dc:	4619      	mov	r1, r3
 80124de:	69bb      	ldr	r3, [r7, #24]
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	68fa      	ldr	r2, [r7, #12]
 80124e4:	fb02 f303 	mul.w	r3, r2, r3
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d007      	beq.n	80124fc <RegionCommonComputeRxWindowParameters+0x138>
 80124ec:	69bb      	ldr	r3, [r7, #24]
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	68fa      	ldr	r2, [r7, #12]
 80124f2:	fb02 f303 	mul.w	r3, r2, r3
 80124f6:	3301      	adds	r3, #1
 80124f8:	085b      	lsrs	r3, r3, #1
 80124fa:	e005      	b.n	8012508 <RegionCommonComputeRxWindowParameters+0x144>
 80124fc:	69bb      	ldr	r3, [r7, #24]
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	68fa      	ldr	r2, [r7, #12]
 8012502:	fb02 f303 	mul.w	r3, r2, r3
 8012506:	085b      	lsrs	r3, r3, #1
 8012508:	1acb      	subs	r3, r1, r3
 801250a:	683a      	ldr	r2, [r7, #0]
 801250c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8012510:	fb01 f202 	mul.w	r2, r1, r2
 8012514:	1a9b      	subs	r3, r3, r2
 8012516:	4a06      	ldr	r2, [pc, #24]	@ (8012530 <RegionCommonComputeRxWindowParameters+0x16c>)
 8012518:	fb82 1203 	smull	r1, r2, r2, r3
 801251c:	1192      	asrs	r2, r2, #6
 801251e:	17db      	asrs	r3, r3, #31
 8012520:	1ad3      	subs	r3, r2, r3
 8012522:	69fa      	ldr	r2, [r7, #28]
 8012524:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8012526:	bf00      	nop
 8012528:	3714      	adds	r7, #20
 801252a:	46bd      	mov	sp, r7
 801252c:	bc80      	pop	{r7}
 801252e:	4770      	bx	lr
 8012530:	10624dd3 	.word	0x10624dd3

08012534 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8012534:	b580      	push	{r7, lr}
 8012536:	b086      	sub	sp, #24
 8012538:	af00      	add	r7, sp, #0
 801253a:	4603      	mov	r3, r0
 801253c:	60b9      	str	r1, [r7, #8]
 801253e:	607a      	str	r2, [r7, #4]
 8012540:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 8012542:	2300      	movs	r3, #0
 8012544:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8012546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801254a:	005b      	lsls	r3, r3, #1
 801254c:	4618      	mov	r0, r3
 801254e:	f7ee f991 	bl	8000874 <__aeabi_ui2f>
 8012552:	4603      	mov	r3, r0
 8012554:	4619      	mov	r1, r3
 8012556:	68b8      	ldr	r0, [r7, #8]
 8012558:	f7ee f8da 	bl	8000710 <__aeabi_fsub>
 801255c:	4603      	mov	r3, r0
 801255e:	6879      	ldr	r1, [r7, #4]
 8012560:	4618      	mov	r0, r3
 8012562:	f7ee f8d5 	bl	8000710 <__aeabi_fsub>
 8012566:	4603      	mov	r3, r0
 8012568:	4618      	mov	r0, r3
 801256a:	f7ed ffc5 	bl	80004f8 <__aeabi_f2d>
 801256e:	4602      	mov	r2, r0
 8012570:	460b      	mov	r3, r1
 8012572:	4610      	mov	r0, r2
 8012574:	4619      	mov	r1, r3
 8012576:	f00d fecf 	bl	8020318 <floor>
 801257a:	4602      	mov	r2, r0
 801257c:	460b      	mov	r3, r1
 801257e:	4610      	mov	r0, r2
 8012580:	4619      	mov	r1, r3
 8012582:	f7ee f899 	bl	80006b8 <__aeabi_d2iz>
 8012586:	4603      	mov	r3, r0
 8012588:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 801258a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801258e:	4618      	mov	r0, r3
 8012590:	3718      	adds	r7, #24
 8012592:	46bd      	mov	sp, r7
 8012594:	bd80      	pop	{r7, pc}

08012596 <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8012596:	b590      	push	{r4, r7, lr}
 8012598:	b087      	sub	sp, #28
 801259a:	af00      	add	r7, sp, #0
 801259c:	60f8      	str	r0, [r7, #12]
 801259e:	60b9      	str	r1, [r7, #8]
 80125a0:	607a      	str	r2, [r7, #4]
 80125a2:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 80125a4:	2300      	movs	r3, #0
 80125a6:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 80125a8:	2300      	movs	r3, #0
 80125aa:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80125ac:	2300      	movs	r3, #0
 80125ae:	757b      	strb	r3, [r7, #21]
 80125b0:	2300      	movs	r3, #0
 80125b2:	753b      	strb	r3, [r7, #20]
 80125b4:	e09c      	b.n	80126f0 <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 80125b6:	2300      	movs	r3, #0
 80125b8:	74fb      	strb	r3, [r7, #19]
 80125ba:	e08f      	b.n	80126dc <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 80125bc:	68fb      	ldr	r3, [r7, #12]
 80125be:	685a      	ldr	r2, [r3, #4]
 80125c0:	7d3b      	ldrb	r3, [r7, #20]
 80125c2:	005b      	lsls	r3, r3, #1
 80125c4:	4413      	add	r3, r2
 80125c6:	881b      	ldrh	r3, [r3, #0]
 80125c8:	461a      	mov	r2, r3
 80125ca:	7cfb      	ldrb	r3, [r7, #19]
 80125cc:	fa42 f303 	asr.w	r3, r2, r3
 80125d0:	f003 0301 	and.w	r3, r3, #1
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d07e      	beq.n	80126d6 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 80125d8:	68fb      	ldr	r3, [r7, #12]
 80125da:	689a      	ldr	r2, [r3, #8]
 80125dc:	7d79      	ldrb	r1, [r7, #21]
 80125de:	7cfb      	ldrb	r3, [r7, #19]
 80125e0:	440b      	add	r3, r1
 80125e2:	4619      	mov	r1, r3
 80125e4:	460b      	mov	r3, r1
 80125e6:	005b      	lsls	r3, r3, #1
 80125e8:	440b      	add	r3, r1
 80125ea:	009b      	lsls	r3, r3, #2
 80125ec:	4413      	add	r3, r2
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d06b      	beq.n	80126cc <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	781b      	ldrb	r3, [r3, #0]
 80125f8:	f083 0301 	eor.w	r3, r3, #1
 80125fc:	b2db      	uxtb	r3, r3
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d011      	beq.n	8012626 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8012606:	2b00      	cmp	r3, #0
 8012608:	d00d      	beq.n	8012626 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	695a      	ldr	r2, [r3, #20]
 801260e:	7d3b      	ldrb	r3, [r7, #20]
 8012610:	005b      	lsls	r3, r3, #1
 8012612:	4413      	add	r3, r2
 8012614:	881b      	ldrh	r3, [r3, #0]
 8012616:	461a      	mov	r2, r3
 8012618:	7cfb      	ldrb	r3, [r7, #19]
 801261a:	fa42 f303 	asr.w	r3, r2, r3
 801261e:	f003 0301 	and.w	r3, r3, #1
 8012622:	2b00      	cmp	r3, #0
 8012624:	d054      	beq.n	80126d0 <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	785b      	ldrb	r3, [r3, #1]
 801262a:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 801262c:	68fb      	ldr	r3, [r7, #12]
 801262e:	689a      	ldr	r2, [r3, #8]
 8012630:	7d79      	ldrb	r1, [r7, #21]
 8012632:	7cfb      	ldrb	r3, [r7, #19]
 8012634:	440b      	add	r3, r1
 8012636:	4619      	mov	r1, r3
 8012638:	460b      	mov	r3, r1
 801263a:	005b      	lsls	r3, r3, #1
 801263c:	440b      	add	r3, r1
 801263e:	009b      	lsls	r3, r3, #2
 8012640:	4413      	add	r3, r2
 8012642:	7a1b      	ldrb	r3, [r3, #8]
 8012644:	f343 0303 	sbfx	r3, r3, #0, #4
 8012648:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801264a:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	689a      	ldr	r2, [r3, #8]
 8012650:	7d79      	ldrb	r1, [r7, #21]
 8012652:	7cfb      	ldrb	r3, [r7, #19]
 8012654:	440b      	add	r3, r1
 8012656:	4619      	mov	r1, r3
 8012658:	460b      	mov	r3, r1
 801265a:	005b      	lsls	r3, r3, #1
 801265c:	440b      	add	r3, r1
 801265e:	009b      	lsls	r3, r3, #2
 8012660:	4413      	add	r3, r2
 8012662:	7a1b      	ldrb	r3, [r3, #8]
 8012664:	f343 1303 	sbfx	r3, r3, #4, #4
 8012668:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 801266a:	461a      	mov	r2, r3
 801266c:	4621      	mov	r1, r4
 801266e:	f7ff fbe8 	bl	8011e42 <RegionCommonValueInRange>
 8012672:	4603      	mov	r3, r0
 8012674:	2b00      	cmp	r3, #0
 8012676:	d02d      	beq.n	80126d4 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	68da      	ldr	r2, [r3, #12]
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	6899      	ldr	r1, [r3, #8]
 8012680:	7d78      	ldrb	r0, [r7, #21]
 8012682:	7cfb      	ldrb	r3, [r7, #19]
 8012684:	4403      	add	r3, r0
 8012686:	4618      	mov	r0, r3
 8012688:	4603      	mov	r3, r0
 801268a:	005b      	lsls	r3, r3, #1
 801268c:	4403      	add	r3, r0
 801268e:	009b      	lsls	r3, r3, #2
 8012690:	440b      	add	r3, r1
 8012692:	7a5b      	ldrb	r3, [r3, #9]
 8012694:	4619      	mov	r1, r3
 8012696:	460b      	mov	r3, r1
 8012698:	005b      	lsls	r3, r3, #1
 801269a:	440b      	add	r3, r1
 801269c:	00db      	lsls	r3, r3, #3
 801269e:	4413      	add	r3, r2
 80126a0:	7d1b      	ldrb	r3, [r3, #20]
 80126a2:	f083 0301 	eor.w	r3, r3, #1
 80126a6:	b2db      	uxtb	r3, r3
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d003      	beq.n	80126b4 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 80126ac:	7dbb      	ldrb	r3, [r7, #22]
 80126ae:	3301      	adds	r3, #1
 80126b0:	75bb      	strb	r3, [r7, #22]
                    continue;
 80126b2:	e010      	b.n	80126d6 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 80126b4:	7dfb      	ldrb	r3, [r7, #23]
 80126b6:	1c5a      	adds	r2, r3, #1
 80126b8:	75fa      	strb	r2, [r7, #23]
 80126ba:	461a      	mov	r2, r3
 80126bc:	68bb      	ldr	r3, [r7, #8]
 80126be:	4413      	add	r3, r2
 80126c0:	7d79      	ldrb	r1, [r7, #21]
 80126c2:	7cfa      	ldrb	r2, [r7, #19]
 80126c4:	440a      	add	r2, r1
 80126c6:	b2d2      	uxtb	r2, r2
 80126c8:	701a      	strb	r2, [r3, #0]
 80126ca:	e004      	b.n	80126d6 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 80126cc:	bf00      	nop
 80126ce:	e002      	b.n	80126d6 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 80126d0:	bf00      	nop
 80126d2:	e000      	b.n	80126d6 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 80126d4:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 80126d6:	7cfb      	ldrb	r3, [r7, #19]
 80126d8:	3301      	adds	r3, #1
 80126da:	74fb      	strb	r3, [r7, #19]
 80126dc:	7cfb      	ldrb	r3, [r7, #19]
 80126de:	2b0f      	cmp	r3, #15
 80126e0:	f67f af6c 	bls.w	80125bc <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80126e4:	7d7b      	ldrb	r3, [r7, #21]
 80126e6:	3310      	adds	r3, #16
 80126e8:	757b      	strb	r3, [r7, #21]
 80126ea:	7d3b      	ldrb	r3, [r7, #20]
 80126ec:	3301      	adds	r3, #1
 80126ee:	753b      	strb	r3, [r7, #20]
 80126f0:	7d7b      	ldrb	r3, [r7, #21]
 80126f2:	b29a      	uxth	r2, r3
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	8a1b      	ldrh	r3, [r3, #16]
 80126f8:	429a      	cmp	r2, r3
 80126fa:	f4ff af5c 	bcc.w	80125b6 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	7dfa      	ldrb	r2, [r7, #23]
 8012702:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8012704:	683b      	ldr	r3, [r7, #0]
 8012706:	7dba      	ldrb	r2, [r7, #22]
 8012708:	701a      	strb	r2, [r3, #0]
}
 801270a:	bf00      	nop
 801270c:	371c      	adds	r7, #28
 801270e:	46bd      	mov	sp, r7
 8012710:	bd90      	pop	{r4, r7, pc}

08012712 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8012712:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012714:	b08b      	sub	sp, #44	@ 0x2c
 8012716:	af04      	add	r7, sp, #16
 8012718:	60f8      	str	r0, [r7, #12]
 801271a:	60b9      	str	r1, [r7, #8]
 801271c:	607a      	str	r2, [r7, #4]
 801271e:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	685b      	ldr	r3, [r3, #4]
 8012724:	4618      	mov	r0, r3
 8012726:	f007 fe7f 	bl	801a428 <UTIL_TIMER_GetElapsedTime>
 801272a:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	681a      	ldr	r2, [r3, #0]
 8012730:	697b      	ldr	r3, [r7, #20]
 8012732:	1ad2      	subs	r2, r2, r3
 8012734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012736:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8012738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801273a:	2201      	movs	r2, #1
 801273c:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 801273e:	683b      	ldr	r3, [r7, #0]
 8012740:	2200      	movs	r2, #0
 8012742:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8012744:	68fb      	ldr	r3, [r7, #12]
 8012746:	685b      	ldr	r3, [r3, #4]
 8012748:	2b00      	cmp	r3, #0
 801274a:	d004      	beq.n	8012756 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 801274c:	68fb      	ldr	r3, [r7, #12]
 801274e:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8012750:	697a      	ldr	r2, [r7, #20]
 8012752:	429a      	cmp	r2, r3
 8012754:	d32b      	bcc.n	80127ae <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 8012756:	68bb      	ldr	r3, [r7, #8]
 8012758:	2200      	movs	r2, #0
 801275a:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	69db      	ldr	r3, [r3, #28]
 8012760:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 8012766:	68dd      	ldr	r5, [r3, #12]
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	7a5e      	ldrb	r6, [r3, #9]
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	f893 c008 	ldrb.w	ip, [r3, #8]
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	7d1b      	ldrb	r3, [r3, #20]
 8012776:	68fa      	ldr	r2, [r7, #12]
 8012778:	6992      	ldr	r2, [r2, #24]
 801277a:	9203      	str	r2, [sp, #12]
 801277c:	68fa      	ldr	r2, [r7, #12]
 801277e:	f10d 0e04 	add.w	lr, sp, #4
 8012782:	320c      	adds	r2, #12
 8012784:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012788:	e88e 0003 	stmia.w	lr, {r0, r1}
 801278c:	9300      	str	r3, [sp, #0]
 801278e:	4663      	mov	r3, ip
 8012790:	4632      	mov	r2, r6
 8012792:	4629      	mov	r1, r5
 8012794:	4620      	mov	r0, r4
 8012796:	f7ff fc25 	bl	8011fe4 <RegionCommonUpdateBandTimeOff>
 801279a:	4602      	mov	r2, r0
 801279c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801279e:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 80127a0:	68fb      	ldr	r3, [r7, #12]
 80127a2:	69d8      	ldr	r0, [r3, #28]
 80127a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127a6:	683a      	ldr	r2, [r7, #0]
 80127a8:	6879      	ldr	r1, [r7, #4]
 80127aa:	f7ff fef4 	bl	8012596 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 80127ae:	683b      	ldr	r3, [r7, #0]
 80127b0:	781b      	ldrb	r3, [r3, #0]
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d004      	beq.n	80127c0 <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 80127b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80127b8:	2200      	movs	r2, #0
 80127ba:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 80127bc:	2300      	movs	r3, #0
 80127be:	e006      	b.n	80127ce <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 80127c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127c2:	781b      	ldrb	r3, [r3, #0]
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d001      	beq.n	80127cc <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 80127c8:	230b      	movs	r3, #11
 80127ca:	e000      	b.n	80127ce <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80127cc:	230c      	movs	r3, #12
    }
}
 80127ce:	4618      	mov	r0, r3
 80127d0:	371c      	adds	r7, #28
 80127d2:	46bd      	mov	sp, r7
 80127d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080127d6 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 80127d6:	b5b0      	push	{r4, r5, r7, lr}
 80127d8:	b086      	sub	sp, #24
 80127da:	af02      	add	r7, sp, #8
 80127dc:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	781b      	ldrb	r3, [r3, #0]
 80127e2:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	f993 2000 	ldrsb.w	r2, [r3]
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80127f0:	429a      	cmp	r2, r3
 80127f2:	d103      	bne.n	80127fc <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80127fa:	e026      	b.n	801284a <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 80127fc:	7bfb      	ldrb	r3, [r7, #15]
 80127fe:	3b01      	subs	r3, #1
 8012800:	b2db      	uxtb	r3, r3
 8012802:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801280a:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801280e:	429a      	cmp	r2, r3
 8012810:	d019      	beq.n	8012846 <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	78d8      	ldrb	r0, [r3, #3]
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	6859      	ldr	r1, [r3, #4]
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	f993 5002 	ldrsb.w	r5, [r3, #2]
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8012826:	687a      	ldr	r2, [r7, #4]
 8012828:	6892      	ldr	r2, [r2, #8]
 801282a:	f997 400f 	ldrsb.w	r4, [r7, #15]
 801282e:	9201      	str	r2, [sp, #4]
 8012830:	9300      	str	r3, [sp, #0]
 8012832:	462b      	mov	r3, r5
 8012834:	4622      	mov	r2, r4
 8012836:	f7ff fa92 	bl	8011d5e <RegionCommonChanVerifyDr>
 801283a:	4603      	mov	r3, r0
 801283c:	f083 0301 	eor.w	r3, r3, #1
 8012840:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 8012842:	2b00      	cmp	r3, #0
 8012844:	d1da      	bne.n	80127fc <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8012846:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 801284a:	4618      	mov	r0, r3
 801284c:	3710      	adds	r7, #16
 801284e:	46bd      	mov	sp, r7
 8012850:	bdb0      	pop	{r4, r5, r7, pc}

08012852 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 8012852:	b480      	push	{r7}
 8012854:	b083      	sub	sp, #12
 8012856:	af00      	add	r7, sp, #0
 8012858:	4603      	mov	r3, r0
 801285a:	460a      	mov	r2, r1
 801285c:	71fb      	strb	r3, [r7, #7]
 801285e:	4613      	mov	r3, r2
 8012860:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 8012862:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8012866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801286a:	4293      	cmp	r3, r2
 801286c:	bfb8      	it	lt
 801286e:	4613      	movlt	r3, r2
 8012870:	b25b      	sxtb	r3, r3
}
 8012872:	4618      	mov	r0, r3
 8012874:	370c      	adds	r7, #12
 8012876:	46bd      	mov	sp, r7
 8012878:	bc80      	pop	{r7}
 801287a:	4770      	bx	lr

0801287c <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 801287c:	b480      	push	{r7}
 801287e:	b083      	sub	sp, #12
 8012880:	af00      	add	r7, sp, #0
 8012882:	6078      	str	r0, [r7, #4]
 8012884:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	009b      	lsls	r3, r3, #2
 801288a:	683a      	ldr	r2, [r7, #0]
 801288c:	4413      	add	r3, r2
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	4a07      	ldr	r2, [pc, #28]	@ (80128b0 <RegionCommonGetBandwidth+0x34>)
 8012892:	4293      	cmp	r3, r2
 8012894:	d004      	beq.n	80128a0 <RegionCommonGetBandwidth+0x24>
 8012896:	4a07      	ldr	r2, [pc, #28]	@ (80128b4 <RegionCommonGetBandwidth+0x38>)
 8012898:	4293      	cmp	r3, r2
 801289a:	d003      	beq.n	80128a4 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 801289c:	2300      	movs	r3, #0
 801289e:	e002      	b.n	80128a6 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 80128a0:	2301      	movs	r3, #1
 80128a2:	e000      	b.n	80128a6 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 80128a4:	2302      	movs	r3, #2
    }
}
 80128a6:	4618      	mov	r0, r3
 80128a8:	370c      	adds	r7, #12
 80128aa:	46bd      	mov	sp, r7
 80128ac:	bc80      	pop	{r7}
 80128ae:	4770      	bx	lr
 80128b0:	0003d090 	.word	0x0003d090
 80128b4:	0007a120 	.word	0x0007a120

080128b8 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 80128b8:	b580      	push	{r7, lr}
 80128ba:	b086      	sub	sp, #24
 80128bc:	af04      	add	r7, sp, #16
 80128be:	4603      	mov	r3, r0
 80128c0:	6039      	str	r1, [r7, #0]
 80128c2:	71fb      	strb	r3, [r7, #7]
 80128c4:	4613      	mov	r3, r2
 80128c6:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 80128c8:	79fb      	ldrb	r3, [r7, #7]
 80128ca:	2b05      	cmp	r3, #5
 80128cc:	d810      	bhi.n	80128f0 <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 80128ce:	79fb      	ldrb	r3, [r7, #7]
 80128d0:	4a0f      	ldr	r2, [pc, #60]	@ (8012910 <RegionCommonRxConfigPrint+0x58>)
 80128d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80128d6:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80128da:	9202      	str	r2, [sp, #8]
 80128dc:	683a      	ldr	r2, [r7, #0]
 80128de:	9201      	str	r2, [sp, #4]
 80128e0:	9300      	str	r3, [sp, #0]
 80128e2:	4b0c      	ldr	r3, [pc, #48]	@ (8012914 <RegionCommonRxConfigPrint+0x5c>)
 80128e4:	2201      	movs	r2, #1
 80128e6:	2100      	movs	r1, #0
 80128e8:	2002      	movs	r0, #2
 80128ea:	f006 fe17 	bl	801951c <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 80128ee:	e00a      	b.n	8012906 <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 80128f0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80128f4:	9301      	str	r3, [sp, #4]
 80128f6:	683b      	ldr	r3, [r7, #0]
 80128f8:	9300      	str	r3, [sp, #0]
 80128fa:	4b07      	ldr	r3, [pc, #28]	@ (8012918 <RegionCommonRxConfigPrint+0x60>)
 80128fc:	2201      	movs	r2, #1
 80128fe:	2100      	movs	r1, #0
 8012900:	2002      	movs	r0, #2
 8012902:	f006 fe0b 	bl	801951c <UTIL_ADV_TRACE_COND_FSend>
}
 8012906:	bf00      	nop
 8012908:	3708      	adds	r7, #8
 801290a:	46bd      	mov	sp, r7
 801290c:	bd80      	pop	{r7, pc}
 801290e:	bf00      	nop
 8012910:	200000bc 	.word	0x200000bc
 8012914:	08020754 	.word	0x08020754
 8012918:	08020774 	.word	0x08020774

0801291c <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 801291c:	b580      	push	{r7, lr}
 801291e:	b084      	sub	sp, #16
 8012920:	af02      	add	r7, sp, #8
 8012922:	6078      	str	r0, [r7, #4]
 8012924:	460b      	mov	r3, r1
 8012926:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8012928:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801292c:	9301      	str	r3, [sp, #4]
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	9300      	str	r3, [sp, #0]
 8012932:	4b05      	ldr	r3, [pc, #20]	@ (8012948 <RegionCommonTxConfigPrint+0x2c>)
 8012934:	2201      	movs	r2, #1
 8012936:	2100      	movs	r1, #0
 8012938:	2002      	movs	r0, #2
 801293a:	f006 fdef 	bl	801951c <UTIL_ADV_TRACE_COND_FSend>
}
 801293e:	bf00      	nop
 8012940:	3708      	adds	r7, #8
 8012942:	46bd      	mov	sp, r7
 8012944:	bd80      	pop	{r7, pc}
 8012946:	bf00      	nop
 8012948:	08020790 	.word	0x08020790

0801294c <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 801294c:	b580      	push	{r7, lr}
 801294e:	b082      	sub	sp, #8
 8012950:	af00      	add	r7, sp, #0
 8012952:	6078      	str	r0, [r7, #4]
 8012954:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8012956:	4b2d      	ldr	r3, [pc, #180]	@ (8012a0c <VerifyRfFreq+0xc0>)
 8012958:	6a1b      	ldr	r3, [r3, #32]
 801295a:	6878      	ldr	r0, [r7, #4]
 801295c:	4798      	blx	r3
 801295e:	4603      	mov	r3, r0
 8012960:	f083 0301 	eor.w	r3, r3, #1
 8012964:	b2db      	uxtb	r3, r3
 8012966:	2b00      	cmp	r3, #0
 8012968:	d001      	beq.n	801296e <VerifyRfFreq+0x22>
    {
        return false;
 801296a:	2300      	movs	r3, #0
 801296c:	e04a      	b.n	8012a04 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	4a27      	ldr	r2, [pc, #156]	@ (8012a10 <VerifyRfFreq+0xc4>)
 8012972:	4293      	cmp	r3, r2
 8012974:	d307      	bcc.n	8012986 <VerifyRfFreq+0x3a>
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	4a26      	ldr	r2, [pc, #152]	@ (8012a14 <VerifyRfFreq+0xc8>)
 801297a:	4293      	cmp	r3, r2
 801297c:	d803      	bhi.n	8012986 <VerifyRfFreq+0x3a>
    {
        *band = 2;
 801297e:	683b      	ldr	r3, [r7, #0]
 8012980:	2202      	movs	r2, #2
 8012982:	701a      	strb	r2, [r3, #0]
 8012984:	e03d      	b.n	8012a02 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	4a22      	ldr	r2, [pc, #136]	@ (8012a14 <VerifyRfFreq+0xc8>)
 801298a:	4293      	cmp	r3, r2
 801298c:	d907      	bls.n	801299e <VerifyRfFreq+0x52>
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	4a21      	ldr	r2, [pc, #132]	@ (8012a18 <VerifyRfFreq+0xcc>)
 8012992:	4293      	cmp	r3, r2
 8012994:	d803      	bhi.n	801299e <VerifyRfFreq+0x52>
    {
        *band = 0;
 8012996:	683b      	ldr	r3, [r7, #0]
 8012998:	2200      	movs	r2, #0
 801299a:	701a      	strb	r2, [r3, #0]
 801299c:	e031      	b.n	8012a02 <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	4a1d      	ldr	r2, [pc, #116]	@ (8012a18 <VerifyRfFreq+0xcc>)
 80129a2:	4293      	cmp	r3, r2
 80129a4:	d907      	bls.n	80129b6 <VerifyRfFreq+0x6a>
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	4a1c      	ldr	r2, [pc, #112]	@ (8012a1c <VerifyRfFreq+0xd0>)
 80129aa:	4293      	cmp	r3, r2
 80129ac:	d803      	bhi.n	80129b6 <VerifyRfFreq+0x6a>
    {
        *band = 1;
 80129ae:	683b      	ldr	r3, [r7, #0]
 80129b0:	2201      	movs	r2, #1
 80129b2:	701a      	strb	r2, [r3, #0]
 80129b4:	e025      	b.n	8012a02 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	4a19      	ldr	r2, [pc, #100]	@ (8012a20 <VerifyRfFreq+0xd4>)
 80129ba:	4293      	cmp	r3, r2
 80129bc:	d907      	bls.n	80129ce <VerifyRfFreq+0x82>
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	4a18      	ldr	r2, [pc, #96]	@ (8012a24 <VerifyRfFreq+0xd8>)
 80129c2:	4293      	cmp	r3, r2
 80129c4:	d803      	bhi.n	80129ce <VerifyRfFreq+0x82>
    {
        *band = 5;
 80129c6:	683b      	ldr	r3, [r7, #0]
 80129c8:	2205      	movs	r2, #5
 80129ca:	701a      	strb	r2, [r3, #0]
 80129cc:	e019      	b.n	8012a02 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	4a15      	ldr	r2, [pc, #84]	@ (8012a28 <VerifyRfFreq+0xdc>)
 80129d2:	4293      	cmp	r3, r2
 80129d4:	d907      	bls.n	80129e6 <VerifyRfFreq+0x9a>
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	4a14      	ldr	r2, [pc, #80]	@ (8012a2c <VerifyRfFreq+0xe0>)
 80129da:	4293      	cmp	r3, r2
 80129dc:	d803      	bhi.n	80129e6 <VerifyRfFreq+0x9a>
    {
        *band = 3;
 80129de:	683b      	ldr	r3, [r7, #0]
 80129e0:	2203      	movs	r2, #3
 80129e2:	701a      	strb	r2, [r3, #0]
 80129e4:	e00d      	b.n	8012a02 <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	4a11      	ldr	r2, [pc, #68]	@ (8012a30 <VerifyRfFreq+0xe4>)
 80129ea:	4293      	cmp	r3, r2
 80129ec:	d307      	bcc.n	80129fe <VerifyRfFreq+0xb2>
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	4a10      	ldr	r2, [pc, #64]	@ (8012a34 <VerifyRfFreq+0xe8>)
 80129f2:	4293      	cmp	r3, r2
 80129f4:	d803      	bhi.n	80129fe <VerifyRfFreq+0xb2>
    {
        *band = 4;
 80129f6:	683b      	ldr	r3, [r7, #0]
 80129f8:	2204      	movs	r2, #4
 80129fa:	701a      	strb	r2, [r3, #0]
 80129fc:	e001      	b.n	8012a02 <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 80129fe:	2300      	movs	r3, #0
 8012a00:	e000      	b.n	8012a04 <VerifyRfFreq+0xb8>
    }
    return true;
 8012a02:	2301      	movs	r3, #1
}
 8012a04:	4618      	mov	r0, r3
 8012a06:	3708      	adds	r7, #8
 8012a08:	46bd      	mov	sp, r7
 8012a0a:	bd80      	pop	{r7, pc}
 8012a0c:	080210e8 	.word	0x080210e8
 8012a10:	337055c0 	.word	0x337055c0
 8012a14:	338eda3f 	.word	0x338eda3f
 8012a18:	33bca100 	.word	0x33bca100
 8012a1c:	33c5c8c0 	.word	0x33c5c8c0
 8012a20:	33c74f5f 	.word	0x33c74f5f
 8012a24:	33cef080 	.word	0x33cef080
 8012a28:	33d1fdbf 	.word	0x33d1fdbf
 8012a2c:	33d5ce50 	.word	0x33d5ce50
 8012a30:	33d691a0 	.word	0x33d691a0
 8012a34:	33db2580 	.word	0x33db2580

08012a38 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8012a38:	b590      	push	{r4, r7, lr}
 8012a3a:	b08b      	sub	sp, #44	@ 0x2c
 8012a3c:	af04      	add	r7, sp, #16
 8012a3e:	4603      	mov	r3, r0
 8012a40:	460a      	mov	r2, r1
 8012a42:	71fb      	strb	r3, [r7, #7]
 8012a44:	4613      	mov	r3, r2
 8012a46:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 8012a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012a4c:	4a1f      	ldr	r2, [pc, #124]	@ (8012acc <GetTimeOnAir+0x94>)
 8012a4e:	5cd3      	ldrb	r3, [r2, r3]
 8012a50:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 8012a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012a56:	491e      	ldr	r1, [pc, #120]	@ (8012ad0 <GetTimeOnAir+0x98>)
 8012a58:	4618      	mov	r0, r3
 8012a5a:	f7ff ff0f 	bl	801287c <RegionCommonGetBandwidth>
 8012a5e:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 8012a60:	2300      	movs	r3, #0
 8012a62:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 8012a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012a68:	2b07      	cmp	r3, #7
 8012a6a:	d118      	bne.n	8012a9e <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 8012a6c:	4b19      	ldr	r3, [pc, #100]	@ (8012ad4 <GetTimeOnAir+0x9c>)
 8012a6e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012a70:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012a74:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8012a78:	fb02 f303 	mul.w	r3, r2, r3
 8012a7c:	4619      	mov	r1, r3
 8012a7e:	88bb      	ldrh	r3, [r7, #4]
 8012a80:	b2db      	uxtb	r3, r3
 8012a82:	2201      	movs	r2, #1
 8012a84:	9203      	str	r2, [sp, #12]
 8012a86:	9302      	str	r3, [sp, #8]
 8012a88:	2300      	movs	r3, #0
 8012a8a:	9301      	str	r3, [sp, #4]
 8012a8c:	2305      	movs	r3, #5
 8012a8e:	9300      	str	r3, [sp, #0]
 8012a90:	2300      	movs	r3, #0
 8012a92:	460a      	mov	r2, r1
 8012a94:	68f9      	ldr	r1, [r7, #12]
 8012a96:	2000      	movs	r0, #0
 8012a98:	47a0      	blx	r4
 8012a9a:	6178      	str	r0, [r7, #20]
 8012a9c:	e011      	b.n	8012ac2 <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8012a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8012ad4 <GetTimeOnAir+0x9c>)
 8012aa0:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012aa2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8012aa6:	88bb      	ldrh	r3, [r7, #4]
 8012aa8:	b2db      	uxtb	r3, r3
 8012aaa:	2101      	movs	r1, #1
 8012aac:	9103      	str	r1, [sp, #12]
 8012aae:	9302      	str	r3, [sp, #8]
 8012ab0:	2300      	movs	r3, #0
 8012ab2:	9301      	str	r3, [sp, #4]
 8012ab4:	2308      	movs	r3, #8
 8012ab6:	9300      	str	r3, [sp, #0]
 8012ab8:	2301      	movs	r3, #1
 8012aba:	68f9      	ldr	r1, [r7, #12]
 8012abc:	2001      	movs	r0, #1
 8012abe:	47a0      	blx	r4
 8012ac0:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 8012ac2:	697b      	ldr	r3, [r7, #20]
}
 8012ac4:	4618      	mov	r0, r3
 8012ac6:	371c      	adds	r7, #28
 8012ac8:	46bd      	mov	sp, r7
 8012aca:	bd90      	pop	{r4, r7, pc}
 8012acc:	08020ca8 	.word	0x08020ca8
 8012ad0:	08020cb0 	.word	0x08020cb0
 8012ad4:	080210e8 	.word	0x080210e8

08012ad8 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8012ad8:	b580      	push	{r7, lr}
 8012ada:	b088      	sub	sp, #32
 8012adc:	af00      	add	r7, sp, #0
 8012ade:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8012ae0:	2300      	movs	r3, #0
 8012ae2:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	781b      	ldrb	r3, [r3, #0]
 8012ae8:	3b01      	subs	r3, #1
 8012aea:	2b37      	cmp	r3, #55	@ 0x37
 8012aec:	f200 8122 	bhi.w	8012d34 <RegionEU868GetPhyParam+0x25c>
 8012af0:	a201      	add	r2, pc, #4	@ (adr r2, 8012af8 <RegionEU868GetPhyParam+0x20>)
 8012af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012af6:	bf00      	nop
 8012af8:	08012bd9 	.word	0x08012bd9
 8012afc:	08012bdf 	.word	0x08012bdf
 8012b00:	08012d35 	.word	0x08012d35
 8012b04:	08012d35 	.word	0x08012d35
 8012b08:	08012d35 	.word	0x08012d35
 8012b0c:	08012be5 	.word	0x08012be5
 8012b10:	08012d35 	.word	0x08012d35
 8012b14:	08012c1f 	.word	0x08012c1f
 8012b18:	08012d35 	.word	0x08012d35
 8012b1c:	08012c25 	.word	0x08012c25
 8012b20:	08012c2b 	.word	0x08012c2b
 8012b24:	08012c31 	.word	0x08012c31
 8012b28:	08012c37 	.word	0x08012c37
 8012b2c:	08012c47 	.word	0x08012c47
 8012b30:	08012c57 	.word	0x08012c57
 8012b34:	08012c5d 	.word	0x08012c5d
 8012b38:	08012c65 	.word	0x08012c65
 8012b3c:	08012c6d 	.word	0x08012c6d
 8012b40:	08012c75 	.word	0x08012c75
 8012b44:	08012c7d 	.word	0x08012c7d
 8012b48:	08012c85 	.word	0x08012c85
 8012b4c:	08012c99 	.word	0x08012c99
 8012b50:	08012c9f 	.word	0x08012c9f
 8012b54:	08012ca5 	.word	0x08012ca5
 8012b58:	08012cab 	.word	0x08012cab
 8012b5c:	08012cb7 	.word	0x08012cb7
 8012b60:	08012cc3 	.word	0x08012cc3
 8012b64:	08012cc9 	.word	0x08012cc9
 8012b68:	08012cd1 	.word	0x08012cd1
 8012b6c:	08012cd7 	.word	0x08012cd7
 8012b70:	08012cdd 	.word	0x08012cdd
 8012b74:	08012ce5 	.word	0x08012ce5
 8012b78:	08012beb 	.word	0x08012beb
 8012b7c:	08012d35 	.word	0x08012d35
 8012b80:	08012d35 	.word	0x08012d35
 8012b84:	08012d35 	.word	0x08012d35
 8012b88:	08012d35 	.word	0x08012d35
 8012b8c:	08012d35 	.word	0x08012d35
 8012b90:	08012d35 	.word	0x08012d35
 8012b94:	08012d35 	.word	0x08012d35
 8012b98:	08012d35 	.word	0x08012d35
 8012b9c:	08012d35 	.word	0x08012d35
 8012ba0:	08012d35 	.word	0x08012d35
 8012ba4:	08012d35 	.word	0x08012d35
 8012ba8:	08012d35 	.word	0x08012d35
 8012bac:	08012d35 	.word	0x08012d35
 8012bb0:	08012ceb 	.word	0x08012ceb
 8012bb4:	08012cf1 	.word	0x08012cf1
 8012bb8:	08012cff 	.word	0x08012cff
 8012bbc:	08012d35 	.word	0x08012d35
 8012bc0:	08012d35 	.word	0x08012d35
 8012bc4:	08012d05 	.word	0x08012d05
 8012bc8:	08012d0b 	.word	0x08012d0b
 8012bcc:	08012d35 	.word	0x08012d35
 8012bd0:	08012d11 	.word	0x08012d11
 8012bd4:	08012d21 	.word	0x08012d21
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8012bd8:	2300      	movs	r3, #0
 8012bda:	61bb      	str	r3, [r7, #24]
            break;
 8012bdc:	e0ab      	b.n	8012d36 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 8012bde:	2300      	movs	r3, #0
 8012be0:	61bb      	str	r3, [r7, #24]
            break;
 8012be2:	e0a8      	b.n	8012d36 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8012be4:	2300      	movs	r3, #0
 8012be6:	61bb      	str	r3, [r7, #24]
            break;
 8012be8:	e0a5      	b.n	8012d36 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8012bf0:	733b      	strb	r3, [r7, #12]
 8012bf2:	2307      	movs	r3, #7
 8012bf4:	737b      	strb	r3, [r7, #13]
 8012bf6:	2300      	movs	r3, #0
 8012bf8:	73bb      	strb	r3, [r7, #14]
 8012bfa:	2310      	movs	r3, #16
 8012bfc:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8012bfe:	4b51      	ldr	r3, [pc, #324]	@ (8012d44 <RegionEU868GetPhyParam+0x26c>)
 8012c00:	681b      	ldr	r3, [r3, #0]
 8012c02:	f503 7358 	add.w	r3, r3, #864	@ 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8012c06:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8012c08:	4b4e      	ldr	r3, [pc, #312]	@ (8012d44 <RegionEU868GetPhyParam+0x26c>)
 8012c0a:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8012c0c:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8012c0e:	f107 030c 	add.w	r3, r7, #12
 8012c12:	4618      	mov	r0, r3
 8012c14:	f7ff fddf 	bl	80127d6 <RegionCommonGetNextLowerTxDr>
 8012c18:	4603      	mov	r3, r0
 8012c1a:	61bb      	str	r3, [r7, #24]
            break;
 8012c1c:	e08b      	b.n	8012d36 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 8012c1e:	2300      	movs	r3, #0
 8012c20:	61bb      	str	r3, [r7, #24]
            break;
 8012c22:	e088      	b.n	8012d36 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8012c24:	2300      	movs	r3, #0
 8012c26:	61bb      	str	r3, [r7, #24]
            break;
 8012c28:	e085      	b.n	8012d36 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8012c2a:	2340      	movs	r3, #64	@ 0x40
 8012c2c:	61bb      	str	r3, [r7, #24]
            break;
 8012c2e:	e082      	b.n	8012d36 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8012c30:	2320      	movs	r3, #32
 8012c32:	61bb      	str	r3, [r7, #24]
            break;
 8012c34:	e07f      	b.n	8012d36 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8012c3c:	461a      	mov	r2, r3
 8012c3e:	4b42      	ldr	r3, [pc, #264]	@ (8012d48 <RegionEU868GetPhyParam+0x270>)
 8012c40:	5c9b      	ldrb	r3, [r3, r2]
 8012c42:	61bb      	str	r3, [r7, #24]
            break;
 8012c44:	e077      	b.n	8012d36 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8012c4c:	461a      	mov	r2, r3
 8012c4e:	4b3f      	ldr	r3, [pc, #252]	@ (8012d4c <RegionEU868GetPhyParam+0x274>)
 8012c50:	5c9b      	ldrb	r3, [r3, r2]
 8012c52:	61bb      	str	r3, [r7, #24]
            break;
 8012c54:	e06f      	b.n	8012d36 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 8012c56:	2301      	movs	r3, #1
 8012c58:	61bb      	str	r3, [r7, #24]
            break;
 8012c5a:	e06c      	b.n	8012d36 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 8012c5c:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8012c60:	61bb      	str	r3, [r7, #24]
            break;
 8012c62:	e068      	b.n	8012d36 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8012c64:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8012c68:	61bb      	str	r3, [r7, #24]
            break;
 8012c6a:	e064      	b.n	8012d36 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8012c6c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8012c70:	61bb      	str	r3, [r7, #24]
            break;
 8012c72:	e060      	b.n	8012d36 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8012c74:	f241 3388 	movw	r3, #5000	@ 0x1388
 8012c78:	61bb      	str	r3, [r7, #24]
            break;
 8012c7a:	e05c      	b.n	8012d36 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8012c7c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8012c80:	61bb      	str	r3, [r7, #24]
            break;
 8012c82:	e058      	b.n	8012d36 <RegionEU868GetPhyParam+0x25e>
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))

        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8012c84:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8012c88:	4831      	ldr	r0, [pc, #196]	@ (8012d50 <RegionEU868GetPhyParam+0x278>)
 8012c8a:	f003 fecb 	bl	8016a24 <randr>
 8012c8e:	4603      	mov	r3, r0
 8012c90:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8012c94:	61bb      	str	r3, [r7, #24]
            break;
 8012c96:	e04e      	b.n	8012d36 <RegionEU868GetPhyParam+0x25e>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8012c98:	2300      	movs	r3, #0
 8012c9a:	61bb      	str	r3, [r7, #24]
            break;
 8012c9c:	e04b      	b.n	8012d36 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 8012c9e:	4b2d      	ldr	r3, [pc, #180]	@ (8012d54 <RegionEU868GetPhyParam+0x27c>)
 8012ca0:	61bb      	str	r3, [r7, #24]
            break;
 8012ca2:	e048      	b.n	8012d36 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 8012ca4:	2300      	movs	r3, #0
 8012ca6:	61bb      	str	r3, [r7, #24]
            break;
 8012ca8:	e045      	b.n	8012d36 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8012caa:	4b26      	ldr	r3, [pc, #152]	@ (8012d44 <RegionEU868GetPhyParam+0x26c>)
 8012cac:	681b      	ldr	r3, [r3, #0]
 8012cae:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8012cb2:	61bb      	str	r3, [r7, #24]
            break;
 8012cb4:	e03f      	b.n	8012d36 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8012cb6:	4b23      	ldr	r3, [pc, #140]	@ (8012d44 <RegionEU868GetPhyParam+0x26c>)
 8012cb8:	681b      	ldr	r3, [r3, #0]
 8012cba:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8012cbe:	61bb      	str	r3, [r7, #24]
            break;
 8012cc0:	e039      	b.n	8012d36 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8012cc2:	2310      	movs	r3, #16
 8012cc4:	61bb      	str	r3, [r7, #24]
            break;
 8012cc6:	e036      	b.n	8012d36 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8012cc8:	4b1e      	ldr	r3, [pc, #120]	@ (8012d44 <RegionEU868GetPhyParam+0x26c>)
 8012cca:	681b      	ldr	r3, [r3, #0]
 8012ccc:	61bb      	str	r3, [r7, #24]
            break;
 8012cce:	e032      	b.n	8012d36 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 8012cd0:	2300      	movs	r3, #0
 8012cd2:	61bb      	str	r3, [r7, #24]
            break;
 8012cd4:	e02f      	b.n	8012d36 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8012cd6:	2300      	movs	r3, #0
 8012cd8:	61bb      	str	r3, [r7, #24]
            break;
 8012cda:	e02c      	b.n	8012d36 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8012cdc:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8012ce0:	61bb      	str	r3, [r7, #24]
            break;
 8012ce2:	e028      	b.n	8012d36 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8012ce4:	4b1c      	ldr	r3, [pc, #112]	@ (8012d58 <RegionEU868GetPhyParam+0x280>)
 8012ce6:	61bb      	str	r3, [r7, #24]
            break;
 8012ce8:	e025      	b.n	8012d36 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8012cea:	4b1a      	ldr	r3, [pc, #104]	@ (8012d54 <RegionEU868GetPhyParam+0x27c>)
 8012cec:	61bb      	str	r3, [r7, #24]
            break;
 8012cee:	e022      	b.n	8012d36 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8012cf0:	2311      	movs	r3, #17
 8012cf2:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8012cf4:	2301      	movs	r3, #1
 8012cf6:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8012cf8:	2300      	movs	r3, #0
 8012cfa:	76bb      	strb	r3, [r7, #26]
            break;
 8012cfc:	e01b      	b.n	8012d36 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8012cfe:	2303      	movs	r3, #3
 8012d00:	61bb      	str	r3, [r7, #24]
            break;
 8012d02:	e018      	b.n	8012d36 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8012d04:	4b13      	ldr	r3, [pc, #76]	@ (8012d54 <RegionEU868GetPhyParam+0x27c>)
 8012d06:	61bb      	str	r3, [r7, #24]
            break;
 8012d08:	e015      	b.n	8012d36 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8012d0a:	2303      	movs	r3, #3
 8012d0c:	61bb      	str	r3, [r7, #24]
            break;
 8012d0e:	e012      	b.n	8012d36 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8012d16:	461a      	mov	r2, r3
 8012d18:	4b10      	ldr	r3, [pc, #64]	@ (8012d5c <RegionEU868GetPhyParam+0x284>)
 8012d1a:	5c9b      	ldrb	r3, [r3, r2]
 8012d1c:	61bb      	str	r3, [r7, #24]
            break;
 8012d1e:	e00a      	b.n	8012d36 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8012d26:	490e      	ldr	r1, [pc, #56]	@ (8012d60 <RegionEU868GetPhyParam+0x288>)
 8012d28:	4618      	mov	r0, r3
 8012d2a:	f7ff fda7 	bl	801287c <RegionCommonGetBandwidth>
 8012d2e:	4603      	mov	r3, r0
 8012d30:	61bb      	str	r3, [r7, #24]
            break;
 8012d32:	e000      	b.n	8012d36 <RegionEU868GetPhyParam+0x25e>
        }
        default:
        {
            break;
 8012d34:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 8012d36:	69bb      	ldr	r3, [r7, #24]
 8012d38:	61fb      	str	r3, [r7, #28]
 8012d3a:	69fb      	ldr	r3, [r7, #28]
}
 8012d3c:	4618      	mov	r0, r3
 8012d3e:	3720      	adds	r7, #32
 8012d40:	46bd      	mov	sp, r7
 8012d42:	bd80      	pop	{r7, pc}
 8012d44:	20001220 	.word	0x20001220
 8012d48:	08020cd0 	.word	0x08020cd0
 8012d4c:	08020cd8 	.word	0x08020cd8
 8012d50:	fffffc18 	.word	0xfffffc18
 8012d54:	33d3e608 	.word	0x33d3e608
 8012d58:	4009999a 	.word	0x4009999a
 8012d5c:	08020ca8 	.word	0x08020ca8
 8012d60:	08020cb0 	.word	0x08020cb0

08012d64 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8012d64:	b590      	push	{r4, r7, lr}
 8012d66:	b085      	sub	sp, #20
 8012d68:	af02      	add	r7, sp, #8
 8012d6a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8012d6c:	4b11      	ldr	r3, [pc, #68]	@ (8012db4 <RegionEU868SetBandTxDone+0x50>)
 8012d6e:	681a      	ldr	r2, [r3, #0]
 8012d70:	4b11      	ldr	r3, [pc, #68]	@ (8012db8 <RegionEU868SetBandTxDone+0x54>)
 8012d72:	6819      	ldr	r1, [r3, #0]
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	781b      	ldrb	r3, [r3, #0]
 8012d78:	4618      	mov	r0, r3
 8012d7a:	4603      	mov	r3, r0
 8012d7c:	005b      	lsls	r3, r3, #1
 8012d7e:	4403      	add	r3, r0
 8012d80:	009b      	lsls	r3, r3, #2
 8012d82:	440b      	add	r3, r1
 8012d84:	3309      	adds	r3, #9
 8012d86:	781b      	ldrb	r3, [r3, #0]
 8012d88:	4619      	mov	r1, r3
 8012d8a:	460b      	mov	r3, r1
 8012d8c:	005b      	lsls	r3, r3, #1
 8012d8e:	440b      	add	r3, r1
 8012d90:	00db      	lsls	r3, r3, #3
 8012d92:	18d0      	adds	r0, r2, r3
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	6899      	ldr	r1, [r3, #8]
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	785c      	ldrb	r4, [r3, #1]
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	691a      	ldr	r2, [r3, #16]
 8012da0:	9200      	str	r2, [sp, #0]
 8012da2:	68db      	ldr	r3, [r3, #12]
 8012da4:	4622      	mov	r2, r4
 8012da6:	f7ff f8ef 	bl	8011f88 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 8012daa:	bf00      	nop
 8012dac:	370c      	adds	r7, #12
 8012dae:	46bd      	mov	sp, r7
 8012db0:	bd90      	pop	{r4, r7, pc}
 8012db2:	bf00      	nop
 8012db4:	20001224 	.word	0x20001224
 8012db8:	20001220 	.word	0x20001220

08012dbc <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8012dbc:	b580      	push	{r7, lr}
 8012dbe:	b0b0      	sub	sp, #192	@ 0xc0
 8012dc0:	af00      	add	r7, sp, #0
 8012dc2:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 8012dc4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8012dc8:	2290      	movs	r2, #144	@ 0x90
 8012dca:	2100      	movs	r1, #0
 8012dcc:	4618      	mov	r0, r3
 8012dce:	f00c fd89 	bl	801f8e4 <memset>
 8012dd2:	2364      	movs	r3, #100	@ 0x64
 8012dd4:	863b      	strh	r3, [r7, #48]	@ 0x30
 8012dd6:	2364      	movs	r3, #100	@ 0x64
 8012dd8:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8012ddc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8012de0:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8012de4:	230a      	movs	r3, #10
 8012de6:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
 8012dea:	2364      	movs	r3, #100	@ 0x64
 8012dec:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8012df0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8012df4:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	7b1b      	ldrb	r3, [r3, #12]
 8012dfc:	2b02      	cmp	r3, #2
 8012dfe:	d05d      	beq.n	8012ebc <RegionEU868InitDefaults+0x100>
 8012e00:	2b02      	cmp	r3, #2
 8012e02:	dc6a      	bgt.n	8012eda <RegionEU868InitDefaults+0x11e>
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d002      	beq.n	8012e0e <RegionEU868InitDefaults+0x52>
 8012e08:	2b01      	cmp	r3, #1
 8012e0a:	d03e      	beq.n	8012e8a <RegionEU868InitDefaults+0xce>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8012e0c:	e065      	b.n	8012eda <RegionEU868InitDefaults+0x11e>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	681b      	ldr	r3, [r3, #0]
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d062      	beq.n	8012edc <RegionEU868InitDefaults+0x120>
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	685b      	ldr	r3, [r3, #4]
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d05e      	beq.n	8012edc <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	685b      	ldr	r3, [r3, #4]
 8012e22:	4a30      	ldr	r2, [pc, #192]	@ (8012ee4 <RegionEU868InitDefaults+0x128>)
 8012e24:	6013      	str	r3, [r2, #0]
            RegionBands = (Band_t*) params->Bands;
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	689b      	ldr	r3, [r3, #8]
 8012e2a:	4a2f      	ldr	r2, [pc, #188]	@ (8012ee8 <RegionEU868InitDefaults+0x12c>)
 8012e2c:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8012e2e:	4b2e      	ldr	r3, [pc, #184]	@ (8012ee8 <RegionEU868InitDefaults+0x12c>)
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8012e36:	2290      	movs	r2, #144	@ 0x90
 8012e38:	4618      	mov	r0, r3
 8012e3a:	f003 fe0a 	bl	8016a52 <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8012e3e:	4b29      	ldr	r3, [pc, #164]	@ (8012ee4 <RegionEU868InitDefaults+0x128>)
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	4a2a      	ldr	r2, [pc, #168]	@ (8012eec <RegionEU868InitDefaults+0x130>)
 8012e44:	ca07      	ldmia	r2, {r0, r1, r2}
 8012e46:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8012e4a:	4b26      	ldr	r3, [pc, #152]	@ (8012ee4 <RegionEU868InitDefaults+0x128>)
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	4a28      	ldr	r2, [pc, #160]	@ (8012ef0 <RegionEU868InitDefaults+0x134>)
 8012e50:	330c      	adds	r3, #12
 8012e52:	ca07      	ldmia	r2, {r0, r1, r2}
 8012e54:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8012e58:	4b22      	ldr	r3, [pc, #136]	@ (8012ee4 <RegionEU868InitDefaults+0x128>)
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	4a25      	ldr	r2, [pc, #148]	@ (8012ef4 <RegionEU868InitDefaults+0x138>)
 8012e5e:	3318      	adds	r3, #24
 8012e60:	ca07      	ldmia	r2, {r0, r1, r2}
 8012e62:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8012e66:	4b1f      	ldr	r3, [pc, #124]	@ (8012ee4 <RegionEU868InitDefaults+0x128>)
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	2207      	movs	r2, #7
 8012e6c:	f8a3 236c 	strh.w	r2, [r3, #876]	@ 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8012e70:	4b1c      	ldr	r3, [pc, #112]	@ (8012ee4 <RegionEU868InitDefaults+0x128>)
 8012e72:	681b      	ldr	r3, [r3, #0]
 8012e74:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8012e78:	4b1a      	ldr	r3, [pc, #104]	@ (8012ee4 <RegionEU868InitDefaults+0x128>)
 8012e7a:	681b      	ldr	r3, [r3, #0]
 8012e7c:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8012e80:	2201      	movs	r2, #1
 8012e82:	4619      	mov	r1, r3
 8012e84:	f7ff f85a 	bl	8011f3c <RegionCommonChanMaskCopy>
 8012e88:	e028      	b.n	8012edc <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8012e8a:	4b16      	ldr	r3, [pc, #88]	@ (8012ee4 <RegionEU868InitDefaults+0x128>)
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	2200      	movs	r2, #0
 8012e90:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8012e92:	4b14      	ldr	r3, [pc, #80]	@ (8012ee4 <RegionEU868InitDefaults+0x128>)
 8012e94:	681b      	ldr	r3, [r3, #0]
 8012e96:	2200      	movs	r2, #0
 8012e98:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8012e9a:	4b12      	ldr	r3, [pc, #72]	@ (8012ee4 <RegionEU868InitDefaults+0x128>)
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	2200      	movs	r2, #0
 8012ea0:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8012ea2:	4b10      	ldr	r3, [pc, #64]	@ (8012ee4 <RegionEU868InitDefaults+0x128>)
 8012ea4:	681b      	ldr	r3, [r3, #0]
 8012ea6:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8012eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8012ee4 <RegionEU868InitDefaults+0x128>)
 8012eac:	681b      	ldr	r3, [r3, #0]
 8012eae:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8012eb2:	2201      	movs	r2, #1
 8012eb4:	4619      	mov	r1, r3
 8012eb6:	f7ff f841 	bl	8011f3c <RegionCommonChanMaskCopy>
            break;
 8012eba:	e00f      	b.n	8012edc <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8012ebc:	4b09      	ldr	r3, [pc, #36]	@ (8012ee4 <RegionEU868InitDefaults+0x128>)
 8012ebe:	681b      	ldr	r3, [r3, #0]
 8012ec0:	f8b3 1360 	ldrh.w	r1, [r3, #864]	@ 0x360
 8012ec4:	4b07      	ldr	r3, [pc, #28]	@ (8012ee4 <RegionEU868InitDefaults+0x128>)
 8012ec6:	681b      	ldr	r3, [r3, #0]
 8012ec8:	f8b3 236c 	ldrh.w	r2, [r3, #876]	@ 0x36c
 8012ecc:	4b05      	ldr	r3, [pc, #20]	@ (8012ee4 <RegionEU868InitDefaults+0x128>)
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	430a      	orrs	r2, r1
 8012ed2:	b292      	uxth	r2, r2
 8012ed4:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
            break;
 8012ed8:	e000      	b.n	8012edc <RegionEU868InitDefaults+0x120>
            break;
 8012eda:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8012edc:	37c0      	adds	r7, #192	@ 0xc0
 8012ede:	46bd      	mov	sp, r7
 8012ee0:	bd80      	pop	{r7, pc}
 8012ee2:	bf00      	nop
 8012ee4:	20001220 	.word	0x20001220
 8012ee8:	20001224 	.word	0x20001224
 8012eec:	080207ac 	.word	0x080207ac
 8012ef0:	080207b8 	.word	0x080207b8
 8012ef4:	080207c4 	.word	0x080207c4

08012ef8 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8012ef8:	b580      	push	{r7, lr}
 8012efa:	b084      	sub	sp, #16
 8012efc:	af00      	add	r7, sp, #0
 8012efe:	6078      	str	r0, [r7, #4]
 8012f00:	460b      	mov	r3, r1
 8012f02:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8012f04:	78fb      	ldrb	r3, [r7, #3]
 8012f06:	2b0f      	cmp	r3, #15
 8012f08:	d86c      	bhi.n	8012fe4 <RegionEU868Verify+0xec>
 8012f0a:	a201      	add	r2, pc, #4	@ (adr r2, 8012f10 <RegionEU868Verify+0x18>)
 8012f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f10:	08012f51 	.word	0x08012f51
 8012f14:	08012fe5 	.word	0x08012fe5
 8012f18:	08012fe5 	.word	0x08012fe5
 8012f1c:	08012fe5 	.word	0x08012fe5
 8012f20:	08012fe5 	.word	0x08012fe5
 8012f24:	08012f69 	.word	0x08012f69
 8012f28:	08012f87 	.word	0x08012f87
 8012f2c:	08012fa5 	.word	0x08012fa5
 8012f30:	08012fe5 	.word	0x08012fe5
 8012f34:	08012fc3 	.word	0x08012fc3
 8012f38:	08012fc3 	.word	0x08012fc3
 8012f3c:	08012fe5 	.word	0x08012fe5
 8012f40:	08012fe5 	.word	0x08012fe5
 8012f44:	08012fe5 	.word	0x08012fe5
 8012f48:	08012fe5 	.word	0x08012fe5
 8012f4c:	08012fe1 	.word	0x08012fe1
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8012f50:	2300      	movs	r3, #0
 8012f52:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	681b      	ldr	r3, [r3, #0]
 8012f58:	f107 020f 	add.w	r2, r7, #15
 8012f5c:	4611      	mov	r1, r2
 8012f5e:	4618      	mov	r0, r3
 8012f60:	f7ff fcf4 	bl	801294c <VerifyRfFreq>
 8012f64:	4603      	mov	r3, r0
 8012f66:	e03e      	b.n	8012fe6 <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	f993 3000 	ldrsb.w	r3, [r3]
 8012f6e:	2207      	movs	r2, #7
 8012f70:	2100      	movs	r1, #0
 8012f72:	4618      	mov	r0, r3
 8012f74:	f7fe ff65 	bl	8011e42 <RegionCommonValueInRange>
 8012f78:	4603      	mov	r3, r0
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	bf14      	ite	ne
 8012f7e:	2301      	movne	r3, #1
 8012f80:	2300      	moveq	r3, #0
 8012f82:	b2db      	uxtb	r3, r3
 8012f84:	e02f      	b.n	8012fe6 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	f993 3000 	ldrsb.w	r3, [r3]
 8012f8c:	2205      	movs	r2, #5
 8012f8e:	2100      	movs	r1, #0
 8012f90:	4618      	mov	r0, r3
 8012f92:	f7fe ff56 	bl	8011e42 <RegionCommonValueInRange>
 8012f96:	4603      	mov	r3, r0
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	bf14      	ite	ne
 8012f9c:	2301      	movne	r3, #1
 8012f9e:	2300      	moveq	r3, #0
 8012fa0:	b2db      	uxtb	r3, r3
 8012fa2:	e020      	b.n	8012fe6 <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	f993 3000 	ldrsb.w	r3, [r3]
 8012faa:	2207      	movs	r2, #7
 8012fac:	2100      	movs	r1, #0
 8012fae:	4618      	mov	r0, r3
 8012fb0:	f7fe ff47 	bl	8011e42 <RegionCommonValueInRange>
 8012fb4:	4603      	mov	r3, r0
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	bf14      	ite	ne
 8012fba:	2301      	movne	r3, #1
 8012fbc:	2300      	moveq	r3, #0
 8012fbe:	b2db      	uxtb	r3, r3
 8012fc0:	e011      	b.n	8012fe6 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	f993 3000 	ldrsb.w	r3, [r3]
 8012fc8:	2207      	movs	r2, #7
 8012fca:	2100      	movs	r1, #0
 8012fcc:	4618      	mov	r0, r3
 8012fce:	f7fe ff38 	bl	8011e42 <RegionCommonValueInRange>
 8012fd2:	4603      	mov	r3, r0
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	bf14      	ite	ne
 8012fd8:	2301      	movne	r3, #1
 8012fda:	2300      	moveq	r3, #0
 8012fdc:	b2db      	uxtb	r3, r3
 8012fde:	e002      	b.n	8012fe6 <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8012fe0:	2301      	movs	r3, #1
 8012fe2:	e000      	b.n	8012fe6 <RegionEU868Verify+0xee>
        }
        default:
            return false;
 8012fe4:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	3710      	adds	r7, #16
 8012fea:	46bd      	mov	sp, r7
 8012fec:	bd80      	pop	{r7, pc}
 8012fee:	bf00      	nop

08012ff0 <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8012ff0:	b580      	push	{r7, lr}
 8012ff2:	b08a      	sub	sp, #40	@ 0x28
 8012ff4:	af00      	add	r7, sp, #0
 8012ff6:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8012ff8:	2350      	movs	r3, #80	@ 0x50
 8012ffa:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	7a1b      	ldrb	r3, [r3, #8]
 8013002:	2b10      	cmp	r3, #16
 8013004:	d162      	bne.n	80130cc <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	685b      	ldr	r3, [r3, #4]
 801300a:	330f      	adds	r3, #15
 801300c:	781b      	ldrb	r3, [r3, #0]
 801300e:	2b00      	cmp	r3, #0
 8013010:	d15e      	bne.n	80130d0 <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8013012:	2300      	movs	r3, #0
 8013014:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013018:	2303      	movs	r3, #3
 801301a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 801301e:	e050      	b.n	80130c2 <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8013020:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013024:	2b07      	cmp	r3, #7
 8013026:	d824      	bhi.n	8013072 <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	685a      	ldr	r2, [r3, #4]
 801302c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013030:	4413      	add	r3, r2
 8013032:	781b      	ldrb	r3, [r3, #0]
 8013034:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8013036:	69ba      	ldr	r2, [r7, #24]
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	6859      	ldr	r1, [r3, #4]
 801303c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013040:	3301      	adds	r3, #1
 8013042:	440b      	add	r3, r1
 8013044:	781b      	ldrb	r3, [r3, #0]
 8013046:	021b      	lsls	r3, r3, #8
 8013048:	4313      	orrs	r3, r2
 801304a:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 801304c:	69ba      	ldr	r2, [r7, #24]
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	6859      	ldr	r1, [r3, #4]
 8013052:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013056:	3302      	adds	r3, #2
 8013058:	440b      	add	r3, r1
 801305a:	781b      	ldrb	r3, [r3, #0]
 801305c:	041b      	lsls	r3, r3, #16
 801305e:	4313      	orrs	r3, r2
 8013060:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8013062:	69bb      	ldr	r3, [r7, #24]
 8013064:	2264      	movs	r2, #100	@ 0x64
 8013066:	fb02 f303 	mul.w	r3, r2, r3
 801306a:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 801306c:	2300      	movs	r3, #0
 801306e:	61fb      	str	r3, [r7, #28]
 8013070:	e006      	b.n	8013080 <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 8013072:	2300      	movs	r3, #0
 8013074:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8013076:	2300      	movs	r3, #0
 8013078:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 801307c:	2300      	movs	r3, #0
 801307e:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8013080:	69bb      	ldr	r3, [r7, #24]
 8013082:	2b00      	cmp	r3, #0
 8013084:	d00b      	beq.n	801309e <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8013086:	f107 0318 	add.w	r3, r7, #24
 801308a:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 801308c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013090:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 8013092:	f107 0310 	add.w	r3, r7, #16
 8013096:	4618      	mov	r0, r3
 8013098:	f000 fd14 	bl	8013ac4 <RegionEU868ChannelAdd>
 801309c:	e007      	b.n	80130ae <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 801309e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80130a2:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 80130a4:	f107 030c 	add.w	r3, r7, #12
 80130a8:	4618      	mov	r0, r3
 80130aa:	f000 fdad 	bl	8013c08 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 80130ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80130b2:	3303      	adds	r3, #3
 80130b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80130b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80130bc:	3301      	adds	r3, #1
 80130be:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80130c2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80130c6:	2b0f      	cmp	r3, #15
 80130c8:	d9aa      	bls.n	8013020 <RegionEU868ApplyCFList+0x30>
 80130ca:	e002      	b.n	80130d2 <RegionEU868ApplyCFList+0xe2>
        return;
 80130cc:	bf00      	nop
 80130ce:	e000      	b.n	80130d2 <RegionEU868ApplyCFList+0xe2>
        return;
 80130d0:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 80130d2:	3728      	adds	r7, #40	@ 0x28
 80130d4:	46bd      	mov	sp, r7
 80130d6:	bd80      	pop	{r7, pc}

080130d8 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 80130d8:	b580      	push	{r7, lr}
 80130da:	b082      	sub	sp, #8
 80130dc:	af00      	add	r7, sp, #0
 80130de:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	791b      	ldrb	r3, [r3, #4]
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d002      	beq.n	80130ee <RegionEU868ChanMaskSet+0x16>
 80130e8:	2b01      	cmp	r3, #1
 80130ea:	d00b      	beq.n	8013104 <RegionEU868ChanMaskSet+0x2c>
 80130ec:	e015      	b.n	801311a <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80130ee:	4b0e      	ldr	r3, [pc, #56]	@ (8013128 <RegionEU868ChanMaskSet+0x50>)
 80130f0:	681b      	ldr	r3, [r3, #0]
 80130f2:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	2201      	movs	r2, #1
 80130fc:	4619      	mov	r1, r3
 80130fe:	f7fe ff1d 	bl	8011f3c <RegionCommonChanMaskCopy>
            break;
 8013102:	e00c      	b.n	801311e <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8013104:	4b08      	ldr	r3, [pc, #32]	@ (8013128 <RegionEU868ChanMaskSet+0x50>)
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	681b      	ldr	r3, [r3, #0]
 8013110:	2201      	movs	r2, #1
 8013112:	4619      	mov	r1, r3
 8013114:	f7fe ff12 	bl	8011f3c <RegionCommonChanMaskCopy>
            break;
 8013118:	e001      	b.n	801311e <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 801311a:	2300      	movs	r3, #0
 801311c:	e000      	b.n	8013120 <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 801311e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8013120:	4618      	mov	r0, r3
 8013122:	3708      	adds	r7, #8
 8013124:	46bd      	mov	sp, r7
 8013126:	bd80      	pop	{r7, pc}
 8013128:	20001220 	.word	0x20001220

0801312c <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 801312c:	b580      	push	{r7, lr}
 801312e:	b088      	sub	sp, #32
 8013130:	af02      	add	r7, sp, #8
 8013132:	60ba      	str	r2, [r7, #8]
 8013134:	607b      	str	r3, [r7, #4]
 8013136:	4603      	mov	r3, r0
 8013138:	73fb      	strb	r3, [r7, #15]
 801313a:	460b      	mov	r3, r1
 801313c:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 801313e:	2300      	movs	r3, #0
 8013140:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8013142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013146:	2b07      	cmp	r3, #7
 8013148:	bfa8      	it	ge
 801314a:	2307      	movge	r3, #7
 801314c:	b25a      	sxtb	r2, r3
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013158:	491e      	ldr	r1, [pc, #120]	@ (80131d4 <RegionEU868ComputeRxWindowParameters+0xa8>)
 801315a:	4618      	mov	r0, r3
 801315c:	f7ff fb8e 	bl	801287c <RegionCommonGetBandwidth>
 8013160:	4603      	mov	r3, r0
 8013162:	b2da      	uxtb	r2, r3
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801316e:	2b07      	cmp	r3, #7
 8013170:	d10a      	bne.n	8013188 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013178:	461a      	mov	r2, r3
 801317a:	4b17      	ldr	r3, [pc, #92]	@ (80131d8 <RegionEU868ComputeRxWindowParameters+0xac>)
 801317c:	5c9b      	ldrb	r3, [r3, r2]
 801317e:	4618      	mov	r0, r3
 8013180:	f7ff f910 	bl	80123a4 <RegionCommonComputeSymbolTimeFsk>
 8013184:	6178      	str	r0, [r7, #20]
 8013186:	e011      	b.n	80131ac <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801318e:	461a      	mov	r2, r3
 8013190:	4b11      	ldr	r3, [pc, #68]	@ (80131d8 <RegionEU868ComputeRxWindowParameters+0xac>)
 8013192:	5c9a      	ldrb	r2, [r3, r2]
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801319a:	4619      	mov	r1, r3
 801319c:	4b0d      	ldr	r3, [pc, #52]	@ (80131d4 <RegionEU868ComputeRxWindowParameters+0xa8>)
 801319e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80131a2:	4619      	mov	r1, r3
 80131a4:	4610      	mov	r0, r2
 80131a6:	f7ff f8e7 	bl	8012378 <RegionCommonComputeSymbolTimeLoRa>
 80131aa:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 80131ac:	4b0b      	ldr	r3, [pc, #44]	@ (80131dc <RegionEU868ComputeRxWindowParameters+0xb0>)
 80131ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80131b0:	4798      	blx	r3
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	3308      	adds	r3, #8
 80131b6:	687a      	ldr	r2, [r7, #4]
 80131b8:	320c      	adds	r2, #12
 80131ba:	7bb9      	ldrb	r1, [r7, #14]
 80131bc:	9201      	str	r2, [sp, #4]
 80131be:	9300      	str	r3, [sp, #0]
 80131c0:	4603      	mov	r3, r0
 80131c2:	68ba      	ldr	r2, [r7, #8]
 80131c4:	6978      	ldr	r0, [r7, #20]
 80131c6:	f7ff f8fd 	bl	80123c4 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 80131ca:	bf00      	nop
 80131cc:	3718      	adds	r7, #24
 80131ce:	46bd      	mov	sp, r7
 80131d0:	bd80      	pop	{r7, pc}
 80131d2:	bf00      	nop
 80131d4:	08020cb0 	.word	0x08020cb0
 80131d8:	08020ca8 	.word	0x08020ca8
 80131dc:	080210e8 	.word	0x080210e8

080131e0 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 80131e0:	b5b0      	push	{r4, r5, r7, lr}
 80131e2:	b090      	sub	sp, #64	@ 0x40
 80131e4:	af0a      	add	r7, sp, #40	@ 0x28
 80131e6:	6078      	str	r0, [r7, #4]
 80131e8:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	785b      	ldrb	r3, [r3, #1]
 80131ee:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 80131f0:	2300      	movs	r3, #0
 80131f2:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 80131f4:	2300      	movs	r3, #0
 80131f6:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	685b      	ldr	r3, [r3, #4]
 80131fc:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 80131fe:	4b5a      	ldr	r3, [pc, #360]	@ (8013368 <RegionEU868RxConfig+0x188>)
 8013200:	685b      	ldr	r3, [r3, #4]
 8013202:	4798      	blx	r3
 8013204:	4603      	mov	r3, r0
 8013206:	2b00      	cmp	r3, #0
 8013208:	d001      	beq.n	801320e <RegionEU868RxConfig+0x2e>
    {
        return false;
 801320a:	2300      	movs	r3, #0
 801320c:	e0a8      	b.n	8013360 <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	7cdb      	ldrb	r3, [r3, #19]
 8013212:	2b00      	cmp	r3, #0
 8013214:	d126      	bne.n	8013264 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8013216:	4b55      	ldr	r3, [pc, #340]	@ (801336c <RegionEU868RxConfig+0x18c>)
 8013218:	681a      	ldr	r2, [r3, #0]
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	781b      	ldrb	r3, [r3, #0]
 801321e:	4619      	mov	r1, r3
 8013220:	460b      	mov	r3, r1
 8013222:	005b      	lsls	r3, r3, #1
 8013224:	440b      	add	r3, r1
 8013226:	009b      	lsls	r3, r3, #2
 8013228:	4413      	add	r3, r2
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 801322e:	4b4f      	ldr	r3, [pc, #316]	@ (801336c <RegionEU868RxConfig+0x18c>)
 8013230:	681a      	ldr	r2, [r3, #0]
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	781b      	ldrb	r3, [r3, #0]
 8013236:	4619      	mov	r1, r3
 8013238:	460b      	mov	r3, r1
 801323a:	005b      	lsls	r3, r3, #1
 801323c:	440b      	add	r3, r1
 801323e:	009b      	lsls	r3, r3, #2
 8013240:	4413      	add	r3, r2
 8013242:	3304      	adds	r3, #4
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	2b00      	cmp	r3, #0
 8013248:	d00c      	beq.n	8013264 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 801324a:	4b48      	ldr	r3, [pc, #288]	@ (801336c <RegionEU868RxConfig+0x18c>)
 801324c:	681a      	ldr	r2, [r3, #0]
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	781b      	ldrb	r3, [r3, #0]
 8013252:	4619      	mov	r1, r3
 8013254:	460b      	mov	r3, r1
 8013256:	005b      	lsls	r3, r3, #1
 8013258:	440b      	add	r3, r1
 801325a:	009b      	lsls	r3, r3, #2
 801325c:	4413      	add	r3, r2
 801325e:	3304      	adds	r3, #4
 8013260:	681b      	ldr	r3, [r3, #0]
 8013262:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8013264:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013268:	4a41      	ldr	r2, [pc, #260]	@ (8013370 <RegionEU868RxConfig+0x190>)
 801326a:	5cd3      	ldrb	r3, [r2, r3]
 801326c:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 801326e:	4b3e      	ldr	r3, [pc, #248]	@ (8013368 <RegionEU868RxConfig+0x188>)
 8013270:	68db      	ldr	r3, [r3, #12]
 8013272:	6938      	ldr	r0, [r7, #16]
 8013274:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8013276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801327a:	2b07      	cmp	r3, #7
 801327c:	d128      	bne.n	80132d0 <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 801327e:	2300      	movs	r3, #0
 8013280:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8013282:	4b39      	ldr	r3, [pc, #228]	@ (8013368 <RegionEU868RxConfig+0x188>)
 8013284:	699c      	ldr	r4, [r3, #24]
 8013286:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801328a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801328e:	fb02 f303 	mul.w	r3, r2, r3
 8013292:	4619      	mov	r1, r3
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	689b      	ldr	r3, [r3, #8]
 8013298:	b29b      	uxth	r3, r3
 801329a:	687a      	ldr	r2, [r7, #4]
 801329c:	7c92      	ldrb	r2, [r2, #18]
 801329e:	7df8      	ldrb	r0, [r7, #23]
 80132a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80132a2:	2200      	movs	r2, #0
 80132a4:	9208      	str	r2, [sp, #32]
 80132a6:	2200      	movs	r2, #0
 80132a8:	9207      	str	r2, [sp, #28]
 80132aa:	2200      	movs	r2, #0
 80132ac:	9206      	str	r2, [sp, #24]
 80132ae:	2201      	movs	r2, #1
 80132b0:	9205      	str	r2, [sp, #20]
 80132b2:	2200      	movs	r2, #0
 80132b4:	9204      	str	r2, [sp, #16]
 80132b6:	2200      	movs	r2, #0
 80132b8:	9203      	str	r2, [sp, #12]
 80132ba:	9302      	str	r3, [sp, #8]
 80132bc:	2305      	movs	r3, #5
 80132be:	9301      	str	r3, [sp, #4]
 80132c0:	4b2c      	ldr	r3, [pc, #176]	@ (8013374 <RegionEU868RxConfig+0x194>)
 80132c2:	9300      	str	r3, [sp, #0]
 80132c4:	2300      	movs	r3, #0
 80132c6:	460a      	mov	r2, r1
 80132c8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80132cc:	47a0      	blx	r4
 80132ce:	e024      	b.n	801331a <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 80132d0:	2301      	movs	r3, #1
 80132d2:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 80132d4:	4b24      	ldr	r3, [pc, #144]	@ (8013368 <RegionEU868RxConfig+0x188>)
 80132d6:	699c      	ldr	r4, [r3, #24]
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	789b      	ldrb	r3, [r3, #2]
 80132dc:	461d      	mov	r5, r3
 80132de:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	689b      	ldr	r3, [r3, #8]
 80132e6:	b29b      	uxth	r3, r3
 80132e8:	687a      	ldr	r2, [r7, #4]
 80132ea:	7c92      	ldrb	r2, [r2, #18]
 80132ec:	7df8      	ldrb	r0, [r7, #23]
 80132ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80132f0:	2201      	movs	r2, #1
 80132f2:	9208      	str	r2, [sp, #32]
 80132f4:	2200      	movs	r2, #0
 80132f6:	9207      	str	r2, [sp, #28]
 80132f8:	2200      	movs	r2, #0
 80132fa:	9206      	str	r2, [sp, #24]
 80132fc:	2200      	movs	r2, #0
 80132fe:	9205      	str	r2, [sp, #20]
 8013300:	2200      	movs	r2, #0
 8013302:	9204      	str	r2, [sp, #16]
 8013304:	2200      	movs	r2, #0
 8013306:	9203      	str	r2, [sp, #12]
 8013308:	9302      	str	r3, [sp, #8]
 801330a:	2308      	movs	r3, #8
 801330c:	9301      	str	r3, [sp, #4]
 801330e:	2300      	movs	r3, #0
 8013310:	9300      	str	r3, [sp, #0]
 8013312:	2301      	movs	r3, #1
 8013314:	460a      	mov	r2, r1
 8013316:	4629      	mov	r1, r5
 8013318:	47a0      	blx	r4
    }

    if( rxConfig->RepeaterSupport == true )
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	7c5b      	ldrb	r3, [r3, #17]
 801331e:	2b00      	cmp	r3, #0
 8013320:	d005      	beq.n	801332e <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 8013322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013326:	4a14      	ldr	r2, [pc, #80]	@ (8013378 <RegionEU868RxConfig+0x198>)
 8013328:	5cd3      	ldrb	r3, [r2, r3]
 801332a:	75bb      	strb	r3, [r7, #22]
 801332c:	e004      	b.n	8013338 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 801332e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013332:	4a12      	ldr	r2, [pc, #72]	@ (801337c <RegionEU868RxConfig+0x19c>)
 8013334:	5cd3      	ldrb	r3, [r2, r3]
 8013336:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8013338:	4b0b      	ldr	r3, [pc, #44]	@ (8013368 <RegionEU868RxConfig+0x188>)
 801333a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801333c:	7dba      	ldrb	r2, [r7, #22]
 801333e:	320d      	adds	r2, #13
 8013340:	b2d1      	uxtb	r1, r2
 8013342:	7dfa      	ldrb	r2, [r7, #23]
 8013344:	4610      	mov	r0, r2
 8013346:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	7cdb      	ldrb	r3, [r3, #19]
 801334c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8013350:	6939      	ldr	r1, [r7, #16]
 8013352:	4618      	mov	r0, r3
 8013354:	f7ff fab0 	bl	80128b8 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 8013358:	683b      	ldr	r3, [r7, #0]
 801335a:	7bfa      	ldrb	r2, [r7, #15]
 801335c:	701a      	strb	r2, [r3, #0]
    return true;
 801335e:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8013360:	4618      	mov	r0, r3
 8013362:	3718      	adds	r7, #24
 8013364:	46bd      	mov	sp, r7
 8013366:	bdb0      	pop	{r4, r5, r7, pc}
 8013368:	080210e8 	.word	0x080210e8
 801336c:	20001220 	.word	0x20001220
 8013370:	08020ca8 	.word	0x08020ca8
 8013374:	00014585 	.word	0x00014585
 8013378:	08020cd8 	.word	0x08020cd8
 801337c:	08020cd0 	.word	0x08020cd0

08013380 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8013380:	b590      	push	{r4, r7, lr}
 8013382:	b093      	sub	sp, #76	@ 0x4c
 8013384:	af0a      	add	r7, sp, #40	@ 0x28
 8013386:	60f8      	str	r0, [r7, #12]
 8013388:	60b9      	str	r1, [r7, #8]
 801338a:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 801338c:	68fb      	ldr	r3, [r7, #12]
 801338e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013392:	461a      	mov	r2, r3
 8013394:	4b5d      	ldr	r3, [pc, #372]	@ (801350c <RegionEU868TxConfig+0x18c>)
 8013396:	5c9b      	ldrb	r3, [r3, r2]
 8013398:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 801339a:	68fb      	ldr	r3, [r7, #12]
 801339c:	f993 0002 	ldrsb.w	r0, [r3, #2]
 80133a0:	4b5b      	ldr	r3, [pc, #364]	@ (8013510 <RegionEU868TxConfig+0x190>)
 80133a2:	681a      	ldr	r2, [r3, #0]
 80133a4:	4b5b      	ldr	r3, [pc, #364]	@ (8013514 <RegionEU868TxConfig+0x194>)
 80133a6:	6819      	ldr	r1, [r3, #0]
 80133a8:	68fb      	ldr	r3, [r7, #12]
 80133aa:	781b      	ldrb	r3, [r3, #0]
 80133ac:	461c      	mov	r4, r3
 80133ae:	4623      	mov	r3, r4
 80133b0:	005b      	lsls	r3, r3, #1
 80133b2:	4423      	add	r3, r4
 80133b4:	009b      	lsls	r3, r3, #2
 80133b6:	440b      	add	r3, r1
 80133b8:	3309      	adds	r3, #9
 80133ba:	781b      	ldrb	r3, [r3, #0]
 80133bc:	4619      	mov	r1, r3
 80133be:	460b      	mov	r3, r1
 80133c0:	005b      	lsls	r3, r3, #1
 80133c2:	440b      	add	r3, r1
 80133c4:	00db      	lsls	r3, r3, #3
 80133c6:	4413      	add	r3, r2
 80133c8:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80133cc:	4619      	mov	r1, r3
 80133ce:	f7ff fa40 	bl	8012852 <RegionCommonLimitTxPower>
 80133d2:	4603      	mov	r3, r0
 80133d4:	777b      	strb	r3, [r7, #29]
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80133dc:	494e      	ldr	r1, [pc, #312]	@ (8013518 <RegionEU868TxConfig+0x198>)
 80133de:	4618      	mov	r0, r3
 80133e0:	f7ff fa4c 	bl	801287c <RegionCommonGetBandwidth>
 80133e4:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 80133e6:	2300      	movs	r3, #0
 80133e8:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 80133ea:	68fb      	ldr	r3, [r7, #12]
 80133ec:	6859      	ldr	r1, [r3, #4]
 80133ee:	68fb      	ldr	r3, [r7, #12]
 80133f0:	689a      	ldr	r2, [r3, #8]
 80133f2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80133f6:	4618      	mov	r0, r3
 80133f8:	f7ff f89c 	bl	8012534 <RegionCommonComputeTxPower>
 80133fc:	4603      	mov	r3, r0
 80133fe:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8013400:	4b46      	ldr	r3, [pc, #280]	@ (801351c <RegionEU868TxConfig+0x19c>)
 8013402:	68da      	ldr	r2, [r3, #12]
 8013404:	4b43      	ldr	r3, [pc, #268]	@ (8013514 <RegionEU868TxConfig+0x194>)
 8013406:	6819      	ldr	r1, [r3, #0]
 8013408:	68fb      	ldr	r3, [r7, #12]
 801340a:	781b      	ldrb	r3, [r3, #0]
 801340c:	4618      	mov	r0, r3
 801340e:	4603      	mov	r3, r0
 8013410:	005b      	lsls	r3, r3, #1
 8013412:	4403      	add	r3, r0
 8013414:	009b      	lsls	r3, r3, #2
 8013416:	440b      	add	r3, r1
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	4618      	mov	r0, r3
 801341c:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 801341e:	68fb      	ldr	r3, [r7, #12]
 8013420:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013424:	2b07      	cmp	r3, #7
 8013426:	d124      	bne.n	8013472 <RegionEU868TxConfig+0xf2>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8013428:	2300      	movs	r3, #0
 801342a:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 801342c:	4b3b      	ldr	r3, [pc, #236]	@ (801351c <RegionEU868TxConfig+0x19c>)
 801342e:	69dc      	ldr	r4, [r3, #28]
 8013430:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8013434:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8013438:	fb02 f303 	mul.w	r3, r2, r3
 801343c:	461a      	mov	r2, r3
 801343e:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8013442:	7ff8      	ldrb	r0, [r7, #31]
 8013444:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8013448:	9308      	str	r3, [sp, #32]
 801344a:	2300      	movs	r3, #0
 801344c:	9307      	str	r3, [sp, #28]
 801344e:	2300      	movs	r3, #0
 8013450:	9306      	str	r3, [sp, #24]
 8013452:	2300      	movs	r3, #0
 8013454:	9305      	str	r3, [sp, #20]
 8013456:	2301      	movs	r3, #1
 8013458:	9304      	str	r3, [sp, #16]
 801345a:	2300      	movs	r3, #0
 801345c:	9303      	str	r3, [sp, #12]
 801345e:	2305      	movs	r3, #5
 8013460:	9302      	str	r3, [sp, #8]
 8013462:	2300      	movs	r3, #0
 8013464:	9301      	str	r3, [sp, #4]
 8013466:	9200      	str	r2, [sp, #0]
 8013468:	69bb      	ldr	r3, [r7, #24]
 801346a:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 801346e:	47a0      	blx	r4
 8013470:	e01d      	b.n	80134ae <RegionEU868TxConfig+0x12e>
    }
    else
    {
        modem = MODEM_LORA;
 8013472:	2301      	movs	r3, #1
 8013474:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8013476:	4b29      	ldr	r3, [pc, #164]	@ (801351c <RegionEU868TxConfig+0x19c>)
 8013478:	69dc      	ldr	r4, [r3, #28]
 801347a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801347e:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8013482:	7ff8      	ldrb	r0, [r7, #31]
 8013484:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 8013488:	9208      	str	r2, [sp, #32]
 801348a:	2200      	movs	r2, #0
 801348c:	9207      	str	r2, [sp, #28]
 801348e:	2200      	movs	r2, #0
 8013490:	9206      	str	r2, [sp, #24]
 8013492:	2200      	movs	r2, #0
 8013494:	9205      	str	r2, [sp, #20]
 8013496:	2201      	movs	r2, #1
 8013498:	9204      	str	r2, [sp, #16]
 801349a:	2200      	movs	r2, #0
 801349c:	9203      	str	r2, [sp, #12]
 801349e:	2208      	movs	r2, #8
 80134a0:	9202      	str	r2, [sp, #8]
 80134a2:	2201      	movs	r2, #1
 80134a4:	9201      	str	r2, [sp, #4]
 80134a6:	9300      	str	r3, [sp, #0]
 80134a8:	69bb      	ldr	r3, [r7, #24]
 80134aa:	2200      	movs	r2, #0
 80134ac:	47a0      	blx	r4
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 80134ae:	4b19      	ldr	r3, [pc, #100]	@ (8013514 <RegionEU868TxConfig+0x194>)
 80134b0:	681a      	ldr	r2, [r3, #0]
 80134b2:	68fb      	ldr	r3, [r7, #12]
 80134b4:	781b      	ldrb	r3, [r3, #0]
 80134b6:	4619      	mov	r1, r3
 80134b8:	460b      	mov	r3, r1
 80134ba:	005b      	lsls	r3, r3, #1
 80134bc:	440b      	add	r3, r1
 80134be:	009b      	lsls	r3, r3, #2
 80134c0:	4413      	add	r3, r2
 80134c2:	681a      	ldr	r2, [r3, #0]
 80134c4:	68fb      	ldr	r3, [r7, #12]
 80134c6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80134ca:	4619      	mov	r1, r3
 80134cc:	4610      	mov	r0, r2
 80134ce:	f7ff fa25 	bl	801291c <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	899b      	ldrh	r3, [r3, #12]
 80134dc:	4619      	mov	r1, r3
 80134de:	4610      	mov	r0, r2
 80134e0:	f7ff faaa 	bl	8012a38 <GetTimeOnAir>
 80134e4:	4602      	mov	r2, r0
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 80134ea:	4b0c      	ldr	r3, [pc, #48]	@ (801351c <RegionEU868TxConfig+0x19c>)
 80134ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80134ee:	68fa      	ldr	r2, [r7, #12]
 80134f0:	8992      	ldrh	r2, [r2, #12]
 80134f2:	b2d1      	uxtb	r1, r2
 80134f4:	7ffa      	ldrb	r2, [r7, #31]
 80134f6:	4610      	mov	r0, r2
 80134f8:	4798      	blx	r3

    *txPower = txPowerLimited;
 80134fa:	68bb      	ldr	r3, [r7, #8]
 80134fc:	7f7a      	ldrb	r2, [r7, #29]
 80134fe:	701a      	strb	r2, [r3, #0]
    return true;
 8013500:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8013502:	4618      	mov	r0, r3
 8013504:	3724      	adds	r7, #36	@ 0x24
 8013506:	46bd      	mov	sp, r7
 8013508:	bd90      	pop	{r4, r7, pc}
 801350a:	bf00      	nop
 801350c:	08020ca8 	.word	0x08020ca8
 8013510:	20001224 	.word	0x20001224
 8013514:	20001220 	.word	0x20001220
 8013518:	08020cb0 	.word	0x08020cb0
 801351c:	080210e8 	.word	0x080210e8

08013520 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8013520:	b590      	push	{r4, r7, lr}
 8013522:	b093      	sub	sp, #76	@ 0x4c
 8013524:	af00      	add	r7, sp, #0
 8013526:	60f8      	str	r0, [r7, #12]
 8013528:	60b9      	str	r1, [r7, #8]
 801352a:	607a      	str	r2, [r7, #4]
 801352c:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801352e:	2307      	movs	r3, #7
 8013530:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8013534:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8013538:	2200      	movs	r2, #0
 801353a:	601a      	str	r2, [r3, #0]
 801353c:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 801353e:	2300      	movs	r3, #0
 8013540:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    uint8_t bytesProcessed = 0;
 8013544:	2300      	movs	r3, #0
 8013546:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    uint16_t chMask = 0;
 801354a:	2300      	movs	r3, #0
 801354c:	877b      	strh	r3, [r7, #58]	@ 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801354e:	e085      	b.n	801365c <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	685a      	ldr	r2, [r3, #4]
 8013554:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8013558:	4413      	add	r3, r2
 801355a:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 801355e:	4611      	mov	r1, r2
 8013560:	4618      	mov	r0, r3
 8013562:	f7fe fe2f 	bl	80121c4 <RegionCommonParseLinkAdrReq>
 8013566:	4603      	mov	r3, r0
 8013568:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

        if( nextIndex == 0 )
 801356c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8013570:	2b00      	cmp	r3, #0
 8013572:	d07b      	beq.n	801366c <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 8013574:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8013578:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 801357c:	4413      	add	r3, r2
 801357e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8013582:	2307      	movs	r3, #7
 8013584:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 8013588:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801358c:	877b      	strh	r3, [r7, #58]	@ 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 801358e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8013592:	2b00      	cmp	r3, #0
 8013594:	d109      	bne.n	80135aa <RegionEU868LinkAdrReq+0x8a>
 8013596:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8013598:	2b00      	cmp	r3, #0
 801359a:	d106      	bne.n	80135aa <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 801359c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80135a0:	f023 0301 	bic.w	r3, r3, #1
 80135a4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80135a8:	e058      	b.n	801365c <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80135aa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d003      	beq.n	80135ba <RegionEU868LinkAdrReq+0x9a>
 80135b2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80135b6:	2b05      	cmp	r3, #5
 80135b8:	d903      	bls.n	80135c2 <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 80135ba:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80135be:	2b06      	cmp	r3, #6
 80135c0:	d906      	bls.n	80135d0 <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 80135c2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80135c6:	f023 0301 	bic.w	r3, r3, #1
 80135ca:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80135ce:	e045      	b.n	801365c <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 80135d0:	2300      	movs	r3, #0
 80135d2:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 80135d6:	e03d      	b.n	8013654 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 80135d8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80135dc:	2b06      	cmp	r3, #6
 80135de:	d118      	bne.n	8013612 <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 80135e0:	4b5f      	ldr	r3, [pc, #380]	@ (8013760 <RegionEU868LinkAdrReq+0x240>)
 80135e2:	6819      	ldr	r1, [r3, #0]
 80135e4:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 80135e8:	4613      	mov	r3, r2
 80135ea:	005b      	lsls	r3, r3, #1
 80135ec:	4413      	add	r3, r2
 80135ee:	009b      	lsls	r3, r3, #2
 80135f0:	440b      	add	r3, r1
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d028      	beq.n	801364a <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 80135f8:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80135fc:	2201      	movs	r2, #1
 80135fe:	fa02 f303 	lsl.w	r3, r2, r3
 8013602:	b21a      	sxth	r2, r3
 8013604:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8013606:	b21b      	sxth	r3, r3
 8013608:	4313      	orrs	r3, r2
 801360a:	b21b      	sxth	r3, r3
 801360c:	b29b      	uxth	r3, r3
 801360e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8013610:	e01b      	b.n	801364a <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8013612:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8013614:	461a      	mov	r2, r3
 8013616:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 801361a:	fa42 f303 	asr.w	r3, r2, r3
 801361e:	f003 0301 	and.w	r3, r3, #1
 8013622:	2b00      	cmp	r3, #0
 8013624:	d011      	beq.n	801364a <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8013626:	4b4e      	ldr	r3, [pc, #312]	@ (8013760 <RegionEU868LinkAdrReq+0x240>)
 8013628:	6819      	ldr	r1, [r3, #0]
 801362a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 801362e:	4613      	mov	r3, r2
 8013630:	005b      	lsls	r3, r3, #1
 8013632:	4413      	add	r3, r2
 8013634:	009b      	lsls	r3, r3, #2
 8013636:	440b      	add	r3, r1
 8013638:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801363a:	2b00      	cmp	r3, #0
 801363c:	d105      	bne.n	801364a <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 801363e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013642:	f023 0301 	bic.w	r3, r3, #1
 8013646:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 801364a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 801364e:	3301      	adds	r3, #1
 8013650:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8013654:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8013658:	2b0f      	cmp	r3, #15
 801365a:	d9bd      	bls.n	80135d8 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 801365c:	68fb      	ldr	r3, [r7, #12]
 801365e:	7a1b      	ldrb	r3, [r3, #8]
 8013660:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8013664:	429a      	cmp	r2, r3
 8013666:	f4ff af73 	bcc.w	8013550 <RegionEU868LinkAdrReq+0x30>
 801366a:	e000      	b.n	801366e <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 801366c:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 801366e:	2302      	movs	r3, #2
 8013670:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	7a5b      	ldrb	r3, [r3, #9]
 8013678:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 801367c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8013680:	4618      	mov	r0, r3
 8013682:	f7ff fa29 	bl	8012ad8 <RegionEU868GetPhyParam>
 8013686:	4603      	mov	r3, r0
 8013688:	633b      	str	r3, [r7, #48]	@ 0x30

    linkAdrVerifyParams.Status = status;
 801368a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801368e:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	7a9b      	ldrb	r3, [r3, #10]
 8013694:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8013696:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d
 801369a:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 801369c:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
 80136a0:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 80136a2:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80136a6:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80136ae:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80136b6:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	7b5b      	ldrb	r3, [r3, #13]
 80136bc:	b25b      	sxtb	r3, r3
 80136be:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 80136c0:	2310      	movs	r3, #16
 80136c2:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 80136c4:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 80136c8:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 80136ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80136cc:	b25b      	sxtb	r3, r3
 80136ce:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 80136d2:	2307      	movs	r3, #7
 80136d4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 80136d8:	4b21      	ldr	r3, [pc, #132]	@ (8013760 <RegionEU868LinkAdrReq+0x240>)
 80136da:	681b      	ldr	r3, [r3, #0]
 80136dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 80136de:	2307      	movs	r3, #7
 80136e0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 80136e4:	2300      	movs	r3, #0
 80136e6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 80136f0:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80136f4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80136f8:	1c9a      	adds	r2, r3, #2
 80136fa:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80136fe:	1c59      	adds	r1, r3, #1
 8013700:	f107 0010 	add.w	r0, r7, #16
 8013704:	4623      	mov	r3, r4
 8013706:	f7fe fdaf 	bl	8012268 <RegionCommonLinkAdrReqVerifyParams>
 801370a:	4603      	mov	r3, r0
 801370c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8013710:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013714:	2b07      	cmp	r3, #7
 8013716:	d10d      	bne.n	8013734 <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8013718:	4b11      	ldr	r3, [pc, #68]	@ (8013760 <RegionEU868LinkAdrReq+0x240>)
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8013720:	220c      	movs	r2, #12
 8013722:	2100      	movs	r1, #0
 8013724:	4618      	mov	r0, r3
 8013726:	f003 f9cf 	bl	8016ac8 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 801372a:	4b0d      	ldr	r3, [pc, #52]	@ (8013760 <RegionEU868LinkAdrReq+0x240>)
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8013730:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8013734:	f997 203d 	ldrsb.w	r2, [r7, #61]	@ 0x3d
 8013738:	68bb      	ldr	r3, [r7, #8]
 801373a:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 801373c:	f997 203e 	ldrsb.w	r2, [r7, #62]	@ 0x3e
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8013744:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8013748:	683b      	ldr	r3, [r7, #0]
 801374a:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 801374c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801374e:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8013752:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 8013754:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8013758:	4618      	mov	r0, r3
 801375a:	374c      	adds	r7, #76	@ 0x4c
 801375c:	46bd      	mov	sp, r7
 801375e:	bd90      	pop	{r4, r7, pc}
 8013760:	20001220 	.word	0x20001220

08013764 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8013764:	b580      	push	{r7, lr}
 8013766:	b084      	sub	sp, #16
 8013768:	af00      	add	r7, sp, #0
 801376a:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 801376c:	2307      	movs	r3, #7
 801376e:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8013770:	2300      	movs	r3, #0
 8013772:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	685b      	ldr	r3, [r3, #4]
 8013778:	f107 020e 	add.w	r2, r7, #14
 801377c:	4611      	mov	r1, r2
 801377e:	4618      	mov	r0, r3
 8013780:	f7ff f8e4 	bl	801294c <VerifyRfFreq>
 8013784:	4603      	mov	r3, r0
 8013786:	f083 0301 	eor.w	r3, r3, #1
 801378a:	b2db      	uxtb	r3, r3
 801378c:	2b00      	cmp	r3, #0
 801378e:	d003      	beq.n	8013798 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 8013790:	7bfb      	ldrb	r3, [r7, #15]
 8013792:	f023 0301 	bic.w	r3, r3, #1
 8013796:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	f993 3000 	ldrsb.w	r3, [r3]
 801379e:	2207      	movs	r2, #7
 80137a0:	2100      	movs	r1, #0
 80137a2:	4618      	mov	r0, r3
 80137a4:	f7fe fb4d 	bl	8011e42 <RegionCommonValueInRange>
 80137a8:	4603      	mov	r3, r0
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d103      	bne.n	80137b6 <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 80137ae:	7bfb      	ldrb	r3, [r7, #15]
 80137b0:	f023 0302 	bic.w	r3, r3, #2
 80137b4:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80137bc:	2205      	movs	r2, #5
 80137be:	2100      	movs	r1, #0
 80137c0:	4618      	mov	r0, r3
 80137c2:	f7fe fb3e 	bl	8011e42 <RegionCommonValueInRange>
 80137c6:	4603      	mov	r3, r0
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d103      	bne.n	80137d4 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 80137cc:	7bfb      	ldrb	r3, [r7, #15]
 80137ce:	f023 0304 	bic.w	r3, r3, #4
 80137d2:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 80137d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80137d6:	4618      	mov	r0, r3
 80137d8:	3710      	adds	r7, #16
 80137da:	46bd      	mov	sp, r7
 80137dc:	bd80      	pop	{r7, pc}
	...

080137e0 <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 80137e0:	b580      	push	{r7, lr}
 80137e2:	b086      	sub	sp, #24
 80137e4:	af00      	add	r7, sp, #0
 80137e6:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80137e8:	2303      	movs	r3, #3
 80137ea:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	681b      	ldr	r3, [r3, #0]
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d114      	bne.n	8013820 <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80137fc:	b2db      	uxtb	r3, r3
 80137fe:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 8013800:	f107 0308 	add.w	r3, r7, #8
 8013804:	4618      	mov	r0, r3
 8013806:	f000 f9ff 	bl	8013c08 <RegionEU868ChannelsRemove>
 801380a:	4603      	mov	r3, r0
 801380c:	f083 0301 	eor.w	r3, r3, #1
 8013810:	b2db      	uxtb	r3, r3
 8013812:	2b00      	cmp	r3, #0
 8013814:	d03b      	beq.n	801388e <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 8013816:	7dfb      	ldrb	r3, [r7, #23]
 8013818:	f023 0303 	bic.w	r3, r3, #3
 801381c:	75fb      	strb	r3, [r7, #23]
 801381e:	e036      	b.n	801388e <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	681b      	ldr	r3, [r3, #0]
 8013824:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	f993 3004 	ldrsb.w	r3, [r3, #4]
 801382c:	b2db      	uxtb	r3, r3
 801382e:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 8013830:	f107 030c 	add.w	r3, r7, #12
 8013834:	4618      	mov	r0, r3
 8013836:	f000 f945 	bl	8013ac4 <RegionEU868ChannelAdd>
 801383a:	4603      	mov	r3, r0
 801383c:	2b06      	cmp	r3, #6
 801383e:	d820      	bhi.n	8013882 <RegionEU868NewChannelReq+0xa2>
 8013840:	a201      	add	r2, pc, #4	@ (adr r2, 8013848 <RegionEU868NewChannelReq+0x68>)
 8013842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013846:	bf00      	nop
 8013848:	0801388d 	.word	0x0801388d
 801384c:	08013883 	.word	0x08013883
 8013850:	08013883 	.word	0x08013883
 8013854:	08013883 	.word	0x08013883
 8013858:	08013865 	.word	0x08013865
 801385c:	0801386f 	.word	0x0801386f
 8013860:	08013879 	.word	0x08013879
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 8013864:	7dfb      	ldrb	r3, [r7, #23]
 8013866:	f023 0301 	bic.w	r3, r3, #1
 801386a:	75fb      	strb	r3, [r7, #23]
                break;
 801386c:	e00f      	b.n	801388e <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 801386e:	7dfb      	ldrb	r3, [r7, #23]
 8013870:	f023 0302 	bic.w	r3, r3, #2
 8013874:	75fb      	strb	r3, [r7, #23]
                break;
 8013876:	e00a      	b.n	801388e <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 8013878:	7dfb      	ldrb	r3, [r7, #23]
 801387a:	f023 0303 	bic.w	r3, r3, #3
 801387e:	75fb      	strb	r3, [r7, #23]
                break;
 8013880:	e005      	b.n	801388e <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 8013882:	7dfb      	ldrb	r3, [r7, #23]
 8013884:	f023 0303 	bic.w	r3, r3, #3
 8013888:	75fb      	strb	r3, [r7, #23]
                break;
 801388a:	e000      	b.n	801388e <RegionEU868NewChannelReq+0xae>
                break;
 801388c:	bf00      	nop
            }
        }
    }

    return status;
 801388e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013892:	4618      	mov	r0, r3
 8013894:	3718      	adds	r7, #24
 8013896:	46bd      	mov	sp, r7
 8013898:	bd80      	pop	{r7, pc}
 801389a:	bf00      	nop

0801389c <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 801389c:	b480      	push	{r7}
 801389e:	b083      	sub	sp, #12
 80138a0:	af00      	add	r7, sp, #0
 80138a2:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 80138a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80138a8:	4618      	mov	r0, r3
 80138aa:	370c      	adds	r7, #12
 80138ac:	46bd      	mov	sp, r7
 80138ae:	bc80      	pop	{r7}
 80138b0:	4770      	bx	lr
	...

080138b4 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 80138b4:	b580      	push	{r7, lr}
 80138b6:	b084      	sub	sp, #16
 80138b8:	af00      	add	r7, sp, #0
 80138ba:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 80138bc:	2303      	movs	r3, #3
 80138be:	73fb      	strb	r3, [r7, #15]

#if defined( REGION_EU868 )
    uint8_t band = 0;
 80138c0:	2300      	movs	r3, #0
 80138c2:	73bb      	strb	r3, [r7, #14]

    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	781b      	ldrb	r3, [r3, #0]
 80138c8:	2b0f      	cmp	r3, #15
 80138ca:	d901      	bls.n	80138d0 <RegionEU868DlChannelReq+0x1c>
    {
        return 0;
 80138cc:	2300      	movs	r3, #0
 80138ce:	e035      	b.n	801393c <RegionEU868DlChannelReq+0x88>
    }

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	685b      	ldr	r3, [r3, #4]
 80138d4:	f107 020e 	add.w	r2, r7, #14
 80138d8:	4611      	mov	r1, r2
 80138da:	4618      	mov	r0, r3
 80138dc:	f7ff f836 	bl	801294c <VerifyRfFreq>
 80138e0:	4603      	mov	r3, r0
 80138e2:	f083 0301 	eor.w	r3, r3, #1
 80138e6:	b2db      	uxtb	r3, r3
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d003      	beq.n	80138f4 <RegionEU868DlChannelReq+0x40>
    {
        status &= 0xFE;
 80138ec:	7bfb      	ldrb	r3, [r7, #15]
 80138ee:	f023 0301 	bic.w	r3, r3, #1
 80138f2:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 80138f4:	4b13      	ldr	r3, [pc, #76]	@ (8013944 <RegionEU868DlChannelReq+0x90>)
 80138f6:	681a      	ldr	r2, [r3, #0]
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	781b      	ldrb	r3, [r3, #0]
 80138fc:	4619      	mov	r1, r3
 80138fe:	460b      	mov	r3, r1
 8013900:	005b      	lsls	r3, r3, #1
 8013902:	440b      	add	r3, r1
 8013904:	009b      	lsls	r3, r3, #2
 8013906:	4413      	add	r3, r2
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	2b00      	cmp	r3, #0
 801390c:	d103      	bne.n	8013916 <RegionEU868DlChannelReq+0x62>
    {
        status &= 0xFD;
 801390e:	7bfb      	ldrb	r3, [r7, #15]
 8013910:	f023 0302 	bic.w	r3, r3, #2
 8013914:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8013916:	7bfb      	ldrb	r3, [r7, #15]
 8013918:	2b03      	cmp	r3, #3
 801391a:	d10d      	bne.n	8013938 <RegionEU868DlChannelReq+0x84>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 801391c:	4b09      	ldr	r3, [pc, #36]	@ (8013944 <RegionEU868DlChannelReq+0x90>)
 801391e:	6819      	ldr	r1, [r3, #0]
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	781b      	ldrb	r3, [r3, #0]
 8013924:	4618      	mov	r0, r3
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	685a      	ldr	r2, [r3, #4]
 801392a:	4603      	mov	r3, r0
 801392c:	005b      	lsls	r3, r3, #1
 801392e:	4403      	add	r3, r0
 8013930:	009b      	lsls	r3, r3, #2
 8013932:	440b      	add	r3, r1
 8013934:	3304      	adds	r3, #4
 8013936:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 8013938:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801393c:	4618      	mov	r0, r3
 801393e:	3710      	adds	r7, #16
 8013940:	46bd      	mov	sp, r7
 8013942:	bd80      	pop	{r7, pc}
 8013944:	20001220 	.word	0x20001220

08013948 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8013948:	b480      	push	{r7}
 801394a:	b083      	sub	sp, #12
 801394c:	af00      	add	r7, sp, #0
 801394e:	4603      	mov	r3, r0
 8013950:	460a      	mov	r2, r1
 8013952:	71fb      	strb	r3, [r7, #7]
 8013954:	4613      	mov	r3, r2
 8013956:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 8013958:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 801395c:	4618      	mov	r0, r3
 801395e:	370c      	adds	r7, #12
 8013960:	46bd      	mov	sp, r7
 8013962:	bc80      	pop	{r7}
 8013964:	4770      	bx	lr
	...

08013968 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8013968:	b580      	push	{r7, lr}
 801396a:	b09a      	sub	sp, #104	@ 0x68
 801396c:	af02      	add	r7, sp, #8
 801396e:	60f8      	str	r0, [r7, #12]
 8013970:	60b9      	str	r1, [r7, #8]
 8013972:	607a      	str	r2, [r7, #4]
 8013974:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 8013976:	2300      	movs	r3, #0
 8013978:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    uint8_t nbRestrictedChannels = 0;
 801397c:	2300      	movs	r3, #0
 801397e:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 8013982:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8013986:	2200      	movs	r2, #0
 8013988:	601a      	str	r2, [r3, #0]
 801398a:	605a      	str	r2, [r3, #4]
 801398c:	609a      	str	r2, [r3, #8]
 801398e:	60da      	str	r2, [r3, #12]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8013990:	230c      	movs	r3, #12
 8013992:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 8013996:	2307      	movs	r3, #7
 8013998:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 801399a:	4b48      	ldr	r3, [pc, #288]	@ (8013abc <RegionEU868NextChannel+0x154>)
 801399c:	681b      	ldr	r3, [r3, #0]
 801399e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80139a2:	2201      	movs	r2, #1
 80139a4:	2100      	movs	r1, #0
 80139a6:	4618      	mov	r0, r3
 80139a8:	f7fe fa9c 	bl	8011ee4 <RegionCommonCountChannels>
 80139ac:	4603      	mov	r3, r0
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d10a      	bne.n	80139c8 <RegionEU868NextChannel+0x60>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80139b2:	4b42      	ldr	r3, [pc, #264]	@ (8013abc <RegionEU868NextChannel+0x154>)
 80139b4:	681b      	ldr	r3, [r3, #0]
 80139b6:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 80139ba:	4b40      	ldr	r3, [pc, #256]	@ (8013abc <RegionEU868NextChannel+0x154>)
 80139bc:	681b      	ldr	r3, [r3, #0]
 80139be:	f042 0207 	orr.w	r2, r2, #7
 80139c2:	b292      	uxth	r2, r2
 80139c4:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 80139c8:	68fb      	ldr	r3, [r7, #12]
 80139ca:	7a5b      	ldrb	r3, [r3, #9]
 80139cc:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 80139ce:	68fb      	ldr	r3, [r7, #12]
 80139d0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80139d4:	b2db      	uxtb	r3, r3
 80139d6:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80139d8:	4b38      	ldr	r3, [pc, #224]	@ (8013abc <RegionEU868NextChannel+0x154>)
 80139da:	681b      	ldr	r3, [r3, #0]
 80139dc:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80139e0:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 80139e2:	4b36      	ldr	r3, [pc, #216]	@ (8013abc <RegionEU868NextChannel+0x154>)
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 80139e8:	4b35      	ldr	r3, [pc, #212]	@ (8013ac0 <RegionEU868NextChannel+0x158>)
 80139ea:	681b      	ldr	r3, [r3, #0]
 80139ec:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 80139ee:	2310      	movs	r3, #16
 80139f0:	84bb      	strh	r3, [r7, #36]	@ 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 80139f2:	f107 0312 	add.w	r3, r7, #18
 80139f6:	62bb      	str	r3, [r7, #40]	@ 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	685b      	ldr	r3, [r3, #4]
 8013a02:	633b      	str	r3, [r7, #48]	@ 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8013a04:	68fb      	ldr	r3, [r7, #12]
 8013a06:	7a9b      	ldrb	r3, [r3, #10]
 8013a08:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 8013a0c:	2306      	movs	r3, #6
 8013a0e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8013a12:	68fa      	ldr	r2, [r7, #12]
 8013a14:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8013a18:	320c      	adds	r2, #12
 8013a1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013a1e:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	7d1b      	ldrb	r3, [r3, #20]
 8013a26:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	8adb      	ldrh	r3, [r3, #22]
 8013a34:	4619      	mov	r1, r3
 8013a36:	4610      	mov	r0, r2
 8013a38:	f7fe fffe 	bl	8012a38 <GetTimeOnAir>
 8013a3c:	4603      	mov	r3, r0
 8013a3e:	647b      	str	r3, [r7, #68]	@ 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8013a40:	f107 0314 	add.w	r3, r7, #20
 8013a44:	64bb      	str	r3, [r7, #72]	@ 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8013a46:	f107 015e 	add.w	r1, r7, #94	@ 0x5e
 8013a4a:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8013a4e:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	9301      	str	r3, [sp, #4]
 8013a56:	f107 035d 	add.w	r3, r7, #93	@ 0x5d
 8013a5a:	9300      	str	r3, [sp, #0]
 8013a5c:	460b      	mov	r3, r1
 8013a5e:	6839      	ldr	r1, [r7, #0]
 8013a60:	f7fe fe57 	bl	8012712 <RegionCommonIdentifyChannels>
 8013a64:	4603      	mov	r3, r0
 8013a66:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8013a6a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d10e      	bne.n	8013a90 <RegionEU868NextChannel+0x128>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8013a72:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8013a76:	3b01      	subs	r3, #1
 8013a78:	4619      	mov	r1, r3
 8013a7a:	2000      	movs	r0, #0
 8013a7c:	f002 ffd2 	bl	8016a24 <randr>
 8013a80:	4603      	mov	r3, r0
 8013a82:	3360      	adds	r3, #96	@ 0x60
 8013a84:	443b      	add	r3, r7
 8013a86:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 8013a8a:	68bb      	ldr	r3, [r7, #8]
 8013a8c:	701a      	strb	r2, [r3, #0]
 8013a8e:	e00e      	b.n	8013aae <RegionEU868NextChannel+0x146>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8013a90:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8013a94:	2b0c      	cmp	r3, #12
 8013a96:	d10a      	bne.n	8013aae <RegionEU868NextChannel+0x146>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 8013a98:	4b08      	ldr	r3, [pc, #32]	@ (8013abc <RegionEU868NextChannel+0x154>)
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 8013aa0:	4b06      	ldr	r3, [pc, #24]	@ (8013abc <RegionEU868NextChannel+0x154>)
 8013aa2:	681b      	ldr	r3, [r3, #0]
 8013aa4:	f042 0207 	orr.w	r2, r2, #7
 8013aa8:	b292      	uxth	r2, r2
 8013aaa:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }
    return status;
 8013aae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8013ab2:	4618      	mov	r0, r3
 8013ab4:	3760      	adds	r7, #96	@ 0x60
 8013ab6:	46bd      	mov	sp, r7
 8013ab8:	bd80      	pop	{r7, pc}
 8013aba:	bf00      	nop
 8013abc:	20001220 	.word	0x20001220
 8013ac0:	20001224 	.word	0x20001224

08013ac4 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8013ac4:	b580      	push	{r7, lr}
 8013ac6:	b084      	sub	sp, #16
 8013ac8:	af00      	add	r7, sp, #0
 8013aca:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 8013acc:	2300      	movs	r3, #0
 8013ace:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 8013ad0:	2300      	movs	r3, #0
 8013ad2:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8013ad4:	2300      	movs	r3, #0
 8013ad6:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	791b      	ldrb	r3, [r3, #4]
 8013adc:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8013ade:	7b7b      	ldrb	r3, [r7, #13]
 8013ae0:	2b02      	cmp	r3, #2
 8013ae2:	d801      	bhi.n	8013ae8 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8013ae4:	2306      	movs	r3, #6
 8013ae6:	e089      	b.n	8013bfc <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8013ae8:	7b7b      	ldrb	r3, [r7, #13]
 8013aea:	2b0f      	cmp	r3, #15
 8013aec:	d901      	bls.n	8013af2 <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8013aee:	2303      	movs	r3, #3
 8013af0:	e084      	b.n	8013bfc <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	681b      	ldr	r3, [r3, #0]
 8013af6:	7a1b      	ldrb	r3, [r3, #8]
 8013af8:	f343 0303 	sbfx	r3, r3, #0, #4
 8013afc:	b25b      	sxtb	r3, r3
 8013afe:	2207      	movs	r2, #7
 8013b00:	2100      	movs	r1, #0
 8013b02:	4618      	mov	r0, r3
 8013b04:	f7fe f99d 	bl	8011e42 <RegionCommonValueInRange>
 8013b08:	4603      	mov	r3, r0
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d101      	bne.n	8013b12 <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 8013b0e:	2301      	movs	r3, #1
 8013b10:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	681b      	ldr	r3, [r3, #0]
 8013b16:	7a1b      	ldrb	r3, [r3, #8]
 8013b18:	f343 1303 	sbfx	r3, r3, #4, #4
 8013b1c:	b25b      	sxtb	r3, r3
 8013b1e:	2207      	movs	r2, #7
 8013b20:	2100      	movs	r1, #0
 8013b22:	4618      	mov	r0, r3
 8013b24:	f7fe f98d 	bl	8011e42 <RegionCommonValueInRange>
 8013b28:	4603      	mov	r3, r0
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d101      	bne.n	8013b32 <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 8013b2e:	2301      	movs	r3, #1
 8013b30:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	7a1b      	ldrb	r3, [r3, #8]
 8013b38:	f343 0303 	sbfx	r3, r3, #0, #4
 8013b3c:	b25a      	sxtb	r2, r3
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	7a1b      	ldrb	r3, [r3, #8]
 8013b44:	f343 1303 	sbfx	r3, r3, #4, #4
 8013b48:	b25b      	sxtb	r3, r3
 8013b4a:	429a      	cmp	r2, r3
 8013b4c:	dd01      	ble.n	8013b52 <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 8013b4e:	2301      	movs	r3, #1
 8013b50:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 8013b52:	7bbb      	ldrb	r3, [r7, #14]
 8013b54:	f083 0301 	eor.w	r3, r3, #1
 8013b58:	b2db      	uxtb	r3, r3
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d010      	beq.n	8013b80 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	681b      	ldr	r3, [r3, #0]
 8013b62:	681b      	ldr	r3, [r3, #0]
 8013b64:	f107 020c 	add.w	r2, r7, #12
 8013b68:	4611      	mov	r1, r2
 8013b6a:	4618      	mov	r0, r3
 8013b6c:	f7fe feee 	bl	801294c <VerifyRfFreq>
 8013b70:	4603      	mov	r3, r0
 8013b72:	f083 0301 	eor.w	r3, r3, #1
 8013b76:	b2db      	uxtb	r3, r3
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d001      	beq.n	8013b80 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 8013b7c:	2301      	movs	r3, #1
 8013b7e:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8013b80:	7bfb      	ldrb	r3, [r7, #15]
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d004      	beq.n	8013b90 <RegionEU868ChannelAdd+0xcc>
 8013b86:	7bbb      	ldrb	r3, [r7, #14]
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d001      	beq.n	8013b90 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8013b8c:	2306      	movs	r3, #6
 8013b8e:	e035      	b.n	8013bfc <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 8013b90:	7bfb      	ldrb	r3, [r7, #15]
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	d001      	beq.n	8013b9a <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 8013b96:	2305      	movs	r3, #5
 8013b98:	e030      	b.n	8013bfc <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 8013b9a:	7bbb      	ldrb	r3, [r7, #14]
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d001      	beq.n	8013ba4 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8013ba0:	2304      	movs	r3, #4
 8013ba2:	e02b      	b.n	8013bfc <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8013ba4:	4b17      	ldr	r3, [pc, #92]	@ (8013c04 <RegionEU868ChannelAdd+0x140>)
 8013ba6:	6819      	ldr	r1, [r3, #0]
 8013ba8:	7b7a      	ldrb	r2, [r7, #13]
 8013baa:	4613      	mov	r3, r2
 8013bac:	005b      	lsls	r3, r3, #1
 8013bae:	4413      	add	r3, r2
 8013bb0:	009b      	lsls	r3, r3, #2
 8013bb2:	18c8      	adds	r0, r1, r3
 8013bb4:	687b      	ldr	r3, [r7, #4]
 8013bb6:	681b      	ldr	r3, [r3, #0]
 8013bb8:	220c      	movs	r2, #12
 8013bba:	4619      	mov	r1, r3
 8013bbc:	f002 ff49 	bl	8016a52 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 8013bc0:	4b10      	ldr	r3, [pc, #64]	@ (8013c04 <RegionEU868ChannelAdd+0x140>)
 8013bc2:	6819      	ldr	r1, [r3, #0]
 8013bc4:	7b7a      	ldrb	r2, [r7, #13]
 8013bc6:	7b38      	ldrb	r0, [r7, #12]
 8013bc8:	4613      	mov	r3, r2
 8013bca:	005b      	lsls	r3, r3, #1
 8013bcc:	4413      	add	r3, r2
 8013bce:	009b      	lsls	r3, r3, #2
 8013bd0:	440b      	add	r3, r1
 8013bd2:	3309      	adds	r3, #9
 8013bd4:	4602      	mov	r2, r0
 8013bd6:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8013bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8013c04 <RegionEU868ChannelAdd+0x140>)
 8013bda:	681b      	ldr	r3, [r3, #0]
 8013bdc:	f8b3 3360 	ldrh.w	r3, [r3, #864]	@ 0x360
 8013be0:	b21a      	sxth	r2, r3
 8013be2:	7b7b      	ldrb	r3, [r7, #13]
 8013be4:	2101      	movs	r1, #1
 8013be6:	fa01 f303 	lsl.w	r3, r1, r3
 8013bea:	b21b      	sxth	r3, r3
 8013bec:	4313      	orrs	r3, r2
 8013bee:	b21a      	sxth	r2, r3
 8013bf0:	4b04      	ldr	r3, [pc, #16]	@ (8013c04 <RegionEU868ChannelAdd+0x140>)
 8013bf2:	681b      	ldr	r3, [r3, #0]
 8013bf4:	b292      	uxth	r2, r2
 8013bf6:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    return LORAMAC_STATUS_OK;
 8013bfa:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 8013bfc:	4618      	mov	r0, r3
 8013bfe:	3710      	adds	r7, #16
 8013c00:	46bd      	mov	sp, r7
 8013c02:	bd80      	pop	{r7, pc}
 8013c04:	20001220 	.word	0x20001220

08013c08 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8013c08:	b580      	push	{r7, lr}
 8013c0a:	b086      	sub	sp, #24
 8013c0c:	af00      	add	r7, sp, #0
 8013c0e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	781b      	ldrb	r3, [r3, #0]
 8013c14:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8013c16:	7dfb      	ldrb	r3, [r7, #23]
 8013c18:	2b02      	cmp	r3, #2
 8013c1a:	d801      	bhi.n	8013c20 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 8013c1c:	2300      	movs	r3, #0
 8013c1e:	e016      	b.n	8013c4e <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8013c20:	4b0d      	ldr	r3, [pc, #52]	@ (8013c58 <RegionEU868ChannelsRemove+0x50>)
 8013c22:	6819      	ldr	r1, [r3, #0]
 8013c24:	7dfa      	ldrb	r2, [r7, #23]
 8013c26:	4613      	mov	r3, r2
 8013c28:	005b      	lsls	r3, r3, #1
 8013c2a:	4413      	add	r3, r2
 8013c2c:	009b      	lsls	r3, r3, #2
 8013c2e:	440b      	add	r3, r1
 8013c30:	461a      	mov	r2, r3
 8013c32:	2300      	movs	r3, #0
 8013c34:	6013      	str	r3, [r2, #0]
 8013c36:	6053      	str	r3, [r2, #4]
 8013c38:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 8013c3a:	4b07      	ldr	r3, [pc, #28]	@ (8013c58 <RegionEU868ChannelsRemove+0x50>)
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8013c42:	7df9      	ldrb	r1, [r7, #23]
 8013c44:	2210      	movs	r2, #16
 8013c46:	4618      	mov	r0, r3
 8013c48:	f7fe f918 	bl	8011e7c <RegionCommonChanDisable>
 8013c4c:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 8013c4e:	4618      	mov	r0, r3
 8013c50:	3718      	adds	r7, #24
 8013c52:	46bd      	mov	sp, r7
 8013c54:	bd80      	pop	{r7, pc}
 8013c56:	bf00      	nop
 8013c58:	20001220 	.word	0x20001220

08013c5c <RegionEU868ApplyDrOffset>:
#endif /* REGION_EU868 */
}
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 8013c5c:	b480      	push	{r7}
 8013c5e:	b085      	sub	sp, #20
 8013c60:	af00      	add	r7, sp, #0
 8013c62:	4603      	mov	r3, r0
 8013c64:	71fb      	strb	r3, [r7, #7]
 8013c66:	460b      	mov	r3, r1
 8013c68:	71bb      	strb	r3, [r7, #6]
 8013c6a:	4613      	mov	r3, r2
 8013c6c:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 8013c6e:	79ba      	ldrb	r2, [r7, #6]
 8013c70:	797b      	ldrb	r3, [r7, #5]
 8013c72:	1ad3      	subs	r3, r2, r3
 8013c74:	b2db      	uxtb	r3, r3
 8013c76:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8013c78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	da01      	bge.n	8013c84 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 8013c80:	2300      	movs	r3, #0
 8013c82:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 8013c84:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 8013c86:	4618      	mov	r0, r3
 8013c88:	3714      	adds	r7, #20
 8013c8a:	46bd      	mov	sp, r7
 8013c8c:	bc80      	pop	{r7}
 8013c8e:	4770      	bx	lr

08013c90 <LimitTxPower>:
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
static Band_t* RegionBands;
#endif /* REGION_VERSION */

static int8_t LimitTxPower( int8_t txPower, int8_t maxBandTxPower, int8_t datarate, uint16_t* channelsMask )
{
 8013c90:	b580      	push	{r7, lr}
 8013c92:	b084      	sub	sp, #16
 8013c94:	af00      	add	r7, sp, #0
 8013c96:	603b      	str	r3, [r7, #0]
 8013c98:	4603      	mov	r3, r0
 8013c9a:	71fb      	strb	r3, [r7, #7]
 8013c9c:	460b      	mov	r3, r1
 8013c9e:	71bb      	strb	r3, [r7, #6]
 8013ca0:	4613      	mov	r3, r2
 8013ca2:	717b      	strb	r3, [r7, #5]
    int8_t txPowerResult = txPower;
 8013ca4:	79fb      	ldrb	r3, [r7, #7]
 8013ca6:	73fb      	strb	r3, [r7, #15]

    // Limit tx power to the band max
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 8013ca8:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8013cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013cb0:	4611      	mov	r1, r2
 8013cb2:	4618      	mov	r0, r3
 8013cb4:	f7fe fdcd 	bl	8012852 <RegionCommonLimitTxPower>
 8013cb8:	4603      	mov	r3, r0
 8013cba:	73fb      	strb	r3, [r7, #15]

    if( datarate == DR_4 )
 8013cbc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8013cc0:	2b04      	cmp	r3, #4
 8013cc2:	d106      	bne.n	8013cd2 <LimitTxPower+0x42>
    {// Limit tx power to max 26dBm
        txPowerResult = MAX( txPower, TX_POWER_2 );
 8013cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013cc8:	2b02      	cmp	r3, #2
 8013cca:	bfb8      	it	lt
 8013ccc:	2302      	movlt	r3, #2
 8013cce:	73fb      	strb	r3, [r7, #15]
 8013cd0:	e00d      	b.n	8013cee <LimitTxPower+0x5e>
    }
    else
    {
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 8013cd2:	2204      	movs	r2, #4
 8013cd4:	2100      	movs	r1, #0
 8013cd6:	6838      	ldr	r0, [r7, #0]
 8013cd8:	f7fe f904 	bl	8011ee4 <RegionCommonCountChannels>
 8013cdc:	4603      	mov	r3, r0
 8013cde:	2b31      	cmp	r3, #49	@ 0x31
 8013ce0:	d805      	bhi.n	8013cee <LimitTxPower+0x5e>
        {// Limit tx power to max 21dBm
            txPowerResult = MAX( txPower, TX_POWER_5 );
 8013ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013ce6:	2b05      	cmp	r3, #5
 8013ce8:	bfb8      	it	lt
 8013cea:	2305      	movlt	r3, #5
 8013cec:	73fb      	strb	r3, [r7, #15]
        }
    }
    return txPowerResult;
 8013cee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013cf2:	4618      	mov	r0, r3
 8013cf4:	3710      	adds	r7, #16
 8013cf6:	46bd      	mov	sp, r7
 8013cf8:	bd80      	pop	{r7, pc}
	...

08013cfc <VerifyRfFreq>:

static bool VerifyRfFreq( uint32_t freq )
{
 8013cfc:	b580      	push	{r7, lr}
 8013cfe:	b082      	sub	sp, #8
 8013d00:	af00      	add	r7, sp, #0
 8013d02:	6078      	str	r0, [r7, #4]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8013d04:	4b18      	ldr	r3, [pc, #96]	@ (8013d68 <VerifyRfFreq+0x6c>)
 8013d06:	6a1b      	ldr	r3, [r3, #32]
 8013d08:	6878      	ldr	r0, [r7, #4]
 8013d0a:	4798      	blx	r3
 8013d0c:	4603      	mov	r3, r0
 8013d0e:	f083 0301 	eor.w	r3, r3, #1
 8013d12:	b2db      	uxtb	r3, r3
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d001      	beq.n	8013d1c <VerifyRfFreq+0x20>
    {
        return false;
 8013d18:	2300      	movs	r3, #0
 8013d1a:	e021      	b.n	8013d60 <VerifyRfFreq+0x64>
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	4a13      	ldr	r2, [pc, #76]	@ (8013d6c <VerifyRfFreq+0x70>)
 8013d20:	4293      	cmp	r3, r2
 8013d22:	d910      	bls.n	8013d46 <VerifyRfFreq+0x4a>
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	4a12      	ldr	r2, [pc, #72]	@ (8013d70 <VerifyRfFreq+0x74>)
 8013d28:	4293      	cmp	r3, r2
 8013d2a:	d80c      	bhi.n	8013d46 <VerifyRfFreq+0x4a>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 8013d2c:	687a      	ldr	r2, [r7, #4]
 8013d2e:	4b11      	ldr	r3, [pc, #68]	@ (8013d74 <VerifyRfFreq+0x78>)
 8013d30:	4413      	add	r3, r2
 8013d32:	4a11      	ldr	r2, [pc, #68]	@ (8013d78 <VerifyRfFreq+0x7c>)
 8013d34:	fba2 1203 	umull	r1, r2, r2, r3
 8013d38:	0c92      	lsrs	r2, r2, #18
 8013d3a:	4910      	ldr	r1, [pc, #64]	@ (8013d7c <VerifyRfFreq+0x80>)
 8013d3c:	fb01 f202 	mul.w	r2, r1, r2
 8013d40:	1a9a      	subs	r2, r3, r2
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 8013d42:	2a00      	cmp	r2, #0
 8013d44:	d001      	beq.n	8013d4a <VerifyRfFreq+0x4e>
    {
        return false;
 8013d46:	2300      	movs	r3, #0
 8013d48:	e00a      	b.n	8013d60 <VerifyRfFreq+0x64>
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	4a0c      	ldr	r2, [pc, #48]	@ (8013d80 <VerifyRfFreq+0x84>)
 8013d4e:	4293      	cmp	r3, r2
 8013d50:	d903      	bls.n	8013d5a <VerifyRfFreq+0x5e>
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	4a06      	ldr	r2, [pc, #24]	@ (8013d70 <VerifyRfFreq+0x74>)
 8013d56:	4293      	cmp	r3, r2
 8013d58:	d901      	bls.n	8013d5e <VerifyRfFreq+0x62>
    {
        return false;
 8013d5a:	2300      	movs	r3, #0
 8013d5c:	e000      	b.n	8013d60 <VerifyRfFreq+0x64>
    }
    return true;
 8013d5e:	2301      	movs	r3, #1
}
 8013d60:	4618      	mov	r0, r3
 8013d62:	3708      	adds	r7, #8
 8013d64:	46bd      	mov	sp, r7
 8013d66:	bd80      	pop	{r7, pc}
 8013d68:	080210e8 	.word	0x080210e8
 8013d6c:	3708709f 	.word	0x3708709f
 8013d70:	374886e0 	.word	0x374886e0
 8013d74:	c8f78f60 	.word	0xc8f78f60
 8013d78:	6fd91d85 	.word	0x6fd91d85
 8013d7c:	000927c0 	.word	0x000927c0
 8013d80:	35c8015f 	.word	0x35c8015f

08013d84 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8013d84:	b590      	push	{r4, r7, lr}
 8013d86:	b089      	sub	sp, #36	@ 0x24
 8013d88:	af04      	add	r7, sp, #16
 8013d8a:	4603      	mov	r3, r0
 8013d8c:	460a      	mov	r2, r1
 8013d8e:	71fb      	strb	r3, [r7, #7]
 8013d90:	4613      	mov	r3, r2
 8013d92:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesUS915[datarate];
 8013d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013d98:	4a0f      	ldr	r2, [pc, #60]	@ (8013dd8 <GetTimeOnAir+0x54>)
 8013d9a:	5cd3      	ldrb	r3, [r2, r3]
 8013d9c:	73fb      	strb	r3, [r7, #15]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 8013d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013da2:	490e      	ldr	r1, [pc, #56]	@ (8013ddc <GetTimeOnAir+0x58>)
 8013da4:	4618      	mov	r0, r3
 8013da6:	f7fe fd69 	bl	801287c <RegionCommonGetBandwidth>
 8013daa:	60b8      	str	r0, [r7, #8]

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 8013dac:	4b0c      	ldr	r3, [pc, #48]	@ (8013de0 <GetTimeOnAir+0x5c>)
 8013dae:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8013db0:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8013db4:	88bb      	ldrh	r3, [r7, #4]
 8013db6:	b2db      	uxtb	r3, r3
 8013db8:	2101      	movs	r1, #1
 8013dba:	9103      	str	r1, [sp, #12]
 8013dbc:	9302      	str	r3, [sp, #8]
 8013dbe:	2300      	movs	r3, #0
 8013dc0:	9301      	str	r3, [sp, #4]
 8013dc2:	2308      	movs	r3, #8
 8013dc4:	9300      	str	r3, [sp, #0]
 8013dc6:	2301      	movs	r3, #1
 8013dc8:	68b9      	ldr	r1, [r7, #8]
 8013dca:	2001      	movs	r0, #1
 8013dcc:	47a0      	blx	r4
 8013dce:	4603      	mov	r3, r0
}
 8013dd0:	4618      	mov	r0, r3
 8013dd2:	3714      	adds	r7, #20
 8013dd4:	46bd      	mov	sp, r7
 8013dd6:	bd90      	pop	{r4, r7, pc}
 8013dd8:	08020ce0 	.word	0x08020ce0
 8013ddc:	08020cf0 	.word	0x08020cf0
 8013de0:	080210e8 	.word	0x080210e8

08013de4 <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 8013de4:	b580      	push	{r7, lr}
 8013de6:	b088      	sub	sp, #32
 8013de8:	af00      	add	r7, sp, #0
 8013dea:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 8013dec:	2300      	movs	r3, #0
 8013dee:	61bb      	str	r3, [r7, #24]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	781b      	ldrb	r3, [r3, #0]
 8013df4:	3b01      	subs	r3, #1
 8013df6:	2b37      	cmp	r3, #55	@ 0x37
 8013df8:	f200 8136 	bhi.w	8014068 <RegionUS915GetPhyParam+0x284>
 8013dfc:	a201      	add	r2, pc, #4	@ (adr r2, 8013e04 <RegionUS915GetPhyParam+0x20>)
 8013dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e02:	bf00      	nop
 8013e04:	08013ee5 	.word	0x08013ee5
 8013e08:	08013eeb 	.word	0x08013eeb
 8013e0c:	08014069 	.word	0x08014069
 8013e10:	08014069 	.word	0x08014069
 8013e14:	08014069 	.word	0x08014069
 8013e18:	08013ef1 	.word	0x08013ef1
 8013e1c:	08014069 	.word	0x08014069
 8013e20:	08013f2b 	.word	0x08013f2b
 8013e24:	08014069 	.word	0x08014069
 8013e28:	08013f31 	.word	0x08013f31
 8013e2c:	08013f37 	.word	0x08013f37
 8013e30:	08013f3d 	.word	0x08013f3d
 8013e34:	08013f43 	.word	0x08013f43
 8013e38:	08013f53 	.word	0x08013f53
 8013e3c:	08013f63 	.word	0x08013f63
 8013e40:	08013f69 	.word	0x08013f69
 8013e44:	08013f71 	.word	0x08013f71
 8013e48:	08013f79 	.word	0x08013f79
 8013e4c:	08013f81 	.word	0x08013f81
 8013e50:	08013f89 	.word	0x08013f89
 8013e54:	08013f91 	.word	0x08013f91
 8013e58:	08013fa5 	.word	0x08013fa5
 8013e5c:	08013fab 	.word	0x08013fab
 8013e60:	08013fb1 	.word	0x08013fb1
 8013e64:	08013fb7 	.word	0x08013fb7
 8013e68:	08013fc3 	.word	0x08013fc3
 8013e6c:	08013fcf 	.word	0x08013fcf
 8013e70:	08013fd5 	.word	0x08013fd5
 8013e74:	08013fdd 	.word	0x08013fdd
 8013e78:	08013fe3 	.word	0x08013fe3
 8013e7c:	08013fe9 	.word	0x08013fe9
 8013e80:	08013fef 	.word	0x08013fef
 8013e84:	08013ef7 	.word	0x08013ef7
 8013e88:	08014069 	.word	0x08014069
 8013e8c:	08014069 	.word	0x08014069
 8013e90:	08014069 	.word	0x08014069
 8013e94:	08014069 	.word	0x08014069
 8013e98:	08014069 	.word	0x08014069
 8013e9c:	08014069 	.word	0x08014069
 8013ea0:	08014069 	.word	0x08014069
 8013ea4:	08014069 	.word	0x08014069
 8013ea8:	08014069 	.word	0x08014069
 8013eac:	08014069 	.word	0x08014069
 8013eb0:	08014069 	.word	0x08014069
 8013eb4:	08014069 	.word	0x08014069
 8013eb8:	08014069 	.word	0x08014069
 8013ebc:	08013ff7 	.word	0x08013ff7
 8013ec0:	0801400b 	.word	0x0801400b
 8013ec4:	08014019 	.word	0x08014019
 8013ec8:	0801401f 	.word	0x0801401f
 8013ecc:	08014069 	.word	0x08014069
 8013ed0:	08014025 	.word	0x08014025
 8013ed4:	08014039 	.word	0x08014039
 8013ed8:	0801403f 	.word	0x0801403f
 8013edc:	08014045 	.word	0x08014045
 8013ee0:	08014055 	.word	0x08014055
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 8013ee4:	2308      	movs	r3, #8
 8013ee6:	61bb      	str	r3, [r7, #24]
            break;
 8013ee8:	e0bf      	b.n	801406a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = US915_TX_MIN_DATARATE;
 8013eea:	2300      	movs	r3, #0
 8013eec:	61bb      	str	r3, [r7, #24]
            break;
 8013eee:	e0bc      	b.n	801406a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = US915_DEFAULT_DATARATE;
 8013ef0:	2300      	movs	r3, #0
 8013ef2:	61bb      	str	r3, [r7, #24]
            break;
 8013ef4:	e0b9      	b.n	801406a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8013efc:	733b      	strb	r3, [r7, #12]
 8013efe:	2304      	movs	r3, #4
 8013f00:	737b      	strb	r3, [r7, #13]
 8013f02:	2300      	movs	r3, #0
 8013f04:	73bb      	strb	r3, [r7, #14]
 8013f06:	2348      	movs	r3, #72	@ 0x48
 8013f08:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )US915_TX_MAX_DATARATE,
                .MinDr = ( int8_t )US915_TX_MIN_DATARATE,
                .NbChannels = US915_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 8013f0a:	4b5b      	ldr	r3, [pc, #364]	@ (8014078 <RegionUS915GetPhyParam+0x294>)
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8013f12:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8013f14:	4b58      	ldr	r3, [pc, #352]	@ (8014078 <RegionUS915GetPhyParam+0x294>)
 8013f16:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8013f18:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 8013f1a:	f107 030c 	add.w	r3, r7, #12
 8013f1e:	4618      	mov	r0, r3
 8013f20:	f7fe fc59 	bl	80127d6 <RegionCommonGetNextLowerTxDr>
 8013f24:	4603      	mov	r3, r0
 8013f26:	61bb      	str	r3, [r7, #24]
            break;
 8013f28:	e09f      	b.n	801406a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = US915_MAX_TX_POWER;
 8013f2a:	2300      	movs	r3, #0
 8013f2c:	61bb      	str	r3, [r7, #24]
            break;
 8013f2e:	e09c      	b.n	801406a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = US915_DEFAULT_TX_POWER;
 8013f30:	2300      	movs	r3, #0
 8013f32:	61bb      	str	r3, [r7, #24]
            break;
 8013f34:	e099      	b.n	801406a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8013f36:	2340      	movs	r3, #64	@ 0x40
 8013f38:	61bb      	str	r3, [r7, #24]
            break;
 8013f3a:	e096      	b.n	801406a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 8013f3c:	2320      	movs	r3, #32
 8013f3e:	61bb      	str	r3, [r7, #24]
            break;
 8013f40:	e093      	b.n	801406a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013f48:	461a      	mov	r2, r3
 8013f4a:	4b4c      	ldr	r3, [pc, #304]	@ (801407c <RegionUS915GetPhyParam+0x298>)
 8013f4c:	5c9b      	ldrb	r3, [r3, r2]
 8013f4e:	61bb      	str	r3, [r7, #24]
            break;
 8013f50:	e08b      	b.n	801406a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8013f58:	461a      	mov	r2, r3
 8013f5a:	4b49      	ldr	r3, [pc, #292]	@ (8014080 <RegionUS915GetPhyParam+0x29c>)
 8013f5c:	5c9b      	ldrb	r3, [r3, r2]
 8013f5e:	61bb      	str	r3, [r7, #24]
            break;
 8013f60:	e083      	b.n	801406a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = US915_DUTY_CYCLE_ENABLED;
 8013f62:	2300      	movs	r3, #0
 8013f64:	61bb      	str	r3, [r7, #24]
            break;
 8013f66:	e080      	b.n	801406a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = US915_MAX_RX_WINDOW;
 8013f68:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8013f6c:	61bb      	str	r3, [r7, #24]
            break;
 8013f6e:	e07c      	b.n	801406a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 8013f70:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8013f74:	61bb      	str	r3, [r7, #24]
            break;
 8013f76:	e078      	b.n	801406a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8013f78:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8013f7c:	61bb      	str	r3, [r7, #24]
            break;
 8013f7e:	e074      	b.n	801406a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 8013f80:	f241 3388 	movw	r3, #5000	@ 0x1388
 8013f84:	61bb      	str	r3, [r7, #24]
            break;
 8013f86:	e070      	b.n	801406a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8013f88:	f241 7370 	movw	r3, #6000	@ 0x1770
 8013f8c:	61bb      	str	r3, [r7, #24]
            break;
 8013f8e:	e06c      	b.n	801406a <RegionUS915GetPhyParam+0x286>
            break;
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 8013f90:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8013f94:	483b      	ldr	r0, [pc, #236]	@ (8014084 <RegionUS915GetPhyParam+0x2a0>)
 8013f96:	f002 fd45 	bl	8016a24 <randr>
 8013f9a:	4603      	mov	r3, r0
 8013f9c:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8013fa0:	61bb      	str	r3, [r7, #24]
            break;
 8013fa2:	e062      	b.n	801406a <RegionUS915GetPhyParam+0x286>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 8013fa4:	2300      	movs	r3, #0
 8013fa6:	61bb      	str	r3, [r7, #24]
            break;
 8013fa8:	e05f      	b.n	801406a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = US915_RX_WND_2_FREQ;
 8013faa:	4b37      	ldr	r3, [pc, #220]	@ (8014088 <RegionUS915GetPhyParam+0x2a4>)
 8013fac:	61bb      	str	r3, [r7, #24]
            break;
 8013fae:	e05c      	b.n	801406a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = US915_RX_WND_2_DR;
 8013fb0:	2308      	movs	r3, #8
 8013fb2:	61bb      	str	r3, [r7, #24]
            break;
 8013fb4:	e059      	b.n	801406a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8013fb6:	4b30      	ldr	r3, [pc, #192]	@ (8014078 <RegionUS915GetPhyParam+0x294>)
 8013fb8:	681b      	ldr	r3, [r3, #0]
 8013fba:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8013fbe:	61bb      	str	r3, [r7, #24]
            break;
 8013fc0:	e053      	b.n	801406a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8013fc2:	4b2d      	ldr	r3, [pc, #180]	@ (8014078 <RegionUS915GetPhyParam+0x294>)
 8013fc4:	681b      	ldr	r3, [r3, #0]
 8013fc6:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8013fca:	61bb      	str	r3, [r7, #24]
            break;
 8013fcc:	e04d      	b.n	801406a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = US915_MAX_NB_CHANNELS;
 8013fce:	2348      	movs	r3, #72	@ 0x48
 8013fd0:	61bb      	str	r3, [r7, #24]
            break;
 8013fd2:	e04a      	b.n	801406a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8013fd4:	4b28      	ldr	r3, [pc, #160]	@ (8014078 <RegionUS915GetPhyParam+0x294>)
 8013fd6:	681b      	ldr	r3, [r3, #0]
 8013fd8:	61bb      	str	r3, [r7, #24]
            break;
 8013fda:	e046      	b.n	801406a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = US915_DEFAULT_UPLINK_DWELL_TIME;
 8013fdc:	2300      	movs	r3, #0
 8013fde:	61bb      	str	r3, [r7, #24]
            break;
 8013fe0:	e043      	b.n	801406a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8013fe2:	2300      	movs	r3, #0
 8013fe4:	61bb      	str	r3, [r7, #24]
            break;
 8013fe6:	e040      	b.n	801406a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 8013fe8:	4b28      	ldr	r3, [pc, #160]	@ (801408c <RegionUS915GetPhyParam+0x2a8>)
 8013fea:	61bb      	str	r3, [r7, #24]
            break;
 8013fec:	e03d      	b.n	801406a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = 0;
 8013fee:	f04f 0300 	mov.w	r3, #0
 8013ff2:	61bb      	str	r3, [r7, #24]
            break;
 8013ff4:	e039      	b.n	801406a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	791b      	ldrb	r3, [r3, #4]
 8013ffa:	4a25      	ldr	r2, [pc, #148]	@ (8014090 <RegionUS915GetPhyParam+0x2ac>)
 8013ffc:	4922      	ldr	r1, [pc, #136]	@ (8014088 <RegionUS915GetPhyParam+0x2a4>)
 8013ffe:	4618      	mov	r0, r3
 8014000:	f7fd fd4c 	bl	8011a9c <RegionBaseUSCalcDownlinkFrequency>
 8014004:	4603      	mov	r3, r0
 8014006:	61bb      	str	r3, [r7, #24]
                                                                US915_BEACON_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 8014008:	e02f      	b.n	801406a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 801400a:	2317      	movs	r3, #23
 801400c:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 801400e:	2304      	movs	r3, #4
 8014010:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 8014012:	2303      	movs	r3, #3
 8014014:	76bb      	strb	r3, [r7, #26]
            break;
 8014016:	e028      	b.n	801406a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 8014018:	2308      	movs	r3, #8
 801401a:	61bb      	str	r3, [r7, #24]
            break;
 801401c:	e025      	b.n	801406a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BEACON_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 801401e:	2308      	movs	r3, #8
 8014020:	61bb      	str	r3, [r7, #24]
            break;
 8014022:	e022      	b.n	801406a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	791b      	ldrb	r3, [r3, #4]
 8014028:	4a19      	ldr	r2, [pc, #100]	@ (8014090 <RegionUS915GetPhyParam+0x2ac>)
 801402a:	4917      	ldr	r1, [pc, #92]	@ (8014088 <RegionUS915GetPhyParam+0x2a4>)
 801402c:	4618      	mov	r0, r3
 801402e:	f7fd fd35 	bl	8011a9c <RegionBaseUSCalcDownlinkFrequency>
 8014032:	4603      	mov	r3, r0
 8014034:	61bb      	str	r3, [r7, #24]
                                                                US915_PING_SLOT_CHANNEL_FREQ,
                                                                US915_BEACON_CHANNEL_STEPWIDTH );
            break;
 8014036:	e018      	b.n	801406a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 8014038:	2308      	movs	r3, #8
 801403a:	61bb      	str	r3, [r7, #24]
            break;
 801403c:	e015      	b.n	801406a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_PING_SLOT_NB_CHANNELS:
        {
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 801403e:	2308      	movs	r3, #8
 8014040:	61bb      	str	r3, [r7, #24]
            break;
 8014042:	e012      	b.n	801406a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801404a:	461a      	mov	r2, r3
 801404c:	4b11      	ldr	r3, [pc, #68]	@ (8014094 <RegionUS915GetPhyParam+0x2b0>)
 801404e:	5c9b      	ldrb	r3, [r3, r2]
 8014050:	61bb      	str	r3, [r7, #24]
            break;
 8014052:	e00a      	b.n	801406a <RegionUS915GetPhyParam+0x286>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801405a:	490f      	ldr	r1, [pc, #60]	@ (8014098 <RegionUS915GetPhyParam+0x2b4>)
 801405c:	4618      	mov	r0, r3
 801405e:	f7fe fc0d 	bl	801287c <RegionCommonGetBandwidth>
 8014062:	4603      	mov	r3, r0
 8014064:	61bb      	str	r3, [r7, #24]
            break;
 8014066:	e000      	b.n	801406a <RegionUS915GetPhyParam+0x286>
        }
        default:
        {
            break;
 8014068:	bf00      	nop
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 801406a:	69bb      	ldr	r3, [r7, #24]
 801406c:	61fb      	str	r3, [r7, #28]
 801406e:	69fb      	ldr	r3, [r7, #28]
}
 8014070:	4618      	mov	r0, r3
 8014072:	3720      	adds	r7, #32
 8014074:	46bd      	mov	sp, r7
 8014076:	bd80      	pop	{r7, pc}
 8014078:	2000122c 	.word	0x2000122c
 801407c:	08020d44 	.word	0x08020d44
 8014080:	08020d54 	.word	0x08020d54
 8014084:	fffffc18 	.word	0xfffffc18
 8014088:	370870a0 	.word	0x370870a0
 801408c:	4200999a 	.word	0x4200999a
 8014090:	000927c0 	.word	0x000927c0
 8014094:	08020ce0 	.word	0x08020ce0
 8014098:	08020cf0 	.word	0x08020cf0

0801409c <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 801409c:	b590      	push	{r4, r7, lr}
 801409e:	b085      	sub	sp, #20
 80140a0:	af02      	add	r7, sp, #8
 80140a2:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 80140a4:	4b11      	ldr	r3, [pc, #68]	@ (80140ec <RegionUS915SetBandTxDone+0x50>)
 80140a6:	681a      	ldr	r2, [r3, #0]
 80140a8:	4b11      	ldr	r3, [pc, #68]	@ (80140f0 <RegionUS915SetBandTxDone+0x54>)
 80140aa:	6819      	ldr	r1, [r3, #0]
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	781b      	ldrb	r3, [r3, #0]
 80140b0:	4618      	mov	r0, r3
 80140b2:	4603      	mov	r3, r0
 80140b4:	005b      	lsls	r3, r3, #1
 80140b6:	4403      	add	r3, r0
 80140b8:	009b      	lsls	r3, r3, #2
 80140ba:	440b      	add	r3, r1
 80140bc:	3309      	adds	r3, #9
 80140be:	781b      	ldrb	r3, [r3, #0]
 80140c0:	4619      	mov	r1, r3
 80140c2:	460b      	mov	r3, r1
 80140c4:	005b      	lsls	r3, r3, #1
 80140c6:	440b      	add	r3, r1
 80140c8:	00db      	lsls	r3, r3, #3
 80140ca:	18d0      	adds	r0, r2, r3
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	6899      	ldr	r1, [r3, #8]
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	785c      	ldrb	r4, [r3, #1]
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	691a      	ldr	r2, [r3, #16]
 80140d8:	9200      	str	r2, [sp, #0]
 80140da:	68db      	ldr	r3, [r3, #12]
 80140dc:	4622      	mov	r2, r4
 80140de:	f7fd ff53 	bl	8011f88 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 80140e2:	bf00      	nop
 80140e4:	370c      	adds	r7, #12
 80140e6:	46bd      	mov	sp, r7
 80140e8:	bd90      	pop	{r4, r7, pc}
 80140ea:	bf00      	nop
 80140ec:	20001230 	.word	0x20001230
 80140f0:	2000122c 	.word	0x2000122c

080140f4 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 80140f4:	b580      	push	{r7, lr}
 80140f6:	b08a      	sub	sp, #40	@ 0x28
 80140f8:	af00      	add	r7, sp, #0
 80140fa:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 80140fc:	2301      	movs	r3, #1
 80140fe:	81bb      	strh	r3, [r7, #12]
 8014100:	2300      	movs	r3, #0
 8014102:	73bb      	strb	r3, [r7, #14]
 8014104:	2300      	movs	r3, #0
 8014106:	613b      	str	r3, [r7, #16]
 8014108:	2300      	movs	r3, #0
 801410a:	617b      	str	r3, [r7, #20]
 801410c:	2300      	movs	r3, #0
 801410e:	61bb      	str	r3, [r7, #24]
 8014110:	2300      	movs	r3, #0
 8014112:	61fb      	str	r3, [r7, #28]
 8014114:	2300      	movs	r3, #0
 8014116:	f887 3020 	strb.w	r3, [r7, #32]
    {
       US915_BAND0
    };

    switch( params->Type )
 801411a:	687b      	ldr	r3, [r7, #4]
 801411c:	7b1b      	ldrb	r3, [r3, #12]
 801411e:	2b00      	cmp	r3, #0
 8014120:	d007      	beq.n	8014132 <RegionUS915InitDefaults+0x3e>
 8014122:	2b00      	cmp	r3, #0
 8014124:	f2c0 8104 	blt.w	8014330 <RegionUS915InitDefaults+0x23c>
 8014128:	3b01      	subs	r3, #1
 801412a:	2b01      	cmp	r3, #1
 801412c:	f200 8100 	bhi.w	8014330 <RegionUS915InitDefaults+0x23c>
 8014130:	e0ce      	b.n	80142d0 <RegionUS915InitDefaults+0x1dc>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	681b      	ldr	r3, [r3, #0]
 8014136:	2b00      	cmp	r3, #0
 8014138:	f000 80fc 	beq.w	8014334 <RegionUS915InitDefaults+0x240>
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	685b      	ldr	r3, [r3, #4]
 8014140:	2b00      	cmp	r3, #0
 8014142:	f000 80f7 	beq.w	8014334 <RegionUS915InitDefaults+0x240>
            {
                return;
            }

            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	681b      	ldr	r3, [r3, #0]
 801414a:	4a7c      	ldr	r2, [pc, #496]	@ (801433c <RegionUS915InitDefaults+0x248>)
 801414c:	6013      	str	r3, [r2, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	685b      	ldr	r3, [r3, #4]
 8014152:	4a7b      	ldr	r2, [pc, #492]	@ (8014340 <RegionUS915InitDefaults+0x24c>)
 8014154:	6013      	str	r3, [r2, #0]
            RegionNvmGroup1->JoinTrialsCounter = 0;

            // Default bands
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            RegionBands = (Band_t*) params->Bands;
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	689b      	ldr	r3, [r3, #8]
 801415a:	4a7a      	ldr	r2, [pc, #488]	@ (8014344 <RegionUS915InitDefaults+0x250>)
 801415c:	6013      	str	r3, [r2, #0]

            // Initialize 8 bit channel groups index
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 801415e:	4b77      	ldr	r3, [pc, #476]	@ (801433c <RegionUS915InitDefaults+0x248>)
 8014160:	681b      	ldr	r3, [r3, #0]
 8014162:	2200      	movs	r2, #0
 8014164:	731a      	strb	r2, [r3, #12]

            // Initialize the join trials counter
            RegionNvmGroup1->JoinTrialsCounter = 0;
 8014166:	4b75      	ldr	r3, [pc, #468]	@ (801433c <RegionUS915InitDefaults+0x248>)
 8014168:	681b      	ldr	r3, [r3, #0]
 801416a:	2200      	movs	r2, #0
 801416c:	735a      	strb	r2, [r3, #13]

            // Default bands
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 801416e:	4b75      	ldr	r3, [pc, #468]	@ (8014344 <RegionUS915InitDefaults+0x250>)
 8014170:	681b      	ldr	r3, [r3, #0]
 8014172:	f107 010c 	add.w	r1, r7, #12
 8014176:	2218      	movs	r2, #24
 8014178:	4618      	mov	r0, r3
 801417a:	f002 fc6a 	bl	8016a52 <memcpy1>
#endif /* REGION_VERSION */

            // Default channels
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 801417e:	2300      	movs	r3, #0
 8014180:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8014184:	e02e      	b.n	80141e4 <RegionUS915InitDefaults+0xf0>
            {
                // 125 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 8014186:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801418a:	4a6f      	ldr	r2, [pc, #444]	@ (8014348 <RegionUS915InitDefaults+0x254>)
 801418c:	fb03 f202 	mul.w	r2, r3, r2
 8014190:	4b6e      	ldr	r3, [pc, #440]	@ (801434c <RegionUS915InitDefaults+0x258>)
 8014192:	4413      	add	r3, r2
 8014194:	4a6a      	ldr	r2, [pc, #424]	@ (8014340 <RegionUS915InitDefaults+0x24c>)
 8014196:	6811      	ldr	r1, [r2, #0]
 8014198:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801419c:	4618      	mov	r0, r3
 801419e:	4613      	mov	r3, r2
 80141a0:	005b      	lsls	r3, r3, #1
 80141a2:	4413      	add	r3, r2
 80141a4:	009b      	lsls	r3, r3, #2
 80141a6:	440b      	add	r3, r1
 80141a8:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 80141aa:	4b65      	ldr	r3, [pc, #404]	@ (8014340 <RegionUS915InitDefaults+0x24c>)
 80141ac:	6819      	ldr	r1, [r3, #0]
 80141ae:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80141b2:	4613      	mov	r3, r2
 80141b4:	005b      	lsls	r3, r3, #1
 80141b6:	4413      	add	r3, r2
 80141b8:	009b      	lsls	r3, r3, #2
 80141ba:	440b      	add	r3, r1
 80141bc:	3308      	adds	r3, #8
 80141be:	2230      	movs	r2, #48	@ 0x30
 80141c0:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 80141c2:	4b5f      	ldr	r3, [pc, #380]	@ (8014340 <RegionUS915InitDefaults+0x24c>)
 80141c4:	6819      	ldr	r1, [r3, #0]
 80141c6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80141ca:	4613      	mov	r3, r2
 80141cc:	005b      	lsls	r3, r3, #1
 80141ce:	4413      	add	r3, r2
 80141d0:	009b      	lsls	r3, r3, #2
 80141d2:	440b      	add	r3, r1
 80141d4:	3309      	adds	r3, #9
 80141d6:	2200      	movs	r2, #0
 80141d8:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 80141da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80141de:	3301      	adds	r3, #1
 80141e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80141e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80141e8:	2b3f      	cmp	r3, #63	@ 0x3f
 80141ea:	d9cc      	bls.n	8014186 <RegionUS915InitDefaults+0x92>
            }
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 80141ec:	2340      	movs	r3, #64	@ 0x40
 80141ee:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80141f2:	e02f      	b.n	8014254 <RegionUS915InitDefaults+0x160>
            {
                // 500 kHz channels
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 80141f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80141f8:	3b40      	subs	r3, #64	@ 0x40
 80141fa:	4a55      	ldr	r2, [pc, #340]	@ (8014350 <RegionUS915InitDefaults+0x25c>)
 80141fc:	fb03 f202 	mul.w	r2, r3, r2
 8014200:	4b54      	ldr	r3, [pc, #336]	@ (8014354 <RegionUS915InitDefaults+0x260>)
 8014202:	4413      	add	r3, r2
 8014204:	4a4e      	ldr	r2, [pc, #312]	@ (8014340 <RegionUS915InitDefaults+0x24c>)
 8014206:	6811      	ldr	r1, [r2, #0]
 8014208:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801420c:	4618      	mov	r0, r3
 801420e:	4613      	mov	r3, r2
 8014210:	005b      	lsls	r3, r3, #1
 8014212:	4413      	add	r3, r2
 8014214:	009b      	lsls	r3, r3, #2
 8014216:	440b      	add	r3, r1
 8014218:	6018      	str	r0, [r3, #0]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 801421a:	4b49      	ldr	r3, [pc, #292]	@ (8014340 <RegionUS915InitDefaults+0x24c>)
 801421c:	6819      	ldr	r1, [r3, #0]
 801421e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8014222:	4613      	mov	r3, r2
 8014224:	005b      	lsls	r3, r3, #1
 8014226:	4413      	add	r3, r2
 8014228:	009b      	lsls	r3, r3, #2
 801422a:	440b      	add	r3, r1
 801422c:	3308      	adds	r3, #8
 801422e:	2244      	movs	r2, #68	@ 0x44
 8014230:	701a      	strb	r2, [r3, #0]
                RegionNvmGroup2->Channels[i].Band = 0;
 8014232:	4b43      	ldr	r3, [pc, #268]	@ (8014340 <RegionUS915InitDefaults+0x24c>)
 8014234:	6819      	ldr	r1, [r3, #0]
 8014236:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 801423a:	4613      	mov	r3, r2
 801423c:	005b      	lsls	r3, r3, #1
 801423e:	4413      	add	r3, r2
 8014240:	009b      	lsls	r3, r3, #2
 8014242:	440b      	add	r3, r1
 8014244:	3309      	adds	r3, #9
 8014246:	2200      	movs	r2, #0
 8014248:	701a      	strb	r2, [r3, #0]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 801424a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801424e:	3301      	adds	r3, #1
 8014250:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8014254:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8014258:	2b47      	cmp	r3, #71	@ 0x47
 801425a:	d9cb      	bls.n	80141f4 <RegionUS915InitDefaults+0x100>
            RegionNvmGroup2->ChannelsDefaultMask[2] = HYBRID_DEFAULT_MASK2;
            RegionNvmGroup2->ChannelsDefaultMask[3] = HYBRID_DEFAULT_MASK3;
            RegionNvmGroup2->ChannelsDefaultMask[4] = HYBRID_DEFAULT_MASK4;
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
#else
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 801425c:	4b38      	ldr	r3, [pc, #224]	@ (8014340 <RegionUS915InitDefaults+0x24c>)
 801425e:	681b      	ldr	r3, [r3, #0]
 8014260:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014264:	f8a3 236c 	strh.w	r2, [r3, #876]	@ 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 8014268:	4b35      	ldr	r3, [pc, #212]	@ (8014340 <RegionUS915InitDefaults+0x24c>)
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014270:	f8a3 236e 	strh.w	r2, [r3, #878]	@ 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 8014274:	4b32      	ldr	r3, [pc, #200]	@ (8014340 <RegionUS915InitDefaults+0x24c>)
 8014276:	681b      	ldr	r3, [r3, #0]
 8014278:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801427c:	f8a3 2370 	strh.w	r2, [r3, #880]	@ 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 8014280:	4b2f      	ldr	r3, [pc, #188]	@ (8014340 <RegionUS915InitDefaults+0x24c>)
 8014282:	681b      	ldr	r3, [r3, #0]
 8014284:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014288:	f8a3 2372 	strh.w	r2, [r3, #882]	@ 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 801428c:	4b2c      	ldr	r3, [pc, #176]	@ (8014340 <RegionUS915InitDefaults+0x24c>)
 801428e:	681b      	ldr	r3, [r3, #0]
 8014290:	22ff      	movs	r2, #255	@ 0xff
 8014292:	f8a3 2374 	strh.w	r2, [r3, #884]	@ 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8014296:	4b2a      	ldr	r3, [pc, #168]	@ (8014340 <RegionUS915InitDefaults+0x24c>)
 8014298:	681b      	ldr	r3, [r3, #0]
 801429a:	2200      	movs	r2, #0
 801429c:	f8a3 2376 	strh.w	r2, [r3, #886]	@ 0x376
#endif /* HYBRID_ENABLED == 1 */

            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80142a0:	4b27      	ldr	r3, [pc, #156]	@ (8014340 <RegionUS915InitDefaults+0x24c>)
 80142a2:	681b      	ldr	r3, [r3, #0]
 80142a4:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 80142a8:	4b25      	ldr	r3, [pc, #148]	@ (8014340 <RegionUS915InitDefaults+0x24c>)
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 80142b0:	2206      	movs	r2, #6
 80142b2:	4619      	mov	r1, r3
 80142b4:	f7fd fe42 	bl	8011f3c <RegionCommonChanMaskCopy>

            // Copy into channels mask remaining
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 80142b8:	4b20      	ldr	r3, [pc, #128]	@ (801433c <RegionUS915InitDefaults+0x248>)
 80142ba:	681b      	ldr	r3, [r3, #0]
 80142bc:	4618      	mov	r0, r3
 80142be:	4b20      	ldr	r3, [pc, #128]	@ (8014340 <RegionUS915InitDefaults+0x24c>)
 80142c0:	681b      	ldr	r3, [r3, #0]
 80142c2:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80142c6:	2206      	movs	r2, #6
 80142c8:	4619      	mov	r1, r3
 80142ca:	f7fd fe37 	bl	8011f3c <RegionCommonChanMaskCopy>
            break;
 80142ce:	e032      	b.n	8014336 <RegionUS915InitDefaults+0x242>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80142d0:	4b1b      	ldr	r3, [pc, #108]	@ (8014340 <RegionUS915InitDefaults+0x24c>)
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 80142d8:	4b19      	ldr	r3, [pc, #100]	@ (8014340 <RegionUS915InitDefaults+0x24c>)
 80142da:	681b      	ldr	r3, [r3, #0]
 80142dc:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 80142e0:	2206      	movs	r2, #6
 80142e2:	4619      	mov	r1, r3
 80142e4:	f7fd fe2a 	bl	8011f3c <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
 80142e8:	2300      	movs	r3, #0
 80142ea:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80142ee:	e01a      	b.n	8014326 <RegionUS915InitDefaults+0x232>
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 80142f0:	4b12      	ldr	r3, [pc, #72]	@ (801433c <RegionUS915InitDefaults+0x248>)
 80142f2:	681b      	ldr	r3, [r3, #0]
 80142f4:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80142f8:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80142fc:	4b10      	ldr	r3, [pc, #64]	@ (8014340 <RegionUS915InitDefaults+0x24c>)
 80142fe:	681b      	ldr	r3, [r3, #0]
 8014300:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8014304:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 8014308:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 801430c:	4b0b      	ldr	r3, [pc, #44]	@ (801433c <RegionUS915InitDefaults+0x248>)
 801430e:	681b      	ldr	r3, [r3, #0]
 8014310:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8014314:	4001      	ands	r1, r0
 8014316:	b289      	uxth	r1, r1
 8014318:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < 6; i++ )
 801431c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8014320:	3301      	adds	r3, #1
 8014322:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8014326:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 801432a:	2b05      	cmp	r3, #5
 801432c:	d9e0      	bls.n	80142f0 <RegionUS915InitDefaults+0x1fc>
            }
            break;
 801432e:	e002      	b.n	8014336 <RegionUS915InitDefaults+0x242>
        }
        default:
        {
            break;
 8014330:	bf00      	nop
 8014332:	e000      	b.n	8014336 <RegionUS915InitDefaults+0x242>
                return;
 8014334:	bf00      	nop
        }
    }
#endif /* REGION_US915 */
}
 8014336:	3728      	adds	r7, #40	@ 0x28
 8014338:	46bd      	mov	sp, r7
 801433a:	bd80      	pop	{r7, pc}
 801433c:	20001228 	.word	0x20001228
 8014340:	2000122c 	.word	0x2000122c
 8014344:	20001230 	.word	0x20001230
 8014348:	00030d40 	.word	0x00030d40
 801434c:	35c80160 	.word	0x35c80160
 8014350:	00186a00 	.word	0x00186a00
 8014354:	35d2afc0 	.word	0x35d2afc0

08014358 <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8014358:	b580      	push	{r7, lr}
 801435a:	b082      	sub	sp, #8
 801435c:	af00      	add	r7, sp, #0
 801435e:	6078      	str	r0, [r7, #4]
 8014360:	460b      	mov	r3, r1
 8014362:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_US915 )
    switch( phyAttribute )
 8014364:	78fb      	ldrb	r3, [r7, #3]
 8014366:	2b0f      	cmp	r3, #15
 8014368:	d867      	bhi.n	801443a <RegionUS915Verify+0xe2>
 801436a:	a201      	add	r2, pc, #4	@ (adr r2, 8014370 <RegionUS915Verify+0x18>)
 801436c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014370:	080143b1 	.word	0x080143b1
 8014374:	0801443b 	.word	0x0801443b
 8014378:	0801443b 	.word	0x0801443b
 801437c:	0801443b 	.word	0x0801443b
 8014380:	0801443b 	.word	0x0801443b
 8014384:	080143bf 	.word	0x080143bf
 8014388:	080143dd 	.word	0x080143dd
 801438c:	080143fb 	.word	0x080143fb
 8014390:	0801443b 	.word	0x0801443b
 8014394:	08014419 	.word	0x08014419
 8014398:	08014419 	.word	0x08014419
 801439c:	0801443b 	.word	0x0801443b
 80143a0:	0801443b 	.word	0x0801443b
 80143a4:	0801443b 	.word	0x0801443b
 80143a8:	0801443b 	.word	0x0801443b
 80143ac:	08014437 	.word	0x08014437
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	681b      	ldr	r3, [r3, #0]
 80143b4:	4618      	mov	r0, r3
 80143b6:	f7ff fca1 	bl	8013cfc <VerifyRfFreq>
 80143ba:	4603      	mov	r3, r0
 80143bc:	e03e      	b.n	801443c <RegionUS915Verify+0xe4>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	f993 3000 	ldrsb.w	r3, [r3]
 80143c4:	2204      	movs	r2, #4
 80143c6:	2100      	movs	r1, #0
 80143c8:	4618      	mov	r0, r3
 80143ca:	f7fd fd3a 	bl	8011e42 <RegionCommonValueInRange>
 80143ce:	4603      	mov	r3, r0
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	bf14      	ite	ne
 80143d4:	2301      	movne	r3, #1
 80143d6:	2300      	moveq	r3, #0
 80143d8:	b2db      	uxtb	r3, r3
 80143da:	e02f      	b.n	801443c <RegionUS915Verify+0xe4>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	f993 3000 	ldrsb.w	r3, [r3]
 80143e2:	2205      	movs	r2, #5
 80143e4:	2100      	movs	r1, #0
 80143e6:	4618      	mov	r0, r3
 80143e8:	f7fd fd2b 	bl	8011e42 <RegionCommonValueInRange>
 80143ec:	4603      	mov	r3, r0
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	bf14      	ite	ne
 80143f2:	2301      	movne	r3, #1
 80143f4:	2300      	moveq	r3, #0
 80143f6:	b2db      	uxtb	r3, r3
 80143f8:	e020      	b.n	801443c <RegionUS915Verify+0xe4>
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	f993 3000 	ldrsb.w	r3, [r3]
 8014400:	220d      	movs	r2, #13
 8014402:	2108      	movs	r1, #8
 8014404:	4618      	mov	r0, r3
 8014406:	f7fd fd1c 	bl	8011e42 <RegionCommonValueInRange>
 801440a:	4603      	mov	r3, r0
 801440c:	2b00      	cmp	r3, #0
 801440e:	bf14      	ite	ne
 8014410:	2301      	movne	r3, #1
 8014412:	2300      	moveq	r3, #0
 8014414:	b2db      	uxtb	r3, r3
 8014416:	e011      	b.n	801443c <RegionUS915Verify+0xe4>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	f993 3000 	ldrsb.w	r3, [r3]
 801441e:	220e      	movs	r2, #14
 8014420:	2100      	movs	r1, #0
 8014422:	4618      	mov	r0, r3
 8014424:	f7fd fd0d 	bl	8011e42 <RegionCommonValueInRange>
 8014428:	4603      	mov	r3, r0
 801442a:	2b00      	cmp	r3, #0
 801442c:	bf14      	ite	ne
 801442e:	2301      	movne	r3, #1
 8014430:	2300      	moveq	r3, #0
 8014432:	b2db      	uxtb	r3, r3
 8014434:	e002      	b.n	801443c <RegionUS915Verify+0xe4>
        }
        case PHY_DUTY_CYCLE:
        {
            return US915_DUTY_CYCLE_ENABLED;
 8014436:	2300      	movs	r3, #0
 8014438:	e000      	b.n	801443c <RegionUS915Verify+0xe4>
        }
        default:
            return false;
 801443a:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_US915 */
}
 801443c:	4618      	mov	r0, r3
 801443e:	3708      	adds	r7, #8
 8014440:	46bd      	mov	sp, r7
 8014442:	bd80      	pop	{r7, pc}

08014444 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8014444:	b480      	push	{r7}
 8014446:	b085      	sub	sp, #20
 8014448:	af00      	add	r7, sp, #0
 801444a:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	7a1b      	ldrb	r3, [r3, #8]
 8014450:	2b10      	cmp	r3, #16
 8014452:	d15e      	bne.n	8014512 <RegionUS915ApplyCFList+0xce>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	685b      	ldr	r3, [r3, #4]
 8014458:	330f      	adds	r3, #15
 801445a:	781b      	ldrb	r3, [r3, #0]
 801445c:	2b01      	cmp	r3, #1
 801445e:	d15a      	bne.n	8014516 <RegionUS915ApplyCFList+0xd2>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 8014460:	2300      	movs	r3, #0
 8014462:	73fb      	strb	r3, [r7, #15]
 8014464:	2300      	movs	r3, #0
 8014466:	73bb      	strb	r3, [r7, #14]
 8014468:	e04f      	b.n	801450a <RegionUS915ApplyCFList+0xc6>
    {
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	685a      	ldr	r2, [r3, #4]
 801446e:	7bbb      	ldrb	r3, [r7, #14]
 8014470:	4413      	add	r3, r2
 8014472:	7819      	ldrb	r1, [r3, #0]
 8014474:	4b2a      	ldr	r3, [pc, #168]	@ (8014520 <RegionUS915ApplyCFList+0xdc>)
 8014476:	681b      	ldr	r3, [r3, #0]
 8014478:	7bfa      	ldrb	r2, [r7, #15]
 801447a:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 801447e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 8014482:	4b27      	ldr	r3, [pc, #156]	@ (8014520 <RegionUS915ApplyCFList+0xdc>)
 8014484:	681b      	ldr	r3, [r3, #0]
 8014486:	7bfa      	ldrb	r2, [r7, #15]
 8014488:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 801448c:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	685a      	ldr	r2, [r3, #4]
 8014494:	7bbb      	ldrb	r3, [r7, #14]
 8014496:	3301      	adds	r3, #1
 8014498:	4413      	add	r3, r2
 801449a:	781b      	ldrb	r3, [r3, #0]
 801449c:	021b      	lsls	r3, r3, #8
 801449e:	b299      	uxth	r1, r3
 80144a0:	4b1f      	ldr	r3, [pc, #124]	@ (8014520 <RegionUS915ApplyCFList+0xdc>)
 80144a2:	681b      	ldr	r3, [r3, #0]
 80144a4:	7bfa      	ldrb	r2, [r7, #15]
 80144a6:	4301      	orrs	r1, r0
 80144a8:	b289      	uxth	r1, r1
 80144aa:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 80144ae:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        if( chMaskItr == 4 )
 80144b2:	7bfb      	ldrb	r3, [r7, #15]
 80144b4:	2b04      	cmp	r3, #4
 80144b6:	d10f      	bne.n	80144d8 <RegionUS915ApplyCFList+0x94>
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 80144b8:	4b19      	ldr	r3, [pc, #100]	@ (8014520 <RegionUS915ApplyCFList+0xdc>)
 80144ba:	681b      	ldr	r3, [r3, #0]
 80144bc:	7bfa      	ldrb	r2, [r7, #15]
 80144be:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 80144c2:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80144c6:	4b16      	ldr	r3, [pc, #88]	@ (8014520 <RegionUS915ApplyCFList+0xdc>)
 80144c8:	681b      	ldr	r3, [r3, #0]
 80144ca:	7bfa      	ldrb	r2, [r7, #15]
 80144cc:	b2c9      	uxtb	r1, r1
 80144ce:	b289      	uxth	r1, r1
 80144d0:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 80144d4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 80144d8:	4b12      	ldr	r3, [pc, #72]	@ (8014524 <RegionUS915ApplyCFList+0xe0>)
 80144da:	681b      	ldr	r3, [r3, #0]
 80144dc:	7bfa      	ldrb	r2, [r7, #15]
 80144de:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80144e2:	4b0f      	ldr	r3, [pc, #60]	@ (8014520 <RegionUS915ApplyCFList+0xdc>)
 80144e4:	681b      	ldr	r3, [r3, #0]
 80144e6:	7bfa      	ldrb	r2, [r7, #15]
 80144e8:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 80144ec:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80144f0:	4b0c      	ldr	r3, [pc, #48]	@ (8014524 <RegionUS915ApplyCFList+0xe0>)
 80144f2:	681b      	ldr	r3, [r3, #0]
 80144f4:	7bfa      	ldrb	r2, [r7, #15]
 80144f6:	4001      	ands	r1, r0
 80144f8:	b289      	uxth	r1, r1
 80144fa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 80144fe:	7bfb      	ldrb	r3, [r7, #15]
 8014500:	3301      	adds	r3, #1
 8014502:	73fb      	strb	r3, [r7, #15]
 8014504:	7bbb      	ldrb	r3, [r7, #14]
 8014506:	3302      	adds	r3, #2
 8014508:	73bb      	strb	r3, [r7, #14]
 801450a:	7bfb      	ldrb	r3, [r7, #15]
 801450c:	2b04      	cmp	r3, #4
 801450e:	d9ac      	bls.n	801446a <RegionUS915ApplyCFList+0x26>
 8014510:	e002      	b.n	8014518 <RegionUS915ApplyCFList+0xd4>
        return;
 8014512:	bf00      	nop
 8014514:	e000      	b.n	8014518 <RegionUS915ApplyCFList+0xd4>
        return;
 8014516:	bf00      	nop
    }
#endif /* REGION_US915 */
}
 8014518:	3714      	adds	r7, #20
 801451a:	46bd      	mov	sp, r7
 801451c:	bc80      	pop	{r7}
 801451e:	4770      	bx	lr
 8014520:	2000122c 	.word	0x2000122c
 8014524:	20001228 	.word	0x20001228

08014528 <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8014528:	b580      	push	{r7, lr}
 801452a:	b084      	sub	sp, #16
 801452c:	af00      	add	r7, sp, #0
 801452e:	6078      	str	r0, [r7, #4]
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	681b      	ldr	r3, [r3, #0]
 8014534:	2204      	movs	r2, #4
 8014536:	2100      	movs	r1, #0
 8014538:	4618      	mov	r0, r3
 801453a:	f7fd fcd3 	bl	8011ee4 <RegionCommonCountChannels>
 801453e:	4603      	mov	r3, r0
 8014540:	73bb      	strb	r3, [r7, #14]

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 8014542:	7bbb      	ldrb	r3, [r7, #14]
 8014544:	2b01      	cmp	r3, #1
 8014546:	d804      	bhi.n	8014552 <RegionUS915ChanMaskSet+0x2a>
 8014548:	7bbb      	ldrb	r3, [r7, #14]
 801454a:	2b00      	cmp	r3, #0
 801454c:	d001      	beq.n	8014552 <RegionUS915ChanMaskSet+0x2a>
        ( nbChannels > 0 ) )
    {
        return false;
 801454e:	2300      	movs	r3, #0
 8014550:	e04a      	b.n	80145e8 <RegionUS915ChanMaskSet+0xc0>
    }

    switch( chanMaskSet->ChannelsMaskType )
 8014552:	687b      	ldr	r3, [r7, #4]
 8014554:	791b      	ldrb	r3, [r3, #4]
 8014556:	2b00      	cmp	r3, #0
 8014558:	d002      	beq.n	8014560 <RegionUS915ChanMaskSet+0x38>
 801455a:	2b01      	cmp	r3, #1
 801455c:	d036      	beq.n	80145cc <RegionUS915ChanMaskSet+0xa4>
 801455e:	e040      	b.n	80145e2 <RegionUS915ChanMaskSet+0xba>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8014560:	4b23      	ldr	r3, [pc, #140]	@ (80145f0 <RegionUS915ChanMaskSet+0xc8>)
 8014562:	681b      	ldr	r3, [r3, #0]
 8014564:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	2206      	movs	r2, #6
 801456e:	4619      	mov	r1, r3
 8014570:	f7fd fce4 	bl	8011f3c <RegionCommonChanMaskCopy>

            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 8014574:	4b1e      	ldr	r3, [pc, #120]	@ (80145f0 <RegionUS915ChanMaskSet+0xc8>)
 8014576:	681b      	ldr	r3, [r3, #0]
 8014578:	f8b3 2374 	ldrh.w	r2, [r3, #884]	@ 0x374
 801457c:	4b1c      	ldr	r3, [pc, #112]	@ (80145f0 <RegionUS915ChanMaskSet+0xc8>)
 801457e:	681b      	ldr	r3, [r3, #0]
 8014580:	b2d2      	uxtb	r2, r2
 8014582:	b292      	uxth	r2, r2
 8014584:	f8a3 2374 	strh.w	r2, [r3, #884]	@ 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 8014588:	4b19      	ldr	r3, [pc, #100]	@ (80145f0 <RegionUS915ChanMaskSet+0xc8>)
 801458a:	681b      	ldr	r3, [r3, #0]
 801458c:	2200      	movs	r2, #0
 801458e:	f8a3 2376 	strh.w	r2, [r3, #886]	@ 0x376

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 8014592:	2300      	movs	r3, #0
 8014594:	73fb      	strb	r3, [r7, #15]
 8014596:	e015      	b.n	80145c4 <RegionUS915ChanMaskSet+0x9c>
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 8014598:	4b16      	ldr	r3, [pc, #88]	@ (80145f4 <RegionUS915ChanMaskSet+0xcc>)
 801459a:	681b      	ldr	r3, [r3, #0]
 801459c:	7bfa      	ldrb	r2, [r7, #15]
 801459e:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
 80145a2:	4b13      	ldr	r3, [pc, #76]	@ (80145f0 <RegionUS915ChanMaskSet+0xc8>)
 80145a4:	681b      	ldr	r3, [r3, #0]
 80145a6:	7bfa      	ldrb	r2, [r7, #15]
 80145a8:	f502 72d8 	add.w	r2, r2, #432	@ 0x1b0
 80145ac:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 80145b0:	4b10      	ldr	r3, [pc, #64]	@ (80145f4 <RegionUS915ChanMaskSet+0xcc>)
 80145b2:	681b      	ldr	r3, [r3, #0]
 80145b4:	7bfa      	ldrb	r2, [r7, #15]
 80145b6:	4001      	ands	r1, r0
 80145b8:	b289      	uxth	r1, r1
 80145ba:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 80145be:	7bfb      	ldrb	r3, [r7, #15]
 80145c0:	3301      	adds	r3, #1
 80145c2:	73fb      	strb	r3, [r7, #15]
 80145c4:	7bfb      	ldrb	r3, [r7, #15]
 80145c6:	2b05      	cmp	r3, #5
 80145c8:	d9e6      	bls.n	8014598 <RegionUS915ChanMaskSet+0x70>
            }
            break;
 80145ca:	e00c      	b.n	80145e6 <RegionUS915ChanMaskSet+0xbe>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 80145cc:	4b08      	ldr	r3, [pc, #32]	@ (80145f0 <RegionUS915ChanMaskSet+0xc8>)
 80145ce:	681b      	ldr	r3, [r3, #0]
 80145d0:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	681b      	ldr	r3, [r3, #0]
 80145d8:	2206      	movs	r2, #6
 80145da:	4619      	mov	r1, r3
 80145dc:	f7fd fcae 	bl	8011f3c <RegionCommonChanMaskCopy>
            break;
 80145e0:	e001      	b.n	80145e6 <RegionUS915ChanMaskSet+0xbe>
        }
        default:
            return false;
 80145e2:	2300      	movs	r3, #0
 80145e4:	e000      	b.n	80145e8 <RegionUS915ChanMaskSet+0xc0>
    }
    return true;
 80145e6:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 80145e8:	4618      	mov	r0, r3
 80145ea:	3710      	adds	r7, #16
 80145ec:	46bd      	mov	sp, r7
 80145ee:	bd80      	pop	{r7, pc}
 80145f0:	2000122c 	.word	0x2000122c
 80145f4:	20001228 	.word	0x20001228

080145f8 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80145f8:	b580      	push	{r7, lr}
 80145fa:	b088      	sub	sp, #32
 80145fc:	af02      	add	r7, sp, #8
 80145fe:	60ba      	str	r2, [r7, #8]
 8014600:	607b      	str	r3, [r7, #4]
 8014602:	4603      	mov	r3, r0
 8014604:	73fb      	strb	r3, [r7, #15]
 8014606:	460b      	mov	r3, r1
 8014608:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;
 801460a:	2300      	movs	r3, #0
 801460c:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 801460e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014612:	2b0d      	cmp	r3, #13
 8014614:	bfa8      	it	ge
 8014616:	230d      	movge	r3, #13
 8014618:	b25a      	sxtb	r2, r3
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014624:	4916      	ldr	r1, [pc, #88]	@ (8014680 <RegionUS915ComputeRxWindowParameters+0x88>)
 8014626:	4618      	mov	r0, r3
 8014628:	f7fe f928 	bl	801287c <RegionCommonGetBandwidth>
 801462c:	4603      	mov	r3, r0
 801462e:	b2da      	uxtb	r2, r3
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	709a      	strb	r2, [r3, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	f993 3001 	ldrsb.w	r3, [r3, #1]
 801463a:	461a      	mov	r2, r3
 801463c:	4b11      	ldr	r3, [pc, #68]	@ (8014684 <RegionUS915ComputeRxWindowParameters+0x8c>)
 801463e:	5c9a      	ldrb	r2, [r3, r2]
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014646:	4619      	mov	r1, r3
 8014648:	4b0d      	ldr	r3, [pc, #52]	@ (8014680 <RegionUS915ComputeRxWindowParameters+0x88>)
 801464a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801464e:	4619      	mov	r1, r3
 8014650:	4610      	mov	r0, r2
 8014652:	f7fd fe91 	bl	8012378 <RegionCommonComputeSymbolTimeLoRa>
 8014656:	6178      	str	r0, [r7, #20]

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8014658:	4b0b      	ldr	r3, [pc, #44]	@ (8014688 <RegionUS915ComputeRxWindowParameters+0x90>)
 801465a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801465c:	4798      	blx	r3
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	3308      	adds	r3, #8
 8014662:	687a      	ldr	r2, [r7, #4]
 8014664:	320c      	adds	r2, #12
 8014666:	7bb9      	ldrb	r1, [r7, #14]
 8014668:	9201      	str	r2, [sp, #4]
 801466a:	9300      	str	r3, [sp, #0]
 801466c:	4603      	mov	r3, r0
 801466e:	68ba      	ldr	r2, [r7, #8]
 8014670:	6978      	ldr	r0, [r7, #20]
 8014672:	f7fd fea7 	bl	80123c4 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 8014676:	bf00      	nop
 8014678:	3718      	adds	r7, #24
 801467a:	46bd      	mov	sp, r7
 801467c:	bd80      	pop	{r7, pc}
 801467e:	bf00      	nop
 8014680:	08020cf0 	.word	0x08020cf0
 8014684:	08020ce0 	.word	0x08020ce0
 8014688:	080210e8 	.word	0x080210e8

0801468c <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801468c:	b590      	push	{r4, r7, lr}
 801468e:	b091      	sub	sp, #68	@ 0x44
 8014690:	af0a      	add	r7, sp, #40	@ 0x28
 8014692:	6078      	str	r0, [r7, #4]
 8014694:	6039      	str	r1, [r7, #0]
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	785b      	ldrb	r3, [r3, #1]
 801469a:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 801469c:	2300      	movs	r3, #0
 801469e:	75fb      	strb	r3, [r7, #23]
    int8_t phyDr = 0;
 80146a0:	2300      	movs	r3, #0
 80146a2:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	685b      	ldr	r3, [r3, #4]
 80146a8:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 80146aa:	4b34      	ldr	r3, [pc, #208]	@ (801477c <RegionUS915RxConfig+0xf0>)
 80146ac:	685b      	ldr	r3, [r3, #4]
 80146ae:	4798      	blx	r3
 80146b0:	4603      	mov	r3, r0
 80146b2:	2b00      	cmp	r3, #0
 80146b4:	d001      	beq.n	80146ba <RegionUS915RxConfig+0x2e>
    {
        return false;
 80146b6:	2300      	movs	r3, #0
 80146b8:	e05c      	b.n	8014774 <RegionUS915RxConfig+0xe8>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	7cdb      	ldrb	r3, [r3, #19]
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d109      	bne.n	80146d6 <RegionUS915RxConfig+0x4a>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	781b      	ldrb	r3, [r3, #0]
 80146c6:	f003 0307 	and.w	r3, r3, #7
 80146ca:	4a2d      	ldr	r2, [pc, #180]	@ (8014780 <RegionUS915RxConfig+0xf4>)
 80146cc:	fb03 f202 	mul.w	r2, r3, r2
 80146d0:	4b2c      	ldr	r3, [pc, #176]	@ (8014784 <RegionUS915RxConfig+0xf8>)
 80146d2:	4413      	add	r3, r2
 80146d4:	613b      	str	r3, [r7, #16]
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 80146d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80146da:	4a2b      	ldr	r2, [pc, #172]	@ (8014788 <RegionUS915RxConfig+0xfc>)
 80146dc:	5cd3      	ldrb	r3, [r2, r3]
 80146de:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 80146e0:	4b26      	ldr	r3, [pc, #152]	@ (801477c <RegionUS915RxConfig+0xf0>)
 80146e2:	68db      	ldr	r3, [r3, #12]
 80146e4:	6938      	ldr	r0, [r7, #16]
 80146e6:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 80146e8:	4b24      	ldr	r3, [pc, #144]	@ (801477c <RegionUS915RxConfig+0xf0>)
 80146ea:	699c      	ldr	r4, [r3, #24]
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	789b      	ldrb	r3, [r3, #2]
 80146f0:	4618      	mov	r0, r3
 80146f2:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	689b      	ldr	r3, [r3, #8]
 80146fa:	b29b      	uxth	r3, r3
 80146fc:	687a      	ldr	r2, [r7, #4]
 80146fe:	7c92      	ldrb	r2, [r2, #18]
 8014700:	9209      	str	r2, [sp, #36]	@ 0x24
 8014702:	2201      	movs	r2, #1
 8014704:	9208      	str	r2, [sp, #32]
 8014706:	2200      	movs	r2, #0
 8014708:	9207      	str	r2, [sp, #28]
 801470a:	2200      	movs	r2, #0
 801470c:	9206      	str	r2, [sp, #24]
 801470e:	2200      	movs	r2, #0
 8014710:	9205      	str	r2, [sp, #20]
 8014712:	2200      	movs	r2, #0
 8014714:	9204      	str	r2, [sp, #16]
 8014716:	2200      	movs	r2, #0
 8014718:	9203      	str	r2, [sp, #12]
 801471a:	9302      	str	r3, [sp, #8]
 801471c:	2308      	movs	r3, #8
 801471e:	9301      	str	r3, [sp, #4]
 8014720:	2300      	movs	r3, #0
 8014722:	9300      	str	r3, [sp, #0]
 8014724:	2301      	movs	r3, #1
 8014726:	460a      	mov	r2, r1
 8014728:	4601      	mov	r1, r0
 801472a:	2001      	movs	r0, #1
 801472c:	47a0      	blx	r4

    if( rxConfig->RepeaterSupport == true )
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	7c5b      	ldrb	r3, [r3, #17]
 8014732:	2b00      	cmp	r3, #0
 8014734:	d005      	beq.n	8014742 <RegionUS915RxConfig+0xb6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 8014736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801473a:	4a14      	ldr	r2, [pc, #80]	@ (801478c <RegionUS915RxConfig+0x100>)
 801473c:	5cd3      	ldrb	r3, [r2, r3]
 801473e:	75fb      	strb	r3, [r7, #23]
 8014740:	e004      	b.n	801474c <RegionUS915RxConfig+0xc0>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 8014742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014746:	4a12      	ldr	r2, [pc, #72]	@ (8014790 <RegionUS915RxConfig+0x104>)
 8014748:	5cd3      	ldrb	r3, [r2, r3]
 801474a:	75fb      	strb	r3, [r7, #23]
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 801474c:	4b0b      	ldr	r3, [pc, #44]	@ (801477c <RegionUS915RxConfig+0xf0>)
 801474e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014750:	7dfa      	ldrb	r2, [r7, #23]
 8014752:	320d      	adds	r2, #13
 8014754:	b2d2      	uxtb	r2, r2
 8014756:	4611      	mov	r1, r2
 8014758:	2001      	movs	r0, #1
 801475a:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	7cdb      	ldrb	r3, [r3, #19]
 8014760:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8014764:	6939      	ldr	r1, [r7, #16]
 8014766:	4618      	mov	r0, r3
 8014768:	f7fe f8a6 	bl	80128b8 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 801476c:	683b      	ldr	r3, [r7, #0]
 801476e:	7bfa      	ldrb	r2, [r7, #15]
 8014770:	701a      	strb	r2, [r3, #0]
    return true;
 8014772:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 8014774:	4618      	mov	r0, r3
 8014776:	371c      	adds	r7, #28
 8014778:	46bd      	mov	sp, r7
 801477a:	bd90      	pop	{r4, r7, pc}
 801477c:	080210e8 	.word	0x080210e8
 8014780:	000927c0 	.word	0x000927c0
 8014784:	370870a0 	.word	0x370870a0
 8014788:	08020ce0 	.word	0x08020ce0
 801478c:	08020d54 	.word	0x08020d54
 8014790:	08020d44 	.word	0x08020d44

08014794 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8014794:	b590      	push	{r4, r7, lr}
 8014796:	b093      	sub	sp, #76	@ 0x4c
 8014798:	af0a      	add	r7, sp, #40	@ 0x28
 801479a:	60f8      	str	r0, [r7, #12]
 801479c:	60b9      	str	r1, [r7, #8]
 801479e:	607a      	str	r2, [r7, #4]
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 80147a0:	68fb      	ldr	r3, [r7, #12]
 80147a2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80147a6:	461a      	mov	r2, r3
 80147a8:	4b49      	ldr	r3, [pc, #292]	@ (80148d0 <RegionUS915TxConfig+0x13c>)
 80147aa:	5c9b      	ldrb	r3, [r3, r2]
 80147ac:	77fb      	strb	r3, [r7, #31]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 80147ae:	68fb      	ldr	r3, [r7, #12]
 80147b0:	f993 0002 	ldrsb.w	r0, [r3, #2]
 80147b4:	4b47      	ldr	r3, [pc, #284]	@ (80148d4 <RegionUS915TxConfig+0x140>)
 80147b6:	681a      	ldr	r2, [r3, #0]
 80147b8:	4b47      	ldr	r3, [pc, #284]	@ (80148d8 <RegionUS915TxConfig+0x144>)
 80147ba:	6819      	ldr	r1, [r3, #0]
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	781b      	ldrb	r3, [r3, #0]
 80147c0:	461c      	mov	r4, r3
 80147c2:	4623      	mov	r3, r4
 80147c4:	005b      	lsls	r3, r3, #1
 80147c6:	4423      	add	r3, r4
 80147c8:	009b      	lsls	r3, r3, #2
 80147ca:	440b      	add	r3, r1
 80147cc:	3309      	adds	r3, #9
 80147ce:	781b      	ldrb	r3, [r3, #0]
 80147d0:	4619      	mov	r1, r3
 80147d2:	460b      	mov	r3, r1
 80147d4:	005b      	lsls	r3, r3, #1
 80147d6:	440b      	add	r3, r1
 80147d8:	00db      	lsls	r3, r3, #3
 80147da:	4413      	add	r3, r2
 80147dc:	f993 1002 	ldrsb.w	r1, [r3, #2]
 80147e0:	68fb      	ldr	r3, [r7, #12]
 80147e2:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80147e6:	4b3c      	ldr	r3, [pc, #240]	@ (80148d8 <RegionUS915TxConfig+0x144>)
 80147e8:	681b      	ldr	r3, [r3, #0]
 80147ea:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80147ee:	f7ff fa4f 	bl	8013c90 <LimitTxPower>
 80147f2:	4603      	mov	r3, r0
 80147f4:	77bb      	strb	r3, [r7, #30]
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 80147f6:	68fb      	ldr	r3, [r7, #12]
 80147f8:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80147fc:	4937      	ldr	r1, [pc, #220]	@ (80148dc <RegionUS915TxConfig+0x148>)
 80147fe:	4618      	mov	r0, r3
 8014800:	f7fe f83c 	bl	801287c <RegionCommonGetBandwidth>
 8014804:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8014806:	2300      	movs	r3, #0
 8014808:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 801480a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801480e:	f04f 0200 	mov.w	r2, #0
 8014812:	4933      	ldr	r1, [pc, #204]	@ (80148e0 <RegionUS915TxConfig+0x14c>)
 8014814:	4618      	mov	r0, r3
 8014816:	f7fd fe8d 	bl	8012534 <RegionCommonComputeTxPower>
 801481a:	4603      	mov	r3, r0
 801481c:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 801481e:	4b31      	ldr	r3, [pc, #196]	@ (80148e4 <RegionUS915TxConfig+0x150>)
 8014820:	68da      	ldr	r2, [r3, #12]
 8014822:	4b2d      	ldr	r3, [pc, #180]	@ (80148d8 <RegionUS915TxConfig+0x144>)
 8014824:	6819      	ldr	r1, [r3, #0]
 8014826:	68fb      	ldr	r3, [r7, #12]
 8014828:	781b      	ldrb	r3, [r3, #0]
 801482a:	4618      	mov	r0, r3
 801482c:	4603      	mov	r3, r0
 801482e:	005b      	lsls	r3, r3, #1
 8014830:	4403      	add	r3, r0
 8014832:	009b      	lsls	r3, r3, #2
 8014834:	440b      	add	r3, r1
 8014836:	681b      	ldr	r3, [r3, #0]
 8014838:	4618      	mov	r0, r3
 801483a:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 801483c:	4b29      	ldr	r3, [pc, #164]	@ (80148e4 <RegionUS915TxConfig+0x150>)
 801483e:	69dc      	ldr	r4, [r3, #28]
 8014840:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014844:	f997 1017 	ldrsb.w	r1, [r7, #23]
 8014848:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 801484c:	9208      	str	r2, [sp, #32]
 801484e:	2200      	movs	r2, #0
 8014850:	9207      	str	r2, [sp, #28]
 8014852:	2200      	movs	r2, #0
 8014854:	9206      	str	r2, [sp, #24]
 8014856:	2200      	movs	r2, #0
 8014858:	9205      	str	r2, [sp, #20]
 801485a:	2201      	movs	r2, #1
 801485c:	9204      	str	r2, [sp, #16]
 801485e:	2200      	movs	r2, #0
 8014860:	9203      	str	r2, [sp, #12]
 8014862:	2208      	movs	r2, #8
 8014864:	9202      	str	r2, [sp, #8]
 8014866:	2201      	movs	r2, #1
 8014868:	9201      	str	r2, [sp, #4]
 801486a:	9300      	str	r3, [sp, #0]
 801486c:	69bb      	ldr	r3, [r7, #24]
 801486e:	2200      	movs	r2, #0
 8014870:	2001      	movs	r0, #1
 8014872:	47a0      	blx	r4
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8014874:	4b18      	ldr	r3, [pc, #96]	@ (80148d8 <RegionUS915TxConfig+0x144>)
 8014876:	681a      	ldr	r2, [r3, #0]
 8014878:	68fb      	ldr	r3, [r7, #12]
 801487a:	781b      	ldrb	r3, [r3, #0]
 801487c:	4619      	mov	r1, r3
 801487e:	460b      	mov	r3, r1
 8014880:	005b      	lsls	r3, r3, #1
 8014882:	440b      	add	r3, r1
 8014884:	009b      	lsls	r3, r3, #2
 8014886:	4413      	add	r3, r2
 8014888:	681a      	ldr	r2, [r3, #0]
 801488a:	68fb      	ldr	r3, [r7, #12]
 801488c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014890:	4619      	mov	r1, r3
 8014892:	4610      	mov	r0, r2
 8014894:	f7fe f842 	bl	801291c <RegionCommonTxConfigPrint>

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 8014898:	4b12      	ldr	r3, [pc, #72]	@ (80148e4 <RegionUS915TxConfig+0x150>)
 801489a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801489c:	68fa      	ldr	r2, [r7, #12]
 801489e:	8992      	ldrh	r2, [r2, #12]
 80148a0:	b2d2      	uxtb	r2, r2
 80148a2:	4611      	mov	r1, r2
 80148a4:	2001      	movs	r0, #1
 80148a6:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 80148a8:	68fb      	ldr	r3, [r7, #12]
 80148aa:	f993 2001 	ldrsb.w	r2, [r3, #1]
 80148ae:	68fb      	ldr	r3, [r7, #12]
 80148b0:	899b      	ldrh	r3, [r3, #12]
 80148b2:	4619      	mov	r1, r3
 80148b4:	4610      	mov	r0, r2
 80148b6:	f7ff fa65 	bl	8013d84 <GetTimeOnAir>
 80148ba:	4602      	mov	r2, r0
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	601a      	str	r2, [r3, #0]

    *txPower = txPowerLimited;
 80148c0:	68bb      	ldr	r3, [r7, #8]
 80148c2:	7fba      	ldrb	r2, [r7, #30]
 80148c4:	701a      	strb	r2, [r3, #0]
    return true;
 80148c6:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_US915 */
}
 80148c8:	4618      	mov	r0, r3
 80148ca:	3724      	adds	r7, #36	@ 0x24
 80148cc:	46bd      	mov	sp, r7
 80148ce:	bd90      	pop	{r4, r7, pc}
 80148d0:	08020ce0 	.word	0x08020ce0
 80148d4:	20001230 	.word	0x20001230
 80148d8:	2000122c 	.word	0x2000122c
 80148dc:	08020cf0 	.word	0x08020cf0
 80148e0:	41f00000 	.word	0x41f00000
 80148e4:	080210e8 	.word	0x080210e8

080148e8 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80148e8:	b590      	push	{r4, r7, lr}
 80148ea:	b097      	sub	sp, #92	@ 0x5c
 80148ec:	af00      	add	r7, sp, #0
 80148ee:	60f8      	str	r0, [r7, #12]
 80148f0:	60b9      	str	r1, [r7, #8]
 80148f2:	607a      	str	r2, [r7, #4]
 80148f4:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 80148f6:	2307      	movs	r3, #7
 80148f8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 80148fc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8014900:	2200      	movs	r2, #0
 8014902:	601a      	str	r2, [r3, #0]
 8014904:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 8014906:	2300      	movs	r3, #0
 8014908:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
    uint8_t bytesProcessed = 0;
 801490c:	2300      	movs	r3, #0
 801490e:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 8014912:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8014916:	2200      	movs	r2, #0
 8014918:	601a      	str	r2, [r3, #0]
 801491a:	605a      	str	r2, [r3, #4]
 801491c:	609a      	str	r2, [r3, #8]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 801491e:	4b97      	ldr	r3, [pc, #604]	@ (8014b7c <RegionUS915LinkAdrReq+0x294>)
 8014920:	681b      	ldr	r3, [r3, #0]
 8014922:	f503 7158 	add.w	r1, r3, #864	@ 0x360
 8014926:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801492a:	2206      	movs	r2, #6
 801492c:	4618      	mov	r0, r3
 801492e:	f7fd fb05 	bl	8011f3c <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8014932:	e11b      	b.n	8014b6c <RegionUS915LinkAdrReq+0x284>
    {
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8014934:	68fb      	ldr	r3, [r7, #12]
 8014936:	685a      	ldr	r2, [r3, #4]
 8014938:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 801493c:	4413      	add	r3, r2
 801493e:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8014942:	4611      	mov	r1, r2
 8014944:	4618      	mov	r0, r3
 8014946:	f7fd fc3d 	bl	80121c4 <RegionCommonParseLinkAdrReq>
 801494a:	4603      	mov	r3, r0
 801494c:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53

        if( nextIndex == 0 )
 8014950:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8014954:	2b00      	cmp	r3, #0
 8014956:	f000 8113 	beq.w	8014b80 <RegionUS915LinkAdrReq+0x298>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 801495a:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 801495e:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8014962:	4413      	add	r3, r2
 8014964:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 8014968:	2307      	movs	r3, #7
 801496a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

        if( linkAdrParams.ChMaskCtrl == 6 )
 801496e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014972:	2b06      	cmp	r3, #6
 8014974:	d116      	bne.n	80149a4 <RegionUS915LinkAdrReq+0xbc>
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 8014976:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801497a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
            channelsMask[1] = 0xFFFF;
 801497e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014982:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
            channelsMask[2] = 0xFFFF;
 8014986:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801498a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            channelsMask[3] = 0xFFFF;
 801498e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8014992:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8014996:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 801499a:	b2db      	uxtb	r3, r3
 801499c:	b29b      	uxth	r3, r3
 801499e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80149a2:	e0e3      	b.n	8014b6c <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 80149a4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80149a8:	2b07      	cmp	r3, #7
 80149aa:	d112      	bne.n	80149d2 <RegionUS915LinkAdrReq+0xea>
        {
            // Disable all 125 kHz channels
            channelsMask[0] = 0x0000;
 80149ac:	2300      	movs	r3, #0
 80149ae:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
            channelsMask[1] = 0x0000;
 80149b2:	2300      	movs	r3, #0
 80149b4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
            channelsMask[2] = 0x0000;
 80149b8:	2300      	movs	r3, #0
 80149ba:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            channelsMask[3] = 0x0000;
 80149be:	2300      	movs	r3, #0
 80149c0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 80149c4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80149c8:	b2db      	uxtb	r3, r3
 80149ca:	b29b      	uxth	r3, r3
 80149cc:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80149d0:	e0cc      	b.n	8014b6c <RegionUS915LinkAdrReq+0x284>
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 80149d2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80149d6:	2b05      	cmp	r3, #5
 80149d8:	f040 80bf 	bne.w	8014b5a <RegionUS915LinkAdrReq+0x272>
        {
            // Start value for comparison
            uint8_t bitMask = 1;
 80149dc:	2301      	movs	r3, #1
 80149de:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52

            // cntChannelMask for channelsMask[0] until channelsMask[3]
            uint8_t cntChannelMask = 0;
 80149e2:	2300      	movs	r3, #0
 80149e4:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55

            // i will be 1, 2, 3, ..., 7
            for( uint8_t i = 0; i <= 7; i++ )
 80149e8:	2300      	movs	r3, #0
 80149ea:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 80149ee:	e0ae      	b.n	8014b4e <RegionUS915LinkAdrReq+0x266>
            {
                // 8 MSBs of ChMask are RFU
                // Checking if the ChMask is set, then true
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 80149f0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80149f4:	b2da      	uxtb	r2, r3
 80149f6:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 80149fa:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80149fe:	fa01 f303 	lsl.w	r3, r1, r3
 8014a02:	4013      	ands	r3, r2
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d04d      	beq.n	8014aa4 <RegionUS915LinkAdrReq+0x1bc>
                {
                    if( ( i % 2 ) == 0 )
 8014a08:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8014a0c:	f003 0301 	and.w	r3, r3, #1
 8014a10:	b2db      	uxtb	r3, r3
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d120      	bne.n	8014a58 <RegionUS915LinkAdrReq+0x170>
                    {
                        // Enable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] |= 0x00FF;
 8014a16:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8014a1a:	005b      	lsls	r3, r3, #1
 8014a1c:	3358      	adds	r3, #88	@ 0x58
 8014a1e:	443b      	add	r3, r7
 8014a20:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8014a24:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8014a28:	f042 02ff 	orr.w	r2, r2, #255	@ 0xff
 8014a2c:	b292      	uxth	r2, r2
 8014a2e:	005b      	lsls	r3, r3, #1
 8014a30:	3358      	adds	r3, #88	@ 0x58
 8014a32:	443b      	add	r3, r7
 8014a34:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 8014a38:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8014a3c:	b21a      	sxth	r2, r3
 8014a3e:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 8014a42:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8014a46:	fa01 f303 	lsl.w	r3, r1, r3
 8014a4a:	b21b      	sxth	r3, r3
 8014a4c:	4313      	orrs	r3, r2
 8014a4e:	b21b      	sxth	r3, r3
 8014a50:	b29b      	uxth	r3, r3
 8014a52:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8014a56:	e075      	b.n	8014b44 <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] |= 0xFF00;
 8014a58:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8014a5c:	005b      	lsls	r3, r3, #1
 8014a5e:	3358      	adds	r3, #88	@ 0x58
 8014a60:	443b      	add	r3, r7
 8014a62:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8014a66:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8014a6a:	f062 02ff 	orn	r2, r2, #255	@ 0xff
 8014a6e:	b292      	uxth	r2, r2
 8014a70:	005b      	lsls	r3, r3, #1
 8014a72:	3358      	adds	r3, #88	@ 0x58
 8014a74:	443b      	add	r3, r7
 8014a76:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Enable the corresponding 500kHz channel
                        channelsMask[4] |= ( bitMask << i );
 8014a7a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8014a7e:	b21a      	sxth	r2, r3
 8014a80:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 8014a84:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8014a88:	fa01 f303 	lsl.w	r3, r1, r3
 8014a8c:	b21b      	sxth	r3, r3
 8014a8e:	4313      	orrs	r3, r2
 8014a90:	b21b      	sxth	r3, r3
 8014a92:	b29b      	uxth	r3, r3
 8014a94:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 8014a98:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8014a9c:	3301      	adds	r3, #1
 8014a9e:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 8014aa2:	e04f      	b.n	8014b44 <RegionUS915LinkAdrReq+0x25c>
                    }
                }
                // ChMask is not set
                else
                {
                    if( ( i % 2 ) == 0 )
 8014aa4:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8014aa8:	f003 0301 	and.w	r3, r3, #1
 8014aac:	b2db      	uxtb	r3, r3
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d122      	bne.n	8014af8 <RegionUS915LinkAdrReq+0x210>
                    {
                        // Disable a bank of 8 125kHz channels, 8 LSBs
                        channelsMask[cntChannelMask] &= 0xFF00;
 8014ab2:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8014ab6:	005b      	lsls	r3, r3, #1
 8014ab8:	3358      	adds	r3, #88	@ 0x58
 8014aba:	443b      	add	r3, r7
 8014abc:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8014ac0:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8014ac4:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8014ac8:	b292      	uxth	r2, r2
 8014aca:	005b      	lsls	r3, r3, #1
 8014acc:	3358      	adds	r3, #88	@ 0x58
 8014ace:	443b      	add	r3, r7
 8014ad0:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 8014ad4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8014ad8:	b21a      	sxth	r2, r3
 8014ada:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 8014ade:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8014ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8014ae6:	b21b      	sxth	r3, r3
 8014ae8:	43db      	mvns	r3, r3
 8014aea:	b21b      	sxth	r3, r3
 8014aec:	4013      	ands	r3, r2
 8014aee:	b21b      	sxth	r3, r3
 8014af0:	b29b      	uxth	r3, r3
 8014af2:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8014af6:	e025      	b.n	8014b44 <RegionUS915LinkAdrReq+0x25c>
                    }
                    else
                    {
                        // Enable a bank of 8 125kHz channels, 8 MSBs
                        channelsMask[cntChannelMask] &= 0x00FF;
 8014af8:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8014afc:	005b      	lsls	r3, r3, #1
 8014afe:	3358      	adds	r3, #88	@ 0x58
 8014b00:	443b      	add	r3, r7
 8014b02:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8014b06:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8014b0a:	b2d2      	uxtb	r2, r2
 8014b0c:	b292      	uxth	r2, r2
 8014b0e:	005b      	lsls	r3, r3, #1
 8014b10:	3358      	adds	r3, #88	@ 0x58
 8014b12:	443b      	add	r3, r7
 8014b14:	f823 2c18 	strh.w	r2, [r3, #-24]
                        // Disable the corresponding 500kHz channel
                        channelsMask[4] &= ~( bitMask << i );
 8014b18:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8014b1c:	b21a      	sxth	r2, r3
 8014b1e:	f897 1052 	ldrb.w	r1, [r7, #82]	@ 0x52
 8014b22:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8014b26:	fa01 f303 	lsl.w	r3, r1, r3
 8014b2a:	b21b      	sxth	r3, r3
 8014b2c:	43db      	mvns	r3, r3
 8014b2e:	b21b      	sxth	r3, r3
 8014b30:	4013      	ands	r3, r2
 8014b32:	b21b      	sxth	r3, r3
 8014b34:	b29b      	uxth	r3, r3
 8014b36:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
                        // cntChannelMask increment for uneven i
                        cntChannelMask++;
 8014b3a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8014b3e:	3301      	adds	r3, #1
 8014b40:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
            for( uint8_t i = 0; i <= 7; i++ )
 8014b44:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8014b48:	3301      	adds	r3, #1
 8014b4a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 8014b4e:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8014b52:	2b07      	cmp	r3, #7
 8014b54:	f67f af4c 	bls.w	80149f0 <RegionUS915LinkAdrReq+0x108>
 8014b58:	e008      	b.n	8014b6c <RegionUS915LinkAdrReq+0x284>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 8014b5a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8014b5e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8014b62:	005b      	lsls	r3, r3, #1
 8014b64:	3358      	adds	r3, #88	@ 0x58
 8014b66:	443b      	add	r3, r7
 8014b68:	f823 2c18 	strh.w	r2, [r3, #-24]
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8014b6c:	68fb      	ldr	r3, [r7, #12]
 8014b6e:	7a1b      	ldrb	r3, [r3, #8]
 8014b70:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 8014b74:	429a      	cmp	r2, r3
 8014b76:	f4ff aedd 	bcc.w	8014934 <RegionUS915LinkAdrReq+0x4c>
 8014b7a:	e002      	b.n	8014b82 <RegionUS915LinkAdrReq+0x29a>
 8014b7c:	2000122c 	.word	0x2000122c
            break; // break loop, since no more request has been found
 8014b80:	bf00      	nop
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 8014b82:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 8014b86:	2b03      	cmp	r3, #3
 8014b88:	dc0f      	bgt.n	8014baa <RegionUS915LinkAdrReq+0x2c2>
 8014b8a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8014b8e:	2204      	movs	r2, #4
 8014b90:	2100      	movs	r1, #0
 8014b92:	4618      	mov	r0, r3
 8014b94:	f7fd f9a6 	bl	8011ee4 <RegionCommonCountChannels>
 8014b98:	4603      	mov	r3, r0
 8014b9a:	2b01      	cmp	r3, #1
 8014b9c:	d805      	bhi.n	8014baa <RegionUS915LinkAdrReq+0x2c2>
    {
        status &= 0xFE; // Channel mask KO
 8014b9e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014ba2:	f023 0301 	bic.w	r3, r3, #1
 8014ba6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8014baa:	2302      	movs	r3, #2
 8014bac:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8014bb0:	68fb      	ldr	r3, [r7, #12]
 8014bb2:	7a5b      	ldrb	r3, [r3, #9]
 8014bb4:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
    phyParam = RegionUS915GetPhyParam( &getPhy );
 8014bb8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8014bbc:	4618      	mov	r0, r3
 8014bbe:	f7ff f911 	bl	8013de4 <RegionUS915GetPhyParam>
 8014bc2:	4603      	mov	r3, r0
 8014bc4:	637b      	str	r3, [r7, #52]	@ 0x34

    linkAdrVerifyParams.Status = status;
 8014bc6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014bca:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8014bcc:	68fb      	ldr	r3, [r7, #12]
 8014bce:	7a9b      	ldrb	r3, [r3, #10]
 8014bd0:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8014bd2:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 8014bd6:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8014bd8:	f997 304e 	ldrsb.w	r3, [r7, #78]	@ 0x4e
 8014bdc:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8014bde:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8014be2:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8014be4:	68fb      	ldr	r3, [r7, #12]
 8014be6:	f993 300b 	ldrsb.w	r3, [r3, #11]
 8014bea:	777b      	strb	r3, [r7, #29]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8014bec:	68fb      	ldr	r3, [r7, #12]
 8014bee:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8014bf2:	77bb      	strb	r3, [r7, #30]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8014bf4:	68fb      	ldr	r3, [r7, #12]
 8014bf6:	7b5b      	ldrb	r3, [r3, #13]
 8014bf8:	b25b      	sxtb	r3, r3
 8014bfa:	77fb      	strb	r3, [r7, #31]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 8014bfc:	2348      	movs	r3, #72	@ 0x48
 8014bfe:	f887 3020 	strb.w	r3, [r7, #32]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 8014c02:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8014c06:	627b      	str	r3, [r7, #36]	@ 0x24
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8014c08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014c0a:	b25b      	sxtb	r3, r3
 8014c0c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 8014c10:	2304      	movs	r3, #4
 8014c12:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8014c16:	4b3f      	ldr	r3, [pc, #252]	@ (8014d14 <RegionUS915LinkAdrReq+0x42c>)
 8014c18:	681b      	ldr	r3, [r3, #0]
 8014c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 8014c1c:	230e      	movs	r3, #14
 8014c1e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 8014c22:	2300      	movs	r3, #0
 8014c24:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8014c28:	68fb      	ldr	r3, [r7, #12]
 8014c2a:	681b      	ldr	r3, [r3, #0]
 8014c2c:	617b      	str	r3, [r7, #20]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8014c2e:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8014c32:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8014c36:	1c9a      	adds	r2, r3, #2
 8014c38:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8014c3c:	1c59      	adds	r1, r3, #1
 8014c3e:	f107 0014 	add.w	r0, r7, #20
 8014c42:	4623      	mov	r3, r4
 8014c44:	f7fd fb10 	bl	8012268 <RegionCommonLinkAdrReqVerifyParams>
 8014c48:	4603      	mov	r3, r0
 8014c4a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8014c4e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8014c52:	2b07      	cmp	r3, #7
 8014c54:	d147      	bne.n	8014ce6 <RegionUS915LinkAdrReq+0x3fe>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 8014c56:	4b2f      	ldr	r3, [pc, #188]	@ (8014d14 <RegionUS915LinkAdrReq+0x42c>)
 8014c58:	681b      	ldr	r3, [r3, #0]
 8014c5a:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8014c5e:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8014c62:	2206      	movs	r2, #6
 8014c64:	4618      	mov	r0, r3
 8014c66:	f7fd f969 	bl	8011f3c <RegionCommonChanMaskCopy>

        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 8014c6a:	4b2b      	ldr	r3, [pc, #172]	@ (8014d18 <RegionUS915LinkAdrReq+0x430>)
 8014c6c:	681b      	ldr	r3, [r3, #0]
 8014c6e:	8819      	ldrh	r1, [r3, #0]
 8014c70:	4b28      	ldr	r3, [pc, #160]	@ (8014d14 <RegionUS915LinkAdrReq+0x42c>)
 8014c72:	681b      	ldr	r3, [r3, #0]
 8014c74:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 8014c78:	4b27      	ldr	r3, [pc, #156]	@ (8014d18 <RegionUS915LinkAdrReq+0x430>)
 8014c7a:	681b      	ldr	r3, [r3, #0]
 8014c7c:	400a      	ands	r2, r1
 8014c7e:	b292      	uxth	r2, r2
 8014c80:	801a      	strh	r2, [r3, #0]
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 8014c82:	4b25      	ldr	r3, [pc, #148]	@ (8014d18 <RegionUS915LinkAdrReq+0x430>)
 8014c84:	681b      	ldr	r3, [r3, #0]
 8014c86:	8859      	ldrh	r1, [r3, #2]
 8014c88:	4b22      	ldr	r3, [pc, #136]	@ (8014d14 <RegionUS915LinkAdrReq+0x42c>)
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	f8b3 2362 	ldrh.w	r2, [r3, #866]	@ 0x362
 8014c90:	4b21      	ldr	r3, [pc, #132]	@ (8014d18 <RegionUS915LinkAdrReq+0x430>)
 8014c92:	681b      	ldr	r3, [r3, #0]
 8014c94:	400a      	ands	r2, r1
 8014c96:	b292      	uxth	r2, r2
 8014c98:	805a      	strh	r2, [r3, #2]
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 8014c9a:	4b1f      	ldr	r3, [pc, #124]	@ (8014d18 <RegionUS915LinkAdrReq+0x430>)
 8014c9c:	681b      	ldr	r3, [r3, #0]
 8014c9e:	8899      	ldrh	r1, [r3, #4]
 8014ca0:	4b1c      	ldr	r3, [pc, #112]	@ (8014d14 <RegionUS915LinkAdrReq+0x42c>)
 8014ca2:	681b      	ldr	r3, [r3, #0]
 8014ca4:	f8b3 2364 	ldrh.w	r2, [r3, #868]	@ 0x364
 8014ca8:	4b1b      	ldr	r3, [pc, #108]	@ (8014d18 <RegionUS915LinkAdrReq+0x430>)
 8014caa:	681b      	ldr	r3, [r3, #0]
 8014cac:	400a      	ands	r2, r1
 8014cae:	b292      	uxth	r2, r2
 8014cb0:	809a      	strh	r2, [r3, #4]
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 8014cb2:	4b19      	ldr	r3, [pc, #100]	@ (8014d18 <RegionUS915LinkAdrReq+0x430>)
 8014cb4:	681b      	ldr	r3, [r3, #0]
 8014cb6:	88d9      	ldrh	r1, [r3, #6]
 8014cb8:	4b16      	ldr	r3, [pc, #88]	@ (8014d14 <RegionUS915LinkAdrReq+0x42c>)
 8014cba:	681b      	ldr	r3, [r3, #0]
 8014cbc:	f8b3 2366 	ldrh.w	r2, [r3, #870]	@ 0x366
 8014cc0:	4b15      	ldr	r3, [pc, #84]	@ (8014d18 <RegionUS915LinkAdrReq+0x430>)
 8014cc2:	681b      	ldr	r3, [r3, #0]
 8014cc4:	400a      	ands	r2, r1
 8014cc6:	b292      	uxth	r2, r2
 8014cc8:	80da      	strh	r2, [r3, #6]
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8014cca:	4b12      	ldr	r3, [pc, #72]	@ (8014d14 <RegionUS915LinkAdrReq+0x42c>)
 8014ccc:	681a      	ldr	r2, [r3, #0]
 8014cce:	4b12      	ldr	r3, [pc, #72]	@ (8014d18 <RegionUS915LinkAdrReq+0x430>)
 8014cd0:	681b      	ldr	r3, [r3, #0]
 8014cd2:	f8b2 2368 	ldrh.w	r2, [r2, #872]	@ 0x368
 8014cd6:	811a      	strh	r2, [r3, #8]
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 8014cd8:	4b0e      	ldr	r3, [pc, #56]	@ (8014d14 <RegionUS915LinkAdrReq+0x42c>)
 8014cda:	681a      	ldr	r2, [r3, #0]
 8014cdc:	4b0e      	ldr	r3, [pc, #56]	@ (8014d18 <RegionUS915LinkAdrReq+0x430>)
 8014cde:	681b      	ldr	r3, [r3, #0]
 8014ce0:	f8b2 236a 	ldrh.w	r2, [r2, #874]	@ 0x36a
 8014ce4:	815a      	strh	r2, [r3, #10]
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8014ce6:	f997 204d 	ldrsb.w	r2, [r7, #77]	@ 0x4d
 8014cea:	68bb      	ldr	r3, [r7, #8]
 8014cec:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8014cee:	f997 204e 	ldrsb.w	r2, [r7, #78]	@ 0x4e
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8014cf6:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 8014cfa:	683b      	ldr	r3, [r7, #0]
 8014cfc:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8014cfe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014d00:	f897 2056 	ldrb.w	r2, [r7, #86]	@ 0x56
 8014d04:	701a      	strb	r2, [r3, #0]

#endif /* REGION_US915 */
    return status;
 8014d06:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
}
 8014d0a:	4618      	mov	r0, r3
 8014d0c:	375c      	adds	r7, #92	@ 0x5c
 8014d0e:	46bd      	mov	sp, r7
 8014d10:	bd90      	pop	{r4, r7, pc}
 8014d12:	bf00      	nop
 8014d14:	2000122c 	.word	0x2000122c
 8014d18:	20001228 	.word	0x20001228

08014d1c <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8014d1c:	b580      	push	{r7, lr}
 8014d1e:	b084      	sub	sp, #16
 8014d20:	af00      	add	r7, sp, #0
 8014d22:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 8014d24:	2307      	movs	r3, #7
 8014d26:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	685b      	ldr	r3, [r3, #4]
 8014d2c:	4618      	mov	r0, r3
 8014d2e:	f7fe ffe5 	bl	8013cfc <VerifyRfFreq>
 8014d32:	4603      	mov	r3, r0
 8014d34:	f083 0301 	eor.w	r3, r3, #1
 8014d38:	b2db      	uxtb	r3, r3
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d003      	beq.n	8014d46 <RegionUS915RxParamSetupReq+0x2a>
    {
        status &= 0xFE; // Channel frequency KO
 8014d3e:	7bfb      	ldrb	r3, [r7, #15]
 8014d40:	f023 0301 	bic.w	r3, r3, #1
 8014d44:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	f993 3000 	ldrsb.w	r3, [r3]
 8014d4c:	220d      	movs	r2, #13
 8014d4e:	2108      	movs	r1, #8
 8014d50:	4618      	mov	r0, r3
 8014d52:	f7fd f876 	bl	8011e42 <RegionCommonValueInRange>
 8014d56:	4603      	mov	r3, r0
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d103      	bne.n	8014d64 <RegionUS915RxParamSetupReq+0x48>
    {
        status &= 0xFD; // Datarate KO
 8014d5c:	7bfb      	ldrb	r3, [r7, #15]
 8014d5e:	f023 0302 	bic.w	r3, r3, #2
 8014d62:	73fb      	strb	r3, [r7, #15]
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	f993 3000 	ldrsb.w	r3, [r3]
 8014d6a:	2207      	movs	r2, #7
 8014d6c:	2105      	movs	r1, #5
 8014d6e:	4618      	mov	r0, r3
 8014d70:	f7fd f867 	bl	8011e42 <RegionCommonValueInRange>
 8014d74:	4603      	mov	r3, r0
 8014d76:	2b01      	cmp	r3, #1
 8014d78:	d004      	beq.n	8014d84 <RegionUS915RxParamSetupReq+0x68>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	f993 3000 	ldrsb.w	r3, [r3]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8014d80:	2b0d      	cmp	r3, #13
 8014d82:	dd03      	ble.n	8014d8c <RegionUS915RxParamSetupReq+0x70>
    {
        status &= 0xFD; // Datarate KO
 8014d84:	7bfb      	ldrb	r3, [r7, #15]
 8014d86:	f023 0302 	bic.w	r3, r3, #2
 8014d8a:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014d92:	2203      	movs	r2, #3
 8014d94:	2100      	movs	r1, #0
 8014d96:	4618      	mov	r0, r3
 8014d98:	f7fd f853 	bl	8011e42 <RegionCommonValueInRange>
 8014d9c:	4603      	mov	r3, r0
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d103      	bne.n	8014daa <RegionUS915RxParamSetupReq+0x8e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8014da2:	7bfb      	ldrb	r3, [r7, #15]
 8014da4:	f023 0304 	bic.w	r3, r3, #4
 8014da8:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_US915 */
    return status;
 8014daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8014dac:	4618      	mov	r0, r3
 8014dae:	3710      	adds	r7, #16
 8014db0:	46bd      	mov	sp, r7
 8014db2:	bd80      	pop	{r7, pc}

08014db4 <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 8014db4:	b480      	push	{r7}
 8014db6:	b083      	sub	sp, #12
 8014db8:	af00      	add	r7, sp, #0
 8014dba:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8014dbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014dc0:	4618      	mov	r0, r3
 8014dc2:	370c      	adds	r7, #12
 8014dc4:	46bd      	mov	sp, r7
 8014dc6:	bc80      	pop	{r7}
 8014dc8:	4770      	bx	lr

08014dca <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 8014dca:	b480      	push	{r7}
 8014dcc:	b083      	sub	sp, #12
 8014dce:	af00      	add	r7, sp, #0
 8014dd0:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8014dd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014dd6:	4618      	mov	r0, r3
 8014dd8:	370c      	adds	r7, #12
 8014dda:	46bd      	mov	sp, r7
 8014ddc:	bc80      	pop	{r7}
 8014dde:	4770      	bx	lr

08014de0 <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8014de0:	b480      	push	{r7}
 8014de2:	b083      	sub	sp, #12
 8014de4:	af00      	add	r7, sp, #0
 8014de6:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 8014de8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014dec:	4618      	mov	r0, r3
 8014dee:	370c      	adds	r7, #12
 8014df0:	46bd      	mov	sp, r7
 8014df2:	bc80      	pop	{r7}
 8014df4:	4770      	bx	lr
	...

08014df8 <RegionUS915AlternateDr>:

int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8014df8:	b480      	push	{r7}
 8014dfa:	b083      	sub	sp, #12
 8014dfc:	af00      	add	r7, sp, #0
 8014dfe:	4603      	mov	r3, r0
 8014e00:	460a      	mov	r2, r1
 8014e02:	71fb      	strb	r3, [r7, #7]
 8014e04:	4613      	mov	r3, r2
 8014e06:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 8014e08:	79bb      	ldrb	r3, [r7, #6]
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	d106      	bne.n	8014e1c <RegionUS915AlternateDr+0x24>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 8014e0e:	4b13      	ldr	r3, [pc, #76]	@ (8014e5c <RegionUS915AlternateDr+0x64>)
 8014e10:	681b      	ldr	r3, [r3, #0]
 8014e12:	7b5a      	ldrb	r2, [r3, #13]
 8014e14:	3201      	adds	r2, #1
 8014e16:	b2d2      	uxtb	r2, r2
 8014e18:	735a      	strb	r2, [r3, #13]
 8014e1a:	e005      	b.n	8014e28 <RegionUS915AlternateDr+0x30>
    }
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
 8014e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8014e5c <RegionUS915AlternateDr+0x64>)
 8014e1e:	681b      	ldr	r3, [r3, #0]
 8014e20:	7b5a      	ldrb	r2, [r3, #13]
 8014e22:	3a01      	subs	r2, #1
 8014e24:	b2d2      	uxtb	r2, r2
 8014e26:	735a      	strb	r2, [r3, #13]
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 8014e28:	4b0c      	ldr	r3, [pc, #48]	@ (8014e5c <RegionUS915AlternateDr+0x64>)
 8014e2a:	681b      	ldr	r3, [r3, #0]
 8014e2c:	7b5a      	ldrb	r2, [r3, #13]
 8014e2e:	4b0c      	ldr	r3, [pc, #48]	@ (8014e60 <RegionUS915AlternateDr+0x68>)
 8014e30:	fba3 1302 	umull	r1, r3, r3, r2
 8014e34:	0859      	lsrs	r1, r3, #1
 8014e36:	460b      	mov	r3, r1
 8014e38:	00db      	lsls	r3, r3, #3
 8014e3a:	440b      	add	r3, r1
 8014e3c:	1ad3      	subs	r3, r2, r3
 8014e3e:	b2db      	uxtb	r3, r3
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d102      	bne.n	8014e4a <RegionUS915AlternateDr+0x52>
    {
        // Use DR_4 every 9th times.
        currentDr = DR_4;
 8014e44:	2304      	movs	r3, #4
 8014e46:	71fb      	strb	r3, [r7, #7]
 8014e48:	e001      	b.n	8014e4e <RegionUS915AlternateDr+0x56>
    }
    else
    {
        currentDr = DR_0;
 8014e4a:	2300      	movs	r3, #0
 8014e4c:	71fb      	strb	r3, [r7, #7]
    }
    return currentDr;
 8014e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_US915 */
}
 8014e52:	4618      	mov	r0, r3
 8014e54:	370c      	adds	r7, #12
 8014e56:	46bd      	mov	sp, r7
 8014e58:	bc80      	pop	{r7}
 8014e5a:	4770      	bx	lr
 8014e5c:	20001228 	.word	0x20001228
 8014e60:	38e38e39 	.word	0x38e38e39

08014e64 <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8014e64:	b580      	push	{r7, lr}
 8014e66:	b0a8      	sub	sp, #160	@ 0xa0
 8014e68:	af02      	add	r7, sp, #8
 8014e6a:	60f8      	str	r0, [r7, #12]
 8014e6c:	60b9      	str	r1, [r7, #8]
 8014e6e:	607a      	str	r2, [r7, #4]
 8014e70:	603b      	str	r3, [r7, #0]
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 8014e72:	2300      	movs	r3, #0
 8014e74:	f887 3095 	strb.w	r3, [r7, #149]	@ 0x95
    uint8_t nbRestrictedChannels = 0;
 8014e78:	2300      	movs	r3, #0
 8014e7a:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 8014e7e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8014e82:	2248      	movs	r2, #72	@ 0x48
 8014e84:	2100      	movs	r1, #0
 8014e86:	4618      	mov	r0, r3
 8014e88:	f00a fd2c 	bl	801f8e4 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8014e8c:	230c      	movs	r3, #12
 8014e8e:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 8014e92:	4b67      	ldr	r3, [pc, #412]	@ (8015030 <RegionUS915NextChannel+0x1cc>)
 8014e94:	681b      	ldr	r3, [r3, #0]
 8014e96:	2204      	movs	r2, #4
 8014e98:	2100      	movs	r1, #0
 8014e9a:	4618      	mov	r0, r3
 8014e9c:	f7fd f822 	bl	8011ee4 <RegionCommonCountChannels>
 8014ea0:	4603      	mov	r3, r0
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	d10e      	bne.n	8014ec4 <RegionUS915NextChannel+0x60>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 8014ea6:	4b62      	ldr	r3, [pc, #392]	@ (8015030 <RegionUS915NextChannel+0x1cc>)
 8014ea8:	681b      	ldr	r3, [r3, #0]
 8014eaa:	4618      	mov	r0, r3
 8014eac:	4b61      	ldr	r3, [pc, #388]	@ (8015034 <RegionUS915NextChannel+0x1d0>)
 8014eae:	681b      	ldr	r3, [r3, #0]
 8014eb0:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8014eb4:	2204      	movs	r2, #4
 8014eb6:	4619      	mov	r1, r3
 8014eb8:	f7fd f840 	bl	8011f3c <RegionCommonChanMaskCopy>

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8014ebc:	4b5c      	ldr	r3, [pc, #368]	@ (8015030 <RegionUS915NextChannel+0x1cc>)
 8014ebe:	681b      	ldr	r3, [r3, #0]
 8014ec0:	2200      	movs	r2, #0
 8014ec2:	731a      	strb	r2, [r3, #12]
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 8014ec4:	68fb      	ldr	r3, [r7, #12]
 8014ec6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8014eca:	2b03      	cmp	r3, #3
 8014ecc:	dd0c      	ble.n	8014ee8 <RegionUS915NextChannel+0x84>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 8014ece:	4b58      	ldr	r3, [pc, #352]	@ (8015030 <RegionUS915NextChannel+0x1cc>)
 8014ed0:	681b      	ldr	r3, [r3, #0]
 8014ed2:	891b      	ldrh	r3, [r3, #8]
 8014ed4:	b2db      	uxtb	r3, r3
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	d106      	bne.n	8014ee8 <RegionUS915NextChannel+0x84>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8014eda:	4b56      	ldr	r3, [pc, #344]	@ (8015034 <RegionUS915NextChannel+0x1d0>)
 8014edc:	681a      	ldr	r2, [r3, #0]
 8014ede:	4b54      	ldr	r3, [pc, #336]	@ (8015030 <RegionUS915NextChannel+0x1cc>)
 8014ee0:	681b      	ldr	r3, [r3, #0]
 8014ee2:	f8b2 2368 	ldrh.w	r2, [r2, #872]	@ 0x368
 8014ee6:	811a      	strh	r2, [r3, #8]
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8014ee8:	68fb      	ldr	r3, [r7, #12]
 8014eea:	7a5b      	ldrb	r3, [r3, #9]
 8014eec:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8014ef4:	b2db      	uxtb	r3, r3
 8014ef6:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 8014ef8:	4b4d      	ldr	r3, [pc, #308]	@ (8015030 <RegionUS915NextChannel+0x1cc>)
 8014efa:	681b      	ldr	r3, [r3, #0]
 8014efc:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8014efe:	4b4d      	ldr	r3, [pc, #308]	@ (8015034 <RegionUS915NextChannel+0x1d0>)
 8014f00:	681b      	ldr	r3, [r3, #0]
 8014f02:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 8014f04:	4b4c      	ldr	r3, [pc, #304]	@ (8015038 <RegionUS915NextChannel+0x1d4>)
 8014f06:	681b      	ldr	r3, [r3, #0]
 8014f08:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 8014f0a:	2348      	movs	r3, #72	@ 0x48
 8014f0c:	84bb      	strh	r3, [r7, #36]	@ 0x24
    countChannelsParams.JoinChannels = NULL;
 8014f0e:	2300      	movs	r3, #0
 8014f10:	62bb      	str	r3, [r7, #40]	@ 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8014f12:	68fb      	ldr	r3, [r7, #12]
 8014f14:	681b      	ldr	r3, [r3, #0]
 8014f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8014f18:	68fb      	ldr	r3, [r7, #12]
 8014f1a:	685b      	ldr	r3, [r3, #4]
 8014f1c:	633b      	str	r3, [r7, #48]	@ 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8014f1e:	68fb      	ldr	r3, [r7, #12]
 8014f20:	7a9b      	ldrb	r3, [r3, #10]
 8014f22:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 8014f26:	2301      	movs	r3, #1
 8014f28:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8014f2c:	f107 0314 	add.w	r3, r7, #20
 8014f30:	64bb      	str	r3, [r7, #72]	@ 0x48

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8014f32:	68fa      	ldr	r2, [r7, #12]
 8014f34:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8014f38:	320c      	adds	r2, #12
 8014f3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014f3e:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8014f42:	68fb      	ldr	r3, [r7, #12]
 8014f44:	7d1b      	ldrb	r3, [r3, #20]
 8014f46:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8014f4a:	68fb      	ldr	r3, [r7, #12]
 8014f4c:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8014f50:	68fb      	ldr	r3, [r7, #12]
 8014f52:	8adb      	ldrh	r3, [r3, #22]
 8014f54:	4619      	mov	r1, r3
 8014f56:	4610      	mov	r0, r2
 8014f58:	f7fe ff14 	bl	8013d84 <GetTimeOnAir>
 8014f5c:	4603      	mov	r3, r0
 8014f5e:	647b      	str	r3, [r7, #68]	@ 0x44
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8014f60:	f107 0195 	add.w	r1, r7, #149	@ 0x95
 8014f64:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8014f68:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	9301      	str	r3, [sp, #4]
 8014f70:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8014f74:	9300      	str	r3, [sp, #0]
 8014f76:	460b      	mov	r3, r1
 8014f78:	6839      	ldr	r1, [r7, #0]
 8014f7a:	f7fd fbca 	bl	8012712 <RegionCommonIdentifyChannels>
 8014f7e:	4603      	mov	r3, r0
 8014f80:	f887 3096 	strb.w	r3, [r7, #150]	@ 0x96
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8014f84:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d14a      	bne.n	8015022 <RegionUS915NextChannel+0x1be>
    {
        if( nextChanParams->Joined == true )
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	7a5b      	ldrb	r3, [r3, #9]
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d00e      	beq.n	8014fb2 <RegionUS915NextChannel+0x14e>
        {
            // Choose randomly on of the remaining channels
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8014f94:	f897 3095 	ldrb.w	r3, [r7, #149]	@ 0x95
 8014f98:	3b01      	subs	r3, #1
 8014f9a:	4619      	mov	r1, r3
 8014f9c:	2000      	movs	r0, #0
 8014f9e:	f001 fd41 	bl	8016a24 <randr>
 8014fa2:	4603      	mov	r3, r0
 8014fa4:	3398      	adds	r3, #152	@ 0x98
 8014fa6:	443b      	add	r3, r7
 8014fa8:	f813 2c4c 	ldrb.w	r2, [r3, #-76]
 8014fac:	68bb      	ldr	r3, [r7, #8]
 8014fae:	701a      	strb	r2, [r3, #0]
 8014fb0:	e02e      	b.n	8015010 <RegionUS915NextChannel+0x1ac>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 8014fb2:	68fb      	ldr	r3, [r7, #12]
 8014fb4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d10e      	bne.n	8014fda <RegionUS915NextChannel+0x176>
            {
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 8014fbc:	4b1c      	ldr	r3, [pc, #112]	@ (8015030 <RegionUS915NextChannel+0x1cc>)
 8014fbe:	681b      	ldr	r3, [r3, #0]
 8014fc0:	4618      	mov	r0, r3
                    &RegionNvmGroup1->JoinChannelGroupsCurrentIndex, channel ) == LORAMAC_STATUS_PARAMETER_INVALID )
 8014fc2:	4b1b      	ldr	r3, [pc, #108]	@ (8015030 <RegionUS915NextChannel+0x1cc>)
 8014fc4:	681b      	ldr	r3, [r3, #0]
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 8014fc6:	330c      	adds	r3, #12
 8014fc8:	68ba      	ldr	r2, [r7, #8]
 8014fca:	4619      	mov	r1, r3
 8014fcc:	f7fc fcf4 	bl	80119b8 <RegionBaseUSComputeNext125kHzJoinChannel>
 8014fd0:	4603      	mov	r3, r0
 8014fd2:	2b03      	cmp	r3, #3
 8014fd4:	d11c      	bne.n	8015010 <RegionUS915NextChannel+0x1ac>
                {
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 8014fd6:	2303      	movs	r3, #3
 8014fd8:	e025      	b.n	8015026 <RegionUS915NextChannel+0x1c2>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 8014fda:	2300      	movs	r3, #0
 8014fdc:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8014fe0:	e004      	b.n	8014fec <RegionUS915NextChannel+0x188>
                {
                    i++;
 8014fe2:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8014fe6:	3301      	adds	r3, #1
 8014fe8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 8014fec:	4b10      	ldr	r3, [pc, #64]	@ (8015030 <RegionUS915NextChannel+0x1cc>)
 8014fee:	681b      	ldr	r3, [r3, #0]
 8014ff0:	891b      	ldrh	r3, [r3, #8]
 8014ff2:	b2da      	uxtb	r2, r3
 8014ff4:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8014ff8:	fa42 f303 	asr.w	r3, r2, r3
 8014ffc:	f003 0301 	and.w	r3, r3, #1
 8015000:	2b00      	cmp	r3, #0
 8015002:	d0ee      	beq.n	8014fe2 <RegionUS915NextChannel+0x17e>
                }
                *channel = 64 + i;
 8015004:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8015008:	3340      	adds	r3, #64	@ 0x40
 801500a:	b2da      	uxtb	r2, r3
 801500c:	68bb      	ldr	r3, [r7, #8]
 801500e:	701a      	strb	r2, [r3, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 8015010:	4b07      	ldr	r3, [pc, #28]	@ (8015030 <RegionUS915NextChannel+0x1cc>)
 8015012:	681b      	ldr	r3, [r3, #0]
 8015014:	4618      	mov	r0, r3
 8015016:	68bb      	ldr	r3, [r7, #8]
 8015018:	781b      	ldrb	r3, [r3, #0]
 801501a:	2248      	movs	r2, #72	@ 0x48
 801501c:	4619      	mov	r1, r3
 801501e:	f7fc ff2d 	bl	8011e7c <RegionCommonChanDisable>
    }
    return status;
 8015022:	f897 3096 	ldrb.w	r3, [r7, #150]	@ 0x96
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 8015026:	4618      	mov	r0, r3
 8015028:	3798      	adds	r7, #152	@ 0x98
 801502a:	46bd      	mov	sp, r7
 801502c:	bd80      	pop	{r7, pc}
 801502e:	bf00      	nop
 8015030:	20001228 	.word	0x20001228
 8015034:	2000122c 	.word	0x2000122c
 8015038:	20001230 	.word	0x20001230

0801503c <RegionUS915ApplyDrOffset>:
#endif /* REGION_US915 */
}
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801503c:	b480      	push	{r7}
 801503e:	b085      	sub	sp, #20
 8015040:	af00      	add	r7, sp, #0
 8015042:	4603      	mov	r3, r0
 8015044:	71fb      	strb	r3, [r7, #7]
 8015046:	460b      	mov	r3, r1
 8015048:	71bb      	strb	r3, [r7, #6]
 801504a:	4613      	mov	r3, r2
 801504c:	717b      	strb	r3, [r7, #5]
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 801504e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8015052:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8015056:	4909      	ldr	r1, [pc, #36]	@ (801507c <RegionUS915ApplyDrOffset+0x40>)
 8015058:	0092      	lsls	r2, r2, #2
 801505a:	440a      	add	r2, r1
 801505c:	4413      	add	r3, r2
 801505e:	781b      	ldrb	r3, [r3, #0]
 8015060:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 8015062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015066:	2b00      	cmp	r3, #0
 8015068:	da01      	bge.n	801506e <RegionUS915ApplyDrOffset+0x32>
    {
        datarate = DR_0;
 801506a:	2300      	movs	r3, #0
 801506c:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 801506e:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_US915 */
}
 8015070:	4618      	mov	r0, r3
 8015072:	3714      	adds	r7, #20
 8015074:	46bd      	mov	sp, r7
 8015076:	bc80      	pop	{r7}
 8015078:	4770      	bx	lr
 801507a:	bf00      	nop
 801507c:	08020d30 	.word	0x08020d30

08015080 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 8015080:	b580      	push	{r7, lr}
 8015082:	b082      	sub	sp, #8
 8015084:	af00      	add	r7, sp, #0
 8015086:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	33f1      	adds	r3, #241	@ 0xf1
 801508c:	2210      	movs	r2, #16
 801508e:	2100      	movs	r1, #0
 8015090:	4618      	mov	r0, r3
 8015092:	f001 fd19 	bl	8016ac8 <memset1>
    ctx->M_n = 0;
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	2200      	movs	r2, #0
 801509a:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	22f0      	movs	r2, #240	@ 0xf0
 80150a2:	2100      	movs	r1, #0
 80150a4:	4618      	mov	r0, r3
 80150a6:	f001 fd0f 	bl	8016ac8 <memset1>
}
 80150aa:	bf00      	nop
 80150ac:	3708      	adds	r7, #8
 80150ae:	46bd      	mov	sp, r7
 80150b0:	bd80      	pop	{r7, pc}

080150b2 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 80150b2:	b580      	push	{r7, lr}
 80150b4:	b082      	sub	sp, #8
 80150b6:	af00      	add	r7, sp, #0
 80150b8:	6078      	str	r0, [r7, #4]
 80150ba:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	461a      	mov	r2, r3
 80150c0:	2110      	movs	r1, #16
 80150c2:	6838      	ldr	r0, [r7, #0]
 80150c4:	f000 fe60 	bl	8015d88 <lorawan_aes_set_key>
}
 80150c8:	bf00      	nop
 80150ca:	3708      	adds	r7, #8
 80150cc:	46bd      	mov	sp, r7
 80150ce:	bd80      	pop	{r7, pc}

080150d0 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 80150d0:	b580      	push	{r7, lr}
 80150d2:	b08c      	sub	sp, #48	@ 0x30
 80150d4:	af00      	add	r7, sp, #0
 80150d6:	60f8      	str	r0, [r7, #12]
 80150d8:	60b9      	str	r1, [r7, #8]
 80150da:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 80150dc:	68fb      	ldr	r3, [r7, #12]
 80150de:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	f000 80a1 	beq.w	801522a <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 80150e8:	68fb      	ldr	r3, [r7, #12]
 80150ea:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80150ee:	f1c3 0310 	rsb	r3, r3, #16
 80150f2:	687a      	ldr	r2, [r7, #4]
 80150f4:	4293      	cmp	r3, r2
 80150f6:	bf28      	it	cs
 80150f8:	4613      	movcs	r3, r2
 80150fa:	627b      	str	r3, [r7, #36]	@ 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 80150fc:	68fb      	ldr	r3, [r7, #12]
 80150fe:	f203 1201 	addw	r2, r3, #257	@ 0x101
 8015102:	68fb      	ldr	r3, [r7, #12]
 8015104:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8015108:	4413      	add	r3, r2
 801510a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801510c:	b292      	uxth	r2, r2
 801510e:	68b9      	ldr	r1, [r7, #8]
 8015110:	4618      	mov	r0, r3
 8015112:	f001 fc9e 	bl	8016a52 <memcpy1>
        ctx->M_n += mlen;
 8015116:	68fb      	ldr	r3, [r7, #12]
 8015118:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 801511c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801511e:	441a      	add	r2, r3
 8015120:	68fb      	ldr	r3, [r7, #12]
 8015122:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        if( ctx->M_n < 16 || len == mlen )
 8015126:	68fb      	ldr	r3, [r7, #12]
 8015128:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 801512c:	2b0f      	cmp	r3, #15
 801512e:	f240 808d 	bls.w	801524c <AES_CMAC_Update+0x17c>
 8015132:	687a      	ldr	r2, [r7, #4]
 8015134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015136:	429a      	cmp	r2, r3
 8015138:	f000 8088 	beq.w	801524c <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 801513c:	2300      	movs	r3, #0
 801513e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015140:	e015      	b.n	801516e <AES_CMAC_Update+0x9e>
 8015142:	68fa      	ldr	r2, [r7, #12]
 8015144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015146:	4413      	add	r3, r2
 8015148:	33f1      	adds	r3, #241	@ 0xf1
 801514a:	781a      	ldrb	r2, [r3, #0]
 801514c:	68f9      	ldr	r1, [r7, #12]
 801514e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015150:	440b      	add	r3, r1
 8015152:	f203 1301 	addw	r3, r3, #257	@ 0x101
 8015156:	781b      	ldrb	r3, [r3, #0]
 8015158:	4053      	eors	r3, r2
 801515a:	b2d9      	uxtb	r1, r3
 801515c:	68fa      	ldr	r2, [r7, #12]
 801515e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015160:	4413      	add	r3, r2
 8015162:	33f1      	adds	r3, #241	@ 0xf1
 8015164:	460a      	mov	r2, r1
 8015166:	701a      	strb	r2, [r3, #0]
 8015168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801516a:	3301      	adds	r3, #1
 801516c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801516e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015170:	2b0f      	cmp	r3, #15
 8015172:	dde6      	ble.n	8015142 <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8015174:	68fb      	ldr	r3, [r7, #12]
 8015176:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 801517a:	f107 0314 	add.w	r3, r7, #20
 801517e:	2210      	movs	r2, #16
 8015180:	4618      	mov	r0, r3
 8015182:	f001 fc66 	bl	8016a52 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8015186:	68fa      	ldr	r2, [r7, #12]
 8015188:	f107 0114 	add.w	r1, r7, #20
 801518c:	f107 0314 	add.w	r3, r7, #20
 8015190:	4618      	mov	r0, r3
 8015192:	f000 fed7 	bl	8015f44 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8015196:	68fb      	ldr	r3, [r7, #12]
 8015198:	33f1      	adds	r3, #241	@ 0xf1
 801519a:	f107 0114 	add.w	r1, r7, #20
 801519e:	2210      	movs	r2, #16
 80151a0:	4618      	mov	r0, r3
 80151a2:	f001 fc56 	bl	8016a52 <memcpy1>

        data += mlen;
 80151a6:	68ba      	ldr	r2, [r7, #8]
 80151a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151aa:	4413      	add	r3, r2
 80151ac:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 80151ae:	687a      	ldr	r2, [r7, #4]
 80151b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151b2:	1ad3      	subs	r3, r2, r3
 80151b4:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 80151b6:	e038      	b.n	801522a <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 80151b8:	2300      	movs	r3, #0
 80151ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80151bc:	e013      	b.n	80151e6 <AES_CMAC_Update+0x116>
 80151be:	68fa      	ldr	r2, [r7, #12]
 80151c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80151c2:	4413      	add	r3, r2
 80151c4:	33f1      	adds	r3, #241	@ 0xf1
 80151c6:	781a      	ldrb	r2, [r3, #0]
 80151c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80151ca:	68b9      	ldr	r1, [r7, #8]
 80151cc:	440b      	add	r3, r1
 80151ce:	781b      	ldrb	r3, [r3, #0]
 80151d0:	4053      	eors	r3, r2
 80151d2:	b2d9      	uxtb	r1, r3
 80151d4:	68fa      	ldr	r2, [r7, #12]
 80151d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80151d8:	4413      	add	r3, r2
 80151da:	33f1      	adds	r3, #241	@ 0xf1
 80151dc:	460a      	mov	r2, r1
 80151de:	701a      	strb	r2, [r3, #0]
 80151e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80151e2:	3301      	adds	r3, #1
 80151e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80151e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80151e8:	2b0f      	cmp	r3, #15
 80151ea:	dde8      	ble.n	80151be <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 80151ec:	68fb      	ldr	r3, [r7, #12]
 80151ee:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 80151f2:	f107 0314 	add.w	r3, r7, #20
 80151f6:	2210      	movs	r2, #16
 80151f8:	4618      	mov	r0, r3
 80151fa:	f001 fc2a 	bl	8016a52 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 80151fe:	68fa      	ldr	r2, [r7, #12]
 8015200:	f107 0114 	add.w	r1, r7, #20
 8015204:	f107 0314 	add.w	r3, r7, #20
 8015208:	4618      	mov	r0, r3
 801520a:	f000 fe9b 	bl	8015f44 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 801520e:	68fb      	ldr	r3, [r7, #12]
 8015210:	33f1      	adds	r3, #241	@ 0xf1
 8015212:	f107 0114 	add.w	r1, r7, #20
 8015216:	2210      	movs	r2, #16
 8015218:	4618      	mov	r0, r3
 801521a:	f001 fc1a 	bl	8016a52 <memcpy1>

        data += 16;
 801521e:	68bb      	ldr	r3, [r7, #8]
 8015220:	3310      	adds	r3, #16
 8015222:	60bb      	str	r3, [r7, #8]
        len -= 16;
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	3b10      	subs	r3, #16
 8015228:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	2b10      	cmp	r3, #16
 801522e:	d8c3      	bhi.n	80151b8 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 8015230:	68fb      	ldr	r3, [r7, #12]
 8015232:	f203 1301 	addw	r3, r3, #257	@ 0x101
 8015236:	687a      	ldr	r2, [r7, #4]
 8015238:	b292      	uxth	r2, r2
 801523a:	68b9      	ldr	r1, [r7, #8]
 801523c:	4618      	mov	r0, r3
 801523e:	f001 fc08 	bl	8016a52 <memcpy1>
    ctx->M_n = len;
 8015242:	68fb      	ldr	r3, [r7, #12]
 8015244:	687a      	ldr	r2, [r7, #4]
 8015246:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 801524a:	e000      	b.n	801524e <AES_CMAC_Update+0x17e>
            return;
 801524c:	bf00      	nop
}
 801524e:	3730      	adds	r7, #48	@ 0x30
 8015250:	46bd      	mov	sp, r7
 8015252:	bd80      	pop	{r7, pc}

08015254 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 8015254:	b580      	push	{r7, lr}
 8015256:	b092      	sub	sp, #72	@ 0x48
 8015258:	af00      	add	r7, sp, #0
 801525a:	6078      	str	r0, [r7, #4]
 801525c:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 801525e:	f107 031c 	add.w	r3, r7, #28
 8015262:	2210      	movs	r2, #16
 8015264:	2100      	movs	r1, #0
 8015266:	4618      	mov	r0, r3
 8015268:	f001 fc2e 	bl	8016ac8 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 801526c:	683a      	ldr	r2, [r7, #0]
 801526e:	f107 011c 	add.w	r1, r7, #28
 8015272:	f107 031c 	add.w	r3, r7, #28
 8015276:	4618      	mov	r0, r3
 8015278:	f000 fe64 	bl	8015f44 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 801527c:	7f3b      	ldrb	r3, [r7, #28]
 801527e:	b25b      	sxtb	r3, r3
 8015280:	2b00      	cmp	r3, #0
 8015282:	da31      	bge.n	80152e8 <AES_CMAC_Final+0x94>
    {
        LSHIFT( K, K );
 8015284:	2300      	movs	r3, #0
 8015286:	647b      	str	r3, [r7, #68]	@ 0x44
 8015288:	e01c      	b.n	80152c4 <AES_CMAC_Final+0x70>
 801528a:	f107 021c 	add.w	r2, r7, #28
 801528e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015290:	4413      	add	r3, r2
 8015292:	781b      	ldrb	r3, [r3, #0]
 8015294:	b25b      	sxtb	r3, r3
 8015296:	005b      	lsls	r3, r3, #1
 8015298:	b25a      	sxtb	r2, r3
 801529a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801529c:	3301      	adds	r3, #1
 801529e:	3348      	adds	r3, #72	@ 0x48
 80152a0:	443b      	add	r3, r7
 80152a2:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80152a6:	09db      	lsrs	r3, r3, #7
 80152a8:	b2db      	uxtb	r3, r3
 80152aa:	b25b      	sxtb	r3, r3
 80152ac:	4313      	orrs	r3, r2
 80152ae:	b25b      	sxtb	r3, r3
 80152b0:	b2d9      	uxtb	r1, r3
 80152b2:	f107 021c 	add.w	r2, r7, #28
 80152b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80152b8:	4413      	add	r3, r2
 80152ba:	460a      	mov	r2, r1
 80152bc:	701a      	strb	r2, [r3, #0]
 80152be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80152c0:	3301      	adds	r3, #1
 80152c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80152c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80152c6:	2b0e      	cmp	r3, #14
 80152c8:	dddf      	ble.n	801528a <AES_CMAC_Final+0x36>
 80152ca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80152ce:	005b      	lsls	r3, r3, #1
 80152d0:	b2db      	uxtb	r3, r3
 80152d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        K[15] ^= 0x87;
 80152d6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80152da:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 80152de:	43db      	mvns	r3, r3
 80152e0:	b2db      	uxtb	r3, r3
 80152e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80152e6:	e028      	b.n	801533a <AES_CMAC_Final+0xe6>
    }
    else
        LSHIFT( K, K );
 80152e8:	2300      	movs	r3, #0
 80152ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80152ec:	e01c      	b.n	8015328 <AES_CMAC_Final+0xd4>
 80152ee:	f107 021c 	add.w	r2, r7, #28
 80152f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80152f4:	4413      	add	r3, r2
 80152f6:	781b      	ldrb	r3, [r3, #0]
 80152f8:	b25b      	sxtb	r3, r3
 80152fa:	005b      	lsls	r3, r3, #1
 80152fc:	b25a      	sxtb	r2, r3
 80152fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015300:	3301      	adds	r3, #1
 8015302:	3348      	adds	r3, #72	@ 0x48
 8015304:	443b      	add	r3, r7
 8015306:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 801530a:	09db      	lsrs	r3, r3, #7
 801530c:	b2db      	uxtb	r3, r3
 801530e:	b25b      	sxtb	r3, r3
 8015310:	4313      	orrs	r3, r2
 8015312:	b25b      	sxtb	r3, r3
 8015314:	b2d9      	uxtb	r1, r3
 8015316:	f107 021c 	add.w	r2, r7, #28
 801531a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801531c:	4413      	add	r3, r2
 801531e:	460a      	mov	r2, r1
 8015320:	701a      	strb	r2, [r3, #0]
 8015322:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015324:	3301      	adds	r3, #1
 8015326:	643b      	str	r3, [r7, #64]	@ 0x40
 8015328:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801532a:	2b0e      	cmp	r3, #14
 801532c:	dddf      	ble.n	80152ee <AES_CMAC_Final+0x9a>
 801532e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8015332:	005b      	lsls	r3, r3, #1
 8015334:	b2db      	uxtb	r3, r3
 8015336:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    if( ctx->M_n == 16 )
 801533a:	683b      	ldr	r3, [r7, #0]
 801533c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8015340:	2b10      	cmp	r3, #16
 8015342:	d11d      	bne.n	8015380 <AES_CMAC_Final+0x12c>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 8015344:	2300      	movs	r3, #0
 8015346:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015348:	e016      	b.n	8015378 <AES_CMAC_Final+0x124>
 801534a:	683a      	ldr	r2, [r7, #0]
 801534c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801534e:	4413      	add	r3, r2
 8015350:	f203 1301 	addw	r3, r3, #257	@ 0x101
 8015354:	781a      	ldrb	r2, [r3, #0]
 8015356:	f107 011c 	add.w	r1, r7, #28
 801535a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801535c:	440b      	add	r3, r1
 801535e:	781b      	ldrb	r3, [r3, #0]
 8015360:	4053      	eors	r3, r2
 8015362:	b2d9      	uxtb	r1, r3
 8015364:	683a      	ldr	r2, [r7, #0]
 8015366:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015368:	4413      	add	r3, r2
 801536a:	f203 1301 	addw	r3, r3, #257	@ 0x101
 801536e:	460a      	mov	r2, r1
 8015370:	701a      	strb	r2, [r3, #0]
 8015372:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015374:	3301      	adds	r3, #1
 8015376:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015378:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801537a:	2b0f      	cmp	r3, #15
 801537c:	dde5      	ble.n	801534a <AES_CMAC_Final+0xf6>
 801537e:	e098      	b.n	80154b2 <AES_CMAC_Final+0x25e>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 8015380:	7f3b      	ldrb	r3, [r7, #28]
 8015382:	b25b      	sxtb	r3, r3
 8015384:	2b00      	cmp	r3, #0
 8015386:	da31      	bge.n	80153ec <AES_CMAC_Final+0x198>
        {
            LSHIFT( K, K );
 8015388:	2300      	movs	r3, #0
 801538a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801538c:	e01c      	b.n	80153c8 <AES_CMAC_Final+0x174>
 801538e:	f107 021c 	add.w	r2, r7, #28
 8015392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015394:	4413      	add	r3, r2
 8015396:	781b      	ldrb	r3, [r3, #0]
 8015398:	b25b      	sxtb	r3, r3
 801539a:	005b      	lsls	r3, r3, #1
 801539c:	b25a      	sxtb	r2, r3
 801539e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80153a0:	3301      	adds	r3, #1
 80153a2:	3348      	adds	r3, #72	@ 0x48
 80153a4:	443b      	add	r3, r7
 80153a6:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80153aa:	09db      	lsrs	r3, r3, #7
 80153ac:	b2db      	uxtb	r3, r3
 80153ae:	b25b      	sxtb	r3, r3
 80153b0:	4313      	orrs	r3, r2
 80153b2:	b25b      	sxtb	r3, r3
 80153b4:	b2d9      	uxtb	r1, r3
 80153b6:	f107 021c 	add.w	r2, r7, #28
 80153ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80153bc:	4413      	add	r3, r2
 80153be:	460a      	mov	r2, r1
 80153c0:	701a      	strb	r2, [r3, #0]
 80153c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80153c4:	3301      	adds	r3, #1
 80153c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80153c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80153ca:	2b0e      	cmp	r3, #14
 80153cc:	dddf      	ble.n	801538e <AES_CMAC_Final+0x13a>
 80153ce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80153d2:	005b      	lsls	r3, r3, #1
 80153d4:	b2db      	uxtb	r3, r3
 80153d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            K[15] ^= 0x87;
 80153da:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80153de:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 80153e2:	43db      	mvns	r3, r3
 80153e4:	b2db      	uxtb	r3, r3
 80153e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80153ea:	e028      	b.n	801543e <AES_CMAC_Final+0x1ea>
        }
        else
            LSHIFT( K, K );
 80153ec:	2300      	movs	r3, #0
 80153ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80153f0:	e01c      	b.n	801542c <AES_CMAC_Final+0x1d8>
 80153f2:	f107 021c 	add.w	r2, r7, #28
 80153f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80153f8:	4413      	add	r3, r2
 80153fa:	781b      	ldrb	r3, [r3, #0]
 80153fc:	b25b      	sxtb	r3, r3
 80153fe:	005b      	lsls	r3, r3, #1
 8015400:	b25a      	sxtb	r2, r3
 8015402:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015404:	3301      	adds	r3, #1
 8015406:	3348      	adds	r3, #72	@ 0x48
 8015408:	443b      	add	r3, r7
 801540a:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 801540e:	09db      	lsrs	r3, r3, #7
 8015410:	b2db      	uxtb	r3, r3
 8015412:	b25b      	sxtb	r3, r3
 8015414:	4313      	orrs	r3, r2
 8015416:	b25b      	sxtb	r3, r3
 8015418:	b2d9      	uxtb	r1, r3
 801541a:	f107 021c 	add.w	r2, r7, #28
 801541e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015420:	4413      	add	r3, r2
 8015422:	460a      	mov	r2, r1
 8015424:	701a      	strb	r2, [r3, #0]
 8015426:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015428:	3301      	adds	r3, #1
 801542a:	637b      	str	r3, [r7, #52]	@ 0x34
 801542c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801542e:	2b0e      	cmp	r3, #14
 8015430:	dddf      	ble.n	80153f2 <AES_CMAC_Final+0x19e>
 8015432:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8015436:	005b      	lsls	r3, r3, #1
 8015438:	b2db      	uxtb	r3, r3
 801543a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 801543e:	683b      	ldr	r3, [r7, #0]
 8015440:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8015444:	683a      	ldr	r2, [r7, #0]
 8015446:	4413      	add	r3, r2
 8015448:	2280      	movs	r2, #128	@ 0x80
 801544a:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 801544e:	e007      	b.n	8015460 <AES_CMAC_Final+0x20c>
            ctx->M_last[ctx->M_n] = 0;
 8015450:	683b      	ldr	r3, [r7, #0]
 8015452:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8015456:	683a      	ldr	r2, [r7, #0]
 8015458:	4413      	add	r3, r2
 801545a:	2200      	movs	r2, #0
 801545c:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 8015460:	683b      	ldr	r3, [r7, #0]
 8015462:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8015466:	1c5a      	adds	r2, r3, #1
 8015468:	683b      	ldr	r3, [r7, #0]
 801546a:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 801546e:	683b      	ldr	r3, [r7, #0]
 8015470:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8015474:	2b0f      	cmp	r3, #15
 8015476:	d9eb      	bls.n	8015450 <AES_CMAC_Final+0x1fc>

        XOR( K, ctx->M_last );
 8015478:	2300      	movs	r3, #0
 801547a:	633b      	str	r3, [r7, #48]	@ 0x30
 801547c:	e016      	b.n	80154ac <AES_CMAC_Final+0x258>
 801547e:	683a      	ldr	r2, [r7, #0]
 8015480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015482:	4413      	add	r3, r2
 8015484:	f203 1301 	addw	r3, r3, #257	@ 0x101
 8015488:	781a      	ldrb	r2, [r3, #0]
 801548a:	f107 011c 	add.w	r1, r7, #28
 801548e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015490:	440b      	add	r3, r1
 8015492:	781b      	ldrb	r3, [r3, #0]
 8015494:	4053      	eors	r3, r2
 8015496:	b2d9      	uxtb	r1, r3
 8015498:	683a      	ldr	r2, [r7, #0]
 801549a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801549c:	4413      	add	r3, r2
 801549e:	f203 1301 	addw	r3, r3, #257	@ 0x101
 80154a2:	460a      	mov	r2, r1
 80154a4:	701a      	strb	r2, [r3, #0]
 80154a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154a8:	3301      	adds	r3, #1
 80154aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80154ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154ae:	2b0f      	cmp	r3, #15
 80154b0:	dde5      	ble.n	801547e <AES_CMAC_Final+0x22a>
    }
    XOR( ctx->M_last, ctx->X );
 80154b2:	2300      	movs	r3, #0
 80154b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80154b6:	e015      	b.n	80154e4 <AES_CMAC_Final+0x290>
 80154b8:	683a      	ldr	r2, [r7, #0]
 80154ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154bc:	4413      	add	r3, r2
 80154be:	33f1      	adds	r3, #241	@ 0xf1
 80154c0:	781a      	ldrb	r2, [r3, #0]
 80154c2:	6839      	ldr	r1, [r7, #0]
 80154c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154c6:	440b      	add	r3, r1
 80154c8:	f203 1301 	addw	r3, r3, #257	@ 0x101
 80154cc:	781b      	ldrb	r3, [r3, #0]
 80154ce:	4053      	eors	r3, r2
 80154d0:	b2d9      	uxtb	r1, r3
 80154d2:	683a      	ldr	r2, [r7, #0]
 80154d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154d6:	4413      	add	r3, r2
 80154d8:	33f1      	adds	r3, #241	@ 0xf1
 80154da:	460a      	mov	r2, r1
 80154dc:	701a      	strb	r2, [r3, #0]
 80154de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154e0:	3301      	adds	r3, #1
 80154e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80154e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154e6:	2b0f      	cmp	r3, #15
 80154e8:	dde6      	ble.n	80154b8 <AES_CMAC_Final+0x264>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 80154ea:	683b      	ldr	r3, [r7, #0]
 80154ec:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 80154f0:	f107 030c 	add.w	r3, r7, #12
 80154f4:	2210      	movs	r2, #16
 80154f6:	4618      	mov	r0, r3
 80154f8:	f001 faab 	bl	8016a52 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 80154fc:	683a      	ldr	r2, [r7, #0]
 80154fe:	f107 030c 	add.w	r3, r7, #12
 8015502:	6879      	ldr	r1, [r7, #4]
 8015504:	4618      	mov	r0, r3
 8015506:	f000 fd1d 	bl	8015f44 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 801550a:	f107 031c 	add.w	r3, r7, #28
 801550e:	2210      	movs	r2, #16
 8015510:	2100      	movs	r1, #0
 8015512:	4618      	mov	r0, r3
 8015514:	f001 fad8 	bl	8016ac8 <memset1>
}
 8015518:	bf00      	nop
 801551a:	3748      	adds	r7, #72	@ 0x48
 801551c:	46bd      	mov	sp, r7
 801551e:	bd80      	pop	{r7, pc}

08015520 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 8015520:	b480      	push	{r7}
 8015522:	b083      	sub	sp, #12
 8015524:	af00      	add	r7, sp, #0
 8015526:	6078      	str	r0, [r7, #4]
 8015528:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 801552a:	683b      	ldr	r3, [r7, #0]
 801552c:	781a      	ldrb	r2, [r3, #0]
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	3301      	adds	r3, #1
 8015536:	683a      	ldr	r2, [r7, #0]
 8015538:	7852      	ldrb	r2, [r2, #1]
 801553a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	3302      	adds	r3, #2
 8015540:	683a      	ldr	r2, [r7, #0]
 8015542:	7892      	ldrb	r2, [r2, #2]
 8015544:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	3303      	adds	r3, #3
 801554a:	683a      	ldr	r2, [r7, #0]
 801554c:	78d2      	ldrb	r2, [r2, #3]
 801554e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	3304      	adds	r3, #4
 8015554:	683a      	ldr	r2, [r7, #0]
 8015556:	7912      	ldrb	r2, [r2, #4]
 8015558:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	3305      	adds	r3, #5
 801555e:	683a      	ldr	r2, [r7, #0]
 8015560:	7952      	ldrb	r2, [r2, #5]
 8015562:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	3306      	adds	r3, #6
 8015568:	683a      	ldr	r2, [r7, #0]
 801556a:	7992      	ldrb	r2, [r2, #6]
 801556c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	3307      	adds	r3, #7
 8015572:	683a      	ldr	r2, [r7, #0]
 8015574:	79d2      	ldrb	r2, [r2, #7]
 8015576:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	3308      	adds	r3, #8
 801557c:	683a      	ldr	r2, [r7, #0]
 801557e:	7a12      	ldrb	r2, [r2, #8]
 8015580:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	3309      	adds	r3, #9
 8015586:	683a      	ldr	r2, [r7, #0]
 8015588:	7a52      	ldrb	r2, [r2, #9]
 801558a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	330a      	adds	r3, #10
 8015590:	683a      	ldr	r2, [r7, #0]
 8015592:	7a92      	ldrb	r2, [r2, #10]
 8015594:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	330b      	adds	r3, #11
 801559a:	683a      	ldr	r2, [r7, #0]
 801559c:	7ad2      	ldrb	r2, [r2, #11]
 801559e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	330c      	adds	r3, #12
 80155a4:	683a      	ldr	r2, [r7, #0]
 80155a6:	7b12      	ldrb	r2, [r2, #12]
 80155a8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	330d      	adds	r3, #13
 80155ae:	683a      	ldr	r2, [r7, #0]
 80155b0:	7b52      	ldrb	r2, [r2, #13]
 80155b2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	330e      	adds	r3, #14
 80155b8:	683a      	ldr	r2, [r7, #0]
 80155ba:	7b92      	ldrb	r2, [r2, #14]
 80155bc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	330f      	adds	r3, #15
 80155c2:	683a      	ldr	r2, [r7, #0]
 80155c4:	7bd2      	ldrb	r2, [r2, #15]
 80155c6:	701a      	strb	r2, [r3, #0]
#endif
}
 80155c8:	bf00      	nop
 80155ca:	370c      	adds	r7, #12
 80155cc:	46bd      	mov	sp, r7
 80155ce:	bc80      	pop	{r7}
 80155d0:	4770      	bx	lr

080155d2 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 80155d2:	b480      	push	{r7}
 80155d4:	b085      	sub	sp, #20
 80155d6:	af00      	add	r7, sp, #0
 80155d8:	60f8      	str	r0, [r7, #12]
 80155da:	60b9      	str	r1, [r7, #8]
 80155dc:	4613      	mov	r3, r2
 80155de:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 80155e0:	e007      	b.n	80155f2 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 80155e2:	68ba      	ldr	r2, [r7, #8]
 80155e4:	1c53      	adds	r3, r2, #1
 80155e6:	60bb      	str	r3, [r7, #8]
 80155e8:	68fb      	ldr	r3, [r7, #12]
 80155ea:	1c59      	adds	r1, r3, #1
 80155ec:	60f9      	str	r1, [r7, #12]
 80155ee:	7812      	ldrb	r2, [r2, #0]
 80155f0:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 80155f2:	79fb      	ldrb	r3, [r7, #7]
 80155f4:	1e5a      	subs	r2, r3, #1
 80155f6:	71fa      	strb	r2, [r7, #7]
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d1f2      	bne.n	80155e2 <copy_block_nn+0x10>
}
 80155fc:	bf00      	nop
 80155fe:	bf00      	nop
 8015600:	3714      	adds	r7, #20
 8015602:	46bd      	mov	sp, r7
 8015604:	bc80      	pop	{r7}
 8015606:	4770      	bx	lr

08015608 <xor_block>:

static void xor_block( void *d, const void *s )
{
 8015608:	b480      	push	{r7}
 801560a:	b083      	sub	sp, #12
 801560c:	af00      	add	r7, sp, #0
 801560e:	6078      	str	r0, [r7, #4]
 8015610:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	781a      	ldrb	r2, [r3, #0]
 8015616:	683b      	ldr	r3, [r7, #0]
 8015618:	781b      	ldrb	r3, [r3, #0]
 801561a:	4053      	eors	r3, r2
 801561c:	b2da      	uxtb	r2, r3
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	3301      	adds	r3, #1
 8015626:	7819      	ldrb	r1, [r3, #0]
 8015628:	683b      	ldr	r3, [r7, #0]
 801562a:	3301      	adds	r3, #1
 801562c:	781a      	ldrb	r2, [r3, #0]
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	3301      	adds	r3, #1
 8015632:	404a      	eors	r2, r1
 8015634:	b2d2      	uxtb	r2, r2
 8015636:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	3302      	adds	r3, #2
 801563c:	7819      	ldrb	r1, [r3, #0]
 801563e:	683b      	ldr	r3, [r7, #0]
 8015640:	3302      	adds	r3, #2
 8015642:	781a      	ldrb	r2, [r3, #0]
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	3302      	adds	r3, #2
 8015648:	404a      	eors	r2, r1
 801564a:	b2d2      	uxtb	r2, r2
 801564c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	3303      	adds	r3, #3
 8015652:	7819      	ldrb	r1, [r3, #0]
 8015654:	683b      	ldr	r3, [r7, #0]
 8015656:	3303      	adds	r3, #3
 8015658:	781a      	ldrb	r2, [r3, #0]
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	3303      	adds	r3, #3
 801565e:	404a      	eors	r2, r1
 8015660:	b2d2      	uxtb	r2, r2
 8015662:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	3304      	adds	r3, #4
 8015668:	7819      	ldrb	r1, [r3, #0]
 801566a:	683b      	ldr	r3, [r7, #0]
 801566c:	3304      	adds	r3, #4
 801566e:	781a      	ldrb	r2, [r3, #0]
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	3304      	adds	r3, #4
 8015674:	404a      	eors	r2, r1
 8015676:	b2d2      	uxtb	r2, r2
 8015678:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	3305      	adds	r3, #5
 801567e:	7819      	ldrb	r1, [r3, #0]
 8015680:	683b      	ldr	r3, [r7, #0]
 8015682:	3305      	adds	r3, #5
 8015684:	781a      	ldrb	r2, [r3, #0]
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	3305      	adds	r3, #5
 801568a:	404a      	eors	r2, r1
 801568c:	b2d2      	uxtb	r2, r2
 801568e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	3306      	adds	r3, #6
 8015694:	7819      	ldrb	r1, [r3, #0]
 8015696:	683b      	ldr	r3, [r7, #0]
 8015698:	3306      	adds	r3, #6
 801569a:	781a      	ldrb	r2, [r3, #0]
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	3306      	adds	r3, #6
 80156a0:	404a      	eors	r2, r1
 80156a2:	b2d2      	uxtb	r2, r2
 80156a4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	3307      	adds	r3, #7
 80156aa:	7819      	ldrb	r1, [r3, #0]
 80156ac:	683b      	ldr	r3, [r7, #0]
 80156ae:	3307      	adds	r3, #7
 80156b0:	781a      	ldrb	r2, [r3, #0]
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	3307      	adds	r3, #7
 80156b6:	404a      	eors	r2, r1
 80156b8:	b2d2      	uxtb	r2, r2
 80156ba:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	3308      	adds	r3, #8
 80156c0:	7819      	ldrb	r1, [r3, #0]
 80156c2:	683b      	ldr	r3, [r7, #0]
 80156c4:	3308      	adds	r3, #8
 80156c6:	781a      	ldrb	r2, [r3, #0]
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	3308      	adds	r3, #8
 80156cc:	404a      	eors	r2, r1
 80156ce:	b2d2      	uxtb	r2, r2
 80156d0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	3309      	adds	r3, #9
 80156d6:	7819      	ldrb	r1, [r3, #0]
 80156d8:	683b      	ldr	r3, [r7, #0]
 80156da:	3309      	adds	r3, #9
 80156dc:	781a      	ldrb	r2, [r3, #0]
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	3309      	adds	r3, #9
 80156e2:	404a      	eors	r2, r1
 80156e4:	b2d2      	uxtb	r2, r2
 80156e6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	330a      	adds	r3, #10
 80156ec:	7819      	ldrb	r1, [r3, #0]
 80156ee:	683b      	ldr	r3, [r7, #0]
 80156f0:	330a      	adds	r3, #10
 80156f2:	781a      	ldrb	r2, [r3, #0]
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	330a      	adds	r3, #10
 80156f8:	404a      	eors	r2, r1
 80156fa:	b2d2      	uxtb	r2, r2
 80156fc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	330b      	adds	r3, #11
 8015702:	7819      	ldrb	r1, [r3, #0]
 8015704:	683b      	ldr	r3, [r7, #0]
 8015706:	330b      	adds	r3, #11
 8015708:	781a      	ldrb	r2, [r3, #0]
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	330b      	adds	r3, #11
 801570e:	404a      	eors	r2, r1
 8015710:	b2d2      	uxtb	r2, r2
 8015712:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	330c      	adds	r3, #12
 8015718:	7819      	ldrb	r1, [r3, #0]
 801571a:	683b      	ldr	r3, [r7, #0]
 801571c:	330c      	adds	r3, #12
 801571e:	781a      	ldrb	r2, [r3, #0]
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	330c      	adds	r3, #12
 8015724:	404a      	eors	r2, r1
 8015726:	b2d2      	uxtb	r2, r2
 8015728:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	330d      	adds	r3, #13
 801572e:	7819      	ldrb	r1, [r3, #0]
 8015730:	683b      	ldr	r3, [r7, #0]
 8015732:	330d      	adds	r3, #13
 8015734:	781a      	ldrb	r2, [r3, #0]
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	330d      	adds	r3, #13
 801573a:	404a      	eors	r2, r1
 801573c:	b2d2      	uxtb	r2, r2
 801573e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	330e      	adds	r3, #14
 8015744:	7819      	ldrb	r1, [r3, #0]
 8015746:	683b      	ldr	r3, [r7, #0]
 8015748:	330e      	adds	r3, #14
 801574a:	781a      	ldrb	r2, [r3, #0]
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	330e      	adds	r3, #14
 8015750:	404a      	eors	r2, r1
 8015752:	b2d2      	uxtb	r2, r2
 8015754:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	330f      	adds	r3, #15
 801575a:	7819      	ldrb	r1, [r3, #0]
 801575c:	683b      	ldr	r3, [r7, #0]
 801575e:	330f      	adds	r3, #15
 8015760:	781a      	ldrb	r2, [r3, #0]
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	330f      	adds	r3, #15
 8015766:	404a      	eors	r2, r1
 8015768:	b2d2      	uxtb	r2, r2
 801576a:	701a      	strb	r2, [r3, #0]
#endif
}
 801576c:	bf00      	nop
 801576e:	370c      	adds	r7, #12
 8015770:	46bd      	mov	sp, r7
 8015772:	bc80      	pop	{r7}
 8015774:	4770      	bx	lr

08015776 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 8015776:	b480      	push	{r7}
 8015778:	b085      	sub	sp, #20
 801577a:	af00      	add	r7, sp, #0
 801577c:	60f8      	str	r0, [r7, #12]
 801577e:	60b9      	str	r1, [r7, #8]
 8015780:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 8015782:	68bb      	ldr	r3, [r7, #8]
 8015784:	781a      	ldrb	r2, [r3, #0]
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	781b      	ldrb	r3, [r3, #0]
 801578a:	4053      	eors	r3, r2
 801578c:	b2da      	uxtb	r2, r3
 801578e:	68fb      	ldr	r3, [r7, #12]
 8015790:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 8015792:	68bb      	ldr	r3, [r7, #8]
 8015794:	3301      	adds	r3, #1
 8015796:	7819      	ldrb	r1, [r3, #0]
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	3301      	adds	r3, #1
 801579c:	781a      	ldrb	r2, [r3, #0]
 801579e:	68fb      	ldr	r3, [r7, #12]
 80157a0:	3301      	adds	r3, #1
 80157a2:	404a      	eors	r2, r1
 80157a4:	b2d2      	uxtb	r2, r2
 80157a6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 80157a8:	68bb      	ldr	r3, [r7, #8]
 80157aa:	3302      	adds	r3, #2
 80157ac:	7819      	ldrb	r1, [r3, #0]
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	3302      	adds	r3, #2
 80157b2:	781a      	ldrb	r2, [r3, #0]
 80157b4:	68fb      	ldr	r3, [r7, #12]
 80157b6:	3302      	adds	r3, #2
 80157b8:	404a      	eors	r2, r1
 80157ba:	b2d2      	uxtb	r2, r2
 80157bc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 80157be:	68bb      	ldr	r3, [r7, #8]
 80157c0:	3303      	adds	r3, #3
 80157c2:	7819      	ldrb	r1, [r3, #0]
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	3303      	adds	r3, #3
 80157c8:	781a      	ldrb	r2, [r3, #0]
 80157ca:	68fb      	ldr	r3, [r7, #12]
 80157cc:	3303      	adds	r3, #3
 80157ce:	404a      	eors	r2, r1
 80157d0:	b2d2      	uxtb	r2, r2
 80157d2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 80157d4:	68bb      	ldr	r3, [r7, #8]
 80157d6:	3304      	adds	r3, #4
 80157d8:	7819      	ldrb	r1, [r3, #0]
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	3304      	adds	r3, #4
 80157de:	781a      	ldrb	r2, [r3, #0]
 80157e0:	68fb      	ldr	r3, [r7, #12]
 80157e2:	3304      	adds	r3, #4
 80157e4:	404a      	eors	r2, r1
 80157e6:	b2d2      	uxtb	r2, r2
 80157e8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 80157ea:	68bb      	ldr	r3, [r7, #8]
 80157ec:	3305      	adds	r3, #5
 80157ee:	7819      	ldrb	r1, [r3, #0]
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	3305      	adds	r3, #5
 80157f4:	781a      	ldrb	r2, [r3, #0]
 80157f6:	68fb      	ldr	r3, [r7, #12]
 80157f8:	3305      	adds	r3, #5
 80157fa:	404a      	eors	r2, r1
 80157fc:	b2d2      	uxtb	r2, r2
 80157fe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 8015800:	68bb      	ldr	r3, [r7, #8]
 8015802:	3306      	adds	r3, #6
 8015804:	7819      	ldrb	r1, [r3, #0]
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	3306      	adds	r3, #6
 801580a:	781a      	ldrb	r2, [r3, #0]
 801580c:	68fb      	ldr	r3, [r7, #12]
 801580e:	3306      	adds	r3, #6
 8015810:	404a      	eors	r2, r1
 8015812:	b2d2      	uxtb	r2, r2
 8015814:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 8015816:	68bb      	ldr	r3, [r7, #8]
 8015818:	3307      	adds	r3, #7
 801581a:	7819      	ldrb	r1, [r3, #0]
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	3307      	adds	r3, #7
 8015820:	781a      	ldrb	r2, [r3, #0]
 8015822:	68fb      	ldr	r3, [r7, #12]
 8015824:	3307      	adds	r3, #7
 8015826:	404a      	eors	r2, r1
 8015828:	b2d2      	uxtb	r2, r2
 801582a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 801582c:	68bb      	ldr	r3, [r7, #8]
 801582e:	3308      	adds	r3, #8
 8015830:	7819      	ldrb	r1, [r3, #0]
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	3308      	adds	r3, #8
 8015836:	781a      	ldrb	r2, [r3, #0]
 8015838:	68fb      	ldr	r3, [r7, #12]
 801583a:	3308      	adds	r3, #8
 801583c:	404a      	eors	r2, r1
 801583e:	b2d2      	uxtb	r2, r2
 8015840:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 8015842:	68bb      	ldr	r3, [r7, #8]
 8015844:	3309      	adds	r3, #9
 8015846:	7819      	ldrb	r1, [r3, #0]
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	3309      	adds	r3, #9
 801584c:	781a      	ldrb	r2, [r3, #0]
 801584e:	68fb      	ldr	r3, [r7, #12]
 8015850:	3309      	adds	r3, #9
 8015852:	404a      	eors	r2, r1
 8015854:	b2d2      	uxtb	r2, r2
 8015856:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 8015858:	68bb      	ldr	r3, [r7, #8]
 801585a:	330a      	adds	r3, #10
 801585c:	7819      	ldrb	r1, [r3, #0]
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	330a      	adds	r3, #10
 8015862:	781a      	ldrb	r2, [r3, #0]
 8015864:	68fb      	ldr	r3, [r7, #12]
 8015866:	330a      	adds	r3, #10
 8015868:	404a      	eors	r2, r1
 801586a:	b2d2      	uxtb	r2, r2
 801586c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 801586e:	68bb      	ldr	r3, [r7, #8]
 8015870:	330b      	adds	r3, #11
 8015872:	7819      	ldrb	r1, [r3, #0]
 8015874:	687b      	ldr	r3, [r7, #4]
 8015876:	330b      	adds	r3, #11
 8015878:	781a      	ldrb	r2, [r3, #0]
 801587a:	68fb      	ldr	r3, [r7, #12]
 801587c:	330b      	adds	r3, #11
 801587e:	404a      	eors	r2, r1
 8015880:	b2d2      	uxtb	r2, r2
 8015882:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 8015884:	68bb      	ldr	r3, [r7, #8]
 8015886:	330c      	adds	r3, #12
 8015888:	7819      	ldrb	r1, [r3, #0]
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	330c      	adds	r3, #12
 801588e:	781a      	ldrb	r2, [r3, #0]
 8015890:	68fb      	ldr	r3, [r7, #12]
 8015892:	330c      	adds	r3, #12
 8015894:	404a      	eors	r2, r1
 8015896:	b2d2      	uxtb	r2, r2
 8015898:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 801589a:	68bb      	ldr	r3, [r7, #8]
 801589c:	330d      	adds	r3, #13
 801589e:	7819      	ldrb	r1, [r3, #0]
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	330d      	adds	r3, #13
 80158a4:	781a      	ldrb	r2, [r3, #0]
 80158a6:	68fb      	ldr	r3, [r7, #12]
 80158a8:	330d      	adds	r3, #13
 80158aa:	404a      	eors	r2, r1
 80158ac:	b2d2      	uxtb	r2, r2
 80158ae:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 80158b0:	68bb      	ldr	r3, [r7, #8]
 80158b2:	330e      	adds	r3, #14
 80158b4:	7819      	ldrb	r1, [r3, #0]
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	330e      	adds	r3, #14
 80158ba:	781a      	ldrb	r2, [r3, #0]
 80158bc:	68fb      	ldr	r3, [r7, #12]
 80158be:	330e      	adds	r3, #14
 80158c0:	404a      	eors	r2, r1
 80158c2:	b2d2      	uxtb	r2, r2
 80158c4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 80158c6:	68bb      	ldr	r3, [r7, #8]
 80158c8:	330f      	adds	r3, #15
 80158ca:	7819      	ldrb	r1, [r3, #0]
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	330f      	adds	r3, #15
 80158d0:	781a      	ldrb	r2, [r3, #0]
 80158d2:	68fb      	ldr	r3, [r7, #12]
 80158d4:	330f      	adds	r3, #15
 80158d6:	404a      	eors	r2, r1
 80158d8:	b2d2      	uxtb	r2, r2
 80158da:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 80158dc:	bf00      	nop
 80158de:	3714      	adds	r7, #20
 80158e0:	46bd      	mov	sp, r7
 80158e2:	bc80      	pop	{r7}
 80158e4:	4770      	bx	lr

080158e6 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 80158e6:	b580      	push	{r7, lr}
 80158e8:	b082      	sub	sp, #8
 80158ea:	af00      	add	r7, sp, #0
 80158ec:	6078      	str	r0, [r7, #4]
 80158ee:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 80158f0:	6839      	ldr	r1, [r7, #0]
 80158f2:	6878      	ldr	r0, [r7, #4]
 80158f4:	f7ff fe88 	bl	8015608 <xor_block>
}
 80158f8:	bf00      	nop
 80158fa:	3708      	adds	r7, #8
 80158fc:	46bd      	mov	sp, r7
 80158fe:	bd80      	pop	{r7, pc}

08015900 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 8015900:	b480      	push	{r7}
 8015902:	b085      	sub	sp, #20
 8015904:	af00      	add	r7, sp, #0
 8015906:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	781b      	ldrb	r3, [r3, #0]
 801590c:	461a      	mov	r2, r3
 801590e:	4b48      	ldr	r3, [pc, #288]	@ (8015a30 <shift_sub_rows+0x130>)
 8015910:	5c9a      	ldrb	r2, [r3, r2]
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	701a      	strb	r2, [r3, #0]
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	3304      	adds	r3, #4
 801591a:	781b      	ldrb	r3, [r3, #0]
 801591c:	4619      	mov	r1, r3
 801591e:	687b      	ldr	r3, [r7, #4]
 8015920:	3304      	adds	r3, #4
 8015922:	4a43      	ldr	r2, [pc, #268]	@ (8015a30 <shift_sub_rows+0x130>)
 8015924:	5c52      	ldrb	r2, [r2, r1]
 8015926:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	3308      	adds	r3, #8
 801592c:	781b      	ldrb	r3, [r3, #0]
 801592e:	4619      	mov	r1, r3
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	3308      	adds	r3, #8
 8015934:	4a3e      	ldr	r2, [pc, #248]	@ (8015a30 <shift_sub_rows+0x130>)
 8015936:	5c52      	ldrb	r2, [r2, r1]
 8015938:	701a      	strb	r2, [r3, #0]
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	330c      	adds	r3, #12
 801593e:	781b      	ldrb	r3, [r3, #0]
 8015940:	4619      	mov	r1, r3
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	330c      	adds	r3, #12
 8015946:	4a3a      	ldr	r2, [pc, #232]	@ (8015a30 <shift_sub_rows+0x130>)
 8015948:	5c52      	ldrb	r2, [r2, r1]
 801594a:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 801594c:	687b      	ldr	r3, [r7, #4]
 801594e:	785b      	ldrb	r3, [r3, #1]
 8015950:	73fb      	strb	r3, [r7, #15]
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	3305      	adds	r3, #5
 8015956:	781b      	ldrb	r3, [r3, #0]
 8015958:	4619      	mov	r1, r3
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	3301      	adds	r3, #1
 801595e:	4a34      	ldr	r2, [pc, #208]	@ (8015a30 <shift_sub_rows+0x130>)
 8015960:	5c52      	ldrb	r2, [r2, r1]
 8015962:	701a      	strb	r2, [r3, #0]
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	3309      	adds	r3, #9
 8015968:	781b      	ldrb	r3, [r3, #0]
 801596a:	4619      	mov	r1, r3
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	3305      	adds	r3, #5
 8015970:	4a2f      	ldr	r2, [pc, #188]	@ (8015a30 <shift_sub_rows+0x130>)
 8015972:	5c52      	ldrb	r2, [r2, r1]
 8015974:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	330d      	adds	r3, #13
 801597a:	781b      	ldrb	r3, [r3, #0]
 801597c:	4619      	mov	r1, r3
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	3309      	adds	r3, #9
 8015982:	4a2b      	ldr	r2, [pc, #172]	@ (8015a30 <shift_sub_rows+0x130>)
 8015984:	5c52      	ldrb	r2, [r2, r1]
 8015986:	701a      	strb	r2, [r3, #0]
 8015988:	7bfa      	ldrb	r2, [r7, #15]
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	330d      	adds	r3, #13
 801598e:	4928      	ldr	r1, [pc, #160]	@ (8015a30 <shift_sub_rows+0x130>)
 8015990:	5c8a      	ldrb	r2, [r1, r2]
 8015992:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	789b      	ldrb	r3, [r3, #2]
 8015998:	73fb      	strb	r3, [r7, #15]
 801599a:	687b      	ldr	r3, [r7, #4]
 801599c:	330a      	adds	r3, #10
 801599e:	781b      	ldrb	r3, [r3, #0]
 80159a0:	4619      	mov	r1, r3
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	3302      	adds	r3, #2
 80159a6:	4a22      	ldr	r2, [pc, #136]	@ (8015a30 <shift_sub_rows+0x130>)
 80159a8:	5c52      	ldrb	r2, [r2, r1]
 80159aa:	701a      	strb	r2, [r3, #0]
 80159ac:	7bfa      	ldrb	r2, [r7, #15]
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	330a      	adds	r3, #10
 80159b2:	491f      	ldr	r1, [pc, #124]	@ (8015a30 <shift_sub_rows+0x130>)
 80159b4:	5c8a      	ldrb	r2, [r1, r2]
 80159b6:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	799b      	ldrb	r3, [r3, #6]
 80159bc:	73fb      	strb	r3, [r7, #15]
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	330e      	adds	r3, #14
 80159c2:	781b      	ldrb	r3, [r3, #0]
 80159c4:	4619      	mov	r1, r3
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	3306      	adds	r3, #6
 80159ca:	4a19      	ldr	r2, [pc, #100]	@ (8015a30 <shift_sub_rows+0x130>)
 80159cc:	5c52      	ldrb	r2, [r2, r1]
 80159ce:	701a      	strb	r2, [r3, #0]
 80159d0:	7bfa      	ldrb	r2, [r7, #15]
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	330e      	adds	r3, #14
 80159d6:	4916      	ldr	r1, [pc, #88]	@ (8015a30 <shift_sub_rows+0x130>)
 80159d8:	5c8a      	ldrb	r2, [r1, r2]
 80159da:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	7bdb      	ldrb	r3, [r3, #15]
 80159e0:	73fb      	strb	r3, [r7, #15]
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	330b      	adds	r3, #11
 80159e6:	781b      	ldrb	r3, [r3, #0]
 80159e8:	4619      	mov	r1, r3
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	330f      	adds	r3, #15
 80159ee:	4a10      	ldr	r2, [pc, #64]	@ (8015a30 <shift_sub_rows+0x130>)
 80159f0:	5c52      	ldrb	r2, [r2, r1]
 80159f2:	701a      	strb	r2, [r3, #0]
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	3307      	adds	r3, #7
 80159f8:	781b      	ldrb	r3, [r3, #0]
 80159fa:	4619      	mov	r1, r3
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	330b      	adds	r3, #11
 8015a00:	4a0b      	ldr	r2, [pc, #44]	@ (8015a30 <shift_sub_rows+0x130>)
 8015a02:	5c52      	ldrb	r2, [r2, r1]
 8015a04:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	3303      	adds	r3, #3
 8015a0a:	781b      	ldrb	r3, [r3, #0]
 8015a0c:	4619      	mov	r1, r3
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	3307      	adds	r3, #7
 8015a12:	4a07      	ldr	r2, [pc, #28]	@ (8015a30 <shift_sub_rows+0x130>)
 8015a14:	5c52      	ldrb	r2, [r2, r1]
 8015a16:	701a      	strb	r2, [r3, #0]
 8015a18:	7bfa      	ldrb	r2, [r7, #15]
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	3303      	adds	r3, #3
 8015a1e:	4904      	ldr	r1, [pc, #16]	@ (8015a30 <shift_sub_rows+0x130>)
 8015a20:	5c8a      	ldrb	r2, [r1, r2]
 8015a22:	701a      	strb	r2, [r3, #0]
}
 8015a24:	bf00      	nop
 8015a26:	3714      	adds	r7, #20
 8015a28:	46bd      	mov	sp, r7
 8015a2a:	bc80      	pop	{r7}
 8015a2c:	4770      	bx	lr
 8015a2e:	bf00      	nop
 8015a30:	08020d64 	.word	0x08020d64

08015a34 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 8015a34:	b580      	push	{r7, lr}
 8015a36:	b086      	sub	sp, #24
 8015a38:	af00      	add	r7, sp, #0
 8015a3a:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 8015a3c:	f107 0308 	add.w	r3, r7, #8
 8015a40:	6879      	ldr	r1, [r7, #4]
 8015a42:	4618      	mov	r0, r3
 8015a44:	f7ff fd6c 	bl	8015520 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8015a48:	7a3b      	ldrb	r3, [r7, #8]
 8015a4a:	461a      	mov	r2, r3
 8015a4c:	4b9a      	ldr	r3, [pc, #616]	@ (8015cb8 <mix_sub_columns+0x284>)
 8015a4e:	5c9a      	ldrb	r2, [r3, r2]
 8015a50:	7b7b      	ldrb	r3, [r7, #13]
 8015a52:	4619      	mov	r1, r3
 8015a54:	4b99      	ldr	r3, [pc, #612]	@ (8015cbc <mix_sub_columns+0x288>)
 8015a56:	5c5b      	ldrb	r3, [r3, r1]
 8015a58:	4053      	eors	r3, r2
 8015a5a:	b2da      	uxtb	r2, r3
 8015a5c:	7cbb      	ldrb	r3, [r7, #18]
 8015a5e:	4619      	mov	r1, r3
 8015a60:	4b97      	ldr	r3, [pc, #604]	@ (8015cc0 <mix_sub_columns+0x28c>)
 8015a62:	5c5b      	ldrb	r3, [r3, r1]
 8015a64:	4053      	eors	r3, r2
 8015a66:	b2da      	uxtb	r2, r3
 8015a68:	7dfb      	ldrb	r3, [r7, #23]
 8015a6a:	4619      	mov	r1, r3
 8015a6c:	4b94      	ldr	r3, [pc, #592]	@ (8015cc0 <mix_sub_columns+0x28c>)
 8015a6e:	5c5b      	ldrb	r3, [r3, r1]
 8015a70:	4053      	eors	r3, r2
 8015a72:	b2da      	uxtb	r2, r3
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8015a78:	7a3b      	ldrb	r3, [r7, #8]
 8015a7a:	461a      	mov	r2, r3
 8015a7c:	4b90      	ldr	r3, [pc, #576]	@ (8015cc0 <mix_sub_columns+0x28c>)
 8015a7e:	5c9a      	ldrb	r2, [r3, r2]
 8015a80:	7b7b      	ldrb	r3, [r7, #13]
 8015a82:	4619      	mov	r1, r3
 8015a84:	4b8c      	ldr	r3, [pc, #560]	@ (8015cb8 <mix_sub_columns+0x284>)
 8015a86:	5c5b      	ldrb	r3, [r3, r1]
 8015a88:	4053      	eors	r3, r2
 8015a8a:	b2da      	uxtb	r2, r3
 8015a8c:	7cbb      	ldrb	r3, [r7, #18]
 8015a8e:	4619      	mov	r1, r3
 8015a90:	4b8a      	ldr	r3, [pc, #552]	@ (8015cbc <mix_sub_columns+0x288>)
 8015a92:	5c5b      	ldrb	r3, [r3, r1]
 8015a94:	4053      	eors	r3, r2
 8015a96:	b2d9      	uxtb	r1, r3
 8015a98:	7dfb      	ldrb	r3, [r7, #23]
 8015a9a:	461a      	mov	r2, r3
 8015a9c:	4b88      	ldr	r3, [pc, #544]	@ (8015cc0 <mix_sub_columns+0x28c>)
 8015a9e:	5c9a      	ldrb	r2, [r3, r2]
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	3301      	adds	r3, #1
 8015aa4:	404a      	eors	r2, r1
 8015aa6:	b2d2      	uxtb	r2, r2
 8015aa8:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8015aaa:	7a3b      	ldrb	r3, [r7, #8]
 8015aac:	461a      	mov	r2, r3
 8015aae:	4b84      	ldr	r3, [pc, #528]	@ (8015cc0 <mix_sub_columns+0x28c>)
 8015ab0:	5c9a      	ldrb	r2, [r3, r2]
 8015ab2:	7b7b      	ldrb	r3, [r7, #13]
 8015ab4:	4619      	mov	r1, r3
 8015ab6:	4b82      	ldr	r3, [pc, #520]	@ (8015cc0 <mix_sub_columns+0x28c>)
 8015ab8:	5c5b      	ldrb	r3, [r3, r1]
 8015aba:	4053      	eors	r3, r2
 8015abc:	b2da      	uxtb	r2, r3
 8015abe:	7cbb      	ldrb	r3, [r7, #18]
 8015ac0:	4619      	mov	r1, r3
 8015ac2:	4b7d      	ldr	r3, [pc, #500]	@ (8015cb8 <mix_sub_columns+0x284>)
 8015ac4:	5c5b      	ldrb	r3, [r3, r1]
 8015ac6:	4053      	eors	r3, r2
 8015ac8:	b2d9      	uxtb	r1, r3
 8015aca:	7dfb      	ldrb	r3, [r7, #23]
 8015acc:	461a      	mov	r2, r3
 8015ace:	4b7b      	ldr	r3, [pc, #492]	@ (8015cbc <mix_sub_columns+0x288>)
 8015ad0:	5c9a      	ldrb	r2, [r3, r2]
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	3302      	adds	r3, #2
 8015ad6:	404a      	eors	r2, r1
 8015ad8:	b2d2      	uxtb	r2, r2
 8015ada:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8015adc:	7a3b      	ldrb	r3, [r7, #8]
 8015ade:	461a      	mov	r2, r3
 8015ae0:	4b76      	ldr	r3, [pc, #472]	@ (8015cbc <mix_sub_columns+0x288>)
 8015ae2:	5c9a      	ldrb	r2, [r3, r2]
 8015ae4:	7b7b      	ldrb	r3, [r7, #13]
 8015ae6:	4619      	mov	r1, r3
 8015ae8:	4b75      	ldr	r3, [pc, #468]	@ (8015cc0 <mix_sub_columns+0x28c>)
 8015aea:	5c5b      	ldrb	r3, [r3, r1]
 8015aec:	4053      	eors	r3, r2
 8015aee:	b2da      	uxtb	r2, r3
 8015af0:	7cbb      	ldrb	r3, [r7, #18]
 8015af2:	4619      	mov	r1, r3
 8015af4:	4b72      	ldr	r3, [pc, #456]	@ (8015cc0 <mix_sub_columns+0x28c>)
 8015af6:	5c5b      	ldrb	r3, [r3, r1]
 8015af8:	4053      	eors	r3, r2
 8015afa:	b2d9      	uxtb	r1, r3
 8015afc:	7dfb      	ldrb	r3, [r7, #23]
 8015afe:	461a      	mov	r2, r3
 8015b00:	4b6d      	ldr	r3, [pc, #436]	@ (8015cb8 <mix_sub_columns+0x284>)
 8015b02:	5c9a      	ldrb	r2, [r3, r2]
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	3303      	adds	r3, #3
 8015b08:	404a      	eors	r2, r1
 8015b0a:	b2d2      	uxtb	r2, r2
 8015b0c:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8015b0e:	7b3b      	ldrb	r3, [r7, #12]
 8015b10:	461a      	mov	r2, r3
 8015b12:	4b69      	ldr	r3, [pc, #420]	@ (8015cb8 <mix_sub_columns+0x284>)
 8015b14:	5c9a      	ldrb	r2, [r3, r2]
 8015b16:	7c7b      	ldrb	r3, [r7, #17]
 8015b18:	4619      	mov	r1, r3
 8015b1a:	4b68      	ldr	r3, [pc, #416]	@ (8015cbc <mix_sub_columns+0x288>)
 8015b1c:	5c5b      	ldrb	r3, [r3, r1]
 8015b1e:	4053      	eors	r3, r2
 8015b20:	b2da      	uxtb	r2, r3
 8015b22:	7dbb      	ldrb	r3, [r7, #22]
 8015b24:	4619      	mov	r1, r3
 8015b26:	4b66      	ldr	r3, [pc, #408]	@ (8015cc0 <mix_sub_columns+0x28c>)
 8015b28:	5c5b      	ldrb	r3, [r3, r1]
 8015b2a:	4053      	eors	r3, r2
 8015b2c:	b2d9      	uxtb	r1, r3
 8015b2e:	7afb      	ldrb	r3, [r7, #11]
 8015b30:	461a      	mov	r2, r3
 8015b32:	4b63      	ldr	r3, [pc, #396]	@ (8015cc0 <mix_sub_columns+0x28c>)
 8015b34:	5c9a      	ldrb	r2, [r3, r2]
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	3304      	adds	r3, #4
 8015b3a:	404a      	eors	r2, r1
 8015b3c:	b2d2      	uxtb	r2, r2
 8015b3e:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8015b40:	7b3b      	ldrb	r3, [r7, #12]
 8015b42:	461a      	mov	r2, r3
 8015b44:	4b5e      	ldr	r3, [pc, #376]	@ (8015cc0 <mix_sub_columns+0x28c>)
 8015b46:	5c9a      	ldrb	r2, [r3, r2]
 8015b48:	7c7b      	ldrb	r3, [r7, #17]
 8015b4a:	4619      	mov	r1, r3
 8015b4c:	4b5a      	ldr	r3, [pc, #360]	@ (8015cb8 <mix_sub_columns+0x284>)
 8015b4e:	5c5b      	ldrb	r3, [r3, r1]
 8015b50:	4053      	eors	r3, r2
 8015b52:	b2da      	uxtb	r2, r3
 8015b54:	7dbb      	ldrb	r3, [r7, #22]
 8015b56:	4619      	mov	r1, r3
 8015b58:	4b58      	ldr	r3, [pc, #352]	@ (8015cbc <mix_sub_columns+0x288>)
 8015b5a:	5c5b      	ldrb	r3, [r3, r1]
 8015b5c:	4053      	eors	r3, r2
 8015b5e:	b2d9      	uxtb	r1, r3
 8015b60:	7afb      	ldrb	r3, [r7, #11]
 8015b62:	461a      	mov	r2, r3
 8015b64:	4b56      	ldr	r3, [pc, #344]	@ (8015cc0 <mix_sub_columns+0x28c>)
 8015b66:	5c9a      	ldrb	r2, [r3, r2]
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	3305      	adds	r3, #5
 8015b6c:	404a      	eors	r2, r1
 8015b6e:	b2d2      	uxtb	r2, r2
 8015b70:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8015b72:	7b3b      	ldrb	r3, [r7, #12]
 8015b74:	461a      	mov	r2, r3
 8015b76:	4b52      	ldr	r3, [pc, #328]	@ (8015cc0 <mix_sub_columns+0x28c>)
 8015b78:	5c9a      	ldrb	r2, [r3, r2]
 8015b7a:	7c7b      	ldrb	r3, [r7, #17]
 8015b7c:	4619      	mov	r1, r3
 8015b7e:	4b50      	ldr	r3, [pc, #320]	@ (8015cc0 <mix_sub_columns+0x28c>)
 8015b80:	5c5b      	ldrb	r3, [r3, r1]
 8015b82:	4053      	eors	r3, r2
 8015b84:	b2da      	uxtb	r2, r3
 8015b86:	7dbb      	ldrb	r3, [r7, #22]
 8015b88:	4619      	mov	r1, r3
 8015b8a:	4b4b      	ldr	r3, [pc, #300]	@ (8015cb8 <mix_sub_columns+0x284>)
 8015b8c:	5c5b      	ldrb	r3, [r3, r1]
 8015b8e:	4053      	eors	r3, r2
 8015b90:	b2d9      	uxtb	r1, r3
 8015b92:	7afb      	ldrb	r3, [r7, #11]
 8015b94:	461a      	mov	r2, r3
 8015b96:	4b49      	ldr	r3, [pc, #292]	@ (8015cbc <mix_sub_columns+0x288>)
 8015b98:	5c9a      	ldrb	r2, [r3, r2]
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	3306      	adds	r3, #6
 8015b9e:	404a      	eors	r2, r1
 8015ba0:	b2d2      	uxtb	r2, r2
 8015ba2:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 8015ba4:	7b3b      	ldrb	r3, [r7, #12]
 8015ba6:	461a      	mov	r2, r3
 8015ba8:	4b44      	ldr	r3, [pc, #272]	@ (8015cbc <mix_sub_columns+0x288>)
 8015baa:	5c9a      	ldrb	r2, [r3, r2]
 8015bac:	7c7b      	ldrb	r3, [r7, #17]
 8015bae:	4619      	mov	r1, r3
 8015bb0:	4b43      	ldr	r3, [pc, #268]	@ (8015cc0 <mix_sub_columns+0x28c>)
 8015bb2:	5c5b      	ldrb	r3, [r3, r1]
 8015bb4:	4053      	eors	r3, r2
 8015bb6:	b2da      	uxtb	r2, r3
 8015bb8:	7dbb      	ldrb	r3, [r7, #22]
 8015bba:	4619      	mov	r1, r3
 8015bbc:	4b40      	ldr	r3, [pc, #256]	@ (8015cc0 <mix_sub_columns+0x28c>)
 8015bbe:	5c5b      	ldrb	r3, [r3, r1]
 8015bc0:	4053      	eors	r3, r2
 8015bc2:	b2d9      	uxtb	r1, r3
 8015bc4:	7afb      	ldrb	r3, [r7, #11]
 8015bc6:	461a      	mov	r2, r3
 8015bc8:	4b3b      	ldr	r3, [pc, #236]	@ (8015cb8 <mix_sub_columns+0x284>)
 8015bca:	5c9a      	ldrb	r2, [r3, r2]
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	3307      	adds	r3, #7
 8015bd0:	404a      	eors	r2, r1
 8015bd2:	b2d2      	uxtb	r2, r2
 8015bd4:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8015bd6:	7c3b      	ldrb	r3, [r7, #16]
 8015bd8:	461a      	mov	r2, r3
 8015bda:	4b37      	ldr	r3, [pc, #220]	@ (8015cb8 <mix_sub_columns+0x284>)
 8015bdc:	5c9a      	ldrb	r2, [r3, r2]
 8015bde:	7d7b      	ldrb	r3, [r7, #21]
 8015be0:	4619      	mov	r1, r3
 8015be2:	4b36      	ldr	r3, [pc, #216]	@ (8015cbc <mix_sub_columns+0x288>)
 8015be4:	5c5b      	ldrb	r3, [r3, r1]
 8015be6:	4053      	eors	r3, r2
 8015be8:	b2da      	uxtb	r2, r3
 8015bea:	7abb      	ldrb	r3, [r7, #10]
 8015bec:	4619      	mov	r1, r3
 8015bee:	4b34      	ldr	r3, [pc, #208]	@ (8015cc0 <mix_sub_columns+0x28c>)
 8015bf0:	5c5b      	ldrb	r3, [r3, r1]
 8015bf2:	4053      	eors	r3, r2
 8015bf4:	b2d9      	uxtb	r1, r3
 8015bf6:	7bfb      	ldrb	r3, [r7, #15]
 8015bf8:	461a      	mov	r2, r3
 8015bfa:	4b31      	ldr	r3, [pc, #196]	@ (8015cc0 <mix_sub_columns+0x28c>)
 8015bfc:	5c9a      	ldrb	r2, [r3, r2]
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	3308      	adds	r3, #8
 8015c02:	404a      	eors	r2, r1
 8015c04:	b2d2      	uxtb	r2, r2
 8015c06:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 8015c08:	7c3b      	ldrb	r3, [r7, #16]
 8015c0a:	461a      	mov	r2, r3
 8015c0c:	4b2c      	ldr	r3, [pc, #176]	@ (8015cc0 <mix_sub_columns+0x28c>)
 8015c0e:	5c9a      	ldrb	r2, [r3, r2]
 8015c10:	7d7b      	ldrb	r3, [r7, #21]
 8015c12:	4619      	mov	r1, r3
 8015c14:	4b28      	ldr	r3, [pc, #160]	@ (8015cb8 <mix_sub_columns+0x284>)
 8015c16:	5c5b      	ldrb	r3, [r3, r1]
 8015c18:	4053      	eors	r3, r2
 8015c1a:	b2da      	uxtb	r2, r3
 8015c1c:	7abb      	ldrb	r3, [r7, #10]
 8015c1e:	4619      	mov	r1, r3
 8015c20:	4b26      	ldr	r3, [pc, #152]	@ (8015cbc <mix_sub_columns+0x288>)
 8015c22:	5c5b      	ldrb	r3, [r3, r1]
 8015c24:	4053      	eors	r3, r2
 8015c26:	b2d9      	uxtb	r1, r3
 8015c28:	7bfb      	ldrb	r3, [r7, #15]
 8015c2a:	461a      	mov	r2, r3
 8015c2c:	4b24      	ldr	r3, [pc, #144]	@ (8015cc0 <mix_sub_columns+0x28c>)
 8015c2e:	5c9a      	ldrb	r2, [r3, r2]
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	3309      	adds	r3, #9
 8015c34:	404a      	eors	r2, r1
 8015c36:	b2d2      	uxtb	r2, r2
 8015c38:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8015c3a:	7c3b      	ldrb	r3, [r7, #16]
 8015c3c:	461a      	mov	r2, r3
 8015c3e:	4b20      	ldr	r3, [pc, #128]	@ (8015cc0 <mix_sub_columns+0x28c>)
 8015c40:	5c9a      	ldrb	r2, [r3, r2]
 8015c42:	7d7b      	ldrb	r3, [r7, #21]
 8015c44:	4619      	mov	r1, r3
 8015c46:	4b1e      	ldr	r3, [pc, #120]	@ (8015cc0 <mix_sub_columns+0x28c>)
 8015c48:	5c5b      	ldrb	r3, [r3, r1]
 8015c4a:	4053      	eors	r3, r2
 8015c4c:	b2da      	uxtb	r2, r3
 8015c4e:	7abb      	ldrb	r3, [r7, #10]
 8015c50:	4619      	mov	r1, r3
 8015c52:	4b19      	ldr	r3, [pc, #100]	@ (8015cb8 <mix_sub_columns+0x284>)
 8015c54:	5c5b      	ldrb	r3, [r3, r1]
 8015c56:	4053      	eors	r3, r2
 8015c58:	b2d9      	uxtb	r1, r3
 8015c5a:	7bfb      	ldrb	r3, [r7, #15]
 8015c5c:	461a      	mov	r2, r3
 8015c5e:	4b17      	ldr	r3, [pc, #92]	@ (8015cbc <mix_sub_columns+0x288>)
 8015c60:	5c9a      	ldrb	r2, [r3, r2]
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	330a      	adds	r3, #10
 8015c66:	404a      	eors	r2, r1
 8015c68:	b2d2      	uxtb	r2, r2
 8015c6a:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 8015c6c:	7c3b      	ldrb	r3, [r7, #16]
 8015c6e:	461a      	mov	r2, r3
 8015c70:	4b12      	ldr	r3, [pc, #72]	@ (8015cbc <mix_sub_columns+0x288>)
 8015c72:	5c9a      	ldrb	r2, [r3, r2]
 8015c74:	7d7b      	ldrb	r3, [r7, #21]
 8015c76:	4619      	mov	r1, r3
 8015c78:	4b11      	ldr	r3, [pc, #68]	@ (8015cc0 <mix_sub_columns+0x28c>)
 8015c7a:	5c5b      	ldrb	r3, [r3, r1]
 8015c7c:	4053      	eors	r3, r2
 8015c7e:	b2da      	uxtb	r2, r3
 8015c80:	7abb      	ldrb	r3, [r7, #10]
 8015c82:	4619      	mov	r1, r3
 8015c84:	4b0e      	ldr	r3, [pc, #56]	@ (8015cc0 <mix_sub_columns+0x28c>)
 8015c86:	5c5b      	ldrb	r3, [r3, r1]
 8015c88:	4053      	eors	r3, r2
 8015c8a:	b2d9      	uxtb	r1, r3
 8015c8c:	7bfb      	ldrb	r3, [r7, #15]
 8015c8e:	461a      	mov	r2, r3
 8015c90:	4b09      	ldr	r3, [pc, #36]	@ (8015cb8 <mix_sub_columns+0x284>)
 8015c92:	5c9a      	ldrb	r2, [r3, r2]
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	330b      	adds	r3, #11
 8015c98:	404a      	eors	r2, r1
 8015c9a:	b2d2      	uxtb	r2, r2
 8015c9c:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 8015c9e:	7d3b      	ldrb	r3, [r7, #20]
 8015ca0:	461a      	mov	r2, r3
 8015ca2:	4b05      	ldr	r3, [pc, #20]	@ (8015cb8 <mix_sub_columns+0x284>)
 8015ca4:	5c9a      	ldrb	r2, [r3, r2]
 8015ca6:	7a7b      	ldrb	r3, [r7, #9]
 8015ca8:	4619      	mov	r1, r3
 8015caa:	4b04      	ldr	r3, [pc, #16]	@ (8015cbc <mix_sub_columns+0x288>)
 8015cac:	5c5b      	ldrb	r3, [r3, r1]
 8015cae:	4053      	eors	r3, r2
 8015cb0:	b2da      	uxtb	r2, r3
 8015cb2:	7bbb      	ldrb	r3, [r7, #14]
 8015cb4:	4619      	mov	r1, r3
 8015cb6:	e005      	b.n	8015cc4 <mix_sub_columns+0x290>
 8015cb8:	08020e64 	.word	0x08020e64
 8015cbc:	08020f64 	.word	0x08020f64
 8015cc0:	08020d64 	.word	0x08020d64
 8015cc4:	4b2d      	ldr	r3, [pc, #180]	@ (8015d7c <mix_sub_columns+0x348>)
 8015cc6:	5c5b      	ldrb	r3, [r3, r1]
 8015cc8:	4053      	eors	r3, r2
 8015cca:	b2d9      	uxtb	r1, r3
 8015ccc:	7cfb      	ldrb	r3, [r7, #19]
 8015cce:	461a      	mov	r2, r3
 8015cd0:	4b2a      	ldr	r3, [pc, #168]	@ (8015d7c <mix_sub_columns+0x348>)
 8015cd2:	5c9a      	ldrb	r2, [r3, r2]
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	330c      	adds	r3, #12
 8015cd8:	404a      	eors	r2, r1
 8015cda:	b2d2      	uxtb	r2, r2
 8015cdc:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 8015cde:	7d3b      	ldrb	r3, [r7, #20]
 8015ce0:	461a      	mov	r2, r3
 8015ce2:	4b26      	ldr	r3, [pc, #152]	@ (8015d7c <mix_sub_columns+0x348>)
 8015ce4:	5c9a      	ldrb	r2, [r3, r2]
 8015ce6:	7a7b      	ldrb	r3, [r7, #9]
 8015ce8:	4619      	mov	r1, r3
 8015cea:	4b25      	ldr	r3, [pc, #148]	@ (8015d80 <mix_sub_columns+0x34c>)
 8015cec:	5c5b      	ldrb	r3, [r3, r1]
 8015cee:	4053      	eors	r3, r2
 8015cf0:	b2da      	uxtb	r2, r3
 8015cf2:	7bbb      	ldrb	r3, [r7, #14]
 8015cf4:	4619      	mov	r1, r3
 8015cf6:	4b23      	ldr	r3, [pc, #140]	@ (8015d84 <mix_sub_columns+0x350>)
 8015cf8:	5c5b      	ldrb	r3, [r3, r1]
 8015cfa:	4053      	eors	r3, r2
 8015cfc:	b2d9      	uxtb	r1, r3
 8015cfe:	7cfb      	ldrb	r3, [r7, #19]
 8015d00:	461a      	mov	r2, r3
 8015d02:	4b1e      	ldr	r3, [pc, #120]	@ (8015d7c <mix_sub_columns+0x348>)
 8015d04:	5c9a      	ldrb	r2, [r3, r2]
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	330d      	adds	r3, #13
 8015d0a:	404a      	eors	r2, r1
 8015d0c:	b2d2      	uxtb	r2, r2
 8015d0e:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8015d10:	7d3b      	ldrb	r3, [r7, #20]
 8015d12:	461a      	mov	r2, r3
 8015d14:	4b19      	ldr	r3, [pc, #100]	@ (8015d7c <mix_sub_columns+0x348>)
 8015d16:	5c9a      	ldrb	r2, [r3, r2]
 8015d18:	7a7b      	ldrb	r3, [r7, #9]
 8015d1a:	4619      	mov	r1, r3
 8015d1c:	4b17      	ldr	r3, [pc, #92]	@ (8015d7c <mix_sub_columns+0x348>)
 8015d1e:	5c5b      	ldrb	r3, [r3, r1]
 8015d20:	4053      	eors	r3, r2
 8015d22:	b2da      	uxtb	r2, r3
 8015d24:	7bbb      	ldrb	r3, [r7, #14]
 8015d26:	4619      	mov	r1, r3
 8015d28:	4b15      	ldr	r3, [pc, #84]	@ (8015d80 <mix_sub_columns+0x34c>)
 8015d2a:	5c5b      	ldrb	r3, [r3, r1]
 8015d2c:	4053      	eors	r3, r2
 8015d2e:	b2d9      	uxtb	r1, r3
 8015d30:	7cfb      	ldrb	r3, [r7, #19]
 8015d32:	461a      	mov	r2, r3
 8015d34:	4b13      	ldr	r3, [pc, #76]	@ (8015d84 <mix_sub_columns+0x350>)
 8015d36:	5c9a      	ldrb	r2, [r3, r2]
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	330e      	adds	r3, #14
 8015d3c:	404a      	eors	r2, r1
 8015d3e:	b2d2      	uxtb	r2, r2
 8015d40:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8015d42:	7d3b      	ldrb	r3, [r7, #20]
 8015d44:	461a      	mov	r2, r3
 8015d46:	4b0f      	ldr	r3, [pc, #60]	@ (8015d84 <mix_sub_columns+0x350>)
 8015d48:	5c9a      	ldrb	r2, [r3, r2]
 8015d4a:	7a7b      	ldrb	r3, [r7, #9]
 8015d4c:	4619      	mov	r1, r3
 8015d4e:	4b0b      	ldr	r3, [pc, #44]	@ (8015d7c <mix_sub_columns+0x348>)
 8015d50:	5c5b      	ldrb	r3, [r3, r1]
 8015d52:	4053      	eors	r3, r2
 8015d54:	b2da      	uxtb	r2, r3
 8015d56:	7bbb      	ldrb	r3, [r7, #14]
 8015d58:	4619      	mov	r1, r3
 8015d5a:	4b08      	ldr	r3, [pc, #32]	@ (8015d7c <mix_sub_columns+0x348>)
 8015d5c:	5c5b      	ldrb	r3, [r3, r1]
 8015d5e:	4053      	eors	r3, r2
 8015d60:	b2d9      	uxtb	r1, r3
 8015d62:	7cfb      	ldrb	r3, [r7, #19]
 8015d64:	461a      	mov	r2, r3
 8015d66:	4b06      	ldr	r3, [pc, #24]	@ (8015d80 <mix_sub_columns+0x34c>)
 8015d68:	5c9a      	ldrb	r2, [r3, r2]
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	330f      	adds	r3, #15
 8015d6e:	404a      	eors	r2, r1
 8015d70:	b2d2      	uxtb	r2, r2
 8015d72:	701a      	strb	r2, [r3, #0]
  }
 8015d74:	bf00      	nop
 8015d76:	3718      	adds	r7, #24
 8015d78:	46bd      	mov	sp, r7
 8015d7a:	bd80      	pop	{r7, pc}
 8015d7c:	08020d64 	.word	0x08020d64
 8015d80:	08020e64 	.word	0x08020e64
 8015d84:	08020f64 	.word	0x08020f64

08015d88 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 8015d88:	b580      	push	{r7, lr}
 8015d8a:	b086      	sub	sp, #24
 8015d8c:	af00      	add	r7, sp, #0
 8015d8e:	60f8      	str	r0, [r7, #12]
 8015d90:	460b      	mov	r3, r1
 8015d92:	607a      	str	r2, [r7, #4]
 8015d94:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 8015d96:	7afb      	ldrb	r3, [r7, #11]
 8015d98:	3b10      	subs	r3, #16
 8015d9a:	2b10      	cmp	r3, #16
 8015d9c:	bf8c      	ite	hi
 8015d9e:	2201      	movhi	r2, #1
 8015da0:	2200      	movls	r2, #0
 8015da2:	b2d2      	uxtb	r2, r2
 8015da4:	2a00      	cmp	r2, #0
 8015da6:	d10b      	bne.n	8015dc0 <lorawan_aes_set_key+0x38>
 8015da8:	4a64      	ldr	r2, [pc, #400]	@ (8015f3c <lorawan_aes_set_key+0x1b4>)
 8015daa:	fa22 f303 	lsr.w	r3, r2, r3
 8015dae:	f003 0301 	and.w	r3, r3, #1
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	bf14      	ite	ne
 8015db6:	2301      	movne	r3, #1
 8015db8:	2300      	moveq	r3, #0
 8015dba:	b2db      	uxtb	r3, r3
 8015dbc:	2b00      	cmp	r3, #0
 8015dbe:	d105      	bne.n	8015dcc <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	2200      	movs	r2, #0
 8015dc4:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
        return ( uint8_t )-1;
 8015dc8:	23ff      	movs	r3, #255	@ 0xff
 8015dca:	e0b3      	b.n	8015f34 <lorawan_aes_set_key+0x1ac>
        break;
 8015dcc:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	7afa      	ldrb	r2, [r7, #11]
 8015dd2:	68f9      	ldr	r1, [r7, #12]
 8015dd4:	4618      	mov	r0, r3
 8015dd6:	f7ff fbfc 	bl	80155d2 <copy_block_nn>
    hi = (keylen + 28) << 2;
 8015dda:	7afb      	ldrb	r3, [r7, #11]
 8015ddc:	331c      	adds	r3, #28
 8015dde:	b2db      	uxtb	r3, r3
 8015de0:	009b      	lsls	r3, r3, #2
 8015de2:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 8015de4:	7c7b      	ldrb	r3, [r7, #17]
 8015de6:	091b      	lsrs	r3, r3, #4
 8015de8:	b2db      	uxtb	r3, r3
 8015dea:	3b01      	subs	r3, #1
 8015dec:	b2da      	uxtb	r2, r3
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8015df4:	7afb      	ldrb	r3, [r7, #11]
 8015df6:	75fb      	strb	r3, [r7, #23]
 8015df8:	2301      	movs	r3, #1
 8015dfa:	75bb      	strb	r3, [r7, #22]
 8015dfc:	e094      	b.n	8015f28 <lorawan_aes_set_key+0x1a0>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 8015dfe:	7dfb      	ldrb	r3, [r7, #23]
 8015e00:	3b04      	subs	r3, #4
 8015e02:	687a      	ldr	r2, [r7, #4]
 8015e04:	5cd3      	ldrb	r3, [r2, r3]
 8015e06:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 8015e08:	7dfb      	ldrb	r3, [r7, #23]
 8015e0a:	3b03      	subs	r3, #3
 8015e0c:	687a      	ldr	r2, [r7, #4]
 8015e0e:	5cd3      	ldrb	r3, [r2, r3]
 8015e10:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 8015e12:	7dfb      	ldrb	r3, [r7, #23]
 8015e14:	3b02      	subs	r3, #2
 8015e16:	687a      	ldr	r2, [r7, #4]
 8015e18:	5cd3      	ldrb	r3, [r2, r3]
 8015e1a:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 8015e1c:	7dfb      	ldrb	r3, [r7, #23]
 8015e1e:	3b01      	subs	r3, #1
 8015e20:	687a      	ldr	r2, [r7, #4]
 8015e22:	5cd3      	ldrb	r3, [r2, r3]
 8015e24:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 8015e26:	7dfb      	ldrb	r3, [r7, #23]
 8015e28:	7afa      	ldrb	r2, [r7, #11]
 8015e2a:	fbb3 f1f2 	udiv	r1, r3, r2
 8015e2e:	fb01 f202 	mul.w	r2, r1, r2
 8015e32:	1a9b      	subs	r3, r3, r2
 8015e34:	b2db      	uxtb	r3, r3
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	d128      	bne.n	8015e8c <lorawan_aes_set_key+0x104>
        {
            tt = t0;
 8015e3a:	7d7b      	ldrb	r3, [r7, #21]
 8015e3c:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 8015e3e:	7d3b      	ldrb	r3, [r7, #20]
 8015e40:	4a3f      	ldr	r2, [pc, #252]	@ (8015f40 <lorawan_aes_set_key+0x1b8>)
 8015e42:	5cd2      	ldrb	r2, [r2, r3]
 8015e44:	7dbb      	ldrb	r3, [r7, #22]
 8015e46:	4053      	eors	r3, r2
 8015e48:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 8015e4a:	7cfb      	ldrb	r3, [r7, #19]
 8015e4c:	4a3c      	ldr	r2, [pc, #240]	@ (8015f40 <lorawan_aes_set_key+0x1b8>)
 8015e4e:	5cd3      	ldrb	r3, [r2, r3]
 8015e50:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 8015e52:	7cbb      	ldrb	r3, [r7, #18]
 8015e54:	4a3a      	ldr	r2, [pc, #232]	@ (8015f40 <lorawan_aes_set_key+0x1b8>)
 8015e56:	5cd3      	ldrb	r3, [r2, r3]
 8015e58:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 8015e5a:	7c3b      	ldrb	r3, [r7, #16]
 8015e5c:	4a38      	ldr	r2, [pc, #224]	@ (8015f40 <lorawan_aes_set_key+0x1b8>)
 8015e5e:	5cd3      	ldrb	r3, [r2, r3]
 8015e60:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 8015e62:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8015e66:	005b      	lsls	r3, r3, #1
 8015e68:	b25a      	sxtb	r2, r3
 8015e6a:	7dbb      	ldrb	r3, [r7, #22]
 8015e6c:	09db      	lsrs	r3, r3, #7
 8015e6e:	b2db      	uxtb	r3, r3
 8015e70:	b25b      	sxtb	r3, r3
 8015e72:	4619      	mov	r1, r3
 8015e74:	0049      	lsls	r1, r1, #1
 8015e76:	440b      	add	r3, r1
 8015e78:	4619      	mov	r1, r3
 8015e7a:	00c8      	lsls	r0, r1, #3
 8015e7c:	4619      	mov	r1, r3
 8015e7e:	4603      	mov	r3, r0
 8015e80:	440b      	add	r3, r1
 8015e82:	b25b      	sxtb	r3, r3
 8015e84:	4053      	eors	r3, r2
 8015e86:	b25b      	sxtb	r3, r3
 8015e88:	75bb      	strb	r3, [r7, #22]
 8015e8a:	e01c      	b.n	8015ec6 <lorawan_aes_set_key+0x13e>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 8015e8c:	7afb      	ldrb	r3, [r7, #11]
 8015e8e:	2b18      	cmp	r3, #24
 8015e90:	d919      	bls.n	8015ec6 <lorawan_aes_set_key+0x13e>
 8015e92:	7dfb      	ldrb	r3, [r7, #23]
 8015e94:	7afa      	ldrb	r2, [r7, #11]
 8015e96:	fbb3 f1f2 	udiv	r1, r3, r2
 8015e9a:	fb01 f202 	mul.w	r2, r1, r2
 8015e9e:	1a9b      	subs	r3, r3, r2
 8015ea0:	b2db      	uxtb	r3, r3
 8015ea2:	2b10      	cmp	r3, #16
 8015ea4:	d10f      	bne.n	8015ec6 <lorawan_aes_set_key+0x13e>
        {
            t0 = s_box(t0);
 8015ea6:	7d7b      	ldrb	r3, [r7, #21]
 8015ea8:	4a25      	ldr	r2, [pc, #148]	@ (8015f40 <lorawan_aes_set_key+0x1b8>)
 8015eaa:	5cd3      	ldrb	r3, [r2, r3]
 8015eac:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 8015eae:	7d3b      	ldrb	r3, [r7, #20]
 8015eb0:	4a23      	ldr	r2, [pc, #140]	@ (8015f40 <lorawan_aes_set_key+0x1b8>)
 8015eb2:	5cd3      	ldrb	r3, [r2, r3]
 8015eb4:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 8015eb6:	7cfb      	ldrb	r3, [r7, #19]
 8015eb8:	4a21      	ldr	r2, [pc, #132]	@ (8015f40 <lorawan_aes_set_key+0x1b8>)
 8015eba:	5cd3      	ldrb	r3, [r2, r3]
 8015ebc:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 8015ebe:	7cbb      	ldrb	r3, [r7, #18]
 8015ec0:	4a1f      	ldr	r2, [pc, #124]	@ (8015f40 <lorawan_aes_set_key+0x1b8>)
 8015ec2:	5cd3      	ldrb	r3, [r2, r3]
 8015ec4:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 8015ec6:	7dfa      	ldrb	r2, [r7, #23]
 8015ec8:	7afb      	ldrb	r3, [r7, #11]
 8015eca:	1ad3      	subs	r3, r2, r3
 8015ecc:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 8015ece:	7c3b      	ldrb	r3, [r7, #16]
 8015ed0:	687a      	ldr	r2, [r7, #4]
 8015ed2:	5cd1      	ldrb	r1, [r2, r3]
 8015ed4:	7dfb      	ldrb	r3, [r7, #23]
 8015ed6:	7d7a      	ldrb	r2, [r7, #21]
 8015ed8:	404a      	eors	r2, r1
 8015eda:	b2d1      	uxtb	r1, r2
 8015edc:	687a      	ldr	r2, [r7, #4]
 8015ede:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8015ee0:	7c3b      	ldrb	r3, [r7, #16]
 8015ee2:	3301      	adds	r3, #1
 8015ee4:	687a      	ldr	r2, [r7, #4]
 8015ee6:	5cd1      	ldrb	r1, [r2, r3]
 8015ee8:	7dfb      	ldrb	r3, [r7, #23]
 8015eea:	3301      	adds	r3, #1
 8015eec:	7d3a      	ldrb	r2, [r7, #20]
 8015eee:	404a      	eors	r2, r1
 8015ef0:	b2d1      	uxtb	r1, r2
 8015ef2:	687a      	ldr	r2, [r7, #4]
 8015ef4:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 8015ef6:	7c3b      	ldrb	r3, [r7, #16]
 8015ef8:	3302      	adds	r3, #2
 8015efa:	687a      	ldr	r2, [r7, #4]
 8015efc:	5cd1      	ldrb	r1, [r2, r3]
 8015efe:	7dfb      	ldrb	r3, [r7, #23]
 8015f00:	3302      	adds	r3, #2
 8015f02:	7cfa      	ldrb	r2, [r7, #19]
 8015f04:	404a      	eors	r2, r1
 8015f06:	b2d1      	uxtb	r1, r2
 8015f08:	687a      	ldr	r2, [r7, #4]
 8015f0a:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8015f0c:	7c3b      	ldrb	r3, [r7, #16]
 8015f0e:	3303      	adds	r3, #3
 8015f10:	687a      	ldr	r2, [r7, #4]
 8015f12:	5cd1      	ldrb	r1, [r2, r3]
 8015f14:	7dfb      	ldrb	r3, [r7, #23]
 8015f16:	3303      	adds	r3, #3
 8015f18:	7cba      	ldrb	r2, [r7, #18]
 8015f1a:	404a      	eors	r2, r1
 8015f1c:	b2d1      	uxtb	r1, r2
 8015f1e:	687a      	ldr	r2, [r7, #4]
 8015f20:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8015f22:	7dfb      	ldrb	r3, [r7, #23]
 8015f24:	3304      	adds	r3, #4
 8015f26:	75fb      	strb	r3, [r7, #23]
 8015f28:	7dfa      	ldrb	r2, [r7, #23]
 8015f2a:	7c7b      	ldrb	r3, [r7, #17]
 8015f2c:	429a      	cmp	r2, r3
 8015f2e:	f4ff af66 	bcc.w	8015dfe <lorawan_aes_set_key+0x76>
    }
    return 0;
 8015f32:	2300      	movs	r3, #0
}
 8015f34:	4618      	mov	r0, r3
 8015f36:	3718      	adds	r7, #24
 8015f38:	46bd      	mov	sp, r7
 8015f3a:	bd80      	pop	{r7, pc}
 8015f3c:	00010101 	.word	0x00010101
 8015f40:	08020d64 	.word	0x08020d64

08015f44 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 8015f44:	b580      	push	{r7, lr}
 8015f46:	b08a      	sub	sp, #40	@ 0x28
 8015f48:	af00      	add	r7, sp, #0
 8015f4a:	60f8      	str	r0, [r7, #12]
 8015f4c:	60b9      	str	r1, [r7, #8]
 8015f4e:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	d038      	beq.n	8015fcc <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 8015f5a:	687a      	ldr	r2, [r7, #4]
 8015f5c:	f107 0314 	add.w	r3, r7, #20
 8015f60:	68f9      	ldr	r1, [r7, #12]
 8015f62:	4618      	mov	r0, r3
 8015f64:	f7ff fc07 	bl	8015776 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 8015f68:	2301      	movs	r3, #1
 8015f6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015f6e:	e014      	b.n	8015f9a <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 8015f70:	f107 0314 	add.w	r3, r7, #20
 8015f74:	4618      	mov	r0, r3
 8015f76:	f7ff fd5d 	bl	8015a34 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8015f80:	0112      	lsls	r2, r2, #4
 8015f82:	441a      	add	r2, r3
 8015f84:	f107 0314 	add.w	r3, r7, #20
 8015f88:	4611      	mov	r1, r2
 8015f8a:	4618      	mov	r0, r3
 8015f8c:	f7ff fcab 	bl	80158e6 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 8015f90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015f94:	3301      	adds	r3, #1
 8015f96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8015fa0:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8015fa4:	429a      	cmp	r2, r3
 8015fa6:	d3e3      	bcc.n	8015f70 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 8015fa8:	f107 0314 	add.w	r3, r7, #20
 8015fac:	4618      	mov	r0, r3
 8015fae:	f7ff fca7 	bl	8015900 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8015fb8:	0112      	lsls	r2, r2, #4
 8015fba:	441a      	add	r2, r3
 8015fbc:	f107 0314 	add.w	r3, r7, #20
 8015fc0:	4619      	mov	r1, r3
 8015fc2:	68b8      	ldr	r0, [r7, #8]
 8015fc4:	f7ff fbd7 	bl	8015776 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 8015fc8:	2300      	movs	r3, #0
 8015fca:	e000      	b.n	8015fce <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 8015fcc:	23ff      	movs	r3, #255	@ 0xff
}
 8015fce:	4618      	mov	r0, r3
 8015fd0:	3728      	adds	r7, #40	@ 0x28
 8015fd2:	46bd      	mov	sp, r7
 8015fd4:	bd80      	pop	{r7, pc}
	...

08015fd8 <PrintKey>:
static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac );

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t keyID )
{
 8015fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015fda:	b0a1      	sub	sp, #132	@ 0x84
 8015fdc:	af12      	add	r7, sp, #72	@ 0x48
 8015fde:	4603      	mov	r3, r0
 8015fe0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
#if (KEY_EXTRACTABLE == 1)
#if (LORAWAN_KMS == 0)
    Key_t *keyItem;
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 8015fe4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8015fe8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8015fec:	4611      	mov	r1, r2
 8015fee:	4618      	mov	r0, r3
 8015ff0:	f000 fa12 	bl	8016418 <SecureElementGetKeyByID>
 8015ff4:	4603      	mov	r3, r0
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	d174      	bne.n	80160e4 <PrintKey+0x10c>
#else
    uint8_t extractable_key[SE_KEY_SIZE] = {0};
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, ( uint8_t * )extractable_key ) )
#endif /* LORAWAN_KMS */
    {
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8015ffa:	2300      	movs	r3, #0
 8015ffc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8016000:	e06c      	b.n	80160dc <PrintKey+0x104>
        {
            if( KeyLabel[i].keyID == keyID )
 8016002:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8016006:	4939      	ldr	r1, [pc, #228]	@ (80160ec <PrintKey+0x114>)
 8016008:	4613      	mov	r3, r2
 801600a:	005b      	lsls	r3, r3, #1
 801600c:	4413      	add	r3, r2
 801600e:	009b      	lsls	r3, r3, #2
 8016010:	440b      	add	r3, r1
 8016012:	781b      	ldrb	r3, [r3, #0]
 8016014:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8016018:	429a      	cmp	r2, r3
 801601a:	d15a      	bne.n	80160d2 <PrintKey+0xfa>
            {
#if (LORAWAN_KMS == 0)
                MW_LOG( TS_OFF, VLEVEL_M,
 801601c:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8016020:	4932      	ldr	r1, [pc, #200]	@ (80160ec <PrintKey+0x114>)
 8016022:	4613      	mov	r3, r2
 8016024:	005b      	lsls	r3, r3, #1
 8016026:	4413      	add	r3, r2
 8016028:	009b      	lsls	r3, r3, #2
 801602a:	440b      	add	r3, r1
 801602c:	3308      	adds	r3, #8
 801602e:	6819      	ldr	r1, [r3, #0]
 8016030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016032:	785b      	ldrb	r3, [r3, #1]
 8016034:	461d      	mov	r5, r3
 8016036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016038:	789b      	ldrb	r3, [r3, #2]
 801603a:	461e      	mov	r6, r3
 801603c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801603e:	78db      	ldrb	r3, [r3, #3]
 8016040:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016044:	791b      	ldrb	r3, [r3, #4]
 8016046:	627b      	str	r3, [r7, #36]	@ 0x24
 8016048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801604a:	795b      	ldrb	r3, [r3, #5]
 801604c:	623b      	str	r3, [r7, #32]
 801604e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016050:	799b      	ldrb	r3, [r3, #6]
 8016052:	61fb      	str	r3, [r7, #28]
 8016054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016056:	79db      	ldrb	r3, [r3, #7]
 8016058:	61bb      	str	r3, [r7, #24]
 801605a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801605c:	7a1b      	ldrb	r3, [r3, #8]
 801605e:	617b      	str	r3, [r7, #20]
 8016060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016062:	7a5b      	ldrb	r3, [r3, #9]
 8016064:	613b      	str	r3, [r7, #16]
 8016066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016068:	7a9b      	ldrb	r3, [r3, #10]
 801606a:	60fb      	str	r3, [r7, #12]
 801606c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801606e:	7adb      	ldrb	r3, [r3, #11]
 8016070:	60bb      	str	r3, [r7, #8]
 8016072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016074:	7b1b      	ldrb	r3, [r3, #12]
 8016076:	607b      	str	r3, [r7, #4]
 8016078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801607a:	7b5b      	ldrb	r3, [r3, #13]
 801607c:	461c      	mov	r4, r3
 801607e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016080:	7b9b      	ldrb	r3, [r3, #14]
 8016082:	4618      	mov	r0, r3
 8016084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016086:	7bdb      	ldrb	r3, [r3, #15]
 8016088:	461a      	mov	r2, r3
 801608a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801608c:	7c1b      	ldrb	r3, [r3, #16]
 801608e:	9310      	str	r3, [sp, #64]	@ 0x40
 8016090:	920f      	str	r2, [sp, #60]	@ 0x3c
 8016092:	900e      	str	r0, [sp, #56]	@ 0x38
 8016094:	940d      	str	r4, [sp, #52]	@ 0x34
 8016096:	687a      	ldr	r2, [r7, #4]
 8016098:	920c      	str	r2, [sp, #48]	@ 0x30
 801609a:	68ba      	ldr	r2, [r7, #8]
 801609c:	920b      	str	r2, [sp, #44]	@ 0x2c
 801609e:	68fa      	ldr	r2, [r7, #12]
 80160a0:	920a      	str	r2, [sp, #40]	@ 0x28
 80160a2:	693a      	ldr	r2, [r7, #16]
 80160a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80160a6:	697a      	ldr	r2, [r7, #20]
 80160a8:	9208      	str	r2, [sp, #32]
 80160aa:	69ba      	ldr	r2, [r7, #24]
 80160ac:	9207      	str	r2, [sp, #28]
 80160ae:	69fa      	ldr	r2, [r7, #28]
 80160b0:	9206      	str	r2, [sp, #24]
 80160b2:	6a3a      	ldr	r2, [r7, #32]
 80160b4:	9205      	str	r2, [sp, #20]
 80160b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80160b8:	9204      	str	r2, [sp, #16]
 80160ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80160bc:	9303      	str	r3, [sp, #12]
 80160be:	9602      	str	r6, [sp, #8]
 80160c0:	9501      	str	r5, [sp, #4]
 80160c2:	9100      	str	r1, [sp, #0]
 80160c4:	4b0a      	ldr	r3, [pc, #40]	@ (80160f0 <PrintKey+0x118>)
 80160c6:	2200      	movs	r2, #0
 80160c8:	2100      	movs	r1, #0
 80160ca:	2002      	movs	r0, #2
 80160cc:	f003 fa26 	bl	801951c <UTIL_ADV_TRACE_COND_FSend>
 80160d0:	e008      	b.n	80160e4 <PrintKey+0x10c>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80160d2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80160d6:	3301      	adds	r3, #1
 80160d8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80160dc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80160e0:	2b0a      	cmp	r3, #10
 80160e2:	d98e      	bls.n	8016002 <PrintKey+0x2a>
                return;
            }
        }
    }
#endif /* KEY_EXTRACTABLE */
}
 80160e4:	373c      	adds	r7, #60	@ 0x3c
 80160e6:	46bd      	mov	sp, r7
 80160e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80160ea:	bf00      	nop
 80160ec:	08021064 	.word	0x08021064
 80160f0:	08020864 	.word	0x08020864

080160f4 <PrintIds>:

static void PrintIds( ActivationType_t mode )
{
 80160f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80160f6:	b091      	sub	sp, #68	@ 0x44
 80160f8:	af08      	add	r7, sp, #32
 80160fa:	4603      	mov	r3, r0
 80160fc:	71fb      	strb	r3, [r7, #7]
    uint8_t joinEui[SE_EUI_SIZE];
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddr = 0;
 80160fe:	2300      	movs	r3, #0
 8016100:	60fb      	str	r3, [r7, #12]

    SecureElementGetDevEui( devEui );
 8016102:	f107 0310 	add.w	r3, r7, #16
 8016106:	4618      	mov	r0, r3
 8016108:	f000 fbd8 	bl	80168bc <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 801610c:	7c3b      	ldrb	r3, [r7, #16]
 801610e:	7c7a      	ldrb	r2, [r7, #17]
 8016110:	7cb9      	ldrb	r1, [r7, #18]
 8016112:	7cf8      	ldrb	r0, [r7, #19]
 8016114:	7d3c      	ldrb	r4, [r7, #20]
 8016116:	7d7d      	ldrb	r5, [r7, #21]
 8016118:	7dbe      	ldrb	r6, [r7, #22]
 801611a:	f897 c017 	ldrb.w	ip, [r7, #23]
 801611e:	f8cd c01c 	str.w	ip, [sp, #28]
 8016122:	9606      	str	r6, [sp, #24]
 8016124:	9505      	str	r5, [sp, #20]
 8016126:	9404      	str	r4, [sp, #16]
 8016128:	9003      	str	r0, [sp, #12]
 801612a:	9102      	str	r1, [sp, #8]
 801612c:	9201      	str	r2, [sp, #4]
 801612e:	9300      	str	r3, [sp, #0]
 8016130:	4b24      	ldr	r3, [pc, #144]	@ (80161c4 <PrintIds+0xd0>)
 8016132:	2200      	movs	r2, #0
 8016134:	2100      	movs	r1, #0
 8016136:	2002      	movs	r0, #2
 8016138:	f003 f9f0 	bl	801951c <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetJoinEui( joinEui );
 801613c:	f107 0318 	add.w	r3, r7, #24
 8016140:	4618      	mov	r0, r3
 8016142:	f000 fc05 	bl	8016950 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 8016146:	7e3b      	ldrb	r3, [r7, #24]
 8016148:	7e7a      	ldrb	r2, [r7, #25]
 801614a:	7eb9      	ldrb	r1, [r7, #26]
 801614c:	7ef8      	ldrb	r0, [r7, #27]
 801614e:	7f3c      	ldrb	r4, [r7, #28]
 8016150:	7f7d      	ldrb	r5, [r7, #29]
 8016152:	7fbe      	ldrb	r6, [r7, #30]
 8016154:	f897 c01f 	ldrb.w	ip, [r7, #31]
 8016158:	f8cd c01c 	str.w	ip, [sp, #28]
 801615c:	9606      	str	r6, [sp, #24]
 801615e:	9505      	str	r5, [sp, #20]
 8016160:	9404      	str	r4, [sp, #16]
 8016162:	9003      	str	r0, [sp, #12]
 8016164:	9102      	str	r1, [sp, #8]
 8016166:	9201      	str	r2, [sp, #4]
 8016168:	9300      	str	r3, [sp, #0]
 801616a:	4b17      	ldr	r3, [pc, #92]	@ (80161c8 <PrintIds+0xd4>)
 801616c:	2200      	movs	r2, #0
 801616e:	2100      	movs	r1, #0
 8016170:	2002      	movs	r0, #2
 8016172:	f003 f9d3 	bl	801951c <UTIL_ADV_TRACE_COND_FSend>

    SecureElementGetDevAddr( mode, &devAddr );
 8016176:	f107 020c 	add.w	r2, r7, #12
 801617a:	79fb      	ldrb	r3, [r7, #7]
 801617c:	4611      	mov	r1, r2
 801617e:	4618      	mov	r0, r3
 8016180:	f000 fbfe 	bl	8016980 <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 8016184:	f107 030c 	add.w	r3, r7, #12
 8016188:	3303      	adds	r3, #3
 801618a:	781b      	ldrb	r3, [r3, #0]
 801618c:	461a      	mov	r2, r3
 801618e:	f107 030c 	add.w	r3, r7, #12
 8016192:	3302      	adds	r3, #2
 8016194:	781b      	ldrb	r3, [r3, #0]
 8016196:	4619      	mov	r1, r3
 8016198:	f107 030c 	add.w	r3, r7, #12
 801619c:	3301      	adds	r3, #1
 801619e:	781b      	ldrb	r3, [r3, #0]
 80161a0:	4618      	mov	r0, r3
 80161a2:	f107 030c 	add.w	r3, r7, #12
 80161a6:	781b      	ldrb	r3, [r3, #0]
 80161a8:	9303      	str	r3, [sp, #12]
 80161aa:	9002      	str	r0, [sp, #8]
 80161ac:	9101      	str	r1, [sp, #4]
 80161ae:	9200      	str	r2, [sp, #0]
 80161b0:	4b06      	ldr	r3, [pc, #24]	@ (80161cc <PrintIds+0xd8>)
 80161b2:	2200      	movs	r2, #0
 80161b4:	2100      	movs	r1, #0
 80161b6:	2002      	movs	r0, #2
 80161b8:	f003 f9b0 	bl	801951c <UTIL_ADV_TRACE_COND_FSend>
            ( unsigned )( ( unsigned char * )( &devAddr ) )[3],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[2],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[1],
            ( unsigned )( ( unsigned char * )( &devAddr ) )[0] );
}
 80161bc:	bf00      	nop
 80161be:	3724      	adds	r7, #36	@ 0x24
 80161c0:	46bd      	mov	sp, r7
 80161c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80161c4:	080208c0 	.word	0x080208c0
 80161c8:	08020900 	.word	0x08020900
 80161cc:	08020940 	.word	0x08020940

080161d0 <GetKeyByID>:

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 80161d0:	b480      	push	{r7}
 80161d2:	b085      	sub	sp, #20
 80161d4:	af00      	add	r7, sp, #0
 80161d6:	4603      	mov	r3, r0
 80161d8:	6039      	str	r1, [r7, #0]
 80161da:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80161dc:	2300      	movs	r3, #0
 80161de:	73fb      	strb	r3, [r7, #15]
 80161e0:	e01a      	b.n	8016218 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 80161e2:	4b12      	ldr	r3, [pc, #72]	@ (801622c <GetKeyByID+0x5c>)
 80161e4:	6819      	ldr	r1, [r3, #0]
 80161e6:	7bfa      	ldrb	r2, [r7, #15]
 80161e8:	4613      	mov	r3, r2
 80161ea:	011b      	lsls	r3, r3, #4
 80161ec:	4413      	add	r3, r2
 80161ee:	440b      	add	r3, r1
 80161f0:	3318      	adds	r3, #24
 80161f2:	781b      	ldrb	r3, [r3, #0]
 80161f4:	79fa      	ldrb	r2, [r7, #7]
 80161f6:	429a      	cmp	r2, r3
 80161f8:	d10b      	bne.n	8016212 <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 80161fa:	4b0c      	ldr	r3, [pc, #48]	@ (801622c <GetKeyByID+0x5c>)
 80161fc:	6819      	ldr	r1, [r3, #0]
 80161fe:	7bfa      	ldrb	r2, [r7, #15]
 8016200:	4613      	mov	r3, r2
 8016202:	011b      	lsls	r3, r3, #4
 8016204:	4413      	add	r3, r2
 8016206:	3318      	adds	r3, #24
 8016208:	18ca      	adds	r2, r1, r3
 801620a:	683b      	ldr	r3, [r7, #0]
 801620c:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 801620e:	2300      	movs	r3, #0
 8016210:	e006      	b.n	8016220 <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8016212:	7bfb      	ldrb	r3, [r7, #15]
 8016214:	3301      	adds	r3, #1
 8016216:	73fb      	strb	r3, [r7, #15]
 8016218:	7bfb      	ldrb	r3, [r7, #15]
 801621a:	2b0a      	cmp	r3, #10
 801621c:	d9e1      	bls.n	80161e2 <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 801621e:	2303      	movs	r3, #3
}
 8016220:	4618      	mov	r0, r3
 8016222:	3714      	adds	r7, #20
 8016224:	46bd      	mov	sp, r7
 8016226:	bc80      	pop	{r7}
 8016228:	4770      	bx	lr
 801622a:	bf00      	nop
 801622c:	20001234 	.word	0x20001234

08016230 <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 8016230:	b590      	push	{r4, r7, lr}
 8016232:	b0d1      	sub	sp, #324	@ 0x144
 8016234:	af00      	add	r7, sp, #0
 8016236:	f507 74a0 	add.w	r4, r7, #320	@ 0x140
 801623a:	f5a4 749a 	sub.w	r4, r4, #308	@ 0x134
 801623e:	6020      	str	r0, [r4, #0]
 8016240:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 8016244:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8016248:	6001      	str	r1, [r0, #0]
 801624a:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 801624e:	f5a1 719e 	sub.w	r1, r1, #316	@ 0x13c
 8016252:	600a      	str	r2, [r1, #0]
 8016254:	461a      	mov	r2, r3
 8016256:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801625a:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 801625e:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 8016260:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8016264:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8016268:	681b      	ldr	r3, [r3, #0]
 801626a:	2b00      	cmp	r3, #0
 801626c:	d003      	beq.n	8016276 <ComputeCmac+0x46>
 801626e:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8016272:	2b00      	cmp	r3, #0
 8016274:	d101      	bne.n	801627a <ComputeCmac+0x4a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8016276:	2302      	movs	r3, #2
 8016278:	e05d      	b.n	8016336 <ComputeCmac+0x106>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 801627a:	f107 0314 	add.w	r3, r7, #20
 801627e:	4618      	mov	r0, r3
 8016280:	f7fe fefe 	bl	8015080 <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 8016284:	f107 0210 	add.w	r2, r7, #16
 8016288:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801628c:	f2a3 133d 	subw	r3, r3, #317	@ 0x13d
 8016290:	781b      	ldrb	r3, [r3, #0]
 8016292:	4611      	mov	r1, r2
 8016294:	4618      	mov	r0, r3
 8016296:	f7ff ff9b 	bl	80161d0 <GetKeyByID>
 801629a:	4603      	mov	r3, r0
 801629c:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 80162a0:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	d144      	bne.n	8016332 <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 80162a8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80162ac:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80162b0:	681b      	ldr	r3, [r3, #0]
 80162b2:	1c5a      	adds	r2, r3, #1
 80162b4:	f107 0314 	add.w	r3, r7, #20
 80162b8:	4611      	mov	r1, r2
 80162ba:	4618      	mov	r0, r3
 80162bc:	f7fe fef9 	bl	80150b2 <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 80162c0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80162c4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80162c8:	681b      	ldr	r3, [r3, #0]
 80162ca:	2b00      	cmp	r3, #0
 80162cc:	d009      	beq.n	80162e2 <ComputeCmac+0xb2>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 80162ce:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80162d2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80162d6:	f107 0014 	add.w	r0, r7, #20
 80162da:	2210      	movs	r2, #16
 80162dc:	6819      	ldr	r1, [r3, #0]
 80162de:	f7fe fef7 	bl	80150d0 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 80162e2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80162e6:	f5a3 729e 	sub.w	r2, r3, #316	@ 0x13c
 80162ea:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80162ee:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80162f2:	f107 0014 	add.w	r0, r7, #20
 80162f6:	6812      	ldr	r2, [r2, #0]
 80162f8:	6819      	ldr	r1, [r3, #0]
 80162fa:	f7fe fee9 	bl	80150d0 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 80162fe:	f107 0214 	add.w	r2, r7, #20
 8016302:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 8016306:	4611      	mov	r1, r2
 8016308:	4618      	mov	r0, r3
 801630a:	f7fe ffa3 	bl	8015254 <AES_CMAC_Final>

        /* Bring into the required format */
        *cmac = GET_UINT32_LE( Cmac, 0 );
 801630e:	f897 312c 	ldrb.w	r3, [r7, #300]	@ 0x12c
 8016312:	461a      	mov	r2, r3
 8016314:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 8016318:	021b      	lsls	r3, r3, #8
 801631a:	431a      	orrs	r2, r3
 801631c:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8016320:	041b      	lsls	r3, r3, #16
 8016322:	431a      	orrs	r2, r3
 8016324:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8016328:	061b      	lsls	r3, r3, #24
 801632a:	431a      	orrs	r2, r3
 801632c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8016330:	601a      	str	r2, [r3, #0]
    if( rv != CKR_OK )
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 8016332:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
}
 8016336:	4618      	mov	r0, r3
 8016338:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 801633c:	46bd      	mov	sp, r7
 801633e:	bd90      	pop	{r4, r7, pc}

08016340 <SecureElementInit>:
/* Exported functions ---------------------------------------------------------*/
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
 8016340:	b580      	push	{r7, lr}
 8016342:	b082      	sub	sp, #8
 8016344:	af00      	add	r7, sp, #0
 8016346:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	2b00      	cmp	r3, #0
 801634c:	d101      	bne.n	8016352 <SecureElementInit+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 801634e:	2302      	movs	r3, #2
 8016350:	e00a      	b.n	8016368 <SecureElementInit+0x28>
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 8016352:	4a07      	ldr	r2, [pc, #28]	@ (8016370 <SecureElementInit+0x30>)
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	6013      	str	r3, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 8016358:	4b05      	ldr	r3, [pc, #20]	@ (8016370 <SecureElementInit+0x30>)
 801635a:	681b      	ldr	r3, [r3, #0]
 801635c:	22d8      	movs	r2, #216	@ 0xd8
 801635e:	4905      	ldr	r1, [pc, #20]	@ (8016374 <SecureElementInit+0x34>)
 8016360:	4618      	mov	r0, r3
 8016362:	f000 fb76 	bl	8016a52 <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 8016366:	2300      	movs	r3, #0
}
 8016368:	4618      	mov	r0, r3
 801636a:	3708      	adds	r7, #8
 801636c:	46bd      	mov	sp, r7
 801636e:	bd80      	pop	{r7, pc}
 8016370:	20001234 	.word	0x20001234
 8016374:	0803e500 	.word	0x0803e500

08016378 <SecureElementInitMcuID>:

SecureElementStatus_t SecureElementInitMcuID( SecureElementGetUniqueId_t seGetUniqueId,
                                              SecureElementGetDevAddr_t seGetDevAddr )
{
 8016378:	b580      	push	{r7, lr}
 801637a:	b086      	sub	sp, #24
 801637c:	af00      	add	r7, sp, #0
 801637e:	6078      	str	r0, [r7, #4]
 8016380:	6039      	str	r1, [r7, #0]
    uint8_t devEui[SE_EUI_SIZE];
    uint32_t devAddrABP = 0;
 8016382:	2300      	movs	r3, #0
 8016384:	60bb      	str	r3, [r7, #8]

    SecureElementGetDevEui( devEui );
 8016386:	f107 030c 	add.w	r3, r7, #12
 801638a:	4618      	mov	r0, r3
 801638c:	f000 fa96 	bl	80168bc <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 8016390:	f107 0308 	add.w	r3, r7, #8
 8016394:	4619      	mov	r1, r3
 8016396:	2001      	movs	r0, #1
 8016398:	f000 faf2 	bl	8016980 <SecureElementGetDevAddr>

    if( seGetUniqueId != NULL )
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	2b00      	cmp	r3, #0
 80163a0:	d024      	beq.n	80163ec <SecureElementInitMcuID+0x74>
    {
        bool id_init = false;
 80163a2:	2300      	movs	r3, #0
 80163a4:	75fb      	strb	r3, [r7, #23]
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 80163a6:	2300      	movs	r3, #0
 80163a8:	75bb      	strb	r3, [r7, #22]
 80163aa:	e00c      	b.n	80163c6 <SecureElementInitMcuID+0x4e>
        {
            if( devEui[index] != 0 )
 80163ac:	7dbb      	ldrb	r3, [r7, #22]
 80163ae:	3318      	adds	r3, #24
 80163b0:	443b      	add	r3, r7
 80163b2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	d002      	beq.n	80163c0 <SecureElementInitMcuID+0x48>
            {
                id_init = true;
 80163ba:	2301      	movs	r3, #1
 80163bc:	75fb      	strb	r3, [r7, #23]
                break;
 80163be:	e005      	b.n	80163cc <SecureElementInitMcuID+0x54>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 80163c0:	7dbb      	ldrb	r3, [r7, #22]
 80163c2:	3301      	adds	r3, #1
 80163c4:	75bb      	strb	r3, [r7, #22]
 80163c6:	7dbb      	ldrb	r3, [r7, #22]
 80163c8:	2b07      	cmp	r3, #7
 80163ca:	d9ef      	bls.n	80163ac <SecureElementInitMcuID+0x34>
            }
        }
        if( id_init == false )
 80163cc:	7dfb      	ldrb	r3, [r7, #23]
 80163ce:	f083 0301 	eor.w	r3, r3, #1
 80163d2:	b2db      	uxtb	r3, r3
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d009      	beq.n	80163ec <SecureElementInitMcuID+0x74>
        {
            /* Get a DevEUI from MCU unique ID */
            seGetUniqueId( devEui );
 80163d8:	f107 020c 	add.w	r2, r7, #12
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	4610      	mov	r0, r2
 80163e0:	4798      	blx	r3
            SecureElementSetDevEui( devEui );
 80163e2:	f107 030c 	add.w	r3, r7, #12
 80163e6:	4618      	mov	r0, r3
 80163e8:	f000 fa50 	bl	801688c <SecureElementSetDevEui>
        }
    }

    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 80163ec:	683b      	ldr	r3, [r7, #0]
 80163ee:	2b00      	cmp	r3, #0
 80163f0:	d00c      	beq.n	801640c <SecureElementInitMcuID+0x94>
 80163f2:	68bb      	ldr	r3, [r7, #8]
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	d109      	bne.n	801640c <SecureElementInitMcuID+0x94>
    {
        /* callback to dynamic DevAddr generation */
        seGetDevAddr( &devAddrABP );
 80163f8:	f107 0208 	add.w	r2, r7, #8
 80163fc:	683b      	ldr	r3, [r7, #0]
 80163fe:	4610      	mov	r0, r2
 8016400:	4798      	blx	r3
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 8016402:	68bb      	ldr	r3, [r7, #8]
 8016404:	4619      	mov	r1, r3
 8016406:	2001      	movs	r0, #1
 8016408:	f000 fa88 	bl	801691c <SecureElementSetDevAddr>
    }

    return SECURE_ELEMENT_SUCCESS;
 801640c:	2300      	movs	r3, #0
}
 801640e:	4618      	mov	r0, r3
 8016410:	3718      	adds	r7, #24
 8016412:	46bd      	mov	sp, r7
 8016414:	bd80      	pop	{r7, pc}
	...

08016418 <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
 8016418:	b480      	push	{r7}
 801641a:	b085      	sub	sp, #20
 801641c:	af00      	add	r7, sp, #0
 801641e:	4603      	mov	r3, r0
 8016420:	6039      	str	r1, [r7, #0]
 8016422:	71fb      	strb	r3, [r7, #7]
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8016424:	2300      	movs	r3, #0
 8016426:	73fb      	strb	r3, [r7, #15]
 8016428:	e01a      	b.n	8016460 <SecureElementGetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 801642a:	4b12      	ldr	r3, [pc, #72]	@ (8016474 <SecureElementGetKeyByID+0x5c>)
 801642c:	6819      	ldr	r1, [r3, #0]
 801642e:	7bfa      	ldrb	r2, [r7, #15]
 8016430:	4613      	mov	r3, r2
 8016432:	011b      	lsls	r3, r3, #4
 8016434:	4413      	add	r3, r2
 8016436:	440b      	add	r3, r1
 8016438:	3318      	adds	r3, #24
 801643a:	781b      	ldrb	r3, [r3, #0]
 801643c:	79fa      	ldrb	r2, [r7, #7]
 801643e:	429a      	cmp	r2, r3
 8016440:	d10b      	bne.n	801645a <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 8016442:	4b0c      	ldr	r3, [pc, #48]	@ (8016474 <SecureElementGetKeyByID+0x5c>)
 8016444:	6819      	ldr	r1, [r3, #0]
 8016446:	7bfa      	ldrb	r2, [r7, #15]
 8016448:	4613      	mov	r3, r2
 801644a:	011b      	lsls	r3, r3, #4
 801644c:	4413      	add	r3, r2
 801644e:	3318      	adds	r3, #24
 8016450:	18ca      	adds	r2, r1, r3
 8016452:	683b      	ldr	r3, [r7, #0]
 8016454:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 8016456:	2300      	movs	r3, #0
 8016458:	e006      	b.n	8016468 <SecureElementGetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 801645a:	7bfb      	ldrb	r3, [r7, #15]
 801645c:	3301      	adds	r3, #1
 801645e:	73fb      	strb	r3, [r7, #15]
 8016460:	7bfb      	ldrb	r3, [r7, #15]
 8016462:	2b0a      	cmp	r3, #10
 8016464:	d9e1      	bls.n	801642a <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8016466:	2303      	movs	r3, #3
}
 8016468:	4618      	mov	r0, r3
 801646a:	3714      	adds	r7, #20
 801646c:	46bd      	mov	sp, r7
 801646e:	bc80      	pop	{r7}
 8016470:	4770      	bx	lr
 8016472:	bf00      	nop
 8016474:	20001234 	.word	0x20001234

08016478 <SecureElementPrintKeys>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAWAN_KMS */

SecureElementStatus_t SecureElementPrintKeys( void )
{
 8016478:	b580      	push	{r7, lr}
 801647a:	af00      	add	r7, sp, #0
    PrintKey( APP_KEY );
 801647c:	2000      	movs	r0, #0
 801647e:	f7ff fdab 	bl	8015fd8 <PrintKey>
    PrintKey( NWK_KEY );
 8016482:	2001      	movs	r0, #1
 8016484:	f7ff fda8 	bl	8015fd8 <PrintKey>
    PrintKey( APP_S_KEY );
 8016488:	2009      	movs	r0, #9
 801648a:	f7ff fda5 	bl	8015fd8 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 801648e:	2008      	movs	r0, #8
 8016490:	f7ff fda2 	bl	8015fd8 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintIds( ACTIVATION_TYPE_NONE );
 8016494:	2000      	movs	r0, #0
 8016496:	f7ff fe2d 	bl	80160f4 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 801649a:	2300      	movs	r3, #0
}
 801649c:	4618      	mov	r0, r3
 801649e:	bd80      	pop	{r7, pc}

080164a0 <SecureElementPrintSessionKeys>:

SecureElementStatus_t SecureElementPrintSessionKeys( ActivationType_t mode )
{
 80164a0:	b580      	push	{r7, lr}
 80164a2:	b082      	sub	sp, #8
 80164a4:	af00      	add	r7, sp, #0
 80164a6:	4603      	mov	r3, r0
 80164a8:	71fb      	strb	r3, [r7, #7]
    PrintKey( MC_ROOT_KEY );
 80164aa:	200b      	movs	r0, #11
 80164ac:	f7ff fd94 	bl	8015fd8 <PrintKey>
    PrintKey( MC_KE_KEY );
 80164b0:	200c      	movs	r0, #12
 80164b2:	f7ff fd91 	bl	8015fd8 <PrintKey>
    PrintKey( APP_S_KEY );
 80164b6:	2009      	movs	r0, #9
 80164b8:	f7ff fd8e 	bl	8015fd8 <PrintKey>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
    PrintKey( F_NWK_S_INT_KEY );
    PrintKey( S_NWK_S_INT_KEY );
    PrintKey( NWK_S_ENC_KEY );
#else
    PrintKey( NWK_S_KEY );
 80164bc:	2008      	movs	r0, #8
 80164be:	f7ff fd8b 	bl	8015fd8 <PrintKey>
#endif /* LORAMAC_VERSION */
    PrintKey( DATABLOCK_INT_KEY );
 80164c2:	200a      	movs	r0, #10
 80164c4:	f7ff fd88 	bl	8015fd8 <PrintKey>
    PrintIds( mode );
 80164c8:	79fb      	ldrb	r3, [r7, #7]
 80164ca:	4618      	mov	r0, r3
 80164cc:	f7ff fe12 	bl	80160f4 <PrintIds>

    return SECURE_ELEMENT_SUCCESS;
 80164d0:	2300      	movs	r3, #0
}
 80164d2:	4618      	mov	r0, r3
 80164d4:	3708      	adds	r7, #8
 80164d6:	46bd      	mov	sp, r7
 80164d8:	bd80      	pop	{r7, pc}
	...

080164dc <SecureElementSetKey>:
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t *key )
{
 80164dc:	b580      	push	{r7, lr}
 80164de:	b088      	sub	sp, #32
 80164e0:	af00      	add	r7, sp, #0
 80164e2:	4603      	mov	r3, r0
 80164e4:	6039      	str	r1, [r7, #0]
 80164e6:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 80164e8:	683b      	ldr	r3, [r7, #0]
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	d101      	bne.n	80164f2 <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80164ee:	2302      	movs	r3, #2
 80164f0:	e04b      	b.n	801658a <SecureElementSetKey+0xae>
    }

#if (LORAWAN_KMS == 0)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 80164f2:	2300      	movs	r3, #0
 80164f4:	77fb      	strb	r3, [r7, #31]
 80164f6:	e044      	b.n	8016582 <SecureElementSetKey+0xa6>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 80164f8:	4b26      	ldr	r3, [pc, #152]	@ (8016594 <SecureElementSetKey+0xb8>)
 80164fa:	6819      	ldr	r1, [r3, #0]
 80164fc:	7ffa      	ldrb	r2, [r7, #31]
 80164fe:	4613      	mov	r3, r2
 8016500:	011b      	lsls	r3, r3, #4
 8016502:	4413      	add	r3, r2
 8016504:	440b      	add	r3, r1
 8016506:	3318      	adds	r3, #24
 8016508:	781b      	ldrb	r3, [r3, #0]
 801650a:	79fa      	ldrb	r2, [r7, #7]
 801650c:	429a      	cmp	r2, r3
 801650e:	d135      	bne.n	801657c <SecureElementSetKey+0xa0>
        {
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if( keyID == MC_KEY_0 )
 8016510:	79fb      	ldrb	r3, [r7, #7]
 8016512:	2b0d      	cmp	r3, #13
 8016514:	d122      	bne.n	801655c <SecureElementSetKey+0x80>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            {
                /* Decrypt the key if its a Mckey */
                SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 8016516:	2306      	movs	r3, #6
 8016518:	77bb      	strb	r3, [r7, #30]
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 801651a:	f107 030c 	add.w	r3, r7, #12
 801651e:	2200      	movs	r2, #0
 8016520:	601a      	str	r2, [r3, #0]
 8016522:	605a      	str	r2, [r3, #4]
 8016524:	609a      	str	r2, [r3, #8]
 8016526:	60da      	str	r2, [r3, #12]

                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 8016528:	f107 030c 	add.w	r3, r7, #12
 801652c:	220c      	movs	r2, #12
 801652e:	2110      	movs	r1, #16
 8016530:	6838      	ldr	r0, [r7, #0]
 8016532:	f000 f877 	bl	8016624 <SecureElementAesEncrypt>
 8016536:	4603      	mov	r3, r0
 8016538:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 801653a:	4b16      	ldr	r3, [pc, #88]	@ (8016594 <SecureElementSetKey+0xb8>)
 801653c:	6819      	ldr	r1, [r3, #0]
 801653e:	7ffa      	ldrb	r2, [r7, #31]
 8016540:	4613      	mov	r3, r2
 8016542:	011b      	lsls	r3, r3, #4
 8016544:	4413      	add	r3, r2
 8016546:	3318      	adds	r3, #24
 8016548:	440b      	add	r3, r1
 801654a:	3301      	adds	r3, #1
 801654c:	f107 010c 	add.w	r1, r7, #12
 8016550:	2210      	movs	r2, #16
 8016552:	4618      	mov	r0, r3
 8016554:	f000 fa7d 	bl	8016a52 <memcpy1>
                return retval;
 8016558:	7fbb      	ldrb	r3, [r7, #30]
 801655a:	e016      	b.n	801658a <SecureElementSetKey+0xae>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 801655c:	4b0d      	ldr	r3, [pc, #52]	@ (8016594 <SecureElementSetKey+0xb8>)
 801655e:	6819      	ldr	r1, [r3, #0]
 8016560:	7ffa      	ldrb	r2, [r7, #31]
 8016562:	4613      	mov	r3, r2
 8016564:	011b      	lsls	r3, r3, #4
 8016566:	4413      	add	r3, r2
 8016568:	3318      	adds	r3, #24
 801656a:	440b      	add	r3, r1
 801656c:	3301      	adds	r3, #1
 801656e:	2210      	movs	r2, #16
 8016570:	6839      	ldr	r1, [r7, #0]
 8016572:	4618      	mov	r0, r3
 8016574:	f000 fa6d 	bl	8016a52 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 8016578:	2300      	movs	r3, #0
 801657a:	e006      	b.n	801658a <SecureElementSetKey+0xae>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 801657c:	7ffb      	ldrb	r3, [r7, #31]
 801657e:	3301      	adds	r3, #1
 8016580:	77fb      	strb	r3, [r7, #31]
 8016582:	7ffb      	ldrb	r3, [r7, #31]
 8016584:	2b0a      	cmp	r3, #10
 8016586:	d9b7      	bls.n	80164f8 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8016588:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 801658a:	4618      	mov	r0, r3
 801658c:	3720      	adds	r7, #32
 801658e:	46bd      	mov	sp, r7
 8016590:	bd80      	pop	{r7, pc}
 8016592:	bf00      	nop
 8016594:	20001234 	.word	0x20001234

08016598 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
 8016598:	b580      	push	{r7, lr}
 801659a:	b086      	sub	sp, #24
 801659c:	af02      	add	r7, sp, #8
 801659e:	60f8      	str	r0, [r7, #12]
 80165a0:	60b9      	str	r1, [r7, #8]
 80165a2:	607a      	str	r2, [r7, #4]
 80165a4:	70fb      	strb	r3, [r7, #3]
    if( keyID >= MC_KE_KEY )
 80165a6:	78fb      	ldrb	r3, [r7, #3]
 80165a8:	2b0b      	cmp	r3, #11
 80165aa:	d901      	bls.n	80165b0 <SecureElementComputeAesCmac+0x18>
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80165ac:	2303      	movs	r3, #3
 80165ae:	e009      	b.n	80165c4 <SecureElementComputeAesCmac+0x2c>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 80165b0:	78fa      	ldrb	r2, [r7, #3]
 80165b2:	69bb      	ldr	r3, [r7, #24]
 80165b4:	9300      	str	r3, [sp, #0]
 80165b6:	4613      	mov	r3, r2
 80165b8:	687a      	ldr	r2, [r7, #4]
 80165ba:	68b9      	ldr	r1, [r7, #8]
 80165bc:	68f8      	ldr	r0, [r7, #12]
 80165be:	f7ff fe37 	bl	8016230 <ComputeCmac>
 80165c2:	4603      	mov	r3, r0
}
 80165c4:	4618      	mov	r0, r3
 80165c6:	3710      	adds	r7, #16
 80165c8:	46bd      	mov	sp, r7
 80165ca:	bd80      	pop	{r7, pc}

080165cc <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 80165cc:	b580      	push	{r7, lr}
 80165ce:	b088      	sub	sp, #32
 80165d0:	af02      	add	r7, sp, #8
 80165d2:	60f8      	str	r0, [r7, #12]
 80165d4:	60b9      	str	r1, [r7, #8]
 80165d6:	607a      	str	r2, [r7, #4]
 80165d8:	70fb      	strb	r3, [r7, #3]
    if( buffer == NULL )
 80165da:	68fb      	ldr	r3, [r7, #12]
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d101      	bne.n	80165e4 <SecureElementVerifyAesCmac+0x18>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80165e0:	2302      	movs	r3, #2
 80165e2:	e01b      	b.n	801661c <SecureElementVerifyAesCmac+0x50>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 80165e4:	2306      	movs	r3, #6
 80165e6:	75fb      	strb	r3, [r7, #23]
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 80165e8:	2300      	movs	r3, #0
 80165ea:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 80165ec:	78fa      	ldrb	r2, [r7, #3]
 80165ee:	f107 0310 	add.w	r3, r7, #16
 80165f2:	9300      	str	r3, [sp, #0]
 80165f4:	4613      	mov	r3, r2
 80165f6:	68ba      	ldr	r2, [r7, #8]
 80165f8:	68f9      	ldr	r1, [r7, #12]
 80165fa:	2000      	movs	r0, #0
 80165fc:	f7ff fe18 	bl	8016230 <ComputeCmac>
 8016600:	4603      	mov	r3, r0
 8016602:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 8016604:	7dfb      	ldrb	r3, [r7, #23]
 8016606:	2b00      	cmp	r3, #0
 8016608:	d001      	beq.n	801660e <SecureElementVerifyAesCmac+0x42>
    {
        return retval;
 801660a:	7dfb      	ldrb	r3, [r7, #23]
 801660c:	e006      	b.n	801661c <SecureElementVerifyAesCmac+0x50>
    }

    if( expectedCmac != compCmac )
 801660e:	693b      	ldr	r3, [r7, #16]
 8016610:	687a      	ldr	r2, [r7, #4]
 8016612:	429a      	cmp	r2, r3
 8016614:	d001      	beq.n	801661a <SecureElementVerifyAesCmac+0x4e>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 8016616:	2301      	movs	r3, #1
 8016618:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 801661a:	7dfb      	ldrb	r3, [r7, #23]
}
 801661c:	4618      	mov	r0, r3
 801661e:	3718      	adds	r7, #24
 8016620:	46bd      	mov	sp, r7
 8016622:	bd80      	pop	{r7, pc}

08016624 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 8016624:	b580      	push	{r7, lr}
 8016626:	b0c2      	sub	sp, #264	@ 0x108
 8016628:	af00      	add	r7, sp, #0
 801662a:	60f8      	str	r0, [r7, #12]
 801662c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8016630:	f5a0 7080 	sub.w	r0, r0, #256	@ 0x100
 8016634:	6001      	str	r1, [r0, #0]
 8016636:	4611      	mov	r1, r2
 8016638:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 801663c:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8016640:	6013      	str	r3, [r2, #0]
 8016642:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8016646:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 801664a:	460a      	mov	r2, r1
 801664c:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 801664e:	68fb      	ldr	r3, [r7, #12]
 8016650:	2b00      	cmp	r3, #0
 8016652:	d006      	beq.n	8016662 <SecureElementAesEncrypt+0x3e>
 8016654:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8016658:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 801665c:	681b      	ldr	r3, [r3, #0]
 801665e:	2b00      	cmp	r3, #0
 8016660:	d101      	bne.n	8016666 <SecureElementAesEncrypt+0x42>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8016662:	2302      	movs	r3, #2
 8016664:	e059      	b.n	801671a <SecureElementAesEncrypt+0xf6>
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 8016666:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801666a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 801666e:	681b      	ldr	r3, [r3, #0]
 8016670:	f003 030f 	and.w	r3, r3, #15
 8016674:	2b00      	cmp	r3, #0
 8016676:	d001      	beq.n	801667c <SecureElementAesEncrypt+0x58>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8016678:	2305      	movs	r3, #5
 801667a:	e04e      	b.n	801671a <SecureElementAesEncrypt+0xf6>
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 801667c:	f107 0314 	add.w	r3, r7, #20
 8016680:	22f0      	movs	r2, #240	@ 0xf0
 8016682:	2100      	movs	r1, #0
 8016684:	4618      	mov	r0, r3
 8016686:	f000 fa1f 	bl	8016ac8 <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 801668a:	f107 0210 	add.w	r2, r7, #16
 801668e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8016692:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8016696:	781b      	ldrb	r3, [r3, #0]
 8016698:	4611      	mov	r1, r2
 801669a:	4618      	mov	r0, r3
 801669c:	f7ff fd98 	bl	80161d0 <GetKeyByID>
 80166a0:	4603      	mov	r3, r0
 80166a2:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 80166a6:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	d133      	bne.n	8016716 <SecureElementAesEncrypt+0xf2>
    {
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 80166ae:	693b      	ldr	r3, [r7, #16]
 80166b0:	3301      	adds	r3, #1
 80166b2:	f107 0214 	add.w	r2, r7, #20
 80166b6:	2110      	movs	r1, #16
 80166b8:	4618      	mov	r0, r3
 80166ba:	f7ff fb65 	bl	8015d88 <lorawan_aes_set_key>

        uint8_t block = 0;
 80166be:	2300      	movs	r3, #0
 80166c0:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107

        while( size != 0 )
 80166c4:	e020      	b.n	8016708 <SecureElementAesEncrypt+0xe4>
        {
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 80166c6:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 80166ca:	68fa      	ldr	r2, [r7, #12]
 80166cc:	18d0      	adds	r0, r2, r3
 80166ce:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 80166d2:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80166d6:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80166da:	6812      	ldr	r2, [r2, #0]
 80166dc:	4413      	add	r3, r2
 80166de:	f107 0214 	add.w	r2, r7, #20
 80166e2:	4619      	mov	r1, r3
 80166e4:	f7ff fc2e 	bl	8015f44 <lorawan_aes_encrypt>
            block = block + 16;
 80166e8:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 80166ec:	3310      	adds	r3, #16
 80166ee:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
            size  = size - 16;
 80166f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80166f6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80166fa:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80166fe:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 8016702:	6812      	ldr	r2, [r2, #0]
 8016704:	3a10      	subs	r2, #16
 8016706:	601a      	str	r2, [r3, #0]
        while( size != 0 )
 8016708:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 801670c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8016710:	681b      	ldr	r3, [r3, #0]
 8016712:	2b00      	cmp	r3, #0
 8016714:	d1d7      	bne.n	80166c6 <SecureElementAesEncrypt+0xa2>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 8016716:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
}
 801671a:	4618      	mov	r0, r3
 801671c:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8016720:	46bd      	mov	sp, r7
 8016722:	bd80      	pop	{r7, pc}

08016724 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 8016724:	b580      	push	{r7, lr}
 8016726:	b088      	sub	sp, #32
 8016728:	af00      	add	r7, sp, #0
 801672a:	6078      	str	r0, [r7, #4]
 801672c:	460b      	mov	r3, r1
 801672e:	70fb      	strb	r3, [r7, #3]
 8016730:	4613      	mov	r3, r2
 8016732:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 8016734:	687b      	ldr	r3, [r7, #4]
 8016736:	2b00      	cmp	r3, #0
 8016738:	d101      	bne.n	801673e <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 801673a:	2302      	movs	r3, #2
 801673c:	e02d      	b.n	801679a <SecureElementDeriveAndStoreKey+0x76>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 801673e:	2306      	movs	r3, #6
 8016740:	77fb      	strb	r3, [r7, #31]

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 8016742:	78bb      	ldrb	r3, [r7, #2]
 8016744:	2b0c      	cmp	r3, #12
 8016746:	d104      	bne.n	8016752 <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 8016748:	78fb      	ldrb	r3, [r7, #3]
 801674a:	2b0b      	cmp	r3, #11
 801674c:	d001      	beq.n	8016752 <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 801674e:	2303      	movs	r3, #3
 8016750:	e023      	b.n	801679a <SecureElementDeriveAndStoreKey+0x76>
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 8016752:	f107 030c 	add.w	r3, r7, #12
 8016756:	2200      	movs	r2, #0
 8016758:	601a      	str	r2, [r3, #0]
 801675a:	605a      	str	r2, [r3, #4]
 801675c:	609a      	str	r2, [r3, #8]
 801675e:	60da      	str	r2, [r3, #12]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 8016760:	f107 030c 	add.w	r3, r7, #12
 8016764:	78fa      	ldrb	r2, [r7, #3]
 8016766:	2110      	movs	r1, #16
 8016768:	6878      	ldr	r0, [r7, #4]
 801676a:	f7ff ff5b 	bl	8016624 <SecureElementAesEncrypt>
 801676e:	4603      	mov	r3, r0
 8016770:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 8016772:	7ffb      	ldrb	r3, [r7, #31]
 8016774:	2b00      	cmp	r3, #0
 8016776:	d001      	beq.n	801677c <SecureElementDeriveAndStoreKey+0x58>
    {
        return retval;
 8016778:	7ffb      	ldrb	r3, [r7, #31]
 801677a:	e00e      	b.n	801679a <SecureElementDeriveAndStoreKey+0x76>
    }

    /* Store key */
    retval = SecureElementSetKey( targetKeyID, key );
 801677c:	f107 020c 	add.w	r2, r7, #12
 8016780:	78bb      	ldrb	r3, [r7, #2]
 8016782:	4611      	mov	r1, r2
 8016784:	4618      	mov	r0, r3
 8016786:	f7ff fea9 	bl	80164dc <SecureElementSetKey>
 801678a:	4603      	mov	r3, r0
 801678c:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 801678e:	7ffb      	ldrb	r3, [r7, #31]
 8016790:	2b00      	cmp	r3, #0
 8016792:	d001      	beq.n	8016798 <SecureElementDeriveAndStoreKey+0x74>
    {
        return retval;
 8016794:	7ffb      	ldrb	r3, [r7, #31]
 8016796:	e000      	b.n	801679a <SecureElementDeriveAndStoreKey+0x76>
    }

    return SECURE_ELEMENT_SUCCESS;
 8016798:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 801679a:	4618      	mov	r0, r3
 801679c:	3720      	adds	r7, #32
 801679e:	46bd      	mov	sp, r7
 80167a0:	bd80      	pop	{r7, pc}

080167a2 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 80167a2:	b580      	push	{r7, lr}
 80167a4:	b086      	sub	sp, #24
 80167a6:	af00      	add	r7, sp, #0
 80167a8:	60b9      	str	r1, [r7, #8]
 80167aa:	607b      	str	r3, [r7, #4]
 80167ac:	4603      	mov	r3, r0
 80167ae:	73fb      	strb	r3, [r7, #15]
 80167b0:	4613      	mov	r3, r2
 80167b2:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	d005      	beq.n	80167c6 <SecureElementProcessJoinAccept+0x24>
 80167ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80167bc:	2b00      	cmp	r3, #0
 80167be:	d002      	beq.n	80167c6 <SecureElementProcessJoinAccept+0x24>
 80167c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80167c2:	2b00      	cmp	r3, #0
 80167c4:	d101      	bne.n	80167ca <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80167c6:	2302      	movs	r3, #2
 80167c8:	e05c      	b.n	8016884 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 80167ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80167ce:	2b21      	cmp	r3, #33	@ 0x21
 80167d0:	d901      	bls.n	80167d6 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 80167d2:	2305      	movs	r3, #5
 80167d4:	e056      	b.n	8016884 <SecureElementProcessJoinAccept+0xe2>
    }

    /* Determine decryption key */
    KeyIdentifier_t encKeyID = NWK_KEY;
 80167d6:	2301      	movs	r3, #1
 80167d8:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 80167da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80167de:	b29b      	uxth	r3, r3
 80167e0:	461a      	mov	r2, r3
 80167e2:	6879      	ldr	r1, [r7, #4]
 80167e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80167e6:	f000 f934 	bl	8016a52 <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	1c58      	adds	r0, r3, #1
 80167ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80167f2:	3b01      	subs	r3, #1
 80167f4:	4619      	mov	r1, r3
 80167f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80167f8:	3301      	adds	r3, #1
 80167fa:	7dfa      	ldrb	r2, [r7, #23]
 80167fc:	f7ff ff12 	bl	8016624 <SecureElementAesEncrypt>
 8016800:	4603      	mov	r3, r0
 8016802:	2b00      	cmp	r3, #0
 8016804:	d001      	beq.n	801680a <SecureElementProcessJoinAccept+0x68>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 8016806:	2307      	movs	r3, #7
 8016808:	e03c      	b.n	8016884 <SecureElementProcessJoinAccept+0xe2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 801680a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801680c:	330b      	adds	r3, #11
 801680e:	781b      	ldrb	r3, [r3, #0]
 8016810:	09db      	lsrs	r3, r3, #7
 8016812:	b2da      	uxtb	r2, r3
 8016814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016816:	701a      	strb	r2, [r3, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 8016818:	f897 3020 	ldrb.w	r3, [r7, #32]
 801681c:	3b04      	subs	r3, #4
 801681e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016820:	4413      	add	r3, r2
 8016822:	781b      	ldrb	r3, [r3, #0]
 8016824:	4619      	mov	r1, r3
 8016826:	f897 3020 	ldrb.w	r3, [r7, #32]
 801682a:	3b03      	subs	r3, #3
 801682c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801682e:	4413      	add	r3, r2
 8016830:	781b      	ldrb	r3, [r3, #0]
 8016832:	021b      	lsls	r3, r3, #8
 8016834:	ea41 0203 	orr.w	r2, r1, r3
 8016838:	f897 3020 	ldrb.w	r3, [r7, #32]
 801683c:	3b02      	subs	r3, #2
 801683e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016840:	440b      	add	r3, r1
 8016842:	781b      	ldrb	r3, [r3, #0]
 8016844:	041b      	lsls	r3, r3, #16
 8016846:	431a      	orrs	r2, r3
 8016848:	f897 3020 	ldrb.w	r3, [r7, #32]
 801684c:	3b01      	subs	r3, #1
 801684e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016850:	440b      	add	r3, r1
 8016852:	781b      	ldrb	r3, [r3, #0]
 8016854:	061b      	lsls	r3, r3, #24
 8016856:	4313      	orrs	r3, r2
 8016858:	613b      	str	r3, [r7, #16]
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 801685a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801685c:	781b      	ldrb	r3, [r3, #0]
 801685e:	2b00      	cmp	r3, #0
 8016860:	d10d      	bne.n	801687e <SecureElementProcessJoinAccept+0xdc>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 8016862:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016866:	3b04      	subs	r3, #4
 8016868:	4619      	mov	r1, r3
 801686a:	2301      	movs	r3, #1
 801686c:	693a      	ldr	r2, [r7, #16]
 801686e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016870:	f7ff feac 	bl	80165cc <SecureElementVerifyAesCmac>
 8016874:	4603      	mov	r3, r0
 8016876:	2b00      	cmp	r3, #0
 8016878:	d003      	beq.n	8016882 <SecureElementProcessJoinAccept+0xe0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 801687a:	2301      	movs	r3, #1
 801687c:	e002      	b.n	8016884 <SecureElementProcessJoinAccept+0xe2>
        }
    }
#endif /* LORAMAC_VERSION */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 801687e:	2304      	movs	r3, #4
 8016880:	e000      	b.n	8016884 <SecureElementProcessJoinAccept+0xe2>
    }

    return SECURE_ELEMENT_SUCCESS;
 8016882:	2300      	movs	r3, #0
}
 8016884:	4618      	mov	r0, r3
 8016886:	3718      	adds	r7, #24
 8016888:	46bd      	mov	sp, r7
 801688a:	bd80      	pop	{r7, pc}

0801688c <SecureElementSetDevEui>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
 801688c:	b580      	push	{r7, lr}
 801688e:	b082      	sub	sp, #8
 8016890:	af00      	add	r7, sp, #0
 8016892:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	2b00      	cmp	r3, #0
 8016898:	d101      	bne.n	801689e <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 801689a:	2302      	movs	r3, #2
 801689c:	e007      	b.n	80168ae <SecureElementSetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 801689e:	4b06      	ldr	r3, [pc, #24]	@ (80168b8 <SecureElementSetDevEui+0x2c>)
 80168a0:	681b      	ldr	r3, [r3, #0]
 80168a2:	2208      	movs	r2, #8
 80168a4:	6879      	ldr	r1, [r7, #4]
 80168a6:	4618      	mov	r0, r3
 80168a8:	f000 f8d3 	bl	8016a52 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 80168ac:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 80168ae:	4618      	mov	r0, r3
 80168b0:	3708      	adds	r7, #8
 80168b2:	46bd      	mov	sp, r7
 80168b4:	bd80      	pop	{r7, pc}
 80168b6:	bf00      	nop
 80168b8:	20001234 	.word	0x20001234

080168bc <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
 80168bc:	b580      	push	{r7, lr}
 80168be:	b082      	sub	sp, #8
 80168c0:	af00      	add	r7, sp, #0
 80168c2:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	2b00      	cmp	r3, #0
 80168c8:	d101      	bne.n	80168ce <SecureElementGetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80168ca:	2302      	movs	r3, #2
 80168cc:	e007      	b.n	80168de <SecureElementGetDevEui+0x22>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 80168ce:	4b06      	ldr	r3, [pc, #24]	@ (80168e8 <SecureElementGetDevEui+0x2c>)
 80168d0:	681b      	ldr	r3, [r3, #0]
 80168d2:	2208      	movs	r2, #8
 80168d4:	4619      	mov	r1, r3
 80168d6:	6878      	ldr	r0, [r7, #4]
 80168d8:	f000 f8bb 	bl	8016a52 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 80168dc:	2300      	movs	r3, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 80168de:	4618      	mov	r0, r3
 80168e0:	3708      	adds	r7, #8
 80168e2:	46bd      	mov	sp, r7
 80168e4:	bd80      	pop	{r7, pc}
 80168e6:	bf00      	nop
 80168e8:	20001234 	.word	0x20001234

080168ec <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
 80168ec:	b580      	push	{r7, lr}
 80168ee:	b082      	sub	sp, #8
 80168f0:	af00      	add	r7, sp, #0
 80168f2:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	2b00      	cmp	r3, #0
 80168f8:	d101      	bne.n	80168fe <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 80168fa:	2302      	movs	r3, #2
 80168fc:	e008      	b.n	8016910 <SecureElementSetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 80168fe:	4b06      	ldr	r3, [pc, #24]	@ (8016918 <SecureElementSetJoinEui+0x2c>)
 8016900:	681b      	ldr	r3, [r3, #0]
 8016902:	3308      	adds	r3, #8
 8016904:	2208      	movs	r2, #8
 8016906:	6879      	ldr	r1, [r7, #4]
 8016908:	4618      	mov	r0, r3
 801690a:	f000 f8a2 	bl	8016a52 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 801690e:	2300      	movs	r3, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8016910:	4618      	mov	r0, r3
 8016912:	3708      	adds	r7, #8
 8016914:	46bd      	mov	sp, r7
 8016916:	bd80      	pop	{r7, pc}
 8016918:	20001234 	.word	0x20001234

0801691c <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
 801691c:	b480      	push	{r7}
 801691e:	b083      	sub	sp, #12
 8016920:	af00      	add	r7, sp, #0
 8016922:	4603      	mov	r3, r0
 8016924:	6039      	str	r1, [r7, #0]
 8016926:	71fb      	strb	r3, [r7, #7]
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 8016928:	79fb      	ldrb	r3, [r7, #7]
 801692a:	2b02      	cmp	r3, #2
 801692c:	d104      	bne.n	8016938 <SecureElementSetDevAddr+0x1c>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 801692e:	4b07      	ldr	r3, [pc, #28]	@ (801694c <SecureElementSetDevAddr+0x30>)
 8016930:	681b      	ldr	r3, [r3, #0]
 8016932:	683a      	ldr	r2, [r7, #0]
 8016934:	611a      	str	r2, [r3, #16]
 8016936:	e003      	b.n	8016940 <SecureElementSetDevAddr+0x24>
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 8016938:	4b04      	ldr	r3, [pc, #16]	@ (801694c <SecureElementSetDevAddr+0x30>)
 801693a:	681b      	ldr	r3, [r3, #0]
 801693c:	683a      	ldr	r2, [r7, #0]
 801693e:	615a      	str	r2, [r3, #20]
    }

    return SECURE_ELEMENT_SUCCESS;
 8016940:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 8016942:	4618      	mov	r0, r3
 8016944:	370c      	adds	r7, #12
 8016946:	46bd      	mov	sp, r7
 8016948:	bc80      	pop	{r7}
 801694a:	4770      	bx	lr
 801694c:	20001234 	.word	0x20001234

08016950 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
 8016950:	b580      	push	{r7, lr}
 8016952:	b082      	sub	sp, #8
 8016954:	af00      	add	r7, sp, #0
 8016956:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	2b00      	cmp	r3, #0
 801695c:	d101      	bne.n	8016962 <SecureElementGetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 801695e:	2302      	movs	r3, #2
 8016960:	e008      	b.n	8016974 <SecureElementGetJoinEui+0x24>
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 8016962:	4b06      	ldr	r3, [pc, #24]	@ (801697c <SecureElementGetJoinEui+0x2c>)
 8016964:	681b      	ldr	r3, [r3, #0]
 8016966:	3308      	adds	r3, #8
 8016968:	2208      	movs	r2, #8
 801696a:	4619      	mov	r1, r3
 801696c:	6878      	ldr	r0, [r7, #4]
 801696e:	f000 f870 	bl	8016a52 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8016972:	2300      	movs	r3, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8016974:	4618      	mov	r0, r3
 8016976:	3708      	adds	r7, #8
 8016978:	46bd      	mov	sp, r7
 801697a:	bd80      	pop	{r7, pc}
 801697c:	20001234 	.word	0x20001234

08016980 <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
 8016980:	b480      	push	{r7}
 8016982:	b083      	sub	sp, #12
 8016984:	af00      	add	r7, sp, #0
 8016986:	4603      	mov	r3, r0
 8016988:	6039      	str	r1, [r7, #0]
 801698a:	71fb      	strb	r3, [r7, #7]
    if( devAddr == NULL )
 801698c:	683b      	ldr	r3, [r7, #0]
 801698e:	2b00      	cmp	r3, #0
 8016990:	d101      	bne.n	8016996 <SecureElementGetDevAddr+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8016992:	2302      	movs	r3, #2
 8016994:	e00e      	b.n	80169b4 <SecureElementGetDevAddr+0x34>
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 8016996:	79fb      	ldrb	r3, [r7, #7]
 8016998:	2b02      	cmp	r3, #2
 801699a:	d105      	bne.n	80169a8 <SecureElementGetDevAddr+0x28>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 801699c:	4b08      	ldr	r3, [pc, #32]	@ (80169c0 <SecureElementGetDevAddr+0x40>)
 801699e:	681b      	ldr	r3, [r3, #0]
 80169a0:	691a      	ldr	r2, [r3, #16]
 80169a2:	683b      	ldr	r3, [r7, #0]
 80169a4:	601a      	str	r2, [r3, #0]
 80169a6:	e004      	b.n	80169b2 <SecureElementGetDevAddr+0x32>
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 80169a8:	4b05      	ldr	r3, [pc, #20]	@ (80169c0 <SecureElementGetDevAddr+0x40>)
 80169aa:	681b      	ldr	r3, [r3, #0]
 80169ac:	695a      	ldr	r2, [r3, #20]
 80169ae:	683b      	ldr	r3, [r7, #0]
 80169b0:	601a      	str	r2, [r3, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 80169b2:	2300      	movs	r3, #0
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 80169b4:	4618      	mov	r0, r3
 80169b6:	370c      	adds	r7, #12
 80169b8:	46bd      	mov	sp, r7
 80169ba:	bc80      	pop	{r7}
 80169bc:	4770      	bx	lr
 80169be:	bf00      	nop
 80169c0:	20001234 	.word	0x20001234

080169c4 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 80169c4:	b480      	push	{r7}
 80169c6:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 80169c8:	4b0d      	ldr	r3, [pc, #52]	@ (8016a00 <rand1+0x3c>)
 80169ca:	681b      	ldr	r3, [r3, #0]
 80169cc:	4a0d      	ldr	r2, [pc, #52]	@ (8016a04 <rand1+0x40>)
 80169ce:	fb02 f303 	mul.w	r3, r2, r3
 80169d2:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80169d6:	3339      	adds	r3, #57	@ 0x39
 80169d8:	4a09      	ldr	r2, [pc, #36]	@ (8016a00 <rand1+0x3c>)
 80169da:	6013      	str	r3, [r2, #0]
 80169dc:	4b08      	ldr	r3, [pc, #32]	@ (8016a00 <rand1+0x3c>)
 80169de:	681a      	ldr	r2, [r3, #0]
 80169e0:	2303      	movs	r3, #3
 80169e2:	fba3 1302 	umull	r1, r3, r3, r2
 80169e6:	1ad1      	subs	r1, r2, r3
 80169e8:	0849      	lsrs	r1, r1, #1
 80169ea:	440b      	add	r3, r1
 80169ec:	0f99      	lsrs	r1, r3, #30
 80169ee:	460b      	mov	r3, r1
 80169f0:	07db      	lsls	r3, r3, #31
 80169f2:	1a5b      	subs	r3, r3, r1
 80169f4:	1ad1      	subs	r1, r2, r3
 80169f6:	460b      	mov	r3, r1
}
 80169f8:	4618      	mov	r0, r3
 80169fa:	46bd      	mov	sp, r7
 80169fc:	bc80      	pop	{r7}
 80169fe:	4770      	bx	lr
 8016a00:	200000d4 	.word	0x200000d4
 8016a04:	41c64e6d 	.word	0x41c64e6d

08016a08 <srand1>:

void srand1( uint32_t seed )
{
 8016a08:	b480      	push	{r7}
 8016a0a:	b083      	sub	sp, #12
 8016a0c:	af00      	add	r7, sp, #0
 8016a0e:	6078      	str	r0, [r7, #4]
    next = seed;
 8016a10:	4a03      	ldr	r2, [pc, #12]	@ (8016a20 <srand1+0x18>)
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	6013      	str	r3, [r2, #0]
}
 8016a16:	bf00      	nop
 8016a18:	370c      	adds	r7, #12
 8016a1a:	46bd      	mov	sp, r7
 8016a1c:	bc80      	pop	{r7}
 8016a1e:	4770      	bx	lr
 8016a20:	200000d4 	.word	0x200000d4

08016a24 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8016a24:	b580      	push	{r7, lr}
 8016a26:	b082      	sub	sp, #8
 8016a28:	af00      	add	r7, sp, #0
 8016a2a:	6078      	str	r0, [r7, #4]
 8016a2c:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8016a2e:	f7ff ffc9 	bl	80169c4 <rand1>
 8016a32:	4602      	mov	r2, r0
 8016a34:	6839      	ldr	r1, [r7, #0]
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	1acb      	subs	r3, r1, r3
 8016a3a:	3301      	adds	r3, #1
 8016a3c:	fb92 f1f3 	sdiv	r1, r2, r3
 8016a40:	fb01 f303 	mul.w	r3, r1, r3
 8016a44:	1ad2      	subs	r2, r2, r3
 8016a46:	687b      	ldr	r3, [r7, #4]
 8016a48:	4413      	add	r3, r2
}
 8016a4a:	4618      	mov	r0, r3
 8016a4c:	3708      	adds	r7, #8
 8016a4e:	46bd      	mov	sp, r7
 8016a50:	bd80      	pop	{r7, pc}

08016a52 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8016a52:	b480      	push	{r7}
 8016a54:	b085      	sub	sp, #20
 8016a56:	af00      	add	r7, sp, #0
 8016a58:	60f8      	str	r0, [r7, #12]
 8016a5a:	60b9      	str	r1, [r7, #8]
 8016a5c:	4613      	mov	r3, r2
 8016a5e:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8016a60:	e007      	b.n	8016a72 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8016a62:	68ba      	ldr	r2, [r7, #8]
 8016a64:	1c53      	adds	r3, r2, #1
 8016a66:	60bb      	str	r3, [r7, #8]
 8016a68:	68fb      	ldr	r3, [r7, #12]
 8016a6a:	1c59      	adds	r1, r3, #1
 8016a6c:	60f9      	str	r1, [r7, #12]
 8016a6e:	7812      	ldrb	r2, [r2, #0]
 8016a70:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8016a72:	88fb      	ldrh	r3, [r7, #6]
 8016a74:	1e5a      	subs	r2, r3, #1
 8016a76:	80fa      	strh	r2, [r7, #6]
 8016a78:	2b00      	cmp	r3, #0
 8016a7a:	d1f2      	bne.n	8016a62 <memcpy1+0x10>
    }
}
 8016a7c:	bf00      	nop
 8016a7e:	bf00      	nop
 8016a80:	3714      	adds	r7, #20
 8016a82:	46bd      	mov	sp, r7
 8016a84:	bc80      	pop	{r7}
 8016a86:	4770      	bx	lr

08016a88 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8016a88:	b480      	push	{r7}
 8016a8a:	b085      	sub	sp, #20
 8016a8c:	af00      	add	r7, sp, #0
 8016a8e:	60f8      	str	r0, [r7, #12]
 8016a90:	60b9      	str	r1, [r7, #8]
 8016a92:	4613      	mov	r3, r2
 8016a94:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 8016a96:	88fb      	ldrh	r3, [r7, #6]
 8016a98:	3b01      	subs	r3, #1
 8016a9a:	68fa      	ldr	r2, [r7, #12]
 8016a9c:	4413      	add	r3, r2
 8016a9e:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8016aa0:	e007      	b.n	8016ab2 <memcpyr+0x2a>
    {
        *dst-- = *src++;
 8016aa2:	68ba      	ldr	r2, [r7, #8]
 8016aa4:	1c53      	adds	r3, r2, #1
 8016aa6:	60bb      	str	r3, [r7, #8]
 8016aa8:	68fb      	ldr	r3, [r7, #12]
 8016aaa:	1e59      	subs	r1, r3, #1
 8016aac:	60f9      	str	r1, [r7, #12]
 8016aae:	7812      	ldrb	r2, [r2, #0]
 8016ab0:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8016ab2:	88fb      	ldrh	r3, [r7, #6]
 8016ab4:	1e5a      	subs	r2, r3, #1
 8016ab6:	80fa      	strh	r2, [r7, #6]
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d1f2      	bne.n	8016aa2 <memcpyr+0x1a>
    }
}
 8016abc:	bf00      	nop
 8016abe:	bf00      	nop
 8016ac0:	3714      	adds	r7, #20
 8016ac2:	46bd      	mov	sp, r7
 8016ac4:	bc80      	pop	{r7}
 8016ac6:	4770      	bx	lr

08016ac8 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8016ac8:	b480      	push	{r7}
 8016aca:	b083      	sub	sp, #12
 8016acc:	af00      	add	r7, sp, #0
 8016ace:	6078      	str	r0, [r7, #4]
 8016ad0:	460b      	mov	r3, r1
 8016ad2:	70fb      	strb	r3, [r7, #3]
 8016ad4:	4613      	mov	r3, r2
 8016ad6:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8016ad8:	e004      	b.n	8016ae4 <memset1+0x1c>
    {
        *dst++ = value;
 8016ada:	687b      	ldr	r3, [r7, #4]
 8016adc:	1c5a      	adds	r2, r3, #1
 8016ade:	607a      	str	r2, [r7, #4]
 8016ae0:	78fa      	ldrb	r2, [r7, #3]
 8016ae2:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8016ae4:	883b      	ldrh	r3, [r7, #0]
 8016ae6:	1e5a      	subs	r2, r3, #1
 8016ae8:	803a      	strh	r2, [r7, #0]
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	d1f5      	bne.n	8016ada <memset1+0x12>
    }
}
 8016aee:	bf00      	nop
 8016af0:	bf00      	nop
 8016af2:	370c      	adds	r7, #12
 8016af4:	46bd      	mov	sp, r7
 8016af6:	bc80      	pop	{r7}
 8016af8:	4770      	bx	lr
	...

08016afc <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8016afc:	b480      	push	{r7}
 8016afe:	b085      	sub	sp, #20
 8016b00:	af00      	add	r7, sp, #0
 8016b02:	6078      	str	r0, [r7, #4]
 8016b04:	460b      	mov	r3, r1
 8016b06:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8016b08:	f04f 33ff 	mov.w	r3, #4294967295
 8016b0c:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	2b00      	cmp	r3, #0
 8016b12:	d101      	bne.n	8016b18 <Crc32+0x1c>
    {
        return 0;
 8016b14:	2300      	movs	r3, #0
 8016b16:	e026      	b.n	8016b66 <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 8016b18:	2300      	movs	r3, #0
 8016b1a:	817b      	strh	r3, [r7, #10]
 8016b1c:	e01d      	b.n	8016b5a <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 8016b1e:	897b      	ldrh	r3, [r7, #10]
 8016b20:	687a      	ldr	r2, [r7, #4]
 8016b22:	4413      	add	r3, r2
 8016b24:	781b      	ldrb	r3, [r3, #0]
 8016b26:	461a      	mov	r2, r3
 8016b28:	68fb      	ldr	r3, [r7, #12]
 8016b2a:	4053      	eors	r3, r2
 8016b2c:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8016b2e:	2300      	movs	r3, #0
 8016b30:	813b      	strh	r3, [r7, #8]
 8016b32:	e00c      	b.n	8016b4e <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8016b34:	68fb      	ldr	r3, [r7, #12]
 8016b36:	085a      	lsrs	r2, r3, #1
 8016b38:	68fb      	ldr	r3, [r7, #12]
 8016b3a:	f003 0301 	and.w	r3, r3, #1
 8016b3e:	425b      	negs	r3, r3
 8016b40:	490b      	ldr	r1, [pc, #44]	@ (8016b70 <Crc32+0x74>)
 8016b42:	400b      	ands	r3, r1
 8016b44:	4053      	eors	r3, r2
 8016b46:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8016b48:	893b      	ldrh	r3, [r7, #8]
 8016b4a:	3301      	adds	r3, #1
 8016b4c:	813b      	strh	r3, [r7, #8]
 8016b4e:	893b      	ldrh	r3, [r7, #8]
 8016b50:	2b07      	cmp	r3, #7
 8016b52:	d9ef      	bls.n	8016b34 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 8016b54:	897b      	ldrh	r3, [r7, #10]
 8016b56:	3301      	adds	r3, #1
 8016b58:	817b      	strh	r3, [r7, #10]
 8016b5a:	897a      	ldrh	r2, [r7, #10]
 8016b5c:	887b      	ldrh	r3, [r7, #2]
 8016b5e:	429a      	cmp	r2, r3
 8016b60:	d3dd      	bcc.n	8016b1e <Crc32+0x22>
        }
    }

    return ~crc;
 8016b62:	68fb      	ldr	r3, [r7, #12]
 8016b64:	43db      	mvns	r3, r3
}
 8016b66:	4618      	mov	r0, r3
 8016b68:	3714      	adds	r7, #20
 8016b6a:	46bd      	mov	sp, r7
 8016b6c:	bc80      	pop	{r7}
 8016b6e:	4770      	bx	lr
 8016b70:	edb88320 	.word	0xedb88320

08016b74 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8016b74:	b480      	push	{r7}
 8016b76:	b083      	sub	sp, #12
 8016b78:	af00      	add	r7, sp, #0
 8016b7a:	6078      	str	r0, [r7, #4]
 8016b7c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8016b7e:	687b      	ldr	r3, [r7, #4]
 8016b80:	683a      	ldr	r2, [r7, #0]
 8016b82:	619a      	str	r2, [r3, #24]
}
 8016b84:	bf00      	nop
 8016b86:	370c      	adds	r7, #12
 8016b88:	46bd      	mov	sp, r7
 8016b8a:	bc80      	pop	{r7}
 8016b8c:	4770      	bx	lr

08016b8e <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8016b8e:	b480      	push	{r7}
 8016b90:	b083      	sub	sp, #12
 8016b92:	af00      	add	r7, sp, #0
 8016b94:	6078      	str	r0, [r7, #4]
 8016b96:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8016b98:	687b      	ldr	r3, [r7, #4]
 8016b9a:	683a      	ldr	r2, [r7, #0]
 8016b9c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8016b9e:	bf00      	nop
 8016ba0:	370c      	adds	r7, #12
 8016ba2:	46bd      	mov	sp, r7
 8016ba4:	bc80      	pop	{r7}
 8016ba6:	4770      	bx	lr

08016ba8 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8016ba8:	b580      	push	{r7, lr}
 8016baa:	b084      	sub	sp, #16
 8016bac:	af02      	add	r7, sp, #8
 8016bae:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8016bb0:	4a24      	ldr	r2, [pc, #144]	@ (8016c44 <RadioInit+0x9c>)
 8016bb2:	687b      	ldr	r3, [r7, #4]
 8016bb4:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8016bb6:	4b24      	ldr	r3, [pc, #144]	@ (8016c48 <RadioInit+0xa0>)
 8016bb8:	2200      	movs	r2, #0
 8016bba:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8016bbc:	4b22      	ldr	r3, [pc, #136]	@ (8016c48 <RadioInit+0xa0>)
 8016bbe:	2200      	movs	r2, #0
 8016bc0:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8016bc2:	4b21      	ldr	r3, [pc, #132]	@ (8016c48 <RadioInit+0xa0>)
 8016bc4:	2200      	movs	r2, #0
 8016bc6:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8016bc8:	4b1f      	ldr	r3, [pc, #124]	@ (8016c48 <RadioInit+0xa0>)
 8016bca:	2200      	movs	r2, #0
 8016bcc:	659a      	str	r2, [r3, #88]	@ 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 8016bce:	481f      	ldr	r0, [pc, #124]	@ (8016c4c <RadioInit+0xa4>)
 8016bd0:	f001 fa38 	bl	8018044 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8016bd4:	4b1c      	ldr	r3, [pc, #112]	@ (8016c48 <RadioInit+0xa0>)
 8016bd6:	2200      	movs	r2, #0
 8016bd8:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8016bda:	4b1b      	ldr	r3, [pc, #108]	@ (8016c48 <RadioInit+0xa0>)
 8016bdc:	2200      	movs	r2, #0
 8016bde:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8016be0:	f001 fcce 	bl	8018580 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8016be4:	2100      	movs	r1, #0
 8016be6:	2000      	movs	r0, #0
 8016be8:	f002 f89a 	bl	8018d20 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8016bec:	2204      	movs	r2, #4
 8016bee:	2100      	movs	r1, #0
 8016bf0:	2001      	movs	r0, #1
 8016bf2:	f001 fe5d 	bl	80188b0 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8016bf6:	2300      	movs	r3, #0
 8016bf8:	2200      	movs	r2, #0
 8016bfa:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8016bfe:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8016c02:	f001 fd8d 	bl	8018720 <SUBGRF_SetDioIrqParams>

    RadioSleep();
 8016c06:	f000 fd4f 	bl	80176a8 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8016c0a:	2300      	movs	r3, #0
 8016c0c:	9300      	str	r3, [sp, #0]
 8016c0e:	4b10      	ldr	r3, [pc, #64]	@ (8016c50 <RadioInit+0xa8>)
 8016c10:	2200      	movs	r2, #0
 8016c12:	f04f 31ff 	mov.w	r1, #4294967295
 8016c16:	480f      	ldr	r0, [pc, #60]	@ (8016c54 <RadioInit+0xac>)
 8016c18:	f003 fab6 	bl	801a188 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8016c1c:	2300      	movs	r3, #0
 8016c1e:	9300      	str	r3, [sp, #0]
 8016c20:	4b0d      	ldr	r3, [pc, #52]	@ (8016c58 <RadioInit+0xb0>)
 8016c22:	2200      	movs	r2, #0
 8016c24:	f04f 31ff 	mov.w	r1, #4294967295
 8016c28:	480c      	ldr	r0, [pc, #48]	@ (8016c5c <RadioInit+0xb4>)
 8016c2a:	f003 faad 	bl	801a188 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8016c2e:	4809      	ldr	r0, [pc, #36]	@ (8016c54 <RadioInit+0xac>)
 8016c30:	f003 fb4e 	bl	801a2d0 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8016c34:	4809      	ldr	r0, [pc, #36]	@ (8016c5c <RadioInit+0xb4>)
 8016c36:	f003 fb4b 	bl	801a2d0 <UTIL_TIMER_Stop>
}
 8016c3a:	bf00      	nop
 8016c3c:	3708      	adds	r7, #8
 8016c3e:	46bd      	mov	sp, r7
 8016c40:	bd80      	pop	{r7, pc}
 8016c42:	bf00      	nop
 8016c44:	20001338 	.word	0x20001338
 8016c48:	2000133c 	.word	0x2000133c
 8016c4c:	08017acd 	.word	0x08017acd
 8016c50:	08017a3d 	.word	0x08017a3d
 8016c54:	20001398 	.word	0x20001398
 8016c58:	08017a51 	.word	0x08017a51
 8016c5c:	200013b0 	.word	0x200013b0

08016c60 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8016c60:	b580      	push	{r7, lr}
 8016c62:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8016c64:	f001 fa36 	bl	80180d4 <SUBGRF_GetOperatingMode>
 8016c68:	4603      	mov	r3, r0
 8016c6a:	2b07      	cmp	r3, #7
 8016c6c:	d00a      	beq.n	8016c84 <RadioGetStatus+0x24>
 8016c6e:	2b07      	cmp	r3, #7
 8016c70:	dc0a      	bgt.n	8016c88 <RadioGetStatus+0x28>
 8016c72:	2b04      	cmp	r3, #4
 8016c74:	d002      	beq.n	8016c7c <RadioGetStatus+0x1c>
 8016c76:	2b05      	cmp	r3, #5
 8016c78:	d002      	beq.n	8016c80 <RadioGetStatus+0x20>
 8016c7a:	e005      	b.n	8016c88 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8016c7c:	2302      	movs	r3, #2
 8016c7e:	e004      	b.n	8016c8a <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8016c80:	2301      	movs	r3, #1
 8016c82:	e002      	b.n	8016c8a <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8016c84:	2303      	movs	r3, #3
 8016c86:	e000      	b.n	8016c8a <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8016c88:	2300      	movs	r3, #0
    }
}
 8016c8a:	4618      	mov	r0, r3
 8016c8c:	bd80      	pop	{r7, pc}
	...

08016c90 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8016c90:	b580      	push	{r7, lr}
 8016c92:	b082      	sub	sp, #8
 8016c94:	af00      	add	r7, sp, #0
 8016c96:	4603      	mov	r3, r0
 8016c98:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8016c9a:	4a1e      	ldr	r2, [pc, #120]	@ (8016d14 <RadioSetModem+0x84>)
 8016c9c:	79fb      	ldrb	r3, [r7, #7]
 8016c9e:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8016ca0:	79fb      	ldrb	r3, [r7, #7]
 8016ca2:	4618      	mov	r0, r3
 8016ca4:	f002 fc02 	bl	80194ac <RFW_SetRadioModem>
    switch( modem )
 8016ca8:	79fb      	ldrb	r3, [r7, #7]
 8016caa:	2b03      	cmp	r3, #3
 8016cac:	d026      	beq.n	8016cfc <RadioSetModem+0x6c>
 8016cae:	2b03      	cmp	r3, #3
 8016cb0:	dc03      	bgt.n	8016cba <RadioSetModem+0x2a>
 8016cb2:	2b00      	cmp	r3, #0
 8016cb4:	d008      	beq.n	8016cc8 <RadioSetModem+0x38>
 8016cb6:	2b01      	cmp	r3, #1
 8016cb8:	d00d      	beq.n	8016cd6 <RadioSetModem+0x46>
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8016cba:	2003      	movs	r0, #3
 8016cbc:	f001 fdd2 	bl	8018864 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016cc0:	4b14      	ldr	r3, [pc, #80]	@ (8016d14 <RadioSetModem+0x84>)
 8016cc2:	2200      	movs	r2, #0
 8016cc4:	735a      	strb	r2, [r3, #13]
        break;
 8016cc6:	e021      	b.n	8016d0c <RadioSetModem+0x7c>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8016cc8:	2000      	movs	r0, #0
 8016cca:	f001 fdcb 	bl	8018864 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016cce:	4b11      	ldr	r3, [pc, #68]	@ (8016d14 <RadioSetModem+0x84>)
 8016cd0:	2200      	movs	r2, #0
 8016cd2:	735a      	strb	r2, [r3, #13]
        break;
 8016cd4:	e01a      	b.n	8016d0c <RadioSetModem+0x7c>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8016cd6:	2001      	movs	r0, #1
 8016cd8:	f001 fdc4 	bl	8018864 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8016cdc:	4b0d      	ldr	r3, [pc, #52]	@ (8016d14 <RadioSetModem+0x84>)
 8016cde:	7b5a      	ldrb	r2, [r3, #13]
 8016ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8016d14 <RadioSetModem+0x84>)
 8016ce2:	7b1b      	ldrb	r3, [r3, #12]
 8016ce4:	429a      	cmp	r2, r3
 8016ce6:	d010      	beq.n	8016d0a <RadioSetModem+0x7a>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8016ce8:	4b0a      	ldr	r3, [pc, #40]	@ (8016d14 <RadioSetModem+0x84>)
 8016cea:	7b1a      	ldrb	r2, [r3, #12]
 8016cec:	4b09      	ldr	r3, [pc, #36]	@ (8016d14 <RadioSetModem+0x84>)
 8016cee:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8016cf0:	4b08      	ldr	r3, [pc, #32]	@ (8016d14 <RadioSetModem+0x84>)
 8016cf2:	7b5b      	ldrb	r3, [r3, #13]
 8016cf4:	4618      	mov	r0, r3
 8016cf6:	f000 fe6b 	bl	80179d0 <RadioSetPublicNetwork>
        }
        break;
 8016cfa:	e006      	b.n	8016d0a <RadioSetModem+0x7a>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8016cfc:	2002      	movs	r0, #2
 8016cfe:	f001 fdb1 	bl	8018864 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016d02:	4b04      	ldr	r3, [pc, #16]	@ (8016d14 <RadioSetModem+0x84>)
 8016d04:	2200      	movs	r2, #0
 8016d06:	735a      	strb	r2, [r3, #13]
        break;
 8016d08:	e000      	b.n	8016d0c <RadioSetModem+0x7c>
        break;
 8016d0a:	bf00      	nop
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
        break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8016d0c:	bf00      	nop
 8016d0e:	3708      	adds	r7, #8
 8016d10:	46bd      	mov	sp, r7
 8016d12:	bd80      	pop	{r7, pc}
 8016d14:	2000133c 	.word	0x2000133c

08016d18 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8016d18:	b580      	push	{r7, lr}
 8016d1a:	b082      	sub	sp, #8
 8016d1c:	af00      	add	r7, sp, #0
 8016d1e:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8016d20:	6878      	ldr	r0, [r7, #4]
 8016d22:	f001 fd59 	bl	80187d8 <SUBGRF_SetRfFrequency>
}
 8016d26:	bf00      	nop
 8016d28:	3708      	adds	r7, #8
 8016d2a:	46bd      	mov	sp, r7
 8016d2c:	bd80      	pop	{r7, pc}

08016d2e <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8016d2e:	b580      	push	{r7, lr}
 8016d30:	b090      	sub	sp, #64	@ 0x40
 8016d32:	af0a      	add	r7, sp, #40	@ 0x28
 8016d34:	60f8      	str	r0, [r7, #12]
 8016d36:	60b9      	str	r1, [r7, #8]
 8016d38:	603b      	str	r3, [r7, #0]
 8016d3a:	4613      	mov	r3, r2
 8016d3c:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8016d3e:	2301      	movs	r3, #1
 8016d40:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8016d42:	2300      	movs	r3, #0
 8016d44:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8016d46:	2300      	movs	r3, #0
 8016d48:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 8016d4a:	f000 fcc0 	bl	80176ce <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8016d4e:	2000      	movs	r0, #0
 8016d50:	f7ff ff9e 	bl	8016c90 <RadioSetModem>

    RadioSetChannel( freq );
 8016d54:	68f8      	ldr	r0, [r7, #12]
 8016d56:	f7ff ffdf 	bl	8016d18 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8016d5a:	2301      	movs	r3, #1
 8016d5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8016d5e:	2300      	movs	r3, #0
 8016d60:	9308      	str	r3, [sp, #32]
 8016d62:	2300      	movs	r3, #0
 8016d64:	9307      	str	r3, [sp, #28]
 8016d66:	2300      	movs	r3, #0
 8016d68:	9306      	str	r3, [sp, #24]
 8016d6a:	2300      	movs	r3, #0
 8016d6c:	9305      	str	r3, [sp, #20]
 8016d6e:	2300      	movs	r3, #0
 8016d70:	9304      	str	r3, [sp, #16]
 8016d72:	2300      	movs	r3, #0
 8016d74:	9303      	str	r3, [sp, #12]
 8016d76:	2300      	movs	r3, #0
 8016d78:	9302      	str	r3, [sp, #8]
 8016d7a:	2303      	movs	r3, #3
 8016d7c:	9301      	str	r3, [sp, #4]
 8016d7e:	68bb      	ldr	r3, [r7, #8]
 8016d80:	9300      	str	r3, [sp, #0]
 8016d82:	2300      	movs	r3, #0
 8016d84:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8016d88:	68b9      	ldr	r1, [r7, #8]
 8016d8a:	2000      	movs	r0, #0
 8016d8c:	f000 f83c 	bl	8016e08 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8016d90:	2000      	movs	r0, #0
 8016d92:	f000 fca3 	bl	80176dc <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8016d96:	f000 fe49 	bl	8017a2c <RadioGetWakeupTime>
 8016d9a:	4603      	mov	r3, r0
 8016d9c:	4618      	mov	r0, r3
 8016d9e:	f7ea fcc1 	bl	8001724 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8016da2:	f003 fb2f 	bl	801a404 <UTIL_TIMER_GetCurrentTime>
 8016da6:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8016da8:	e00d      	b.n	8016dc6 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8016daa:	2000      	movs	r0, #0
 8016dac:	f000 fd90 	bl	80178d0 <RadioRssi>
 8016db0:	4603      	mov	r3, r0
 8016db2:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8016db4:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8016db8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016dbc:	429a      	cmp	r2, r3
 8016dbe:	dd02      	ble.n	8016dc6 <RadioIsChannelFree+0x98>
        {
            status = false;
 8016dc0:	2300      	movs	r3, #0
 8016dc2:	75fb      	strb	r3, [r7, #23]
            break;
 8016dc4:	e006      	b.n	8016dd4 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8016dc6:	6938      	ldr	r0, [r7, #16]
 8016dc8:	f003 fb2e 	bl	801a428 <UTIL_TIMER_GetElapsedTime>
 8016dcc:	4602      	mov	r2, r0
 8016dce:	683b      	ldr	r3, [r7, #0]
 8016dd0:	4293      	cmp	r3, r2
 8016dd2:	d8ea      	bhi.n	8016daa <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 8016dd4:	f000 fc7b 	bl	80176ce <RadioStandby>

    return status;
 8016dd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8016dda:	4618      	mov	r0, r3
 8016ddc:	3718      	adds	r7, #24
 8016dde:	46bd      	mov	sp, r7
 8016de0:	bd80      	pop	{r7, pc}

08016de2 <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8016de2:	b580      	push	{r7, lr}
 8016de4:	b082      	sub	sp, #8
 8016de6:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8016de8:	2300      	movs	r3, #0
 8016dea:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8016dec:	2300      	movs	r3, #0
 8016dee:	2200      	movs	r2, #0
 8016df0:	2100      	movs	r1, #0
 8016df2:	2000      	movs	r0, #0
 8016df4:	f001 fc94 	bl	8018720 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8016df8:	f001 fa3d 	bl	8018276 <SUBGRF_GetRandom>
 8016dfc:	6078      	str	r0, [r7, #4]

    return rnd;
 8016dfe:	687b      	ldr	r3, [r7, #4]
}
 8016e00:	4618      	mov	r0, r3
 8016e02:	3708      	adds	r7, #8
 8016e04:	46bd      	mov	sp, r7
 8016e06:	bd80      	pop	{r7, pc}

08016e08 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8016e08:	b580      	push	{r7, lr}
 8016e0a:	b086      	sub	sp, #24
 8016e0c:	af00      	add	r7, sp, #0
 8016e0e:	60b9      	str	r1, [r7, #8]
 8016e10:	607a      	str	r2, [r7, #4]
 8016e12:	461a      	mov	r2, r3
 8016e14:	4603      	mov	r3, r0
 8016e16:	73fb      	strb	r3, [r7, #15]
 8016e18:	4613      	mov	r3, r2
 8016e1a:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8016e1c:	4a93      	ldr	r2, [pc, #588]	@ (801706c <RadioSetRxConfig+0x264>)
 8016e1e:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8016e22:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 8016e24:	f002 fb00 	bl	8019428 <RFW_DeInit>
    if( rxContinuous == true )
 8016e28:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8016e2c:	2b00      	cmp	r3, #0
 8016e2e:	d001      	beq.n	8016e34 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8016e30:	2300      	movs	r3, #0
 8016e32:	853b      	strh	r3, [r7, #40]	@ 0x28
    }
    if( fixLen == true )
 8016e34:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8016e38:	2b00      	cmp	r3, #0
 8016e3a:	d004      	beq.n	8016e46 <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8016e3c:	4a8c      	ldr	r2, [pc, #560]	@ (8017070 <RadioSetRxConfig+0x268>)
 8016e3e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8016e42:	7013      	strb	r3, [r2, #0]
 8016e44:	e002      	b.n	8016e4c <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8016e46:	4b8a      	ldr	r3, [pc, #552]	@ (8017070 <RadioSetRxConfig+0x268>)
 8016e48:	22ff      	movs	r2, #255	@ 0xff
 8016e4a:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8016e4c:	7bfb      	ldrb	r3, [r7, #15]
 8016e4e:	2b00      	cmp	r3, #0
 8016e50:	d002      	beq.n	8016e58 <RadioSetRxConfig+0x50>
 8016e52:	2b01      	cmp	r3, #1
 8016e54:	d068      	beq.n	8016f28 <RadioSetRxConfig+0x120>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8016e56:	e105      	b.n	8017064 <RadioSetRxConfig+0x25c>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8016e58:	2000      	movs	r0, #0
 8016e5a:	f001 fb53 	bl	8018504 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8016e5e:	4b83      	ldr	r3, [pc, #524]	@ (801706c <RadioSetRxConfig+0x264>)
 8016e60:	2200      	movs	r2, #0
 8016e62:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8016e66:	4a81      	ldr	r2, [pc, #516]	@ (801706c <RadioSetRxConfig+0x264>)
 8016e68:	687b      	ldr	r3, [r7, #4]
 8016e6a:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8016e6c:	4b7f      	ldr	r3, [pc, #508]	@ (801706c <RadioSetRxConfig+0x264>)
 8016e6e:	220b      	movs	r2, #11
 8016e70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8016e74:	68b8      	ldr	r0, [r7, #8]
 8016e76:	f002 fa17 	bl	80192a8 <SUBGRF_GetFskBandwidthRegValue>
 8016e7a:	4603      	mov	r3, r0
 8016e7c:	461a      	mov	r2, r3
 8016e7e:	4b7b      	ldr	r3, [pc, #492]	@ (801706c <RadioSetRxConfig+0x264>)
 8016e80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8016e84:	4b79      	ldr	r3, [pc, #484]	@ (801706c <RadioSetRxConfig+0x264>)
 8016e86:	2200      	movs	r2, #0
 8016e88:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8016e8a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016e8c:	00db      	lsls	r3, r3, #3
 8016e8e:	b29a      	uxth	r2, r3
 8016e90:	4b76      	ldr	r3, [pc, #472]	@ (801706c <RadioSetRxConfig+0x264>)
 8016e92:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8016e94:	4b75      	ldr	r3, [pc, #468]	@ (801706c <RadioSetRxConfig+0x264>)
 8016e96:	2204      	movs	r2, #4
 8016e98:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8016e9a:	4b74      	ldr	r3, [pc, #464]	@ (801706c <RadioSetRxConfig+0x264>)
 8016e9c:	2218      	movs	r2, #24
 8016e9e:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8016ea0:	4b72      	ldr	r3, [pc, #456]	@ (801706c <RadioSetRxConfig+0x264>)
 8016ea2:	2200      	movs	r2, #0
 8016ea4:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8016ea6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8016eaa:	f083 0301 	eor.w	r3, r3, #1
 8016eae:	b2db      	uxtb	r3, r3
 8016eb0:	461a      	mov	r2, r3
 8016eb2:	4b6e      	ldr	r3, [pc, #440]	@ (801706c <RadioSetRxConfig+0x264>)
 8016eb4:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8016eb6:	4b6e      	ldr	r3, [pc, #440]	@ (8017070 <RadioSetRxConfig+0x268>)
 8016eb8:	781a      	ldrb	r2, [r3, #0]
 8016eba:	4b6c      	ldr	r3, [pc, #432]	@ (801706c <RadioSetRxConfig+0x264>)
 8016ebc:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8016ebe:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	d003      	beq.n	8016ece <RadioSetRxConfig+0xc6>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8016ec6:	4b69      	ldr	r3, [pc, #420]	@ (801706c <RadioSetRxConfig+0x264>)
 8016ec8:	22f2      	movs	r2, #242	@ 0xf2
 8016eca:	75da      	strb	r2, [r3, #23]
 8016ecc:	e002      	b.n	8016ed4 <RadioSetRxConfig+0xcc>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8016ece:	4b67      	ldr	r3, [pc, #412]	@ (801706c <RadioSetRxConfig+0x264>)
 8016ed0:	2201      	movs	r2, #1
 8016ed2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8016ed4:	4b65      	ldr	r3, [pc, #404]	@ (801706c <RadioSetRxConfig+0x264>)
 8016ed6:	2201      	movs	r2, #1
 8016ed8:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8016eda:	f000 fbf8 	bl	80176ce <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8016ede:	2000      	movs	r0, #0
 8016ee0:	f7ff fed6 	bl	8016c90 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016ee4:	4863      	ldr	r0, [pc, #396]	@ (8017074 <RadioSetRxConfig+0x26c>)
 8016ee6:	f001 fdb1 	bl	8018a4c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016eea:	4863      	ldr	r0, [pc, #396]	@ (8017078 <RadioSetRxConfig+0x270>)
 8016eec:	f001 fe7c 	bl	8018be8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8016ef0:	4a62      	ldr	r2, [pc, #392]	@ (801707c <RadioSetRxConfig+0x274>)
 8016ef2:	f107 0310 	add.w	r3, r7, #16
 8016ef6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016efa:	e883 0003 	stmia.w	r3, {r0, r1}
 8016efe:	f107 0310 	add.w	r3, r7, #16
 8016f02:	4618      	mov	r0, r3
 8016f04:	f001 f935 	bl	8018172 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8016f08:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8016f0c:	f001 f980 	bl	8018210 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8016f10:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8016f12:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8016f16:	fb02 f303 	mul.w	r3, r2, r3
 8016f1a:	461a      	mov	r2, r3
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8016f22:	4a52      	ldr	r2, [pc, #328]	@ (801706c <RadioSetRxConfig+0x264>)
 8016f24:	6093      	str	r3, [r2, #8]
            break;
 8016f26:	e09d      	b.n	8017064 <RadioSetRxConfig+0x25c>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8016f28:	2000      	movs	r0, #0
 8016f2a:	f001 faeb 	bl	8018504 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8016f2e:	4b4f      	ldr	r3, [pc, #316]	@ (801706c <RadioSetRxConfig+0x264>)
 8016f30:	2201      	movs	r2, #1
 8016f32:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 8016f36:	687b      	ldr	r3, [r7, #4]
 8016f38:	b2da      	uxtb	r2, r3
 8016f3a:	4b4c      	ldr	r3, [pc, #304]	@ (801706c <RadioSetRxConfig+0x264>)
 8016f3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8016f40:	4a4f      	ldr	r2, [pc, #316]	@ (8017080 <RadioSetRxConfig+0x278>)
 8016f42:	68bb      	ldr	r3, [r7, #8]
 8016f44:	4413      	add	r3, r2
 8016f46:	781a      	ldrb	r2, [r3, #0]
 8016f48:	4b48      	ldr	r3, [pc, #288]	@ (801706c <RadioSetRxConfig+0x264>)
 8016f4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 8016f4e:	4a47      	ldr	r2, [pc, #284]	@ (801706c <RadioSetRxConfig+0x264>)
 8016f50:	7bbb      	ldrb	r3, [r7, #14]
 8016f52:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8016f56:	68bb      	ldr	r3, [r7, #8]
 8016f58:	2b00      	cmp	r3, #0
 8016f5a:	d105      	bne.n	8016f68 <RadioSetRxConfig+0x160>
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	2b0b      	cmp	r3, #11
 8016f60:	d008      	beq.n	8016f74 <RadioSetRxConfig+0x16c>
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	2b0c      	cmp	r3, #12
 8016f66:	d005      	beq.n	8016f74 <RadioSetRxConfig+0x16c>
 8016f68:	68bb      	ldr	r3, [r7, #8]
 8016f6a:	2b01      	cmp	r3, #1
 8016f6c:	d107      	bne.n	8016f7e <RadioSetRxConfig+0x176>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8016f6e:	687b      	ldr	r3, [r7, #4]
 8016f70:	2b0c      	cmp	r3, #12
 8016f72:	d104      	bne.n	8016f7e <RadioSetRxConfig+0x176>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8016f74:	4b3d      	ldr	r3, [pc, #244]	@ (801706c <RadioSetRxConfig+0x264>)
 8016f76:	2201      	movs	r2, #1
 8016f78:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8016f7c:	e003      	b.n	8016f86 <RadioSetRxConfig+0x17e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8016f7e:	4b3b      	ldr	r3, [pc, #236]	@ (801706c <RadioSetRxConfig+0x264>)
 8016f80:	2200      	movs	r2, #0
 8016f82:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8016f86:	4b39      	ldr	r3, [pc, #228]	@ (801706c <RadioSetRxConfig+0x264>)
 8016f88:	2201      	movs	r2, #1
 8016f8a:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016f8c:	4b37      	ldr	r3, [pc, #220]	@ (801706c <RadioSetRxConfig+0x264>)
 8016f8e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8016f92:	2b05      	cmp	r3, #5
 8016f94:	d004      	beq.n	8016fa0 <RadioSetRxConfig+0x198>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8016f96:	4b35      	ldr	r3, [pc, #212]	@ (801706c <RadioSetRxConfig+0x264>)
 8016f98:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8016f9c:	2b06      	cmp	r3, #6
 8016f9e:	d10a      	bne.n	8016fb6 <RadioSetRxConfig+0x1ae>
                if( preambleLen < 12 )
 8016fa0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016fa2:	2b0b      	cmp	r3, #11
 8016fa4:	d803      	bhi.n	8016fae <RadioSetRxConfig+0x1a6>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8016fa6:	4b31      	ldr	r3, [pc, #196]	@ (801706c <RadioSetRxConfig+0x264>)
 8016fa8:	220c      	movs	r2, #12
 8016faa:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8016fac:	e006      	b.n	8016fbc <RadioSetRxConfig+0x1b4>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016fae:	4a2f      	ldr	r2, [pc, #188]	@ (801706c <RadioSetRxConfig+0x264>)
 8016fb0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016fb2:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8016fb4:	e002      	b.n	8016fbc <RadioSetRxConfig+0x1b4>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8016fb6:	4a2d      	ldr	r2, [pc, #180]	@ (801706c <RadioSetRxConfig+0x264>)
 8016fb8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016fba:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8016fbc:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8016fc0:	4b2a      	ldr	r3, [pc, #168]	@ (801706c <RadioSetRxConfig+0x264>)
 8016fc2:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8016fc4:	4b2a      	ldr	r3, [pc, #168]	@ (8017070 <RadioSetRxConfig+0x268>)
 8016fc6:	781a      	ldrb	r2, [r3, #0]
 8016fc8:	4b28      	ldr	r3, [pc, #160]	@ (801706c <RadioSetRxConfig+0x264>)
 8016fca:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8016fcc:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 8016fd0:	4b26      	ldr	r3, [pc, #152]	@ (801706c <RadioSetRxConfig+0x264>)
 8016fd2:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8016fd6:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8016fda:	4b24      	ldr	r3, [pc, #144]	@ (801706c <RadioSetRxConfig+0x264>)
 8016fdc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 8016fe0:	f000 fb75 	bl	80176ce <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8016fe4:	2001      	movs	r0, #1
 8016fe6:	f7ff fe53 	bl	8016c90 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016fea:	4822      	ldr	r0, [pc, #136]	@ (8017074 <RadioSetRxConfig+0x26c>)
 8016fec:	f001 fd2e 	bl	8018a4c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016ff0:	4821      	ldr	r0, [pc, #132]	@ (8017078 <RadioSetRxConfig+0x270>)
 8016ff2:	f001 fdf9 	bl	8018be8 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8016ff6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8016ff8:	b2db      	uxtb	r3, r3
 8016ffa:	4618      	mov	r0, r3
 8016ffc:	f001 fa91 	bl	8018522 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 8017000:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 8017004:	f001 ff4a 	bl	8018e9c <SUBGRF_ReadRegister>
 8017008:	4603      	mov	r3, r0
 801700a:	f003 0301 	and.w	r3, r3, #1
 801700e:	b2db      	uxtb	r3, r3
 8017010:	4619      	mov	r1, r3
 8017012:	f640 00a3 	movw	r0, #2211	@ 0x8a3
 8017016:	f001 ff2d 	bl	8018e74 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801701a:	4b14      	ldr	r3, [pc, #80]	@ (801706c <RadioSetRxConfig+0x264>)
 801701c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8017020:	2b01      	cmp	r3, #1
 8017022:	d10d      	bne.n	8017040 <RadioSetRxConfig+0x238>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8017024:	f240 7036 	movw	r0, #1846	@ 0x736
 8017028:	f001 ff38 	bl	8018e9c <SUBGRF_ReadRegister>
 801702c:	4603      	mov	r3, r0
 801702e:	f023 0304 	bic.w	r3, r3, #4
 8017032:	b2db      	uxtb	r3, r3
 8017034:	4619      	mov	r1, r3
 8017036:	f240 7036 	movw	r0, #1846	@ 0x736
 801703a:	f001 ff1b 	bl	8018e74 <SUBGRF_WriteRegister>
 801703e:	e00c      	b.n	801705a <RadioSetRxConfig+0x252>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8017040:	f240 7036 	movw	r0, #1846	@ 0x736
 8017044:	f001 ff2a 	bl	8018e9c <SUBGRF_ReadRegister>
 8017048:	4603      	mov	r3, r0
 801704a:	f043 0304 	orr.w	r3, r3, #4
 801704e:	b2db      	uxtb	r3, r3
 8017050:	4619      	mov	r1, r3
 8017052:	f240 7036 	movw	r0, #1846	@ 0x736
 8017056:	f001 ff0d 	bl	8018e74 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 801705a:	4b04      	ldr	r3, [pc, #16]	@ (801706c <RadioSetRxConfig+0x264>)
 801705c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017060:	609a      	str	r2, [r3, #8]
            break;
 8017062:	bf00      	nop
    }
}
 8017064:	bf00      	nop
 8017066:	3718      	adds	r7, #24
 8017068:	46bd      	mov	sp, r7
 801706a:	bd80      	pop	{r7, pc}
 801706c:	2000133c 	.word	0x2000133c
 8017070:	200000d8 	.word	0x200000d8
 8017074:	20001374 	.word	0x20001374
 8017078:	2000134a 	.word	0x2000134a
 801707c:	0802096c 	.word	0x0802096c
 8017080:	08021174 	.word	0x08021174

08017084 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8017084:	b580      	push	{r7, lr}
 8017086:	b086      	sub	sp, #24
 8017088:	af00      	add	r7, sp, #0
 801708a:	60ba      	str	r2, [r7, #8]
 801708c:	607b      	str	r3, [r7, #4]
 801708e:	4603      	mov	r3, r0
 8017090:	73fb      	strb	r3, [r7, #15]
 8017092:	460b      	mov	r3, r1
 8017094:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 8017096:	f002 f9c7 	bl	8019428 <RFW_DeInit>
    switch( modem )
 801709a:	7bfb      	ldrb	r3, [r7, #15]
 801709c:	2b00      	cmp	r3, #0
 801709e:	d002      	beq.n	80170a6 <RadioSetTxConfig+0x22>
 80170a0:	2b01      	cmp	r3, #1
 80170a2:	d059      	beq.n	8017158 <RadioSetTxConfig+0xd4>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 80170a4:	e0be      	b.n	8017224 <RadioSetTxConfig+0x1a0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80170a6:	4b6d      	ldr	r3, [pc, #436]	@ (801725c <RadioSetTxConfig+0x1d8>)
 80170a8:	2200      	movs	r2, #0
 80170aa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80170ae:	4a6b      	ldr	r2, [pc, #428]	@ (801725c <RadioSetTxConfig+0x1d8>)
 80170b0:	6a3b      	ldr	r3, [r7, #32]
 80170b2:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80170b4:	4b69      	ldr	r3, [pc, #420]	@ (801725c <RadioSetTxConfig+0x1d8>)
 80170b6:	220b      	movs	r2, #11
 80170b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80170bc:	6878      	ldr	r0, [r7, #4]
 80170be:	f002 f8f3 	bl	80192a8 <SUBGRF_GetFskBandwidthRegValue>
 80170c2:	4603      	mov	r3, r0
 80170c4:	461a      	mov	r2, r3
 80170c6:	4b65      	ldr	r3, [pc, #404]	@ (801725c <RadioSetTxConfig+0x1d8>)
 80170c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 80170cc:	4a63      	ldr	r2, [pc, #396]	@ (801725c <RadioSetTxConfig+0x1d8>)
 80170ce:	68bb      	ldr	r3, [r7, #8]
 80170d0:	6413      	str	r3, [r2, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80170d2:	4b62      	ldr	r3, [pc, #392]	@ (801725c <RadioSetTxConfig+0x1d8>)
 80170d4:	2200      	movs	r2, #0
 80170d6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80170d8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80170da:	00db      	lsls	r3, r3, #3
 80170dc:	b29a      	uxth	r2, r3
 80170de:	4b5f      	ldr	r3, [pc, #380]	@ (801725c <RadioSetTxConfig+0x1d8>)
 80170e0:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80170e2:	4b5e      	ldr	r3, [pc, #376]	@ (801725c <RadioSetTxConfig+0x1d8>)
 80170e4:	2204      	movs	r2, #4
 80170e6:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 80170e8:	4b5c      	ldr	r3, [pc, #368]	@ (801725c <RadioSetTxConfig+0x1d8>)
 80170ea:	2218      	movs	r2, #24
 80170ec:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80170ee:	4b5b      	ldr	r3, [pc, #364]	@ (801725c <RadioSetTxConfig+0x1d8>)
 80170f0:	2200      	movs	r2, #0
 80170f2:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80170f4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80170f8:	f083 0301 	eor.w	r3, r3, #1
 80170fc:	b2db      	uxtb	r3, r3
 80170fe:	461a      	mov	r2, r3
 8017100:	4b56      	ldr	r3, [pc, #344]	@ (801725c <RadioSetTxConfig+0x1d8>)
 8017102:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 8017104:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8017108:	2b00      	cmp	r3, #0
 801710a:	d003      	beq.n	8017114 <RadioSetTxConfig+0x90>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801710c:	4b53      	ldr	r3, [pc, #332]	@ (801725c <RadioSetTxConfig+0x1d8>)
 801710e:	22f2      	movs	r2, #242	@ 0xf2
 8017110:	75da      	strb	r2, [r3, #23]
 8017112:	e002      	b.n	801711a <RadioSetTxConfig+0x96>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8017114:	4b51      	ldr	r3, [pc, #324]	@ (801725c <RadioSetTxConfig+0x1d8>)
 8017116:	2201      	movs	r2, #1
 8017118:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 801711a:	4b50      	ldr	r3, [pc, #320]	@ (801725c <RadioSetTxConfig+0x1d8>)
 801711c:	2201      	movs	r2, #1
 801711e:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8017120:	f000 fad5 	bl	80176ce <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8017124:	2000      	movs	r0, #0
 8017126:	f7ff fdb3 	bl	8016c90 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 801712a:	484d      	ldr	r0, [pc, #308]	@ (8017260 <RadioSetTxConfig+0x1dc>)
 801712c:	f001 fc8e 	bl	8018a4c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017130:	484c      	ldr	r0, [pc, #304]	@ (8017264 <RadioSetTxConfig+0x1e0>)
 8017132:	f001 fd59 	bl	8018be8 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8017136:	4a4c      	ldr	r2, [pc, #304]	@ (8017268 <RadioSetTxConfig+0x1e4>)
 8017138:	f107 0310 	add.w	r3, r7, #16
 801713c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017140:	e883 0003 	stmia.w	r3, {r0, r1}
 8017144:	f107 0310 	add.w	r3, r7, #16
 8017148:	4618      	mov	r0, r3
 801714a:	f001 f812 	bl	8018172 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 801714e:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8017152:	f001 f85d 	bl	8018210 <SUBGRF_SetWhiteningSeed>
            break;
 8017156:	e065      	b.n	8017224 <RadioSetTxConfig+0x1a0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8017158:	4b40      	ldr	r3, [pc, #256]	@ (801725c <RadioSetTxConfig+0x1d8>)
 801715a:	2201      	movs	r2, #1
 801715c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8017160:	6a3b      	ldr	r3, [r7, #32]
 8017162:	b2da      	uxtb	r2, r3
 8017164:	4b3d      	ldr	r3, [pc, #244]	@ (801725c <RadioSetTxConfig+0x1d8>)
 8017166:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 801716a:	4a40      	ldr	r2, [pc, #256]	@ (801726c <RadioSetTxConfig+0x1e8>)
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	4413      	add	r3, r2
 8017170:	781a      	ldrb	r2, [r3, #0]
 8017172:	4b3a      	ldr	r3, [pc, #232]	@ (801725c <RadioSetTxConfig+0x1d8>)
 8017174:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8017178:	4a38      	ldr	r2, [pc, #224]	@ (801725c <RadioSetTxConfig+0x1d8>)
 801717a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801717e:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	2b00      	cmp	r3, #0
 8017186:	d105      	bne.n	8017194 <RadioSetTxConfig+0x110>
 8017188:	6a3b      	ldr	r3, [r7, #32]
 801718a:	2b0b      	cmp	r3, #11
 801718c:	d008      	beq.n	80171a0 <RadioSetTxConfig+0x11c>
 801718e:	6a3b      	ldr	r3, [r7, #32]
 8017190:	2b0c      	cmp	r3, #12
 8017192:	d005      	beq.n	80171a0 <RadioSetTxConfig+0x11c>
 8017194:	687b      	ldr	r3, [r7, #4]
 8017196:	2b01      	cmp	r3, #1
 8017198:	d107      	bne.n	80171aa <RadioSetTxConfig+0x126>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801719a:	6a3b      	ldr	r3, [r7, #32]
 801719c:	2b0c      	cmp	r3, #12
 801719e:	d104      	bne.n	80171aa <RadioSetTxConfig+0x126>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80171a0:	4b2e      	ldr	r3, [pc, #184]	@ (801725c <RadioSetTxConfig+0x1d8>)
 80171a2:	2201      	movs	r2, #1
 80171a4:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 80171a8:	e003      	b.n	80171b2 <RadioSetTxConfig+0x12e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80171aa:	4b2c      	ldr	r3, [pc, #176]	@ (801725c <RadioSetTxConfig+0x1d8>)
 80171ac:	2200      	movs	r2, #0
 80171ae:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80171b2:	4b2a      	ldr	r3, [pc, #168]	@ (801725c <RadioSetTxConfig+0x1d8>)
 80171b4:	2201      	movs	r2, #1
 80171b6:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80171b8:	4b28      	ldr	r3, [pc, #160]	@ (801725c <RadioSetTxConfig+0x1d8>)
 80171ba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80171be:	2b05      	cmp	r3, #5
 80171c0:	d004      	beq.n	80171cc <RadioSetTxConfig+0x148>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 80171c2:	4b26      	ldr	r3, [pc, #152]	@ (801725c <RadioSetTxConfig+0x1d8>)
 80171c4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80171c8:	2b06      	cmp	r3, #6
 80171ca:	d10a      	bne.n	80171e2 <RadioSetTxConfig+0x15e>
                if( preambleLen < 12 )
 80171cc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80171ce:	2b0b      	cmp	r3, #11
 80171d0:	d803      	bhi.n	80171da <RadioSetTxConfig+0x156>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80171d2:	4b22      	ldr	r3, [pc, #136]	@ (801725c <RadioSetTxConfig+0x1d8>)
 80171d4:	220c      	movs	r2, #12
 80171d6:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 80171d8:	e006      	b.n	80171e8 <RadioSetTxConfig+0x164>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80171da:	4a20      	ldr	r2, [pc, #128]	@ (801725c <RadioSetTxConfig+0x1d8>)
 80171dc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80171de:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 80171e0:	e002      	b.n	80171e8 <RadioSetTxConfig+0x164>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80171e2:	4a1e      	ldr	r2, [pc, #120]	@ (801725c <RadioSetTxConfig+0x1d8>)
 80171e4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80171e6:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80171e8:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80171ec:	4b1b      	ldr	r3, [pc, #108]	@ (801725c <RadioSetTxConfig+0x1d8>)
 80171ee:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80171f0:	4b1f      	ldr	r3, [pc, #124]	@ (8017270 <RadioSetTxConfig+0x1ec>)
 80171f2:	781a      	ldrb	r2, [r3, #0]
 80171f4:	4b19      	ldr	r3, [pc, #100]	@ (801725c <RadioSetTxConfig+0x1d8>)
 80171f6:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80171f8:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80171fc:	4b17      	ldr	r3, [pc, #92]	@ (801725c <RadioSetTxConfig+0x1d8>)
 80171fe:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8017202:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8017206:	4b15      	ldr	r3, [pc, #84]	@ (801725c <RadioSetTxConfig+0x1d8>)
 8017208:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 801720c:	f000 fa5f 	bl	80176ce <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8017210:	2001      	movs	r0, #1
 8017212:	f7ff fd3d 	bl	8016c90 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017216:	4812      	ldr	r0, [pc, #72]	@ (8017260 <RadioSetTxConfig+0x1dc>)
 8017218:	f001 fc18 	bl	8018a4c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801721c:	4811      	ldr	r0, [pc, #68]	@ (8017264 <RadioSetTxConfig+0x1e0>)
 801721e:	f001 fce3 	bl	8018be8 <SUBGRF_SetPacketParams>
            break;
 8017222:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8017224:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017228:	4618      	mov	r0, r3
 801722a:	f001 ff3f 	bl	80190ac <SUBGRF_SetRfTxPower>
 801722e:	4603      	mov	r3, r0
 8017230:	461a      	mov	r2, r3
 8017232:	4b0a      	ldr	r3, [pc, #40]	@ (801725c <RadioSetTxConfig+0x1d8>)
 8017234:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8017238:	210e      	movs	r1, #14
 801723a:	f640 101f 	movw	r0, #2335	@ 0x91f
 801723e:	f001 fe19 	bl	8018e74 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8017242:	4b06      	ldr	r3, [pc, #24]	@ (801725c <RadioSetTxConfig+0x1d8>)
 8017244:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8017248:	4618      	mov	r0, r3
 801724a:	f002 f901 	bl	8019450 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801724e:	4a03      	ldr	r2, [pc, #12]	@ (801725c <RadioSetTxConfig+0x1d8>)
 8017250:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017252:	6053      	str	r3, [r2, #4]
}
 8017254:	bf00      	nop
 8017256:	3718      	adds	r7, #24
 8017258:	46bd      	mov	sp, r7
 801725a:	bd80      	pop	{r7, pc}
 801725c:	2000133c 	.word	0x2000133c
 8017260:	20001374 	.word	0x20001374
 8017264:	2000134a 	.word	0x2000134a
 8017268:	0802096c 	.word	0x0802096c
 801726c:	08021174 	.word	0x08021174
 8017270:	200000d8 	.word	0x200000d8

08017274 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8017274:	b480      	push	{r7}
 8017276:	b083      	sub	sp, #12
 8017278:	af00      	add	r7, sp, #0
 801727a:	6078      	str	r0, [r7, #4]
    return true;
 801727c:	2301      	movs	r3, #1
}
 801727e:	4618      	mov	r0, r3
 8017280:	370c      	adds	r7, #12
 8017282:	46bd      	mov	sp, r7
 8017284:	bc80      	pop	{r7}
 8017286:	4770      	bx	lr

08017288 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8017288:	b480      	push	{r7}
 801728a:	b085      	sub	sp, #20
 801728c:	af00      	add	r7, sp, #0
 801728e:	4603      	mov	r3, r0
 8017290:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8017292:	2300      	movs	r3, #0
 8017294:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8017296:	79fb      	ldrb	r3, [r7, #7]
 8017298:	2b0a      	cmp	r3, #10
 801729a:	d83e      	bhi.n	801731a <RadioGetLoRaBandwidthInHz+0x92>
 801729c:	a201      	add	r2, pc, #4	@ (adr r2, 80172a4 <RadioGetLoRaBandwidthInHz+0x1c>)
 801729e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80172a2:	bf00      	nop
 80172a4:	080172d1 	.word	0x080172d1
 80172a8:	080172e1 	.word	0x080172e1
 80172ac:	080172f1 	.word	0x080172f1
 80172b0:	08017301 	.word	0x08017301
 80172b4:	08017309 	.word	0x08017309
 80172b8:	0801730f 	.word	0x0801730f
 80172bc:	08017315 	.word	0x08017315
 80172c0:	0801731b 	.word	0x0801731b
 80172c4:	080172d9 	.word	0x080172d9
 80172c8:	080172e9 	.word	0x080172e9
 80172cc:	080172f9 	.word	0x080172f9
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 80172d0:	f641 6384 	movw	r3, #7812	@ 0x1e84
 80172d4:	60fb      	str	r3, [r7, #12]
        break;
 80172d6:	e020      	b.n	801731a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 80172d8:	f642 03b1 	movw	r3, #10417	@ 0x28b1
 80172dc:	60fb      	str	r3, [r7, #12]
        break;
 80172de:	e01c      	b.n	801731a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 80172e0:	f643 5309 	movw	r3, #15625	@ 0x3d09
 80172e4:	60fb      	str	r3, [r7, #12]
        break;
 80172e6:	e018      	b.n	801731a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 80172e8:	f245 1361 	movw	r3, #20833	@ 0x5161
 80172ec:	60fb      	str	r3, [r7, #12]
        break;
 80172ee:	e014      	b.n	801731a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 80172f0:	f647 2312 	movw	r3, #31250	@ 0x7a12
 80172f4:	60fb      	str	r3, [r7, #12]
        break;
 80172f6:	e010      	b.n	801731a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 80172f8:	f24a 23c3 	movw	r3, #41667	@ 0xa2c3
 80172fc:	60fb      	str	r3, [r7, #12]
        break;
 80172fe:	e00c      	b.n	801731a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8017300:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8017304:	60fb      	str	r3, [r7, #12]
        break;
 8017306:	e008      	b.n	801731a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8017308:	4b07      	ldr	r3, [pc, #28]	@ (8017328 <RadioGetLoRaBandwidthInHz+0xa0>)
 801730a:	60fb      	str	r3, [r7, #12]
        break;
 801730c:	e005      	b.n	801731a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 801730e:	4b07      	ldr	r3, [pc, #28]	@ (801732c <RadioGetLoRaBandwidthInHz+0xa4>)
 8017310:	60fb      	str	r3, [r7, #12]
        break;
 8017312:	e002      	b.n	801731a <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8017314:	4b06      	ldr	r3, [pc, #24]	@ (8017330 <RadioGetLoRaBandwidthInHz+0xa8>)
 8017316:	60fb      	str	r3, [r7, #12]
        break;
 8017318:	bf00      	nop
    }

    return bandwidthInHz;
 801731a:	68fb      	ldr	r3, [r7, #12]
}
 801731c:	4618      	mov	r0, r3
 801731e:	3714      	adds	r7, #20
 8017320:	46bd      	mov	sp, r7
 8017322:	bc80      	pop	{r7}
 8017324:	4770      	bx	lr
 8017326:	bf00      	nop
 8017328:	0001e848 	.word	0x0001e848
 801732c:	0003d090 	.word	0x0003d090
 8017330:	0007a120 	.word	0x0007a120

08017334 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8017334:	b480      	push	{r7}
 8017336:	b083      	sub	sp, #12
 8017338:	af00      	add	r7, sp, #0
 801733a:	6078      	str	r0, [r7, #4]
 801733c:	4608      	mov	r0, r1
 801733e:	4611      	mov	r1, r2
 8017340:	461a      	mov	r2, r3
 8017342:	4603      	mov	r3, r0
 8017344:	70fb      	strb	r3, [r7, #3]
 8017346:	460b      	mov	r3, r1
 8017348:	803b      	strh	r3, [r7, #0]
 801734a:	4613      	mov	r3, r2
 801734c:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 801734e:	883b      	ldrh	r3, [r7, #0]
 8017350:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8017352:	78ba      	ldrb	r2, [r7, #2]
 8017354:	f082 0201 	eor.w	r2, r2, #1
 8017358:	b2d2      	uxtb	r2, r2
 801735a:	2a00      	cmp	r2, #0
 801735c:	d001      	beq.n	8017362 <RadioGetGfskTimeOnAirNumerator+0x2e>
 801735e:	2208      	movs	r2, #8
 8017360:	e000      	b.n	8017364 <RadioGetGfskTimeOnAirNumerator+0x30>
 8017362:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8017364:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8017366:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801736a:	7c3b      	ldrb	r3, [r7, #16]
 801736c:	7d39      	ldrb	r1, [r7, #20]
 801736e:	2900      	cmp	r1, #0
 8017370:	d001      	beq.n	8017376 <RadioGetGfskTimeOnAirNumerator+0x42>
 8017372:	2102      	movs	r1, #2
 8017374:	e000      	b.n	8017378 <RadioGetGfskTimeOnAirNumerator+0x44>
 8017376:	2100      	movs	r1, #0
 8017378:	440b      	add	r3, r1
 801737a:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801737c:	4413      	add	r3, r2
}
 801737e:	4618      	mov	r0, r3
 8017380:	370c      	adds	r7, #12
 8017382:	46bd      	mov	sp, r7
 8017384:	bc80      	pop	{r7}
 8017386:	4770      	bx	lr

08017388 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8017388:	b480      	push	{r7}
 801738a:	b08b      	sub	sp, #44	@ 0x2c
 801738c:	af00      	add	r7, sp, #0
 801738e:	60f8      	str	r0, [r7, #12]
 8017390:	60b9      	str	r1, [r7, #8]
 8017392:	4611      	mov	r1, r2
 8017394:	461a      	mov	r2, r3
 8017396:	460b      	mov	r3, r1
 8017398:	71fb      	strb	r3, [r7, #7]
 801739a:	4613      	mov	r3, r2
 801739c:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 801739e:	79fb      	ldrb	r3, [r7, #7]
 80173a0:	3304      	adds	r3, #4
 80173a2:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 80173a4:	2300      	movs	r3, #0
 80173a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 80173aa:	68bb      	ldr	r3, [r7, #8]
 80173ac:	2b05      	cmp	r3, #5
 80173ae:	d002      	beq.n	80173b6 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 80173b0:	68bb      	ldr	r3, [r7, #8]
 80173b2:	2b06      	cmp	r3, #6
 80173b4:	d104      	bne.n	80173c0 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 80173b6:	88bb      	ldrh	r3, [r7, #4]
 80173b8:	2b0b      	cmp	r3, #11
 80173ba:	d801      	bhi.n	80173c0 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 80173bc:	230c      	movs	r3, #12
 80173be:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80173c0:	68fb      	ldr	r3, [r7, #12]
 80173c2:	2b00      	cmp	r3, #0
 80173c4:	d105      	bne.n	80173d2 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 80173c6:	68bb      	ldr	r3, [r7, #8]
 80173c8:	2b0b      	cmp	r3, #11
 80173ca:	d008      	beq.n	80173de <RadioGetLoRaTimeOnAirNumerator+0x56>
 80173cc:	68bb      	ldr	r3, [r7, #8]
 80173ce:	2b0c      	cmp	r3, #12
 80173d0:	d005      	beq.n	80173de <RadioGetLoRaTimeOnAirNumerator+0x56>
 80173d2:	68fb      	ldr	r3, [r7, #12]
 80173d4:	2b01      	cmp	r3, #1
 80173d6:	d105      	bne.n	80173e4 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80173d8:	68bb      	ldr	r3, [r7, #8]
 80173da:	2b0c      	cmp	r3, #12
 80173dc:	d102      	bne.n	80173e4 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 80173de:	2301      	movs	r3, #1
 80173e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80173e4:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80173e8:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 80173ea:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80173ee:	2a00      	cmp	r2, #0
 80173f0:	d001      	beq.n	80173f6 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 80173f2:	2210      	movs	r2, #16
 80173f4:	e000      	b.n	80173f8 <RadioGetLoRaTimeOnAirNumerator+0x70>
 80173f6:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80173f8:	4413      	add	r3, r2
 80173fa:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 80173fc:	68bb      	ldr	r3, [r7, #8]
 80173fe:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8017400:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8017402:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8017406:	2a00      	cmp	r2, #0
 8017408:	d001      	beq.n	801740e <RadioGetLoRaTimeOnAirNumerator+0x86>
 801740a:	2200      	movs	r2, #0
 801740c:	e000      	b.n	8017410 <RadioGetLoRaTimeOnAirNumerator+0x88>
 801740e:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8017410:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8017412:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8017414:	68bb      	ldr	r3, [r7, #8]
 8017416:	2b06      	cmp	r3, #6
 8017418:	d803      	bhi.n	8017422 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 801741a:	68bb      	ldr	r3, [r7, #8]
 801741c:	009b      	lsls	r3, r3, #2
 801741e:	623b      	str	r3, [r7, #32]
 8017420:	e00e      	b.n	8017440 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8017422:	69fb      	ldr	r3, [r7, #28]
 8017424:	3308      	adds	r3, #8
 8017426:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8017428:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801742c:	2b00      	cmp	r3, #0
 801742e:	d004      	beq.n	801743a <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8017430:	68bb      	ldr	r3, [r7, #8]
 8017432:	3b02      	subs	r3, #2
 8017434:	009b      	lsls	r3, r3, #2
 8017436:	623b      	str	r3, [r7, #32]
 8017438:	e002      	b.n	8017440 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 801743a:	68bb      	ldr	r3, [r7, #8]
 801743c:	009b      	lsls	r3, r3, #2
 801743e:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8017440:	69fb      	ldr	r3, [r7, #28]
 8017442:	2b00      	cmp	r3, #0
 8017444:	da01      	bge.n	801744a <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8017446:	2300      	movs	r3, #0
 8017448:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 801744a:	69fa      	ldr	r2, [r7, #28]
 801744c:	6a3b      	ldr	r3, [r7, #32]
 801744e:	4413      	add	r3, r2
 8017450:	1e5a      	subs	r2, r3, #1
 8017452:	6a3b      	ldr	r3, [r7, #32]
 8017454:	fb92 f3f3 	sdiv	r3, r2, r3
 8017458:	697a      	ldr	r2, [r7, #20]
 801745a:	fb03 f202 	mul.w	r2, r3, r2
 801745e:	88bb      	ldrh	r3, [r7, #4]
 8017460:	4413      	add	r3, r2
    int32_t intermediate =
 8017462:	330c      	adds	r3, #12
 8017464:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8017466:	68bb      	ldr	r3, [r7, #8]
 8017468:	2b06      	cmp	r3, #6
 801746a:	d802      	bhi.n	8017472 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 801746c:	69bb      	ldr	r3, [r7, #24]
 801746e:	3302      	adds	r3, #2
 8017470:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8017472:	69bb      	ldr	r3, [r7, #24]
 8017474:	009b      	lsls	r3, r3, #2
 8017476:	1c5a      	adds	r2, r3, #1
 8017478:	68bb      	ldr	r3, [r7, #8]
 801747a:	3b02      	subs	r3, #2
 801747c:	fa02 f303 	lsl.w	r3, r2, r3
}
 8017480:	4618      	mov	r0, r3
 8017482:	372c      	adds	r7, #44	@ 0x2c
 8017484:	46bd      	mov	sp, r7
 8017486:	bc80      	pop	{r7}
 8017488:	4770      	bx	lr
	...

0801748c <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 801748c:	b580      	push	{r7, lr}
 801748e:	b08a      	sub	sp, #40	@ 0x28
 8017490:	af04      	add	r7, sp, #16
 8017492:	60b9      	str	r1, [r7, #8]
 8017494:	607a      	str	r2, [r7, #4]
 8017496:	461a      	mov	r2, r3
 8017498:	4603      	mov	r3, r0
 801749a:	73fb      	strb	r3, [r7, #15]
 801749c:	4613      	mov	r3, r2
 801749e:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 80174a0:	2300      	movs	r3, #0
 80174a2:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 80174a4:	2301      	movs	r3, #1
 80174a6:	613b      	str	r3, [r7, #16]

    switch( modem )
 80174a8:	7bfb      	ldrb	r3, [r7, #15]
 80174aa:	2b00      	cmp	r3, #0
 80174ac:	d002      	beq.n	80174b4 <RadioTimeOnAir+0x28>
 80174ae:	2b01      	cmp	r3, #1
 80174b0:	d017      	beq.n	80174e2 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 80174b2:	e035      	b.n	8017520 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 80174b4:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 80174b8:	8c3a      	ldrh	r2, [r7, #32]
 80174ba:	7bb9      	ldrb	r1, [r7, #14]
 80174bc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80174c0:	9301      	str	r3, [sp, #4]
 80174c2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80174c6:	9300      	str	r3, [sp, #0]
 80174c8:	4603      	mov	r3, r0
 80174ca:	6878      	ldr	r0, [r7, #4]
 80174cc:	f7ff ff32 	bl	8017334 <RadioGetGfskTimeOnAirNumerator>
 80174d0:	4603      	mov	r3, r0
 80174d2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80174d6:	fb02 f303 	mul.w	r3, r2, r3
 80174da:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	613b      	str	r3, [r7, #16]
        break;
 80174e0:	e01e      	b.n	8017520 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 80174e2:	8c39      	ldrh	r1, [r7, #32]
 80174e4:	7bba      	ldrb	r2, [r7, #14]
 80174e6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80174ea:	9302      	str	r3, [sp, #8]
 80174ec:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80174f0:	9301      	str	r3, [sp, #4]
 80174f2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80174f6:	9300      	str	r3, [sp, #0]
 80174f8:	460b      	mov	r3, r1
 80174fa:	6879      	ldr	r1, [r7, #4]
 80174fc:	68b8      	ldr	r0, [r7, #8]
 80174fe:	f7ff ff43 	bl	8017388 <RadioGetLoRaTimeOnAirNumerator>
 8017502:	4603      	mov	r3, r0
 8017504:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8017508:	fb02 f303 	mul.w	r3, r2, r3
 801750c:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 801750e:	4a0a      	ldr	r2, [pc, #40]	@ (8017538 <RadioTimeOnAir+0xac>)
 8017510:	68bb      	ldr	r3, [r7, #8]
 8017512:	4413      	add	r3, r2
 8017514:	781b      	ldrb	r3, [r3, #0]
 8017516:	4618      	mov	r0, r3
 8017518:	f7ff feb6 	bl	8017288 <RadioGetLoRaBandwidthInHz>
 801751c:	6138      	str	r0, [r7, #16]
        break;
 801751e:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8017520:	697a      	ldr	r2, [r7, #20]
 8017522:	693b      	ldr	r3, [r7, #16]
 8017524:	4413      	add	r3, r2
 8017526:	1e5a      	subs	r2, r3, #1
 8017528:	693b      	ldr	r3, [r7, #16]
 801752a:	fbb2 f3f3 	udiv	r3, r2, r3
}
 801752e:	4618      	mov	r0, r3
 8017530:	3718      	adds	r7, #24
 8017532:	46bd      	mov	sp, r7
 8017534:	bd80      	pop	{r7, pc}
 8017536:	bf00      	nop
 8017538:	08021174 	.word	0x08021174

0801753c <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 801753c:	b580      	push	{r7, lr}
 801753e:	b084      	sub	sp, #16
 8017540:	af00      	add	r7, sp, #0
 8017542:	6078      	str	r0, [r7, #4]
 8017544:	460b      	mov	r3, r1
 8017546:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8017548:	2300      	movs	r3, #0
 801754a:	2200      	movs	r2, #0
 801754c:	f240 2101 	movw	r1, #513	@ 0x201
 8017550:	f240 2001 	movw	r0, #513	@ 0x201
 8017554:	f001 f8e4 	bl	8018720 <SUBGRF_SetDioIrqParams>
                            IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );
 8017558:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 801755c:	484d      	ldr	r0, [pc, #308]	@ (8017694 <RadioSend+0x158>)
 801755e:	f7ff fb09 	bl	8016b74 <LL_GPIO_SetOutputPin>

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8017562:	4b4d      	ldr	r3, [pc, #308]	@ (8017698 <RadioSend+0x15c>)
 8017564:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8017568:	2101      	movs	r1, #1
 801756a:	4618      	mov	r0, r3
 801756c:	f001 fd76 	bl	801905c <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8017570:	4b49      	ldr	r3, [pc, #292]	@ (8017698 <RadioSend+0x15c>)
 8017572:	781b      	ldrb	r3, [r3, #0]
 8017574:	2b01      	cmp	r3, #1
 8017576:	d112      	bne.n	801759e <RadioSend+0x62>
 8017578:	4b47      	ldr	r3, [pc, #284]	@ (8017698 <RadioSend+0x15c>)
 801757a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 801757e:	2b06      	cmp	r3, #6
 8017580:	d10d      	bne.n	801759e <RadioSend+0x62>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8017582:	f640 0089 	movw	r0, #2185	@ 0x889
 8017586:	f001 fc89 	bl	8018e9c <SUBGRF_ReadRegister>
 801758a:	4603      	mov	r3, r0
 801758c:	f023 0304 	bic.w	r3, r3, #4
 8017590:	b2db      	uxtb	r3, r3
 8017592:	4619      	mov	r1, r3
 8017594:	f640 0089 	movw	r0, #2185	@ 0x889
 8017598:	f001 fc6c 	bl	8018e74 <SUBGRF_WriteRegister>
 801759c:	e00c      	b.n	80175b8 <RadioSend+0x7c>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801759e:	f640 0089 	movw	r0, #2185	@ 0x889
 80175a2:	f001 fc7b 	bl	8018e9c <SUBGRF_ReadRegister>
 80175a6:	4603      	mov	r3, r0
 80175a8:	f043 0304 	orr.w	r3, r3, #4
 80175ac:	b2db      	uxtb	r3, r3
 80175ae:	4619      	mov	r1, r3
 80175b0:	f640 0089 	movw	r0, #2185	@ 0x889
 80175b4:	f001 fc5e 	bl	8018e74 <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 80175b8:	4b37      	ldr	r3, [pc, #220]	@ (8017698 <RadioSend+0x15c>)
 80175ba:	781b      	ldrb	r3, [r3, #0]
 80175bc:	2b03      	cmp	r3, #3
 80175be:	d859      	bhi.n	8017674 <RadioSend+0x138>
 80175c0:	a201      	add	r2, pc, #4	@ (adr r2, 80175c8 <RadioSend+0x8c>)
 80175c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80175c6:	bf00      	nop
 80175c8:	080175f3 	.word	0x080175f3
 80175cc:	080175d9 	.word	0x080175d9
 80175d0:	080175f3 	.word	0x080175f3
 80175d4:	08017655 	.word	0x08017655
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 80175d8:	4a2f      	ldr	r2, [pc, #188]	@ (8017698 <RadioSend+0x15c>)
 80175da:	78fb      	ldrb	r3, [r7, #3]
 80175dc:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80175de:	482f      	ldr	r0, [pc, #188]	@ (801769c <RadioSend+0x160>)
 80175e0:	f001 fb02 	bl	8018be8 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80175e4:	78fb      	ldrb	r3, [r7, #3]
 80175e6:	2200      	movs	r2, #0
 80175e8:	4619      	mov	r1, r3
 80175ea:	6878      	ldr	r0, [r7, #4]
 80175ec:	f000 fdae 	bl	801814c <SUBGRF_SendPayload>
            break;
 80175f0:	e041      	b.n	8017676 <RadioSend+0x13a>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 80175f2:	f001 ff1f 	bl	8019434 <RFW_Is_Init>
 80175f6:	4603      	mov	r3, r0
 80175f8:	2b01      	cmp	r3, #1
 80175fa:	d11e      	bne.n	801763a <RadioSend+0xfe>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 80175fc:	f107 020f 	add.w	r2, r7, #15
 8017600:	78fb      	ldrb	r3, [r7, #3]
 8017602:	4619      	mov	r1, r3
 8017604:	6878      	ldr	r0, [r7, #4]
 8017606:	f001 ff2d 	bl	8019464 <RFW_TransmitInit>
 801760a:	4603      	mov	r3, r0
 801760c:	2b00      	cmp	r3, #0
 801760e:	d10c      	bne.n	801762a <RadioSend+0xee>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8017610:	7bfa      	ldrb	r2, [r7, #15]
 8017612:	4b21      	ldr	r3, [pc, #132]	@ (8017698 <RadioSend+0x15c>)
 8017614:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017616:	4821      	ldr	r0, [pc, #132]	@ (801769c <RadioSend+0x160>)
 8017618:	f001 fae6 	bl	8018be8 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 801761c:	7bfb      	ldrb	r3, [r7, #15]
 801761e:	2200      	movs	r2, #0
 8017620:	4619      	mov	r1, r3
 8017622:	6878      	ldr	r0, [r7, #4]
 8017624:	f000 fd92 	bl	801814c <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8017628:	e025      	b.n	8017676 <RadioSend+0x13a>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 801762a:	4b1d      	ldr	r3, [pc, #116]	@ (80176a0 <RadioSend+0x164>)
 801762c:	2201      	movs	r2, #1
 801762e:	2100      	movs	r1, #0
 8017630:	2002      	movs	r0, #2
 8017632:	f001 ff73 	bl	801951c <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 8017636:	2303      	movs	r3, #3
 8017638:	e027      	b.n	801768a <RadioSend+0x14e>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 801763a:	4a17      	ldr	r2, [pc, #92]	@ (8017698 <RadioSend+0x15c>)
 801763c:	78fb      	ldrb	r3, [r7, #3]
 801763e:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017640:	4816      	ldr	r0, [pc, #88]	@ (801769c <RadioSend+0x160>)
 8017642:	f001 fad1 	bl	8018be8 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8017646:	78fb      	ldrb	r3, [r7, #3]
 8017648:	2200      	movs	r2, #0
 801764a:	4619      	mov	r1, r3
 801764c:	6878      	ldr	r0, [r7, #4]
 801764e:	f000 fd7d 	bl	801814c <SUBGRF_SendPayload>
            break;
 8017652:	e010      	b.n	8017676 <RadioSend+0x13a>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8017654:	4b10      	ldr	r3, [pc, #64]	@ (8017698 <RadioSend+0x15c>)
 8017656:	2202      	movs	r2, #2
 8017658:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 801765a:	4a0f      	ldr	r2, [pc, #60]	@ (8017698 <RadioSend+0x15c>)
 801765c:	78fb      	ldrb	r3, [r7, #3]
 801765e:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017660:	480e      	ldr	r0, [pc, #56]	@ (801769c <RadioSend+0x160>)
 8017662:	f001 fac1 	bl	8018be8 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8017666:	78fb      	ldrb	r3, [r7, #3]
 8017668:	2200      	movs	r2, #0
 801766a:	4619      	mov	r1, r3
 801766c:	6878      	ldr	r0, [r7, #4]
 801766e:	f000 fd6d 	bl	801814c <SUBGRF_SendPayload>
            break;
 8017672:	e000      	b.n	8017676 <RadioSend+0x13a>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
            break;
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 8017674:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8017676:	4b08      	ldr	r3, [pc, #32]	@ (8017698 <RadioSend+0x15c>)
 8017678:	685b      	ldr	r3, [r3, #4]
 801767a:	4619      	mov	r1, r3
 801767c:	4809      	ldr	r0, [pc, #36]	@ (80176a4 <RadioSend+0x168>)
 801767e:	f002 fe97 	bl	801a3b0 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 8017682:	4808      	ldr	r0, [pc, #32]	@ (80176a4 <RadioSend+0x168>)
 8017684:	f002 fdb6 	bl	801a1f4 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 8017688:	2300      	movs	r3, #0
}
 801768a:	4618      	mov	r0, r3
 801768c:	3710      	adds	r7, #16
 801768e:	46bd      	mov	sp, r7
 8017690:	bd80      	pop	{r7, pc}
 8017692:	bf00      	nop
 8017694:	48000400 	.word	0x48000400
 8017698:	2000133c 	.word	0x2000133c
 801769c:	2000134a 	.word	0x2000134a
 80176a0:	08020974 	.word	0x08020974
 80176a4:	20001398 	.word	0x20001398

080176a8 <RadioSleep>:

static void RadioSleep( void )
{
 80176a8:	b580      	push	{r7, lr}
 80176aa:	b082      	sub	sp, #8
 80176ac:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 80176ae:	2300      	movs	r3, #0
 80176b0:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 80176b2:	793b      	ldrb	r3, [r7, #4]
 80176b4:	f043 0304 	orr.w	r3, r3, #4
 80176b8:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 80176ba:	7938      	ldrb	r0, [r7, #4]
 80176bc:	f000 fe22 	bl	8018304 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 80176c0:	2002      	movs	r0, #2
 80176c2:	f7ea f82f 	bl	8001724 <HAL_Delay>
}
 80176c6:	bf00      	nop
 80176c8:	3708      	adds	r7, #8
 80176ca:	46bd      	mov	sp, r7
 80176cc:	bd80      	pop	{r7, pc}

080176ce <RadioStandby>:

static void RadioStandby( void )
{
 80176ce:	b580      	push	{r7, lr}
 80176d0:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 80176d2:	2000      	movs	r0, #0
 80176d4:	f000 fe4a 	bl	801836c <SUBGRF_SetStandby>
}
 80176d8:	bf00      	nop
 80176da:	bd80      	pop	{r7, pc}

080176dc <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 80176dc:	b580      	push	{r7, lr}
 80176de:	b082      	sub	sp, #8
 80176e0:	af00      	add	r7, sp, #0
 80176e2:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 80176e4:	f001 fea6 	bl	8019434 <RFW_Is_Init>
 80176e8:	4603      	mov	r3, r0
 80176ea:	2b01      	cmp	r3, #1
 80176ec:	d102      	bne.n	80176f4 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 80176ee:	f001 fec9 	bl	8019484 <RFW_ReceiveInit>
 80176f2:	e007      	b.n	8017704 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80176f4:	2300      	movs	r3, #0
 80176f6:	2200      	movs	r2, #0
 80176f8:	f240 2162 	movw	r1, #610	@ 0x262
 80176fc:	f240 2062 	movw	r0, #610	@ 0x262
 8017700:	f001 f80e 	bl	8018720 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8017704:	687b      	ldr	r3, [r7, #4]
 8017706:	2b00      	cmp	r3, #0
 8017708:	d006      	beq.n	8017718 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801770a:	6879      	ldr	r1, [r7, #4]
 801770c:	4813      	ldr	r0, [pc, #76]	@ (801775c <RadioRx+0x80>)
 801770e:	f002 fe4f 	bl	801a3b0 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8017712:	4812      	ldr	r0, [pc, #72]	@ (801775c <RadioRx+0x80>)
 8017714:	f002 fd6e 	bl	801a1f4 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8017718:	4b11      	ldr	r3, [pc, #68]	@ (8017760 <RadioRx+0x84>)
 801771a:	2200      	movs	r2, #0
 801771c:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
 801771e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8017722:	4810      	ldr	r0, [pc, #64]	@ (8017764 <RadioRx+0x88>)
 8017724:	f7ff fa26 	bl	8016b74 <LL_GPIO_SetOutputPin>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8017728:	4b0d      	ldr	r3, [pc, #52]	@ (8017760 <RadioRx+0x84>)
 801772a:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801772e:	2100      	movs	r1, #0
 8017730:	4618      	mov	r0, r3
 8017732:	f001 fc93 	bl	801905c <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8017736:	4b0a      	ldr	r3, [pc, #40]	@ (8017760 <RadioRx+0x84>)
 8017738:	785b      	ldrb	r3, [r3, #1]
 801773a:	2b00      	cmp	r3, #0
 801773c:	d004      	beq.n	8017748 <RadioRx+0x6c>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 801773e:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8017742:	f000 fe4f 	bl	80183e4 <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8017746:	e005      	b.n	8017754 <RadioRx+0x78>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8017748:	4b05      	ldr	r3, [pc, #20]	@ (8017760 <RadioRx+0x84>)
 801774a:	689b      	ldr	r3, [r3, #8]
 801774c:	019b      	lsls	r3, r3, #6
 801774e:	4618      	mov	r0, r3
 8017750:	f000 fe48 	bl	80183e4 <SUBGRF_SetRx>
}
 8017754:	bf00      	nop
 8017756:	3708      	adds	r7, #8
 8017758:	46bd      	mov	sp, r7
 801775a:	bd80      	pop	{r7, pc}
 801775c:	200013b0 	.word	0x200013b0
 8017760:	2000133c 	.word	0x2000133c
 8017764:	48000400 	.word	0x48000400

08017768 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8017768:	b580      	push	{r7, lr}
 801776a:	b082      	sub	sp, #8
 801776c:	af00      	add	r7, sp, #0
 801776e:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 8017770:	f001 fe60 	bl	8019434 <RFW_Is_Init>
 8017774:	4603      	mov	r3, r0
 8017776:	2b01      	cmp	r3, #1
 8017778:	d102      	bne.n	8017780 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 801777a:	f001 fe83 	bl	8019484 <RFW_ReceiveInit>
 801777e:	e007      	b.n	8017790 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8017780:	2300      	movs	r3, #0
 8017782:	2200      	movs	r2, #0
 8017784:	f240 2162 	movw	r1, #610	@ 0x262
 8017788:	f240 2062 	movw	r0, #610	@ 0x262
 801778c:	f000 ffc8 	bl	8018720 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8017790:	687b      	ldr	r3, [r7, #4]
 8017792:	2b00      	cmp	r3, #0
 8017794:	d006      	beq.n	80177a4 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8017796:	6879      	ldr	r1, [r7, #4]
 8017798:	4813      	ldr	r0, [pc, #76]	@ (80177e8 <RadioRxBoosted+0x80>)
 801779a:	f002 fe09 	bl	801a3b0 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 801779e:	4812      	ldr	r0, [pc, #72]	@ (80177e8 <RadioRxBoosted+0x80>)
 80177a0:	f002 fd28 	bl	801a1f4 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80177a4:	4b11      	ldr	r3, [pc, #68]	@ (80177ec <RadioRxBoosted+0x84>)
 80177a6:	2200      	movs	r2, #0
 80177a8:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
 80177aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80177ae:	4810      	ldr	r0, [pc, #64]	@ (80177f0 <RadioRxBoosted+0x88>)
 80177b0:	f7ff f9e0 	bl	8016b74 <LL_GPIO_SetOutputPin>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80177b4:	4b0d      	ldr	r3, [pc, #52]	@ (80177ec <RadioRxBoosted+0x84>)
 80177b6:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80177ba:	2100      	movs	r1, #0
 80177bc:	4618      	mov	r0, r3
 80177be:	f001 fc4d 	bl	801905c <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 80177c2:	4b0a      	ldr	r3, [pc, #40]	@ (80177ec <RadioRxBoosted+0x84>)
 80177c4:	785b      	ldrb	r3, [r3, #1]
 80177c6:	2b00      	cmp	r3, #0
 80177c8:	d004      	beq.n	80177d4 <RadioRxBoosted+0x6c>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 80177ca:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 80177ce:	f000 fe29 	bl	8018424 <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 80177d2:	e005      	b.n	80177e0 <RadioRxBoosted+0x78>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 80177d4:	4b05      	ldr	r3, [pc, #20]	@ (80177ec <RadioRxBoosted+0x84>)
 80177d6:	689b      	ldr	r3, [r3, #8]
 80177d8:	019b      	lsls	r3, r3, #6
 80177da:	4618      	mov	r0, r3
 80177dc:	f000 fe22 	bl	8018424 <SUBGRF_SetRxBoosted>
}
 80177e0:	bf00      	nop
 80177e2:	3708      	adds	r7, #8
 80177e4:	46bd      	mov	sp, r7
 80177e6:	bd80      	pop	{r7, pc}
 80177e8:	200013b0 	.word	0x200013b0
 80177ec:	2000133c 	.word	0x2000133c
 80177f0:	48000400 	.word	0x48000400

080177f4 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 80177f4:	b580      	push	{r7, lr}
 80177f6:	b082      	sub	sp, #8
 80177f8:	af00      	add	r7, sp, #0
 80177fa:	6078      	str	r0, [r7, #4]
 80177fc:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 80177fe:	687b      	ldr	r3, [r7, #4]
 8017800:	005a      	lsls	r2, r3, #1
 8017802:	683b      	ldr	r3, [r7, #0]
 8017804:	4413      	add	r3, r2
 8017806:	4a0c      	ldr	r2, [pc, #48]	@ (8017838 <RadioSetRxDutyCycle+0x44>)
 8017808:	6593      	str	r3, [r2, #88]	@ 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801780a:	2300      	movs	r3, #0
 801780c:	2200      	movs	r2, #0
 801780e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8017812:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8017816:	f000 ff83 	bl	8018720 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801781a:	4b07      	ldr	r3, [pc, #28]	@ (8017838 <RadioSetRxDutyCycle+0x44>)
 801781c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8017820:	2100      	movs	r1, #0
 8017822:	4618      	mov	r0, r3
 8017824:	f001 fc1a 	bl	801905c <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8017828:	6839      	ldr	r1, [r7, #0]
 801782a:	6878      	ldr	r0, [r7, #4]
 801782c:	f000 fe1e 	bl	801846c <SUBGRF_SetRxDutyCycle>
}
 8017830:	bf00      	nop
 8017832:	3708      	adds	r7, #8
 8017834:	46bd      	mov	sp, r7
 8017836:	bd80      	pop	{r7, pc}
 8017838:	2000133c 	.word	0x2000133c

0801783c <RadioStartCad>:

static void RadioStartCad( void )
{
 801783c:	b580      	push	{r7, lr}
 801783e:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8017840:	4b09      	ldr	r3, [pc, #36]	@ (8017868 <RadioStartCad+0x2c>)
 8017842:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8017846:	2100      	movs	r1, #0
 8017848:	4618      	mov	r0, r3
 801784a:	f001 fc07 	bl	801905c <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 801784e:	2300      	movs	r3, #0
 8017850:	2200      	movs	r2, #0
 8017852:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8017856:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 801785a:	f000 ff61 	bl	8018720 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 801785e:	f000 fe31 	bl	80184c4 <SUBGRF_SetCad>
}
 8017862:	bf00      	nop
 8017864:	bd80      	pop	{r7, pc}
 8017866:	bf00      	nop
 8017868:	2000133c 	.word	0x2000133c

0801786c <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 801786c:	b580      	push	{r7, lr}
 801786e:	b084      	sub	sp, #16
 8017870:	af00      	add	r7, sp, #0
 8017872:	6078      	str	r0, [r7, #4]
 8017874:	460b      	mov	r3, r1
 8017876:	70fb      	strb	r3, [r7, #3]
 8017878:	4613      	mov	r3, r2
 801787a:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 801787c:	883b      	ldrh	r3, [r7, #0]
 801787e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8017882:	fb02 f303 	mul.w	r3, r2, r3
 8017886:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8017888:	6878      	ldr	r0, [r7, #4]
 801788a:	f000 ffa5 	bl	80187d8 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 801788e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017892:	4618      	mov	r0, r3
 8017894:	f001 fc0a 	bl	80190ac <SUBGRF_SetRfTxPower>
 8017898:	4603      	mov	r3, r0
 801789a:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801789c:	210e      	movs	r1, #14
 801789e:	f640 101f 	movw	r0, #2335	@ 0x91f
 80178a2:	f001 fae7 	bl	8018e74 <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 80178a6:	7afb      	ldrb	r3, [r7, #11]
 80178a8:	2101      	movs	r1, #1
 80178aa:	4618      	mov	r0, r3
 80178ac:	f001 fbd6 	bl	801905c <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 80178b0:	f000 fe16 	bl	80184e0 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 80178b4:	68f9      	ldr	r1, [r7, #12]
 80178b6:	4805      	ldr	r0, [pc, #20]	@ (80178cc <RadioSetTxContinuousWave+0x60>)
 80178b8:	f002 fd7a 	bl	801a3b0 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 80178bc:	4803      	ldr	r0, [pc, #12]	@ (80178cc <RadioSetTxContinuousWave+0x60>)
 80178be:	f002 fc99 	bl	801a1f4 <UTIL_TIMER_Start>
}
 80178c2:	bf00      	nop
 80178c4:	3710      	adds	r7, #16
 80178c6:	46bd      	mov	sp, r7
 80178c8:	bd80      	pop	{r7, pc}
 80178ca:	bf00      	nop
 80178cc:	20001398 	.word	0x20001398

080178d0 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 80178d0:	b580      	push	{r7, lr}
 80178d2:	b082      	sub	sp, #8
 80178d4:	af00      	add	r7, sp, #0
 80178d6:	4603      	mov	r3, r0
 80178d8:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 80178da:	f001 fa38 	bl	8018d4e <SUBGRF_GetRssiInst>
 80178de:	4603      	mov	r3, r0
}
 80178e0:	4618      	mov	r0, r3
 80178e2:	3708      	adds	r7, #8
 80178e4:	46bd      	mov	sp, r7
 80178e6:	bd80      	pop	{r7, pc}

080178e8 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 80178e8:	b580      	push	{r7, lr}
 80178ea:	b082      	sub	sp, #8
 80178ec:	af00      	add	r7, sp, #0
 80178ee:	4603      	mov	r3, r0
 80178f0:	460a      	mov	r2, r1
 80178f2:	80fb      	strh	r3, [r7, #6]
 80178f4:	4613      	mov	r3, r2
 80178f6:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 80178f8:	797a      	ldrb	r2, [r7, #5]
 80178fa:	88fb      	ldrh	r3, [r7, #6]
 80178fc:	4611      	mov	r1, r2
 80178fe:	4618      	mov	r0, r3
 8017900:	f001 fab8 	bl	8018e74 <SUBGRF_WriteRegister>
}
 8017904:	bf00      	nop
 8017906:	3708      	adds	r7, #8
 8017908:	46bd      	mov	sp, r7
 801790a:	bd80      	pop	{r7, pc}

0801790c <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 801790c:	b580      	push	{r7, lr}
 801790e:	b082      	sub	sp, #8
 8017910:	af00      	add	r7, sp, #0
 8017912:	4603      	mov	r3, r0
 8017914:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8017916:	88fb      	ldrh	r3, [r7, #6]
 8017918:	4618      	mov	r0, r3
 801791a:	f001 fabf 	bl	8018e9c <SUBGRF_ReadRegister>
 801791e:	4603      	mov	r3, r0
}
 8017920:	4618      	mov	r0, r3
 8017922:	3708      	adds	r7, #8
 8017924:	46bd      	mov	sp, r7
 8017926:	bd80      	pop	{r7, pc}

08017928 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8017928:	b580      	push	{r7, lr}
 801792a:	b082      	sub	sp, #8
 801792c:	af00      	add	r7, sp, #0
 801792e:	4603      	mov	r3, r0
 8017930:	6039      	str	r1, [r7, #0]
 8017932:	80fb      	strh	r3, [r7, #6]
 8017934:	4613      	mov	r3, r2
 8017936:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8017938:	797b      	ldrb	r3, [r7, #5]
 801793a:	b29a      	uxth	r2, r3
 801793c:	88fb      	ldrh	r3, [r7, #6]
 801793e:	6839      	ldr	r1, [r7, #0]
 8017940:	4618      	mov	r0, r3
 8017942:	f001 fabf 	bl	8018ec4 <SUBGRF_WriteRegisters>
}
 8017946:	bf00      	nop
 8017948:	3708      	adds	r7, #8
 801794a:	46bd      	mov	sp, r7
 801794c:	bd80      	pop	{r7, pc}

0801794e <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 801794e:	b580      	push	{r7, lr}
 8017950:	b082      	sub	sp, #8
 8017952:	af00      	add	r7, sp, #0
 8017954:	4603      	mov	r3, r0
 8017956:	6039      	str	r1, [r7, #0]
 8017958:	80fb      	strh	r3, [r7, #6]
 801795a:	4613      	mov	r3, r2
 801795c:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 801795e:	797b      	ldrb	r3, [r7, #5]
 8017960:	b29a      	uxth	r2, r3
 8017962:	88fb      	ldrh	r3, [r7, #6]
 8017964:	6839      	ldr	r1, [r7, #0]
 8017966:	4618      	mov	r0, r3
 8017968:	f001 face 	bl	8018f08 <SUBGRF_ReadRegisters>
}
 801796c:	bf00      	nop
 801796e:	3708      	adds	r7, #8
 8017970:	46bd      	mov	sp, r7
 8017972:	bd80      	pop	{r7, pc}

08017974 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8017974:	b580      	push	{r7, lr}
 8017976:	b082      	sub	sp, #8
 8017978:	af00      	add	r7, sp, #0
 801797a:	4603      	mov	r3, r0
 801797c:	460a      	mov	r2, r1
 801797e:	71fb      	strb	r3, [r7, #7]
 8017980:	4613      	mov	r3, r2
 8017982:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8017984:	79fb      	ldrb	r3, [r7, #7]
 8017986:	2b01      	cmp	r3, #1
 8017988:	d10a      	bne.n	80179a0 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 801798a:	4a0e      	ldr	r2, [pc, #56]	@ (80179c4 <RadioSetMaxPayloadLength+0x50>)
 801798c:	79bb      	ldrb	r3, [r7, #6]
 801798e:	7013      	strb	r3, [r2, #0]
 8017990:	4b0c      	ldr	r3, [pc, #48]	@ (80179c4 <RadioSetMaxPayloadLength+0x50>)
 8017992:	781a      	ldrb	r2, [r3, #0]
 8017994:	4b0c      	ldr	r3, [pc, #48]	@ (80179c8 <RadioSetMaxPayloadLength+0x54>)
 8017996:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017998:	480c      	ldr	r0, [pc, #48]	@ (80179cc <RadioSetMaxPayloadLength+0x58>)
 801799a:	f001 f925 	bl	8018be8 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 801799e:	e00d      	b.n	80179bc <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 80179a0:	4b09      	ldr	r3, [pc, #36]	@ (80179c8 <RadioSetMaxPayloadLength+0x54>)
 80179a2:	7d5b      	ldrb	r3, [r3, #21]
 80179a4:	2b01      	cmp	r3, #1
 80179a6:	d109      	bne.n	80179bc <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 80179a8:	4a06      	ldr	r2, [pc, #24]	@ (80179c4 <RadioSetMaxPayloadLength+0x50>)
 80179aa:	79bb      	ldrb	r3, [r7, #6]
 80179ac:	7013      	strb	r3, [r2, #0]
 80179ae:	4b05      	ldr	r3, [pc, #20]	@ (80179c4 <RadioSetMaxPayloadLength+0x50>)
 80179b0:	781a      	ldrb	r2, [r3, #0]
 80179b2:	4b05      	ldr	r3, [pc, #20]	@ (80179c8 <RadioSetMaxPayloadLength+0x54>)
 80179b4:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80179b6:	4805      	ldr	r0, [pc, #20]	@ (80179cc <RadioSetMaxPayloadLength+0x58>)
 80179b8:	f001 f916 	bl	8018be8 <SUBGRF_SetPacketParams>
}
 80179bc:	bf00      	nop
 80179be:	3708      	adds	r7, #8
 80179c0:	46bd      	mov	sp, r7
 80179c2:	bd80      	pop	{r7, pc}
 80179c4:	200000d8 	.word	0x200000d8
 80179c8:	2000133c 	.word	0x2000133c
 80179cc:	2000134a 	.word	0x2000134a

080179d0 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 80179d0:	b580      	push	{r7, lr}
 80179d2:	b082      	sub	sp, #8
 80179d4:	af00      	add	r7, sp, #0
 80179d6:	4603      	mov	r3, r0
 80179d8:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 80179da:	4a13      	ldr	r2, [pc, #76]	@ (8017a28 <RadioSetPublicNetwork+0x58>)
 80179dc:	79fb      	ldrb	r3, [r7, #7]
 80179de:	7313      	strb	r3, [r2, #12]
 80179e0:	4b11      	ldr	r3, [pc, #68]	@ (8017a28 <RadioSetPublicNetwork+0x58>)
 80179e2:	7b1a      	ldrb	r2, [r3, #12]
 80179e4:	4b10      	ldr	r3, [pc, #64]	@ (8017a28 <RadioSetPublicNetwork+0x58>)
 80179e6:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 80179e8:	2001      	movs	r0, #1
 80179ea:	f7ff f951 	bl	8016c90 <RadioSetModem>
    if( enable == true )
 80179ee:	79fb      	ldrb	r3, [r7, #7]
 80179f0:	2b00      	cmp	r3, #0
 80179f2:	d00a      	beq.n	8017a0a <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 80179f4:	2134      	movs	r1, #52	@ 0x34
 80179f6:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 80179fa:	f001 fa3b 	bl	8018e74 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 80179fe:	2144      	movs	r1, #68	@ 0x44
 8017a00:	f240 7041 	movw	r0, #1857	@ 0x741
 8017a04:	f001 fa36 	bl	8018e74 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8017a08:	e009      	b.n	8017a1e <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8017a0a:	2114      	movs	r1, #20
 8017a0c:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8017a10:	f001 fa30 	bl	8018e74 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8017a14:	2124      	movs	r1, #36	@ 0x24
 8017a16:	f240 7041 	movw	r0, #1857	@ 0x741
 8017a1a:	f001 fa2b 	bl	8018e74 <SUBGRF_WriteRegister>
}
 8017a1e:	bf00      	nop
 8017a20:	3708      	adds	r7, #8
 8017a22:	46bd      	mov	sp, r7
 8017a24:	bd80      	pop	{r7, pc}
 8017a26:	bf00      	nop
 8017a28:	2000133c 	.word	0x2000133c

08017a2c <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8017a2c:	b580      	push	{r7, lr}
 8017a2e:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8017a30:	f001 fb70 	bl	8019114 <SUBGRF_GetRadioWakeUpTime>
 8017a34:	4603      	mov	r3, r0
 8017a36:	3303      	adds	r3, #3
}
 8017a38:	4618      	mov	r0, r3
 8017a3a:	bd80      	pop	{r7, pc}

08017a3c <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8017a3c:	b580      	push	{r7, lr}
 8017a3e:	b082      	sub	sp, #8
 8017a40:	af00      	add	r7, sp, #0
 8017a42:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8017a44:	f000 f80e 	bl	8017a64 <RadioOnTxTimeoutProcess>
}
 8017a48:	bf00      	nop
 8017a4a:	3708      	adds	r7, #8
 8017a4c:	46bd      	mov	sp, r7
 8017a4e:	bd80      	pop	{r7, pc}

08017a50 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8017a50:	b580      	push	{r7, lr}
 8017a52:	b082      	sub	sp, #8
 8017a54:	af00      	add	r7, sp, #0
 8017a56:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8017a58:	f000 f81e 	bl	8017a98 <RadioOnRxTimeoutProcess>
}
 8017a5c:	bf00      	nop
 8017a5e:	3708      	adds	r7, #8
 8017a60:	46bd      	mov	sp, r7
 8017a62:	bd80      	pop	{r7, pc}

08017a64 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8017a64:	b580      	push	{r7, lr}
 8017a66:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );
 8017a68:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8017a6c:	4808      	ldr	r0, [pc, #32]	@ (8017a90 <RadioOnTxTimeoutProcess+0x2c>)
 8017a6e:	f7ff f88e 	bl	8016b8e <LL_GPIO_ResetOutputPin>

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8017a72:	4b08      	ldr	r3, [pc, #32]	@ (8017a94 <RadioOnTxTimeoutProcess+0x30>)
 8017a74:	681b      	ldr	r3, [r3, #0]
 8017a76:	2b00      	cmp	r3, #0
 8017a78:	d008      	beq.n	8017a8c <RadioOnTxTimeoutProcess+0x28>
 8017a7a:	4b06      	ldr	r3, [pc, #24]	@ (8017a94 <RadioOnTxTimeoutProcess+0x30>)
 8017a7c:	681b      	ldr	r3, [r3, #0]
 8017a7e:	685b      	ldr	r3, [r3, #4]
 8017a80:	2b00      	cmp	r3, #0
 8017a82:	d003      	beq.n	8017a8c <RadioOnTxTimeoutProcess+0x28>
    {
        RadioEvents->TxTimeout( );
 8017a84:	4b03      	ldr	r3, [pc, #12]	@ (8017a94 <RadioOnTxTimeoutProcess+0x30>)
 8017a86:	681b      	ldr	r3, [r3, #0]
 8017a88:	685b      	ldr	r3, [r3, #4]
 8017a8a:	4798      	blx	r3
    }
}
 8017a8c:	bf00      	nop
 8017a8e:	bd80      	pop	{r7, pc}
 8017a90:	48000400 	.word	0x48000400
 8017a94:	20001338 	.word	0x20001338

08017a98 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8017a98:	b580      	push	{r7, lr}
 8017a9a:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );
 8017a9c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8017aa0:	4808      	ldr	r0, [pc, #32]	@ (8017ac4 <RadioOnRxTimeoutProcess+0x2c>)
 8017aa2:	f7ff f874 	bl	8016b8e <LL_GPIO_ResetOutputPin>

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8017aa6:	4b08      	ldr	r3, [pc, #32]	@ (8017ac8 <RadioOnRxTimeoutProcess+0x30>)
 8017aa8:	681b      	ldr	r3, [r3, #0]
 8017aaa:	2b00      	cmp	r3, #0
 8017aac:	d008      	beq.n	8017ac0 <RadioOnRxTimeoutProcess+0x28>
 8017aae:	4b06      	ldr	r3, [pc, #24]	@ (8017ac8 <RadioOnRxTimeoutProcess+0x30>)
 8017ab0:	681b      	ldr	r3, [r3, #0]
 8017ab2:	68db      	ldr	r3, [r3, #12]
 8017ab4:	2b00      	cmp	r3, #0
 8017ab6:	d003      	beq.n	8017ac0 <RadioOnRxTimeoutProcess+0x28>
    {
        RadioEvents->RxTimeout( );
 8017ab8:	4b03      	ldr	r3, [pc, #12]	@ (8017ac8 <RadioOnRxTimeoutProcess+0x30>)
 8017aba:	681b      	ldr	r3, [r3, #0]
 8017abc:	68db      	ldr	r3, [r3, #12]
 8017abe:	4798      	blx	r3
    }
}
 8017ac0:	bf00      	nop
 8017ac2:	bd80      	pop	{r7, pc}
 8017ac4:	48000400 	.word	0x48000400
 8017ac8:	20001338 	.word	0x20001338

08017acc <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8017acc:	b580      	push	{r7, lr}
 8017ace:	b082      	sub	sp, #8
 8017ad0:	af00      	add	r7, sp, #0
 8017ad2:	4603      	mov	r3, r0
 8017ad4:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8017ad6:	4a05      	ldr	r2, [pc, #20]	@ (8017aec <RadioOnDioIrq+0x20>)
 8017ad8:	88fb      	ldrh	r3, [r7, #6]
 8017ada:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

    RADIO_IRQ_PROCESS();
 8017ade:	f000 f807 	bl	8017af0 <RadioIrqProcess>
}
 8017ae2:	bf00      	nop
 8017ae4:	3708      	adds	r7, #8
 8017ae6:	46bd      	mov	sp, r7
 8017ae8:	bd80      	pop	{r7, pc}
 8017aea:	bf00      	nop
 8017aec:	2000133c 	.word	0x2000133c

08017af0 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8017af0:	b5b0      	push	{r4, r5, r7, lr}
 8017af2:	b082      	sub	sp, #8
 8017af4:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8017af6:	2300      	movs	r3, #0
 8017af8:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8017afa:	2300      	movs	r3, #0
 8017afc:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 8017afe:	4bb2      	ldr	r3, [pc, #712]	@ (8017dc8 <RadioIrqProcess+0x2d8>)
 8017b00:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8017b04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017b08:	f000 8117 	beq.w	8017d3a <RadioIrqProcess+0x24a>
 8017b0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017b10:	f300 81fe 	bgt.w	8017f10 <RadioIrqProcess+0x420>
 8017b14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017b18:	f000 80fb 	beq.w	8017d12 <RadioIrqProcess+0x222>
 8017b1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017b20:	f300 81f6 	bgt.w	8017f10 <RadioIrqProcess+0x420>
 8017b24:	2b80      	cmp	r3, #128	@ 0x80
 8017b26:	f000 80e0 	beq.w	8017cea <RadioIrqProcess+0x1fa>
 8017b2a:	2b80      	cmp	r3, #128	@ 0x80
 8017b2c:	f300 81f0 	bgt.w	8017f10 <RadioIrqProcess+0x420>
 8017b30:	2b20      	cmp	r3, #32
 8017b32:	dc49      	bgt.n	8017bc8 <RadioIrqProcess+0xd8>
 8017b34:	2b00      	cmp	r3, #0
 8017b36:	f340 81eb 	ble.w	8017f10 <RadioIrqProcess+0x420>
 8017b3a:	3b01      	subs	r3, #1
 8017b3c:	2b1f      	cmp	r3, #31
 8017b3e:	f200 81e7 	bhi.w	8017f10 <RadioIrqProcess+0x420>
 8017b42:	a201      	add	r2, pc, #4	@ (adr r2, 8017b48 <RadioIrqProcess+0x58>)
 8017b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017b48:	08017bd1 	.word	0x08017bd1
 8017b4c:	08017c15 	.word	0x08017c15
 8017b50:	08017f11 	.word	0x08017f11
 8017b54:	08017ded 	.word	0x08017ded
 8017b58:	08017f11 	.word	0x08017f11
 8017b5c:	08017f11 	.word	0x08017f11
 8017b60:	08017f11 	.word	0x08017f11
 8017b64:	08017e69 	.word	0x08017e69
 8017b68:	08017f11 	.word	0x08017f11
 8017b6c:	08017f11 	.word	0x08017f11
 8017b70:	08017f11 	.word	0x08017f11
 8017b74:	08017f11 	.word	0x08017f11
 8017b78:	08017f11 	.word	0x08017f11
 8017b7c:	08017f11 	.word	0x08017f11
 8017b80:	08017f11 	.word	0x08017f11
 8017b84:	08017e85 	.word	0x08017e85
 8017b88:	08017f11 	.word	0x08017f11
 8017b8c:	08017f11 	.word	0x08017f11
 8017b90:	08017f11 	.word	0x08017f11
 8017b94:	08017f11 	.word	0x08017f11
 8017b98:	08017f11 	.word	0x08017f11
 8017b9c:	08017f11 	.word	0x08017f11
 8017ba0:	08017f11 	.word	0x08017f11
 8017ba4:	08017f11 	.word	0x08017f11
 8017ba8:	08017f11 	.word	0x08017f11
 8017bac:	08017f11 	.word	0x08017f11
 8017bb0:	08017f11 	.word	0x08017f11
 8017bb4:	08017f11 	.word	0x08017f11
 8017bb8:	08017f11 	.word	0x08017f11
 8017bbc:	08017f11 	.word	0x08017f11
 8017bc0:	08017f11 	.word	0x08017f11
 8017bc4:	08017e93 	.word	0x08017e93
 8017bc8:	2b40      	cmp	r3, #64	@ 0x40
 8017bca:	f000 8183 	beq.w	8017ed4 <RadioIrqProcess+0x3e4>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 8017bce:	e19f      	b.n	8017f10 <RadioIrqProcess+0x420>
        DBG_GPIO_RADIO_TX( RST );
 8017bd0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8017bd4:	487d      	ldr	r0, [pc, #500]	@ (8017dcc <RadioIrqProcess+0x2dc>)
 8017bd6:	f7fe ffda 	bl	8016b8e <LL_GPIO_ResetOutputPin>
        TimerStop( &TxTimeoutTimer );
 8017bda:	487d      	ldr	r0, [pc, #500]	@ (8017dd0 <RadioIrqProcess+0x2e0>)
 8017bdc:	f002 fb78 	bl	801a2d0 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8017be0:	2000      	movs	r0, #0
 8017be2:	f000 fbc3 	bl	801836c <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8017be6:	f001 fc2c 	bl	8019442 <RFW_Is_LongPacketModeEnabled>
 8017bea:	4603      	mov	r3, r0
 8017bec:	2b01      	cmp	r3, #1
 8017bee:	d101      	bne.n	8017bf4 <RadioIrqProcess+0x104>
            RFW_DeInit_TxLongPacket( );
 8017bf0:	f001 fc50 	bl	8019494 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8017bf4:	4b77      	ldr	r3, [pc, #476]	@ (8017dd4 <RadioIrqProcess+0x2e4>)
 8017bf6:	681b      	ldr	r3, [r3, #0]
 8017bf8:	2b00      	cmp	r3, #0
 8017bfa:	f000 818b 	beq.w	8017f14 <RadioIrqProcess+0x424>
 8017bfe:	4b75      	ldr	r3, [pc, #468]	@ (8017dd4 <RadioIrqProcess+0x2e4>)
 8017c00:	681b      	ldr	r3, [r3, #0]
 8017c02:	681b      	ldr	r3, [r3, #0]
 8017c04:	2b00      	cmp	r3, #0
 8017c06:	f000 8185 	beq.w	8017f14 <RadioIrqProcess+0x424>
            RadioEvents->TxDone( );
 8017c0a:	4b72      	ldr	r3, [pc, #456]	@ (8017dd4 <RadioIrqProcess+0x2e4>)
 8017c0c:	681b      	ldr	r3, [r3, #0]
 8017c0e:	681b      	ldr	r3, [r3, #0]
 8017c10:	4798      	blx	r3
        break;
 8017c12:	e17f      	b.n	8017f14 <RadioIrqProcess+0x424>
        DBG_GPIO_RADIO_RX( RST );
 8017c14:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8017c18:	486c      	ldr	r0, [pc, #432]	@ (8017dcc <RadioIrqProcess+0x2dc>)
 8017c1a:	f7fe ffb8 	bl	8016b8e <LL_GPIO_ResetOutputPin>
        TimerStop( &RxTimeoutTimer );
 8017c1e:	486e      	ldr	r0, [pc, #440]	@ (8017dd8 <RadioIrqProcess+0x2e8>)
 8017c20:	f002 fb56 	bl	801a2d0 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8017c24:	4b68      	ldr	r3, [pc, #416]	@ (8017dc8 <RadioIrqProcess+0x2d8>)
 8017c26:	785b      	ldrb	r3, [r3, #1]
 8017c28:	f083 0301 	eor.w	r3, r3, #1
 8017c2c:	b2db      	uxtb	r3, r3
 8017c2e:	2b00      	cmp	r3, #0
 8017c30:	d014      	beq.n	8017c5c <RadioIrqProcess+0x16c>
            SUBGRF_SetStandby( STDBY_RC );
 8017c32:	2000      	movs	r0, #0
 8017c34:	f000 fb9a 	bl	801836c <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8017c38:	2100      	movs	r1, #0
 8017c3a:	f640 1002 	movw	r0, #2306	@ 0x902
 8017c3e:	f001 f919 	bl	8018e74 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8017c42:	f640 1044 	movw	r0, #2372	@ 0x944
 8017c46:	f001 f929 	bl	8018e9c <SUBGRF_ReadRegister>
 8017c4a:	4603      	mov	r3, r0
 8017c4c:	f043 0302 	orr.w	r3, r3, #2
 8017c50:	b2db      	uxtb	r3, r3
 8017c52:	4619      	mov	r1, r3
 8017c54:	f640 1044 	movw	r0, #2372	@ 0x944
 8017c58:	f001 f90c 	bl	8018e74 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8017c5c:	1dfb      	adds	r3, r7, #7
 8017c5e:	22ff      	movs	r2, #255	@ 0xff
 8017c60:	4619      	mov	r1, r3
 8017c62:	485e      	ldr	r0, [pc, #376]	@ (8017ddc <RadioIrqProcess+0x2ec>)
 8017c64:	f000 fa50 	bl	8018108 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8017c68:	485d      	ldr	r0, [pc, #372]	@ (8017de0 <RadioIrqProcess+0x2f0>)
 8017c6a:	f001 f8b1 	bl	8018dd0 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8017c6e:	4b59      	ldr	r3, [pc, #356]	@ (8017dd4 <RadioIrqProcess+0x2e4>)
 8017c70:	681b      	ldr	r3, [r3, #0]
 8017c72:	2b00      	cmp	r3, #0
 8017c74:	f000 8150 	beq.w	8017f18 <RadioIrqProcess+0x428>
 8017c78:	4b56      	ldr	r3, [pc, #344]	@ (8017dd4 <RadioIrqProcess+0x2e4>)
 8017c7a:	681b      	ldr	r3, [r3, #0]
 8017c7c:	689b      	ldr	r3, [r3, #8]
 8017c7e:	2b00      	cmp	r3, #0
 8017c80:	f000 814a 	beq.w	8017f18 <RadioIrqProcess+0x428>
            switch( SubgRf.PacketStatus.packetType )
 8017c84:	4b50      	ldr	r3, [pc, #320]	@ (8017dc8 <RadioIrqProcess+0x2d8>)
 8017c86:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8017c8a:	2b01      	cmp	r3, #1
 8017c8c:	d10e      	bne.n	8017cac <RadioIrqProcess+0x1bc>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8017c8e:	4b51      	ldr	r3, [pc, #324]	@ (8017dd4 <RadioIrqProcess+0x2e4>)
 8017c90:	681b      	ldr	r3, [r3, #0]
 8017c92:	689c      	ldr	r4, [r3, #8]
 8017c94:	79fb      	ldrb	r3, [r7, #7]
 8017c96:	4619      	mov	r1, r3
 8017c98:	4b4b      	ldr	r3, [pc, #300]	@ (8017dc8 <RadioIrqProcess+0x2d8>)
 8017c9a:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 8017c9e:	461a      	mov	r2, r3
 8017ca0:	4b49      	ldr	r3, [pc, #292]	@ (8017dc8 <RadioIrqProcess+0x2d8>)
 8017ca2:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 8017ca6:	484d      	ldr	r0, [pc, #308]	@ (8017ddc <RadioIrqProcess+0x2ec>)
 8017ca8:	47a0      	blx	r4
                break;
 8017caa:	e01d      	b.n	8017ce8 <RadioIrqProcess+0x1f8>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8017cac:	4b46      	ldr	r3, [pc, #280]	@ (8017dc8 <RadioIrqProcess+0x2d8>)
 8017cae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017cb0:	463a      	mov	r2, r7
 8017cb2:	4611      	mov	r1, r2
 8017cb4:	4618      	mov	r0, r3
 8017cb6:	f001 fb1f 	bl	80192f8 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 8017cba:	4b46      	ldr	r3, [pc, #280]	@ (8017dd4 <RadioIrqProcess+0x2e4>)
 8017cbc:	681b      	ldr	r3, [r3, #0]
 8017cbe:	689c      	ldr	r4, [r3, #8]
 8017cc0:	79fb      	ldrb	r3, [r7, #7]
 8017cc2:	4619      	mov	r1, r3
 8017cc4:	4b40      	ldr	r3, [pc, #256]	@ (8017dc8 <RadioIrqProcess+0x2d8>)
 8017cc6:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 8017cca:	4618      	mov	r0, r3
 8017ccc:	683b      	ldr	r3, [r7, #0]
 8017cce:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8017cd2:	4a44      	ldr	r2, [pc, #272]	@ (8017de4 <RadioIrqProcess+0x2f4>)
 8017cd4:	fb82 5203 	smull	r5, r2, r2, r3
 8017cd8:	1192      	asrs	r2, r2, #6
 8017cda:	17db      	asrs	r3, r3, #31
 8017cdc:	1ad3      	subs	r3, r2, r3
 8017cde:	b25b      	sxtb	r3, r3
 8017ce0:	4602      	mov	r2, r0
 8017ce2:	483e      	ldr	r0, [pc, #248]	@ (8017ddc <RadioIrqProcess+0x2ec>)
 8017ce4:	47a0      	blx	r4
                break;
 8017ce6:	bf00      	nop
        break;
 8017ce8:	e116      	b.n	8017f18 <RadioIrqProcess+0x428>
        SUBGRF_SetStandby( STDBY_RC );
 8017cea:	2000      	movs	r0, #0
 8017cec:	f000 fb3e 	bl	801836c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8017cf0:	4b38      	ldr	r3, [pc, #224]	@ (8017dd4 <RadioIrqProcess+0x2e4>)
 8017cf2:	681b      	ldr	r3, [r3, #0]
 8017cf4:	2b00      	cmp	r3, #0
 8017cf6:	f000 8111 	beq.w	8017f1c <RadioIrqProcess+0x42c>
 8017cfa:	4b36      	ldr	r3, [pc, #216]	@ (8017dd4 <RadioIrqProcess+0x2e4>)
 8017cfc:	681b      	ldr	r3, [r3, #0]
 8017cfe:	699b      	ldr	r3, [r3, #24]
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	f000 810b 	beq.w	8017f1c <RadioIrqProcess+0x42c>
            RadioEvents->CadDone( false );
 8017d06:	4b33      	ldr	r3, [pc, #204]	@ (8017dd4 <RadioIrqProcess+0x2e4>)
 8017d08:	681b      	ldr	r3, [r3, #0]
 8017d0a:	699b      	ldr	r3, [r3, #24]
 8017d0c:	2000      	movs	r0, #0
 8017d0e:	4798      	blx	r3
        break;
 8017d10:	e104      	b.n	8017f1c <RadioIrqProcess+0x42c>
        SUBGRF_SetStandby( STDBY_RC );
 8017d12:	2000      	movs	r0, #0
 8017d14:	f000 fb2a 	bl	801836c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8017d18:	4b2e      	ldr	r3, [pc, #184]	@ (8017dd4 <RadioIrqProcess+0x2e4>)
 8017d1a:	681b      	ldr	r3, [r3, #0]
 8017d1c:	2b00      	cmp	r3, #0
 8017d1e:	f000 80ff 	beq.w	8017f20 <RadioIrqProcess+0x430>
 8017d22:	4b2c      	ldr	r3, [pc, #176]	@ (8017dd4 <RadioIrqProcess+0x2e4>)
 8017d24:	681b      	ldr	r3, [r3, #0]
 8017d26:	699b      	ldr	r3, [r3, #24]
 8017d28:	2b00      	cmp	r3, #0
 8017d2a:	f000 80f9 	beq.w	8017f20 <RadioIrqProcess+0x430>
            RadioEvents->CadDone( true );
 8017d2e:	4b29      	ldr	r3, [pc, #164]	@ (8017dd4 <RadioIrqProcess+0x2e4>)
 8017d30:	681b      	ldr	r3, [r3, #0]
 8017d32:	699b      	ldr	r3, [r3, #24]
 8017d34:	2001      	movs	r0, #1
 8017d36:	4798      	blx	r3
        break;
 8017d38:	e0f2      	b.n	8017f20 <RadioIrqProcess+0x430>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8017d3a:	4b2b      	ldr	r3, [pc, #172]	@ (8017de8 <RadioIrqProcess+0x2f8>)
 8017d3c:	2201      	movs	r2, #1
 8017d3e:	2100      	movs	r1, #0
 8017d40:	2002      	movs	r0, #2
 8017d42:	f001 fbeb 	bl	801951c <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8017d46:	f000 f9c5 	bl	80180d4 <SUBGRF_GetOperatingMode>
 8017d4a:	4603      	mov	r3, r0
 8017d4c:	2b04      	cmp	r3, #4
 8017d4e:	d11a      	bne.n	8017d86 <RadioIrqProcess+0x296>
            DBG_GPIO_RADIO_TX( RST );
 8017d50:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8017d54:	481d      	ldr	r0, [pc, #116]	@ (8017dcc <RadioIrqProcess+0x2dc>)
 8017d56:	f7fe ff1a 	bl	8016b8e <LL_GPIO_ResetOutputPin>
            TimerStop( &TxTimeoutTimer );
 8017d5a:	481d      	ldr	r0, [pc, #116]	@ (8017dd0 <RadioIrqProcess+0x2e0>)
 8017d5c:	f002 fab8 	bl	801a2d0 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8017d60:	2000      	movs	r0, #0
 8017d62:	f000 fb03 	bl	801836c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8017d66:	4b1b      	ldr	r3, [pc, #108]	@ (8017dd4 <RadioIrqProcess+0x2e4>)
 8017d68:	681b      	ldr	r3, [r3, #0]
 8017d6a:	2b00      	cmp	r3, #0
 8017d6c:	f000 80da 	beq.w	8017f24 <RadioIrqProcess+0x434>
 8017d70:	4b18      	ldr	r3, [pc, #96]	@ (8017dd4 <RadioIrqProcess+0x2e4>)
 8017d72:	681b      	ldr	r3, [r3, #0]
 8017d74:	685b      	ldr	r3, [r3, #4]
 8017d76:	2b00      	cmp	r3, #0
 8017d78:	f000 80d4 	beq.w	8017f24 <RadioIrqProcess+0x434>
                RadioEvents->TxTimeout( );
 8017d7c:	4b15      	ldr	r3, [pc, #84]	@ (8017dd4 <RadioIrqProcess+0x2e4>)
 8017d7e:	681b      	ldr	r3, [r3, #0]
 8017d80:	685b      	ldr	r3, [r3, #4]
 8017d82:	4798      	blx	r3
        break;
 8017d84:	e0ce      	b.n	8017f24 <RadioIrqProcess+0x434>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8017d86:	f000 f9a5 	bl	80180d4 <SUBGRF_GetOperatingMode>
 8017d8a:	4603      	mov	r3, r0
 8017d8c:	2b05      	cmp	r3, #5
 8017d8e:	f040 80c9 	bne.w	8017f24 <RadioIrqProcess+0x434>
            DBG_GPIO_RADIO_RX( RST );
 8017d92:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8017d96:	480d      	ldr	r0, [pc, #52]	@ (8017dcc <RadioIrqProcess+0x2dc>)
 8017d98:	f7fe fef9 	bl	8016b8e <LL_GPIO_ResetOutputPin>
            TimerStop( &RxTimeoutTimer );
 8017d9c:	480e      	ldr	r0, [pc, #56]	@ (8017dd8 <RadioIrqProcess+0x2e8>)
 8017d9e:	f002 fa97 	bl	801a2d0 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8017da2:	2000      	movs	r0, #0
 8017da4:	f000 fae2 	bl	801836c <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8017da8:	4b0a      	ldr	r3, [pc, #40]	@ (8017dd4 <RadioIrqProcess+0x2e4>)
 8017daa:	681b      	ldr	r3, [r3, #0]
 8017dac:	2b00      	cmp	r3, #0
 8017dae:	f000 80b9 	beq.w	8017f24 <RadioIrqProcess+0x434>
 8017db2:	4b08      	ldr	r3, [pc, #32]	@ (8017dd4 <RadioIrqProcess+0x2e4>)
 8017db4:	681b      	ldr	r3, [r3, #0]
 8017db6:	68db      	ldr	r3, [r3, #12]
 8017db8:	2b00      	cmp	r3, #0
 8017dba:	f000 80b3 	beq.w	8017f24 <RadioIrqProcess+0x434>
                RadioEvents->RxTimeout( );
 8017dbe:	4b05      	ldr	r3, [pc, #20]	@ (8017dd4 <RadioIrqProcess+0x2e4>)
 8017dc0:	681b      	ldr	r3, [r3, #0]
 8017dc2:	68db      	ldr	r3, [r3, #12]
 8017dc4:	4798      	blx	r3
        break;
 8017dc6:	e0ad      	b.n	8017f24 <RadioIrqProcess+0x434>
 8017dc8:	2000133c 	.word	0x2000133c
 8017dcc:	48000400 	.word	0x48000400
 8017dd0:	20001398 	.word	0x20001398
 8017dd4:	20001338 	.word	0x20001338
 8017dd8:	200013b0 	.word	0x200013b0
 8017ddc:	20001238 	.word	0x20001238
 8017de0:	20001360 	.word	0x20001360
 8017de4:	10624dd3 	.word	0x10624dd3
 8017de8:	0802098c 	.word	0x0802098c
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8017dec:	4b54      	ldr	r3, [pc, #336]	@ (8017f40 <RadioIrqProcess+0x450>)
 8017dee:	2201      	movs	r2, #1
 8017df0:	2100      	movs	r1, #0
 8017df2:	2002      	movs	r0, #2
 8017df4:	f001 fb92 	bl	801951c <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8017df8:	4b52      	ldr	r3, [pc, #328]	@ (8017f44 <RadioIrqProcess+0x454>)
 8017dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017dfc:	2b00      	cmp	r3, #0
 8017dfe:	f000 8093 	beq.w	8017f28 <RadioIrqProcess+0x438>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 8017e02:	4a51      	ldr	r2, [pc, #324]	@ (8017f48 <RadioIrqProcess+0x458>)
 8017e04:	4b4f      	ldr	r3, [pc, #316]	@ (8017f44 <RadioIrqProcess+0x454>)
 8017e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017e08:	0c1b      	lsrs	r3, r3, #16
 8017e0a:	b2db      	uxtb	r3, r3
 8017e0c:	4619      	mov	r1, r3
 8017e0e:	f640 1003 	movw	r0, #2307	@ 0x903
 8017e12:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 8017e14:	4a4c      	ldr	r2, [pc, #304]	@ (8017f48 <RadioIrqProcess+0x458>)
 8017e16:	4b4b      	ldr	r3, [pc, #300]	@ (8017f44 <RadioIrqProcess+0x454>)
 8017e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017e1a:	0a1b      	lsrs	r3, r3, #8
 8017e1c:	b2db      	uxtb	r3, r3
 8017e1e:	4619      	mov	r1, r3
 8017e20:	f640 1004 	movw	r0, #2308	@ 0x904
 8017e24:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 8017e26:	4a48      	ldr	r2, [pc, #288]	@ (8017f48 <RadioIrqProcess+0x458>)
 8017e28:	4b46      	ldr	r3, [pc, #280]	@ (8017f44 <RadioIrqProcess+0x454>)
 8017e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017e2c:	b2db      	uxtb	r3, r3
 8017e2e:	4619      	mov	r1, r3
 8017e30:	f640 1005 	movw	r0, #2309	@ 0x905
 8017e34:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 8017e36:	4c44      	ldr	r4, [pc, #272]	@ (8017f48 <RadioIrqProcess+0x458>)
 8017e38:	4b44      	ldr	r3, [pc, #272]	@ (8017f4c <RadioIrqProcess+0x45c>)
 8017e3a:	f640 1002 	movw	r0, #2306	@ 0x902
 8017e3e:	4798      	blx	r3
 8017e40:	4603      	mov	r3, r0
 8017e42:	f043 0301 	orr.w	r3, r3, #1
 8017e46:	b2db      	uxtb	r3, r3
 8017e48:	4619      	mov	r1, r3
 8017e4a:	f640 1002 	movw	r0, #2306	@ 0x902
 8017e4e:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 8017e50:	4b3c      	ldr	r3, [pc, #240]	@ (8017f44 <RadioIrqProcess+0x454>)
 8017e52:	2200      	movs	r2, #0
 8017e54:	659a      	str	r2, [r3, #88]	@ 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8017e56:	2300      	movs	r3, #0
 8017e58:	2200      	movs	r2, #0
 8017e5a:	f240 2162 	movw	r1, #610	@ 0x262
 8017e5e:	f240 2062 	movw	r0, #610	@ 0x262
 8017e62:	f000 fc5d 	bl	8018720 <SUBGRF_SetDioIrqParams>
        break;
 8017e66:	e05f      	b.n	8017f28 <RadioIrqProcess+0x438>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8017e68:	4b39      	ldr	r3, [pc, #228]	@ (8017f50 <RadioIrqProcess+0x460>)
 8017e6a:	2201      	movs	r2, #1
 8017e6c:	2100      	movs	r1, #0
 8017e6e:	2002      	movs	r0, #2
 8017e70:	f001 fb54 	bl	801951c <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8017e74:	f001 fade 	bl	8019434 <RFW_Is_Init>
 8017e78:	4603      	mov	r3, r0
 8017e7a:	2b01      	cmp	r3, #1
 8017e7c:	d156      	bne.n	8017f2c <RadioIrqProcess+0x43c>
            RFW_ReceivePayload( );
 8017e7e:	f001 fb0f 	bl	80194a0 <RFW_ReceivePayload>
        break;
 8017e82:	e053      	b.n	8017f2c <RadioIrqProcess+0x43c>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8017e84:	4b33      	ldr	r3, [pc, #204]	@ (8017f54 <RadioIrqProcess+0x464>)
 8017e86:	2201      	movs	r2, #1
 8017e88:	2100      	movs	r1, #0
 8017e8a:	2002      	movs	r0, #2
 8017e8c:	f001 fb46 	bl	801951c <UTIL_ADV_TRACE_COND_FSend>
        break;
 8017e90:	e051      	b.n	8017f36 <RadioIrqProcess+0x446>
        TimerStop( &RxTimeoutTimer );
 8017e92:	4831      	ldr	r0, [pc, #196]	@ (8017f58 <RadioIrqProcess+0x468>)
 8017e94:	f002 fa1c 	bl	801a2d0 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8017e98:	4b2a      	ldr	r3, [pc, #168]	@ (8017f44 <RadioIrqProcess+0x454>)
 8017e9a:	785b      	ldrb	r3, [r3, #1]
 8017e9c:	f083 0301 	eor.w	r3, r3, #1
 8017ea0:	b2db      	uxtb	r3, r3
 8017ea2:	2b00      	cmp	r3, #0
 8017ea4:	d002      	beq.n	8017eac <RadioIrqProcess+0x3bc>
            SUBGRF_SetStandby( STDBY_RC );
 8017ea6:	2000      	movs	r0, #0
 8017ea8:	f000 fa60 	bl	801836c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8017eac:	4b2b      	ldr	r3, [pc, #172]	@ (8017f5c <RadioIrqProcess+0x46c>)
 8017eae:	681b      	ldr	r3, [r3, #0]
 8017eb0:	2b00      	cmp	r3, #0
 8017eb2:	d03d      	beq.n	8017f30 <RadioIrqProcess+0x440>
 8017eb4:	4b29      	ldr	r3, [pc, #164]	@ (8017f5c <RadioIrqProcess+0x46c>)
 8017eb6:	681b      	ldr	r3, [r3, #0]
 8017eb8:	68db      	ldr	r3, [r3, #12]
 8017eba:	2b00      	cmp	r3, #0
 8017ebc:	d038      	beq.n	8017f30 <RadioIrqProcess+0x440>
            RadioEvents->RxTimeout( );
 8017ebe:	4b27      	ldr	r3, [pc, #156]	@ (8017f5c <RadioIrqProcess+0x46c>)
 8017ec0:	681b      	ldr	r3, [r3, #0]
 8017ec2:	68db      	ldr	r3, [r3, #12]
 8017ec4:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8017ec6:	4b26      	ldr	r3, [pc, #152]	@ (8017f60 <RadioIrqProcess+0x470>)
 8017ec8:	2201      	movs	r2, #1
 8017eca:	2100      	movs	r1, #0
 8017ecc:	2002      	movs	r0, #2
 8017ece:	f001 fb25 	bl	801951c <UTIL_ADV_TRACE_COND_FSend>
        break;
 8017ed2:	e02d      	b.n	8017f30 <RadioIrqProcess+0x440>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8017ed4:	4b23      	ldr	r3, [pc, #140]	@ (8017f64 <RadioIrqProcess+0x474>)
 8017ed6:	2201      	movs	r2, #1
 8017ed8:	2100      	movs	r1, #0
 8017eda:	2002      	movs	r0, #2
 8017edc:	f001 fb1e 	bl	801951c <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8017ee0:	4b18      	ldr	r3, [pc, #96]	@ (8017f44 <RadioIrqProcess+0x454>)
 8017ee2:	785b      	ldrb	r3, [r3, #1]
 8017ee4:	f083 0301 	eor.w	r3, r3, #1
 8017ee8:	b2db      	uxtb	r3, r3
 8017eea:	2b00      	cmp	r3, #0
 8017eec:	d002      	beq.n	8017ef4 <RadioIrqProcess+0x404>
            SUBGRF_SetStandby( STDBY_RC );
 8017eee:	2000      	movs	r0, #0
 8017ef0:	f000 fa3c 	bl	801836c <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8017ef4:	4b19      	ldr	r3, [pc, #100]	@ (8017f5c <RadioIrqProcess+0x46c>)
 8017ef6:	681b      	ldr	r3, [r3, #0]
 8017ef8:	2b00      	cmp	r3, #0
 8017efa:	d01b      	beq.n	8017f34 <RadioIrqProcess+0x444>
 8017efc:	4b17      	ldr	r3, [pc, #92]	@ (8017f5c <RadioIrqProcess+0x46c>)
 8017efe:	681b      	ldr	r3, [r3, #0]
 8017f00:	691b      	ldr	r3, [r3, #16]
 8017f02:	2b00      	cmp	r3, #0
 8017f04:	d016      	beq.n	8017f34 <RadioIrqProcess+0x444>
            RadioEvents->RxError( );
 8017f06:	4b15      	ldr	r3, [pc, #84]	@ (8017f5c <RadioIrqProcess+0x46c>)
 8017f08:	681b      	ldr	r3, [r3, #0]
 8017f0a:	691b      	ldr	r3, [r3, #16]
 8017f0c:	4798      	blx	r3
        break;
 8017f0e:	e011      	b.n	8017f34 <RadioIrqProcess+0x444>
        break;
 8017f10:	bf00      	nop
 8017f12:	e010      	b.n	8017f36 <RadioIrqProcess+0x446>
        break;
 8017f14:	bf00      	nop
 8017f16:	e00e      	b.n	8017f36 <RadioIrqProcess+0x446>
        break;
 8017f18:	bf00      	nop
 8017f1a:	e00c      	b.n	8017f36 <RadioIrqProcess+0x446>
        break;
 8017f1c:	bf00      	nop
 8017f1e:	e00a      	b.n	8017f36 <RadioIrqProcess+0x446>
        break;
 8017f20:	bf00      	nop
 8017f22:	e008      	b.n	8017f36 <RadioIrqProcess+0x446>
        break;
 8017f24:	bf00      	nop
 8017f26:	e006      	b.n	8017f36 <RadioIrqProcess+0x446>
        break;
 8017f28:	bf00      	nop
 8017f2a:	e004      	b.n	8017f36 <RadioIrqProcess+0x446>
        break;
 8017f2c:	bf00      	nop
 8017f2e:	e002      	b.n	8017f36 <RadioIrqProcess+0x446>
        break;
 8017f30:	bf00      	nop
 8017f32:	e000      	b.n	8017f36 <RadioIrqProcess+0x446>
        break;
 8017f34:	bf00      	nop
    }
}
 8017f36:	bf00      	nop
 8017f38:	3708      	adds	r7, #8
 8017f3a:	46bd      	mov	sp, r7
 8017f3c:	bdb0      	pop	{r4, r5, r7, pc}
 8017f3e:	bf00      	nop
 8017f40:	080209a0 	.word	0x080209a0
 8017f44:	2000133c 	.word	0x2000133c
 8017f48:	080178e9 	.word	0x080178e9
 8017f4c:	0801790d 	.word	0x0801790d
 8017f50:	080209ac 	.word	0x080209ac
 8017f54:	080209b8 	.word	0x080209b8
 8017f58:	200013b0 	.word	0x200013b0
 8017f5c:	20001338 	.word	0x20001338
 8017f60:	080209c4 	.word	0x080209c4
 8017f64:	080209d0 	.word	0x080209d0

08017f68 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8017f68:	b580      	push	{r7, lr}
 8017f6a:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8017f6c:	4b09      	ldr	r3, [pc, #36]	@ (8017f94 <RadioTxPrbs+0x2c>)
 8017f6e:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8017f72:	2101      	movs	r1, #1
 8017f74:	4618      	mov	r0, r3
 8017f76:	f001 f871 	bl	801905c <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8017f7a:	4b07      	ldr	r3, [pc, #28]	@ (8017f98 <RadioTxPrbs+0x30>)
 8017f7c:	212d      	movs	r1, #45	@ 0x2d
 8017f7e:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8017f82:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 8017f84:	f000 fab5 	bl	80184f2 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8017f88:	4804      	ldr	r0, [pc, #16]	@ (8017f9c <RadioTxPrbs+0x34>)
 8017f8a:	f000 fa0b 	bl	80183a4 <SUBGRF_SetTx>
}
 8017f8e:	bf00      	nop
 8017f90:	bd80      	pop	{r7, pc}
 8017f92:	bf00      	nop
 8017f94:	2000133c 	.word	0x2000133c
 8017f98:	080178e9 	.word	0x080178e9
 8017f9c:	000fffff 	.word	0x000fffff

08017fa0 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8017fa0:	b580      	push	{r7, lr}
 8017fa2:	b084      	sub	sp, #16
 8017fa4:	af00      	add	r7, sp, #0
 8017fa6:	4603      	mov	r3, r0
 8017fa8:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8017faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017fae:	4618      	mov	r0, r3
 8017fb0:	f001 f87c 	bl	80190ac <SUBGRF_SetRfTxPower>
 8017fb4:	4603      	mov	r3, r0
 8017fb6:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8017fb8:	210e      	movs	r1, #14
 8017fba:	f640 101f 	movw	r0, #2335	@ 0x91f
 8017fbe:	f000 ff59 	bl	8018e74 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8017fc2:	7bfb      	ldrb	r3, [r7, #15]
 8017fc4:	2101      	movs	r1, #1
 8017fc6:	4618      	mov	r0, r3
 8017fc8:	f001 f848 	bl	801905c <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8017fcc:	f000 fa88 	bl	80184e0 <SUBGRF_SetTxContinuousWave>
}
 8017fd0:	bf00      	nop
 8017fd2:	3710      	adds	r7, #16
 8017fd4:	46bd      	mov	sp, r7
 8017fd6:	bd80      	pop	{r7, pc}

08017fd8 <RadioSetRxGenericConfig>:
}
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 8017fd8:	b480      	push	{r7}
 8017fda:	b085      	sub	sp, #20
 8017fdc:	af00      	add	r7, sp, #0
 8017fde:	60b9      	str	r1, [r7, #8]
 8017fe0:	607a      	str	r2, [r7, #4]
 8017fe2:	603b      	str	r3, [r7, #0]
 8017fe4:	4603      	mov	r3, r0
 8017fe6:	73fb      	strb	r3, [r7, #15]
    default:
        break;
    }
    return status;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
 8017fe8:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8017fec:	4618      	mov	r0, r3
 8017fee:	3714      	adds	r7, #20
 8017ff0:	46bd      	mov	sp, r7
 8017ff2:	bc80      	pop	{r7}
 8017ff4:	4770      	bx	lr

08017ff6 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 8017ff6:	b480      	push	{r7}
 8017ff8:	b085      	sub	sp, #20
 8017ffa:	af00      	add	r7, sp, #0
 8017ffc:	60b9      	str	r1, [r7, #8]
 8017ffe:	607b      	str	r3, [r7, #4]
 8018000:	4603      	mov	r3, r0
 8018002:	73fb      	strb	r3, [r7, #15]
 8018004:	4613      	mov	r3, r2
 8018006:	73bb      	strb	r3, [r7, #14]
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
    SubgRf.TxTimeout = timeout;
    return 0;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
 8018008:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801800c:	4618      	mov	r0, r3
 801800e:	3714      	adds	r7, #20
 8018010:	46bd      	mov	sp, r7
 8018012:	bc80      	pop	{r7}
 8018014:	4770      	bx	lr

08018016 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 8018016:	b480      	push	{r7}
 8018018:	b085      	sub	sp, #20
 801801a:	af00      	add	r7, sp, #0
 801801c:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 801801e:	2301      	movs	r3, #1
 8018020:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 8018022:	7bfb      	ldrb	r3, [r7, #15]
}
 8018024:	4618      	mov	r0, r3
 8018026:	3714      	adds	r7, #20
 8018028:	46bd      	mov	sp, r7
 801802a:	bc80      	pop	{r7}
 801802c:	4770      	bx	lr

0801802e <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 801802e:	b480      	push	{r7}
 8018030:	b083      	sub	sp, #12
 8018032:	af00      	add	r7, sp, #0
 8018034:	6078      	str	r0, [r7, #4]
 8018036:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 8018038:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 801803a:	4618      	mov	r0, r3
 801803c:	370c      	adds	r7, #12
 801803e:	46bd      	mov	sp, r7
 8018040:	bc80      	pop	{r7}
 8018042:	4770      	bx	lr

08018044 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8018044:	b580      	push	{r7, lr}
 8018046:	b084      	sub	sp, #16
 8018048:	af00      	add	r7, sp, #0
 801804a:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 801804c:	687b      	ldr	r3, [r7, #4]
 801804e:	2b00      	cmp	r3, #0
 8018050:	d002      	beq.n	8018058 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8018052:	4a1d      	ldr	r2, [pc, #116]	@ (80180c8 <SUBGRF_Init+0x84>)
 8018054:	687b      	ldr	r3, [r7, #4]
 8018056:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8018058:	f7e9 fa9c 	bl	8001594 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 801805c:	2002      	movs	r0, #2
 801805e:	f001 f901 	bl	8019264 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8018062:	4b1a      	ldr	r3, [pc, #104]	@ (80180cc <SUBGRF_Init+0x88>)
 8018064:	2200      	movs	r2, #0
 8018066:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8018068:	2000      	movs	r0, #0
 801806a:	f000 f97f 	bl	801836c <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 801806e:	f7ea fb0b 	bl	8002688 <RBI_IsTCXO>
 8018072:	4603      	mov	r3, r0
 8018074:	2b01      	cmp	r3, #1
 8018076:	d10e      	bne.n	8018096 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8018078:	2140      	movs	r1, #64	@ 0x40
 801807a:	2001      	movs	r0, #1
 801807c:	f000 fb8a 	bl	8018794 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8018080:	2100      	movs	r1, #0
 8018082:	f640 1011 	movw	r0, #2321	@ 0x911
 8018086:	f000 fef5 	bl	8018e74 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 801808a:	237f      	movs	r3, #127	@ 0x7f
 801808c:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 801808e:	7b38      	ldrb	r0, [r7, #12]
 8018090:	f000 fa8d 	bl	80185ae <SUBGRF_Calibrate>
 8018094:	e009      	b.n	80180aa <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8018096:	2120      	movs	r1, #32
 8018098:	f640 1011 	movw	r0, #2321	@ 0x911
 801809c:	f000 feea 	bl	8018e74 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80180a0:	2120      	movs	r1, #32
 80180a2:	f640 1012 	movw	r0, #2322	@ 0x912
 80180a6:	f000 fee5 	bl	8018e74 <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80180aa:	210e      	movs	r1, #14
 80180ac:	f640 101f 	movw	r0, #2335	@ 0x91f
 80180b0:	f000 fee0 	bl	8018e74 <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 80180b4:	f7ea facc 	bl	8002650 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 80180b8:	4b05      	ldr	r3, [pc, #20]	@ (80180d0 <SUBGRF_Init+0x8c>)
 80180ba:	2201      	movs	r2, #1
 80180bc:	701a      	strb	r2, [r3, #0]
}
 80180be:	bf00      	nop
 80180c0:	3710      	adds	r7, #16
 80180c2:	46bd      	mov	sp, r7
 80180c4:	bd80      	pop	{r7, pc}
 80180c6:	bf00      	nop
 80180c8:	200013d4 	.word	0x200013d4
 80180cc:	200013d0 	.word	0x200013d0
 80180d0:	200013c8 	.word	0x200013c8

080180d4 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 80180d4:	b480      	push	{r7}
 80180d6:	af00      	add	r7, sp, #0
    return OperatingMode;
 80180d8:	4b02      	ldr	r3, [pc, #8]	@ (80180e4 <SUBGRF_GetOperatingMode+0x10>)
 80180da:	781b      	ldrb	r3, [r3, #0]
}
 80180dc:	4618      	mov	r0, r3
 80180de:	46bd      	mov	sp, r7
 80180e0:	bc80      	pop	{r7}
 80180e2:	4770      	bx	lr
 80180e4:	200013c8 	.word	0x200013c8

080180e8 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 80180e8:	b580      	push	{r7, lr}
 80180ea:	b082      	sub	sp, #8
 80180ec:	af00      	add	r7, sp, #0
 80180ee:	6078      	str	r0, [r7, #4]
 80180f0:	460b      	mov	r3, r1
 80180f2:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 80180f4:	78fb      	ldrb	r3, [r7, #3]
 80180f6:	461a      	mov	r2, r3
 80180f8:	6879      	ldr	r1, [r7, #4]
 80180fa:	2000      	movs	r0, #0
 80180fc:	f000 ff26 	bl	8018f4c <SUBGRF_WriteBuffer>
}
 8018100:	bf00      	nop
 8018102:	3708      	adds	r7, #8
 8018104:	46bd      	mov	sp, r7
 8018106:	bd80      	pop	{r7, pc}

08018108 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8018108:	b580      	push	{r7, lr}
 801810a:	b086      	sub	sp, #24
 801810c:	af00      	add	r7, sp, #0
 801810e:	60f8      	str	r0, [r7, #12]
 8018110:	60b9      	str	r1, [r7, #8]
 8018112:	4613      	mov	r3, r2
 8018114:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8018116:	2300      	movs	r3, #0
 8018118:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 801811a:	f107 0317 	add.w	r3, r7, #23
 801811e:	4619      	mov	r1, r3
 8018120:	68b8      	ldr	r0, [r7, #8]
 8018122:	f000 fe29 	bl	8018d78 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8018126:	68bb      	ldr	r3, [r7, #8]
 8018128:	781b      	ldrb	r3, [r3, #0]
 801812a:	79fa      	ldrb	r2, [r7, #7]
 801812c:	429a      	cmp	r2, r3
 801812e:	d201      	bcs.n	8018134 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8018130:	2301      	movs	r3, #1
 8018132:	e007      	b.n	8018144 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8018134:	7df8      	ldrb	r0, [r7, #23]
 8018136:	68bb      	ldr	r3, [r7, #8]
 8018138:	781b      	ldrb	r3, [r3, #0]
 801813a:	461a      	mov	r2, r3
 801813c:	68f9      	ldr	r1, [r7, #12]
 801813e:	f000 ff27 	bl	8018f90 <SUBGRF_ReadBuffer>

    return 0;
 8018142:	2300      	movs	r3, #0
}
 8018144:	4618      	mov	r0, r3
 8018146:	3718      	adds	r7, #24
 8018148:	46bd      	mov	sp, r7
 801814a:	bd80      	pop	{r7, pc}

0801814c <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 801814c:	b580      	push	{r7, lr}
 801814e:	b084      	sub	sp, #16
 8018150:	af00      	add	r7, sp, #0
 8018152:	60f8      	str	r0, [r7, #12]
 8018154:	460b      	mov	r3, r1
 8018156:	607a      	str	r2, [r7, #4]
 8018158:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 801815a:	7afb      	ldrb	r3, [r7, #11]
 801815c:	4619      	mov	r1, r3
 801815e:	68f8      	ldr	r0, [r7, #12]
 8018160:	f7ff ffc2 	bl	80180e8 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8018164:	6878      	ldr	r0, [r7, #4]
 8018166:	f000 f91d 	bl	80183a4 <SUBGRF_SetTx>
}
 801816a:	bf00      	nop
 801816c:	3710      	adds	r7, #16
 801816e:	46bd      	mov	sp, r7
 8018170:	bd80      	pop	{r7, pc}

08018172 <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8018172:	b580      	push	{r7, lr}
 8018174:	b082      	sub	sp, #8
 8018176:	af00      	add	r7, sp, #0
 8018178:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 801817a:	2208      	movs	r2, #8
 801817c:	6879      	ldr	r1, [r7, #4]
 801817e:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 8018182:	f000 fe9f 	bl	8018ec4 <SUBGRF_WriteRegisters>
    return 0;
 8018186:	2300      	movs	r3, #0
}
 8018188:	4618      	mov	r0, r3
 801818a:	3708      	adds	r7, #8
 801818c:	46bd      	mov	sp, r7
 801818e:	bd80      	pop	{r7, pc}

08018190 <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8018190:	b580      	push	{r7, lr}
 8018192:	b084      	sub	sp, #16
 8018194:	af00      	add	r7, sp, #0
 8018196:	4603      	mov	r3, r0
 8018198:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 801819a:	88fb      	ldrh	r3, [r7, #6]
 801819c:	0a1b      	lsrs	r3, r3, #8
 801819e:	b29b      	uxth	r3, r3
 80181a0:	b2db      	uxtb	r3, r3
 80181a2:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 80181a4:	88fb      	ldrh	r3, [r7, #6]
 80181a6:	b2db      	uxtb	r3, r3
 80181a8:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 80181aa:	f000 fb77 	bl	801889c <SUBGRF_GetPacketType>
 80181ae:	4603      	mov	r3, r0
 80181b0:	2b00      	cmp	r3, #0
 80181b2:	d108      	bne.n	80181c6 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 80181b4:	f107 030c 	add.w	r3, r7, #12
 80181b8:	2202      	movs	r2, #2
 80181ba:	4619      	mov	r1, r3
 80181bc:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 80181c0:	f000 fe80 	bl	8018ec4 <SUBGRF_WriteRegisters>
            break;
 80181c4:	e000      	b.n	80181c8 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 80181c6:	bf00      	nop
    }
}
 80181c8:	bf00      	nop
 80181ca:	3710      	adds	r7, #16
 80181cc:	46bd      	mov	sp, r7
 80181ce:	bd80      	pop	{r7, pc}

080181d0 <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 80181d0:	b580      	push	{r7, lr}
 80181d2:	b084      	sub	sp, #16
 80181d4:	af00      	add	r7, sp, #0
 80181d6:	4603      	mov	r3, r0
 80181d8:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 80181da:	88fb      	ldrh	r3, [r7, #6]
 80181dc:	0a1b      	lsrs	r3, r3, #8
 80181de:	b29b      	uxth	r3, r3
 80181e0:	b2db      	uxtb	r3, r3
 80181e2:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 80181e4:	88fb      	ldrh	r3, [r7, #6]
 80181e6:	b2db      	uxtb	r3, r3
 80181e8:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 80181ea:	f000 fb57 	bl	801889c <SUBGRF_GetPacketType>
 80181ee:	4603      	mov	r3, r0
 80181f0:	2b00      	cmp	r3, #0
 80181f2:	d108      	bne.n	8018206 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 80181f4:	f107 030c 	add.w	r3, r7, #12
 80181f8:	2202      	movs	r2, #2
 80181fa:	4619      	mov	r1, r3
 80181fc:	f240 60be 	movw	r0, #1726	@ 0x6be
 8018200:	f000 fe60 	bl	8018ec4 <SUBGRF_WriteRegisters>
            break;
 8018204:	e000      	b.n	8018208 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8018206:	bf00      	nop
    }
}
 8018208:	bf00      	nop
 801820a:	3710      	adds	r7, #16
 801820c:	46bd      	mov	sp, r7
 801820e:	bd80      	pop	{r7, pc}

08018210 <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8018210:	b580      	push	{r7, lr}
 8018212:	b084      	sub	sp, #16
 8018214:	af00      	add	r7, sp, #0
 8018216:	4603      	mov	r3, r0
 8018218:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 801821a:	2300      	movs	r3, #0
 801821c:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 801821e:	f000 fb3d 	bl	801889c <SUBGRF_GetPacketType>
 8018222:	4603      	mov	r3, r0
 8018224:	2b00      	cmp	r3, #0
 8018226:	d121      	bne.n	801826c <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8018228:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 801822c:	f000 fe36 	bl	8018e9c <SUBGRF_ReadRegister>
 8018230:	4603      	mov	r3, r0
 8018232:	f023 0301 	bic.w	r3, r3, #1
 8018236:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8018238:	88fb      	ldrh	r3, [r7, #6]
 801823a:	0a1b      	lsrs	r3, r3, #8
 801823c:	b29b      	uxth	r3, r3
 801823e:	b25b      	sxtb	r3, r3
 8018240:	f003 0301 	and.w	r3, r3, #1
 8018244:	b25a      	sxtb	r2, r3
 8018246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801824a:	4313      	orrs	r3, r2
 801824c:	b25b      	sxtb	r3, r3
 801824e:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8018250:	7bfb      	ldrb	r3, [r7, #15]
 8018252:	4619      	mov	r1, r3
 8018254:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8018258:	f000 fe0c 	bl	8018e74 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 801825c:	88fb      	ldrh	r3, [r7, #6]
 801825e:	b2db      	uxtb	r3, r3
 8018260:	4619      	mov	r1, r3
 8018262:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 8018266:	f000 fe05 	bl	8018e74 <SUBGRF_WriteRegister>
            break;
 801826a:	e000      	b.n	801826e <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 801826c:	bf00      	nop
    }
}
 801826e:	bf00      	nop
 8018270:	3710      	adds	r7, #16
 8018272:	46bd      	mov	sp, r7
 8018274:	bd80      	pop	{r7, pc}

08018276 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 8018276:	b580      	push	{r7, lr}
 8018278:	b082      	sub	sp, #8
 801827a:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 801827c:	2300      	movs	r3, #0
 801827e:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8018280:	2300      	movs	r3, #0
 8018282:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8018284:	2300      	movs	r3, #0
 8018286:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8018288:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 801828c:	f000 fe06 	bl	8018e9c <SUBGRF_ReadRegister>
 8018290:	4603      	mov	r3, r0
 8018292:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8018294:	79fb      	ldrb	r3, [r7, #7]
 8018296:	f023 0301 	bic.w	r3, r3, #1
 801829a:	b2db      	uxtb	r3, r3
 801829c:	4619      	mov	r1, r3
 801829e:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 80182a2:	f000 fde7 	bl	8018e74 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 80182a6:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 80182aa:	f000 fdf7 	bl	8018e9c <SUBGRF_ReadRegister>
 80182ae:	4603      	mov	r3, r0
 80182b0:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 80182b2:	79bb      	ldrb	r3, [r7, #6]
 80182b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80182b8:	b2db      	uxtb	r3, r3
 80182ba:	4619      	mov	r1, r3
 80182bc:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 80182c0:	f000 fdd8 	bl	8018e74 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80182c4:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 80182c8:	f000 f88c 	bl	80183e4 <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 80182cc:	463b      	mov	r3, r7
 80182ce:	2204      	movs	r2, #4
 80182d0:	4619      	mov	r1, r3
 80182d2:	f640 0019 	movw	r0, #2073	@ 0x819
 80182d6:	f000 fe17 	bl	8018f08 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 80182da:	2000      	movs	r0, #0
 80182dc:	f000 f846 	bl	801836c <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 80182e0:	79fb      	ldrb	r3, [r7, #7]
 80182e2:	4619      	mov	r1, r3
 80182e4:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 80182e8:	f000 fdc4 	bl	8018e74 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 80182ec:	79bb      	ldrb	r3, [r7, #6]
 80182ee:	4619      	mov	r1, r3
 80182f0:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 80182f4:	f000 fdbe 	bl	8018e74 <SUBGRF_WriteRegister>

    return number;
 80182f8:	683b      	ldr	r3, [r7, #0]
}
 80182fa:	4618      	mov	r0, r3
 80182fc:	3708      	adds	r7, #8
 80182fe:	46bd      	mov	sp, r7
 8018300:	bd80      	pop	{r7, pc}
	...

08018304 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8018304:	b580      	push	{r7, lr}
 8018306:	b084      	sub	sp, #16
 8018308:	af00      	add	r7, sp, #0
 801830a:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801830c:	2000      	movs	r0, #0
 801830e:	f7ea f9a6 	bl	800265e <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8018312:	2002      	movs	r0, #2
 8018314:	f000 ffa6 	bl	8019264 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8018318:	793b      	ldrb	r3, [r7, #4]
 801831a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801831e:	b2db      	uxtb	r3, r3
 8018320:	b25b      	sxtb	r3, r3
 8018322:	009b      	lsls	r3, r3, #2
 8018324:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8018326:	793b      	ldrb	r3, [r7, #4]
 8018328:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801832c:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801832e:	b25b      	sxtb	r3, r3
 8018330:	005b      	lsls	r3, r3, #1
 8018332:	b25b      	sxtb	r3, r3
 8018334:	4313      	orrs	r3, r2
 8018336:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8018338:	793b      	ldrb	r3, [r7, #4]
 801833a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801833e:	b2db      	uxtb	r3, r3
 8018340:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8018342:	4313      	orrs	r3, r2
 8018344:	b25b      	sxtb	r3, r3
 8018346:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8018348:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801834a:	f107 030f 	add.w	r3, r7, #15
 801834e:	2201      	movs	r2, #1
 8018350:	4619      	mov	r1, r3
 8018352:	2084      	movs	r0, #132	@ 0x84
 8018354:	f000 fe3e 	bl	8018fd4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8018358:	4b03      	ldr	r3, [pc, #12]	@ (8018368 <SUBGRF_SetSleep+0x64>)
 801835a:	2200      	movs	r2, #0
 801835c:	701a      	strb	r2, [r3, #0]
}
 801835e:	bf00      	nop
 8018360:	3710      	adds	r7, #16
 8018362:	46bd      	mov	sp, r7
 8018364:	bd80      	pop	{r7, pc}
 8018366:	bf00      	nop
 8018368:	200013c8 	.word	0x200013c8

0801836c <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 801836c:	b580      	push	{r7, lr}
 801836e:	b082      	sub	sp, #8
 8018370:	af00      	add	r7, sp, #0
 8018372:	4603      	mov	r3, r0
 8018374:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8018376:	1dfb      	adds	r3, r7, #7
 8018378:	2201      	movs	r2, #1
 801837a:	4619      	mov	r1, r3
 801837c:	2080      	movs	r0, #128	@ 0x80
 801837e:	f000 fe29 	bl	8018fd4 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8018382:	79fb      	ldrb	r3, [r7, #7]
 8018384:	2b00      	cmp	r3, #0
 8018386:	d103      	bne.n	8018390 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8018388:	4b05      	ldr	r3, [pc, #20]	@ (80183a0 <SUBGRF_SetStandby+0x34>)
 801838a:	2201      	movs	r2, #1
 801838c:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 801838e:	e002      	b.n	8018396 <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8018390:	4b03      	ldr	r3, [pc, #12]	@ (80183a0 <SUBGRF_SetStandby+0x34>)
 8018392:	2202      	movs	r2, #2
 8018394:	701a      	strb	r2, [r3, #0]
}
 8018396:	bf00      	nop
 8018398:	3708      	adds	r7, #8
 801839a:	46bd      	mov	sp, r7
 801839c:	bd80      	pop	{r7, pc}
 801839e:	bf00      	nop
 80183a0:	200013c8 	.word	0x200013c8

080183a4 <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 80183a4:	b580      	push	{r7, lr}
 80183a6:	b084      	sub	sp, #16
 80183a8:	af00      	add	r7, sp, #0
 80183aa:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 80183ac:	4b0c      	ldr	r3, [pc, #48]	@ (80183e0 <SUBGRF_SetTx+0x3c>)
 80183ae:	2204      	movs	r2, #4
 80183b0:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80183b2:	687b      	ldr	r3, [r7, #4]
 80183b4:	0c1b      	lsrs	r3, r3, #16
 80183b6:	b2db      	uxtb	r3, r3
 80183b8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80183ba:	687b      	ldr	r3, [r7, #4]
 80183bc:	0a1b      	lsrs	r3, r3, #8
 80183be:	b2db      	uxtb	r3, r3
 80183c0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80183c2:	687b      	ldr	r3, [r7, #4]
 80183c4:	b2db      	uxtb	r3, r3
 80183c6:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 80183c8:	f107 030c 	add.w	r3, r7, #12
 80183cc:	2203      	movs	r2, #3
 80183ce:	4619      	mov	r1, r3
 80183d0:	2083      	movs	r0, #131	@ 0x83
 80183d2:	f000 fdff 	bl	8018fd4 <SUBGRF_WriteCommand>
}
 80183d6:	bf00      	nop
 80183d8:	3710      	adds	r7, #16
 80183da:	46bd      	mov	sp, r7
 80183dc:	bd80      	pop	{r7, pc}
 80183de:	bf00      	nop
 80183e0:	200013c8 	.word	0x200013c8

080183e4 <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 80183e4:	b580      	push	{r7, lr}
 80183e6:	b084      	sub	sp, #16
 80183e8:	af00      	add	r7, sp, #0
 80183ea:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 80183ec:	4b0c      	ldr	r3, [pc, #48]	@ (8018420 <SUBGRF_SetRx+0x3c>)
 80183ee:	2205      	movs	r2, #5
 80183f0:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80183f2:	687b      	ldr	r3, [r7, #4]
 80183f4:	0c1b      	lsrs	r3, r3, #16
 80183f6:	b2db      	uxtb	r3, r3
 80183f8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80183fa:	687b      	ldr	r3, [r7, #4]
 80183fc:	0a1b      	lsrs	r3, r3, #8
 80183fe:	b2db      	uxtb	r3, r3
 8018400:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8018402:	687b      	ldr	r3, [r7, #4]
 8018404:	b2db      	uxtb	r3, r3
 8018406:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8018408:	f107 030c 	add.w	r3, r7, #12
 801840c:	2203      	movs	r2, #3
 801840e:	4619      	mov	r1, r3
 8018410:	2082      	movs	r0, #130	@ 0x82
 8018412:	f000 fddf 	bl	8018fd4 <SUBGRF_WriteCommand>
}
 8018416:	bf00      	nop
 8018418:	3710      	adds	r7, #16
 801841a:	46bd      	mov	sp, r7
 801841c:	bd80      	pop	{r7, pc}
 801841e:	bf00      	nop
 8018420:	200013c8 	.word	0x200013c8

08018424 <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8018424:	b580      	push	{r7, lr}
 8018426:	b084      	sub	sp, #16
 8018428:	af00      	add	r7, sp, #0
 801842a:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 801842c:	4b0e      	ldr	r3, [pc, #56]	@ (8018468 <SUBGRF_SetRxBoosted+0x44>)
 801842e:	2205      	movs	r2, #5
 8018430:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8018432:	2197      	movs	r1, #151	@ 0x97
 8018434:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 8018438:	f000 fd1c 	bl	8018e74 <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	0c1b      	lsrs	r3, r3, #16
 8018440:	b2db      	uxtb	r3, r3
 8018442:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018444:	687b      	ldr	r3, [r7, #4]
 8018446:	0a1b      	lsrs	r3, r3, #8
 8018448:	b2db      	uxtb	r3, r3
 801844a:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	b2db      	uxtb	r3, r3
 8018450:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8018452:	f107 030c 	add.w	r3, r7, #12
 8018456:	2203      	movs	r2, #3
 8018458:	4619      	mov	r1, r3
 801845a:	2082      	movs	r0, #130	@ 0x82
 801845c:	f000 fdba 	bl	8018fd4 <SUBGRF_WriteCommand>
}
 8018460:	bf00      	nop
 8018462:	3710      	adds	r7, #16
 8018464:	46bd      	mov	sp, r7
 8018466:	bd80      	pop	{r7, pc}
 8018468:	200013c8 	.word	0x200013c8

0801846c <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 801846c:	b580      	push	{r7, lr}
 801846e:	b084      	sub	sp, #16
 8018470:	af00      	add	r7, sp, #0
 8018472:	6078      	str	r0, [r7, #4]
 8018474:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8018476:	687b      	ldr	r3, [r7, #4]
 8018478:	0c1b      	lsrs	r3, r3, #16
 801847a:	b2db      	uxtb	r3, r3
 801847c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 801847e:	687b      	ldr	r3, [r7, #4]
 8018480:	0a1b      	lsrs	r3, r3, #8
 8018482:	b2db      	uxtb	r3, r3
 8018484:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8018486:	687b      	ldr	r3, [r7, #4]
 8018488:	b2db      	uxtb	r3, r3
 801848a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 801848c:	683b      	ldr	r3, [r7, #0]
 801848e:	0c1b      	lsrs	r3, r3, #16
 8018490:	b2db      	uxtb	r3, r3
 8018492:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8018494:	683b      	ldr	r3, [r7, #0]
 8018496:	0a1b      	lsrs	r3, r3, #8
 8018498:	b2db      	uxtb	r3, r3
 801849a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 801849c:	683b      	ldr	r3, [r7, #0]
 801849e:	b2db      	uxtb	r3, r3
 80184a0:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 80184a2:	f107 0308 	add.w	r3, r7, #8
 80184a6:	2206      	movs	r2, #6
 80184a8:	4619      	mov	r1, r3
 80184aa:	2094      	movs	r0, #148	@ 0x94
 80184ac:	f000 fd92 	bl	8018fd4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 80184b0:	4b03      	ldr	r3, [pc, #12]	@ (80184c0 <SUBGRF_SetRxDutyCycle+0x54>)
 80184b2:	2206      	movs	r2, #6
 80184b4:	701a      	strb	r2, [r3, #0]
}
 80184b6:	bf00      	nop
 80184b8:	3710      	adds	r7, #16
 80184ba:	46bd      	mov	sp, r7
 80184bc:	bd80      	pop	{r7, pc}
 80184be:	bf00      	nop
 80184c0:	200013c8 	.word	0x200013c8

080184c4 <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 80184c4:	b580      	push	{r7, lr}
 80184c6:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 80184c8:	2200      	movs	r2, #0
 80184ca:	2100      	movs	r1, #0
 80184cc:	20c5      	movs	r0, #197	@ 0xc5
 80184ce:	f000 fd81 	bl	8018fd4 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 80184d2:	4b02      	ldr	r3, [pc, #8]	@ (80184dc <SUBGRF_SetCad+0x18>)
 80184d4:	2207      	movs	r2, #7
 80184d6:	701a      	strb	r2, [r3, #0]
}
 80184d8:	bf00      	nop
 80184da:	bd80      	pop	{r7, pc}
 80184dc:	200013c8 	.word	0x200013c8

080184e0 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 80184e0:	b580      	push	{r7, lr}
 80184e2:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 80184e4:	2200      	movs	r2, #0
 80184e6:	2100      	movs	r1, #0
 80184e8:	20d1      	movs	r0, #209	@ 0xd1
 80184ea:	f000 fd73 	bl	8018fd4 <SUBGRF_WriteCommand>
}
 80184ee:	bf00      	nop
 80184f0:	bd80      	pop	{r7, pc}

080184f2 <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 80184f2:	b580      	push	{r7, lr}
 80184f4:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 80184f6:	2200      	movs	r2, #0
 80184f8:	2100      	movs	r1, #0
 80184fa:	20d2      	movs	r0, #210	@ 0xd2
 80184fc:	f000 fd6a 	bl	8018fd4 <SUBGRF_WriteCommand>
}
 8018500:	bf00      	nop
 8018502:	bd80      	pop	{r7, pc}

08018504 <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8018504:	b580      	push	{r7, lr}
 8018506:	b082      	sub	sp, #8
 8018508:	af00      	add	r7, sp, #0
 801850a:	4603      	mov	r3, r0
 801850c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 801850e:	1dfb      	adds	r3, r7, #7
 8018510:	2201      	movs	r2, #1
 8018512:	4619      	mov	r1, r3
 8018514:	209f      	movs	r0, #159	@ 0x9f
 8018516:	f000 fd5d 	bl	8018fd4 <SUBGRF_WriteCommand>
}
 801851a:	bf00      	nop
 801851c:	3708      	adds	r7, #8
 801851e:	46bd      	mov	sp, r7
 8018520:	bd80      	pop	{r7, pc}

08018522 <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8018522:	b580      	push	{r7, lr}
 8018524:	b084      	sub	sp, #16
 8018526:	af00      	add	r7, sp, #0
 8018528:	4603      	mov	r3, r0
 801852a:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 801852c:	1dfb      	adds	r3, r7, #7
 801852e:	2201      	movs	r2, #1
 8018530:	4619      	mov	r1, r3
 8018532:	20a0      	movs	r0, #160	@ 0xa0
 8018534:	f000 fd4e 	bl	8018fd4 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8018538:	79fb      	ldrb	r3, [r7, #7]
 801853a:	2b3f      	cmp	r3, #63	@ 0x3f
 801853c:	d91c      	bls.n	8018578 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 801853e:	79fb      	ldrb	r3, [r7, #7]
 8018540:	085b      	lsrs	r3, r3, #1
 8018542:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8018544:	2300      	movs	r3, #0
 8018546:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8018548:	2300      	movs	r3, #0
 801854a:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 801854c:	e005      	b.n	801855a <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 801854e:	7bfb      	ldrb	r3, [r7, #15]
 8018550:	089b      	lsrs	r3, r3, #2
 8018552:	73fb      	strb	r3, [r7, #15]
            exp++;
 8018554:	7bbb      	ldrb	r3, [r7, #14]
 8018556:	3301      	adds	r3, #1
 8018558:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 801855a:	7bfb      	ldrb	r3, [r7, #15]
 801855c:	2b1f      	cmp	r3, #31
 801855e:	d8f6      	bhi.n	801854e <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8018560:	7bfb      	ldrb	r3, [r7, #15]
 8018562:	00db      	lsls	r3, r3, #3
 8018564:	b2da      	uxtb	r2, r3
 8018566:	7bbb      	ldrb	r3, [r7, #14]
 8018568:	4413      	add	r3, r2
 801856a:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 801856c:	7b7b      	ldrb	r3, [r7, #13]
 801856e:	4619      	mov	r1, r3
 8018570:	f240 7006 	movw	r0, #1798	@ 0x706
 8018574:	f000 fc7e 	bl	8018e74 <SUBGRF_WriteRegister>
    }
}
 8018578:	bf00      	nop
 801857a:	3710      	adds	r7, #16
 801857c:	46bd      	mov	sp, r7
 801857e:	bd80      	pop	{r7, pc}

08018580 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 8018580:	b580      	push	{r7, lr}
 8018582:	b082      	sub	sp, #8
 8018584:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8018586:	f7ea f886 	bl	8002696 <RBI_IsDCDC>
 801858a:	4603      	mov	r3, r0
 801858c:	2b01      	cmp	r3, #1
 801858e:	d102      	bne.n	8018596 <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8018590:	2301      	movs	r3, #1
 8018592:	71fb      	strb	r3, [r7, #7]
 8018594:	e001      	b.n	801859a <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8018596:	2300      	movs	r3, #0
 8018598:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 801859a:	1dfb      	adds	r3, r7, #7
 801859c:	2201      	movs	r2, #1
 801859e:	4619      	mov	r1, r3
 80185a0:	2096      	movs	r0, #150	@ 0x96
 80185a2:	f000 fd17 	bl	8018fd4 <SUBGRF_WriteCommand>
}
 80185a6:	bf00      	nop
 80185a8:	3708      	adds	r7, #8
 80185aa:	46bd      	mov	sp, r7
 80185ac:	bd80      	pop	{r7, pc}

080185ae <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 80185ae:	b580      	push	{r7, lr}
 80185b0:	b084      	sub	sp, #16
 80185b2:	af00      	add	r7, sp, #0
 80185b4:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80185b6:	793b      	ldrb	r3, [r7, #4]
 80185b8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80185bc:	b2db      	uxtb	r3, r3
 80185be:	b25b      	sxtb	r3, r3
 80185c0:	019b      	lsls	r3, r3, #6
 80185c2:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80185c4:	793b      	ldrb	r3, [r7, #4]
 80185c6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80185ca:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80185cc:	b25b      	sxtb	r3, r3
 80185ce:	015b      	lsls	r3, r3, #5
 80185d0:	b25b      	sxtb	r3, r3
 80185d2:	4313      	orrs	r3, r2
 80185d4:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80185d6:	793b      	ldrb	r3, [r7, #4]
 80185d8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80185dc:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80185de:	b25b      	sxtb	r3, r3
 80185e0:	011b      	lsls	r3, r3, #4
 80185e2:	b25b      	sxtb	r3, r3
 80185e4:	4313      	orrs	r3, r2
 80185e6:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80185e8:	793b      	ldrb	r3, [r7, #4]
 80185ea:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80185ee:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80185f0:	b25b      	sxtb	r3, r3
 80185f2:	00db      	lsls	r3, r3, #3
 80185f4:	b25b      	sxtb	r3, r3
 80185f6:	4313      	orrs	r3, r2
 80185f8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80185fa:	793b      	ldrb	r3, [r7, #4]
 80185fc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8018600:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8018602:	b25b      	sxtb	r3, r3
 8018604:	009b      	lsls	r3, r3, #2
 8018606:	b25b      	sxtb	r3, r3
 8018608:	4313      	orrs	r3, r2
 801860a:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801860c:	793b      	ldrb	r3, [r7, #4]
 801860e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8018612:	b2db      	uxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8018614:	b25b      	sxtb	r3, r3
 8018616:	005b      	lsls	r3, r3, #1
 8018618:	b25b      	sxtb	r3, r3
 801861a:	4313      	orrs	r3, r2
 801861c:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801861e:	793b      	ldrb	r3, [r7, #4]
 8018620:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8018624:	b2db      	uxtb	r3, r3
 8018626:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8018628:	4313      	orrs	r3, r2
 801862a:	b25b      	sxtb	r3, r3
 801862c:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801862e:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8018630:	f107 030f 	add.w	r3, r7, #15
 8018634:	2201      	movs	r2, #1
 8018636:	4619      	mov	r1, r3
 8018638:	2089      	movs	r0, #137	@ 0x89
 801863a:	f000 fccb 	bl	8018fd4 <SUBGRF_WriteCommand>
}
 801863e:	bf00      	nop
 8018640:	3710      	adds	r7, #16
 8018642:	46bd      	mov	sp, r7
 8018644:	bd80      	pop	{r7, pc}
	...

08018648 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8018648:	b580      	push	{r7, lr}
 801864a:	b084      	sub	sp, #16
 801864c:	af00      	add	r7, sp, #0
 801864e:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 8018650:	687b      	ldr	r3, [r7, #4]
 8018652:	4a1d      	ldr	r2, [pc, #116]	@ (80186c8 <SUBGRF_CalibrateImage+0x80>)
 8018654:	4293      	cmp	r3, r2
 8018656:	d904      	bls.n	8018662 <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8018658:	23e1      	movs	r3, #225	@ 0xe1
 801865a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 801865c:	23e9      	movs	r3, #233	@ 0xe9
 801865e:	737b      	strb	r3, [r7, #13]
 8018660:	e027      	b.n	80186b2 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 8018662:	687b      	ldr	r3, [r7, #4]
 8018664:	4a19      	ldr	r2, [pc, #100]	@ (80186cc <SUBGRF_CalibrateImage+0x84>)
 8018666:	4293      	cmp	r3, r2
 8018668:	d904      	bls.n	8018674 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 801866a:	23d7      	movs	r3, #215	@ 0xd7
 801866c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 801866e:	23db      	movs	r3, #219	@ 0xdb
 8018670:	737b      	strb	r3, [r7, #13]
 8018672:	e01e      	b.n	80186b2 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 8018674:	687b      	ldr	r3, [r7, #4]
 8018676:	4a16      	ldr	r2, [pc, #88]	@ (80186d0 <SUBGRF_CalibrateImage+0x88>)
 8018678:	4293      	cmp	r3, r2
 801867a:	d904      	bls.n	8018686 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 801867c:	23c1      	movs	r3, #193	@ 0xc1
 801867e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 8018680:	23c5      	movs	r3, #197	@ 0xc5
 8018682:	737b      	strb	r3, [r7, #13]
 8018684:	e015      	b.n	80186b2 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 8018686:	687b      	ldr	r3, [r7, #4]
 8018688:	4a12      	ldr	r2, [pc, #72]	@ (80186d4 <SUBGRF_CalibrateImage+0x8c>)
 801868a:	4293      	cmp	r3, r2
 801868c:	d904      	bls.n	8018698 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 801868e:	2375      	movs	r3, #117	@ 0x75
 8018690:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 8018692:	2381      	movs	r3, #129	@ 0x81
 8018694:	737b      	strb	r3, [r7, #13]
 8018696:	e00c      	b.n	80186b2 <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 8018698:	687b      	ldr	r3, [r7, #4]
 801869a:	4a0f      	ldr	r2, [pc, #60]	@ (80186d8 <SUBGRF_CalibrateImage+0x90>)
 801869c:	4293      	cmp	r3, r2
 801869e:	d904      	bls.n	80186aa <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 80186a0:	236b      	movs	r3, #107	@ 0x6b
 80186a2:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 80186a4:	236f      	movs	r3, #111	@ 0x6f
 80186a6:	737b      	strb	r3, [r7, #13]
 80186a8:	e003      	b.n	80186b2 <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 80186aa:	2329      	movs	r3, #41	@ 0x29
 80186ac:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 80186ae:	232b      	movs	r3, #43	@ 0x2b
 80186b0:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 80186b2:	f107 030c 	add.w	r3, r7, #12
 80186b6:	2202      	movs	r2, #2
 80186b8:	4619      	mov	r1, r3
 80186ba:	2098      	movs	r0, #152	@ 0x98
 80186bc:	f000 fc8a 	bl	8018fd4 <SUBGRF_WriteCommand>
}
 80186c0:	bf00      	nop
 80186c2:	3710      	adds	r7, #16
 80186c4:	46bd      	mov	sp, r7
 80186c6:	bd80      	pop	{r7, pc}
 80186c8:	35a4e900 	.word	0x35a4e900
 80186cc:	32a9f880 	.word	0x32a9f880
 80186d0:	2de54480 	.word	0x2de54480
 80186d4:	1b6b0b00 	.word	0x1b6b0b00
 80186d8:	1954fc40 	.word	0x1954fc40

080186dc <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 80186dc:	b590      	push	{r4, r7, lr}
 80186de:	b085      	sub	sp, #20
 80186e0:	af00      	add	r7, sp, #0
 80186e2:	4604      	mov	r4, r0
 80186e4:	4608      	mov	r0, r1
 80186e6:	4611      	mov	r1, r2
 80186e8:	461a      	mov	r2, r3
 80186ea:	4623      	mov	r3, r4
 80186ec:	71fb      	strb	r3, [r7, #7]
 80186ee:	4603      	mov	r3, r0
 80186f0:	71bb      	strb	r3, [r7, #6]
 80186f2:	460b      	mov	r3, r1
 80186f4:	717b      	strb	r3, [r7, #5]
 80186f6:	4613      	mov	r3, r2
 80186f8:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 80186fa:	79fb      	ldrb	r3, [r7, #7]
 80186fc:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 80186fe:	79bb      	ldrb	r3, [r7, #6]
 8018700:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8018702:	797b      	ldrb	r3, [r7, #5]
 8018704:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 8018706:	793b      	ldrb	r3, [r7, #4]
 8018708:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801870a:	f107 030c 	add.w	r3, r7, #12
 801870e:	2204      	movs	r2, #4
 8018710:	4619      	mov	r1, r3
 8018712:	2095      	movs	r0, #149	@ 0x95
 8018714:	f000 fc5e 	bl	8018fd4 <SUBGRF_WriteCommand>
}
 8018718:	bf00      	nop
 801871a:	3714      	adds	r7, #20
 801871c:	46bd      	mov	sp, r7
 801871e:	bd90      	pop	{r4, r7, pc}

08018720 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8018720:	b590      	push	{r4, r7, lr}
 8018722:	b085      	sub	sp, #20
 8018724:	af00      	add	r7, sp, #0
 8018726:	4604      	mov	r4, r0
 8018728:	4608      	mov	r0, r1
 801872a:	4611      	mov	r1, r2
 801872c:	461a      	mov	r2, r3
 801872e:	4623      	mov	r3, r4
 8018730:	80fb      	strh	r3, [r7, #6]
 8018732:	4603      	mov	r3, r0
 8018734:	80bb      	strh	r3, [r7, #4]
 8018736:	460b      	mov	r3, r1
 8018738:	807b      	strh	r3, [r7, #2]
 801873a:	4613      	mov	r3, r2
 801873c:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 801873e:	88fb      	ldrh	r3, [r7, #6]
 8018740:	0a1b      	lsrs	r3, r3, #8
 8018742:	b29b      	uxth	r3, r3
 8018744:	b2db      	uxtb	r3, r3
 8018746:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8018748:	88fb      	ldrh	r3, [r7, #6]
 801874a:	b2db      	uxtb	r3, r3
 801874c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 801874e:	88bb      	ldrh	r3, [r7, #4]
 8018750:	0a1b      	lsrs	r3, r3, #8
 8018752:	b29b      	uxth	r3, r3
 8018754:	b2db      	uxtb	r3, r3
 8018756:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8018758:	88bb      	ldrh	r3, [r7, #4]
 801875a:	b2db      	uxtb	r3, r3
 801875c:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801875e:	887b      	ldrh	r3, [r7, #2]
 8018760:	0a1b      	lsrs	r3, r3, #8
 8018762:	b29b      	uxth	r3, r3
 8018764:	b2db      	uxtb	r3, r3
 8018766:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8018768:	887b      	ldrh	r3, [r7, #2]
 801876a:	b2db      	uxtb	r3, r3
 801876c:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 801876e:	883b      	ldrh	r3, [r7, #0]
 8018770:	0a1b      	lsrs	r3, r3, #8
 8018772:	b29b      	uxth	r3, r3
 8018774:	b2db      	uxtb	r3, r3
 8018776:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8018778:	883b      	ldrh	r3, [r7, #0]
 801877a:	b2db      	uxtb	r3, r3
 801877c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 801877e:	f107 0308 	add.w	r3, r7, #8
 8018782:	2208      	movs	r2, #8
 8018784:	4619      	mov	r1, r3
 8018786:	2008      	movs	r0, #8
 8018788:	f000 fc24 	bl	8018fd4 <SUBGRF_WriteCommand>
}
 801878c:	bf00      	nop
 801878e:	3714      	adds	r7, #20
 8018790:	46bd      	mov	sp, r7
 8018792:	bd90      	pop	{r4, r7, pc}

08018794 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8018794:	b580      	push	{r7, lr}
 8018796:	b084      	sub	sp, #16
 8018798:	af00      	add	r7, sp, #0
 801879a:	4603      	mov	r3, r0
 801879c:	6039      	str	r1, [r7, #0]
 801879e:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 80187a0:	79fb      	ldrb	r3, [r7, #7]
 80187a2:	f003 0307 	and.w	r3, r3, #7
 80187a6:	b2db      	uxtb	r3, r3
 80187a8:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80187aa:	683b      	ldr	r3, [r7, #0]
 80187ac:	0c1b      	lsrs	r3, r3, #16
 80187ae:	b2db      	uxtb	r3, r3
 80187b0:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80187b2:	683b      	ldr	r3, [r7, #0]
 80187b4:	0a1b      	lsrs	r3, r3, #8
 80187b6:	b2db      	uxtb	r3, r3
 80187b8:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 80187ba:	683b      	ldr	r3, [r7, #0]
 80187bc:	b2db      	uxtb	r3, r3
 80187be:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 80187c0:	f107 030c 	add.w	r3, r7, #12
 80187c4:	2204      	movs	r2, #4
 80187c6:	4619      	mov	r1, r3
 80187c8:	2097      	movs	r0, #151	@ 0x97
 80187ca:	f000 fc03 	bl	8018fd4 <SUBGRF_WriteCommand>
}
 80187ce:	bf00      	nop
 80187d0:	3710      	adds	r7, #16
 80187d2:	46bd      	mov	sp, r7
 80187d4:	bd80      	pop	{r7, pc}
	...

080187d8 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 80187d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80187dc:	b084      	sub	sp, #16
 80187de:	af00      	add	r7, sp, #0
 80187e0:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 80187e2:	2300      	movs	r3, #0
 80187e4:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 80187e6:	4b1d      	ldr	r3, [pc, #116]	@ (801885c <SUBGRF_SetRfFrequency+0x84>)
 80187e8:	781b      	ldrb	r3, [r3, #0]
 80187ea:	f083 0301 	eor.w	r3, r3, #1
 80187ee:	b2db      	uxtb	r3, r3
 80187f0:	2b00      	cmp	r3, #0
 80187f2:	d005      	beq.n	8018800 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 80187f4:	6878      	ldr	r0, [r7, #4]
 80187f6:	f7ff ff27 	bl	8018648 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 80187fa:	4b18      	ldr	r3, [pc, #96]	@ (801885c <SUBGRF_SetRfFrequency+0x84>)
 80187fc:	2201      	movs	r2, #1
 80187fe:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8018800:	687b      	ldr	r3, [r7, #4]
 8018802:	2200      	movs	r2, #0
 8018804:	461c      	mov	r4, r3
 8018806:	4615      	mov	r5, r2
 8018808:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 801880c:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8018810:	4a13      	ldr	r2, [pc, #76]	@ (8018860 <SUBGRF_SetRfFrequency+0x88>)
 8018812:	f04f 0300 	mov.w	r3, #0
 8018816:	4640      	mov	r0, r8
 8018818:	4649      	mov	r1, r9
 801881a:	f7e8 fa8f 	bl	8000d3c <__aeabi_uldivmod>
 801881e:	4602      	mov	r2, r0
 8018820:	460b      	mov	r3, r1
 8018822:	4613      	mov	r3, r2
 8018824:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8018826:	68fb      	ldr	r3, [r7, #12]
 8018828:	0e1b      	lsrs	r3, r3, #24
 801882a:	b2db      	uxtb	r3, r3
 801882c:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801882e:	68fb      	ldr	r3, [r7, #12]
 8018830:	0c1b      	lsrs	r3, r3, #16
 8018832:	b2db      	uxtb	r3, r3
 8018834:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8018836:	68fb      	ldr	r3, [r7, #12]
 8018838:	0a1b      	lsrs	r3, r3, #8
 801883a:	b2db      	uxtb	r3, r3
 801883c:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801883e:	68fb      	ldr	r3, [r7, #12]
 8018840:	b2db      	uxtb	r3, r3
 8018842:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8018844:	f107 0308 	add.w	r3, r7, #8
 8018848:	2204      	movs	r2, #4
 801884a:	4619      	mov	r1, r3
 801884c:	2086      	movs	r0, #134	@ 0x86
 801884e:	f000 fbc1 	bl	8018fd4 <SUBGRF_WriteCommand>
}
 8018852:	bf00      	nop
 8018854:	3710      	adds	r7, #16
 8018856:	46bd      	mov	sp, r7
 8018858:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801885c:	200013d0 	.word	0x200013d0
 8018860:	01e84800 	.word	0x01e84800

08018864 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8018864:	b580      	push	{r7, lr}
 8018866:	b082      	sub	sp, #8
 8018868:	af00      	add	r7, sp, #0
 801886a:	4603      	mov	r3, r0
 801886c:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801886e:	79fa      	ldrb	r2, [r7, #7]
 8018870:	4b09      	ldr	r3, [pc, #36]	@ (8018898 <SUBGRF_SetPacketType+0x34>)
 8018872:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8018874:	79fb      	ldrb	r3, [r7, #7]
 8018876:	2b00      	cmp	r3, #0
 8018878:	d104      	bne.n	8018884 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 801887a:	2100      	movs	r1, #0
 801887c:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8018880:	f000 faf8 	bl	8018e74 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8018884:	1dfb      	adds	r3, r7, #7
 8018886:	2201      	movs	r2, #1
 8018888:	4619      	mov	r1, r3
 801888a:	208a      	movs	r0, #138	@ 0x8a
 801888c:	f000 fba2 	bl	8018fd4 <SUBGRF_WriteCommand>
}
 8018890:	bf00      	nop
 8018892:	3708      	adds	r7, #8
 8018894:	46bd      	mov	sp, r7
 8018896:	bd80      	pop	{r7, pc}
 8018898:	200013c9 	.word	0x200013c9

0801889c <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 801889c:	b480      	push	{r7}
 801889e:	af00      	add	r7, sp, #0
    return PacketType;
 80188a0:	4b02      	ldr	r3, [pc, #8]	@ (80188ac <SUBGRF_GetPacketType+0x10>)
 80188a2:	781b      	ldrb	r3, [r3, #0]
}
 80188a4:	4618      	mov	r0, r3
 80188a6:	46bd      	mov	sp, r7
 80188a8:	bc80      	pop	{r7}
 80188aa:	4770      	bx	lr
 80188ac:	200013c9 	.word	0x200013c9

080188b0 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 80188b0:	b580      	push	{r7, lr}
 80188b2:	b084      	sub	sp, #16
 80188b4:	af00      	add	r7, sp, #0
 80188b6:	4603      	mov	r3, r0
 80188b8:	71fb      	strb	r3, [r7, #7]
 80188ba:	460b      	mov	r3, r1
 80188bc:	71bb      	strb	r3, [r7, #6]
 80188be:	4613      	mov	r3, r2
 80188c0:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 80188c2:	79fb      	ldrb	r3, [r7, #7]
 80188c4:	2b01      	cmp	r3, #1
 80188c6:	d149      	bne.n	801895c <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 80188c8:	2000      	movs	r0, #0
 80188ca:	f7e9 feeb 	bl	80026a4 <RBI_GetRFOMaxPowerConfig>
 80188ce:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 80188d0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80188d4:	68fa      	ldr	r2, [r7, #12]
 80188d6:	429a      	cmp	r2, r3
 80188d8:	da01      	bge.n	80188de <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 80188da:	68fb      	ldr	r3, [r7, #12]
 80188dc:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 80188de:	68fb      	ldr	r3, [r7, #12]
 80188e0:	2b0e      	cmp	r3, #14
 80188e2:	d10e      	bne.n	8018902 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 80188e4:	2301      	movs	r3, #1
 80188e6:	2201      	movs	r2, #1
 80188e8:	2100      	movs	r1, #0
 80188ea:	2004      	movs	r0, #4
 80188ec:	f7ff fef6 	bl	80186dc <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80188f0:	79ba      	ldrb	r2, [r7, #6]
 80188f2:	68fb      	ldr	r3, [r7, #12]
 80188f4:	b2db      	uxtb	r3, r3
 80188f6:	1ad3      	subs	r3, r2, r3
 80188f8:	b2db      	uxtb	r3, r3
 80188fa:	330e      	adds	r3, #14
 80188fc:	b2db      	uxtb	r3, r3
 80188fe:	71bb      	strb	r3, [r7, #6]
 8018900:	e01f      	b.n	8018942 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 8018902:	68fb      	ldr	r3, [r7, #12]
 8018904:	2b0a      	cmp	r3, #10
 8018906:	d10e      	bne.n	8018926 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8018908:	2301      	movs	r3, #1
 801890a:	2201      	movs	r2, #1
 801890c:	2100      	movs	r1, #0
 801890e:	2001      	movs	r0, #1
 8018910:	f7ff fee4 	bl	80186dc <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8018914:	79ba      	ldrb	r2, [r7, #6]
 8018916:	68fb      	ldr	r3, [r7, #12]
 8018918:	b2db      	uxtb	r3, r3
 801891a:	1ad3      	subs	r3, r2, r3
 801891c:	b2db      	uxtb	r3, r3
 801891e:	330d      	adds	r3, #13
 8018920:	b2db      	uxtb	r3, r3
 8018922:	71bb      	strb	r3, [r7, #6]
 8018924:	e00d      	b.n	8018942 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 8018926:	2301      	movs	r3, #1
 8018928:	2201      	movs	r2, #1
 801892a:	2100      	movs	r1, #0
 801892c:	2007      	movs	r0, #7
 801892e:	f7ff fed5 	bl	80186dc <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8018932:	79ba      	ldrb	r2, [r7, #6]
 8018934:	68fb      	ldr	r3, [r7, #12]
 8018936:	b2db      	uxtb	r3, r3
 8018938:	1ad3      	subs	r3, r2, r3
 801893a:	b2db      	uxtb	r3, r3
 801893c:	330e      	adds	r3, #14
 801893e:	b2db      	uxtb	r3, r3
 8018940:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 8018942:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018946:	f113 0f11 	cmn.w	r3, #17
 801894a:	da01      	bge.n	8018950 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 801894c:	23ef      	movs	r3, #239	@ 0xef
 801894e:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8018950:	2118      	movs	r1, #24
 8018952:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8018956:	f000 fa8d 	bl	8018e74 <SUBGRF_WriteRegister>
 801895a:	e067      	b.n	8018a2c <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 801895c:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8018960:	f000 fa9c 	bl	8018e9c <SUBGRF_ReadRegister>
 8018964:	4603      	mov	r3, r0
 8018966:	f043 031e 	orr.w	r3, r3, #30
 801896a:	b2db      	uxtb	r3, r3
 801896c:	4619      	mov	r1, r3
 801896e:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 8018972:	f000 fa7f 	bl	8018e74 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8018976:	2001      	movs	r0, #1
 8018978:	f7e9 fe94 	bl	80026a4 <RBI_GetRFOMaxPowerConfig>
 801897c:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801897e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018982:	68fa      	ldr	r2, [r7, #12]
 8018984:	429a      	cmp	r2, r3
 8018986:	da01      	bge.n	801898c <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 8018988:	68fb      	ldr	r3, [r7, #12]
 801898a:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 801898c:	68fb      	ldr	r3, [r7, #12]
 801898e:	2b14      	cmp	r3, #20
 8018990:	d10e      	bne.n	80189b0 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8018992:	2301      	movs	r3, #1
 8018994:	2200      	movs	r2, #0
 8018996:	2105      	movs	r1, #5
 8018998:	2003      	movs	r0, #3
 801899a:	f7ff fe9f 	bl	80186dc <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 801899e:	79ba      	ldrb	r2, [r7, #6]
 80189a0:	68fb      	ldr	r3, [r7, #12]
 80189a2:	b2db      	uxtb	r3, r3
 80189a4:	1ad3      	subs	r3, r2, r3
 80189a6:	b2db      	uxtb	r3, r3
 80189a8:	3316      	adds	r3, #22
 80189aa:	b2db      	uxtb	r3, r3
 80189ac:	71bb      	strb	r3, [r7, #6]
 80189ae:	e031      	b.n	8018a14 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 80189b0:	68fb      	ldr	r3, [r7, #12]
 80189b2:	2b11      	cmp	r3, #17
 80189b4:	d10e      	bne.n	80189d4 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 80189b6:	2301      	movs	r3, #1
 80189b8:	2200      	movs	r2, #0
 80189ba:	2103      	movs	r1, #3
 80189bc:	2002      	movs	r0, #2
 80189be:	f7ff fe8d 	bl	80186dc <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80189c2:	79ba      	ldrb	r2, [r7, #6]
 80189c4:	68fb      	ldr	r3, [r7, #12]
 80189c6:	b2db      	uxtb	r3, r3
 80189c8:	1ad3      	subs	r3, r2, r3
 80189ca:	b2db      	uxtb	r3, r3
 80189cc:	3316      	adds	r3, #22
 80189ce:	b2db      	uxtb	r3, r3
 80189d0:	71bb      	strb	r3, [r7, #6]
 80189d2:	e01f      	b.n	8018a14 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 80189d4:	68fb      	ldr	r3, [r7, #12]
 80189d6:	2b0e      	cmp	r3, #14
 80189d8:	d10e      	bne.n	80189f8 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 80189da:	2301      	movs	r3, #1
 80189dc:	2200      	movs	r2, #0
 80189de:	2102      	movs	r1, #2
 80189e0:	2002      	movs	r0, #2
 80189e2:	f7ff fe7b 	bl	80186dc <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80189e6:	79ba      	ldrb	r2, [r7, #6]
 80189e8:	68fb      	ldr	r3, [r7, #12]
 80189ea:	b2db      	uxtb	r3, r3
 80189ec:	1ad3      	subs	r3, r2, r3
 80189ee:	b2db      	uxtb	r3, r3
 80189f0:	330e      	adds	r3, #14
 80189f2:	b2db      	uxtb	r3, r3
 80189f4:	71bb      	strb	r3, [r7, #6]
 80189f6:	e00d      	b.n	8018a14 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 80189f8:	2301      	movs	r3, #1
 80189fa:	2200      	movs	r2, #0
 80189fc:	2107      	movs	r1, #7
 80189fe:	2004      	movs	r0, #4
 8018a00:	f7ff fe6c 	bl	80186dc <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8018a04:	79ba      	ldrb	r2, [r7, #6]
 8018a06:	68fb      	ldr	r3, [r7, #12]
 8018a08:	b2db      	uxtb	r3, r3
 8018a0a:	1ad3      	subs	r3, r2, r3
 8018a0c:	b2db      	uxtb	r3, r3
 8018a0e:	3316      	adds	r3, #22
 8018a10:	b2db      	uxtb	r3, r3
 8018a12:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 8018a14:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8018a18:	f113 0f09 	cmn.w	r3, #9
 8018a1c:	da01      	bge.n	8018a22 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 8018a1e:	23f7      	movs	r3, #247	@ 0xf7
 8018a20:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8018a22:	2138      	movs	r1, #56	@ 0x38
 8018a24:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8018a28:	f000 fa24 	bl	8018e74 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8018a2c:	79bb      	ldrb	r3, [r7, #6]
 8018a2e:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8018a30:	797b      	ldrb	r3, [r7, #5]
 8018a32:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8018a34:	f107 0308 	add.w	r3, r7, #8
 8018a38:	2202      	movs	r2, #2
 8018a3a:	4619      	mov	r1, r3
 8018a3c:	208e      	movs	r0, #142	@ 0x8e
 8018a3e:	f000 fac9 	bl	8018fd4 <SUBGRF_WriteCommand>
}
 8018a42:	bf00      	nop
 8018a44:	3710      	adds	r7, #16
 8018a46:	46bd      	mov	sp, r7
 8018a48:	bd80      	pop	{r7, pc}
	...

08018a4c <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8018a4c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8018a50:	b086      	sub	sp, #24
 8018a52:	af00      	add	r7, sp, #0
 8018a54:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8018a56:	2300      	movs	r3, #0
 8018a58:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8018a5a:	f107 0308 	add.w	r3, r7, #8
 8018a5e:	2200      	movs	r2, #0
 8018a60:	601a      	str	r2, [r3, #0]
 8018a62:	605a      	str	r2, [r3, #4]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8018a64:	687b      	ldr	r3, [r7, #4]
 8018a66:	781a      	ldrb	r2, [r3, #0]
 8018a68:	4b5c      	ldr	r3, [pc, #368]	@ (8018bdc <SUBGRF_SetModulationParams+0x190>)
 8018a6a:	781b      	ldrb	r3, [r3, #0]
 8018a6c:	429a      	cmp	r2, r3
 8018a6e:	d004      	beq.n	8018a7a <SUBGRF_SetModulationParams+0x2e>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8018a70:	687b      	ldr	r3, [r7, #4]
 8018a72:	781b      	ldrb	r3, [r3, #0]
 8018a74:	4618      	mov	r0, r3
 8018a76:	f7ff fef5 	bl	8018864 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8018a7a:	687b      	ldr	r3, [r7, #4]
 8018a7c:	781b      	ldrb	r3, [r3, #0]
 8018a7e:	2b03      	cmp	r3, #3
 8018a80:	f200 80a5 	bhi.w	8018bce <SUBGRF_SetModulationParams+0x182>
 8018a84:	a201      	add	r2, pc, #4	@ (adr r2, 8018a8c <SUBGRF_SetModulationParams+0x40>)
 8018a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018a8a:	bf00      	nop
 8018a8c:	08018a9d 	.word	0x08018a9d
 8018a90:	08018b5d 	.word	0x08018b5d
 8018a94:	08018b1f 	.word	0x08018b1f
 8018a98:	08018b8b 	.word	0x08018b8b
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8018a9c:	2308      	movs	r3, #8
 8018a9e:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8018aa0:	687b      	ldr	r3, [r7, #4]
 8018aa2:	685b      	ldr	r3, [r3, #4]
 8018aa4:	4a4e      	ldr	r2, [pc, #312]	@ (8018be0 <SUBGRF_SetModulationParams+0x194>)
 8018aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8018aaa:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8018aac:	697b      	ldr	r3, [r7, #20]
 8018aae:	0c1b      	lsrs	r3, r3, #16
 8018ab0:	b2db      	uxtb	r3, r3
 8018ab2:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8018ab4:	697b      	ldr	r3, [r7, #20]
 8018ab6:	0a1b      	lsrs	r3, r3, #8
 8018ab8:	b2db      	uxtb	r3, r3
 8018aba:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8018abc:	697b      	ldr	r3, [r7, #20]
 8018abe:	b2db      	uxtb	r3, r3
 8018ac0:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8018ac2:	687b      	ldr	r3, [r7, #4]
 8018ac4:	7b1b      	ldrb	r3, [r3, #12]
 8018ac6:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8018ac8:	687b      	ldr	r3, [r7, #4]
 8018aca:	7b5b      	ldrb	r3, [r3, #13]
 8018acc:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8018ace:	687b      	ldr	r3, [r7, #4]
 8018ad0:	689b      	ldr	r3, [r3, #8]
 8018ad2:	2200      	movs	r2, #0
 8018ad4:	461c      	mov	r4, r3
 8018ad6:	4615      	mov	r5, r2
 8018ad8:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8018adc:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8018ae0:	4a40      	ldr	r2, [pc, #256]	@ (8018be4 <SUBGRF_SetModulationParams+0x198>)
 8018ae2:	f04f 0300 	mov.w	r3, #0
 8018ae6:	4640      	mov	r0, r8
 8018ae8:	4649      	mov	r1, r9
 8018aea:	f7e8 f927 	bl	8000d3c <__aeabi_uldivmod>
 8018aee:	4602      	mov	r2, r0
 8018af0:	460b      	mov	r3, r1
 8018af2:	4613      	mov	r3, r2
 8018af4:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8018af6:	697b      	ldr	r3, [r7, #20]
 8018af8:	0c1b      	lsrs	r3, r3, #16
 8018afa:	b2db      	uxtb	r3, r3
 8018afc:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8018afe:	697b      	ldr	r3, [r7, #20]
 8018b00:	0a1b      	lsrs	r3, r3, #8
 8018b02:	b2db      	uxtb	r3, r3
 8018b04:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8018b06:	697b      	ldr	r3, [r7, #20]
 8018b08:	b2db      	uxtb	r3, r3
 8018b0a:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8018b0c:	7cfb      	ldrb	r3, [r7, #19]
 8018b0e:	b29a      	uxth	r2, r3
 8018b10:	f107 0308 	add.w	r3, r7, #8
 8018b14:	4619      	mov	r1, r3
 8018b16:	208b      	movs	r0, #139	@ 0x8b
 8018b18:	f000 fa5c 	bl	8018fd4 <SUBGRF_WriteCommand>
        break;
 8018b1c:	e058      	b.n	8018bd0 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_BPSK:
        n = 4;
 8018b1e:	2304      	movs	r3, #4
 8018b20:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8018b22:	687b      	ldr	r3, [r7, #4]
 8018b24:	691b      	ldr	r3, [r3, #16]
 8018b26:	4a2e      	ldr	r2, [pc, #184]	@ (8018be0 <SUBGRF_SetModulationParams+0x194>)
 8018b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8018b2c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8018b2e:	697b      	ldr	r3, [r7, #20]
 8018b30:	0c1b      	lsrs	r3, r3, #16
 8018b32:	b2db      	uxtb	r3, r3
 8018b34:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8018b36:	697b      	ldr	r3, [r7, #20]
 8018b38:	0a1b      	lsrs	r3, r3, #8
 8018b3a:	b2db      	uxtb	r3, r3
 8018b3c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8018b3e:	697b      	ldr	r3, [r7, #20]
 8018b40:	b2db      	uxtb	r3, r3
 8018b42:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8018b44:	687b      	ldr	r3, [r7, #4]
 8018b46:	7d1b      	ldrb	r3, [r3, #20]
 8018b48:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8018b4a:	7cfb      	ldrb	r3, [r7, #19]
 8018b4c:	b29a      	uxth	r2, r3
 8018b4e:	f107 0308 	add.w	r3, r7, #8
 8018b52:	4619      	mov	r1, r3
 8018b54:	208b      	movs	r0, #139	@ 0x8b
 8018b56:	f000 fa3d 	bl	8018fd4 <SUBGRF_WriteCommand>
        break;
 8018b5a:	e039      	b.n	8018bd0 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_LORA:
        n = 4;
 8018b5c:	2304      	movs	r3, #4
 8018b5e:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8018b60:	687b      	ldr	r3, [r7, #4]
 8018b62:	7e1b      	ldrb	r3, [r3, #24]
 8018b64:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8018b66:	687b      	ldr	r3, [r7, #4]
 8018b68:	7e5b      	ldrb	r3, [r3, #25]
 8018b6a:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8018b6c:	687b      	ldr	r3, [r7, #4]
 8018b6e:	7e9b      	ldrb	r3, [r3, #26]
 8018b70:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8018b72:	687b      	ldr	r3, [r7, #4]
 8018b74:	7edb      	ldrb	r3, [r3, #27]
 8018b76:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8018b78:	7cfb      	ldrb	r3, [r7, #19]
 8018b7a:	b29a      	uxth	r2, r3
 8018b7c:	f107 0308 	add.w	r3, r7, #8
 8018b80:	4619      	mov	r1, r3
 8018b82:	208b      	movs	r0, #139	@ 0x8b
 8018b84:	f000 fa26 	bl	8018fd4 <SUBGRF_WriteCommand>

        break;
 8018b88:	e022      	b.n	8018bd0 <SUBGRF_SetModulationParams+0x184>
    case PACKET_TYPE_GMSK:
        n = 5;
 8018b8a:	2305      	movs	r3, #5
 8018b8c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8018b8e:	687b      	ldr	r3, [r7, #4]
 8018b90:	685b      	ldr	r3, [r3, #4]
 8018b92:	4a13      	ldr	r2, [pc, #76]	@ (8018be0 <SUBGRF_SetModulationParams+0x194>)
 8018b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8018b98:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8018b9a:	697b      	ldr	r3, [r7, #20]
 8018b9c:	0c1b      	lsrs	r3, r3, #16
 8018b9e:	b2db      	uxtb	r3, r3
 8018ba0:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8018ba2:	697b      	ldr	r3, [r7, #20]
 8018ba4:	0a1b      	lsrs	r3, r3, #8
 8018ba6:	b2db      	uxtb	r3, r3
 8018ba8:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8018baa:	697b      	ldr	r3, [r7, #20]
 8018bac:	b2db      	uxtb	r3, r3
 8018bae:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8018bb0:	687b      	ldr	r3, [r7, #4]
 8018bb2:	7b1b      	ldrb	r3, [r3, #12]
 8018bb4:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8018bb6:	687b      	ldr	r3, [r7, #4]
 8018bb8:	7b5b      	ldrb	r3, [r3, #13]
 8018bba:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8018bbc:	7cfb      	ldrb	r3, [r7, #19]
 8018bbe:	b29a      	uxth	r2, r3
 8018bc0:	f107 0308 	add.w	r3, r7, #8
 8018bc4:	4619      	mov	r1, r3
 8018bc6:	208b      	movs	r0, #139	@ 0x8b
 8018bc8:	f000 fa04 	bl	8018fd4 <SUBGRF_WriteCommand>
        break;
 8018bcc:	e000      	b.n	8018bd0 <SUBGRF_SetModulationParams+0x184>
    default:
    case PACKET_TYPE_NONE:
      break;
 8018bce:	bf00      	nop
    }
}
 8018bd0:	bf00      	nop
 8018bd2:	3718      	adds	r7, #24
 8018bd4:	46bd      	mov	sp, r7
 8018bd6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8018bda:	bf00      	nop
 8018bdc:	200013c9 	.word	0x200013c9
 8018be0:	3d090000 	.word	0x3d090000
 8018be4:	01e84800 	.word	0x01e84800

08018be8 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8018be8:	b580      	push	{r7, lr}
 8018bea:	b086      	sub	sp, #24
 8018bec:	af00      	add	r7, sp, #0
 8018bee:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8018bf0:	2300      	movs	r3, #0
 8018bf2:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8018bf4:	f107 030c 	add.w	r3, r7, #12
 8018bf8:	2200      	movs	r2, #0
 8018bfa:	601a      	str	r2, [r3, #0]
 8018bfc:	605a      	str	r2, [r3, #4]
 8018bfe:	721a      	strb	r2, [r3, #8]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8018c00:	687b      	ldr	r3, [r7, #4]
 8018c02:	781a      	ldrb	r2, [r3, #0]
 8018c04:	4b44      	ldr	r3, [pc, #272]	@ (8018d18 <SUBGRF_SetPacketParams+0x130>)
 8018c06:	781b      	ldrb	r3, [r3, #0]
 8018c08:	429a      	cmp	r2, r3
 8018c0a:	d004      	beq.n	8018c16 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8018c0c:	687b      	ldr	r3, [r7, #4]
 8018c0e:	781b      	ldrb	r3, [r3, #0]
 8018c10:	4618      	mov	r0, r3
 8018c12:	f7ff fe27 	bl	8018864 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8018c16:	687b      	ldr	r3, [r7, #4]
 8018c18:	781b      	ldrb	r3, [r3, #0]
 8018c1a:	2b03      	cmp	r3, #3
 8018c1c:	d878      	bhi.n	8018d10 <SUBGRF_SetPacketParams+0x128>
 8018c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8018c24 <SUBGRF_SetPacketParams+0x3c>)
 8018c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018c24:	08018c35 	.word	0x08018c35
 8018c28:	08018cc5 	.word	0x08018cc5
 8018c2c:	08018cb9 	.word	0x08018cb9
 8018c30:	08018c35 	.word	0x08018c35
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8018c34:	687b      	ldr	r3, [r7, #4]
 8018c36:	7a5b      	ldrb	r3, [r3, #9]
 8018c38:	2bf1      	cmp	r3, #241	@ 0xf1
 8018c3a:	d10a      	bne.n	8018c52 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8018c3c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8018c40:	f7ff faa6 	bl	8018190 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8018c44:	f248 0005 	movw	r0, #32773	@ 0x8005
 8018c48:	f7ff fac2 	bl	80181d0 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8018c4c:	2302      	movs	r3, #2
 8018c4e:	75bb      	strb	r3, [r7, #22]
 8018c50:	e011      	b.n	8018c76 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8018c52:	687b      	ldr	r3, [r7, #4]
 8018c54:	7a5b      	ldrb	r3, [r3, #9]
 8018c56:	2bf2      	cmp	r3, #242	@ 0xf2
 8018c58:	d10a      	bne.n	8018c70 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8018c5a:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 8018c5e:	f7ff fa97 	bl	8018190 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8018c62:	f241 0021 	movw	r0, #4129	@ 0x1021
 8018c66:	f7ff fab3 	bl	80181d0 <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8018c6a:	2306      	movs	r3, #6
 8018c6c:	75bb      	strb	r3, [r7, #22]
 8018c6e:	e002      	b.n	8018c76 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8018c70:	687b      	ldr	r3, [r7, #4]
 8018c72:	7a5b      	ldrb	r3, [r3, #9]
 8018c74:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 8018c76:	2309      	movs	r3, #9
 8018c78:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8018c7a:	687b      	ldr	r3, [r7, #4]
 8018c7c:	885b      	ldrh	r3, [r3, #2]
 8018c7e:	0a1b      	lsrs	r3, r3, #8
 8018c80:	b29b      	uxth	r3, r3
 8018c82:	b2db      	uxtb	r3, r3
 8018c84:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8018c86:	687b      	ldr	r3, [r7, #4]
 8018c88:	885b      	ldrh	r3, [r3, #2]
 8018c8a:	b2db      	uxtb	r3, r3
 8018c8c:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8018c8e:	687b      	ldr	r3, [r7, #4]
 8018c90:	791b      	ldrb	r3, [r3, #4]
 8018c92:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	795b      	ldrb	r3, [r3, #5]
 8018c98:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	799b      	ldrb	r3, [r3, #6]
 8018c9e:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8018ca0:	687b      	ldr	r3, [r7, #4]
 8018ca2:	79db      	ldrb	r3, [r3, #7]
 8018ca4:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8018ca6:	687b      	ldr	r3, [r7, #4]
 8018ca8:	7a1b      	ldrb	r3, [r3, #8]
 8018caa:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8018cac:	7dbb      	ldrb	r3, [r7, #22]
 8018cae:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8018cb0:	687b      	ldr	r3, [r7, #4]
 8018cb2:	7a9b      	ldrb	r3, [r3, #10]
 8018cb4:	753b      	strb	r3, [r7, #20]
        break;
 8018cb6:	e022      	b.n	8018cfe <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8018cb8:	2301      	movs	r3, #1
 8018cba:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8018cbc:	687b      	ldr	r3, [r7, #4]
 8018cbe:	7b1b      	ldrb	r3, [r3, #12]
 8018cc0:	733b      	strb	r3, [r7, #12]
        break;
 8018cc2:	e01c      	b.n	8018cfe <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8018cc4:	2306      	movs	r3, #6
 8018cc6:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8018cc8:	687b      	ldr	r3, [r7, #4]
 8018cca:	89db      	ldrh	r3, [r3, #14]
 8018ccc:	0a1b      	lsrs	r3, r3, #8
 8018cce:	b29b      	uxth	r3, r3
 8018cd0:	b2db      	uxtb	r3, r3
 8018cd2:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	89db      	ldrh	r3, [r3, #14]
 8018cd8:	b2db      	uxtb	r3, r3
 8018cda:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8018cdc:	687b      	ldr	r3, [r7, #4]
 8018cde:	7c1a      	ldrb	r2, [r3, #16]
 8018ce0:	4b0e      	ldr	r3, [pc, #56]	@ (8018d1c <SUBGRF_SetPacketParams+0x134>)
 8018ce2:	4611      	mov	r1, r2
 8018ce4:	7019      	strb	r1, [r3, #0]
 8018ce6:	4613      	mov	r3, r2
 8018ce8:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8018cea:	687b      	ldr	r3, [r7, #4]
 8018cec:	7c5b      	ldrb	r3, [r3, #17]
 8018cee:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8018cf0:	687b      	ldr	r3, [r7, #4]
 8018cf2:	7c9b      	ldrb	r3, [r3, #18]
 8018cf4:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	7cdb      	ldrb	r3, [r3, #19]
 8018cfa:	747b      	strb	r3, [r7, #17]
        break;
 8018cfc:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8018cfe:	7dfb      	ldrb	r3, [r7, #23]
 8018d00:	b29a      	uxth	r2, r3
 8018d02:	f107 030c 	add.w	r3, r7, #12
 8018d06:	4619      	mov	r1, r3
 8018d08:	208c      	movs	r0, #140	@ 0x8c
 8018d0a:	f000 f963 	bl	8018fd4 <SUBGRF_WriteCommand>
 8018d0e:	e000      	b.n	8018d12 <SUBGRF_SetPacketParams+0x12a>
        return;
 8018d10:	bf00      	nop
}
 8018d12:	3718      	adds	r7, #24
 8018d14:	46bd      	mov	sp, r7
 8018d16:	bd80      	pop	{r7, pc}
 8018d18:	200013c9 	.word	0x200013c9
 8018d1c:	200013ca 	.word	0x200013ca

08018d20 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8018d20:	b580      	push	{r7, lr}
 8018d22:	b084      	sub	sp, #16
 8018d24:	af00      	add	r7, sp, #0
 8018d26:	4603      	mov	r3, r0
 8018d28:	460a      	mov	r2, r1
 8018d2a:	71fb      	strb	r3, [r7, #7]
 8018d2c:	4613      	mov	r3, r2
 8018d2e:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8018d30:	79fb      	ldrb	r3, [r7, #7]
 8018d32:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8018d34:	79bb      	ldrb	r3, [r7, #6]
 8018d36:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8018d38:	f107 030c 	add.w	r3, r7, #12
 8018d3c:	2202      	movs	r2, #2
 8018d3e:	4619      	mov	r1, r3
 8018d40:	208f      	movs	r0, #143	@ 0x8f
 8018d42:	f000 f947 	bl	8018fd4 <SUBGRF_WriteCommand>
}
 8018d46:	bf00      	nop
 8018d48:	3710      	adds	r7, #16
 8018d4a:	46bd      	mov	sp, r7
 8018d4c:	bd80      	pop	{r7, pc}

08018d4e <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 8018d4e:	b580      	push	{r7, lr}
 8018d50:	b082      	sub	sp, #8
 8018d52:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8018d54:	2300      	movs	r3, #0
 8018d56:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8018d58:	1d3b      	adds	r3, r7, #4
 8018d5a:	2201      	movs	r2, #1
 8018d5c:	4619      	mov	r1, r3
 8018d5e:	2015      	movs	r0, #21
 8018d60:	f000 f95a 	bl	8019018 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8018d64:	793b      	ldrb	r3, [r7, #4]
 8018d66:	425b      	negs	r3, r3
 8018d68:	105b      	asrs	r3, r3, #1
 8018d6a:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8018d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8018d70:	4618      	mov	r0, r3
 8018d72:	3708      	adds	r7, #8
 8018d74:	46bd      	mov	sp, r7
 8018d76:	bd80      	pop	{r7, pc}

08018d78 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8018d78:	b580      	push	{r7, lr}
 8018d7a:	b084      	sub	sp, #16
 8018d7c:	af00      	add	r7, sp, #0
 8018d7e:	6078      	str	r0, [r7, #4]
 8018d80:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8018d82:	f107 030c 	add.w	r3, r7, #12
 8018d86:	2202      	movs	r2, #2
 8018d88:	4619      	mov	r1, r3
 8018d8a:	2013      	movs	r0, #19
 8018d8c:	f000 f944 	bl	8019018 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8018d90:	f7ff fd84 	bl	801889c <SUBGRF_GetPacketType>
 8018d94:	4603      	mov	r3, r0
 8018d96:	2b01      	cmp	r3, #1
 8018d98:	d10d      	bne.n	8018db6 <SUBGRF_GetRxBufferStatus+0x3e>
 8018d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8018dcc <SUBGRF_GetRxBufferStatus+0x54>)
 8018d9c:	781b      	ldrb	r3, [r3, #0]
 8018d9e:	b2db      	uxtb	r3, r3
 8018da0:	2b01      	cmp	r3, #1
 8018da2:	d108      	bne.n	8018db6 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8018da4:	f240 7002 	movw	r0, #1794	@ 0x702
 8018da8:	f000 f878 	bl	8018e9c <SUBGRF_ReadRegister>
 8018dac:	4603      	mov	r3, r0
 8018dae:	461a      	mov	r2, r3
 8018db0:	687b      	ldr	r3, [r7, #4]
 8018db2:	701a      	strb	r2, [r3, #0]
 8018db4:	e002      	b.n	8018dbc <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8018db6:	7b3a      	ldrb	r2, [r7, #12]
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8018dbc:	7b7a      	ldrb	r2, [r7, #13]
 8018dbe:	683b      	ldr	r3, [r7, #0]
 8018dc0:	701a      	strb	r2, [r3, #0]
}
 8018dc2:	bf00      	nop
 8018dc4:	3710      	adds	r7, #16
 8018dc6:	46bd      	mov	sp, r7
 8018dc8:	bd80      	pop	{r7, pc}
 8018dca:	bf00      	nop
 8018dcc:	200013ca 	.word	0x200013ca

08018dd0 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8018dd0:	b580      	push	{r7, lr}
 8018dd2:	b084      	sub	sp, #16
 8018dd4:	af00      	add	r7, sp, #0
 8018dd6:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8018dd8:	f107 030c 	add.w	r3, r7, #12
 8018ddc:	2203      	movs	r2, #3
 8018dde:	4619      	mov	r1, r3
 8018de0:	2014      	movs	r0, #20
 8018de2:	f000 f919 	bl	8019018 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8018de6:	f7ff fd59 	bl	801889c <SUBGRF_GetPacketType>
 8018dea:	4603      	mov	r3, r0
 8018dec:	461a      	mov	r2, r3
 8018dee:	687b      	ldr	r3, [r7, #4]
 8018df0:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 8018df2:	687b      	ldr	r3, [r7, #4]
 8018df4:	781b      	ldrb	r3, [r3, #0]
 8018df6:	2b00      	cmp	r3, #0
 8018df8:	d002      	beq.n	8018e00 <SUBGRF_GetPacketStatus+0x30>
 8018dfa:	2b01      	cmp	r3, #1
 8018dfc:	d013      	beq.n	8018e26 <SUBGRF_GetPacketStatus+0x56>
 8018dfe:	e02a      	b.n	8018e56 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8018e00:	7b3a      	ldrb	r2, [r7, #12]
 8018e02:	687b      	ldr	r3, [r7, #4]
 8018e04:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8018e06:	7b7b      	ldrb	r3, [r7, #13]
 8018e08:	425b      	negs	r3, r3
 8018e0a:	105b      	asrs	r3, r3, #1
 8018e0c:	b25a      	sxtb	r2, r3
 8018e0e:	687b      	ldr	r3, [r7, #4]
 8018e10:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8018e12:	7bbb      	ldrb	r3, [r7, #14]
 8018e14:	425b      	negs	r3, r3
 8018e16:	105b      	asrs	r3, r3, #1
 8018e18:	b25a      	sxtb	r2, r3
 8018e1a:	687b      	ldr	r3, [r7, #4]
 8018e1c:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8018e1e:	687b      	ldr	r3, [r7, #4]
 8018e20:	2200      	movs	r2, #0
 8018e22:	609a      	str	r2, [r3, #8]
            break;
 8018e24:	e020      	b.n	8018e68 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8018e26:	7b3b      	ldrb	r3, [r7, #12]
 8018e28:	425b      	negs	r3, r3
 8018e2a:	105b      	asrs	r3, r3, #1
 8018e2c:	b25a      	sxtb	r2, r3
 8018e2e:	687b      	ldr	r3, [r7, #4]
 8018e30:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8018e32:	7b7b      	ldrb	r3, [r7, #13]
 8018e34:	b25b      	sxtb	r3, r3
 8018e36:	3302      	adds	r3, #2
 8018e38:	109b      	asrs	r3, r3, #2
 8018e3a:	b25a      	sxtb	r2, r3
 8018e3c:	687b      	ldr	r3, [r7, #4]
 8018e3e:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8018e40:	7bbb      	ldrb	r3, [r7, #14]
 8018e42:	425b      	negs	r3, r3
 8018e44:	105b      	asrs	r3, r3, #1
 8018e46:	b25a      	sxtb	r2, r3
 8018e48:	687b      	ldr	r3, [r7, #4]
 8018e4a:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8018e4c:	4b08      	ldr	r3, [pc, #32]	@ (8018e70 <SUBGRF_GetPacketStatus+0xa0>)
 8018e4e:	681a      	ldr	r2, [r3, #0]
 8018e50:	687b      	ldr	r3, [r7, #4]
 8018e52:	611a      	str	r2, [r3, #16]
            break;
 8018e54:	e008      	b.n	8018e68 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8018e56:	2214      	movs	r2, #20
 8018e58:	2100      	movs	r1, #0
 8018e5a:	6878      	ldr	r0, [r7, #4]
 8018e5c:	f000 fe7c 	bl	8019b58 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8018e60:	687b      	ldr	r3, [r7, #4]
 8018e62:	220f      	movs	r2, #15
 8018e64:	701a      	strb	r2, [r3, #0]
            break;
 8018e66:	bf00      	nop
    }
}
 8018e68:	bf00      	nop
 8018e6a:	3710      	adds	r7, #16
 8018e6c:	46bd      	mov	sp, r7
 8018e6e:	bd80      	pop	{r7, pc}
 8018e70:	200013cc 	.word	0x200013cc

08018e74 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8018e74:	b580      	push	{r7, lr}
 8018e76:	b082      	sub	sp, #8
 8018e78:	af00      	add	r7, sp, #0
 8018e7a:	4603      	mov	r3, r0
 8018e7c:	460a      	mov	r2, r1
 8018e7e:	80fb      	strh	r3, [r7, #6]
 8018e80:	4613      	mov	r3, r2
 8018e82:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8018e84:	1d7a      	adds	r2, r7, #5
 8018e86:	88f9      	ldrh	r1, [r7, #6]
 8018e88:	2301      	movs	r3, #1
 8018e8a:	4803      	ldr	r0, [pc, #12]	@ (8018e98 <SUBGRF_WriteRegister+0x24>)
 8018e8c:	f7ee f85c 	bl	8006f48 <HAL_SUBGHZ_WriteRegisters>
}
 8018e90:	bf00      	nop
 8018e92:	3708      	adds	r7, #8
 8018e94:	46bd      	mov	sp, r7
 8018e96:	bd80      	pop	{r7, pc}
 8018e98:	20000788 	.word	0x20000788

08018e9c <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8018e9c:	b580      	push	{r7, lr}
 8018e9e:	b084      	sub	sp, #16
 8018ea0:	af00      	add	r7, sp, #0
 8018ea2:	4603      	mov	r3, r0
 8018ea4:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8018ea6:	f107 020f 	add.w	r2, r7, #15
 8018eaa:	88f9      	ldrh	r1, [r7, #6]
 8018eac:	2301      	movs	r3, #1
 8018eae:	4804      	ldr	r0, [pc, #16]	@ (8018ec0 <SUBGRF_ReadRegister+0x24>)
 8018eb0:	f7ee f8a9 	bl	8007006 <HAL_SUBGHZ_ReadRegisters>
    return data;
 8018eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8018eb6:	4618      	mov	r0, r3
 8018eb8:	3710      	adds	r7, #16
 8018eba:	46bd      	mov	sp, r7
 8018ebc:	bd80      	pop	{r7, pc}
 8018ebe:	bf00      	nop
 8018ec0:	20000788 	.word	0x20000788

08018ec4 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8018ec4:	b580      	push	{r7, lr}
 8018ec6:	b086      	sub	sp, #24
 8018ec8:	af00      	add	r7, sp, #0
 8018eca:	4603      	mov	r3, r0
 8018ecc:	6039      	str	r1, [r7, #0]
 8018ece:	80fb      	strh	r3, [r7, #6]
 8018ed0:	4613      	mov	r3, r2
 8018ed2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018ed4:	f3ef 8310 	mrs	r3, PRIMASK
 8018ed8:	60fb      	str	r3, [r7, #12]
  return(result);
 8018eda:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8018edc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8018ede:	b672      	cpsid	i
}
 8018ee0:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8018ee2:	88bb      	ldrh	r3, [r7, #4]
 8018ee4:	88f9      	ldrh	r1, [r7, #6]
 8018ee6:	683a      	ldr	r2, [r7, #0]
 8018ee8:	4806      	ldr	r0, [pc, #24]	@ (8018f04 <SUBGRF_WriteRegisters+0x40>)
 8018eea:	f7ee f82d 	bl	8006f48 <HAL_SUBGHZ_WriteRegisters>
 8018eee:	697b      	ldr	r3, [r7, #20]
 8018ef0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018ef2:	693b      	ldr	r3, [r7, #16]
 8018ef4:	f383 8810 	msr	PRIMASK, r3
}
 8018ef8:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8018efa:	bf00      	nop
 8018efc:	3718      	adds	r7, #24
 8018efe:	46bd      	mov	sp, r7
 8018f00:	bd80      	pop	{r7, pc}
 8018f02:	bf00      	nop
 8018f04:	20000788 	.word	0x20000788

08018f08 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8018f08:	b580      	push	{r7, lr}
 8018f0a:	b086      	sub	sp, #24
 8018f0c:	af00      	add	r7, sp, #0
 8018f0e:	4603      	mov	r3, r0
 8018f10:	6039      	str	r1, [r7, #0]
 8018f12:	80fb      	strh	r3, [r7, #6]
 8018f14:	4613      	mov	r3, r2
 8018f16:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018f18:	f3ef 8310 	mrs	r3, PRIMASK
 8018f1c:	60fb      	str	r3, [r7, #12]
  return(result);
 8018f1e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8018f20:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8018f22:	b672      	cpsid	i
}
 8018f24:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8018f26:	88bb      	ldrh	r3, [r7, #4]
 8018f28:	88f9      	ldrh	r1, [r7, #6]
 8018f2a:	683a      	ldr	r2, [r7, #0]
 8018f2c:	4806      	ldr	r0, [pc, #24]	@ (8018f48 <SUBGRF_ReadRegisters+0x40>)
 8018f2e:	f7ee f86a 	bl	8007006 <HAL_SUBGHZ_ReadRegisters>
 8018f32:	697b      	ldr	r3, [r7, #20]
 8018f34:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018f36:	693b      	ldr	r3, [r7, #16]
 8018f38:	f383 8810 	msr	PRIMASK, r3
}
 8018f3c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8018f3e:	bf00      	nop
 8018f40:	3718      	adds	r7, #24
 8018f42:	46bd      	mov	sp, r7
 8018f44:	bd80      	pop	{r7, pc}
 8018f46:	bf00      	nop
 8018f48:	20000788 	.word	0x20000788

08018f4c <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8018f4c:	b580      	push	{r7, lr}
 8018f4e:	b086      	sub	sp, #24
 8018f50:	af00      	add	r7, sp, #0
 8018f52:	4603      	mov	r3, r0
 8018f54:	6039      	str	r1, [r7, #0]
 8018f56:	71fb      	strb	r3, [r7, #7]
 8018f58:	4613      	mov	r3, r2
 8018f5a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018f5c:	f3ef 8310 	mrs	r3, PRIMASK
 8018f60:	60fb      	str	r3, [r7, #12]
  return(result);
 8018f62:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8018f64:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8018f66:	b672      	cpsid	i
}
 8018f68:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8018f6a:	79bb      	ldrb	r3, [r7, #6]
 8018f6c:	b29b      	uxth	r3, r3
 8018f6e:	79f9      	ldrb	r1, [r7, #7]
 8018f70:	683a      	ldr	r2, [r7, #0]
 8018f72:	4806      	ldr	r0, [pc, #24]	@ (8018f8c <SUBGRF_WriteBuffer+0x40>)
 8018f74:	f7ee f95b 	bl	800722e <HAL_SUBGHZ_WriteBuffer>
 8018f78:	697b      	ldr	r3, [r7, #20]
 8018f7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018f7c:	693b      	ldr	r3, [r7, #16]
 8018f7e:	f383 8810 	msr	PRIMASK, r3
}
 8018f82:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8018f84:	bf00      	nop
 8018f86:	3718      	adds	r7, #24
 8018f88:	46bd      	mov	sp, r7
 8018f8a:	bd80      	pop	{r7, pc}
 8018f8c:	20000788 	.word	0x20000788

08018f90 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8018f90:	b580      	push	{r7, lr}
 8018f92:	b086      	sub	sp, #24
 8018f94:	af00      	add	r7, sp, #0
 8018f96:	4603      	mov	r3, r0
 8018f98:	6039      	str	r1, [r7, #0]
 8018f9a:	71fb      	strb	r3, [r7, #7]
 8018f9c:	4613      	mov	r3, r2
 8018f9e:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018fa0:	f3ef 8310 	mrs	r3, PRIMASK
 8018fa4:	60fb      	str	r3, [r7, #12]
  return(result);
 8018fa6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8018fa8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8018faa:	b672      	cpsid	i
}
 8018fac:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8018fae:	79bb      	ldrb	r3, [r7, #6]
 8018fb0:	b29b      	uxth	r3, r3
 8018fb2:	79f9      	ldrb	r1, [r7, #7]
 8018fb4:	683a      	ldr	r2, [r7, #0]
 8018fb6:	4806      	ldr	r0, [pc, #24]	@ (8018fd0 <SUBGRF_ReadBuffer+0x40>)
 8018fb8:	f7ee f98c 	bl	80072d4 <HAL_SUBGHZ_ReadBuffer>
 8018fbc:	697b      	ldr	r3, [r7, #20]
 8018fbe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8018fc0:	693b      	ldr	r3, [r7, #16]
 8018fc2:	f383 8810 	msr	PRIMASK, r3
}
 8018fc6:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8018fc8:	bf00      	nop
 8018fca:	3718      	adds	r7, #24
 8018fcc:	46bd      	mov	sp, r7
 8018fce:	bd80      	pop	{r7, pc}
 8018fd0:	20000788 	.word	0x20000788

08018fd4 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8018fd4:	b580      	push	{r7, lr}
 8018fd6:	b086      	sub	sp, #24
 8018fd8:	af00      	add	r7, sp, #0
 8018fda:	4603      	mov	r3, r0
 8018fdc:	6039      	str	r1, [r7, #0]
 8018fde:	71fb      	strb	r3, [r7, #7]
 8018fe0:	4613      	mov	r3, r2
 8018fe2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8018fe4:	f3ef 8310 	mrs	r3, PRIMASK
 8018fe8:	60fb      	str	r3, [r7, #12]
  return(result);
 8018fea:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8018fec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8018fee:	b672      	cpsid	i
}
 8018ff0:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8018ff2:	88bb      	ldrh	r3, [r7, #4]
 8018ff4:	79f9      	ldrb	r1, [r7, #7]
 8018ff6:	683a      	ldr	r2, [r7, #0]
 8018ff8:	4806      	ldr	r0, [pc, #24]	@ (8019014 <SUBGRF_WriteCommand+0x40>)
 8018ffa:	f7ee f865 	bl	80070c8 <HAL_SUBGHZ_ExecSetCmd>
 8018ffe:	697b      	ldr	r3, [r7, #20]
 8019000:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019002:	693b      	ldr	r3, [r7, #16]
 8019004:	f383 8810 	msr	PRIMASK, r3
}
 8019008:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801900a:	bf00      	nop
 801900c:	3718      	adds	r7, #24
 801900e:	46bd      	mov	sp, r7
 8019010:	bd80      	pop	{r7, pc}
 8019012:	bf00      	nop
 8019014:	20000788 	.word	0x20000788

08019018 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8019018:	b580      	push	{r7, lr}
 801901a:	b086      	sub	sp, #24
 801901c:	af00      	add	r7, sp, #0
 801901e:	4603      	mov	r3, r0
 8019020:	6039      	str	r1, [r7, #0]
 8019022:	71fb      	strb	r3, [r7, #7]
 8019024:	4613      	mov	r3, r2
 8019026:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019028:	f3ef 8310 	mrs	r3, PRIMASK
 801902c:	60fb      	str	r3, [r7, #12]
  return(result);
 801902e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019030:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019032:	b672      	cpsid	i
}
 8019034:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8019036:	88bb      	ldrh	r3, [r7, #4]
 8019038:	79f9      	ldrb	r1, [r7, #7]
 801903a:	683a      	ldr	r2, [r7, #0]
 801903c:	4806      	ldr	r0, [pc, #24]	@ (8019058 <SUBGRF_ReadCommand+0x40>)
 801903e:	f7ee f8a2 	bl	8007186 <HAL_SUBGHZ_ExecGetCmd>
 8019042:	697b      	ldr	r3, [r7, #20]
 8019044:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019046:	693b      	ldr	r3, [r7, #16]
 8019048:	f383 8810 	msr	PRIMASK, r3
}
 801904c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801904e:	bf00      	nop
 8019050:	3718      	adds	r7, #24
 8019052:	46bd      	mov	sp, r7
 8019054:	bd80      	pop	{r7, pc}
 8019056:	bf00      	nop
 8019058:	20000788 	.word	0x20000788

0801905c <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 801905c:	b580      	push	{r7, lr}
 801905e:	b084      	sub	sp, #16
 8019060:	af00      	add	r7, sp, #0
 8019062:	4603      	mov	r3, r0
 8019064:	460a      	mov	r2, r1
 8019066:	71fb      	strb	r3, [r7, #7]
 8019068:	4613      	mov	r3, r2
 801906a:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 801906c:	2301      	movs	r3, #1
 801906e:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8019070:	79bb      	ldrb	r3, [r7, #6]
 8019072:	2b01      	cmp	r3, #1
 8019074:	d10d      	bne.n	8019092 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8019076:	79fb      	ldrb	r3, [r7, #7]
 8019078:	2b01      	cmp	r3, #1
 801907a:	d104      	bne.n	8019086 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 801907c:	2302      	movs	r3, #2
 801907e:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8019080:	2004      	movs	r0, #4
 8019082:	f000 f8ef 	bl	8019264 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 8019086:	79fb      	ldrb	r3, [r7, #7]
 8019088:	2b02      	cmp	r3, #2
 801908a:	d107      	bne.n	801909c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 801908c:	2303      	movs	r3, #3
 801908e:	73fb      	strb	r3, [r7, #15]
 8019090:	e004      	b.n	801909c <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8019092:	79bb      	ldrb	r3, [r7, #6]
 8019094:	2b00      	cmp	r3, #0
 8019096:	d101      	bne.n	801909c <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8019098:	2301      	movs	r3, #1
 801909a:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 801909c:	7bfb      	ldrb	r3, [r7, #15]
 801909e:	4618      	mov	r0, r3
 80190a0:	f7e9 fadd 	bl	800265e <RBI_ConfigRFSwitch>
}
 80190a4:	bf00      	nop
 80190a6:	3710      	adds	r7, #16
 80190a8:	46bd      	mov	sp, r7
 80190aa:	bd80      	pop	{r7, pc}

080190ac <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 80190ac:	b580      	push	{r7, lr}
 80190ae:	b084      	sub	sp, #16
 80190b0:	af00      	add	r7, sp, #0
 80190b2:	4603      	mov	r3, r0
 80190b4:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 80190b6:	2301      	movs	r3, #1
 80190b8:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 80190ba:	f7e9 fade 	bl	800267a <RBI_GetTxConfig>
 80190be:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 80190c0:	68bb      	ldr	r3, [r7, #8]
 80190c2:	2b02      	cmp	r3, #2
 80190c4:	d016      	beq.n	80190f4 <SUBGRF_SetRfTxPower+0x48>
 80190c6:	68bb      	ldr	r3, [r7, #8]
 80190c8:	2b02      	cmp	r3, #2
 80190ca:	dc16      	bgt.n	80190fa <SUBGRF_SetRfTxPower+0x4e>
 80190cc:	68bb      	ldr	r3, [r7, #8]
 80190ce:	2b00      	cmp	r3, #0
 80190d0:	d003      	beq.n	80190da <SUBGRF_SetRfTxPower+0x2e>
 80190d2:	68bb      	ldr	r3, [r7, #8]
 80190d4:	2b01      	cmp	r3, #1
 80190d6:	d00a      	beq.n	80190ee <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 80190d8:	e00f      	b.n	80190fa <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 80190da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80190de:	2b0f      	cmp	r3, #15
 80190e0:	dd02      	ble.n	80190e8 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 80190e2:	2302      	movs	r3, #2
 80190e4:	73fb      	strb	r3, [r7, #15]
            break;
 80190e6:	e009      	b.n	80190fc <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 80190e8:	2301      	movs	r3, #1
 80190ea:	73fb      	strb	r3, [r7, #15]
            break;
 80190ec:	e006      	b.n	80190fc <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 80190ee:	2301      	movs	r3, #1
 80190f0:	73fb      	strb	r3, [r7, #15]
            break;
 80190f2:	e003      	b.n	80190fc <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 80190f4:	2302      	movs	r3, #2
 80190f6:	73fb      	strb	r3, [r7, #15]
            break;
 80190f8:	e000      	b.n	80190fc <SUBGRF_SetRfTxPower+0x50>
            break;
 80190fa:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 80190fc:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8019100:	7bfb      	ldrb	r3, [r7, #15]
 8019102:	2202      	movs	r2, #2
 8019104:	4618      	mov	r0, r3
 8019106:	f7ff fbd3 	bl	80188b0 <SUBGRF_SetTxParams>

    return paSelect;
 801910a:	7bfb      	ldrb	r3, [r7, #15]
}
 801910c:	4618      	mov	r0, r3
 801910e:	3710      	adds	r7, #16
 8019110:	46bd      	mov	sp, r7
 8019112:	bd80      	pop	{r7, pc}

08019114 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 8019114:	b480      	push	{r7}
 8019116:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 8019118:	2301      	movs	r3, #1
}
 801911a:	4618      	mov	r0, r3
 801911c:	46bd      	mov	sp, r7
 801911e:	bc80      	pop	{r7}
 8019120:	4770      	bx	lr
	...

08019124 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019124:	b580      	push	{r7, lr}
 8019126:	b082      	sub	sp, #8
 8019128:	af00      	add	r7, sp, #0
 801912a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 801912c:	4b03      	ldr	r3, [pc, #12]	@ (801913c <HAL_SUBGHZ_TxCpltCallback+0x18>)
 801912e:	681b      	ldr	r3, [r3, #0]
 8019130:	2001      	movs	r0, #1
 8019132:	4798      	blx	r3
}
 8019134:	bf00      	nop
 8019136:	3708      	adds	r7, #8
 8019138:	46bd      	mov	sp, r7
 801913a:	bd80      	pop	{r7, pc}
 801913c:	200013d4 	.word	0x200013d4

08019140 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019140:	b580      	push	{r7, lr}
 8019142:	b082      	sub	sp, #8
 8019144:	af00      	add	r7, sp, #0
 8019146:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8019148:	4b03      	ldr	r3, [pc, #12]	@ (8019158 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 801914a:	681b      	ldr	r3, [r3, #0]
 801914c:	2002      	movs	r0, #2
 801914e:	4798      	blx	r3
}
 8019150:	bf00      	nop
 8019152:	3708      	adds	r7, #8
 8019154:	46bd      	mov	sp, r7
 8019156:	bd80      	pop	{r7, pc}
 8019158:	200013d4 	.word	0x200013d4

0801915c <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 801915c:	b580      	push	{r7, lr}
 801915e:	b082      	sub	sp, #8
 8019160:	af00      	add	r7, sp, #0
 8019162:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8019164:	4b03      	ldr	r3, [pc, #12]	@ (8019174 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8019166:	681b      	ldr	r3, [r3, #0]
 8019168:	2040      	movs	r0, #64	@ 0x40
 801916a:	4798      	blx	r3
}
 801916c:	bf00      	nop
 801916e:	3708      	adds	r7, #8
 8019170:	46bd      	mov	sp, r7
 8019172:	bd80      	pop	{r7, pc}
 8019174:	200013d4 	.word	0x200013d4

08019178 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8019178:	b580      	push	{r7, lr}
 801917a:	b082      	sub	sp, #8
 801917c:	af00      	add	r7, sp, #0
 801917e:	6078      	str	r0, [r7, #4]
 8019180:	460b      	mov	r3, r1
 8019182:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8019184:	78fb      	ldrb	r3, [r7, #3]
 8019186:	2b00      	cmp	r3, #0
 8019188:	d002      	beq.n	8019190 <HAL_SUBGHZ_CADStatusCallback+0x18>
 801918a:	2b01      	cmp	r3, #1
 801918c:	d005      	beq.n	801919a <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 801918e:	e00a      	b.n	80191a6 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8019190:	4b07      	ldr	r3, [pc, #28]	@ (80191b0 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8019192:	681b      	ldr	r3, [r3, #0]
 8019194:	2080      	movs	r0, #128	@ 0x80
 8019196:	4798      	blx	r3
            break;
 8019198:	e005      	b.n	80191a6 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 801919a:	4b05      	ldr	r3, [pc, #20]	@ (80191b0 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 801919c:	681b      	ldr	r3, [r3, #0]
 801919e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80191a2:	4798      	blx	r3
            break;
 80191a4:	bf00      	nop
    }
}
 80191a6:	bf00      	nop
 80191a8:	3708      	adds	r7, #8
 80191aa:	46bd      	mov	sp, r7
 80191ac:	bd80      	pop	{r7, pc}
 80191ae:	bf00      	nop
 80191b0:	200013d4 	.word	0x200013d4

080191b4 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80191b4:	b580      	push	{r7, lr}
 80191b6:	b082      	sub	sp, #8
 80191b8:	af00      	add	r7, sp, #0
 80191ba:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 80191bc:	4b04      	ldr	r3, [pc, #16]	@ (80191d0 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 80191be:	681b      	ldr	r3, [r3, #0]
 80191c0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80191c4:	4798      	blx	r3
}
 80191c6:	bf00      	nop
 80191c8:	3708      	adds	r7, #8
 80191ca:	46bd      	mov	sp, r7
 80191cc:	bd80      	pop	{r7, pc}
 80191ce:	bf00      	nop
 80191d0:	200013d4 	.word	0x200013d4

080191d4 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80191d4:	b580      	push	{r7, lr}
 80191d6:	b082      	sub	sp, #8
 80191d8:	af00      	add	r7, sp, #0
 80191da:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 80191dc:	4b03      	ldr	r3, [pc, #12]	@ (80191ec <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 80191de:	681b      	ldr	r3, [r3, #0]
 80191e0:	2020      	movs	r0, #32
 80191e2:	4798      	blx	r3
}
 80191e4:	bf00      	nop
 80191e6:	3708      	adds	r7, #8
 80191e8:	46bd      	mov	sp, r7
 80191ea:	bd80      	pop	{r7, pc}
 80191ec:	200013d4 	.word	0x200013d4

080191f0 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80191f0:	b580      	push	{r7, lr}
 80191f2:	b082      	sub	sp, #8
 80191f4:	af00      	add	r7, sp, #0
 80191f6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 80191f8:	4b03      	ldr	r3, [pc, #12]	@ (8019208 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 80191fa:	681b      	ldr	r3, [r3, #0]
 80191fc:	2004      	movs	r0, #4
 80191fe:	4798      	blx	r3
}
 8019200:	bf00      	nop
 8019202:	3708      	adds	r7, #8
 8019204:	46bd      	mov	sp, r7
 8019206:	bd80      	pop	{r7, pc}
 8019208:	200013d4 	.word	0x200013d4

0801920c <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801920c:	b580      	push	{r7, lr}
 801920e:	b082      	sub	sp, #8
 8019210:	af00      	add	r7, sp, #0
 8019212:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8019214:	4b03      	ldr	r3, [pc, #12]	@ (8019224 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8019216:	681b      	ldr	r3, [r3, #0]
 8019218:	2008      	movs	r0, #8
 801921a:	4798      	blx	r3
}
 801921c:	bf00      	nop
 801921e:	3708      	adds	r7, #8
 8019220:	46bd      	mov	sp, r7
 8019222:	bd80      	pop	{r7, pc}
 8019224:	200013d4 	.word	0x200013d4

08019228 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019228:	b580      	push	{r7, lr}
 801922a:	b082      	sub	sp, #8
 801922c:	af00      	add	r7, sp, #0
 801922e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8019230:	4b03      	ldr	r3, [pc, #12]	@ (8019240 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8019232:	681b      	ldr	r3, [r3, #0]
 8019234:	2010      	movs	r0, #16
 8019236:	4798      	blx	r3
}
 8019238:	bf00      	nop
 801923a:	3708      	adds	r7, #8
 801923c:	46bd      	mov	sp, r7
 801923e:	bd80      	pop	{r7, pc}
 8019240:	200013d4 	.word	0x200013d4

08019244 <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019244:	b580      	push	{r7, lr}
 8019246:	b082      	sub	sp, #8
 8019248:	af00      	add	r7, sp, #0
 801924a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 801924c:	4b04      	ldr	r3, [pc, #16]	@ (8019260 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 801924e:	681b      	ldr	r3, [r3, #0]
 8019250:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8019254:	4798      	blx	r3
}
 8019256:	bf00      	nop
 8019258:	3708      	adds	r7, #8
 801925a:	46bd      	mov	sp, r7
 801925c:	bd80      	pop	{r7, pc}
 801925e:	bf00      	nop
 8019260:	200013d4 	.word	0x200013d4

08019264 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8019264:	b580      	push	{r7, lr}
 8019266:	b084      	sub	sp, #16
 8019268:	af00      	add	r7, sp, #0
 801926a:	4603      	mov	r3, r0
 801926c:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 801926e:	f7e9 fa12 	bl	8002696 <RBI_IsDCDC>
 8019272:	4603      	mov	r3, r0
 8019274:	2b01      	cmp	r3, #1
 8019276:	d112      	bne.n	801929e <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8019278:	f640 1023 	movw	r0, #2339	@ 0x923
 801927c:	f7ff fe0e 	bl	8018e9c <SUBGRF_ReadRegister>
 8019280:	4603      	mov	r3, r0
 8019282:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8019284:	7bfb      	ldrb	r3, [r7, #15]
 8019286:	f023 0306 	bic.w	r3, r3, #6
 801928a:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 801928c:	7bfa      	ldrb	r2, [r7, #15]
 801928e:	79fb      	ldrb	r3, [r7, #7]
 8019290:	4313      	orrs	r3, r2
 8019292:	b2db      	uxtb	r3, r3
 8019294:	4619      	mov	r1, r3
 8019296:	f640 1023 	movw	r0, #2339	@ 0x923
 801929a:	f7ff fdeb 	bl	8018e74 <SUBGRF_WriteRegister>
  }
}
 801929e:	bf00      	nop
 80192a0:	3710      	adds	r7, #16
 80192a2:	46bd      	mov	sp, r7
 80192a4:	bd80      	pop	{r7, pc}
	...

080192a8 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 80192a8:	b480      	push	{r7}
 80192aa:	b085      	sub	sp, #20
 80192ac:	af00      	add	r7, sp, #0
 80192ae:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 80192b0:	687b      	ldr	r3, [r7, #4]
 80192b2:	2b00      	cmp	r3, #0
 80192b4:	d101      	bne.n	80192ba <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 80192b6:	231f      	movs	r3, #31
 80192b8:	e017      	b.n	80192ea <SUBGRF_GetFskBandwidthRegValue+0x42>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 80192ba:	2300      	movs	r3, #0
 80192bc:	73fb      	strb	r3, [r7, #15]
 80192be:	e00f      	b.n	80192e0 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 80192c0:	7bfb      	ldrb	r3, [r7, #15]
 80192c2:	4a0c      	ldr	r2, [pc, #48]	@ (80192f4 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 80192c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80192c8:	687a      	ldr	r2, [r7, #4]
 80192ca:	429a      	cmp	r2, r3
 80192cc:	d205      	bcs.n	80192da <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 80192ce:	7bfb      	ldrb	r3, [r7, #15]
 80192d0:	4a08      	ldr	r2, [pc, #32]	@ (80192f4 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 80192d2:	00db      	lsls	r3, r3, #3
 80192d4:	4413      	add	r3, r2
 80192d6:	791b      	ldrb	r3, [r3, #4]
 80192d8:	e007      	b.n	80192ea <SUBGRF_GetFskBandwidthRegValue+0x42>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 80192da:	7bfb      	ldrb	r3, [r7, #15]
 80192dc:	3301      	adds	r3, #1
 80192de:	73fb      	strb	r3, [r7, #15]
 80192e0:	7bfb      	ldrb	r3, [r7, #15]
 80192e2:	2b15      	cmp	r3, #21
 80192e4:	d9ec      	bls.n	80192c0 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 80192e6:	bf00      	nop
 80192e8:	e7fd      	b.n	80192e6 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 80192ea:	4618      	mov	r0, r3
 80192ec:	3714      	adds	r7, #20
 80192ee:	46bd      	mov	sp, r7
 80192f0:	bc80      	pop	{r7}
 80192f2:	4770      	bx	lr
 80192f4:	08021178 	.word	0x08021178

080192f8 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 80192f8:	b580      	push	{r7, lr}
 80192fa:	b08a      	sub	sp, #40	@ 0x28
 80192fc:	af00      	add	r7, sp, #0
 80192fe:	6078      	str	r0, [r7, #4]
 8019300:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 8019302:	4b35      	ldr	r3, [pc, #212]	@ (80193d8 <SUBGRF_GetCFO+0xe0>)
 8019304:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 8019306:	f640 0007 	movw	r0, #2055	@ 0x807
 801930a:	f7ff fdc7 	bl	8018e9c <SUBGRF_ReadRegister>
 801930e:	4603      	mov	r3, r0
 8019310:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8019312:	7ffb      	ldrb	r3, [r7, #31]
 8019314:	08db      	lsrs	r3, r3, #3
 8019316:	b2db      	uxtb	r3, r3
 8019318:	f003 0303 	and.w	r3, r3, #3
 801931c:	3328      	adds	r3, #40	@ 0x28
 801931e:	443b      	add	r3, r7
 8019320:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8019324:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 8019326:	7ffb      	ldrb	r3, [r7, #31]
 8019328:	f003 0307 	and.w	r3, r3, #7
 801932c:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 801932e:	7fba      	ldrb	r2, [r7, #30]
 8019330:	7f7b      	ldrb	r3, [r7, #29]
 8019332:	3301      	adds	r3, #1
 8019334:	fa02 f303 	lsl.w	r3, r2, r3
 8019338:	461a      	mov	r2, r3
 801933a:	4b28      	ldr	r3, [pc, #160]	@ (80193dc <SUBGRF_GetCFO+0xe4>)
 801933c:	fbb3 f3f2 	udiv	r3, r3, r2
 8019340:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 8019342:	69ba      	ldr	r2, [r7, #24]
 8019344:	687b      	ldr	r3, [r7, #4]
 8019346:	fbb2 f3f3 	udiv	r3, r2, r3
 801934a:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 801934c:	2301      	movs	r3, #1
 801934e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8019352:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019356:	697a      	ldr	r2, [r7, #20]
 8019358:	fb02 f303 	mul.w	r3, r2, r3
 801935c:	2b07      	cmp	r3, #7
 801935e:	d802      	bhi.n	8019366 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 8019360:	2302      	movs	r3, #2
 8019362:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if (cf_osr * interp < 4)
 8019366:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801936a:	697a      	ldr	r2, [r7, #20]
 801936c:	fb02 f303 	mul.w	r3, r2, r3
 8019370:	2b03      	cmp	r3, #3
 8019372:	d802      	bhi.n	801937a <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 8019374:	2304      	movs	r3, #4
 8019376:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 801937a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801937e:	69bb      	ldr	r3, [r7, #24]
 8019380:	fb02 f303 	mul.w	r3, r2, r3
 8019384:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 8019386:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 801938a:	f7ff fd87 	bl	8018e9c <SUBGRF_ReadRegister>
 801938e:	4603      	mov	r3, r0
 8019390:	021b      	lsls	r3, r3, #8
 8019392:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8019396:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 8019398:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 801939c:	f7ff fd7e 	bl	8018e9c <SUBGRF_ReadRegister>
 80193a0:	4603      	mov	r3, r0
 80193a2:	461a      	mov	r2, r3
 80193a4:	6a3b      	ldr	r3, [r7, #32]
 80193a6:	4313      	orrs	r3, r2
 80193a8:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 80193aa:	6a3b      	ldr	r3, [r7, #32]
 80193ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80193b0:	2b00      	cmp	r3, #0
 80193b2:	d005      	beq.n	80193c0 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 80193b4:	6a3b      	ldr	r3, [r7, #32]
 80193b6:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80193ba:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80193be:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 80193c0:	693b      	ldr	r3, [r7, #16]
 80193c2:	095b      	lsrs	r3, r3, #5
 80193c4:	6a3a      	ldr	r2, [r7, #32]
 80193c6:	fb02 f303 	mul.w	r3, r2, r3
 80193ca:	11da      	asrs	r2, r3, #7
 80193cc:	683b      	ldr	r3, [r7, #0]
 80193ce:	601a      	str	r2, [r3, #0]
}
 80193d0:	bf00      	nop
 80193d2:	3728      	adds	r7, #40	@ 0x28
 80193d4:	46bd      	mov	sp, r7
 80193d6:	bd80      	pop	{r7, pc}
 80193d8:	0c0a0804 	.word	0x0c0a0804
 80193dc:	01e84800 	.word	0x01e84800

080193e0 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 80193e0:	b480      	push	{r7}
 80193e2:	b087      	sub	sp, #28
 80193e4:	af00      	add	r7, sp, #0
 80193e6:	4603      	mov	r3, r0
 80193e8:	60b9      	str	r1, [r7, #8]
 80193ea:	607a      	str	r2, [r7, #4]
 80193ec:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 80193ee:	2300      	movs	r3, #0
 80193f0:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 80193f2:	f04f 33ff 	mov.w	r3, #4294967295
 80193f6:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 80193f8:	697b      	ldr	r3, [r7, #20]
}
 80193fa:	4618      	mov	r0, r3
 80193fc:	371c      	adds	r7, #28
 80193fe:	46bd      	mov	sp, r7
 8019400:	bc80      	pop	{r7}
 8019402:	4770      	bx	lr

08019404 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 8019404:	b480      	push	{r7}
 8019406:	b087      	sub	sp, #28
 8019408:	af00      	add	r7, sp, #0
 801940a:	4603      	mov	r3, r0
 801940c:	60b9      	str	r1, [r7, #8]
 801940e:	607a      	str	r2, [r7, #4]
 8019410:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 8019412:	2300      	movs	r3, #0
 8019414:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 8019416:	f04f 33ff 	mov.w	r3, #4294967295
 801941a:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 801941c:	697b      	ldr	r3, [r7, #20]
}
 801941e:	4618      	mov	r0, r3
 8019420:	371c      	adds	r7, #28
 8019422:	46bd      	mov	sp, r7
 8019424:	bc80      	pop	{r7}
 8019426:	4770      	bx	lr

08019428 <RFW_DeInit>:
    return -1;
#endif /* RFW_ENABLE == 1 */
}

void RFW_DeInit( void )
{
 8019428:	b480      	push	{r7}
 801942a:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 801942c:	bf00      	nop
 801942e:	46bd      	mov	sp, r7
 8019430:	bc80      	pop	{r7}
 8019432:	4770      	bx	lr

08019434 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 8019434:	b480      	push	{r7}
 8019436:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 8019438:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 801943a:	4618      	mov	r0, r3
 801943c:	46bd      	mov	sp, r7
 801943e:	bc80      	pop	{r7}
 8019440:	4770      	bx	lr

08019442 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 8019442:	b480      	push	{r7}
 8019444:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 8019446:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 8019448:	4618      	mov	r0, r3
 801944a:	46bd      	mov	sp, r7
 801944c:	bc80      	pop	{r7}
 801944e:	4770      	bx	lr

08019450 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 8019450:	b480      	push	{r7}
 8019452:	b083      	sub	sp, #12
 8019454:	af00      	add	r7, sp, #0
 8019456:	4603      	mov	r3, r0
 8019458:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 801945a:	bf00      	nop
 801945c:	370c      	adds	r7, #12
 801945e:	46bd      	mov	sp, r7
 8019460:	bc80      	pop	{r7}
 8019462:	4770      	bx	lr

08019464 <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 8019464:	b480      	push	{r7}
 8019466:	b087      	sub	sp, #28
 8019468:	af00      	add	r7, sp, #0
 801946a:	60f8      	str	r0, [r7, #12]
 801946c:	460b      	mov	r3, r1
 801946e:	607a      	str	r2, [r7, #4]
 8019470:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 8019472:	f04f 33ff 	mov.w	r3, #4294967295
 8019476:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 8019478:	697b      	ldr	r3, [r7, #20]
}
 801947a:	4618      	mov	r0, r3
 801947c:	371c      	adds	r7, #28
 801947e:	46bd      	mov	sp, r7
 8019480:	bc80      	pop	{r7}
 8019482:	4770      	bx	lr

08019484 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 8019484:	b480      	push	{r7}
 8019486:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 8019488:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* RFW_ENABLE == 1 */
}
 801948c:	4618      	mov	r0, r3
 801948e:	46bd      	mov	sp, r7
 8019490:	bc80      	pop	{r7}
 8019492:	4770      	bx	lr

08019494 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 8019494:	b480      	push	{r7}
 8019496:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 8019498:	bf00      	nop
 801949a:	46bd      	mov	sp, r7
 801949c:	bc80      	pop	{r7}
 801949e:	4770      	bx	lr

080194a0 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 80194a0:	b480      	push	{r7}
 80194a2:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 80194a4:	bf00      	nop
 80194a6:	46bd      	mov	sp, r7
 80194a8:	bc80      	pop	{r7}
 80194aa:	4770      	bx	lr

080194ac <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 80194ac:	b480      	push	{r7}
 80194ae:	b083      	sub	sp, #12
 80194b0:	af00      	add	r7, sp, #0
 80194b2:	4603      	mov	r3, r0
 80194b4:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 80194b6:	bf00      	nop
 80194b8:	370c      	adds	r7, #12
 80194ba:	46bd      	mov	sp, r7
 80194bc:	bc80      	pop	{r7}
 80194be:	4770      	bx	lr

080194c0 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 80194c0:	b580      	push	{r7, lr}
 80194c2:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 80194c4:	2218      	movs	r2, #24
 80194c6:	2100      	movs	r1, #0
 80194c8:	4807      	ldr	r0, [pc, #28]	@ (80194e8 <UTIL_ADV_TRACE_Init+0x28>)
 80194ca:	f000 fb45 	bl	8019b58 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 80194ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80194d2:	2100      	movs	r1, #0
 80194d4:	4805      	ldr	r0, [pc, #20]	@ (80194ec <UTIL_ADV_TRACE_Init+0x2c>)
 80194d6:	f000 fb3f 	bl	8019b58 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 80194da:	4b05      	ldr	r3, [pc, #20]	@ (80194f0 <UTIL_ADV_TRACE_Init+0x30>)
 80194dc:	681b      	ldr	r3, [r3, #0]
 80194de:	4805      	ldr	r0, [pc, #20]	@ (80194f4 <UTIL_ADV_TRACE_Init+0x34>)
 80194e0:	4798      	blx	r3
 80194e2:	4603      	mov	r3, r0
}
 80194e4:	4618      	mov	r0, r3
 80194e6:	bd80      	pop	{r7, pc}
 80194e8:	200013d8 	.word	0x200013d8
 80194ec:	200013f0 	.word	0x200013f0
 80194f0:	08020bc0 	.word	0x08020bc0
 80194f4:	08019761 	.word	0x08019761

080194f8 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 80194f8:	b480      	push	{r7}
 80194fa:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 80194fc:	4b06      	ldr	r3, [pc, #24]	@ (8019518 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 80194fe:	8a5a      	ldrh	r2, [r3, #18]
 8019500:	4b05      	ldr	r3, [pc, #20]	@ (8019518 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 8019502:	8a1b      	ldrh	r3, [r3, #16]
 8019504:	429a      	cmp	r2, r3
 8019506:	d101      	bne.n	801950c <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 8019508:	2301      	movs	r3, #1
 801950a:	e000      	b.n	801950e <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801950c:	2300      	movs	r3, #0
}
 801950e:	4618      	mov	r0, r3
 8019510:	46bd      	mov	sp, r7
 8019512:	bc80      	pop	{r7}
 8019514:	4770      	bx	lr
 8019516:	bf00      	nop
 8019518:	200013d8 	.word	0x200013d8

0801951c <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801951c:	b408      	push	{r3}
 801951e:	b580      	push	{r7, lr}
 8019520:	b08d      	sub	sp, #52	@ 0x34
 8019522:	af00      	add	r7, sp, #0
 8019524:	60f8      	str	r0, [r7, #12]
 8019526:	60b9      	str	r1, [r7, #8]
 8019528:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801952a:	2300      	movs	r3, #0
 801952c:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801952e:	2300      	movs	r3, #0
 8019530:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 8019532:	4b37      	ldr	r3, [pc, #220]	@ (8019610 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 8019534:	7a1b      	ldrb	r3, [r3, #8]
 8019536:	461a      	mov	r2, r3
 8019538:	68fb      	ldr	r3, [r7, #12]
 801953a:	4293      	cmp	r3, r2
 801953c:	d902      	bls.n	8019544 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801953e:	f06f 0304 	mvn.w	r3, #4
 8019542:	e05e      	b.n	8019602 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 8019544:	4b32      	ldr	r3, [pc, #200]	@ (8019610 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 8019546:	68da      	ldr	r2, [r3, #12]
 8019548:	68bb      	ldr	r3, [r7, #8]
 801954a:	4013      	ands	r3, r2
 801954c:	68ba      	ldr	r2, [r7, #8]
 801954e:	429a      	cmp	r2, r3
 8019550:	d002      	beq.n	8019558 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 8019552:	f06f 0305 	mvn.w	r3, #5
 8019556:	e054      	b.n	8019602 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 8019558:	4b2d      	ldr	r3, [pc, #180]	@ (8019610 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801955a:	685b      	ldr	r3, [r3, #4]
 801955c:	2b00      	cmp	r3, #0
 801955e:	d00a      	beq.n	8019576 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 8019560:	687b      	ldr	r3, [r7, #4]
 8019562:	2b00      	cmp	r3, #0
 8019564:	d007      	beq.n	8019576 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 8019566:	4b2a      	ldr	r3, [pc, #168]	@ (8019610 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 8019568:	685b      	ldr	r3, [r3, #4]
 801956a:	f107 0116 	add.w	r1, r7, #22
 801956e:	f107 0218 	add.w	r2, r7, #24
 8019572:	4610      	mov	r0, r2
 8019574:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 8019576:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801957a:	62bb      	str	r3, [r7, #40]	@ 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801957c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801957e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8019580:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8019584:	4823      	ldr	r0, [pc, #140]	@ (8019614 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 8019586:	f001 f913 	bl	801a7b0 <tiny_vsnprintf_like>
 801958a:	4603      	mov	r3, r0
 801958c:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  TRACE_Lock();
 801958e:	f000 f9f1 	bl	8019974 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 8019592:	8afa      	ldrh	r2, [r7, #22]
 8019594:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8019596:	4413      	add	r3, r2
 8019598:	b29b      	uxth	r3, r3
 801959a:	f107 0214 	add.w	r2, r7, #20
 801959e:	4611      	mov	r1, r2
 80195a0:	4618      	mov	r0, r3
 80195a2:	f000 f969 	bl	8019878 <TRACE_AllocateBufer>
 80195a6:	4603      	mov	r3, r0
 80195a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80195ac:	d025      	beq.n	80195fa <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 80195ae:	2300      	movs	r3, #0
 80195b0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80195b2:	e00e      	b.n	80195d2 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 80195b4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80195b6:	8aba      	ldrh	r2, [r7, #20]
 80195b8:	3330      	adds	r3, #48	@ 0x30
 80195ba:	443b      	add	r3, r7
 80195bc:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 80195c0:	4b15      	ldr	r3, [pc, #84]	@ (8019618 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 80195c2:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 80195c4:	8abb      	ldrh	r3, [r7, #20]
 80195c6:	3301      	adds	r3, #1
 80195c8:	b29b      	uxth	r3, r3
 80195ca:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 80195cc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80195ce:	3301      	adds	r3, #1
 80195d0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80195d2:	8afb      	ldrh	r3, [r7, #22]
 80195d4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80195d6:	429a      	cmp	r2, r3
 80195d8:	d3ec      	bcc.n	80195b4 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 80195da:	8abb      	ldrh	r3, [r7, #20]
 80195dc:	461a      	mov	r2, r3
 80195de:	4b0e      	ldr	r3, [pc, #56]	@ (8019618 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 80195e0:	18d0      	adds	r0, r2, r3
 80195e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80195e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80195e6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80195ea:	f001 f8e1 	bl	801a7b0 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 80195ee:	f000 f9df 	bl	80199b0 <TRACE_UnLock>

    return TRACE_Send();
 80195f2:	f000 f831 	bl	8019658 <TRACE_Send>
 80195f6:	4603      	mov	r3, r0
 80195f8:	e003      	b.n	8019602 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 80195fa:	f000 f9d9 	bl	80199b0 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 80195fe:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 8019602:	4618      	mov	r0, r3
 8019604:	3734      	adds	r7, #52	@ 0x34
 8019606:	46bd      	mov	sp, r7
 8019608:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801960c:	b001      	add	sp, #4
 801960e:	4770      	bx	lr
 8019610:	200013d8 	.word	0x200013d8
 8019614:	200017f0 	.word	0x200017f0
 8019618:	200013f0 	.word	0x200013f0

0801961c <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801961c:	b480      	push	{r7}
 801961e:	b083      	sub	sp, #12
 8019620:	af00      	add	r7, sp, #0
 8019622:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 8019624:	4a03      	ldr	r2, [pc, #12]	@ (8019634 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 8019626:	687b      	ldr	r3, [r7, #4]
 8019628:	6053      	str	r3, [r2, #4]
}
 801962a:	bf00      	nop
 801962c:	370c      	adds	r7, #12
 801962e:	46bd      	mov	sp, r7
 8019630:	bc80      	pop	{r7}
 8019632:	4770      	bx	lr
 8019634:	200013d8 	.word	0x200013d8

08019638 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 8019638:	b480      	push	{r7}
 801963a:	b083      	sub	sp, #12
 801963c:	af00      	add	r7, sp, #0
 801963e:	4603      	mov	r3, r0
 8019640:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8019642:	4a04      	ldr	r2, [pc, #16]	@ (8019654 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 8019644:	79fb      	ldrb	r3, [r7, #7]
 8019646:	7213      	strb	r3, [r2, #8]
}
 8019648:	bf00      	nop
 801964a:	370c      	adds	r7, #12
 801964c:	46bd      	mov	sp, r7
 801964e:	bc80      	pop	{r7}
 8019650:	4770      	bx	lr
 8019652:	bf00      	nop
 8019654:	200013d8 	.word	0x200013d8

08019658 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 8019658:	b580      	push	{r7, lr}
 801965a:	b088      	sub	sp, #32
 801965c:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801965e:	2300      	movs	r3, #0
 8019660:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 8019662:	2300      	movs	r3, #0
 8019664:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019666:	f3ef 8310 	mrs	r3, PRIMASK
 801966a:	613b      	str	r3, [r7, #16]
  return(result);
 801966c:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801966e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019670:	b672      	cpsid	i
}
 8019672:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 8019674:	f000 f9ba 	bl	80199ec <TRACE_IsLocked>
 8019678:	4603      	mov	r3, r0
 801967a:	2b00      	cmp	r3, #0
 801967c:	d15d      	bne.n	801973a <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801967e:	f000 f979 	bl	8019974 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 8019682:	4b34      	ldr	r3, [pc, #208]	@ (8019754 <TRACE_Send+0xfc>)
 8019684:	8a1a      	ldrh	r2, [r3, #16]
 8019686:	4b33      	ldr	r3, [pc, #204]	@ (8019754 <TRACE_Send+0xfc>)
 8019688:	8a5b      	ldrh	r3, [r3, #18]
 801968a:	429a      	cmp	r2, r3
 801968c:	d04d      	beq.n	801972a <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801968e:	4b31      	ldr	r3, [pc, #196]	@ (8019754 <TRACE_Send+0xfc>)
 8019690:	789b      	ldrb	r3, [r3, #2]
 8019692:	2b01      	cmp	r3, #1
 8019694:	d117      	bne.n	80196c6 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 8019696:	4b2f      	ldr	r3, [pc, #188]	@ (8019754 <TRACE_Send+0xfc>)
 8019698:	881a      	ldrh	r2, [r3, #0]
 801969a:	4b2e      	ldr	r3, [pc, #184]	@ (8019754 <TRACE_Send+0xfc>)
 801969c:	8a1b      	ldrh	r3, [r3, #16]
 801969e:	1ad3      	subs	r3, r2, r3
 80196a0:	b29a      	uxth	r2, r3
 80196a2:	4b2c      	ldr	r3, [pc, #176]	@ (8019754 <TRACE_Send+0xfc>)
 80196a4:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 80196a6:	4b2b      	ldr	r3, [pc, #172]	@ (8019754 <TRACE_Send+0xfc>)
 80196a8:	2202      	movs	r2, #2
 80196aa:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 80196ac:	4b29      	ldr	r3, [pc, #164]	@ (8019754 <TRACE_Send+0xfc>)
 80196ae:	2200      	movs	r2, #0
 80196b0:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 80196b2:	4b28      	ldr	r3, [pc, #160]	@ (8019754 <TRACE_Send+0xfc>)
 80196b4:	8a9b      	ldrh	r3, [r3, #20]
 80196b6:	2b00      	cmp	r3, #0
 80196b8:	d105      	bne.n	80196c6 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 80196ba:	4b26      	ldr	r3, [pc, #152]	@ (8019754 <TRACE_Send+0xfc>)
 80196bc:	2200      	movs	r2, #0
 80196be:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 80196c0:	4b24      	ldr	r3, [pc, #144]	@ (8019754 <TRACE_Send+0xfc>)
 80196c2:	2200      	movs	r2, #0
 80196c4:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 80196c6:	4b23      	ldr	r3, [pc, #140]	@ (8019754 <TRACE_Send+0xfc>)
 80196c8:	789b      	ldrb	r3, [r3, #2]
 80196ca:	2b00      	cmp	r3, #0
 80196cc:	d115      	bne.n	80196fa <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 80196ce:	4b21      	ldr	r3, [pc, #132]	@ (8019754 <TRACE_Send+0xfc>)
 80196d0:	8a5a      	ldrh	r2, [r3, #18]
 80196d2:	4b20      	ldr	r3, [pc, #128]	@ (8019754 <TRACE_Send+0xfc>)
 80196d4:	8a1b      	ldrh	r3, [r3, #16]
 80196d6:	429a      	cmp	r2, r3
 80196d8:	d908      	bls.n	80196ec <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 80196da:	4b1e      	ldr	r3, [pc, #120]	@ (8019754 <TRACE_Send+0xfc>)
 80196dc:	8a5a      	ldrh	r2, [r3, #18]
 80196de:	4b1d      	ldr	r3, [pc, #116]	@ (8019754 <TRACE_Send+0xfc>)
 80196e0:	8a1b      	ldrh	r3, [r3, #16]
 80196e2:	1ad3      	subs	r3, r2, r3
 80196e4:	b29a      	uxth	r2, r3
 80196e6:	4b1b      	ldr	r3, [pc, #108]	@ (8019754 <TRACE_Send+0xfc>)
 80196e8:	829a      	strh	r2, [r3, #20]
 80196ea:	e006      	b.n	80196fa <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 80196ec:	4b19      	ldr	r3, [pc, #100]	@ (8019754 <TRACE_Send+0xfc>)
 80196ee:	8a1b      	ldrh	r3, [r3, #16]
 80196f0:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 80196f4:	b29a      	uxth	r2, r3
 80196f6:	4b17      	ldr	r3, [pc, #92]	@ (8019754 <TRACE_Send+0xfc>)
 80196f8:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 80196fa:	4b16      	ldr	r3, [pc, #88]	@ (8019754 <TRACE_Send+0xfc>)
 80196fc:	8a1b      	ldrh	r3, [r3, #16]
 80196fe:	461a      	mov	r2, r3
 8019700:	4b15      	ldr	r3, [pc, #84]	@ (8019758 <TRACE_Send+0x100>)
 8019702:	4413      	add	r3, r2
 8019704:	61bb      	str	r3, [r7, #24]
 8019706:	697b      	ldr	r3, [r7, #20]
 8019708:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801970a:	68fb      	ldr	r3, [r7, #12]
 801970c:	f383 8810 	msr	PRIMASK, r3
}
 8019710:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 8019712:	f7e7 ffc3 	bl	800169c <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8019716:	4b11      	ldr	r3, [pc, #68]	@ (801975c <TRACE_Send+0x104>)
 8019718:	68db      	ldr	r3, [r3, #12]
 801971a:	4a0e      	ldr	r2, [pc, #56]	@ (8019754 <TRACE_Send+0xfc>)
 801971c:	8a92      	ldrh	r2, [r2, #20]
 801971e:	4611      	mov	r1, r2
 8019720:	69b8      	ldr	r0, [r7, #24]
 8019722:	4798      	blx	r3
 8019724:	4603      	mov	r3, r0
 8019726:	77fb      	strb	r3, [r7, #31]
 8019728:	e00d      	b.n	8019746 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801972a:	f000 f941 	bl	80199b0 <TRACE_UnLock>
 801972e:	697b      	ldr	r3, [r7, #20]
 8019730:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019732:	68bb      	ldr	r3, [r7, #8]
 8019734:	f383 8810 	msr	PRIMASK, r3
}
 8019738:	e005      	b.n	8019746 <TRACE_Send+0xee>
 801973a:	697b      	ldr	r3, [r7, #20]
 801973c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801973e:	687b      	ldr	r3, [r7, #4]
 8019740:	f383 8810 	msr	PRIMASK, r3
}
 8019744:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 8019746:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801974a:	4618      	mov	r0, r3
 801974c:	3720      	adds	r7, #32
 801974e:	46bd      	mov	sp, r7
 8019750:	bd80      	pop	{r7, pc}
 8019752:	bf00      	nop
 8019754:	200013d8 	.word	0x200013d8
 8019758:	200013f0 	.word	0x200013f0
 801975c:	08020bc0 	.word	0x08020bc0

08019760 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 8019760:	b580      	push	{r7, lr}
 8019762:	b088      	sub	sp, #32
 8019764:	af00      	add	r7, sp, #0
 8019766:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 8019768:	2300      	movs	r3, #0
 801976a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801976c:	f3ef 8310 	mrs	r3, PRIMASK
 8019770:	617b      	str	r3, [r7, #20]
  return(result);
 8019772:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 8019774:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 8019776:	b672      	cpsid	i
}
 8019778:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801977a:	4b3c      	ldr	r3, [pc, #240]	@ (801986c <TRACE_TxCpltCallback+0x10c>)
 801977c:	789b      	ldrb	r3, [r3, #2]
 801977e:	2b02      	cmp	r3, #2
 8019780:	d106      	bne.n	8019790 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8019782:	4b3a      	ldr	r3, [pc, #232]	@ (801986c <TRACE_TxCpltCallback+0x10c>)
 8019784:	2200      	movs	r2, #0
 8019786:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 8019788:	4b38      	ldr	r3, [pc, #224]	@ (801986c <TRACE_TxCpltCallback+0x10c>)
 801978a:	2200      	movs	r2, #0
 801978c:	821a      	strh	r2, [r3, #16]
 801978e:	e00a      	b.n	80197a6 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 8019790:	4b36      	ldr	r3, [pc, #216]	@ (801986c <TRACE_TxCpltCallback+0x10c>)
 8019792:	8a1a      	ldrh	r2, [r3, #16]
 8019794:	4b35      	ldr	r3, [pc, #212]	@ (801986c <TRACE_TxCpltCallback+0x10c>)
 8019796:	8a9b      	ldrh	r3, [r3, #20]
 8019798:	4413      	add	r3, r2
 801979a:	b29b      	uxth	r3, r3
 801979c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80197a0:	b29a      	uxth	r2, r3
 80197a2:	4b32      	ldr	r3, [pc, #200]	@ (801986c <TRACE_TxCpltCallback+0x10c>)
 80197a4:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 80197a6:	4b31      	ldr	r3, [pc, #196]	@ (801986c <TRACE_TxCpltCallback+0x10c>)
 80197a8:	8a1a      	ldrh	r2, [r3, #16]
 80197aa:	4b30      	ldr	r3, [pc, #192]	@ (801986c <TRACE_TxCpltCallback+0x10c>)
 80197ac:	8a5b      	ldrh	r3, [r3, #18]
 80197ae:	429a      	cmp	r2, r3
 80197b0:	d04d      	beq.n	801984e <TRACE_TxCpltCallback+0xee>
 80197b2:	4b2e      	ldr	r3, [pc, #184]	@ (801986c <TRACE_TxCpltCallback+0x10c>)
 80197b4:	8adb      	ldrh	r3, [r3, #22]
 80197b6:	2b01      	cmp	r3, #1
 80197b8:	d149      	bne.n	801984e <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 80197ba:	4b2c      	ldr	r3, [pc, #176]	@ (801986c <TRACE_TxCpltCallback+0x10c>)
 80197bc:	789b      	ldrb	r3, [r3, #2]
 80197be:	2b01      	cmp	r3, #1
 80197c0:	d117      	bne.n	80197f2 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 80197c2:	4b2a      	ldr	r3, [pc, #168]	@ (801986c <TRACE_TxCpltCallback+0x10c>)
 80197c4:	881a      	ldrh	r2, [r3, #0]
 80197c6:	4b29      	ldr	r3, [pc, #164]	@ (801986c <TRACE_TxCpltCallback+0x10c>)
 80197c8:	8a1b      	ldrh	r3, [r3, #16]
 80197ca:	1ad3      	subs	r3, r2, r3
 80197cc:	b29a      	uxth	r2, r3
 80197ce:	4b27      	ldr	r3, [pc, #156]	@ (801986c <TRACE_TxCpltCallback+0x10c>)
 80197d0:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 80197d2:	4b26      	ldr	r3, [pc, #152]	@ (801986c <TRACE_TxCpltCallback+0x10c>)
 80197d4:	2202      	movs	r2, #2
 80197d6:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 80197d8:	4b24      	ldr	r3, [pc, #144]	@ (801986c <TRACE_TxCpltCallback+0x10c>)
 80197da:	2200      	movs	r2, #0
 80197dc:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 80197de:	4b23      	ldr	r3, [pc, #140]	@ (801986c <TRACE_TxCpltCallback+0x10c>)
 80197e0:	8a9b      	ldrh	r3, [r3, #20]
 80197e2:	2b00      	cmp	r3, #0
 80197e4:	d105      	bne.n	80197f2 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 80197e6:	4b21      	ldr	r3, [pc, #132]	@ (801986c <TRACE_TxCpltCallback+0x10c>)
 80197e8:	2200      	movs	r2, #0
 80197ea:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 80197ec:	4b1f      	ldr	r3, [pc, #124]	@ (801986c <TRACE_TxCpltCallback+0x10c>)
 80197ee:	2200      	movs	r2, #0
 80197f0:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 80197f2:	4b1e      	ldr	r3, [pc, #120]	@ (801986c <TRACE_TxCpltCallback+0x10c>)
 80197f4:	789b      	ldrb	r3, [r3, #2]
 80197f6:	2b00      	cmp	r3, #0
 80197f8:	d115      	bne.n	8019826 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 80197fa:	4b1c      	ldr	r3, [pc, #112]	@ (801986c <TRACE_TxCpltCallback+0x10c>)
 80197fc:	8a5a      	ldrh	r2, [r3, #18]
 80197fe:	4b1b      	ldr	r3, [pc, #108]	@ (801986c <TRACE_TxCpltCallback+0x10c>)
 8019800:	8a1b      	ldrh	r3, [r3, #16]
 8019802:	429a      	cmp	r2, r3
 8019804:	d908      	bls.n	8019818 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8019806:	4b19      	ldr	r3, [pc, #100]	@ (801986c <TRACE_TxCpltCallback+0x10c>)
 8019808:	8a5a      	ldrh	r2, [r3, #18]
 801980a:	4b18      	ldr	r3, [pc, #96]	@ (801986c <TRACE_TxCpltCallback+0x10c>)
 801980c:	8a1b      	ldrh	r3, [r3, #16]
 801980e:	1ad3      	subs	r3, r2, r3
 8019810:	b29a      	uxth	r2, r3
 8019812:	4b16      	ldr	r3, [pc, #88]	@ (801986c <TRACE_TxCpltCallback+0x10c>)
 8019814:	829a      	strh	r2, [r3, #20]
 8019816:	e006      	b.n	8019826 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8019818:	4b14      	ldr	r3, [pc, #80]	@ (801986c <TRACE_TxCpltCallback+0x10c>)
 801981a:	8a1b      	ldrh	r3, [r3, #16]
 801981c:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 8019820:	b29a      	uxth	r2, r3
 8019822:	4b12      	ldr	r3, [pc, #72]	@ (801986c <TRACE_TxCpltCallback+0x10c>)
 8019824:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8019826:	4b11      	ldr	r3, [pc, #68]	@ (801986c <TRACE_TxCpltCallback+0x10c>)
 8019828:	8a1b      	ldrh	r3, [r3, #16]
 801982a:	461a      	mov	r2, r3
 801982c:	4b10      	ldr	r3, [pc, #64]	@ (8019870 <TRACE_TxCpltCallback+0x110>)
 801982e:	4413      	add	r3, r2
 8019830:	61fb      	str	r3, [r7, #28]
 8019832:	69bb      	ldr	r3, [r7, #24]
 8019834:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019836:	693b      	ldr	r3, [r7, #16]
 8019838:	f383 8810 	msr	PRIMASK, r3
}
 801983c:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801983e:	4b0d      	ldr	r3, [pc, #52]	@ (8019874 <TRACE_TxCpltCallback+0x114>)
 8019840:	68db      	ldr	r3, [r3, #12]
 8019842:	4a0a      	ldr	r2, [pc, #40]	@ (801986c <TRACE_TxCpltCallback+0x10c>)
 8019844:	8a92      	ldrh	r2, [r2, #20]
 8019846:	4611      	mov	r1, r2
 8019848:	69f8      	ldr	r0, [r7, #28]
 801984a:	4798      	blx	r3
 801984c:	e00a      	b.n	8019864 <TRACE_TxCpltCallback+0x104>
 801984e:	69bb      	ldr	r3, [r7, #24]
 8019850:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019852:	68fb      	ldr	r3, [r7, #12]
 8019854:	f383 8810 	msr	PRIMASK, r3
}
 8019858:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801985a:	f7e7 ff27 	bl	80016ac <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801985e:	f000 f8a7 	bl	80199b0 <TRACE_UnLock>
  }
}
 8019862:	bf00      	nop
 8019864:	bf00      	nop
 8019866:	3720      	adds	r7, #32
 8019868:	46bd      	mov	sp, r7
 801986a:	bd80      	pop	{r7, pc}
 801986c:	200013d8 	.word	0x200013d8
 8019870:	200013f0 	.word	0x200013f0
 8019874:	08020bc0 	.word	0x08020bc0

08019878 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 8019878:	b480      	push	{r7}
 801987a:	b087      	sub	sp, #28
 801987c:	af00      	add	r7, sp, #0
 801987e:	4603      	mov	r3, r0
 8019880:	6039      	str	r1, [r7, #0]
 8019882:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 8019884:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019888:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801988a:	f3ef 8310 	mrs	r3, PRIMASK
 801988e:	60fb      	str	r3, [r7, #12]
  return(result);
 8019890:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 8019892:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8019894:	b672      	cpsid	i
}
 8019896:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8019898:	4b35      	ldr	r3, [pc, #212]	@ (8019970 <TRACE_AllocateBufer+0xf8>)
 801989a:	8a5a      	ldrh	r2, [r3, #18]
 801989c:	4b34      	ldr	r3, [pc, #208]	@ (8019970 <TRACE_AllocateBufer+0xf8>)
 801989e:	8a1b      	ldrh	r3, [r3, #16]
 80198a0:	429a      	cmp	r2, r3
 80198a2:	d11b      	bne.n	80198dc <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 80198a4:	4b32      	ldr	r3, [pc, #200]	@ (8019970 <TRACE_AllocateBufer+0xf8>)
 80198a6:	8a5b      	ldrh	r3, [r3, #18]
 80198a8:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 80198ac:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 80198ae:	88fa      	ldrh	r2, [r7, #6]
 80198b0:	8afb      	ldrh	r3, [r7, #22]
 80198b2:	429a      	cmp	r2, r3
 80198b4:	d33a      	bcc.n	801992c <TRACE_AllocateBufer+0xb4>
 80198b6:	4b2e      	ldr	r3, [pc, #184]	@ (8019970 <TRACE_AllocateBufer+0xf8>)
 80198b8:	8a1b      	ldrh	r3, [r3, #16]
 80198ba:	88fa      	ldrh	r2, [r7, #6]
 80198bc:	429a      	cmp	r2, r3
 80198be:	d235      	bcs.n	801992c <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 80198c0:	4b2b      	ldr	r3, [pc, #172]	@ (8019970 <TRACE_AllocateBufer+0xf8>)
 80198c2:	2201      	movs	r2, #1
 80198c4:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 80198c6:	4b2a      	ldr	r3, [pc, #168]	@ (8019970 <TRACE_AllocateBufer+0xf8>)
 80198c8:	8a5a      	ldrh	r2, [r3, #18]
 80198ca:	4b29      	ldr	r3, [pc, #164]	@ (8019970 <TRACE_AllocateBufer+0xf8>)
 80198cc:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 80198ce:	4b28      	ldr	r3, [pc, #160]	@ (8019970 <TRACE_AllocateBufer+0xf8>)
 80198d0:	8a1b      	ldrh	r3, [r3, #16]
 80198d2:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 80198d4:	4b26      	ldr	r3, [pc, #152]	@ (8019970 <TRACE_AllocateBufer+0xf8>)
 80198d6:	2200      	movs	r2, #0
 80198d8:	825a      	strh	r2, [r3, #18]
 80198da:	e027      	b.n	801992c <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 80198dc:	4b24      	ldr	r3, [pc, #144]	@ (8019970 <TRACE_AllocateBufer+0xf8>)
 80198de:	8a5a      	ldrh	r2, [r3, #18]
 80198e0:	4b23      	ldr	r3, [pc, #140]	@ (8019970 <TRACE_AllocateBufer+0xf8>)
 80198e2:	8a1b      	ldrh	r3, [r3, #16]
 80198e4:	429a      	cmp	r2, r3
 80198e6:	d91b      	bls.n	8019920 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 80198e8:	4b21      	ldr	r3, [pc, #132]	@ (8019970 <TRACE_AllocateBufer+0xf8>)
 80198ea:	8a5b      	ldrh	r3, [r3, #18]
 80198ec:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 80198f0:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 80198f2:	88fa      	ldrh	r2, [r7, #6]
 80198f4:	8afb      	ldrh	r3, [r7, #22]
 80198f6:	429a      	cmp	r2, r3
 80198f8:	d318      	bcc.n	801992c <TRACE_AllocateBufer+0xb4>
 80198fa:	4b1d      	ldr	r3, [pc, #116]	@ (8019970 <TRACE_AllocateBufer+0xf8>)
 80198fc:	8a1b      	ldrh	r3, [r3, #16]
 80198fe:	88fa      	ldrh	r2, [r7, #6]
 8019900:	429a      	cmp	r2, r3
 8019902:	d213      	bcs.n	801992c <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8019904:	4b1a      	ldr	r3, [pc, #104]	@ (8019970 <TRACE_AllocateBufer+0xf8>)
 8019906:	2201      	movs	r2, #1
 8019908:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801990a:	4b19      	ldr	r3, [pc, #100]	@ (8019970 <TRACE_AllocateBufer+0xf8>)
 801990c:	8a5a      	ldrh	r2, [r3, #18]
 801990e:	4b18      	ldr	r3, [pc, #96]	@ (8019970 <TRACE_AllocateBufer+0xf8>)
 8019910:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8019912:	4b17      	ldr	r3, [pc, #92]	@ (8019970 <TRACE_AllocateBufer+0xf8>)
 8019914:	8a1b      	ldrh	r3, [r3, #16]
 8019916:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8019918:	4b15      	ldr	r3, [pc, #84]	@ (8019970 <TRACE_AllocateBufer+0xf8>)
 801991a:	2200      	movs	r2, #0
 801991c:	825a      	strh	r2, [r3, #18]
 801991e:	e005      	b.n	801992c <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 8019920:	4b13      	ldr	r3, [pc, #76]	@ (8019970 <TRACE_AllocateBufer+0xf8>)
 8019922:	8a1a      	ldrh	r2, [r3, #16]
 8019924:	4b12      	ldr	r3, [pc, #72]	@ (8019970 <TRACE_AllocateBufer+0xf8>)
 8019926:	8a5b      	ldrh	r3, [r3, #18]
 8019928:	1ad3      	subs	r3, r2, r3
 801992a:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801992c:	8afa      	ldrh	r2, [r7, #22]
 801992e:	88fb      	ldrh	r3, [r7, #6]
 8019930:	429a      	cmp	r2, r3
 8019932:	d90f      	bls.n	8019954 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 8019934:	4b0e      	ldr	r3, [pc, #56]	@ (8019970 <TRACE_AllocateBufer+0xf8>)
 8019936:	8a5a      	ldrh	r2, [r3, #18]
 8019938:	683b      	ldr	r3, [r7, #0]
 801993a:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801993c:	4b0c      	ldr	r3, [pc, #48]	@ (8019970 <TRACE_AllocateBufer+0xf8>)
 801993e:	8a5a      	ldrh	r2, [r3, #18]
 8019940:	88fb      	ldrh	r3, [r7, #6]
 8019942:	4413      	add	r3, r2
 8019944:	b29b      	uxth	r3, r3
 8019946:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801994a:	b29a      	uxth	r2, r3
 801994c:	4b08      	ldr	r3, [pc, #32]	@ (8019970 <TRACE_AllocateBufer+0xf8>)
 801994e:	825a      	strh	r2, [r3, #18]
    ret = 0;
 8019950:	2300      	movs	r3, #0
 8019952:	82bb      	strh	r3, [r7, #20]
 8019954:	693b      	ldr	r3, [r7, #16]
 8019956:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019958:	68bb      	ldr	r3, [r7, #8]
 801995a:	f383 8810 	msr	PRIMASK, r3
}
 801995e:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 8019960:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 8019964:	4618      	mov	r0, r3
 8019966:	371c      	adds	r7, #28
 8019968:	46bd      	mov	sp, r7
 801996a:	bc80      	pop	{r7}
 801996c:	4770      	bx	lr
 801996e:	bf00      	nop
 8019970:	200013d8 	.word	0x200013d8

08019974 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 8019974:	b480      	push	{r7}
 8019976:	b085      	sub	sp, #20
 8019978:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801997a:	f3ef 8310 	mrs	r3, PRIMASK
 801997e:	607b      	str	r3, [r7, #4]
  return(result);
 8019980:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 8019982:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8019984:	b672      	cpsid	i
}
 8019986:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 8019988:	4b08      	ldr	r3, [pc, #32]	@ (80199ac <TRACE_Lock+0x38>)
 801998a:	8adb      	ldrh	r3, [r3, #22]
 801998c:	3301      	adds	r3, #1
 801998e:	b29a      	uxth	r2, r3
 8019990:	4b06      	ldr	r3, [pc, #24]	@ (80199ac <TRACE_Lock+0x38>)
 8019992:	82da      	strh	r2, [r3, #22]
 8019994:	68fb      	ldr	r3, [r7, #12]
 8019996:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019998:	68bb      	ldr	r3, [r7, #8]
 801999a:	f383 8810 	msr	PRIMASK, r3
}
 801999e:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 80199a0:	bf00      	nop
 80199a2:	3714      	adds	r7, #20
 80199a4:	46bd      	mov	sp, r7
 80199a6:	bc80      	pop	{r7}
 80199a8:	4770      	bx	lr
 80199aa:	bf00      	nop
 80199ac:	200013d8 	.word	0x200013d8

080199b0 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 80199b0:	b480      	push	{r7}
 80199b2:	b085      	sub	sp, #20
 80199b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80199b6:	f3ef 8310 	mrs	r3, PRIMASK
 80199ba:	607b      	str	r3, [r7, #4]
  return(result);
 80199bc:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 80199be:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 80199c0:	b672      	cpsid	i
}
 80199c2:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 80199c4:	4b08      	ldr	r3, [pc, #32]	@ (80199e8 <TRACE_UnLock+0x38>)
 80199c6:	8adb      	ldrh	r3, [r3, #22]
 80199c8:	3b01      	subs	r3, #1
 80199ca:	b29a      	uxth	r2, r3
 80199cc:	4b06      	ldr	r3, [pc, #24]	@ (80199e8 <TRACE_UnLock+0x38>)
 80199ce:	82da      	strh	r2, [r3, #22]
 80199d0:	68fb      	ldr	r3, [r7, #12]
 80199d2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80199d4:	68bb      	ldr	r3, [r7, #8]
 80199d6:	f383 8810 	msr	PRIMASK, r3
}
 80199da:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 80199dc:	bf00      	nop
 80199de:	3714      	adds	r7, #20
 80199e0:	46bd      	mov	sp, r7
 80199e2:	bc80      	pop	{r7}
 80199e4:	4770      	bx	lr
 80199e6:	bf00      	nop
 80199e8:	200013d8 	.word	0x200013d8

080199ec <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 80199ec:	b480      	push	{r7}
 80199ee:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 80199f0:	4b05      	ldr	r3, [pc, #20]	@ (8019a08 <TRACE_IsLocked+0x1c>)
 80199f2:	8adb      	ldrh	r3, [r3, #22]
 80199f4:	2b00      	cmp	r3, #0
 80199f6:	bf14      	ite	ne
 80199f8:	2301      	movne	r3, #1
 80199fa:	2300      	moveq	r3, #0
 80199fc:	b2db      	uxtb	r3, r3
}
 80199fe:	4618      	mov	r0, r3
 8019a00:	46bd      	mov	sp, r7
 8019a02:	bc80      	pop	{r7}
 8019a04:	4770      	bx	lr
 8019a06:	bf00      	nop
 8019a08:	200013d8 	.word	0x200013d8

08019a0c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8019a0c:	b480      	push	{r7}
 8019a0e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8019a10:	4b04      	ldr	r3, [pc, #16]	@ (8019a24 <UTIL_LPM_Init+0x18>)
 8019a12:	2200      	movs	r2, #0
 8019a14:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8019a16:	4b04      	ldr	r3, [pc, #16]	@ (8019a28 <UTIL_LPM_Init+0x1c>)
 8019a18:	2200      	movs	r2, #0
 8019a1a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8019a1c:	bf00      	nop
 8019a1e:	46bd      	mov	sp, r7
 8019a20:	bc80      	pop	{r7}
 8019a22:	4770      	bx	lr
 8019a24:	200019f0 	.word	0x200019f0
 8019a28:	200019f4 	.word	0x200019f4

08019a2c <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8019a2c:	b480      	push	{r7}
 8019a2e:	b087      	sub	sp, #28
 8019a30:	af00      	add	r7, sp, #0
 8019a32:	6078      	str	r0, [r7, #4]
 8019a34:	460b      	mov	r3, r1
 8019a36:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019a38:	f3ef 8310 	mrs	r3, PRIMASK
 8019a3c:	613b      	str	r3, [r7, #16]
  return(result);
 8019a3e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8019a40:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019a42:	b672      	cpsid	i
}
 8019a44:	bf00      	nop
  
  switch( state )
 8019a46:	78fb      	ldrb	r3, [r7, #3]
 8019a48:	2b00      	cmp	r3, #0
 8019a4a:	d008      	beq.n	8019a5e <UTIL_LPM_SetStopMode+0x32>
 8019a4c:	2b01      	cmp	r3, #1
 8019a4e:	d10e      	bne.n	8019a6e <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8019a50:	4b0d      	ldr	r3, [pc, #52]	@ (8019a88 <UTIL_LPM_SetStopMode+0x5c>)
 8019a52:	681a      	ldr	r2, [r3, #0]
 8019a54:	687b      	ldr	r3, [r7, #4]
 8019a56:	4313      	orrs	r3, r2
 8019a58:	4a0b      	ldr	r2, [pc, #44]	@ (8019a88 <UTIL_LPM_SetStopMode+0x5c>)
 8019a5a:	6013      	str	r3, [r2, #0]
      break;
 8019a5c:	e008      	b.n	8019a70 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 8019a5e:	687b      	ldr	r3, [r7, #4]
 8019a60:	43da      	mvns	r2, r3
 8019a62:	4b09      	ldr	r3, [pc, #36]	@ (8019a88 <UTIL_LPM_SetStopMode+0x5c>)
 8019a64:	681b      	ldr	r3, [r3, #0]
 8019a66:	4013      	ands	r3, r2
 8019a68:	4a07      	ldr	r2, [pc, #28]	@ (8019a88 <UTIL_LPM_SetStopMode+0x5c>)
 8019a6a:	6013      	str	r3, [r2, #0]
      break;
 8019a6c:	e000      	b.n	8019a70 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 8019a6e:	bf00      	nop
 8019a70:	697b      	ldr	r3, [r7, #20]
 8019a72:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019a74:	68fb      	ldr	r3, [r7, #12]
 8019a76:	f383 8810 	msr	PRIMASK, r3
}
 8019a7a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8019a7c:	bf00      	nop
 8019a7e:	371c      	adds	r7, #28
 8019a80:	46bd      	mov	sp, r7
 8019a82:	bc80      	pop	{r7}
 8019a84:	4770      	bx	lr
 8019a86:	bf00      	nop
 8019a88:	200019f0 	.word	0x200019f0

08019a8c <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8019a8c:	b480      	push	{r7}
 8019a8e:	b087      	sub	sp, #28
 8019a90:	af00      	add	r7, sp, #0
 8019a92:	6078      	str	r0, [r7, #4]
 8019a94:	460b      	mov	r3, r1
 8019a96:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019a98:	f3ef 8310 	mrs	r3, PRIMASK
 8019a9c:	613b      	str	r3, [r7, #16]
  return(result);
 8019a9e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8019aa0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019aa2:	b672      	cpsid	i
}
 8019aa4:	bf00      	nop
  
  switch(state)
 8019aa6:	78fb      	ldrb	r3, [r7, #3]
 8019aa8:	2b00      	cmp	r3, #0
 8019aaa:	d008      	beq.n	8019abe <UTIL_LPM_SetOffMode+0x32>
 8019aac:	2b01      	cmp	r3, #1
 8019aae:	d10e      	bne.n	8019ace <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8019ab0:	4b0d      	ldr	r3, [pc, #52]	@ (8019ae8 <UTIL_LPM_SetOffMode+0x5c>)
 8019ab2:	681a      	ldr	r2, [r3, #0]
 8019ab4:	687b      	ldr	r3, [r7, #4]
 8019ab6:	4313      	orrs	r3, r2
 8019ab8:	4a0b      	ldr	r2, [pc, #44]	@ (8019ae8 <UTIL_LPM_SetOffMode+0x5c>)
 8019aba:	6013      	str	r3, [r2, #0]
      break;
 8019abc:	e008      	b.n	8019ad0 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8019abe:	687b      	ldr	r3, [r7, #4]
 8019ac0:	43da      	mvns	r2, r3
 8019ac2:	4b09      	ldr	r3, [pc, #36]	@ (8019ae8 <UTIL_LPM_SetOffMode+0x5c>)
 8019ac4:	681b      	ldr	r3, [r3, #0]
 8019ac6:	4013      	ands	r3, r2
 8019ac8:	4a07      	ldr	r2, [pc, #28]	@ (8019ae8 <UTIL_LPM_SetOffMode+0x5c>)
 8019aca:	6013      	str	r3, [r2, #0]
      break;
 8019acc:	e000      	b.n	8019ad0 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8019ace:	bf00      	nop
 8019ad0:	697b      	ldr	r3, [r7, #20]
 8019ad2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019ad4:	68fb      	ldr	r3, [r7, #12]
 8019ad6:	f383 8810 	msr	PRIMASK, r3
}
 8019ada:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8019adc:	bf00      	nop
 8019ade:	371c      	adds	r7, #28
 8019ae0:	46bd      	mov	sp, r7
 8019ae2:	bc80      	pop	{r7}
 8019ae4:	4770      	bx	lr
 8019ae6:	bf00      	nop
 8019ae8:	200019f4 	.word	0x200019f4

08019aec <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8019aec:	b580      	push	{r7, lr}
 8019aee:	b084      	sub	sp, #16
 8019af0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019af2:	f3ef 8310 	mrs	r3, PRIMASK
 8019af6:	60bb      	str	r3, [r7, #8]
  return(result);
 8019af8:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 8019afa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8019afc:	b672      	cpsid	i
}
 8019afe:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8019b00:	4b12      	ldr	r3, [pc, #72]	@ (8019b4c <UTIL_LPM_EnterLowPower+0x60>)
 8019b02:	681b      	ldr	r3, [r3, #0]
 8019b04:	2b00      	cmp	r3, #0
 8019b06:	d006      	beq.n	8019b16 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8019b08:	4b11      	ldr	r3, [pc, #68]	@ (8019b50 <UTIL_LPM_EnterLowPower+0x64>)
 8019b0a:	681b      	ldr	r3, [r3, #0]
 8019b0c:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8019b0e:	4b10      	ldr	r3, [pc, #64]	@ (8019b50 <UTIL_LPM_EnterLowPower+0x64>)
 8019b10:	685b      	ldr	r3, [r3, #4]
 8019b12:	4798      	blx	r3
 8019b14:	e010      	b.n	8019b38 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8019b16:	4b0f      	ldr	r3, [pc, #60]	@ (8019b54 <UTIL_LPM_EnterLowPower+0x68>)
 8019b18:	681b      	ldr	r3, [r3, #0]
 8019b1a:	2b00      	cmp	r3, #0
 8019b1c:	d006      	beq.n	8019b2c <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 8019b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8019b50 <UTIL_LPM_EnterLowPower+0x64>)
 8019b20:	689b      	ldr	r3, [r3, #8]
 8019b22:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8019b24:	4b0a      	ldr	r3, [pc, #40]	@ (8019b50 <UTIL_LPM_EnterLowPower+0x64>)
 8019b26:	68db      	ldr	r3, [r3, #12]
 8019b28:	4798      	blx	r3
 8019b2a:	e005      	b.n	8019b38 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 8019b2c:	4b08      	ldr	r3, [pc, #32]	@ (8019b50 <UTIL_LPM_EnterLowPower+0x64>)
 8019b2e:	691b      	ldr	r3, [r3, #16]
 8019b30:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 8019b32:	4b07      	ldr	r3, [pc, #28]	@ (8019b50 <UTIL_LPM_EnterLowPower+0x64>)
 8019b34:	695b      	ldr	r3, [r3, #20]
 8019b36:	4798      	blx	r3
 8019b38:	68fb      	ldr	r3, [r7, #12]
 8019b3a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019b3c:	687b      	ldr	r3, [r7, #4]
 8019b3e:	f383 8810 	msr	PRIMASK, r3
}
 8019b42:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8019b44:	bf00      	nop
 8019b46:	3710      	adds	r7, #16
 8019b48:	46bd      	mov	sp, r7
 8019b4a:	bd80      	pop	{r7, pc}
 8019b4c:	200019f0 	.word	0x200019f0
 8019b50:	08020b68 	.word	0x08020b68
 8019b54:	200019f4 	.word	0x200019f4

08019b58 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 8019b58:	b480      	push	{r7}
 8019b5a:	b085      	sub	sp, #20
 8019b5c:	af00      	add	r7, sp, #0
 8019b5e:	6078      	str	r0, [r7, #4]
 8019b60:	460b      	mov	r3, r1
 8019b62:	70fb      	strb	r3, [r7, #3]
 8019b64:	4613      	mov	r3, r2
 8019b66:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 8019b68:	687b      	ldr	r3, [r7, #4]
 8019b6a:	60fb      	str	r3, [r7, #12]
  while( size-- )
 8019b6c:	e004      	b.n	8019b78 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 8019b6e:	68fb      	ldr	r3, [r7, #12]
 8019b70:	1c5a      	adds	r2, r3, #1
 8019b72:	60fa      	str	r2, [r7, #12]
 8019b74:	78fa      	ldrb	r2, [r7, #3]
 8019b76:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8019b78:	883b      	ldrh	r3, [r7, #0]
 8019b7a:	1e5a      	subs	r2, r3, #1
 8019b7c:	803a      	strh	r2, [r7, #0]
 8019b7e:	2b00      	cmp	r3, #0
 8019b80:	d1f5      	bne.n	8019b6e <UTIL_MEM_set_8+0x16>
  }
}
 8019b82:	bf00      	nop
 8019b84:	bf00      	nop
 8019b86:	3714      	adds	r7, #20
 8019b88:	46bd      	mov	sp, r7
 8019b8a:	bc80      	pop	{r7}
 8019b8c:	4770      	bx	lr
	...

08019b90 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8019b90:	b580      	push	{r7, lr}
 8019b92:	b090      	sub	sp, #64	@ 0x40
 8019b94:	af00      	add	r7, sp, #0
 8019b96:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8019b98:	4b73      	ldr	r3, [pc, #460]	@ (8019d68 <UTIL_SEQ_Run+0x1d8>)
 8019b9a:	681b      	ldr	r3, [r3, #0]
 8019b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 8019b9e:	4b72      	ldr	r3, [pc, #456]	@ (8019d68 <UTIL_SEQ_Run+0x1d8>)
 8019ba0:	681a      	ldr	r2, [r3, #0]
 8019ba2:	687b      	ldr	r3, [r7, #4]
 8019ba4:	4013      	ands	r3, r2
 8019ba6:	4a70      	ldr	r2, [pc, #448]	@ (8019d68 <UTIL_SEQ_Run+0x1d8>)
 8019ba8:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8019baa:	4b70      	ldr	r3, [pc, #448]	@ (8019d6c <UTIL_SEQ_Run+0x1dc>)
 8019bac:	681b      	ldr	r3, [r3, #0]
 8019bae:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8019bb0:	4b6f      	ldr	r3, [pc, #444]	@ (8019d70 <UTIL_SEQ_Run+0x1e0>)
 8019bb2:	681b      	ldr	r3, [r3, #0]
 8019bb4:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8019bb6:	4b6f      	ldr	r3, [pc, #444]	@ (8019d74 <UTIL_SEQ_Run+0x1e4>)
 8019bb8:	681b      	ldr	r3, [r3, #0]
 8019bba:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 8019bbc:	4b6e      	ldr	r3, [pc, #440]	@ (8019d78 <UTIL_SEQ_Run+0x1e8>)
 8019bbe:	681b      	ldr	r3, [r3, #0]
 8019bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8019bc2:	e08d      	b.n	8019ce0 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8019bc4:	2300      	movs	r3, #0
 8019bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8019bc8:	e002      	b.n	8019bd0 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8019bca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019bcc:	3301      	adds	r3, #1
 8019bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8019bd0:	4a6a      	ldr	r2, [pc, #424]	@ (8019d7c <UTIL_SEQ_Run+0x1ec>)
 8019bd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019bd4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8019bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019bda:	401a      	ands	r2, r3
 8019bdc:	4b62      	ldr	r3, [pc, #392]	@ (8019d68 <UTIL_SEQ_Run+0x1d8>)
 8019bde:	681b      	ldr	r3, [r3, #0]
 8019be0:	4013      	ands	r3, r2
 8019be2:	2b00      	cmp	r3, #0
 8019be4:	d0f1      	beq.n	8019bca <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8019be6:	4a65      	ldr	r2, [pc, #404]	@ (8019d7c <UTIL_SEQ_Run+0x1ec>)
 8019be8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019bea:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8019bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019bf0:	401a      	ands	r2, r3
 8019bf2:	4b5d      	ldr	r3, [pc, #372]	@ (8019d68 <UTIL_SEQ_Run+0x1d8>)
 8019bf4:	681b      	ldr	r3, [r3, #0]
 8019bf6:	4013      	ands	r3, r2
 8019bf8:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8019bfa:	4a60      	ldr	r2, [pc, #384]	@ (8019d7c <UTIL_SEQ_Run+0x1ec>)
 8019bfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019bfe:	00db      	lsls	r3, r3, #3
 8019c00:	4413      	add	r3, r2
 8019c02:	685a      	ldr	r2, [r3, #4]
 8019c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c06:	4013      	ands	r3, r2
 8019c08:	2b00      	cmp	r3, #0
 8019c0a:	d106      	bne.n	8019c1a <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8019c0c:	4a5b      	ldr	r2, [pc, #364]	@ (8019d7c <UTIL_SEQ_Run+0x1ec>)
 8019c0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019c10:	00db      	lsls	r3, r3, #3
 8019c12:	4413      	add	r3, r2
 8019c14:	f04f 32ff 	mov.w	r2, #4294967295
 8019c18:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8019c1a:	4a58      	ldr	r2, [pc, #352]	@ (8019d7c <UTIL_SEQ_Run+0x1ec>)
 8019c1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019c1e:	00db      	lsls	r3, r3, #3
 8019c20:	4413      	add	r3, r2
 8019c22:	685a      	ldr	r2, [r3, #4]
 8019c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c26:	4013      	ands	r3, r2
 8019c28:	4618      	mov	r0, r3
 8019c2a:	f000 f907 	bl	8019e3c <SEQ_BitPosition>
 8019c2e:	4603      	mov	r3, r0
 8019c30:	461a      	mov	r2, r3
 8019c32:	4b53      	ldr	r3, [pc, #332]	@ (8019d80 <UTIL_SEQ_Run+0x1f0>)
 8019c34:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8019c36:	4a51      	ldr	r2, [pc, #324]	@ (8019d7c <UTIL_SEQ_Run+0x1ec>)
 8019c38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019c3a:	00db      	lsls	r3, r3, #3
 8019c3c:	4413      	add	r3, r2
 8019c3e:	685a      	ldr	r2, [r3, #4]
 8019c40:	4b4f      	ldr	r3, [pc, #316]	@ (8019d80 <UTIL_SEQ_Run+0x1f0>)
 8019c42:	681b      	ldr	r3, [r3, #0]
 8019c44:	2101      	movs	r1, #1
 8019c46:	fa01 f303 	lsl.w	r3, r1, r3
 8019c4a:	43db      	mvns	r3, r3
 8019c4c:	401a      	ands	r2, r3
 8019c4e:	494b      	ldr	r1, [pc, #300]	@ (8019d7c <UTIL_SEQ_Run+0x1ec>)
 8019c50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019c52:	00db      	lsls	r3, r3, #3
 8019c54:	440b      	add	r3, r1
 8019c56:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019c58:	f3ef 8310 	mrs	r3, PRIMASK
 8019c5c:	61bb      	str	r3, [r7, #24]
  return(result);
 8019c5e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8019c60:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8019c62:	b672      	cpsid	i
}
 8019c64:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8019c66:	4b46      	ldr	r3, [pc, #280]	@ (8019d80 <UTIL_SEQ_Run+0x1f0>)
 8019c68:	681b      	ldr	r3, [r3, #0]
 8019c6a:	2201      	movs	r2, #1
 8019c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8019c70:	43da      	mvns	r2, r3
 8019c72:	4b3e      	ldr	r3, [pc, #248]	@ (8019d6c <UTIL_SEQ_Run+0x1dc>)
 8019c74:	681b      	ldr	r3, [r3, #0]
 8019c76:	4013      	ands	r3, r2
 8019c78:	4a3c      	ldr	r2, [pc, #240]	@ (8019d6c <UTIL_SEQ_Run+0x1dc>)
 8019c7a:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8019c7c:	2301      	movs	r3, #1
 8019c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019c80:	e013      	b.n	8019caa <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8019c82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019c84:	3b01      	subs	r3, #1
 8019c86:	4a3d      	ldr	r2, [pc, #244]	@ (8019d7c <UTIL_SEQ_Run+0x1ec>)
 8019c88:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8019c8c:	4b3c      	ldr	r3, [pc, #240]	@ (8019d80 <UTIL_SEQ_Run+0x1f0>)
 8019c8e:	681b      	ldr	r3, [r3, #0]
 8019c90:	2201      	movs	r2, #1
 8019c92:	fa02 f303 	lsl.w	r3, r2, r3
 8019c96:	43da      	mvns	r2, r3
 8019c98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019c9a:	3b01      	subs	r3, #1
 8019c9c:	400a      	ands	r2, r1
 8019c9e:	4937      	ldr	r1, [pc, #220]	@ (8019d7c <UTIL_SEQ_Run+0x1ec>)
 8019ca0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8019ca4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019ca6:	3b01      	subs	r3, #1
 8019ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019caa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019cac:	2b00      	cmp	r3, #0
 8019cae:	d1e8      	bne.n	8019c82 <UTIL_SEQ_Run+0xf2>
 8019cb0:	6a3b      	ldr	r3, [r7, #32]
 8019cb2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019cb4:	697b      	ldr	r3, [r7, #20]
 8019cb6:	f383 8810 	msr	PRIMASK, r3
}
 8019cba:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8019cbc:	4b30      	ldr	r3, [pc, #192]	@ (8019d80 <UTIL_SEQ_Run+0x1f0>)
 8019cbe:	681b      	ldr	r3, [r3, #0]
 8019cc0:	4a30      	ldr	r2, [pc, #192]	@ (8019d84 <UTIL_SEQ_Run+0x1f4>)
 8019cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019cc6:	4798      	blx	r3

    local_taskset = TaskSet;
 8019cc8:	4b28      	ldr	r3, [pc, #160]	@ (8019d6c <UTIL_SEQ_Run+0x1dc>)
 8019cca:	681b      	ldr	r3, [r3, #0]
 8019ccc:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 8019cce:	4b28      	ldr	r3, [pc, #160]	@ (8019d70 <UTIL_SEQ_Run+0x1e0>)
 8019cd0:	681b      	ldr	r3, [r3, #0]
 8019cd2:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 8019cd4:	4b27      	ldr	r3, [pc, #156]	@ (8019d74 <UTIL_SEQ_Run+0x1e4>)
 8019cd6:	681b      	ldr	r3, [r3, #0]
 8019cd8:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 8019cda:	4b27      	ldr	r3, [pc, #156]	@ (8019d78 <UTIL_SEQ_Run+0x1e8>)
 8019cdc:	681b      	ldr	r3, [r3, #0]
 8019cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8019ce0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019ce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019ce4:	401a      	ands	r2, r3
 8019ce6:	4b20      	ldr	r3, [pc, #128]	@ (8019d68 <UTIL_SEQ_Run+0x1d8>)
 8019ce8:	681b      	ldr	r3, [r3, #0]
 8019cea:	4013      	ands	r3, r2
 8019cec:	2b00      	cmp	r3, #0
 8019cee:	d005      	beq.n	8019cfc <UTIL_SEQ_Run+0x16c>
 8019cf0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8019cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019cf4:	4013      	ands	r3, r2
 8019cf6:	2b00      	cmp	r3, #0
 8019cf8:	f43f af64 	beq.w	8019bc4 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8019cfc:	4b20      	ldr	r3, [pc, #128]	@ (8019d80 <UTIL_SEQ_Run+0x1f0>)
 8019cfe:	f04f 32ff 	mov.w	r2, #4294967295
 8019d02:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8019d04:	f000 f88e 	bl	8019e24 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019d08:	f3ef 8310 	mrs	r3, PRIMASK
 8019d0c:	613b      	str	r3, [r7, #16]
  return(result);
 8019d0e:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8019d10:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8019d12:	b672      	cpsid	i
}
 8019d14:	bf00      	nop
  local_taskset = TaskSet;
 8019d16:	4b15      	ldr	r3, [pc, #84]	@ (8019d6c <UTIL_SEQ_Run+0x1dc>)
 8019d18:	681b      	ldr	r3, [r3, #0]
 8019d1a:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8019d1c:	4b14      	ldr	r3, [pc, #80]	@ (8019d70 <UTIL_SEQ_Run+0x1e0>)
 8019d1e:	681b      	ldr	r3, [r3, #0]
 8019d20:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8019d22:	4b14      	ldr	r3, [pc, #80]	@ (8019d74 <UTIL_SEQ_Run+0x1e4>)
 8019d24:	681b      	ldr	r3, [r3, #0]
 8019d26:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8019d28:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8019d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019d2c:	401a      	ands	r2, r3
 8019d2e:	4b0e      	ldr	r3, [pc, #56]	@ (8019d68 <UTIL_SEQ_Run+0x1d8>)
 8019d30:	681b      	ldr	r3, [r3, #0]
 8019d32:	4013      	ands	r3, r2
 8019d34:	2b00      	cmp	r3, #0
 8019d36:	d107      	bne.n	8019d48 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8019d38:	4b0f      	ldr	r3, [pc, #60]	@ (8019d78 <UTIL_SEQ_Run+0x1e8>)
 8019d3a:	681a      	ldr	r2, [r3, #0]
 8019d3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019d3e:	4013      	ands	r3, r2
 8019d40:	2b00      	cmp	r3, #0
 8019d42:	d101      	bne.n	8019d48 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8019d44:	f7e7 fc84 	bl	8001650 <UTIL_SEQ_Idle>
 8019d48:	69fb      	ldr	r3, [r7, #28]
 8019d4a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019d4c:	68fb      	ldr	r3, [r7, #12]
 8019d4e:	f383 8810 	msr	PRIMASK, r3
}
 8019d52:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8019d54:	f000 f86c 	bl	8019e30 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8019d58:	4a03      	ldr	r2, [pc, #12]	@ (8019d68 <UTIL_SEQ_Run+0x1d8>)
 8019d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019d5c:	6013      	str	r3, [r2, #0]

  return;
 8019d5e:	bf00      	nop
}
 8019d60:	3740      	adds	r7, #64	@ 0x40
 8019d62:	46bd      	mov	sp, r7
 8019d64:	bd80      	pop	{r7, pc}
 8019d66:	bf00      	nop
 8019d68:	200000e0 	.word	0x200000e0
 8019d6c:	200019f8 	.word	0x200019f8
 8019d70:	200019fc 	.word	0x200019fc
 8019d74:	200000dc 	.word	0x200000dc
 8019d78:	20001a00 	.word	0x20001a00
 8019d7c:	20001a30 	.word	0x20001a30
 8019d80:	20001a04 	.word	0x20001a04
 8019d84:	20001a08 	.word	0x20001a08

08019d88 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8019d88:	b580      	push	{r7, lr}
 8019d8a:	b088      	sub	sp, #32
 8019d8c:	af00      	add	r7, sp, #0
 8019d8e:	60f8      	str	r0, [r7, #12]
 8019d90:	60b9      	str	r1, [r7, #8]
 8019d92:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019d94:	f3ef 8310 	mrs	r3, PRIMASK
 8019d98:	617b      	str	r3, [r7, #20]
  return(result);
 8019d9a:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8019d9c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8019d9e:	b672      	cpsid	i
}
 8019da0:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8019da2:	68f8      	ldr	r0, [r7, #12]
 8019da4:	f000 f84a 	bl	8019e3c <SEQ_BitPosition>
 8019da8:	4603      	mov	r3, r0
 8019daa:	4619      	mov	r1, r3
 8019dac:	4a06      	ldr	r2, [pc, #24]	@ (8019dc8 <UTIL_SEQ_RegTask+0x40>)
 8019dae:	687b      	ldr	r3, [r7, #4]
 8019db0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8019db4:	69fb      	ldr	r3, [r7, #28]
 8019db6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019db8:	69bb      	ldr	r3, [r7, #24]
 8019dba:	f383 8810 	msr	PRIMASK, r3
}
 8019dbe:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8019dc0:	bf00      	nop
}
 8019dc2:	3720      	adds	r7, #32
 8019dc4:	46bd      	mov	sp, r7
 8019dc6:	bd80      	pop	{r7, pc}
 8019dc8:	20001a08 	.word	0x20001a08

08019dcc <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8019dcc:	b480      	push	{r7}
 8019dce:	b087      	sub	sp, #28
 8019dd0:	af00      	add	r7, sp, #0
 8019dd2:	6078      	str	r0, [r7, #4]
 8019dd4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019dd6:	f3ef 8310 	mrs	r3, PRIMASK
 8019dda:	60fb      	str	r3, [r7, #12]
  return(result);
 8019ddc:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8019dde:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019de0:	b672      	cpsid	i
}
 8019de2:	bf00      	nop

  TaskSet |= TaskId_bm;
 8019de4:	4b0d      	ldr	r3, [pc, #52]	@ (8019e1c <UTIL_SEQ_SetTask+0x50>)
 8019de6:	681a      	ldr	r2, [r3, #0]
 8019de8:	687b      	ldr	r3, [r7, #4]
 8019dea:	4313      	orrs	r3, r2
 8019dec:	4a0b      	ldr	r2, [pc, #44]	@ (8019e1c <UTIL_SEQ_SetTask+0x50>)
 8019dee:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8019df0:	4a0b      	ldr	r2, [pc, #44]	@ (8019e20 <UTIL_SEQ_SetTask+0x54>)
 8019df2:	683b      	ldr	r3, [r7, #0]
 8019df4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8019df8:	687b      	ldr	r3, [r7, #4]
 8019dfa:	431a      	orrs	r2, r3
 8019dfc:	4908      	ldr	r1, [pc, #32]	@ (8019e20 <UTIL_SEQ_SetTask+0x54>)
 8019dfe:	683b      	ldr	r3, [r7, #0]
 8019e00:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8019e04:	697b      	ldr	r3, [r7, #20]
 8019e06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019e08:	693b      	ldr	r3, [r7, #16]
 8019e0a:	f383 8810 	msr	PRIMASK, r3
}
 8019e0e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8019e10:	bf00      	nop
}
 8019e12:	371c      	adds	r7, #28
 8019e14:	46bd      	mov	sp, r7
 8019e16:	bc80      	pop	{r7}
 8019e18:	4770      	bx	lr
 8019e1a:	bf00      	nop
 8019e1c:	200019f8 	.word	0x200019f8
 8019e20:	20001a30 	.word	0x20001a30

08019e24 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8019e24:	b480      	push	{r7}
 8019e26:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8019e28:	bf00      	nop
}
 8019e2a:	46bd      	mov	sp, r7
 8019e2c:	bc80      	pop	{r7}
 8019e2e:	4770      	bx	lr

08019e30 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8019e30:	b480      	push	{r7}
 8019e32:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8019e34:	bf00      	nop
}
 8019e36:	46bd      	mov	sp, r7
 8019e38:	bc80      	pop	{r7}
 8019e3a:	4770      	bx	lr

08019e3c <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8019e3c:	b480      	push	{r7}
 8019e3e:	b085      	sub	sp, #20
 8019e40:	af00      	add	r7, sp, #0
 8019e42:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8019e44:	2300      	movs	r3, #0
 8019e46:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8019e48:	687b      	ldr	r3, [r7, #4]
 8019e4a:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8019e4c:	68bb      	ldr	r3, [r7, #8]
 8019e4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8019e52:	d204      	bcs.n	8019e5e <SEQ_BitPosition+0x22>
 8019e54:	2310      	movs	r3, #16
 8019e56:	73fb      	strb	r3, [r7, #15]
 8019e58:	68bb      	ldr	r3, [r7, #8]
 8019e5a:	041b      	lsls	r3, r3, #16
 8019e5c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8019e5e:	68bb      	ldr	r3, [r7, #8]
 8019e60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8019e64:	d205      	bcs.n	8019e72 <SEQ_BitPosition+0x36>
 8019e66:	7bfb      	ldrb	r3, [r7, #15]
 8019e68:	3308      	adds	r3, #8
 8019e6a:	73fb      	strb	r3, [r7, #15]
 8019e6c:	68bb      	ldr	r3, [r7, #8]
 8019e6e:	021b      	lsls	r3, r3, #8
 8019e70:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8019e72:	68bb      	ldr	r3, [r7, #8]
 8019e74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8019e78:	d205      	bcs.n	8019e86 <SEQ_BitPosition+0x4a>
 8019e7a:	7bfb      	ldrb	r3, [r7, #15]
 8019e7c:	3304      	adds	r3, #4
 8019e7e:	73fb      	strb	r3, [r7, #15]
 8019e80:	68bb      	ldr	r3, [r7, #8]
 8019e82:	011b      	lsls	r3, r3, #4
 8019e84:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8019e86:	68bb      	ldr	r3, [r7, #8]
 8019e88:	0f1b      	lsrs	r3, r3, #28
 8019e8a:	4a07      	ldr	r2, [pc, #28]	@ (8019ea8 <SEQ_BitPosition+0x6c>)
 8019e8c:	5cd2      	ldrb	r2, [r2, r3]
 8019e8e:	7bfb      	ldrb	r3, [r7, #15]
 8019e90:	4413      	add	r3, r2
 8019e92:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8019e94:	7bfb      	ldrb	r3, [r7, #15]
 8019e96:	f1c3 031f 	rsb	r3, r3, #31
 8019e9a:	b2db      	uxtb	r3, r3
}
 8019e9c:	4618      	mov	r0, r3
 8019e9e:	3714      	adds	r7, #20
 8019ea0:	46bd      	mov	sp, r7
 8019ea2:	bc80      	pop	{r7}
 8019ea4:	4770      	bx	lr
 8019ea6:	bf00      	nop
 8019ea8:	08021228 	.word	0x08021228

08019eac <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8019eac:	b082      	sub	sp, #8
 8019eae:	b480      	push	{r7}
 8019eb0:	b087      	sub	sp, #28
 8019eb2:	af00      	add	r7, sp, #0
 8019eb4:	60f8      	str	r0, [r7, #12]
 8019eb6:	1d38      	adds	r0, r7, #4
 8019eb8:	e880 0006 	stmia.w	r0, {r1, r2}
 8019ebc:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 8019ebe:	2300      	movs	r3, #0
 8019ec0:	613b      	str	r3, [r7, #16]
 8019ec2:	2300      	movs	r3, #0
 8019ec4:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 8019ec6:	687a      	ldr	r2, [r7, #4]
 8019ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019eca:	4413      	add	r3, r2
 8019ecc:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8019ece:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8019ed2:	b29a      	uxth	r2, r3
 8019ed4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8019ed8:	b29b      	uxth	r3, r3
 8019eda:	4413      	add	r3, r2
 8019edc:	b29b      	uxth	r3, r3
 8019ede:	b21b      	sxth	r3, r3
 8019ee0:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 8019ee2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8019ee6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8019eea:	db0a      	blt.n	8019f02 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 8019eec:	693b      	ldr	r3, [r7, #16]
 8019eee:	3301      	adds	r3, #1
 8019ef0:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 8019ef2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8019ef6:	b29b      	uxth	r3, r3
 8019ef8:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8019efc:	b29b      	uxth	r3, r3
 8019efe:	b21b      	sxth	r3, r3
 8019f00:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 8019f02:	68fb      	ldr	r3, [r7, #12]
 8019f04:	461a      	mov	r2, r3
 8019f06:	f107 0310 	add.w	r3, r7, #16
 8019f0a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019f0e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019f12:	68f8      	ldr	r0, [r7, #12]
 8019f14:	371c      	adds	r7, #28
 8019f16:	46bd      	mov	sp, r7
 8019f18:	bc80      	pop	{r7}
 8019f1a:	b002      	add	sp, #8
 8019f1c:	4770      	bx	lr

08019f1e <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 8019f1e:	b082      	sub	sp, #8
 8019f20:	b480      	push	{r7}
 8019f22:	b087      	sub	sp, #28
 8019f24:	af00      	add	r7, sp, #0
 8019f26:	60f8      	str	r0, [r7, #12]
 8019f28:	1d38      	adds	r0, r7, #4
 8019f2a:	e880 0006 	stmia.w	r0, {r1, r2}
 8019f2e:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 8019f30:	2300      	movs	r3, #0
 8019f32:	613b      	str	r3, [r7, #16]
 8019f34:	2300      	movs	r3, #0
 8019f36:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 8019f38:	687a      	ldr	r2, [r7, #4]
 8019f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019f3c:	1ad3      	subs	r3, r2, r3
 8019f3e:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 8019f40:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8019f44:	b29a      	uxth	r2, r3
 8019f46:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8019f4a:	b29b      	uxth	r3, r3
 8019f4c:	1ad3      	subs	r3, r2, r3
 8019f4e:	b29b      	uxth	r3, r3
 8019f50:	b21b      	sxth	r3, r3
 8019f52:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 8019f54:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8019f58:	2b00      	cmp	r3, #0
 8019f5a:	da0a      	bge.n	8019f72 <SysTimeSub+0x54>
  {
    c.Seconds--;
 8019f5c:	693b      	ldr	r3, [r7, #16]
 8019f5e:	3b01      	subs	r3, #1
 8019f60:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 8019f62:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8019f66:	b29b      	uxth	r3, r3
 8019f68:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8019f6c:	b29b      	uxth	r3, r3
 8019f6e:	b21b      	sxth	r3, r3
 8019f70:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 8019f72:	68fb      	ldr	r3, [r7, #12]
 8019f74:	461a      	mov	r2, r3
 8019f76:	f107 0310 	add.w	r3, r7, #16
 8019f7a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019f7e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8019f82:	68f8      	ldr	r0, [r7, #12]
 8019f84:	371c      	adds	r7, #28
 8019f86:	46bd      	mov	sp, r7
 8019f88:	bc80      	pop	{r7}
 8019f8a:	b002      	add	sp, #8
 8019f8c:	4770      	bx	lr
	...

08019f90 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8019f90:	b580      	push	{r7, lr}
 8019f92:	b088      	sub	sp, #32
 8019f94:	af02      	add	r7, sp, #8
 8019f96:	463b      	mov	r3, r7
 8019f98:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8019f9c:	2300      	movs	r3, #0
 8019f9e:	60bb      	str	r3, [r7, #8]
 8019fa0:	2300      	movs	r3, #0
 8019fa2:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8019fa4:	4b10      	ldr	r3, [pc, #64]	@ (8019fe8 <SysTimeSet+0x58>)
 8019fa6:	691b      	ldr	r3, [r3, #16]
 8019fa8:	f107 0208 	add.w	r2, r7, #8
 8019fac:	3204      	adds	r2, #4
 8019fae:	4610      	mov	r0, r2
 8019fb0:	4798      	blx	r3
 8019fb2:	4603      	mov	r3, r0
 8019fb4:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 8019fb6:	f107 0010 	add.w	r0, r7, #16
 8019fba:	68fb      	ldr	r3, [r7, #12]
 8019fbc:	9300      	str	r3, [sp, #0]
 8019fbe:	68bb      	ldr	r3, [r7, #8]
 8019fc0:	463a      	mov	r2, r7
 8019fc2:	ca06      	ldmia	r2, {r1, r2}
 8019fc4:	f7ff ffab 	bl	8019f1e <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 8019fc8:	4b07      	ldr	r3, [pc, #28]	@ (8019fe8 <SysTimeSet+0x58>)
 8019fca:	681b      	ldr	r3, [r3, #0]
 8019fcc:	693a      	ldr	r2, [r7, #16]
 8019fce:	4610      	mov	r0, r2
 8019fd0:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 8019fd2:	4b05      	ldr	r3, [pc, #20]	@ (8019fe8 <SysTimeSet+0x58>)
 8019fd4:	689b      	ldr	r3, [r3, #8]
 8019fd6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8019fda:	4610      	mov	r0, r2
 8019fdc:	4798      	blx	r3
}
 8019fde:	bf00      	nop
 8019fe0:	3718      	adds	r7, #24
 8019fe2:	46bd      	mov	sp, r7
 8019fe4:	bd80      	pop	{r7, pc}
 8019fe6:	bf00      	nop
 8019fe8:	08020bac 	.word	0x08020bac

08019fec <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 8019fec:	b580      	push	{r7, lr}
 8019fee:	b08a      	sub	sp, #40	@ 0x28
 8019ff0:	af02      	add	r7, sp, #8
 8019ff2:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8019ff4:	2300      	movs	r3, #0
 8019ff6:	61bb      	str	r3, [r7, #24]
 8019ff8:	2300      	movs	r3, #0
 8019ffa:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 8019ffc:	2300      	movs	r3, #0
 8019ffe:	613b      	str	r3, [r7, #16]
 801a000:	2300      	movs	r3, #0
 801a002:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801a004:	4b14      	ldr	r3, [pc, #80]	@ (801a058 <SysTimeGet+0x6c>)
 801a006:	691b      	ldr	r3, [r3, #16]
 801a008:	f107 0218 	add.w	r2, r7, #24
 801a00c:	3204      	adds	r2, #4
 801a00e:	4610      	mov	r0, r2
 801a010:	4798      	blx	r3
 801a012:	4603      	mov	r3, r0
 801a014:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801a016:	4b10      	ldr	r3, [pc, #64]	@ (801a058 <SysTimeGet+0x6c>)
 801a018:	68db      	ldr	r3, [r3, #12]
 801a01a:	4798      	blx	r3
 801a01c:	4603      	mov	r3, r0
 801a01e:	b21b      	sxth	r3, r3
 801a020:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801a022:	4b0d      	ldr	r3, [pc, #52]	@ (801a058 <SysTimeGet+0x6c>)
 801a024:	685b      	ldr	r3, [r3, #4]
 801a026:	4798      	blx	r3
 801a028:	4603      	mov	r3, r0
 801a02a:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801a02c:	f107 0010 	add.w	r0, r7, #16
 801a030:	69fb      	ldr	r3, [r7, #28]
 801a032:	9300      	str	r3, [sp, #0]
 801a034:	69bb      	ldr	r3, [r7, #24]
 801a036:	f107 0208 	add.w	r2, r7, #8
 801a03a:	ca06      	ldmia	r2, {r1, r2}
 801a03c:	f7ff ff36 	bl	8019eac <SysTimeAdd>

  return sysTime;
 801a040:	687b      	ldr	r3, [r7, #4]
 801a042:	461a      	mov	r2, r3
 801a044:	f107 0310 	add.w	r3, r7, #16
 801a048:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a04c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801a050:	6878      	ldr	r0, [r7, #4]
 801a052:	3720      	adds	r7, #32
 801a054:	46bd      	mov	sp, r7
 801a056:	bd80      	pop	{r7, pc}
 801a058:	08020bac 	.word	0x08020bac

0801a05c <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801a05c:	b580      	push	{r7, lr}
 801a05e:	b084      	sub	sp, #16
 801a060:	af00      	add	r7, sp, #0
 801a062:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801a064:	2300      	movs	r3, #0
 801a066:	60bb      	str	r3, [r7, #8]
 801a068:	2300      	movs	r3, #0
 801a06a:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801a06c:	4b0a      	ldr	r3, [pc, #40]	@ (801a098 <SysTimeGetMcuTime+0x3c>)
 801a06e:	691b      	ldr	r3, [r3, #16]
 801a070:	f107 0208 	add.w	r2, r7, #8
 801a074:	3204      	adds	r2, #4
 801a076:	4610      	mov	r0, r2
 801a078:	4798      	blx	r3
 801a07a:	4603      	mov	r3, r0
 801a07c:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801a07e:	687b      	ldr	r3, [r7, #4]
 801a080:	461a      	mov	r2, r3
 801a082:	f107 0308 	add.w	r3, r7, #8
 801a086:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a08a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801a08e:	6878      	ldr	r0, [r7, #4]
 801a090:	3710      	adds	r7, #16
 801a092:	46bd      	mov	sp, r7
 801a094:	bd80      	pop	{r7, pc}
 801a096:	bf00      	nop
 801a098:	08020bac 	.word	0x08020bac

0801a09c <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801a09c:	b580      	push	{r7, lr}
 801a09e:	b088      	sub	sp, #32
 801a0a0:	af02      	add	r7, sp, #8
 801a0a2:	463b      	mov	r3, r7
 801a0a4:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801a0a8:	4b0f      	ldr	r3, [pc, #60]	@ (801a0e8 <SysTimeToMs+0x4c>)
 801a0aa:	68db      	ldr	r3, [r3, #12]
 801a0ac:	4798      	blx	r3
 801a0ae:	4603      	mov	r3, r0
 801a0b0:	b21b      	sxth	r3, r3
 801a0b2:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801a0b4:	4b0c      	ldr	r3, [pc, #48]	@ (801a0e8 <SysTimeToMs+0x4c>)
 801a0b6:	685b      	ldr	r3, [r3, #4]
 801a0b8:	4798      	blx	r3
 801a0ba:	4603      	mov	r3, r0
 801a0bc:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801a0be:	f107 0008 	add.w	r0, r7, #8
 801a0c2:	697b      	ldr	r3, [r7, #20]
 801a0c4:	9300      	str	r3, [sp, #0]
 801a0c6:	693b      	ldr	r3, [r7, #16]
 801a0c8:	463a      	mov	r2, r7
 801a0ca:	ca06      	ldmia	r2, {r1, r2}
 801a0cc:	f7ff ff27 	bl	8019f1e <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801a0d0:	68bb      	ldr	r3, [r7, #8]
 801a0d2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801a0d6:	fb02 f303 	mul.w	r3, r2, r3
 801a0da:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801a0de:	4413      	add	r3, r2
}
 801a0e0:	4618      	mov	r0, r3
 801a0e2:	3718      	adds	r7, #24
 801a0e4:	46bd      	mov	sp, r7
 801a0e6:	bd80      	pop	{r7, pc}
 801a0e8:	08020bac 	.word	0x08020bac

0801a0ec <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801a0ec:	b580      	push	{r7, lr}
 801a0ee:	b08a      	sub	sp, #40	@ 0x28
 801a0f0:	af02      	add	r7, sp, #8
 801a0f2:	6078      	str	r0, [r7, #4]
 801a0f4:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801a0f6:	683b      	ldr	r3, [r7, #0]
 801a0f8:	4a19      	ldr	r2, [pc, #100]	@ (801a160 <SysTimeFromMs+0x74>)
 801a0fa:	fba2 2303 	umull	r2, r3, r2, r3
 801a0fe:	099b      	lsrs	r3, r3, #6
 801a100:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801a102:	69fb      	ldr	r3, [r7, #28]
 801a104:	617b      	str	r3, [r7, #20]
 801a106:	683b      	ldr	r3, [r7, #0]
 801a108:	b29a      	uxth	r2, r3
 801a10a:	69fb      	ldr	r3, [r7, #28]
 801a10c:	b29b      	uxth	r3, r3
 801a10e:	4619      	mov	r1, r3
 801a110:	0149      	lsls	r1, r1, #5
 801a112:	1ac9      	subs	r1, r1, r3
 801a114:	0089      	lsls	r1, r1, #2
 801a116:	440b      	add	r3, r1
 801a118:	00db      	lsls	r3, r3, #3
 801a11a:	b29b      	uxth	r3, r3
 801a11c:	1ad3      	subs	r3, r2, r3
 801a11e:	b29b      	uxth	r3, r3
 801a120:	b21b      	sxth	r3, r3
 801a122:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801a124:	f107 030c 	add.w	r3, r7, #12
 801a128:	2200      	movs	r2, #0
 801a12a:	601a      	str	r2, [r3, #0]
 801a12c:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801a12e:	4b0d      	ldr	r3, [pc, #52]	@ (801a164 <SysTimeFromMs+0x78>)
 801a130:	68db      	ldr	r3, [r3, #12]
 801a132:	4798      	blx	r3
 801a134:	4603      	mov	r3, r0
 801a136:	b21b      	sxth	r3, r3
 801a138:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801a13a:	4b0a      	ldr	r3, [pc, #40]	@ (801a164 <SysTimeFromMs+0x78>)
 801a13c:	685b      	ldr	r3, [r3, #4]
 801a13e:	4798      	blx	r3
 801a140:	4603      	mov	r3, r0
 801a142:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801a144:	6878      	ldr	r0, [r7, #4]
 801a146:	693b      	ldr	r3, [r7, #16]
 801a148:	9300      	str	r3, [sp, #0]
 801a14a:	68fb      	ldr	r3, [r7, #12]
 801a14c:	f107 0214 	add.w	r2, r7, #20
 801a150:	ca06      	ldmia	r2, {r1, r2}
 801a152:	f7ff feab 	bl	8019eac <SysTimeAdd>
}
 801a156:	6878      	ldr	r0, [r7, #4]
 801a158:	3720      	adds	r7, #32
 801a15a:	46bd      	mov	sp, r7
 801a15c:	bd80      	pop	{r7, pc}
 801a15e:	bf00      	nop
 801a160:	10624dd3 	.word	0x10624dd3
 801a164:	08020bac 	.word	0x08020bac

0801a168 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801a168:	b580      	push	{r7, lr}
 801a16a:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801a16c:	4b04      	ldr	r3, [pc, #16]	@ (801a180 <UTIL_TIMER_Init+0x18>)
 801a16e:	2200      	movs	r2, #0
 801a170:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801a172:	4b04      	ldr	r3, [pc, #16]	@ (801a184 <UTIL_TIMER_Init+0x1c>)
 801a174:	681b      	ldr	r3, [r3, #0]
 801a176:	4798      	blx	r3
 801a178:	4603      	mov	r3, r0
}
 801a17a:	4618      	mov	r0, r3
 801a17c:	bd80      	pop	{r7, pc}
 801a17e:	bf00      	nop
 801a180:	20001a38 	.word	0x20001a38
 801a184:	08020b80 	.word	0x08020b80

0801a188 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801a188:	b580      	push	{r7, lr}
 801a18a:	b084      	sub	sp, #16
 801a18c:	af00      	add	r7, sp, #0
 801a18e:	60f8      	str	r0, [r7, #12]
 801a190:	60b9      	str	r1, [r7, #8]
 801a192:	603b      	str	r3, [r7, #0]
 801a194:	4613      	mov	r3, r2
 801a196:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801a198:	68fb      	ldr	r3, [r7, #12]
 801a19a:	2b00      	cmp	r3, #0
 801a19c:	d023      	beq.n	801a1e6 <UTIL_TIMER_Create+0x5e>
 801a19e:	683b      	ldr	r3, [r7, #0]
 801a1a0:	2b00      	cmp	r3, #0
 801a1a2:	d020      	beq.n	801a1e6 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801a1a4:	68fb      	ldr	r3, [r7, #12]
 801a1a6:	2200      	movs	r2, #0
 801a1a8:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801a1aa:	4b11      	ldr	r3, [pc, #68]	@ (801a1f0 <UTIL_TIMER_Create+0x68>)
 801a1ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a1ae:	68b8      	ldr	r0, [r7, #8]
 801a1b0:	4798      	blx	r3
 801a1b2:	4602      	mov	r2, r0
 801a1b4:	68fb      	ldr	r3, [r7, #12]
 801a1b6:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801a1b8:	68fb      	ldr	r3, [r7, #12]
 801a1ba:	2200      	movs	r2, #0
 801a1bc:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801a1be:	68fb      	ldr	r3, [r7, #12]
 801a1c0:	2200      	movs	r2, #0
 801a1c2:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801a1c4:	68fb      	ldr	r3, [r7, #12]
 801a1c6:	2200      	movs	r2, #0
 801a1c8:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801a1ca:	68fb      	ldr	r3, [r7, #12]
 801a1cc:	683a      	ldr	r2, [r7, #0]
 801a1ce:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801a1d0:	68fb      	ldr	r3, [r7, #12]
 801a1d2:	69ba      	ldr	r2, [r7, #24]
 801a1d4:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801a1d6:	68fb      	ldr	r3, [r7, #12]
 801a1d8:	79fa      	ldrb	r2, [r7, #7]
 801a1da:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801a1dc:	68fb      	ldr	r3, [r7, #12]
 801a1de:	2200      	movs	r2, #0
 801a1e0:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801a1e2:	2300      	movs	r3, #0
 801a1e4:	e000      	b.n	801a1e8 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801a1e6:	2301      	movs	r3, #1
  }
}
 801a1e8:	4618      	mov	r0, r3
 801a1ea:	3710      	adds	r7, #16
 801a1ec:	46bd      	mov	sp, r7
 801a1ee:	bd80      	pop	{r7, pc}
 801a1f0:	08020b80 	.word	0x08020b80

0801a1f4 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801a1f4:	b580      	push	{r7, lr}
 801a1f6:	b08a      	sub	sp, #40	@ 0x28
 801a1f8:	af00      	add	r7, sp, #0
 801a1fa:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801a1fc:	2300      	movs	r3, #0
 801a1fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801a202:	687b      	ldr	r3, [r7, #4]
 801a204:	2b00      	cmp	r3, #0
 801a206:	d056      	beq.n	801a2b6 <UTIL_TIMER_Start+0xc2>
 801a208:	6878      	ldr	r0, [r7, #4]
 801a20a:	f000 f929 	bl	801a460 <TimerExists>
 801a20e:	4603      	mov	r3, r0
 801a210:	f083 0301 	eor.w	r3, r3, #1
 801a214:	b2db      	uxtb	r3, r3
 801a216:	2b00      	cmp	r3, #0
 801a218:	d04d      	beq.n	801a2b6 <UTIL_TIMER_Start+0xc2>
 801a21a:	687b      	ldr	r3, [r7, #4]
 801a21c:	7a5b      	ldrb	r3, [r3, #9]
 801a21e:	2b00      	cmp	r3, #0
 801a220:	d149      	bne.n	801a2b6 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a222:	f3ef 8310 	mrs	r3, PRIMASK
 801a226:	613b      	str	r3, [r7, #16]
  return(result);
 801a228:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801a22a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801a22c:	b672      	cpsid	i
}
 801a22e:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801a230:	687b      	ldr	r3, [r7, #4]
 801a232:	685b      	ldr	r3, [r3, #4]
 801a234:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801a236:	4b24      	ldr	r3, [pc, #144]	@ (801a2c8 <UTIL_TIMER_Start+0xd4>)
 801a238:	6a1b      	ldr	r3, [r3, #32]
 801a23a:	4798      	blx	r3
 801a23c:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801a23e:	6a3a      	ldr	r2, [r7, #32]
 801a240:	69bb      	ldr	r3, [r7, #24]
 801a242:	429a      	cmp	r2, r3
 801a244:	d201      	bcs.n	801a24a <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801a246:	69bb      	ldr	r3, [r7, #24]
 801a248:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801a24a:	687b      	ldr	r3, [r7, #4]
 801a24c:	6a3a      	ldr	r2, [r7, #32]
 801a24e:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801a250:	687b      	ldr	r3, [r7, #4]
 801a252:	2200      	movs	r2, #0
 801a254:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801a256:	687b      	ldr	r3, [r7, #4]
 801a258:	2201      	movs	r2, #1
 801a25a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801a25c:	687b      	ldr	r3, [r7, #4]
 801a25e:	2200      	movs	r2, #0
 801a260:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801a262:	4b1a      	ldr	r3, [pc, #104]	@ (801a2cc <UTIL_TIMER_Start+0xd8>)
 801a264:	681b      	ldr	r3, [r3, #0]
 801a266:	2b00      	cmp	r3, #0
 801a268:	d106      	bne.n	801a278 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801a26a:	4b17      	ldr	r3, [pc, #92]	@ (801a2c8 <UTIL_TIMER_Start+0xd4>)
 801a26c:	691b      	ldr	r3, [r3, #16]
 801a26e:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801a270:	6878      	ldr	r0, [r7, #4]
 801a272:	f000 f96b 	bl	801a54c <TimerInsertNewHeadTimer>
 801a276:	e017      	b.n	801a2a8 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801a278:	4b13      	ldr	r3, [pc, #76]	@ (801a2c8 <UTIL_TIMER_Start+0xd4>)
 801a27a:	699b      	ldr	r3, [r3, #24]
 801a27c:	4798      	blx	r3
 801a27e:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801a280:	687b      	ldr	r3, [r7, #4]
 801a282:	681a      	ldr	r2, [r3, #0]
 801a284:	697b      	ldr	r3, [r7, #20]
 801a286:	441a      	add	r2, r3
 801a288:	687b      	ldr	r3, [r7, #4]
 801a28a:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801a28c:	687b      	ldr	r3, [r7, #4]
 801a28e:	681a      	ldr	r2, [r3, #0]
 801a290:	4b0e      	ldr	r3, [pc, #56]	@ (801a2cc <UTIL_TIMER_Start+0xd8>)
 801a292:	681b      	ldr	r3, [r3, #0]
 801a294:	681b      	ldr	r3, [r3, #0]
 801a296:	429a      	cmp	r2, r3
 801a298:	d203      	bcs.n	801a2a2 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801a29a:	6878      	ldr	r0, [r7, #4]
 801a29c:	f000 f956 	bl	801a54c <TimerInsertNewHeadTimer>
 801a2a0:	e002      	b.n	801a2a8 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801a2a2:	6878      	ldr	r0, [r7, #4]
 801a2a4:	f000 f922 	bl	801a4ec <TimerInsertTimer>
 801a2a8:	69fb      	ldr	r3, [r7, #28]
 801a2aa:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a2ac:	68fb      	ldr	r3, [r7, #12]
 801a2ae:	f383 8810 	msr	PRIMASK, r3
}
 801a2b2:	bf00      	nop
  {
 801a2b4:	e002      	b.n	801a2bc <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801a2b6:	2301      	movs	r3, #1
 801a2b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 801a2bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801a2c0:	4618      	mov	r0, r3
 801a2c2:	3728      	adds	r7, #40	@ 0x28
 801a2c4:	46bd      	mov	sp, r7
 801a2c6:	bd80      	pop	{r7, pc}
 801a2c8:	08020b80 	.word	0x08020b80
 801a2cc:	20001a38 	.word	0x20001a38

0801a2d0 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801a2d0:	b580      	push	{r7, lr}
 801a2d2:	b088      	sub	sp, #32
 801a2d4:	af00      	add	r7, sp, #0
 801a2d6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801a2d8:	2300      	movs	r3, #0
 801a2da:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801a2dc:	687b      	ldr	r3, [r7, #4]
 801a2de:	2b00      	cmp	r3, #0
 801a2e0:	d05b      	beq.n	801a39a <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a2e2:	f3ef 8310 	mrs	r3, PRIMASK
 801a2e6:	60fb      	str	r3, [r7, #12]
  return(result);
 801a2e8:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801a2ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801a2ec:	b672      	cpsid	i
}
 801a2ee:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801a2f0:	4b2d      	ldr	r3, [pc, #180]	@ (801a3a8 <UTIL_TIMER_Stop+0xd8>)
 801a2f2:	681b      	ldr	r3, [r3, #0]
 801a2f4:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801a2f6:	4b2c      	ldr	r3, [pc, #176]	@ (801a3a8 <UTIL_TIMER_Stop+0xd8>)
 801a2f8:	681b      	ldr	r3, [r3, #0]
 801a2fa:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801a2fc:	687b      	ldr	r3, [r7, #4]
 801a2fe:	2201      	movs	r2, #1
 801a300:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801a302:	4b29      	ldr	r3, [pc, #164]	@ (801a3a8 <UTIL_TIMER_Stop+0xd8>)
 801a304:	681b      	ldr	r3, [r3, #0]
 801a306:	2b00      	cmp	r3, #0
 801a308:	d041      	beq.n	801a38e <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801a30a:	687b      	ldr	r3, [r7, #4]
 801a30c:	2200      	movs	r2, #0
 801a30e:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801a310:	4b25      	ldr	r3, [pc, #148]	@ (801a3a8 <UTIL_TIMER_Stop+0xd8>)
 801a312:	681b      	ldr	r3, [r3, #0]
 801a314:	687a      	ldr	r2, [r7, #4]
 801a316:	429a      	cmp	r2, r3
 801a318:	d134      	bne.n	801a384 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801a31a:	4b23      	ldr	r3, [pc, #140]	@ (801a3a8 <UTIL_TIMER_Stop+0xd8>)
 801a31c:	681b      	ldr	r3, [r3, #0]
 801a31e:	2200      	movs	r2, #0
 801a320:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801a322:	4b21      	ldr	r3, [pc, #132]	@ (801a3a8 <UTIL_TIMER_Stop+0xd8>)
 801a324:	681b      	ldr	r3, [r3, #0]
 801a326:	695b      	ldr	r3, [r3, #20]
 801a328:	2b00      	cmp	r3, #0
 801a32a:	d00a      	beq.n	801a342 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801a32c:	4b1e      	ldr	r3, [pc, #120]	@ (801a3a8 <UTIL_TIMER_Stop+0xd8>)
 801a32e:	681b      	ldr	r3, [r3, #0]
 801a330:	695b      	ldr	r3, [r3, #20]
 801a332:	4a1d      	ldr	r2, [pc, #116]	@ (801a3a8 <UTIL_TIMER_Stop+0xd8>)
 801a334:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801a336:	4b1c      	ldr	r3, [pc, #112]	@ (801a3a8 <UTIL_TIMER_Stop+0xd8>)
 801a338:	681b      	ldr	r3, [r3, #0]
 801a33a:	4618      	mov	r0, r3
 801a33c:	f000 f8ac 	bl	801a498 <TimerSetTimeout>
 801a340:	e023      	b.n	801a38a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801a342:	4b1a      	ldr	r3, [pc, #104]	@ (801a3ac <UTIL_TIMER_Stop+0xdc>)
 801a344:	68db      	ldr	r3, [r3, #12]
 801a346:	4798      	blx	r3
            TimerListHead = NULL;
 801a348:	4b17      	ldr	r3, [pc, #92]	@ (801a3a8 <UTIL_TIMER_Stop+0xd8>)
 801a34a:	2200      	movs	r2, #0
 801a34c:	601a      	str	r2, [r3, #0]
 801a34e:	e01c      	b.n	801a38a <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801a350:	697a      	ldr	r2, [r7, #20]
 801a352:	687b      	ldr	r3, [r7, #4]
 801a354:	429a      	cmp	r2, r3
 801a356:	d110      	bne.n	801a37a <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801a358:	697b      	ldr	r3, [r7, #20]
 801a35a:	695b      	ldr	r3, [r3, #20]
 801a35c:	2b00      	cmp	r3, #0
 801a35e:	d006      	beq.n	801a36e <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801a360:	697b      	ldr	r3, [r7, #20]
 801a362:	695b      	ldr	r3, [r3, #20]
 801a364:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801a366:	69bb      	ldr	r3, [r7, #24]
 801a368:	697a      	ldr	r2, [r7, #20]
 801a36a:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801a36c:	e00d      	b.n	801a38a <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801a36e:	2300      	movs	r3, #0
 801a370:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801a372:	69bb      	ldr	r3, [r7, #24]
 801a374:	697a      	ldr	r2, [r7, #20]
 801a376:	615a      	str	r2, [r3, #20]
            break;
 801a378:	e007      	b.n	801a38a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801a37a:	697b      	ldr	r3, [r7, #20]
 801a37c:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801a37e:	697b      	ldr	r3, [r7, #20]
 801a380:	695b      	ldr	r3, [r3, #20]
 801a382:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801a384:	697b      	ldr	r3, [r7, #20]
 801a386:	2b00      	cmp	r3, #0
 801a388:	d1e2      	bne.n	801a350 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801a38a:	2300      	movs	r3, #0
 801a38c:	77fb      	strb	r3, [r7, #31]
 801a38e:	693b      	ldr	r3, [r7, #16]
 801a390:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a392:	68bb      	ldr	r3, [r7, #8]
 801a394:	f383 8810 	msr	PRIMASK, r3
}
 801a398:	e001      	b.n	801a39e <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801a39a:	2301      	movs	r3, #1
 801a39c:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801a39e:	7ffb      	ldrb	r3, [r7, #31]
}
 801a3a0:	4618      	mov	r0, r3
 801a3a2:	3720      	adds	r7, #32
 801a3a4:	46bd      	mov	sp, r7
 801a3a6:	bd80      	pop	{r7, pc}
 801a3a8:	20001a38 	.word	0x20001a38
 801a3ac:	08020b80 	.word	0x08020b80

0801a3b0 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801a3b0:	b580      	push	{r7, lr}
 801a3b2:	b084      	sub	sp, #16
 801a3b4:	af00      	add	r7, sp, #0
 801a3b6:	6078      	str	r0, [r7, #4]
 801a3b8:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801a3ba:	2300      	movs	r3, #0
 801a3bc:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801a3be:	687b      	ldr	r3, [r7, #4]
 801a3c0:	2b00      	cmp	r3, #0
 801a3c2:	d102      	bne.n	801a3ca <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801a3c4:	2301      	movs	r3, #1
 801a3c6:	73fb      	strb	r3, [r7, #15]
 801a3c8:	e014      	b.n	801a3f4 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801a3ca:	4b0d      	ldr	r3, [pc, #52]	@ (801a400 <UTIL_TIMER_SetPeriod+0x50>)
 801a3cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a3ce:	6838      	ldr	r0, [r7, #0]
 801a3d0:	4798      	blx	r3
 801a3d2:	4602      	mov	r2, r0
 801a3d4:	687b      	ldr	r3, [r7, #4]
 801a3d6:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801a3d8:	6878      	ldr	r0, [r7, #4]
 801a3da:	f000 f841 	bl	801a460 <TimerExists>
 801a3de:	4603      	mov	r3, r0
 801a3e0:	2b00      	cmp	r3, #0
 801a3e2:	d007      	beq.n	801a3f4 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801a3e4:	6878      	ldr	r0, [r7, #4]
 801a3e6:	f7ff ff73 	bl	801a2d0 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801a3ea:	6878      	ldr	r0, [r7, #4]
 801a3ec:	f7ff ff02 	bl	801a1f4 <UTIL_TIMER_Start>
 801a3f0:	4603      	mov	r3, r0
 801a3f2:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801a3f4:	7bfb      	ldrb	r3, [r7, #15]
}
 801a3f6:	4618      	mov	r0, r3
 801a3f8:	3710      	adds	r7, #16
 801a3fa:	46bd      	mov	sp, r7
 801a3fc:	bd80      	pop	{r7, pc}
 801a3fe:	bf00      	nop
 801a400:	08020b80 	.word	0x08020b80

0801a404 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801a404:	b580      	push	{r7, lr}
 801a406:	b082      	sub	sp, #8
 801a408:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801a40a:	4b06      	ldr	r3, [pc, #24]	@ (801a424 <UTIL_TIMER_GetCurrentTime+0x20>)
 801a40c:	69db      	ldr	r3, [r3, #28]
 801a40e:	4798      	blx	r3
 801a410:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801a412:	4b04      	ldr	r3, [pc, #16]	@ (801a424 <UTIL_TIMER_GetCurrentTime+0x20>)
 801a414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a416:	6878      	ldr	r0, [r7, #4]
 801a418:	4798      	blx	r3
 801a41a:	4603      	mov	r3, r0
}
 801a41c:	4618      	mov	r0, r3
 801a41e:	3708      	adds	r7, #8
 801a420:	46bd      	mov	sp, r7
 801a422:	bd80      	pop	{r7, pc}
 801a424:	08020b80 	.word	0x08020b80

0801a428 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801a428:	b580      	push	{r7, lr}
 801a42a:	b084      	sub	sp, #16
 801a42c:	af00      	add	r7, sp, #0
 801a42e:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801a430:	4b0a      	ldr	r3, [pc, #40]	@ (801a45c <UTIL_TIMER_GetElapsedTime+0x34>)
 801a432:	69db      	ldr	r3, [r3, #28]
 801a434:	4798      	blx	r3
 801a436:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801a438:	4b08      	ldr	r3, [pc, #32]	@ (801a45c <UTIL_TIMER_GetElapsedTime+0x34>)
 801a43a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a43c:	6878      	ldr	r0, [r7, #4]
 801a43e:	4798      	blx	r3
 801a440:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801a442:	4b06      	ldr	r3, [pc, #24]	@ (801a45c <UTIL_TIMER_GetElapsedTime+0x34>)
 801a444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a446:	68f9      	ldr	r1, [r7, #12]
 801a448:	68ba      	ldr	r2, [r7, #8]
 801a44a:	1a8a      	subs	r2, r1, r2
 801a44c:	4610      	mov	r0, r2
 801a44e:	4798      	blx	r3
 801a450:	4603      	mov	r3, r0
}
 801a452:	4618      	mov	r0, r3
 801a454:	3710      	adds	r7, #16
 801a456:	46bd      	mov	sp, r7
 801a458:	bd80      	pop	{r7, pc}
 801a45a:	bf00      	nop
 801a45c:	08020b80 	.word	0x08020b80

0801a460 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801a460:	b480      	push	{r7}
 801a462:	b085      	sub	sp, #20
 801a464:	af00      	add	r7, sp, #0
 801a466:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801a468:	4b0a      	ldr	r3, [pc, #40]	@ (801a494 <TimerExists+0x34>)
 801a46a:	681b      	ldr	r3, [r3, #0]
 801a46c:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801a46e:	e008      	b.n	801a482 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801a470:	68fa      	ldr	r2, [r7, #12]
 801a472:	687b      	ldr	r3, [r7, #4]
 801a474:	429a      	cmp	r2, r3
 801a476:	d101      	bne.n	801a47c <TimerExists+0x1c>
    {
      return true;
 801a478:	2301      	movs	r3, #1
 801a47a:	e006      	b.n	801a48a <TimerExists+0x2a>
    }
    cur = cur->Next;
 801a47c:	68fb      	ldr	r3, [r7, #12]
 801a47e:	695b      	ldr	r3, [r3, #20]
 801a480:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801a482:	68fb      	ldr	r3, [r7, #12]
 801a484:	2b00      	cmp	r3, #0
 801a486:	d1f3      	bne.n	801a470 <TimerExists+0x10>
  }
  return false;
 801a488:	2300      	movs	r3, #0
}
 801a48a:	4618      	mov	r0, r3
 801a48c:	3714      	adds	r7, #20
 801a48e:	46bd      	mov	sp, r7
 801a490:	bc80      	pop	{r7}
 801a492:	4770      	bx	lr
 801a494:	20001a38 	.word	0x20001a38

0801a498 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801a498:	b590      	push	{r4, r7, lr}
 801a49a:	b085      	sub	sp, #20
 801a49c:	af00      	add	r7, sp, #0
 801a49e:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801a4a0:	4b11      	ldr	r3, [pc, #68]	@ (801a4e8 <TimerSetTimeout+0x50>)
 801a4a2:	6a1b      	ldr	r3, [r3, #32]
 801a4a4:	4798      	blx	r3
 801a4a6:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801a4a8:	687b      	ldr	r3, [r7, #4]
 801a4aa:	2201      	movs	r2, #1
 801a4ac:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801a4ae:	687b      	ldr	r3, [r7, #4]
 801a4b0:	681c      	ldr	r4, [r3, #0]
 801a4b2:	4b0d      	ldr	r3, [pc, #52]	@ (801a4e8 <TimerSetTimeout+0x50>)
 801a4b4:	699b      	ldr	r3, [r3, #24]
 801a4b6:	4798      	blx	r3
 801a4b8:	4602      	mov	r2, r0
 801a4ba:	68fb      	ldr	r3, [r7, #12]
 801a4bc:	4413      	add	r3, r2
 801a4be:	429c      	cmp	r4, r3
 801a4c0:	d207      	bcs.n	801a4d2 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801a4c2:	4b09      	ldr	r3, [pc, #36]	@ (801a4e8 <TimerSetTimeout+0x50>)
 801a4c4:	699b      	ldr	r3, [r3, #24]
 801a4c6:	4798      	blx	r3
 801a4c8:	4602      	mov	r2, r0
 801a4ca:	68fb      	ldr	r3, [r7, #12]
 801a4cc:	441a      	add	r2, r3
 801a4ce:	687b      	ldr	r3, [r7, #4]
 801a4d0:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801a4d2:	4b05      	ldr	r3, [pc, #20]	@ (801a4e8 <TimerSetTimeout+0x50>)
 801a4d4:	689b      	ldr	r3, [r3, #8]
 801a4d6:	687a      	ldr	r2, [r7, #4]
 801a4d8:	6812      	ldr	r2, [r2, #0]
 801a4da:	4610      	mov	r0, r2
 801a4dc:	4798      	blx	r3
}
 801a4de:	bf00      	nop
 801a4e0:	3714      	adds	r7, #20
 801a4e2:	46bd      	mov	sp, r7
 801a4e4:	bd90      	pop	{r4, r7, pc}
 801a4e6:	bf00      	nop
 801a4e8:	08020b80 	.word	0x08020b80

0801a4ec <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801a4ec:	b480      	push	{r7}
 801a4ee:	b085      	sub	sp, #20
 801a4f0:	af00      	add	r7, sp, #0
 801a4f2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801a4f4:	4b14      	ldr	r3, [pc, #80]	@ (801a548 <TimerInsertTimer+0x5c>)
 801a4f6:	681b      	ldr	r3, [r3, #0]
 801a4f8:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801a4fa:	4b13      	ldr	r3, [pc, #76]	@ (801a548 <TimerInsertTimer+0x5c>)
 801a4fc:	681b      	ldr	r3, [r3, #0]
 801a4fe:	695b      	ldr	r3, [r3, #20]
 801a500:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801a502:	e012      	b.n	801a52a <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801a504:	687b      	ldr	r3, [r7, #4]
 801a506:	681a      	ldr	r2, [r3, #0]
 801a508:	68bb      	ldr	r3, [r7, #8]
 801a50a:	681b      	ldr	r3, [r3, #0]
 801a50c:	429a      	cmp	r2, r3
 801a50e:	d905      	bls.n	801a51c <TimerInsertTimer+0x30>
    {
        cur = next;
 801a510:	68bb      	ldr	r3, [r7, #8]
 801a512:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801a514:	68bb      	ldr	r3, [r7, #8]
 801a516:	695b      	ldr	r3, [r3, #20]
 801a518:	60bb      	str	r3, [r7, #8]
 801a51a:	e006      	b.n	801a52a <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801a51c:	68fb      	ldr	r3, [r7, #12]
 801a51e:	687a      	ldr	r2, [r7, #4]
 801a520:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801a522:	687b      	ldr	r3, [r7, #4]
 801a524:	68ba      	ldr	r2, [r7, #8]
 801a526:	615a      	str	r2, [r3, #20]
        return;
 801a528:	e009      	b.n	801a53e <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801a52a:	68fb      	ldr	r3, [r7, #12]
 801a52c:	695b      	ldr	r3, [r3, #20]
 801a52e:	2b00      	cmp	r3, #0
 801a530:	d1e8      	bne.n	801a504 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801a532:	68fb      	ldr	r3, [r7, #12]
 801a534:	687a      	ldr	r2, [r7, #4]
 801a536:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801a538:	687b      	ldr	r3, [r7, #4]
 801a53a:	2200      	movs	r2, #0
 801a53c:	615a      	str	r2, [r3, #20]
}
 801a53e:	3714      	adds	r7, #20
 801a540:	46bd      	mov	sp, r7
 801a542:	bc80      	pop	{r7}
 801a544:	4770      	bx	lr
 801a546:	bf00      	nop
 801a548:	20001a38 	.word	0x20001a38

0801a54c <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801a54c:	b580      	push	{r7, lr}
 801a54e:	b084      	sub	sp, #16
 801a550:	af00      	add	r7, sp, #0
 801a552:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801a554:	4b0b      	ldr	r3, [pc, #44]	@ (801a584 <TimerInsertNewHeadTimer+0x38>)
 801a556:	681b      	ldr	r3, [r3, #0]
 801a558:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801a55a:	68fb      	ldr	r3, [r7, #12]
 801a55c:	2b00      	cmp	r3, #0
 801a55e:	d002      	beq.n	801a566 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801a560:	68fb      	ldr	r3, [r7, #12]
 801a562:	2200      	movs	r2, #0
 801a564:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801a566:	687b      	ldr	r3, [r7, #4]
 801a568:	68fa      	ldr	r2, [r7, #12]
 801a56a:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801a56c:	4a05      	ldr	r2, [pc, #20]	@ (801a584 <TimerInsertNewHeadTimer+0x38>)
 801a56e:	687b      	ldr	r3, [r7, #4]
 801a570:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801a572:	4b04      	ldr	r3, [pc, #16]	@ (801a584 <TimerInsertNewHeadTimer+0x38>)
 801a574:	681b      	ldr	r3, [r3, #0]
 801a576:	4618      	mov	r0, r3
 801a578:	f7ff ff8e 	bl	801a498 <TimerSetTimeout>
}
 801a57c:	bf00      	nop
 801a57e:	3710      	adds	r7, #16
 801a580:	46bd      	mov	sp, r7
 801a582:	bd80      	pop	{r7, pc}
 801a584:	20001a38 	.word	0x20001a38

0801a588 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801a588:	b480      	push	{r7}
 801a58a:	b085      	sub	sp, #20
 801a58c:	af00      	add	r7, sp, #0
 801a58e:	6078      	str	r0, [r7, #4]
  int i = 0;
 801a590:	2300      	movs	r3, #0
 801a592:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801a594:	e00e      	b.n	801a5b4 <ee_skip_atoi+0x2c>
 801a596:	68fa      	ldr	r2, [r7, #12]
 801a598:	4613      	mov	r3, r2
 801a59a:	009b      	lsls	r3, r3, #2
 801a59c:	4413      	add	r3, r2
 801a59e:	005b      	lsls	r3, r3, #1
 801a5a0:	4618      	mov	r0, r3
 801a5a2:	687b      	ldr	r3, [r7, #4]
 801a5a4:	681b      	ldr	r3, [r3, #0]
 801a5a6:	1c59      	adds	r1, r3, #1
 801a5a8:	687a      	ldr	r2, [r7, #4]
 801a5aa:	6011      	str	r1, [r2, #0]
 801a5ac:	781b      	ldrb	r3, [r3, #0]
 801a5ae:	4403      	add	r3, r0
 801a5b0:	3b30      	subs	r3, #48	@ 0x30
 801a5b2:	60fb      	str	r3, [r7, #12]
 801a5b4:	687b      	ldr	r3, [r7, #4]
 801a5b6:	681b      	ldr	r3, [r3, #0]
 801a5b8:	781b      	ldrb	r3, [r3, #0]
 801a5ba:	2b2f      	cmp	r3, #47	@ 0x2f
 801a5bc:	d904      	bls.n	801a5c8 <ee_skip_atoi+0x40>
 801a5be:	687b      	ldr	r3, [r7, #4]
 801a5c0:	681b      	ldr	r3, [r3, #0]
 801a5c2:	781b      	ldrb	r3, [r3, #0]
 801a5c4:	2b39      	cmp	r3, #57	@ 0x39
 801a5c6:	d9e6      	bls.n	801a596 <ee_skip_atoi+0xe>
  return i;
 801a5c8:	68fb      	ldr	r3, [r7, #12]
}
 801a5ca:	4618      	mov	r0, r3
 801a5cc:	3714      	adds	r7, #20
 801a5ce:	46bd      	mov	sp, r7
 801a5d0:	bc80      	pop	{r7}
 801a5d2:	4770      	bx	lr

0801a5d4 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801a5d4:	b480      	push	{r7}
 801a5d6:	b099      	sub	sp, #100	@ 0x64
 801a5d8:	af00      	add	r7, sp, #0
 801a5da:	60f8      	str	r0, [r7, #12]
 801a5dc:	60b9      	str	r1, [r7, #8]
 801a5de:	607a      	str	r2, [r7, #4]
 801a5e0:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801a5e2:	4b71      	ldr	r3, [pc, #452]	@ (801a7a8 <ee_number+0x1d4>)
 801a5e4:	681b      	ldr	r3, [r3, #0]
 801a5e6:	65bb      	str	r3, [r7, #88]	@ 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801a5e8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a5ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a5ee:	2b00      	cmp	r3, #0
 801a5f0:	d002      	beq.n	801a5f8 <ee_number+0x24>
 801a5f2:	4b6e      	ldr	r3, [pc, #440]	@ (801a7ac <ee_number+0x1d8>)
 801a5f4:	681b      	ldr	r3, [r3, #0]
 801a5f6:	65bb      	str	r3, [r7, #88]	@ 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801a5f8:	683b      	ldr	r3, [r7, #0]
 801a5fa:	2b01      	cmp	r3, #1
 801a5fc:	dd02      	ble.n	801a604 <ee_number+0x30>
 801a5fe:	683b      	ldr	r3, [r7, #0]
 801a600:	2b24      	cmp	r3, #36	@ 0x24
 801a602:	dd01      	ble.n	801a608 <ee_number+0x34>
 801a604:	2300      	movs	r3, #0
 801a606:	e0ca      	b.n	801a79e <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801a608:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a60a:	f003 0301 	and.w	r3, r3, #1
 801a60e:	2b00      	cmp	r3, #0
 801a610:	d001      	beq.n	801a616 <ee_number+0x42>
 801a612:	2330      	movs	r3, #48	@ 0x30
 801a614:	e000      	b.n	801a618 <ee_number+0x44>
 801a616:	2320      	movs	r3, #32
 801a618:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  sign = 0;
 801a61c:	2300      	movs	r3, #0
 801a61e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (type & SIGN)
 801a622:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a624:	f003 0302 	and.w	r3, r3, #2
 801a628:	2b00      	cmp	r3, #0
 801a62a:	d00b      	beq.n	801a644 <ee_number+0x70>
  {
    if (num < 0)
 801a62c:	687b      	ldr	r3, [r7, #4]
 801a62e:	2b00      	cmp	r3, #0
 801a630:	da08      	bge.n	801a644 <ee_number+0x70>
    {
      sign = '-';
 801a632:	232d      	movs	r3, #45	@ 0x2d
 801a634:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      num = -num;
 801a638:	687b      	ldr	r3, [r7, #4]
 801a63a:	425b      	negs	r3, r3
 801a63c:	607b      	str	r3, [r7, #4]
      size--;
 801a63e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a640:	3b01      	subs	r3, #1
 801a642:	66bb      	str	r3, [r7, #104]	@ 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801a644:	2300      	movs	r3, #0
 801a646:	657b      	str	r3, [r7, #84]	@ 0x54

  if (num == 0)
 801a648:	687b      	ldr	r3, [r7, #4]
 801a64a:	2b00      	cmp	r3, #0
 801a64c:	d11e      	bne.n	801a68c <ee_number+0xb8>
    tmp[i++] = '0';
 801a64e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a650:	1c5a      	adds	r2, r3, #1
 801a652:	657a      	str	r2, [r7, #84]	@ 0x54
 801a654:	3360      	adds	r3, #96	@ 0x60
 801a656:	443b      	add	r3, r7
 801a658:	2230      	movs	r2, #48	@ 0x30
 801a65a:	f803 2c50 	strb.w	r2, [r3, #-80]
 801a65e:	e018      	b.n	801a692 <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801a660:	687b      	ldr	r3, [r7, #4]
 801a662:	683a      	ldr	r2, [r7, #0]
 801a664:	fbb3 f1f2 	udiv	r1, r3, r2
 801a668:	fb01 f202 	mul.w	r2, r1, r2
 801a66c:	1a9b      	subs	r3, r3, r2
 801a66e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a670:	441a      	add	r2, r3
 801a672:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a674:	1c59      	adds	r1, r3, #1
 801a676:	6579      	str	r1, [r7, #84]	@ 0x54
 801a678:	7812      	ldrb	r2, [r2, #0]
 801a67a:	3360      	adds	r3, #96	@ 0x60
 801a67c:	443b      	add	r3, r7
 801a67e:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801a682:	687a      	ldr	r2, [r7, #4]
 801a684:	683b      	ldr	r3, [r7, #0]
 801a686:	fbb2 f3f3 	udiv	r3, r2, r3
 801a68a:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801a68c:	687b      	ldr	r3, [r7, #4]
 801a68e:	2b00      	cmp	r3, #0
 801a690:	d1e6      	bne.n	801a660 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801a692:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a694:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a696:	429a      	cmp	r2, r3
 801a698:	dd01      	ble.n	801a69e <ee_number+0xca>
 801a69a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a69c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  size -= precision;
 801a69e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801a6a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a6a2:	1ad3      	subs	r3, r2, r3
 801a6a4:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801a6a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a6a8:	f003 0301 	and.w	r3, r3, #1
 801a6ac:	2b00      	cmp	r3, #0
 801a6ae:	d112      	bne.n	801a6d6 <ee_number+0x102>
 801a6b0:	e00c      	b.n	801a6cc <ee_number+0xf8>
 801a6b2:	68fb      	ldr	r3, [r7, #12]
 801a6b4:	1c5a      	adds	r2, r3, #1
 801a6b6:	60fa      	str	r2, [r7, #12]
 801a6b8:	2220      	movs	r2, #32
 801a6ba:	701a      	strb	r2, [r3, #0]
 801a6bc:	68bb      	ldr	r3, [r7, #8]
 801a6be:	3b01      	subs	r3, #1
 801a6c0:	60bb      	str	r3, [r7, #8]
 801a6c2:	68bb      	ldr	r3, [r7, #8]
 801a6c4:	2b00      	cmp	r3, #0
 801a6c6:	d101      	bne.n	801a6cc <ee_number+0xf8>
 801a6c8:	68fb      	ldr	r3, [r7, #12]
 801a6ca:	e068      	b.n	801a79e <ee_number+0x1ca>
 801a6cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a6ce:	1e5a      	subs	r2, r3, #1
 801a6d0:	66ba      	str	r2, [r7, #104]	@ 0x68
 801a6d2:	2b00      	cmp	r3, #0
 801a6d4:	dced      	bgt.n	801a6b2 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801a6d6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801a6da:	2b00      	cmp	r3, #0
 801a6dc:	d01b      	beq.n	801a716 <ee_number+0x142>
 801a6de:	68fb      	ldr	r3, [r7, #12]
 801a6e0:	1c5a      	adds	r2, r3, #1
 801a6e2:	60fa      	str	r2, [r7, #12]
 801a6e4:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 801a6e8:	701a      	strb	r2, [r3, #0]
 801a6ea:	68bb      	ldr	r3, [r7, #8]
 801a6ec:	3b01      	subs	r3, #1
 801a6ee:	60bb      	str	r3, [r7, #8]
 801a6f0:	68bb      	ldr	r3, [r7, #8]
 801a6f2:	2b00      	cmp	r3, #0
 801a6f4:	d10f      	bne.n	801a716 <ee_number+0x142>
 801a6f6:	68fb      	ldr	r3, [r7, #12]
 801a6f8:	e051      	b.n	801a79e <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801a6fa:	68fb      	ldr	r3, [r7, #12]
 801a6fc:	1c5a      	adds	r2, r3, #1
 801a6fe:	60fa      	str	r2, [r7, #12]
 801a700:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 801a704:	701a      	strb	r2, [r3, #0]
 801a706:	68bb      	ldr	r3, [r7, #8]
 801a708:	3b01      	subs	r3, #1
 801a70a:	60bb      	str	r3, [r7, #8]
 801a70c:	68bb      	ldr	r3, [r7, #8]
 801a70e:	2b00      	cmp	r3, #0
 801a710:	d101      	bne.n	801a716 <ee_number+0x142>
 801a712:	68fb      	ldr	r3, [r7, #12]
 801a714:	e043      	b.n	801a79e <ee_number+0x1ca>
 801a716:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a718:	1e5a      	subs	r2, r3, #1
 801a71a:	66ba      	str	r2, [r7, #104]	@ 0x68
 801a71c:	2b00      	cmp	r3, #0
 801a71e:	dcec      	bgt.n	801a6fa <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801a720:	e00c      	b.n	801a73c <ee_number+0x168>
 801a722:	68fb      	ldr	r3, [r7, #12]
 801a724:	1c5a      	adds	r2, r3, #1
 801a726:	60fa      	str	r2, [r7, #12]
 801a728:	2230      	movs	r2, #48	@ 0x30
 801a72a:	701a      	strb	r2, [r3, #0]
 801a72c:	68bb      	ldr	r3, [r7, #8]
 801a72e:	3b01      	subs	r3, #1
 801a730:	60bb      	str	r3, [r7, #8]
 801a732:	68bb      	ldr	r3, [r7, #8]
 801a734:	2b00      	cmp	r3, #0
 801a736:	d101      	bne.n	801a73c <ee_number+0x168>
 801a738:	68fb      	ldr	r3, [r7, #12]
 801a73a:	e030      	b.n	801a79e <ee_number+0x1ca>
 801a73c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a73e:	1e5a      	subs	r2, r3, #1
 801a740:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801a742:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a744:	429a      	cmp	r2, r3
 801a746:	dbec      	blt.n	801a722 <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801a748:	e010      	b.n	801a76c <ee_number+0x198>
 801a74a:	68fb      	ldr	r3, [r7, #12]
 801a74c:	1c5a      	adds	r2, r3, #1
 801a74e:	60fa      	str	r2, [r7, #12]
 801a750:	f107 0110 	add.w	r1, r7, #16
 801a754:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a756:	440a      	add	r2, r1
 801a758:	7812      	ldrb	r2, [r2, #0]
 801a75a:	701a      	strb	r2, [r3, #0]
 801a75c:	68bb      	ldr	r3, [r7, #8]
 801a75e:	3b01      	subs	r3, #1
 801a760:	60bb      	str	r3, [r7, #8]
 801a762:	68bb      	ldr	r3, [r7, #8]
 801a764:	2b00      	cmp	r3, #0
 801a766:	d101      	bne.n	801a76c <ee_number+0x198>
 801a768:	68fb      	ldr	r3, [r7, #12]
 801a76a:	e018      	b.n	801a79e <ee_number+0x1ca>
 801a76c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a76e:	1e5a      	subs	r2, r3, #1
 801a770:	657a      	str	r2, [r7, #84]	@ 0x54
 801a772:	2b00      	cmp	r3, #0
 801a774:	dce9      	bgt.n	801a74a <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801a776:	e00c      	b.n	801a792 <ee_number+0x1be>
 801a778:	68fb      	ldr	r3, [r7, #12]
 801a77a:	1c5a      	adds	r2, r3, #1
 801a77c:	60fa      	str	r2, [r7, #12]
 801a77e:	2220      	movs	r2, #32
 801a780:	701a      	strb	r2, [r3, #0]
 801a782:	68bb      	ldr	r3, [r7, #8]
 801a784:	3b01      	subs	r3, #1
 801a786:	60bb      	str	r3, [r7, #8]
 801a788:	68bb      	ldr	r3, [r7, #8]
 801a78a:	2b00      	cmp	r3, #0
 801a78c:	d101      	bne.n	801a792 <ee_number+0x1be>
 801a78e:	68fb      	ldr	r3, [r7, #12]
 801a790:	e005      	b.n	801a79e <ee_number+0x1ca>
 801a792:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a794:	1e5a      	subs	r2, r3, #1
 801a796:	66ba      	str	r2, [r7, #104]	@ 0x68
 801a798:	2b00      	cmp	r3, #0
 801a79a:	dced      	bgt.n	801a778 <ee_number+0x1a4>

  return str;
 801a79c:	68fb      	ldr	r3, [r7, #12]
}
 801a79e:	4618      	mov	r0, r3
 801a7a0:	3764      	adds	r7, #100	@ 0x64
 801a7a2:	46bd      	mov	sp, r7
 801a7a4:	bc80      	pop	{r7}
 801a7a6:	4770      	bx	lr
 801a7a8:	200000e4 	.word	0x200000e4
 801a7ac:	200000e8 	.word	0x200000e8

0801a7b0 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801a7b0:	b580      	push	{r7, lr}
 801a7b2:	b092      	sub	sp, #72	@ 0x48
 801a7b4:	af04      	add	r7, sp, #16
 801a7b6:	60f8      	str	r0, [r7, #12]
 801a7b8:	60b9      	str	r1, [r7, #8]
 801a7ba:	607a      	str	r2, [r7, #4]
 801a7bc:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801a7be:	68bb      	ldr	r3, [r7, #8]
 801a7c0:	2b00      	cmp	r3, #0
 801a7c2:	dc01      	bgt.n	801a7c8 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801a7c4:	2300      	movs	r3, #0
 801a7c6:	e13e      	b.n	801aa46 <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801a7c8:	68fb      	ldr	r3, [r7, #12]
 801a7ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a7cc:	e128      	b.n	801aa20 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801a7ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a7d0:	68fb      	ldr	r3, [r7, #12]
 801a7d2:	1ad2      	subs	r2, r2, r3
 801a7d4:	68bb      	ldr	r3, [r7, #8]
 801a7d6:	3b01      	subs	r3, #1
 801a7d8:	429a      	cmp	r2, r3
 801a7da:	f280 812e 	bge.w	801aa3a <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801a7de:	687b      	ldr	r3, [r7, #4]
 801a7e0:	781b      	ldrb	r3, [r3, #0]
 801a7e2:	2b25      	cmp	r3, #37	@ 0x25
 801a7e4:	d006      	beq.n	801a7f4 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801a7e6:	687a      	ldr	r2, [r7, #4]
 801a7e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a7ea:	1c59      	adds	r1, r3, #1
 801a7ec:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801a7ee:	7812      	ldrb	r2, [r2, #0]
 801a7f0:	701a      	strb	r2, [r3, #0]
      continue;
 801a7f2:	e112      	b.n	801aa1a <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801a7f4:	2300      	movs	r3, #0
 801a7f6:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801a7f8:	687b      	ldr	r3, [r7, #4]
 801a7fa:	3301      	adds	r3, #1
 801a7fc:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801a7fe:	687b      	ldr	r3, [r7, #4]
 801a800:	781b      	ldrb	r3, [r3, #0]
 801a802:	2b30      	cmp	r3, #48	@ 0x30
 801a804:	d103      	bne.n	801a80e <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801a806:	6a3b      	ldr	r3, [r7, #32]
 801a808:	f043 0301 	orr.w	r3, r3, #1
 801a80c:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801a80e:	f04f 33ff 	mov.w	r3, #4294967295
 801a812:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801a814:	687b      	ldr	r3, [r7, #4]
 801a816:	781b      	ldrb	r3, [r3, #0]
 801a818:	2b2f      	cmp	r3, #47	@ 0x2f
 801a81a:	d908      	bls.n	801a82e <tiny_vsnprintf_like+0x7e>
 801a81c:	687b      	ldr	r3, [r7, #4]
 801a81e:	781b      	ldrb	r3, [r3, #0]
 801a820:	2b39      	cmp	r3, #57	@ 0x39
 801a822:	d804      	bhi.n	801a82e <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801a824:	1d3b      	adds	r3, r7, #4
 801a826:	4618      	mov	r0, r3
 801a828:	f7ff feae 	bl	801a588 <ee_skip_atoi>
 801a82c:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801a82e:	f04f 33ff 	mov.w	r3, #4294967295
 801a832:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801a834:	f04f 33ff 	mov.w	r3, #4294967295
 801a838:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801a83a:	230a      	movs	r3, #10
 801a83c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (*fmt)
 801a83e:	687b      	ldr	r3, [r7, #4]
 801a840:	781b      	ldrb	r3, [r3, #0]
 801a842:	3b58      	subs	r3, #88	@ 0x58
 801a844:	2b20      	cmp	r3, #32
 801a846:	f200 8094 	bhi.w	801a972 <tiny_vsnprintf_like+0x1c2>
 801a84a:	a201      	add	r2, pc, #4	@ (adr r2, 801a850 <tiny_vsnprintf_like+0xa0>)
 801a84c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a850:	0801a95b 	.word	0x0801a95b
 801a854:	0801a973 	.word	0x0801a973
 801a858:	0801a973 	.word	0x0801a973
 801a85c:	0801a973 	.word	0x0801a973
 801a860:	0801a973 	.word	0x0801a973
 801a864:	0801a973 	.word	0x0801a973
 801a868:	0801a973 	.word	0x0801a973
 801a86c:	0801a973 	.word	0x0801a973
 801a870:	0801a973 	.word	0x0801a973
 801a874:	0801a973 	.word	0x0801a973
 801a878:	0801a973 	.word	0x0801a973
 801a87c:	0801a8df 	.word	0x0801a8df
 801a880:	0801a969 	.word	0x0801a969
 801a884:	0801a973 	.word	0x0801a973
 801a888:	0801a973 	.word	0x0801a973
 801a88c:	0801a973 	.word	0x0801a973
 801a890:	0801a973 	.word	0x0801a973
 801a894:	0801a969 	.word	0x0801a969
 801a898:	0801a973 	.word	0x0801a973
 801a89c:	0801a973 	.word	0x0801a973
 801a8a0:	0801a973 	.word	0x0801a973
 801a8a4:	0801a973 	.word	0x0801a973
 801a8a8:	0801a973 	.word	0x0801a973
 801a8ac:	0801a973 	.word	0x0801a973
 801a8b0:	0801a973 	.word	0x0801a973
 801a8b4:	0801a973 	.word	0x0801a973
 801a8b8:	0801a973 	.word	0x0801a973
 801a8bc:	0801a8ff 	.word	0x0801a8ff
 801a8c0:	0801a973 	.word	0x0801a973
 801a8c4:	0801a9bf 	.word	0x0801a9bf
 801a8c8:	0801a973 	.word	0x0801a973
 801a8cc:	0801a973 	.word	0x0801a973
 801a8d0:	0801a963 	.word	0x0801a963
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801a8d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a8d6:	1c5a      	adds	r2, r3, #1
 801a8d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a8da:	2220      	movs	r2, #32
 801a8dc:	701a      	strb	r2, [r3, #0]
 801a8de:	69fb      	ldr	r3, [r7, #28]
 801a8e0:	3b01      	subs	r3, #1
 801a8e2:	61fb      	str	r3, [r7, #28]
 801a8e4:	69fb      	ldr	r3, [r7, #28]
 801a8e6:	2b00      	cmp	r3, #0
 801a8e8:	dcf4      	bgt.n	801a8d4 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801a8ea:	683b      	ldr	r3, [r7, #0]
 801a8ec:	1d1a      	adds	r2, r3, #4
 801a8ee:	603a      	str	r2, [r7, #0]
 801a8f0:	6819      	ldr	r1, [r3, #0]
 801a8f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a8f4:	1c5a      	adds	r2, r3, #1
 801a8f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a8f8:	b2ca      	uxtb	r2, r1
 801a8fa:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801a8fc:	e08d      	b.n	801aa1a <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801a8fe:	683b      	ldr	r3, [r7, #0]
 801a900:	1d1a      	adds	r2, r3, #4
 801a902:	603a      	str	r2, [r7, #0]
 801a904:	681b      	ldr	r3, [r3, #0]
 801a906:	627b      	str	r3, [r7, #36]	@ 0x24
        if (!s) s = "<NULL>";
 801a908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a90a:	2b00      	cmp	r3, #0
 801a90c:	d101      	bne.n	801a912 <tiny_vsnprintf_like+0x162>
 801a90e:	4b50      	ldr	r3, [pc, #320]	@ (801aa50 <tiny_vsnprintf_like+0x2a0>)
 801a910:	627b      	str	r3, [r7, #36]	@ 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801a912:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a914:	f7e5 fc34 	bl	8000180 <strlen>
 801a918:	4603      	mov	r3, r0
 801a91a:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801a91c:	e004      	b.n	801a928 <tiny_vsnprintf_like+0x178>
 801a91e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a920:	1c5a      	adds	r2, r3, #1
 801a922:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a924:	2220      	movs	r2, #32
 801a926:	701a      	strb	r2, [r3, #0]
 801a928:	69fb      	ldr	r3, [r7, #28]
 801a92a:	1e5a      	subs	r2, r3, #1
 801a92c:	61fa      	str	r2, [r7, #28]
 801a92e:	693a      	ldr	r2, [r7, #16]
 801a930:	429a      	cmp	r2, r3
 801a932:	dbf4      	blt.n	801a91e <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801a934:	2300      	movs	r3, #0
 801a936:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a938:	e00a      	b.n	801a950 <tiny_vsnprintf_like+0x1a0>
 801a93a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a93c:	1c53      	adds	r3, r2, #1
 801a93e:	627b      	str	r3, [r7, #36]	@ 0x24
 801a940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a942:	1c59      	adds	r1, r3, #1
 801a944:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801a946:	7812      	ldrb	r2, [r2, #0]
 801a948:	701a      	strb	r2, [r3, #0]
 801a94a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a94c:	3301      	adds	r3, #1
 801a94e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a950:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a952:	693b      	ldr	r3, [r7, #16]
 801a954:	429a      	cmp	r2, r3
 801a956:	dbf0      	blt.n	801a93a <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801a958:	e05f      	b.n	801aa1a <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801a95a:	6a3b      	ldr	r3, [r7, #32]
 801a95c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a960:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801a962:	2310      	movs	r3, #16
 801a964:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 801a966:	e02b      	b.n	801a9c0 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801a968:	6a3b      	ldr	r3, [r7, #32]
 801a96a:	f043 0302 	orr.w	r3, r3, #2
 801a96e:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801a970:	e025      	b.n	801a9be <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801a972:	687b      	ldr	r3, [r7, #4]
 801a974:	781b      	ldrb	r3, [r3, #0]
 801a976:	2b25      	cmp	r3, #37	@ 0x25
 801a978:	d004      	beq.n	801a984 <tiny_vsnprintf_like+0x1d4>
 801a97a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a97c:	1c5a      	adds	r2, r3, #1
 801a97e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a980:	2225      	movs	r2, #37	@ 0x25
 801a982:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801a984:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a986:	68fb      	ldr	r3, [r7, #12]
 801a988:	1ad2      	subs	r2, r2, r3
 801a98a:	68bb      	ldr	r3, [r7, #8]
 801a98c:	3b01      	subs	r3, #1
 801a98e:	429a      	cmp	r2, r3
 801a990:	da16      	bge.n	801a9c0 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801a992:	687b      	ldr	r3, [r7, #4]
 801a994:	781b      	ldrb	r3, [r3, #0]
 801a996:	2b00      	cmp	r3, #0
 801a998:	d006      	beq.n	801a9a8 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801a99a:	687a      	ldr	r2, [r7, #4]
 801a99c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a99e:	1c59      	adds	r1, r3, #1
 801a9a0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801a9a2:	7812      	ldrb	r2, [r2, #0]
 801a9a4:	701a      	strb	r2, [r3, #0]
 801a9a6:	e002      	b.n	801a9ae <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801a9a8:	687b      	ldr	r3, [r7, #4]
 801a9aa:	3b01      	subs	r3, #1
 801a9ac:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801a9ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a9b0:	68fb      	ldr	r3, [r7, #12]
 801a9b2:	1ad2      	subs	r2, r2, r3
 801a9b4:	68bb      	ldr	r3, [r7, #8]
 801a9b6:	3b01      	subs	r3, #1
 801a9b8:	429a      	cmp	r2, r3
 801a9ba:	db2d      	blt.n	801aa18 <tiny_vsnprintf_like+0x268>
 801a9bc:	e000      	b.n	801a9c0 <tiny_vsnprintf_like+0x210>
        break;
 801a9be:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801a9c0:	697b      	ldr	r3, [r7, #20]
 801a9c2:	2b6c      	cmp	r3, #108	@ 0x6c
 801a9c4:	d105      	bne.n	801a9d2 <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801a9c6:	683b      	ldr	r3, [r7, #0]
 801a9c8:	1d1a      	adds	r2, r3, #4
 801a9ca:	603a      	str	r2, [r7, #0]
 801a9cc:	681b      	ldr	r3, [r3, #0]
 801a9ce:	637b      	str	r3, [r7, #52]	@ 0x34
 801a9d0:	e00f      	b.n	801a9f2 <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801a9d2:	6a3b      	ldr	r3, [r7, #32]
 801a9d4:	f003 0302 	and.w	r3, r3, #2
 801a9d8:	2b00      	cmp	r3, #0
 801a9da:	d005      	beq.n	801a9e8 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801a9dc:	683b      	ldr	r3, [r7, #0]
 801a9de:	1d1a      	adds	r2, r3, #4
 801a9e0:	603a      	str	r2, [r7, #0]
 801a9e2:	681b      	ldr	r3, [r3, #0]
 801a9e4:	637b      	str	r3, [r7, #52]	@ 0x34
 801a9e6:	e004      	b.n	801a9f2 <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801a9e8:	683b      	ldr	r3, [r7, #0]
 801a9ea:	1d1a      	adds	r2, r3, #4
 801a9ec:	603a      	str	r2, [r7, #0]
 801a9ee:	681b      	ldr	r3, [r3, #0]
 801a9f0:	637b      	str	r3, [r7, #52]	@ 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801a9f2:	68bb      	ldr	r3, [r7, #8]
 801a9f4:	1e5a      	subs	r2, r3, #1
 801a9f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a9f8:	68fb      	ldr	r3, [r7, #12]
 801a9fa:	1acb      	subs	r3, r1, r3
 801a9fc:	1ad1      	subs	r1, r2, r3
 801a9fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801aa00:	6a3b      	ldr	r3, [r7, #32]
 801aa02:	9302      	str	r3, [sp, #8]
 801aa04:	69bb      	ldr	r3, [r7, #24]
 801aa06:	9301      	str	r3, [sp, #4]
 801aa08:	69fb      	ldr	r3, [r7, #28]
 801aa0a:	9300      	str	r3, [sp, #0]
 801aa0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aa0e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801aa10:	f7ff fde0 	bl	801a5d4 <ee_number>
 801aa14:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801aa16:	e000      	b.n	801aa1a <tiny_vsnprintf_like+0x26a>
        continue;
 801aa18:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801aa1a:	687b      	ldr	r3, [r7, #4]
 801aa1c:	3301      	adds	r3, #1
 801aa1e:	607b      	str	r3, [r7, #4]
 801aa20:	687b      	ldr	r3, [r7, #4]
 801aa22:	781b      	ldrb	r3, [r3, #0]
 801aa24:	2b00      	cmp	r3, #0
 801aa26:	f47f aed2 	bne.w	801a7ce <tiny_vsnprintf_like+0x1e>
 801aa2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801aa2c:	68fb      	ldr	r3, [r7, #12]
 801aa2e:	1ad2      	subs	r2, r2, r3
 801aa30:	68bb      	ldr	r3, [r7, #8]
 801aa32:	3b01      	subs	r3, #1
 801aa34:	429a      	cmp	r2, r3
 801aa36:	f6bf aeca 	bge.w	801a7ce <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801aa3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801aa3c:	2200      	movs	r2, #0
 801aa3e:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801aa40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801aa42:	68fb      	ldr	r3, [r7, #12]
 801aa44:	1ad3      	subs	r3, r2, r3
}
 801aa46:	4618      	mov	r0, r3
 801aa48:	3738      	adds	r7, #56	@ 0x38
 801aa4a:	46bd      	mov	sp, r7
 801aa4c:	bd80      	pop	{r7, pc}
 801aa4e:	bf00      	nop
 801aa50:	08020a30 	.word	0x08020a30

0801aa54 <ai_log_err>:

static ai_buffer* ai_input;
static ai_buffer* ai_output;

static void ai_log_err(const ai_error err, const char *fct)
{
 801aa54:	b580      	push	{r7, lr}
 801aa56:	b082      	sub	sp, #8
 801aa58:	af00      	add	r7, sp, #0
 801aa5a:	6078      	str	r0, [r7, #4]
 801aa5c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 801aa5e:	683b      	ldr	r3, [r7, #0]
 801aa60:	2b00      	cmp	r3, #0
 801aa62:	d009      	beq.n	801aa78 <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 801aa64:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 801aa66:	461a      	mov	r2, r3
        err.type, err.code);
 801aa68:	687b      	ldr	r3, [r7, #4]
 801aa6a:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 801aa6e:	6839      	ldr	r1, [r7, #0]
 801aa70:	4807      	ldr	r0, [pc, #28]	@ (801aa90 <ai_log_err+0x3c>)
 801aa72:	f004 fdef 	bl	801f654 <iprintf>
 801aa76:	e009      	b.n	801aa8c <ai_log_err+0x38>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 801aa78:	793b      	ldrb	r3, [r7, #4]
 801aa7a:	4619      	mov	r1, r3
 801aa7c:	687b      	ldr	r3, [r7, #4]
 801aa7e:	f3c3 2317 	ubfx	r3, r3, #8, #24
 801aa82:	461a      	mov	r2, r3
 801aa84:	4803      	ldr	r0, [pc, #12]	@ (801aa94 <ai_log_err+0x40>)
 801aa86:	f004 fde5 	bl	801f654 <iprintf>

  do {} while (1);
 801aa8a:	bf00      	nop
 801aa8c:	bf00      	nop
 801aa8e:	e7fd      	b.n	801aa8c <ai_log_err+0x38>
 801aa90:	08020a38 	.word	0x08020a38
 801aa94:	08020a6c 	.word	0x08020a6c

0801aa98 <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle *act_addr)
{
 801aa98:	b580      	push	{r7, lr}
 801aa9a:	b086      	sub	sp, #24
 801aa9c:	af00      	add	r7, sp, #0
 801aa9e:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* Create and initialize an instance of the model */
  err = ai_network_appltemp_0506_create_and_init(&network_appltemp_0506, act_addr, NULL);
 801aaa0:	2200      	movs	r2, #0
 801aaa2:	6879      	ldr	r1, [r7, #4]
 801aaa4:	4828      	ldr	r0, [pc, #160]	@ (801ab48 <ai_boostrap+0xb0>)
 801aaa6:	f000 f9e7 	bl	801ae78 <ai_network_appltemp_0506_create_and_init>
 801aaaa:	4603      	mov	r3, r0
 801aaac:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 801aaae:	7b3b      	ldrb	r3, [r7, #12]
 801aab0:	2b00      	cmp	r3, #0
 801aab2:	d006      	beq.n	801aac2 <ai_boostrap+0x2a>
    ai_log_err(err, "ai_network_appltemp_0506_create_and_init");
 801aab4:	4925      	ldr	r1, [pc, #148]	@ (801ab4c <ai_boostrap+0xb4>)
 801aab6:	68f8      	ldr	r0, [r7, #12]
 801aab8:	f7ff ffcc 	bl	801aa54 <ai_log_err>
    return -1;
 801aabc:	f04f 33ff 	mov.w	r3, #4294967295
 801aac0:	e03e      	b.n	801ab40 <ai_boostrap+0xa8>
  }

  ai_input = ai_network_appltemp_0506_inputs_get(network_appltemp_0506, NULL);
 801aac2:	4b21      	ldr	r3, [pc, #132]	@ (801ab48 <ai_boostrap+0xb0>)
 801aac4:	681b      	ldr	r3, [r3, #0]
 801aac6:	2100      	movs	r1, #0
 801aac8:	4618      	mov	r0, r3
 801aaca:	f000 fa53 	bl	801af74 <ai_network_appltemp_0506_inputs_get>
 801aace:	4603      	mov	r3, r0
 801aad0:	4a1f      	ldr	r2, [pc, #124]	@ (801ab50 <ai_boostrap+0xb8>)
 801aad2:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_appltemp_0506_outputs_get(network_appltemp_0506, NULL);
 801aad4:	4b1c      	ldr	r3, [pc, #112]	@ (801ab48 <ai_boostrap+0xb0>)
 801aad6:	681b      	ldr	r3, [r3, #0]
 801aad8:	2100      	movs	r1, #0
 801aada:	4618      	mov	r0, r3
 801aadc:	f000 fa64 	bl	801afa8 <ai_network_appltemp_0506_outputs_get>
 801aae0:	4603      	mov	r3, r0
 801aae2:	4a1c      	ldr	r2, [pc, #112]	@ (801ab54 <ai_boostrap+0xbc>)
 801aae4:	6013      	str	r3, [r2, #0]

#if defined(AI_NETWORK_APPLTEMP_0506_INPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-inputs" option is used, memory buffer can be
   *  used from the activations buffer. This is not mandatory.
   */
  for (int idx=0; idx < AI_NETWORK_APPLTEMP_0506_IN_NUM; idx++) {
 801aae6:	2300      	movs	r3, #0
 801aae8:	617b      	str	r3, [r7, #20]
 801aaea:	e00f      	b.n	801ab0c <ai_boostrap+0x74>
	data_ins[idx] = ai_input[idx].data;
 801aaec:	4b18      	ldr	r3, [pc, #96]	@ (801ab50 <ai_boostrap+0xb8>)
 801aaee:	6819      	ldr	r1, [r3, #0]
 801aaf0:	697a      	ldr	r2, [r7, #20]
 801aaf2:	4613      	mov	r3, r2
 801aaf4:	00db      	lsls	r3, r3, #3
 801aaf6:	1a9b      	subs	r3, r3, r2
 801aaf8:	009b      	lsls	r3, r3, #2
 801aafa:	440b      	add	r3, r1
 801aafc:	685a      	ldr	r2, [r3, #4]
 801aafe:	4916      	ldr	r1, [pc, #88]	@ (801ab58 <ai_boostrap+0xc0>)
 801ab00:	697b      	ldr	r3, [r7, #20]
 801ab02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_NETWORK_APPLTEMP_0506_IN_NUM; idx++) {
 801ab06:	697b      	ldr	r3, [r7, #20]
 801ab08:	3301      	adds	r3, #1
 801ab0a:	617b      	str	r3, [r7, #20]
 801ab0c:	697b      	ldr	r3, [r7, #20]
 801ab0e:	2b00      	cmp	r3, #0
 801ab10:	ddec      	ble.n	801aaec <ai_boostrap+0x54>

#if defined(AI_NETWORK_APPLTEMP_0506_OUTPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-outputs" option is used, memory buffer can be
   *  used from the activations buffer. This is no mandatory.
   */
  for (int idx=0; idx < AI_NETWORK_APPLTEMP_0506_OUT_NUM; idx++) {
 801ab12:	2300      	movs	r3, #0
 801ab14:	613b      	str	r3, [r7, #16]
 801ab16:	e00f      	b.n	801ab38 <ai_boostrap+0xa0>
	data_outs[idx] = ai_output[idx].data;
 801ab18:	4b0e      	ldr	r3, [pc, #56]	@ (801ab54 <ai_boostrap+0xbc>)
 801ab1a:	6819      	ldr	r1, [r3, #0]
 801ab1c:	693a      	ldr	r2, [r7, #16]
 801ab1e:	4613      	mov	r3, r2
 801ab20:	00db      	lsls	r3, r3, #3
 801ab22:	1a9b      	subs	r3, r3, r2
 801ab24:	009b      	lsls	r3, r3, #2
 801ab26:	440b      	add	r3, r1
 801ab28:	685a      	ldr	r2, [r3, #4]
 801ab2a:	490c      	ldr	r1, [pc, #48]	@ (801ab5c <ai_boostrap+0xc4>)
 801ab2c:	693b      	ldr	r3, [r7, #16]
 801ab2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_NETWORK_APPLTEMP_0506_OUT_NUM; idx++) {
 801ab32:	693b      	ldr	r3, [r7, #16]
 801ab34:	3301      	adds	r3, #1
 801ab36:	613b      	str	r3, [r7, #16]
 801ab38:	693b      	ldr	r3, [r7, #16]
 801ab3a:	2b00      	cmp	r3, #0
 801ab3c:	ddec      	ble.n	801ab18 <ai_boostrap+0x80>
  for (int idx=0; idx < AI_NETWORK_APPLTEMP_0506_OUT_NUM; idx++) {
	ai_output[idx].data = data_outs[idx];
  }
#endif

  return 0;
 801ab3e:	2300      	movs	r3, #0
}
 801ab40:	4618      	mov	r0, r3
 801ab42:	3718      	adds	r7, #24
 801ab44:	46bd      	mov	sp, r7
 801ab46:	bd80      	pop	{r7, pc}
 801ab48:	20001a54 	.word	0x20001a54
 801ab4c:	08020a9c 	.word	0x08020a9c
 801ab50:	20001a58 	.word	0x20001a58
 801ab54:	20001a5c 	.word	0x20001a5c
 801ab58:	20001a4c 	.word	0x20001a4c
 801ab5c:	20001a50 	.word	0x20001a50

0801ab60 <ai_run>:

static int ai_run(void)
{
 801ab60:	b580      	push	{r7, lr}
 801ab62:	b082      	sub	sp, #8
 801ab64:	af00      	add	r7, sp, #0
  ai_i32 batch;

  batch = ai_network_appltemp_0506_run(network_appltemp_0506, ai_input, ai_output);
 801ab66:	4b0f      	ldr	r3, [pc, #60]	@ (801aba4 <ai_run+0x44>)
 801ab68:	681b      	ldr	r3, [r3, #0]
 801ab6a:	4a0f      	ldr	r2, [pc, #60]	@ (801aba8 <ai_run+0x48>)
 801ab6c:	6811      	ldr	r1, [r2, #0]
 801ab6e:	4a0f      	ldr	r2, [pc, #60]	@ (801abac <ai_run+0x4c>)
 801ab70:	6812      	ldr	r2, [r2, #0]
 801ab72:	4618      	mov	r0, r3
 801ab74:	f000 fa6e 	bl	801b054 <ai_network_appltemp_0506_run>
 801ab78:	6078      	str	r0, [r7, #4]
  if (batch != 1) {
 801ab7a:	687b      	ldr	r3, [r7, #4]
 801ab7c:	2b01      	cmp	r3, #1
 801ab7e:	d00c      	beq.n	801ab9a <ai_run+0x3a>
    ai_log_err(ai_network_appltemp_0506_get_error(network_appltemp_0506),
 801ab80:	4b08      	ldr	r3, [pc, #32]	@ (801aba4 <ai_run+0x44>)
 801ab82:	681b      	ldr	r3, [r3, #0]
 801ab84:	4618      	mov	r0, r3
 801ab86:	f000 f955 	bl	801ae34 <ai_network_appltemp_0506_get_error>
 801ab8a:	4603      	mov	r3, r0
 801ab8c:	4908      	ldr	r1, [pc, #32]	@ (801abb0 <ai_run+0x50>)
 801ab8e:	4618      	mov	r0, r3
 801ab90:	f7ff ff60 	bl	801aa54 <ai_log_err>
        "ai_network_appltemp_0506_run");
    return -1;
 801ab94:	f04f 33ff 	mov.w	r3, #4294967295
 801ab98:	e000      	b.n	801ab9c <ai_run+0x3c>
  }

  return 0;
 801ab9a:	2300      	movs	r3, #0
}
 801ab9c:	4618      	mov	r0, r3
 801ab9e:	3708      	adds	r7, #8
 801aba0:	46bd      	mov	sp, r7
 801aba2:	bd80      	pop	{r7, pc}
 801aba4:	20001a54 	.word	0x20001a54
 801aba8:	20001a58 	.word	0x20001a58
 801abac:	20001a5c 	.word	0x20001a5c
 801abb0:	08020ac8 	.word	0x08020ac8

0801abb4 <acquire_and_process_data>:

/* USER CODE BEGIN 2 */
int acquire_and_process_data(ai_i8* data[])
{
 801abb4:	b480      	push	{r7}
 801abb6:	b083      	sub	sp, #12
 801abb8:	af00      	add	r7, sp, #0
 801abba:	6078      	str	r0, [r7, #4]

  */
	extern float my_SoilSensor;
	extern float my_SHT40_Temp_Float;
	extern float my_SHT40_Humid_Float;
	data_sensors[0] = my_SoilSensor;					// Soil Moisture Sensor
 801abbc:	4b0a      	ldr	r3, [pc, #40]	@ (801abe8 <acquire_and_process_data+0x34>)
 801abbe:	681b      	ldr	r3, [r3, #0]
 801abc0:	4a0a      	ldr	r2, [pc, #40]	@ (801abec <acquire_and_process_data+0x38>)
 801abc2:	6013      	str	r3, [r2, #0]
	data_sensors[1] = my_SHT40_Temp_Float;				// Temp Sensor
 801abc4:	4b0a      	ldr	r3, [pc, #40]	@ (801abf0 <acquire_and_process_data+0x3c>)
 801abc6:	681b      	ldr	r3, [r3, #0]
 801abc8:	4a08      	ldr	r2, [pc, #32]	@ (801abec <acquire_and_process_data+0x38>)
 801abca:	6053      	str	r3, [r2, #4]
	data_sensors[2] = my_SHT40_Humid_Float;				// Hum Sensor
 801abcc:	4b09      	ldr	r3, [pc, #36]	@ (801abf4 <acquire_and_process_data+0x40>)
 801abce:	681b      	ldr	r3, [r3, #0]
 801abd0:	4a06      	ldr	r2, [pc, #24]	@ (801abec <acquire_and_process_data+0x38>)
 801abd2:	6093      	str	r3, [r2, #8]
	ai_input[0].data = AI_HANDLE_PTR(data_sensors);
 801abd4:	4b08      	ldr	r3, [pc, #32]	@ (801abf8 <acquire_and_process_data+0x44>)
 801abd6:	681b      	ldr	r3, [r3, #0]
 801abd8:	4a04      	ldr	r2, [pc, #16]	@ (801abec <acquire_and_process_data+0x38>)
 801abda:	605a      	str	r2, [r3, #4]
  return 0;
 801abdc:	2300      	movs	r3, #0
}
 801abde:	4618      	mov	r0, r3
 801abe0:	370c      	adds	r7, #12
 801abe2:	46bd      	mov	sp, r7
 801abe4:	bc80      	pop	{r7}
 801abe6:	4770      	bx	lr
 801abe8:	20001bec 	.word	0x20001bec
 801abec:	20001a3c 	.word	0x20001a3c
 801abf0:	20001bf0 	.word	0x20001bf0
 801abf4:	20001bf4 	.word	0x20001bf4
 801abf8:	20001a58 	.word	0x20001a58

0801abfc <post_process>:

int post_process(ai_i8* data[])
{
 801abfc:	b580      	push	{r7, lr}
 801abfe:	b084      	sub	sp, #16
 801ac00:	af00      	add	r7, sp, #0
 801ac02:	6078      	str	r0, [r7, #4]
  {
      data[idx] = ....
  }

  */
	float result = *((float*)data[0]);
 801ac04:	687b      	ldr	r3, [r7, #4]
 801ac06:	681b      	ldr	r3, [r3, #0]
 801ac08:	681b      	ldr	r3, [r3, #0]
 801ac0a:	60fb      	str	r3, [r7, #12]
		if (result > 0.5f)
 801ac0c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 801ac10:	68f8      	ldr	r0, [r7, #12]
 801ac12:	f7e6 f843 	bl	8000c9c <__aeabi_fcmpgt>
 801ac16:	4603      	mov	r3, r0
 801ac18:	2b00      	cmp	r3, #0
 801ac1a:	d003      	beq.n	801ac24 <post_process+0x28>
		{
			result_nn = 1;
 801ac1c:	4b05      	ldr	r3, [pc, #20]	@ (801ac34 <post_process+0x38>)
 801ac1e:	2201      	movs	r2, #1
 801ac20:	701a      	strb	r2, [r3, #0]
 801ac22:	e002      	b.n	801ac2a <post_process+0x2e>
		}
		else
		{
			result_nn = 0;
 801ac24:	4b03      	ldr	r3, [pc, #12]	@ (801ac34 <post_process+0x38>)
 801ac26:	2200      	movs	r2, #0
 801ac28:	701a      	strb	r2, [r3, #0]
		}
	  return 0;
 801ac2a:	2300      	movs	r3, #0
}
 801ac2c:	4618      	mov	r0, r3
 801ac2e:	3710      	adds	r7, #16
 801ac30:	46bd      	mov	sp, r7
 801ac32:	bd80      	pop	{r7, pc}
 801ac34:	20001a48 	.word	0x20001a48

0801ac38 <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 801ac38:	b580      	push	{r7, lr}
 801ac3a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 801ac3c:	4803      	ldr	r0, [pc, #12]	@ (801ac4c <MX_X_CUBE_AI_Init+0x14>)
 801ac3e:	f004 fd71 	bl	801f724 <puts>

  ai_boostrap(data_activations0);
 801ac42:	4803      	ldr	r0, [pc, #12]	@ (801ac50 <MX_X_CUBE_AI_Init+0x18>)
 801ac44:	f7ff ff28 	bl	801aa98 <ai_boostrap>
    /* USER CODE END 5 */
}
 801ac48:	bf00      	nop
 801ac4a:	bd80      	pop	{r7, pc}
 801ac4c:	08020ae8 	.word	0x08020ae8
 801ac50:	200000ec 	.word	0x200000ec

0801ac54 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 801ac54:	b580      	push	{r7, lr}
 801ac56:	b082      	sub	sp, #8
 801ac58:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 6 */
  int res = -1;
 801ac5a:	f04f 33ff 	mov.w	r3, #4294967295
 801ac5e:	607b      	str	r3, [r7, #4]

  printf("TEMPLATE - run - main loop\r\n");
 801ac60:	4814      	ldr	r0, [pc, #80]	@ (801acb4 <MX_X_CUBE_AI_Process+0x60>)
 801ac62:	f004 fd5f 	bl	801f724 <puts>

  if (network_appltemp_0506) {
 801ac66:	4b14      	ldr	r3, [pc, #80]	@ (801acb8 <MX_X_CUBE_AI_Process+0x64>)
 801ac68:	681b      	ldr	r3, [r3, #0]
 801ac6a:	2b00      	cmp	r3, #0
 801ac6c:	d010      	beq.n	801ac90 <MX_X_CUBE_AI_Process+0x3c>

    //do {
      /* 1 - acquire and pre-process input data */
      res = acquire_and_process_data(data_ins);
 801ac6e:	4813      	ldr	r0, [pc, #76]	@ (801acbc <MX_X_CUBE_AI_Process+0x68>)
 801ac70:	f7ff ffa0 	bl	801abb4 <acquire_and_process_data>
 801ac74:	6078      	str	r0, [r7, #4]
      /* 2 - process the data - call inference engine */
      if (res == 0)
 801ac76:	687b      	ldr	r3, [r7, #4]
 801ac78:	2b00      	cmp	r3, #0
 801ac7a:	d102      	bne.n	801ac82 <MX_X_CUBE_AI_Process+0x2e>
        res = ai_run();
 801ac7c:	f7ff ff70 	bl	801ab60 <ai_run>
 801ac80:	6078      	str	r0, [r7, #4]
      /* 3- post-process the predictions */
      if (res == 0)
 801ac82:	687b      	ldr	r3, [r7, #4]
 801ac84:	2b00      	cmp	r3, #0
 801ac86:	d103      	bne.n	801ac90 <MX_X_CUBE_AI_Process+0x3c>
        res = post_process(data_outs);
 801ac88:	480d      	ldr	r0, [pc, #52]	@ (801acc0 <MX_X_CUBE_AI_Process+0x6c>)
 801ac8a:	f7ff ffb7 	bl	801abfc <post_process>
 801ac8e:	6078      	str	r0, [r7, #4]
    //} while (res==0);
  }

  if (res) {
 801ac90:	687b      	ldr	r3, [r7, #4]
 801ac92:	2b00      	cmp	r3, #0
 801ac94:	d00a      	beq.n	801acac <MX_X_CUBE_AI_Process+0x58>
    ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
 801ac96:	2311      	movs	r3, #17
 801ac98:	703b      	strb	r3, [r7, #0]
 801ac9a:	683b      	ldr	r3, [r7, #0]
 801ac9c:	2210      	movs	r2, #16
 801ac9e:	f362 231f 	bfi	r3, r2, #8, #24
 801aca2:	603b      	str	r3, [r7, #0]
    ai_log_err(err, "Process has FAILED");
 801aca4:	4907      	ldr	r1, [pc, #28]	@ (801acc4 <MX_X_CUBE_AI_Process+0x70>)
 801aca6:	6838      	ldr	r0, [r7, #0]
 801aca8:	f7ff fed4 	bl	801aa54 <ai_log_err>
  }
    /* USER CODE END 6 */
}
 801acac:	bf00      	nop
 801acae:	3708      	adds	r7, #8
 801acb0:	46bd      	mov	sp, r7
 801acb2:	bd80      	pop	{r7, pc}
 801acb4:	08020b08 	.word	0x08020b08
 801acb8:	20001a54 	.word	0x20001a54
 801acbc:	20001a4c 	.word	0x20001a4c
 801acc0:	20001a50 	.word	0x20001a50
 801acc4:	08020b24 	.word	0x08020b24

0801acc8 <network_appltemp_0506_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_appltemp_0506_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 801acc8:	b580      	push	{r7, lr}
 801acca:	b082      	sub	sp, #8
 801accc:	af00      	add	r7, sp, #0
 801acce:	6078      	str	r0, [r7, #4]
 801acd0:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_appltemp_0506_activations_map, 1, params)) {
 801acd2:	683a      	ldr	r2, [r7, #0]
 801acd4:	2101      	movs	r1, #1
 801acd6:	4820      	ldr	r0, [pc, #128]	@ (801ad58 <network_appltemp_0506_configure_activations+0x90>)
 801acd8:	f002 fe1e 	bl	801d918 <ai_platform_get_activations_map>
 801acdc:	4603      	mov	r3, r0
 801acde:	2b00      	cmp	r3, #0
 801ace0:	d02f      	beq.n	801ad42 <network_appltemp_0506_configure_activations+0x7a>
    /* Updating activations (byte) offsets */
    
    input_0_output_array.data = AI_PTR(g_network_appltemp_0506_activations_map[0] + 0);
 801ace2:	4b1d      	ldr	r3, [pc, #116]	@ (801ad58 <network_appltemp_0506_configure_activations+0x90>)
 801ace4:	681b      	ldr	r3, [r3, #0]
 801ace6:	4a1d      	ldr	r2, [pc, #116]	@ (801ad5c <network_appltemp_0506_configure_activations+0x94>)
 801ace8:	6093      	str	r3, [r2, #8]
    input_0_output_array.data_start = AI_PTR(g_network_appltemp_0506_activations_map[0] + 0);
 801acea:	4b1b      	ldr	r3, [pc, #108]	@ (801ad58 <network_appltemp_0506_configure_activations+0x90>)
 801acec:	681b      	ldr	r3, [r3, #0]
 801acee:	4a1b      	ldr	r2, [pc, #108]	@ (801ad5c <network_appltemp_0506_configure_activations+0x94>)
 801acf0:	60d3      	str	r3, [r2, #12]
    dense_dense_output_array.data = AI_PTR(g_network_appltemp_0506_activations_map[0] + 12);
 801acf2:	4b19      	ldr	r3, [pc, #100]	@ (801ad58 <network_appltemp_0506_configure_activations+0x90>)
 801acf4:	681b      	ldr	r3, [r3, #0]
 801acf6:	330c      	adds	r3, #12
 801acf8:	4a19      	ldr	r2, [pc, #100]	@ (801ad60 <network_appltemp_0506_configure_activations+0x98>)
 801acfa:	6093      	str	r3, [r2, #8]
    dense_dense_output_array.data_start = AI_PTR(g_network_appltemp_0506_activations_map[0] + 12);
 801acfc:	4b16      	ldr	r3, [pc, #88]	@ (801ad58 <network_appltemp_0506_configure_activations+0x90>)
 801acfe:	681b      	ldr	r3, [r3, #0]
 801ad00:	330c      	adds	r3, #12
 801ad02:	4a17      	ldr	r2, [pc, #92]	@ (801ad60 <network_appltemp_0506_configure_activations+0x98>)
 801ad04:	60d3      	str	r3, [r2, #12]
    dense_output_array.data = AI_PTR(g_network_appltemp_0506_activations_map[0] + 12);
 801ad06:	4b14      	ldr	r3, [pc, #80]	@ (801ad58 <network_appltemp_0506_configure_activations+0x90>)
 801ad08:	681b      	ldr	r3, [r3, #0]
 801ad0a:	330c      	adds	r3, #12
 801ad0c:	4a15      	ldr	r2, [pc, #84]	@ (801ad64 <network_appltemp_0506_configure_activations+0x9c>)
 801ad0e:	6093      	str	r3, [r2, #8]
    dense_output_array.data_start = AI_PTR(g_network_appltemp_0506_activations_map[0] + 12);
 801ad10:	4b11      	ldr	r3, [pc, #68]	@ (801ad58 <network_appltemp_0506_configure_activations+0x90>)
 801ad12:	681b      	ldr	r3, [r3, #0]
 801ad14:	330c      	adds	r3, #12
 801ad16:	4a13      	ldr	r2, [pc, #76]	@ (801ad64 <network_appltemp_0506_configure_activations+0x9c>)
 801ad18:	60d3      	str	r3, [r2, #12]
    dense_1_dense_output_array.data = AI_PTR(g_network_appltemp_0506_activations_map[0] + 0);
 801ad1a:	4b0f      	ldr	r3, [pc, #60]	@ (801ad58 <network_appltemp_0506_configure_activations+0x90>)
 801ad1c:	681b      	ldr	r3, [r3, #0]
 801ad1e:	4a12      	ldr	r2, [pc, #72]	@ (801ad68 <network_appltemp_0506_configure_activations+0xa0>)
 801ad20:	6093      	str	r3, [r2, #8]
    dense_1_dense_output_array.data_start = AI_PTR(g_network_appltemp_0506_activations_map[0] + 0);
 801ad22:	4b0d      	ldr	r3, [pc, #52]	@ (801ad58 <network_appltemp_0506_configure_activations+0x90>)
 801ad24:	681b      	ldr	r3, [r3, #0]
 801ad26:	4a10      	ldr	r2, [pc, #64]	@ (801ad68 <network_appltemp_0506_configure_activations+0xa0>)
 801ad28:	60d3      	str	r3, [r2, #12]
    dense_1_output_array.data = AI_PTR(g_network_appltemp_0506_activations_map[0] + 4);
 801ad2a:	4b0b      	ldr	r3, [pc, #44]	@ (801ad58 <network_appltemp_0506_configure_activations+0x90>)
 801ad2c:	681b      	ldr	r3, [r3, #0]
 801ad2e:	3304      	adds	r3, #4
 801ad30:	4a0e      	ldr	r2, [pc, #56]	@ (801ad6c <network_appltemp_0506_configure_activations+0xa4>)
 801ad32:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(g_network_appltemp_0506_activations_map[0] + 4);
 801ad34:	4b08      	ldr	r3, [pc, #32]	@ (801ad58 <network_appltemp_0506_configure_activations+0x90>)
 801ad36:	681b      	ldr	r3, [r3, #0]
 801ad38:	3304      	adds	r3, #4
 801ad3a:	4a0c      	ldr	r2, [pc, #48]	@ (801ad6c <network_appltemp_0506_configure_activations+0xa4>)
 801ad3c:	60d3      	str	r3, [r2, #12]
    return true;
 801ad3e:	2301      	movs	r3, #1
 801ad40:	e005      	b.n	801ad4e <network_appltemp_0506_configure_activations+0x86>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 801ad42:	2213      	movs	r2, #19
 801ad44:	2130      	movs	r1, #48	@ 0x30
 801ad46:	6878      	ldr	r0, [r7, #4]
 801ad48:	f002 fe66 	bl	801da18 <ai_platform_network_set_error>
  return false;
 801ad4c:	2300      	movs	r3, #0
}
 801ad4e:	4618      	mov	r0, r3
 801ad50:	3708      	adds	r7, #8
 801ad52:	46bd      	mov	sp, r7
 801ad54:	bd80      	pop	{r7, pc}
 801ad56:	bf00      	nop
 801ad58:	20001a60 	.word	0x20001a60
 801ad5c:	200000f0 	.word	0x200000f0
 801ad60:	20000100 	.word	0x20000100
 801ad64:	20000110 	.word	0x20000110
 801ad68:	20000120 	.word	0x20000120
 801ad6c:	20000130 	.word	0x20000130

0801ad70 <network_appltemp_0506_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_appltemp_0506_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 801ad70:	b580      	push	{r7, lr}
 801ad72:	b082      	sub	sp, #8
 801ad74:	af00      	add	r7, sp, #0
 801ad76:	6078      	str	r0, [r7, #4]
 801ad78:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_appltemp_0506_weights_map, 1, params)) {
 801ad7a:	683a      	ldr	r2, [r7, #0]
 801ad7c:	2101      	movs	r1, #1
 801ad7e:	4828      	ldr	r0, [pc, #160]	@ (801ae20 <network_appltemp_0506_configure_weights+0xb0>)
 801ad80:	f002 fd78 	bl	801d874 <ai_platform_get_weights_map>
 801ad84:	4603      	mov	r3, r0
 801ad86:	2b00      	cmp	r3, #0
 801ad88:	d03f      	beq.n	801ae0a <network_appltemp_0506_configure_weights+0x9a>
    /* Updating weights (byte) offsets */
    
    dense_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 801ad8a:	4b26      	ldr	r3, [pc, #152]	@ (801ae24 <network_appltemp_0506_configure_weights+0xb4>)
 801ad8c:	681b      	ldr	r3, [r3, #0]
 801ad8e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801ad92:	4a24      	ldr	r2, [pc, #144]	@ (801ae24 <network_appltemp_0506_configure_weights+0xb4>)
 801ad94:	6013      	str	r3, [r2, #0]
    dense_dense_weights_array.data = AI_PTR(g_network_appltemp_0506_weights_map[0] + 0);
 801ad96:	4b22      	ldr	r3, [pc, #136]	@ (801ae20 <network_appltemp_0506_configure_weights+0xb0>)
 801ad98:	681b      	ldr	r3, [r3, #0]
 801ad9a:	4a22      	ldr	r2, [pc, #136]	@ (801ae24 <network_appltemp_0506_configure_weights+0xb4>)
 801ad9c:	6093      	str	r3, [r2, #8]
    dense_dense_weights_array.data_start = AI_PTR(g_network_appltemp_0506_weights_map[0] + 0);
 801ad9e:	4b20      	ldr	r3, [pc, #128]	@ (801ae20 <network_appltemp_0506_configure_weights+0xb0>)
 801ada0:	681b      	ldr	r3, [r3, #0]
 801ada2:	4a20      	ldr	r2, [pc, #128]	@ (801ae24 <network_appltemp_0506_configure_weights+0xb4>)
 801ada4:	60d3      	str	r3, [r2, #12]
    dense_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 801ada6:	4b20      	ldr	r3, [pc, #128]	@ (801ae28 <network_appltemp_0506_configure_weights+0xb8>)
 801ada8:	681b      	ldr	r3, [r3, #0]
 801adaa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801adae:	4a1e      	ldr	r2, [pc, #120]	@ (801ae28 <network_appltemp_0506_configure_weights+0xb8>)
 801adb0:	6013      	str	r3, [r2, #0]
    dense_dense_bias_array.data = AI_PTR(g_network_appltemp_0506_weights_map[0] + 96);
 801adb2:	4b1b      	ldr	r3, [pc, #108]	@ (801ae20 <network_appltemp_0506_configure_weights+0xb0>)
 801adb4:	681b      	ldr	r3, [r3, #0]
 801adb6:	3360      	adds	r3, #96	@ 0x60
 801adb8:	4a1b      	ldr	r2, [pc, #108]	@ (801ae28 <network_appltemp_0506_configure_weights+0xb8>)
 801adba:	6093      	str	r3, [r2, #8]
    dense_dense_bias_array.data_start = AI_PTR(g_network_appltemp_0506_weights_map[0] + 96);
 801adbc:	4b18      	ldr	r3, [pc, #96]	@ (801ae20 <network_appltemp_0506_configure_weights+0xb0>)
 801adbe:	681b      	ldr	r3, [r3, #0]
 801adc0:	3360      	adds	r3, #96	@ 0x60
 801adc2:	4a19      	ldr	r2, [pc, #100]	@ (801ae28 <network_appltemp_0506_configure_weights+0xb8>)
 801adc4:	60d3      	str	r3, [r2, #12]
    dense_1_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 801adc6:	4b19      	ldr	r3, [pc, #100]	@ (801ae2c <network_appltemp_0506_configure_weights+0xbc>)
 801adc8:	681b      	ldr	r3, [r3, #0]
 801adca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801adce:	4a17      	ldr	r2, [pc, #92]	@ (801ae2c <network_appltemp_0506_configure_weights+0xbc>)
 801add0:	6013      	str	r3, [r2, #0]
    dense_1_dense_weights_array.data = AI_PTR(g_network_appltemp_0506_weights_map[0] + 128);
 801add2:	4b13      	ldr	r3, [pc, #76]	@ (801ae20 <network_appltemp_0506_configure_weights+0xb0>)
 801add4:	681b      	ldr	r3, [r3, #0]
 801add6:	3380      	adds	r3, #128	@ 0x80
 801add8:	4a14      	ldr	r2, [pc, #80]	@ (801ae2c <network_appltemp_0506_configure_weights+0xbc>)
 801adda:	6093      	str	r3, [r2, #8]
    dense_1_dense_weights_array.data_start = AI_PTR(g_network_appltemp_0506_weights_map[0] + 128);
 801addc:	4b10      	ldr	r3, [pc, #64]	@ (801ae20 <network_appltemp_0506_configure_weights+0xb0>)
 801adde:	681b      	ldr	r3, [r3, #0]
 801ade0:	3380      	adds	r3, #128	@ 0x80
 801ade2:	4a12      	ldr	r2, [pc, #72]	@ (801ae2c <network_appltemp_0506_configure_weights+0xbc>)
 801ade4:	60d3      	str	r3, [r2, #12]
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 801ade6:	4b12      	ldr	r3, [pc, #72]	@ (801ae30 <network_appltemp_0506_configure_weights+0xc0>)
 801ade8:	681b      	ldr	r3, [r3, #0]
 801adea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801adee:	4a10      	ldr	r2, [pc, #64]	@ (801ae30 <network_appltemp_0506_configure_weights+0xc0>)
 801adf0:	6013      	str	r3, [r2, #0]
    dense_1_dense_bias_array.data = AI_PTR(g_network_appltemp_0506_weights_map[0] + 160);
 801adf2:	4b0b      	ldr	r3, [pc, #44]	@ (801ae20 <network_appltemp_0506_configure_weights+0xb0>)
 801adf4:	681b      	ldr	r3, [r3, #0]
 801adf6:	33a0      	adds	r3, #160	@ 0xa0
 801adf8:	4a0d      	ldr	r2, [pc, #52]	@ (801ae30 <network_appltemp_0506_configure_weights+0xc0>)
 801adfa:	6093      	str	r3, [r2, #8]
    dense_1_dense_bias_array.data_start = AI_PTR(g_network_appltemp_0506_weights_map[0] + 160);
 801adfc:	4b08      	ldr	r3, [pc, #32]	@ (801ae20 <network_appltemp_0506_configure_weights+0xb0>)
 801adfe:	681b      	ldr	r3, [r3, #0]
 801ae00:	33a0      	adds	r3, #160	@ 0xa0
 801ae02:	4a0b      	ldr	r2, [pc, #44]	@ (801ae30 <network_appltemp_0506_configure_weights+0xc0>)
 801ae04:	60d3      	str	r3, [r2, #12]
    return true;
 801ae06:	2301      	movs	r3, #1
 801ae08:	e005      	b.n	801ae16 <network_appltemp_0506_configure_weights+0xa6>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 801ae0a:	2212      	movs	r2, #18
 801ae0c:	2130      	movs	r1, #48	@ 0x30
 801ae0e:	6878      	ldr	r0, [r7, #4]
 801ae10:	f002 fe02 	bl	801da18 <ai_platform_network_set_error>
  return false;
 801ae14:	2300      	movs	r3, #0
}
 801ae16:	4618      	mov	r0, r3
 801ae18:	3708      	adds	r7, #8
 801ae1a:	46bd      	mov	sp, r7
 801ae1c:	bd80      	pop	{r7, pc}
 801ae1e:	bf00      	nop
 801ae20:	20001a64 	.word	0x20001a64
 801ae24:	20000140 	.word	0x20000140
 801ae28:	20000150 	.word	0x20000150
 801ae2c:	20000160 	.word	0x20000160
 801ae30:	20000170 	.word	0x20000170

0801ae34 <ai_network_appltemp_0506_get_error>:
}


AI_API_ENTRY
ai_error ai_network_appltemp_0506_get_error(ai_handle network)
{
 801ae34:	b580      	push	{r7, lr}
 801ae36:	b082      	sub	sp, #8
 801ae38:	af00      	add	r7, sp, #0
 801ae3a:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 801ae3c:	6878      	ldr	r0, [r7, #4]
 801ae3e:	f002 fddf 	bl	801da00 <ai_platform_network_get_error>
 801ae42:	4603      	mov	r3, r0
}
 801ae44:	4618      	mov	r0, r3
 801ae46:	3708      	adds	r7, #8
 801ae48:	46bd      	mov	sp, r7
 801ae4a:	bd80      	pop	{r7, pc}

0801ae4c <ai_network_appltemp_0506_create>:


AI_API_ENTRY
ai_error ai_network_appltemp_0506_create(
  ai_handle* network, const ai_buffer* network_config)
{
 801ae4c:	b580      	push	{r7, lr}
 801ae4e:	b084      	sub	sp, #16
 801ae50:	af02      	add	r7, sp, #8
 801ae52:	6078      	str	r0, [r7, #4]
 801ae54:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 801ae56:	2300      	movs	r3, #0
 801ae58:	9301      	str	r3, [sp, #4]
 801ae5a:	2305      	movs	r3, #5
 801ae5c:	9300      	str	r3, [sp, #0]
 801ae5e:	2301      	movs	r3, #1
 801ae60:	4a04      	ldr	r2, [pc, #16]	@ (801ae74 <ai_network_appltemp_0506_create+0x28>)
 801ae62:	6839      	ldr	r1, [r7, #0]
 801ae64:	6878      	ldr	r0, [r7, #4]
 801ae66:	f002 fec5 	bl	801dbf4 <ai_platform_network_create>
 801ae6a:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 801ae6c:	4618      	mov	r0, r3
 801ae6e:	3708      	adds	r7, #8
 801ae70:	46bd      	mov	sp, r7
 801ae72:	bd80      	pop	{r7, pc}
 801ae74:	20000594 	.word	0x20000594

0801ae78 <ai_network_appltemp_0506_create_and_init>:


AI_API_ENTRY
ai_error ai_network_appltemp_0506_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 801ae78:	b580      	push	{r7, lr}
 801ae7a:	b094      	sub	sp, #80	@ 0x50
 801ae7c:	af00      	add	r7, sp, #0
 801ae7e:	60f8      	str	r0, [r7, #12]
 801ae80:	60b9      	str	r1, [r7, #8]
 801ae82:	607a      	str	r2, [r7, #4]
  ai_error err;
  ai_network_params params;

  err = ai_network_appltemp_0506_create(network, AI_NETWORK_APPLTEMP_0506_DATA_CONFIG);
 801ae84:	2100      	movs	r1, #0
 801ae86:	68f8      	ldr	r0, [r7, #12]
 801ae88:	f7ff ffe0 	bl	801ae4c <ai_network_appltemp_0506_create>
 801ae8c:	4603      	mov	r3, r0
 801ae8e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (err.type != AI_ERROR_NONE) {
 801ae90:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 801ae94:	2b00      	cmp	r3, #0
 801ae96:	d001      	beq.n	801ae9c <ai_network_appltemp_0506_create_and_init+0x24>
    return err;
 801ae98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ae9a:	e067      	b.n	801af6c <ai_network_appltemp_0506_create_and_init+0xf4>
  }
  
  if (ai_network_appltemp_0506_data_params_get(&params) != true) {
 801ae9c:	f107 0310 	add.w	r3, r7, #16
 801aea0:	4618      	mov	r0, r3
 801aea2:	f000 f8e7 	bl	801b074 <ai_network_appltemp_0506_data_params_get>
 801aea6:	4603      	mov	r3, r0
 801aea8:	f083 0301 	eor.w	r3, r3, #1
 801aeac:	b2db      	uxtb	r3, r3
 801aeae:	2b00      	cmp	r3, #0
 801aeb0:	d008      	beq.n	801aec4 <ai_network_appltemp_0506_create_and_init+0x4c>
    err = ai_network_appltemp_0506_get_error(*network);
 801aeb2:	68fb      	ldr	r3, [r7, #12]
 801aeb4:	681b      	ldr	r3, [r3, #0]
 801aeb6:	4618      	mov	r0, r3
 801aeb8:	f7ff ffbc 	bl	801ae34 <ai_network_appltemp_0506_get_error>
 801aebc:	4603      	mov	r3, r0
 801aebe:	64bb      	str	r3, [r7, #72]	@ 0x48
    return err;
 801aec0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801aec2:	e053      	b.n	801af6c <ai_network_appltemp_0506_create_and_init+0xf4>
  }
#if defined(AI_NETWORK_APPLTEMP_0506_DATA_ACTIVATIONS_COUNT)
  /* set the addresses of the activations buffers */
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 801aec4:	2300      	movs	r3, #0
 801aec6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 801aeca:	e012      	b.n	801aef2 <ai_network_appltemp_0506_create_and_init+0x7a>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 801aecc:	f8b7 104e 	ldrh.w	r1, [r7, #78]	@ 0x4e
 801aed0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801aed4:	009b      	lsls	r3, r3, #2
 801aed6:	68ba      	ldr	r2, [r7, #8]
 801aed8:	4413      	add	r3, r2
 801aeda:	681a      	ldr	r2, [r3, #0]
 801aedc:	f107 0310 	add.w	r3, r7, #16
 801aee0:	330c      	adds	r3, #12
 801aee2:	4618      	mov	r0, r3
 801aee4:	f002 fcb8 	bl	801d858 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 801aee8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801aeec:	3301      	adds	r3, #1
 801aeee:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 801aef2:	68bb      	ldr	r3, [r7, #8]
 801aef4:	2b00      	cmp	r3, #0
 801aef6:	d004      	beq.n	801af02 <ai_network_appltemp_0506_create_and_init+0x8a>
 801aef8:	8bfb      	ldrh	r3, [r7, #30]
 801aefa:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 801aefe:	429a      	cmp	r2, r3
 801af00:	d3e4      	bcc.n	801aecc <ai_network_appltemp_0506_create_and_init+0x54>
  }
#endif
#if defined(AI_NETWORK_APPLTEMP_0506_DATA_WEIGHTS_COUNT)
  /* set the addresses of the weight buffers */
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 801af02:	2300      	movs	r3, #0
 801af04:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 801af08:	e012      	b.n	801af30 <ai_network_appltemp_0506_create_and_init+0xb8>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 801af0a:	f8b7 104c 	ldrh.w	r1, [r7, #76]	@ 0x4c
 801af0e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 801af12:	009b      	lsls	r3, r3, #2
 801af14:	687a      	ldr	r2, [r7, #4]
 801af16:	4413      	add	r3, r2
 801af18:	681a      	ldr	r2, [r3, #0]
 801af1a:	f107 0310 	add.w	r3, r7, #16
 801af1e:	3304      	adds	r3, #4
 801af20:	4618      	mov	r0, r3
 801af22:	f002 fc99 	bl	801d858 <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 801af26:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 801af2a:	3301      	adds	r3, #1
 801af2c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 801af30:	687b      	ldr	r3, [r7, #4]
 801af32:	2b00      	cmp	r3, #0
 801af34:	d004      	beq.n	801af40 <ai_network_appltemp_0506_create_and_init+0xc8>
 801af36:	8afb      	ldrh	r3, [r7, #22]
 801af38:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 801af3c:	429a      	cmp	r2, r3
 801af3e:	d3e4      	bcc.n	801af0a <ai_network_appltemp_0506_create_and_init+0x92>
  }
#endif
  if (ai_network_appltemp_0506_init(*network, &params) != true) {
 801af40:	68fb      	ldr	r3, [r7, #12]
 801af42:	681b      	ldr	r3, [r3, #0]
 801af44:	f107 0210 	add.w	r2, r7, #16
 801af48:	4611      	mov	r1, r2
 801af4a:	4618      	mov	r0, r3
 801af4c:	f000 f846 	bl	801afdc <ai_network_appltemp_0506_init>
 801af50:	4603      	mov	r3, r0
 801af52:	f083 0301 	eor.w	r3, r3, #1
 801af56:	b2db      	uxtb	r3, r3
 801af58:	2b00      	cmp	r3, #0
 801af5a:	d006      	beq.n	801af6a <ai_network_appltemp_0506_create_and_init+0xf2>
    err = ai_network_appltemp_0506_get_error(*network);
 801af5c:	68fb      	ldr	r3, [r7, #12]
 801af5e:	681b      	ldr	r3, [r3, #0]
 801af60:	4618      	mov	r0, r3
 801af62:	f7ff ff67 	bl	801ae34 <ai_network_appltemp_0506_get_error>
 801af66:	4603      	mov	r3, r0
 801af68:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  return err;
 801af6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 801af6c:	4618      	mov	r0, r3
 801af6e:	3750      	adds	r7, #80	@ 0x50
 801af70:	46bd      	mov	sp, r7
 801af72:	bd80      	pop	{r7, pc}

0801af74 <ai_network_appltemp_0506_inputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_appltemp_0506_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 801af74:	b580      	push	{r7, lr}
 801af76:	b082      	sub	sp, #8
 801af78:	af00      	add	r7, sp, #0
 801af7a:	6078      	str	r0, [r7, #4]
 801af7c:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 801af7e:	687b      	ldr	r3, [r7, #4]
 801af80:	2b00      	cmp	r3, #0
 801af82:	d104      	bne.n	801af8e <ai_network_appltemp_0506_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 801af84:	4b06      	ldr	r3, [pc, #24]	@ (801afa0 <ai_network_appltemp_0506_inputs_get+0x2c>)
 801af86:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 801af88:	687b      	ldr	r3, [r7, #4]
 801af8a:	4a06      	ldr	r2, [pc, #24]	@ (801afa4 <ai_network_appltemp_0506_inputs_get+0x30>)
 801af8c:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 801af8e:	6839      	ldr	r1, [r7, #0]
 801af90:	6878      	ldr	r0, [r7, #4]
 801af92:	f002 fd47 	bl	801da24 <ai_platform_inputs_get>
 801af96:	4603      	mov	r3, r0
}
 801af98:	4618      	mov	r0, r3
 801af9a:	3708      	adds	r7, #8
 801af9c:	46bd      	mov	sp, r7
 801af9e:	bd80      	pop	{r7, pc}
 801afa0:	20000594 	.word	0x20000594
 801afa4:	a1c00100 	.word	0xa1c00100

0801afa8 <ai_network_appltemp_0506_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_network_appltemp_0506_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 801afa8:	b580      	push	{r7, lr}
 801afaa:	b082      	sub	sp, #8
 801afac:	af00      	add	r7, sp, #0
 801afae:	6078      	str	r0, [r7, #4]
 801afb0:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 801afb2:	687b      	ldr	r3, [r7, #4]
 801afb4:	2b00      	cmp	r3, #0
 801afb6:	d104      	bne.n	801afc2 <ai_network_appltemp_0506_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 801afb8:	4b06      	ldr	r3, [pc, #24]	@ (801afd4 <ai_network_appltemp_0506_outputs_get+0x2c>)
 801afba:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 801afbc:	687b      	ldr	r3, [r7, #4]
 801afbe:	4a06      	ldr	r2, [pc, #24]	@ (801afd8 <ai_network_appltemp_0506_outputs_get+0x30>)
 801afc0:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 801afc2:	6839      	ldr	r1, [r7, #0]
 801afc4:	6878      	ldr	r0, [r7, #4]
 801afc6:	f002 fda3 	bl	801db10 <ai_platform_outputs_get>
 801afca:	4603      	mov	r3, r0
}
 801afcc:	4618      	mov	r0, r3
 801afce:	3708      	adds	r7, #8
 801afd0:	46bd      	mov	sp, r7
 801afd2:	bd80      	pop	{r7, pc}
 801afd4:	20000594 	.word	0x20000594
 801afd8:	a1c00100 	.word	0xa1c00100

0801afdc <ai_network_appltemp_0506_init>:


AI_API_ENTRY
ai_bool ai_network_appltemp_0506_init(
  ai_handle network, const ai_network_params* params)
{
 801afdc:	b580      	push	{r7, lr}
 801afde:	b084      	sub	sp, #16
 801afe0:	af00      	add	r7, sp, #0
 801afe2:	6078      	str	r0, [r7, #4]
 801afe4:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 801afe6:	6839      	ldr	r1, [r7, #0]
 801afe8:	6878      	ldr	r0, [r7, #4]
 801afea:	f002 fe45 	bl	801dc78 <ai_platform_network_init>
 801afee:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 801aff0:	2301      	movs	r3, #1
 801aff2:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 801aff4:	68fb      	ldr	r3, [r7, #12]
 801aff6:	2b00      	cmp	r3, #0
 801aff8:	d101      	bne.n	801affe <ai_network_appltemp_0506_init+0x22>
 801affa:	2300      	movs	r3, #0
 801affc:	e026      	b.n	801b04c <ai_network_appltemp_0506_init+0x70>
  ok &= network_appltemp_0506_configure_weights(net_ctx, params);
 801affe:	6839      	ldr	r1, [r7, #0]
 801b000:	68f8      	ldr	r0, [r7, #12]
 801b002:	f7ff feb5 	bl	801ad70 <network_appltemp_0506_configure_weights>
 801b006:	4603      	mov	r3, r0
 801b008:	461a      	mov	r2, r3
 801b00a:	7afb      	ldrb	r3, [r7, #11]
 801b00c:	4013      	ands	r3, r2
 801b00e:	2b00      	cmp	r3, #0
 801b010:	bf14      	ite	ne
 801b012:	2301      	movne	r3, #1
 801b014:	2300      	moveq	r3, #0
 801b016:	72fb      	strb	r3, [r7, #11]
  ok &= network_appltemp_0506_configure_activations(net_ctx, params);
 801b018:	6839      	ldr	r1, [r7, #0]
 801b01a:	68f8      	ldr	r0, [r7, #12]
 801b01c:	f7ff fe54 	bl	801acc8 <network_appltemp_0506_configure_activations>
 801b020:	4603      	mov	r3, r0
 801b022:	461a      	mov	r2, r3
 801b024:	7afb      	ldrb	r3, [r7, #11]
 801b026:	4013      	ands	r3, r2
 801b028:	2b00      	cmp	r3, #0
 801b02a:	bf14      	ite	ne
 801b02c:	2301      	movne	r3, #1
 801b02e:	2300      	moveq	r3, #0
 801b030:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 801b032:	6878      	ldr	r0, [r7, #4]
 801b034:	f002 feb8 	bl	801dda8 <ai_platform_network_post_init>
 801b038:	4603      	mov	r3, r0
 801b03a:	461a      	mov	r2, r3
 801b03c:	7afb      	ldrb	r3, [r7, #11]
 801b03e:	4013      	ands	r3, r2
 801b040:	2b00      	cmp	r3, #0
 801b042:	bf14      	ite	ne
 801b044:	2301      	movne	r3, #1
 801b046:	2300      	moveq	r3, #0
 801b048:	72fb      	strb	r3, [r7, #11]

  return ok;
 801b04a:	7afb      	ldrb	r3, [r7, #11]
}
 801b04c:	4618      	mov	r0, r3
 801b04e:	3710      	adds	r7, #16
 801b050:	46bd      	mov	sp, r7
 801b052:	bd80      	pop	{r7, pc}

0801b054 <ai_network_appltemp_0506_run>:


AI_API_ENTRY
ai_i32 ai_network_appltemp_0506_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 801b054:	b580      	push	{r7, lr}
 801b056:	b084      	sub	sp, #16
 801b058:	af00      	add	r7, sp, #0
 801b05a:	60f8      	str	r0, [r7, #12]
 801b05c:	60b9      	str	r1, [r7, #8]
 801b05e:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 801b060:	687a      	ldr	r2, [r7, #4]
 801b062:	68b9      	ldr	r1, [r7, #8]
 801b064:	68f8      	ldr	r0, [r7, #12]
 801b066:	f002 fecd 	bl	801de04 <ai_platform_network_process>
 801b06a:	4603      	mov	r3, r0
}
 801b06c:	4618      	mov	r0, r3
 801b06e:	3710      	adds	r7, #16
 801b070:	46bd      	mov	sp, r7
 801b072:	bd80      	pop	{r7, pc}

0801b074 <ai_network_appltemp_0506_data_params_get>:
 * @ingroup network_appltemp_0506_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_appltemp_0506_data_params_get(ai_network_params* params)
{
 801b074:	b580      	push	{r7, lr}
 801b076:	b086      	sub	sp, #24
 801b078:	af00      	add	r7, sp, #0
 801b07a:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 801b07c:	687b      	ldr	r3, [r7, #4]
 801b07e:	2b00      	cmp	r3, #0
 801b080:	d101      	bne.n	801b086 <ai_network_appltemp_0506_data_params_get+0x12>
 801b082:	2300      	movs	r3, #0
 801b084:	e016      	b.n	801b0b4 <ai_network_appltemp_0506_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 801b086:	4a0d      	ldr	r2, [pc, #52]	@ (801b0bc <ai_network_appltemp_0506_data_params_get+0x48>)
 801b088:	f107 0310 	add.w	r3, r7, #16
 801b08c:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b090:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_APPLTEMP_0506_DATA_ACTIVATIONS_COUNT, g_network_appltemp_0506_data_map_activations);
  
  const ai_buffer_array map_weights = 
 801b094:	4a0a      	ldr	r2, [pc, #40]	@ (801b0c0 <ai_network_appltemp_0506_data_params_get+0x4c>)
 801b096:	f107 0308 	add.w	r3, r7, #8
 801b09a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b09e:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_APPLTEMP_0506_DATA_WEIGHTS_COUNT, g_network_appltemp_0506_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 801b0a2:	f107 0210 	add.w	r2, r7, #16
 801b0a6:	f107 0308 	add.w	r3, r7, #8
 801b0aa:	4619      	mov	r1, r3
 801b0ac:	6878      	ldr	r0, [r7, #4]
 801b0ae:	f002 fc87 	bl	801d9c0 <ai_platform_bind_network_params>
 801b0b2:	4603      	mov	r3, r0
}
 801b0b4:	4618      	mov	r0, r3
 801b0b6:	3718      	adds	r7, #24
 801b0b8:	46bd      	mov	sp, r7
 801b0ba:	bd80      	pop	{r7, pc}
 801b0bc:	08020b58 	.word	0x08020b58
 801b0c0:	08020b60 	.word	0x08020b60

0801b0c4 <LL_APB1_GRP1_EnableClock>:
{
 801b0c4:	b480      	push	{r7}
 801b0c6:	b085      	sub	sp, #20
 801b0c8:	af00      	add	r7, sp, #0
 801b0ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 801b0cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801b0d0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801b0d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801b0d6:	687b      	ldr	r3, [r7, #4]
 801b0d8:	4313      	orrs	r3, r2
 801b0da:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 801b0dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801b0e0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801b0e2:	687b      	ldr	r3, [r7, #4]
 801b0e4:	4013      	ands	r3, r2
 801b0e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801b0e8:	68fb      	ldr	r3, [r7, #12]
}
 801b0ea:	bf00      	nop
 801b0ec:	3714      	adds	r7, #20
 801b0ee:	46bd      	mov	sp, r7
 801b0f0:	bc80      	pop	{r7}
 801b0f2:	4770      	bx	lr

0801b0f4 <LL_APB1_GRP2_EnableClock>:
{
 801b0f4:	b480      	push	{r7}
 801b0f6:	b085      	sub	sp, #20
 801b0f8:	af00      	add	r7, sp, #0
 801b0fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 801b0fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801b100:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801b102:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801b106:	687b      	ldr	r3, [r7, #4]
 801b108:	4313      	orrs	r3, r2
 801b10a:	65cb      	str	r3, [r1, #92]	@ 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 801b10c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801b110:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801b112:	687b      	ldr	r3, [r7, #4]
 801b114:	4013      	ands	r3, r2
 801b116:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801b118:	68fb      	ldr	r3, [r7, #12]
}
 801b11a:	bf00      	nop
 801b11c:	3714      	adds	r7, #20
 801b11e:	46bd      	mov	sp, r7
 801b120:	bc80      	pop	{r7}
 801b122:	4770      	bx	lr

0801b124 <MX_LPTIM1_Init>:
LPTIM_HandleTypeDef hlptim1;
LPTIM_HandleTypeDef hlptim2;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 801b124:	b580      	push	{r7, lr}
 801b126:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 801b128:	4b13      	ldr	r3, [pc, #76]	@ (801b178 <MX_LPTIM1_Init+0x54>)
 801b12a:	4a14      	ldr	r2, [pc, #80]	@ (801b17c <MX_LPTIM1_Init+0x58>)
 801b12c:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 801b12e:	4b12      	ldr	r3, [pc, #72]	@ (801b178 <MX_LPTIM1_Init+0x54>)
 801b130:	2200      	movs	r2, #0
 801b132:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 801b134:	4b10      	ldr	r3, [pc, #64]	@ (801b178 <MX_LPTIM1_Init+0x54>)
 801b136:	f44f 6260 	mov.w	r2, #3584	@ 0xe00
 801b13a:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 801b13c:	4b0e      	ldr	r3, [pc, #56]	@ (801b178 <MX_LPTIM1_Init+0x54>)
 801b13e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801b142:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 801b144:	4b0c      	ldr	r3, [pc, #48]	@ (801b178 <MX_LPTIM1_Init+0x54>)
 801b146:	2200      	movs	r2, #0
 801b148:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 801b14a:	4b0b      	ldr	r3, [pc, #44]	@ (801b178 <MX_LPTIM1_Init+0x54>)
 801b14c:	2200      	movs	r2, #0
 801b14e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 801b150:	4b09      	ldr	r3, [pc, #36]	@ (801b178 <MX_LPTIM1_Init+0x54>)
 801b152:	2200      	movs	r2, #0
 801b154:	629a      	str	r2, [r3, #40]	@ 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 801b156:	4b08      	ldr	r3, [pc, #32]	@ (801b178 <MX_LPTIM1_Init+0x54>)
 801b158:	2200      	movs	r2, #0
 801b15a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 801b15c:	4b06      	ldr	r3, [pc, #24]	@ (801b178 <MX_LPTIM1_Init+0x54>)
 801b15e:	2200      	movs	r2, #0
 801b160:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 801b162:	4805      	ldr	r0, [pc, #20]	@ (801b178 <MX_LPTIM1_Init+0x54>)
 801b164:	f001 fe7a 	bl	801ce5c <HAL_LPTIM_Init>
 801b168:	4603      	mov	r3, r0
 801b16a:	2b00      	cmp	r3, #0
 801b16c:	d001      	beq.n	801b172 <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 801b16e:	f7e6 f8a7 	bl	80012c0 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 801b172:	bf00      	nop
 801b174:	bd80      	pop	{r7, pc}
 801b176:	bf00      	nop
 801b178:	20001b40 	.word	0x20001b40
 801b17c:	40007c00 	.word	0x40007c00

0801b180 <HAL_LPTIM_MspInit>:

}


void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 801b180:	b580      	push	{r7, lr}
 801b182:	b090      	sub	sp, #64	@ 0x40
 801b184:	af00      	add	r7, sp, #0
 801b186:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801b188:	f107 0308 	add.w	r3, r7, #8
 801b18c:	2238      	movs	r2, #56	@ 0x38
 801b18e:	2100      	movs	r1, #0
 801b190:	4618      	mov	r0, r3
 801b192:	f004 fba7 	bl	801f8e4 <memset>
  if(lptimHandle->Instance==LPTIM1)
 801b196:	687b      	ldr	r3, [r7, #4]
 801b198:	681b      	ldr	r3, [r3, #0]
 801b19a:	4a21      	ldr	r2, [pc, #132]	@ (801b220 <HAL_LPTIM_MspInit+0xa0>)
 801b19c:	4293      	cmp	r3, r2
 801b19e:	d11c      	bne.n	801b1da <HAL_LPTIM_MspInit+0x5a>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 801b1a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801b1a4:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 801b1a6:	f04f 130c 	mov.w	r3, #786444	@ 0xc000c
 801b1aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801b1ac:	f107 0308 	add.w	r3, r7, #8
 801b1b0:	4618      	mov	r0, r3
 801b1b2:	f7ea ffc5 	bl	8006140 <HAL_RCCEx_PeriphCLKConfig>
 801b1b6:	4603      	mov	r3, r0
 801b1b8:	2b00      	cmp	r3, #0
 801b1ba:	d001      	beq.n	801b1c0 <HAL_LPTIM_MspInit+0x40>
    {
      Error_Handler();
 801b1bc:	f7e6 f880 	bl	80012c0 <Error_Handler>
    }

    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 801b1c0:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 801b1c4:	f7ff ff7e 	bl	801b0c4 <LL_APB1_GRP1_EnableClock>

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 801b1c8:	2200      	movs	r2, #0
 801b1ca:	2100      	movs	r1, #0
 801b1cc:	2027      	movs	r0, #39	@ 0x27
 801b1ce:	f7e7 ff24 	bl	800301a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 801b1d2:	2027      	movs	r0, #39	@ 0x27
 801b1d4:	f7e7 ff3b 	bl	800304e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN LPTIM2_MspInit 1 */

    /* USER CODE END LPTIM2_MspInit 1 */
    }

}
 801b1d8:	e01e      	b.n	801b218 <HAL_LPTIM_MspInit+0x98>
  else if(lptimHandle->Instance==LPTIM2)
 801b1da:	687b      	ldr	r3, [r7, #4]
 801b1dc:	681b      	ldr	r3, [r3, #0]
 801b1de:	4a11      	ldr	r2, [pc, #68]	@ (801b224 <HAL_LPTIM_MspInit+0xa4>)
 801b1e0:	4293      	cmp	r3, r2
 801b1e2:	d119      	bne.n	801b218 <HAL_LPTIM_MspInit+0x98>
	  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM2;
 801b1e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801b1e8:	60bb      	str	r3, [r7, #8]
	  PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_HSI;
 801b1ea:	4b0f      	ldr	r3, [pc, #60]	@ (801b228 <HAL_LPTIM_MspInit+0xa8>)
 801b1ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801b1ee:	f107 0308 	add.w	r3, r7, #8
 801b1f2:	4618      	mov	r0, r3
 801b1f4:	f7ea ffa4 	bl	8006140 <HAL_RCCEx_PeriphCLKConfig>
 801b1f8:	4603      	mov	r3, r0
 801b1fa:	2b00      	cmp	r3, #0
 801b1fc:	d001      	beq.n	801b202 <HAL_LPTIM_MspInit+0x82>
		  Error_Handler();
 801b1fe:	f7e6 f85f 	bl	80012c0 <Error_Handler>
	  __HAL_RCC_LPTIM2_CLK_ENABLE();
 801b202:	2020      	movs	r0, #32
 801b204:	f7ff ff76 	bl	801b0f4 <LL_APB1_GRP2_EnableClock>
	  HAL_NVIC_SetPriority(LPTIM2_IRQn, 0, 0);
 801b208:	2200      	movs	r2, #0
 801b20a:	2100      	movs	r1, #0
 801b20c:	2028      	movs	r0, #40	@ 0x28
 801b20e:	f7e7 ff04 	bl	800301a <HAL_NVIC_SetPriority>
	  HAL_NVIC_EnableIRQ(LPTIM2_IRQn);
 801b212:	2028      	movs	r0, #40	@ 0x28
 801b214:	f7e7 ff1b 	bl	800304e <HAL_NVIC_EnableIRQ>
}
 801b218:	bf00      	nop
 801b21a:	3740      	adds	r7, #64	@ 0x40
 801b21c:	46bd      	mov	sp, r7
 801b21e:	bd80      	pop	{r7, pc}
 801b220:	40007c00 	.word	0x40007c00
 801b224:	40009400 	.word	0x40009400
 801b228:	00300020 	.word	0x00300020

0801b22c <LL_PWR_SetPowerMode>:
{
 801b22c:	b480      	push	{r7}
 801b22e:	b083      	sub	sp, #12
 801b230:	af00      	add	r7, sp, #0
 801b232:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 801b234:	4b06      	ldr	r3, [pc, #24]	@ (801b250 <LL_PWR_SetPowerMode+0x24>)
 801b236:	681b      	ldr	r3, [r3, #0]
 801b238:	f023 0207 	bic.w	r2, r3, #7
 801b23c:	4904      	ldr	r1, [pc, #16]	@ (801b250 <LL_PWR_SetPowerMode+0x24>)
 801b23e:	687b      	ldr	r3, [r7, #4]
 801b240:	4313      	orrs	r3, r2
 801b242:	600b      	str	r3, [r1, #0]
}
 801b244:	bf00      	nop
 801b246:	370c      	adds	r7, #12
 801b248:	46bd      	mov	sp, r7
 801b24a:	bc80      	pop	{r7}
 801b24c:	4770      	bx	lr
 801b24e:	bf00      	nop
 801b250:	58000400 	.word	0x58000400

0801b254 <LL_C2_PWR_SetPowerMode>:
{
 801b254:	b480      	push	{r7}
 801b256:	b083      	sub	sp, #12
 801b258:	af00      	add	r7, sp, #0
 801b25a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 801b25c:	4b07      	ldr	r3, [pc, #28]	@ (801b27c <LL_C2_PWR_SetPowerMode+0x28>)
 801b25e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801b262:	f023 0207 	bic.w	r2, r3, #7
 801b266:	4905      	ldr	r1, [pc, #20]	@ (801b27c <LL_C2_PWR_SetPowerMode+0x28>)
 801b268:	687b      	ldr	r3, [r7, #4]
 801b26a:	4313      	orrs	r3, r2
 801b26c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 801b270:	bf00      	nop
 801b272:	370c      	adds	r7, #12
 801b274:	46bd      	mov	sp, r7
 801b276:	bc80      	pop	{r7}
 801b278:	4770      	bx	lr
 801b27a:	bf00      	nop
 801b27c:	58000400 	.word	0x58000400

0801b280 <LL_PWR_IsActiveFlag_C1SB>:
{
 801b280:	b480      	push	{r7}
 801b282:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C1SBF) == (PWR_EXTSCR_C1SBF)) ? 1UL : 0UL);
 801b284:	4b07      	ldr	r3, [pc, #28]	@ (801b2a4 <LL_PWR_IsActiveFlag_C1SB+0x24>)
 801b286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801b28a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801b28e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b292:	d101      	bne.n	801b298 <LL_PWR_IsActiveFlag_C1SB+0x18>
 801b294:	2301      	movs	r3, #1
 801b296:	e000      	b.n	801b29a <LL_PWR_IsActiveFlag_C1SB+0x1a>
 801b298:	2300      	movs	r3, #0
}
 801b29a:	4618      	mov	r0, r3
 801b29c:	46bd      	mov	sp, r7
 801b29e:	bc80      	pop	{r7}
 801b2a0:	4770      	bx	lr
 801b2a2:	bf00      	nop
 801b2a4:	58000400 	.word	0x58000400

0801b2a8 <LL_PWR_IsActiveFlag_C2SB>:
{
 801b2a8:	b480      	push	{r7}
 801b2aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->EXTSCR, PWR_EXTSCR_C2SBF) == (PWR_EXTSCR_C2SBF)) ? 1UL : 0UL);
 801b2ac:	4b07      	ldr	r3, [pc, #28]	@ (801b2cc <LL_PWR_IsActiveFlag_C2SB+0x24>)
 801b2ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801b2b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801b2b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801b2ba:	d101      	bne.n	801b2c0 <LL_PWR_IsActiveFlag_C2SB+0x18>
 801b2bc:	2301      	movs	r3, #1
 801b2be:	e000      	b.n	801b2c2 <LL_PWR_IsActiveFlag_C2SB+0x1a>
 801b2c0:	2300      	movs	r3, #0
}
 801b2c2:	4618      	mov	r0, r3
 801b2c4:	46bd      	mov	sp, r7
 801b2c6:	bc80      	pop	{r7}
 801b2c8:	4770      	bx	lr
 801b2ca:	bf00      	nop
 801b2cc:	58000400 	.word	0x58000400

0801b2d0 <LL_PWR_ClearFlag_C1STOP_C1STB>:
{
 801b2d0:	b480      	push	{r7}
 801b2d2:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 801b2d4:	4b03      	ldr	r3, [pc, #12]	@ (801b2e4 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 801b2d6:	2201      	movs	r2, #1
 801b2d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 801b2dc:	bf00      	nop
 801b2de:	46bd      	mov	sp, r7
 801b2e0:	bc80      	pop	{r7}
 801b2e2:	4770      	bx	lr
 801b2e4:	58000400 	.word	0x58000400

0801b2e8 <LL_PWR_ClearFlag_C2STOP_C2STB>:
  * @brief  Clear standby and stop flags for CPU2
  * @rmtoll EXTSCR       C2CSSF        LL_PWR_ClearFlag_C2STOP_C2STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C2STOP_C2STB(void)
{
 801b2e8:	b480      	push	{r7}
 801b2ea:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C2CSSF);
 801b2ec:	4b03      	ldr	r3, [pc, #12]	@ (801b2fc <LL_PWR_ClearFlag_C2STOP_C2STB+0x14>)
 801b2ee:	2202      	movs	r2, #2
 801b2f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 801b2f4:	bf00      	nop
 801b2f6:	46bd      	mov	sp, r7
 801b2f8:	bc80      	pop	{r7}
 801b2fa:	4770      	bx	lr
 801b2fc:	58000400 	.word	0x58000400

0801b300 <LL_RCC_LSE_SetDriveCapability>:
{
 801b300:	b480      	push	{r7}
 801b302:	b083      	sub	sp, #12
 801b304:	af00      	add	r7, sp, #0
 801b306:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 801b308:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801b30c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801b310:	f023 0218 	bic.w	r2, r3, #24
 801b314:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801b318:	687b      	ldr	r3, [r7, #4]
 801b31a:	4313      	orrs	r3, r2
 801b31c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 801b320:	bf00      	nop
 801b322:	370c      	adds	r7, #12
 801b324:	46bd      	mov	sp, r7
 801b326:	bc80      	pop	{r7}
 801b328:	4770      	bx	lr

0801b32a <LL_RCC_SetClkAfterWakeFromStop>:
{
 801b32a:	b480      	push	{r7}
 801b32c:	b083      	sub	sp, #12
 801b32e:	af00      	add	r7, sp, #0
 801b330:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 801b332:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801b336:	689b      	ldr	r3, [r3, #8]
 801b338:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 801b33c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801b340:	687b      	ldr	r3, [r7, #4]
 801b342:	4313      	orrs	r3, r2
 801b344:	608b      	str	r3, [r1, #8]
}
 801b346:	bf00      	nop
 801b348:	370c      	adds	r7, #12
 801b34a:	46bd      	mov	sp, r7
 801b34c:	bc80      	pop	{r7}
 801b34e:	4770      	bx	lr

0801b350 <LL_AHB2_GRP1_EnableClock>:
{
 801b350:	b480      	push	{r7}
 801b352:	b085      	sub	sp, #20
 801b354:	af00      	add	r7, sp, #0
 801b356:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 801b358:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801b35c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801b35e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801b362:	687b      	ldr	r3, [r7, #4]
 801b364:	4313      	orrs	r3, r2
 801b366:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 801b368:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801b36c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801b36e:	687b      	ldr	r3, [r7, #4]
 801b370:	4013      	ands	r3, r2
 801b372:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801b374:	68fb      	ldr	r3, [r7, #12]
}
 801b376:	bf00      	nop
 801b378:	3714      	adds	r7, #20
 801b37a:	46bd      	mov	sp, r7
 801b37c:	bc80      	pop	{r7}
 801b37e:	4770      	bx	lr

0801b380 <LL_AHB2_GRP1_DisableClock>:
{
 801b380:	b480      	push	{r7}
 801b382:	b083      	sub	sp, #12
 801b384:	af00      	add	r7, sp, #0
 801b386:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 801b388:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801b38c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801b38e:	687b      	ldr	r3, [r7, #4]
 801b390:	43db      	mvns	r3, r3
 801b392:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801b396:	4013      	ands	r3, r2
 801b398:	64cb      	str	r3, [r1, #76]	@ 0x4c
}
 801b39a:	bf00      	nop
 801b39c:	370c      	adds	r7, #12
 801b39e:	46bd      	mov	sp, r7
 801b3a0:	bc80      	pop	{r7}
 801b3a2:	4770      	bx	lr

0801b3a4 <LL_APB1_GRP1_EnableClock>:
{
 801b3a4:	b480      	push	{r7}
 801b3a6:	b085      	sub	sp, #20
 801b3a8:	af00      	add	r7, sp, #0
 801b3aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 801b3ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801b3b0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801b3b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801b3b6:	687b      	ldr	r3, [r7, #4]
 801b3b8:	4313      	orrs	r3, r2
 801b3ba:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 801b3bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801b3c0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801b3c2:	687b      	ldr	r3, [r7, #4]
 801b3c4:	4013      	ands	r3, r2
 801b3c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801b3c8:	68fb      	ldr	r3, [r7, #12]
}
 801b3ca:	bf00      	nop
 801b3cc:	3714      	adds	r7, #20
 801b3ce:	46bd      	mov	sp, r7
 801b3d0:	bc80      	pop	{r7}
 801b3d2:	4770      	bx	lr

0801b3d4 <LL_APB1_GRP1_DisableClock>:
{
 801b3d4:	b480      	push	{r7}
 801b3d6:	b083      	sub	sp, #12
 801b3d8:	af00      	add	r7, sp, #0
 801b3da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 801b3dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801b3e0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801b3e2:	687b      	ldr	r3, [r7, #4]
 801b3e4:	43db      	mvns	r3, r3
 801b3e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801b3ea:	4013      	ands	r3, r2
 801b3ec:	658b      	str	r3, [r1, #88]	@ 0x58
}
 801b3ee:	bf00      	nop
 801b3f0:	370c      	adds	r7, #12
 801b3f2:	46bd      	mov	sp, r7
 801b3f4:	bc80      	pop	{r7}
 801b3f6:	4770      	bx	lr

0801b3f8 <HAL_PWR_PVDCallback>:
extern RTC_HandleTypeDef hrtc;

/* CallBack Section Begin */

void HAL_PWR_PVDCallback(void)	// PVD CallBack
{
 801b3f8:	b580      	push	{r7, lr}
 801b3fa:	af00      	add	r7, sp, #0
	if(my_SystemClock_Config_done == 0)											// Check if the PS Detection has been executed
 801b3fc:	4b8e      	ldr	r3, [pc, #568]	@ (801b638 <HAL_PWR_PVDCallback+0x240>)
 801b3fe:	781b      	ldrb	r3, [r3, #0]
 801b400:	2b00      	cmp	r3, #0
 801b402:	d103      	bne.n	801b40c <HAL_PWR_PVDCallback+0x14>
	{
		my_Next_State = RTS;
 801b404:	4b8d      	ldr	r3, [pc, #564]	@ (801b63c <HAL_PWR_PVDCallback+0x244>)
 801b406:	2202      	movs	r2, #2
 801b408:	701a      	strb	r2, [r3, #0]
			break;
		}

		}
	}
}
 801b40a:	e113      	b.n	801b634 <HAL_PWR_PVDCallback+0x23c>
		switch(my_Current_State)
 801b40c:	4b8c      	ldr	r3, [pc, #560]	@ (801b640 <HAL_PWR_PVDCallback+0x248>)
 801b40e:	781b      	ldrb	r3, [r3, #0]
 801b410:	3b03      	subs	r3, #3
 801b412:	2b04      	cmp	r3, #4
 801b414:	f200 8102 	bhi.w	801b61c <HAL_PWR_PVDCallback+0x224>
 801b418:	a201      	add	r2, pc, #4	@ (adr r2, 801b420 <HAL_PWR_PVDCallback+0x28>)
 801b41a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b41e:	bf00      	nop
 801b420:	0801b435 	.word	0x0801b435
 801b424:	0801b4c9 	.word	0x0801b4c9
 801b428:	0801b5af 	.word	0x0801b5af
 801b42c:	0801b5e3 	.word	0x0801b5e3
 801b430:	0801b537 	.word	0x0801b537
			My_EHS_to_EMS_Timer(STOP_TIMER);									// Stop EHS_to_EMS Timer
 801b434:	2001      	movs	r0, #1
 801b436:	f000 fd51 	bl	801bedc <My_EHS_to_EMS_Timer>
			switch(my_Next_State)
 801b43a:	4b80      	ldr	r3, [pc, #512]	@ (801b63c <HAL_PWR_PVDCallback+0x244>)
 801b43c:	781b      	ldrb	r3, [r3, #0]
 801b43e:	3b02      	subs	r3, #2
 801b440:	2b07      	cmp	r3, #7
 801b442:	d836      	bhi.n	801b4b2 <HAL_PWR_PVDCallback+0xba>
 801b444:	a201      	add	r2, pc, #4	@ (adr r2, 801b44c <HAL_PWR_PVDCallback+0x54>)
 801b446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b44a:	bf00      	nop
 801b44c:	0801b46d 	.word	0x0801b46d
 801b450:	0801b4b3 	.word	0x0801b4b3
 801b454:	0801b491 	.word	0x0801b491
 801b458:	0801b4b3 	.word	0x0801b4b3
 801b45c:	0801b4b3 	.word	0x0801b4b3
 801b460:	0801b49b 	.word	0x0801b49b
 801b464:	0801b4b3 	.word	0x0801b4b3
 801b468:	0801b4a7 	.word	0x0801b4a7
				if (my_SubghzApp_Init_done == 1) 								// Check if Radio Initialization is done
 801b46c:	4b75      	ldr	r3, [pc, #468]	@ (801b644 <HAL_PWR_PVDCallback+0x24c>)
 801b46e:	781b      	ldrb	r3, [r3, #0]
 801b470:	2b01      	cmp	r3, #1
 801b472:	d127      	bne.n	801b4c4 <HAL_PWR_PVDCallback+0xcc>
					if (my_RTS_cnt == 0)
 801b474:	4b74      	ldr	r3, [pc, #464]	@ (801b648 <HAL_PWR_PVDCallback+0x250>)
 801b476:	781b      	ldrb	r3, [r3, #0]
 801b478:	2b00      	cmp	r3, #0
 801b47a:	d104      	bne.n	801b486 <HAL_PWR_PVDCallback+0x8e>
						My_Trise_Meas();										// Measure the Trise Time
 801b47c:	f001 fab4 	bl	801c9e8 <My_Trise_Meas>
						My_SMW_Timer(STOP_TIMER);								// Stop the SMW Timer
 801b480:	2001      	movs	r0, #1
 801b482:	f000 fceb 	bl	801be5c <My_SMW_Timer>
					UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_RTF), CFG_SEQ_Prio_0);	// SendTxData
 801b486:	2100      	movs	r1, #0
 801b488:	2010      	movs	r0, #16
 801b48a:	f7fe fc9f 	bl	8019dcc <UTIL_SEQ_SetTask>
				break;
 801b48e:	e019      	b.n	801b4c4 <HAL_PWR_PVDCallback+0xcc>
				UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_ESF), CFG_SEQ_Prio_0);  	// My_ESF -- ESF = Energy Storage Function
 801b490:	2100      	movs	r1, #0
 801b492:	2040      	movs	r0, #64	@ 0x40
 801b494:	f7fe fc9a 	bl	8019dcc <UTIL_SEQ_SetTask>
				break;
 801b498:	e015      	b.n	801b4c6 <HAL_PWR_PVDCallback+0xce>
				UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SMF), CFG_SEQ_Prio_0);  	// My_SMF -- SMF = Sensors Measurement Function
 801b49a:	2100      	movs	r1, #0
 801b49c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801b4a0:	f7fe fc94 	bl	8019dcc <UTIL_SEQ_SetTask>
				break;
 801b4a4:	e00f      	b.n	801b4c6 <HAL_PWR_PVDCallback+0xce>
				UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_AIF), CFG_SEQ_Prio_0);  	// My_AIF -- AIF = Artificial Intelligence Function
 801b4a6:	2100      	movs	r1, #0
 801b4a8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801b4ac:	f7fe fc8e 	bl	8019dcc <UTIL_SEQ_SetTask>
				break;
 801b4b0:	e009      	b.n	801b4c6 <HAL_PWR_PVDCallback+0xce>
				my_Next_State = SMS;											// Set Next State as SMS
 801b4b2:	4b62      	ldr	r3, [pc, #392]	@ (801b63c <HAL_PWR_PVDCallback+0x244>)
 801b4b4:	2207      	movs	r2, #7
 801b4b6:	701a      	strb	r2, [r3, #0]
				UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SMF), CFG_SEQ_Prio_0);  	// My_SMF -- SMF = Sensors Measurement Function
 801b4b8:	2100      	movs	r1, #0
 801b4ba:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801b4be:	f7fe fc85 	bl	8019dcc <UTIL_SEQ_SetTask>
				break;
 801b4c2:	e000      	b.n	801b4c6 <HAL_PWR_PVDCallback+0xce>
				break;
 801b4c4:	bf00      	nop
			break;
 801b4c6:	e0b5      	b.n	801b634 <HAL_PWR_PVDCallback+0x23c>
			switch (my_Cmode)
 801b4c8:	4b60      	ldr	r3, [pc, #384]	@ (801b64c <HAL_PWR_PVDCallback+0x254>)
 801b4ca:	781b      	ldrb	r3, [r3, #0]
 801b4cc:	2b00      	cmp	r3, #0
 801b4ce:	d002      	beq.n	801b4d6 <HAL_PWR_PVDCallback+0xde>
 801b4d0:	2b02      	cmp	r3, #2
 801b4d2:	d00b      	beq.n	801b4ec <HAL_PWR_PVDCallback+0xf4>
 801b4d4:	e022      	b.n	801b51c <HAL_PWR_PVDCallback+0x124>
				my_Current_State = EHS;  										// Set Current State as EHS: 	ESS --> EHS
 801b4d6:	4b5a      	ldr	r3, [pc, #360]	@ (801b640 <HAL_PWR_PVDCallback+0x248>)
 801b4d8:	2203      	movs	r2, #3
 801b4da:	701a      	strb	r2, [r3, #0]
				My_DCM_to_CCM_Timer(STOP_TIMER);  								// Stop the DCM to CCM Timer
 801b4dc:	2001      	movs	r0, #1
 801b4de:	f000 fd1f 	bl	801bf20 <My_DCM_to_CCM_Timer>
				UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_EHF), CFG_SEQ_Prio_0);		// My_EHF - Back to Harvest
 801b4e2:	2100      	movs	r1, #0
 801b4e4:	2020      	movs	r0, #32
 801b4e6:	f7fe fc71 	bl	8019dcc <UTIL_SEQ_SetTask>
				break;
 801b4ea:	e023      	b.n	801b534 <HAL_PWR_PVDCallback+0x13c>
				if (my_Check_ESD == 0)
 801b4ec:	4b58      	ldr	r3, [pc, #352]	@ (801b650 <HAL_PWR_PVDCallback+0x258>)
 801b4ee:	781b      	ldrb	r3, [r3, #0]
 801b4f0:	2b00      	cmp	r3, #0
 801b4f2:	d102      	bne.n	801b4fa <HAL_PWR_PVDCallback+0x102>
					my_Cmode = EOC;  											// End of Charge Mode has been met
 801b4f4:	4b55      	ldr	r3, [pc, #340]	@ (801b64c <HAL_PWR_PVDCallback+0x254>)
 801b4f6:	2202      	movs	r2, #2
 801b4f8:	701a      	strb	r2, [r3, #0]
				My_ESW_CCM_Timer(STOP_TIMER);  									// Stop the Energy Storage Window Timer
 801b4fa:	2001      	movs	r0, #1
 801b4fc:	f000 fc88 	bl	801be10 <My_ESW_CCM_Timer>
				My_EHS_to_EMS_Timer(STOP_TIMER);  								// Stop the EHS to EMS Timer
 801b500:	2001      	movs	r0, #1
 801b502:	f000 fceb 	bl	801bedc <My_EHS_to_EMS_Timer>
				my_Current_State = EHS;  										// Set Current State as EHS: 	ESS --> EHS
 801b506:	4b4e      	ldr	r3, [pc, #312]	@ (801b640 <HAL_PWR_PVDCallback+0x248>)
 801b508:	2203      	movs	r2, #3
 801b50a:	701a      	strb	r2, [r3, #0]
				my_Next_State = SMS;											// Set Next State as RTS:	 	ESS --> EHS --> SMS
 801b50c:	4b4b      	ldr	r3, [pc, #300]	@ (801b63c <HAL_PWR_PVDCallback+0x244>)
 801b50e:	2207      	movs	r2, #7
 801b510:	701a      	strb	r2, [r3, #0]
				UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_EHF), CFG_SEQ_Prio_0);  	// My_EHF - Back to Harvest
 801b512:	2100      	movs	r1, #0
 801b514:	2020      	movs	r0, #32
 801b516:	f7fe fc59 	bl	8019dcc <UTIL_SEQ_SetTask>
				break;
 801b51a:	e00b      	b.n	801b534 <HAL_PWR_PVDCallback+0x13c>
				my_Current_State = EHS;  										// Set Current State as EHS
 801b51c:	4b48      	ldr	r3, [pc, #288]	@ (801b640 <HAL_PWR_PVDCallback+0x248>)
 801b51e:	2203      	movs	r2, #3
 801b520:	701a      	strb	r2, [r3, #0]
				my_Next_State = SMS;											// Set Next State as SMS
 801b522:	4b46      	ldr	r3, [pc, #280]	@ (801b63c <HAL_PWR_PVDCallback+0x244>)
 801b524:	2207      	movs	r2, #7
 801b526:	701a      	strb	r2, [r3, #0]
				UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SMF), CFG_SEQ_Prio_0);  	// My_SMF -- SMF = Sensors Measurement Function
 801b528:	2100      	movs	r1, #0
 801b52a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801b52e:	f7fe fc4d 	bl	8019dcc <UTIL_SEQ_SetTask>
				break;
 801b532:	bf00      	nop
			break;
 801b534:	e07e      	b.n	801b634 <HAL_PWR_PVDCallback+0x23c>
			My_VDD_to_VDDS2_Switch(Switch_OPEN);								// unBias the Sensors: Open the switch between VDD and VDDS2
 801b536:	2000      	movs	r0, #0
 801b538:	f001 fb52 	bl	801cbe0 <My_VDD_to_VDDS2_Switch>
			if (!((my_Cmode == DCM) && (my_Check_ESD == 0)))
 801b53c:	4b43      	ldr	r3, [pc, #268]	@ (801b64c <HAL_PWR_PVDCallback+0x254>)
 801b53e:	781b      	ldrb	r3, [r3, #0]
 801b540:	2b00      	cmp	r3, #0
 801b542:	d103      	bne.n	801b54c <HAL_PWR_PVDCallback+0x154>
 801b544:	4b42      	ldr	r3, [pc, #264]	@ (801b650 <HAL_PWR_PVDCallback+0x258>)
 801b546:	781b      	ldrb	r3, [r3, #0]
 801b548:	2b00      	cmp	r3, #0
 801b54a:	d002      	beq.n	801b552 <HAL_PWR_PVDCallback+0x15a>
				Radio.Sleep();													// Switch the Radio Off
 801b54c:	4b41      	ldr	r3, [pc, #260]	@ (801b654 <HAL_PWR_PVDCallback+0x25c>)
 801b54e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b550:	4798      	blx	r3
			my_Current_State = EHS;												// Set Current State as EHS
 801b552:	4b3b      	ldr	r3, [pc, #236]	@ (801b640 <HAL_PWR_PVDCallback+0x248>)
 801b554:	2203      	movs	r2, #3
 801b556:	701a      	strb	r2, [r3, #0]
			if ((my_Cmode == EOC && HAL_LPTIM_ReadCounter(&hlptim1) > (T_ESW + T_SMW)) ||
 801b558:	4b3c      	ldr	r3, [pc, #240]	@ (801b64c <HAL_PWR_PVDCallback+0x254>)
 801b55a:	781b      	ldrb	r3, [r3, #0]
 801b55c:	2b02      	cmp	r3, #2
 801b55e:	d107      	bne.n	801b570 <HAL_PWR_PVDCallback+0x178>
 801b560:	483d      	ldr	r0, [pc, #244]	@ (801b658 <HAL_PWR_PVDCallback+0x260>)
 801b562:	f001 feab 	bl	801d2bc <HAL_LPTIM_ReadCounter>
 801b566:	4603      	mov	r3, r0
 801b568:	f642 0210 	movw	r2, #10256	@ 0x2810
 801b56c:	4293      	cmp	r3, r2
 801b56e:	d80f      	bhi.n	801b590 <HAL_PWR_PVDCallback+0x198>
					(my_Cmode != EOC && HAL_LPTIM_ReadCounter(&hlptim1) > T_SMW) ||
 801b570:	4b36      	ldr	r3, [pc, #216]	@ (801b64c <HAL_PWR_PVDCallback+0x254>)
 801b572:	781b      	ldrb	r3, [r3, #0]
			if ((my_Cmode == EOC && HAL_LPTIM_ReadCounter(&hlptim1) > (T_ESW + T_SMW)) ||
 801b574:	2b02      	cmp	r3, #2
 801b576:	d007      	beq.n	801b588 <HAL_PWR_PVDCallback+0x190>
					(my_Cmode != EOC && HAL_LPTIM_ReadCounter(&hlptim1) > T_SMW) ||
 801b578:	4837      	ldr	r0, [pc, #220]	@ (801b658 <HAL_PWR_PVDCallback+0x260>)
 801b57a:	f001 fe9f 	bl	801d2bc <HAL_LPTIM_ReadCounter>
 801b57e:	4603      	mov	r3, r0
 801b580:	f241 4208 	movw	r2, #5128	@ 0x1408
 801b584:	4293      	cmp	r3, r2
 801b586:	d803      	bhi.n	801b590 <HAL_PWR_PVDCallback+0x198>
					(my_SMS_cnt > SMS_MAX))
 801b588:	4b34      	ldr	r3, [pc, #208]	@ (801b65c <HAL_PWR_PVDCallback+0x264>)
 801b58a:	781b      	ldrb	r3, [r3, #0]
					(my_Cmode != EOC && HAL_LPTIM_ReadCounter(&hlptim1) > T_SMW) ||
 801b58c:	2b05      	cmp	r3, #5
 801b58e:	d909      	bls.n	801b5a4 <HAL_PWR_PVDCallback+0x1ac>
				my_Trise_time_start = HAL_LPTIM_ReadCounter(&hlptim1);  		// Measure Starting Trise Time
 801b590:	4831      	ldr	r0, [pc, #196]	@ (801b658 <HAL_PWR_PVDCallback+0x260>)
 801b592:	f001 fe93 	bl	801d2bc <HAL_LPTIM_ReadCounter>
 801b596:	4603      	mov	r3, r0
 801b598:	b29a      	uxth	r2, r3
 801b59a:	4b31      	ldr	r3, [pc, #196]	@ (801b660 <HAL_PWR_PVDCallback+0x268>)
 801b59c:	801a      	strh	r2, [r3, #0]
				my_Next_State = AIS;  											// SMS --> AIS
 801b59e:	4b27      	ldr	r3, [pc, #156]	@ (801b63c <HAL_PWR_PVDCallback+0x244>)
 801b5a0:	2209      	movs	r2, #9
 801b5a2:	701a      	strb	r2, [r3, #0]
			UTIL_SEQ_SetTask((1 <<CFG_SEQ_Task_EHF ), CFG_SEQ_Prio_0); 			// My_EHF
 801b5a4:	2100      	movs	r1, #0
 801b5a6:	2020      	movs	r0, #32
 801b5a8:	f7fe fc10 	bl	8019dcc <UTIL_SEQ_SetTask>
			break;
 801b5ac:	e042      	b.n	801b634 <HAL_PWR_PVDCallback+0x23c>
			My_VDD_to_ES_Switch(Switch_OPEN);									// Open the Switch between Vdd and ES
 801b5ae:	2000      	movs	r0, #0
 801b5b0:	f001 fa98 	bl	801cae4 <My_VDD_to_ES_Switch>
			my_Cmode = EOC;  													// The Storage Element is in EOC since the PVD has been triggered with the VEOC threshold while in EMS.
 801b5b4:	4b25      	ldr	r3, [pc, #148]	@ (801b64c <HAL_PWR_PVDCallback+0x254>)
 801b5b6:	2202      	movs	r2, #2
 801b5b8:	701a      	strb	r2, [r3, #0]
			My_EMS_to_EDS_Timer(STOP_TIMER);  									// Stop the EMS to EDS Timer
 801b5ba:	2001      	movs	r0, #1
 801b5bc:	f000 fcd2 	bl	801bf64 <My_EMS_to_EDS_Timer>
			My_EMS_to_SMS_Timer(STOP_TIMER);  									// Stop the EMS to SMS Timer
 801b5c0:	2001      	movs	r0, #1
 801b5c2:	f000 fcf1 	bl	801bfa8 <My_EMS_to_SMS_Timer>
			my_ems_index = 0;  													// Reset the index used to fill the buffer that contains the measurements performed during the ems state
 801b5c6:	4b27      	ldr	r3, [pc, #156]	@ (801b664 <HAL_PWR_PVDCallback+0x26c>)
 801b5c8:	2200      	movs	r2, #0
 801b5ca:	701a      	strb	r2, [r3, #0]
			my_Current_State = EHS;  											// Set Current State as EHS: 	EMS --> EHS
 801b5cc:	4b1c      	ldr	r3, [pc, #112]	@ (801b640 <HAL_PWR_PVDCallback+0x248>)
 801b5ce:	2203      	movs	r2, #3
 801b5d0:	701a      	strb	r2, [r3, #0]
			my_Next_State = RTS;  												// Set Next State as RTS: 		EMS --> EHS --> RTS
 801b5d2:	4b1a      	ldr	r3, [pc, #104]	@ (801b63c <HAL_PWR_PVDCallback+0x244>)
 801b5d4:	2202      	movs	r2, #2
 801b5d6:	701a      	strb	r2, [r3, #0]
			UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_EHF), CFG_SEQ_Prio_0);  		// My_EHF - Back to Harvest
 801b5d8:	2100      	movs	r1, #0
 801b5da:	2020      	movs	r0, #32
 801b5dc:	f7fe fbf6 	bl	8019dcc <UTIL_SEQ_SetTask>
			break;
 801b5e0:	e028      	b.n	801b634 <HAL_PWR_PVDCallback+0x23c>
			My_VDD_to_ES_Switch(Switch_OPEN);  									// Open the Switch connected to the Storage element
 801b5e2:	2000      	movs	r0, #0
 801b5e4:	f001 fa7e 	bl	801cae4 <My_VDD_to_ES_Switch>
			my_Cmode = DCM;  													// Assume that the Energy Storage Device (ESD) is discharged
 801b5e8:	4b18      	ldr	r3, [pc, #96]	@ (801b64c <HAL_PWR_PVDCallback+0x254>)
 801b5ea:	2200      	movs	r2, #0
 801b5ec:	701a      	strb	r2, [r3, #0]
			My_EDS_Timer(STOP_TIMER);  											// Stop the EDS Timer
 801b5ee:	2001      	movs	r0, #1
 801b5f0:	f000 fc5a 	bl	801bea8 <My_EDS_Timer>
			My_EMS_to_SMS_Timer(STOP_TIMER);									// Stop the EMS_to_SMS Timer
 801b5f4:	2001      	movs	r0, #1
 801b5f6:	f000 fcd7 	bl	801bfa8 <My_EMS_to_SMS_Timer>
			my_rtc_A_ems_flag = 0;
 801b5fa:	4b1b      	ldr	r3, [pc, #108]	@ (801b668 <HAL_PWR_PVDCallback+0x270>)
 801b5fc:	2200      	movs	r2, #0
 801b5fe:	701a      	strb	r2, [r3, #0]
			my_rtc_B_ems_flag = 0;
 801b600:	4b1a      	ldr	r3, [pc, #104]	@ (801b66c <HAL_PWR_PVDCallback+0x274>)
 801b602:	2200      	movs	r2, #0
 801b604:	701a      	strb	r2, [r3, #0]
			my_RTS_cnt = 0;  													// Resets the transmissions counter
 801b606:	4b10      	ldr	r3, [pc, #64]	@ (801b648 <HAL_PWR_PVDCallback+0x250>)
 801b608:	2200      	movs	r2, #0
 801b60a:	701a      	strb	r2, [r3, #0]
			my_ems_index = 0;  													// Reset the index used to fill the buffer that contains the measurements performed during the ems state
 801b60c:	4b15      	ldr	r3, [pc, #84]	@ (801b664 <HAL_PWR_PVDCallback+0x26c>)
 801b60e:	2200      	movs	r2, #0
 801b610:	701a      	strb	r2, [r3, #0]
			UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_RTF), CFG_SEQ_Prio_0);  		// SendTxData
 801b612:	2100      	movs	r1, #0
 801b614:	2010      	movs	r0, #16
 801b616:	f7fe fbd9 	bl	8019dcc <UTIL_SEQ_SetTask>
			break;
 801b61a:	e00b      	b.n	801b634 <HAL_PWR_PVDCallback+0x23c>
			my_Current_State = EHS;  											// Set Current State as EHS
 801b61c:	4b08      	ldr	r3, [pc, #32]	@ (801b640 <HAL_PWR_PVDCallback+0x248>)
 801b61e:	2203      	movs	r2, #3
 801b620:	701a      	strb	r2, [r3, #0]
			my_Next_State = SMS;												// Set Next State as SMS
 801b622:	4b06      	ldr	r3, [pc, #24]	@ (801b63c <HAL_PWR_PVDCallback+0x244>)
 801b624:	2207      	movs	r2, #7
 801b626:	701a      	strb	r2, [r3, #0]
			UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SMF), CFG_SEQ_Prio_0);  		// My_SMF -- SMF = Sensors Measurement Function
 801b628:	2100      	movs	r1, #0
 801b62a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801b62e:	f7fe fbcd 	bl	8019dcc <UTIL_SEQ_SetTask>
			break;
 801b632:	bf00      	nop
}
 801b634:	bf00      	nop
 801b636:	bd80      	pop	{r7, pc}
 801b638:	2000074c 	.word	0x2000074c
 801b63c:	20000638 	.word	0x20000638
 801b640:	20001be9 	.word	0x20001be9
 801b644:	200008a7 	.word	0x200008a7
 801b648:	20001bba 	.word	0x20001bba
 801b64c:	20001bea 	.word	0x20001bea
 801b650:	20001bc0 	.word	0x20001bc0
 801b654:	080210e8 	.word	0x080210e8
 801b658:	20001b40 	.word	0x20001b40
 801b65c:	20001bbc 	.word	0x20001bbc
 801b660:	20001bc2 	.word	0x20001bc2
 801b664:	20001bbd 	.word	0x20001bbd
 801b668:	20001bbe 	.word	0x20001bbe
 801b66c:	20001bbf 	.word	0x20001bbf

0801b670 <HAL_LPTIM_AutoReloadMatchCallback>:

void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)	// LPTIM Callback
{
 801b670:	b580      	push	{r7, lr}
 801b672:	b082      	sub	sp, #8
 801b674:	af00      	add	r7, sp, #0
 801b676:	6078      	str	r0, [r7, #4]
	if(hlptim->Instance == LPTIM1)
 801b678:	687b      	ldr	r3, [r7, #4]
 801b67a:	681b      	ldr	r3, [r3, #0]
 801b67c:	4a36      	ldr	r2, [pc, #216]	@ (801b758 <HAL_LPTIM_AutoReloadMatchCallback+0xe8>)
 801b67e:	4293      	cmp	r3, r2
 801b680:	d166      	bne.n	801b750 <HAL_LPTIM_AutoReloadMatchCallback+0xe0>
	{
		switch(my_Current_State)
 801b682:	4b36      	ldr	r3, [pc, #216]	@ (801b75c <HAL_LPTIM_AutoReloadMatchCallback+0xec>)
 801b684:	781b      	ldrb	r3, [r3, #0]
 801b686:	3b03      	subs	r3, #3
 801b688:	2b03      	cmp	r3, #3
 801b68a:	d854      	bhi.n	801b736 <HAL_LPTIM_AutoReloadMatchCallback+0xc6>
 801b68c:	a201      	add	r2, pc, #4	@ (adr r2, 801b694 <HAL_LPTIM_AutoReloadMatchCallback+0x24>)
 801b68e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b692:	bf00      	nop
 801b694:	0801b6a5 	.word	0x0801b6a5
 801b698:	0801b6e3 	.word	0x0801b6e3
 801b69c:	0801b70d 	.word	0x0801b70d
 801b6a0:	0801b71b 	.word	0x0801b71b
		{
		case EHS: 															// EHS = Energy Harvesting State
		{
			switch (my_Next_State)
 801b6a4:	4b2e      	ldr	r3, [pc, #184]	@ (801b760 <HAL_LPTIM_AutoReloadMatchCallback+0xf0>)
 801b6a6:	781b      	ldrb	r3, [r3, #0]
 801b6a8:	2b04      	cmp	r3, #4
 801b6aa:	d10d      	bne.n	801b6c8 <HAL_LPTIM_AutoReloadMatchCallback+0x58>
			{
			case ESS:
			{

#if MY_SM_FEATURE_ENABLE
				my_Next_State = SMS; 										// 	ESS --> SMS
 801b6ac:	4b2c      	ldr	r3, [pc, #176]	@ (801b760 <HAL_LPTIM_AutoReloadMatchCallback+0xf0>)
 801b6ae:	2207      	movs	r2, #7
 801b6b0:	701a      	strb	r2, [r3, #0]
#else
				my_Next_State = RTS; 										// ESS -->  RTS
#endif

				My_DCM_to_CCM_Timer(STOP_TIMER);							// Stop the DCM to CCM Timer
 801b6b2:	2001      	movs	r0, #1
 801b6b4:	f000 fc34 	bl	801bf20 <My_DCM_to_CCM_Timer>
				My_ESW_CCM_Timer(STOP_TIMER);								// Stop ESW Timer
 801b6b8:	2001      	movs	r0, #1
 801b6ba:	f000 fba9 	bl	801be10 <My_ESW_CCM_Timer>

				UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_EHF), CFG_SEQ_Prio_0);	// My_EHF -- Back to Harvest
 801b6be:	2100      	movs	r1, #0
 801b6c0:	2020      	movs	r0, #32
 801b6c2:	f7fe fb83 	bl	8019dcc <UTIL_SEQ_SetTask>
				break;
 801b6c6:	e00b      	b.n	801b6e0 <HAL_LPTIM_AutoReloadMatchCallback+0x70>
			}

			default:
			{
				my_Current_State = EHS;  									// Set Current State as EHS
 801b6c8:	4b24      	ldr	r3, [pc, #144]	@ (801b75c <HAL_LPTIM_AutoReloadMatchCallback+0xec>)
 801b6ca:	2203      	movs	r2, #3
 801b6cc:	701a      	strb	r2, [r3, #0]
				my_Next_State = SMS;										// Set Next State as SMS
 801b6ce:	4b24      	ldr	r3, [pc, #144]	@ (801b760 <HAL_LPTIM_AutoReloadMatchCallback+0xf0>)
 801b6d0:	2207      	movs	r2, #7
 801b6d2:	701a      	strb	r2, [r3, #0]
				UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SMF), CFG_SEQ_Prio_0);  // My_SMF -- SMF = Sensors Measurement Function
 801b6d4:	2100      	movs	r1, #0
 801b6d6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801b6da:	f7fe fb77 	bl	8019dcc <UTIL_SEQ_SetTask>
				break;
 801b6de:	bf00      	nop
			}
			}

			break;
 801b6e0:	e036      	b.n	801b750 <HAL_LPTIM_AutoReloadMatchCallback+0xe0>
		}

		case ESS:															// ESS = Energy Storage State
		{
			if (my_Cmode != DCM)
 801b6e2:	4b20      	ldr	r3, [pc, #128]	@ (801b764 <HAL_LPTIM_AutoReloadMatchCallback+0xf4>)
 801b6e4:	781b      	ldrb	r3, [r3, #0]
 801b6e6:	2b00      	cmp	r3, #0
 801b6e8:	d031      	beq.n	801b74e <HAL_LPTIM_AutoReloadMatchCallback+0xde>
			{
#if MY_SM_FEATURE_ENABLE
				my_Next_State = SMS;										// Set Next State as SMS: ESS --> EHS --> SMS
 801b6ea:	4b1d      	ldr	r3, [pc, #116]	@ (801b760 <HAL_LPTIM_AutoReloadMatchCallback+0xf0>)
 801b6ec:	2207      	movs	r2, #7
 801b6ee:	701a      	strb	r2, [r3, #0]
#else
				my_Next_State = RTS;										// Set Next State as RTS: ESS --> EHS --> RTS
#endif

				my_Current_State = EHS;										// Set Current State as EHS: ESS --> EHS
 801b6f0:	4b1a      	ldr	r3, [pc, #104]	@ (801b75c <HAL_LPTIM_AutoReloadMatchCallback+0xec>)
 801b6f2:	2203      	movs	r2, #3
 801b6f4:	701a      	strb	r2, [r3, #0]

				My_DCM_to_CCM_Timer(STOP_TIMER);							// Stop the DCM to CCM Timer
 801b6f6:	2001      	movs	r0, #1
 801b6f8:	f000 fc12 	bl	801bf20 <My_DCM_to_CCM_Timer>
				My_ESW_CCM_Timer(STOP_TIMER);									// Stop ESW Timer
 801b6fc:	2001      	movs	r0, #1
 801b6fe:	f000 fb87 	bl	801be10 <My_ESW_CCM_Timer>

				UTIL_SEQ_SetTask((1 <<CFG_SEQ_Task_EHF ), CFG_SEQ_Prio_0);	// My_EHF -- Back to Harvest
 801b702:	2100      	movs	r1, #0
 801b704:	2020      	movs	r0, #32
 801b706:	f7fe fb61 	bl	8019dcc <UTIL_SEQ_SetTask>
			}
			break;
 801b70a:	e020      	b.n	801b74e <HAL_LPTIM_AutoReloadMatchCallback+0xde>
		}

		case EMS:															// EMS = Energy Missing State
		{
			My_EDS_Timer(STOP_TIMER); 										// Stop the Energy Detection Timer
 801b70c:	2001      	movs	r0, #1
 801b70e:	f000 fbcb 	bl	801bea8 <My_EDS_Timer>
			my_rm_failure_flag = 1; 										// Resistance Measurement in EMS State has failed because the LPTIM1 Interrupt has been triggered earlier than the COMP Interrupt
 801b712:	4b15      	ldr	r3, [pc, #84]	@ (801b768 <HAL_LPTIM_AutoReloadMatchCallback+0xf8>)
 801b714:	2201      	movs	r2, #1
 801b716:	701a      	strb	r2, [r3, #0]
			break;
 801b718:	e01a      	b.n	801b750 <HAL_LPTIM_AutoReloadMatchCallback+0xe0>
		}

		case EDS:															// EDS = Energy Detection State
		{
			My_EMS_to_EDS_Timer(START_TIMER); 								// Start the Timer for the Energy Presence Check (EDC)
 801b71a:	2000      	movs	r0, #0
 801b71c:	f000 fc22 	bl	801bf64 <My_EMS_to_EDS_Timer>
			My_VDD_to_ES_Switch(Switch_CLOSED);								// Close the switch Between Vdd and ES Start Supplying from the Energy Storage Device (ESD)
 801b720:	2001      	movs	r0, #1
 801b722:	f001 f9df 	bl	801cae4 <My_VDD_to_ES_Switch>

#if MY_SHT40 && MY_STHS34PF80 && MY_STTS22H && STEVAL_HARVEST1
			My_VDD_to_VDDS2_Switch(Switch_OPEN);							// unBias the Sensors: Open the switch between VDD and VDDS2
#endif

			my_Current_State = EMS; 										// Set Current State as EMS: EDS --> EMS
 801b726:	4b0d      	ldr	r3, [pc, #52]	@ (801b75c <HAL_LPTIM_AutoReloadMatchCallback+0xec>)
 801b728:	2205      	movs	r2, #5
 801b72a:	701a      	strb	r2, [r3, #0]
			UTIL_SEQ_SetTask((1 <<CFG_SEQ_Task_EHF), CFG_SEQ_Prio_0);		// My_EHF -- Back to Harvest
 801b72c:	2100      	movs	r1, #0
 801b72e:	2020      	movs	r0, #32
 801b730:	f7fe fb4c 	bl	8019dcc <UTIL_SEQ_SetTask>
			break;
 801b734:	e00c      	b.n	801b750 <HAL_LPTIM_AutoReloadMatchCallback+0xe0>
		}

		default:
		{
			my_Current_State = EHS;  										// Set Current State as EHS
 801b736:	4b09      	ldr	r3, [pc, #36]	@ (801b75c <HAL_LPTIM_AutoReloadMatchCallback+0xec>)
 801b738:	2203      	movs	r2, #3
 801b73a:	701a      	strb	r2, [r3, #0]
			my_Next_State = SMS;											// Set Next State as SMS
 801b73c:	4b08      	ldr	r3, [pc, #32]	@ (801b760 <HAL_LPTIM_AutoReloadMatchCallback+0xf0>)
 801b73e:	2207      	movs	r2, #7
 801b740:	701a      	strb	r2, [r3, #0]
			UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SMF), CFG_SEQ_Prio_0);  	// My_SMF -- SMF = Sensors Measurement Function
 801b742:	2100      	movs	r1, #0
 801b744:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801b748:	f7fe fb40 	bl	8019dcc <UTIL_SEQ_SetTask>
			break;
 801b74c:	e000      	b.n	801b750 <HAL_LPTIM_AutoReloadMatchCallback+0xe0>
			break;
 801b74e:	bf00      	nop
		}
		}
	}
}
 801b750:	bf00      	nop
 801b752:	3708      	adds	r7, #8
 801b754:	46bd      	mov	sp, r7
 801b756:	bd80      	pop	{r7, pc}
 801b758:	40007c00 	.word	0x40007c00
 801b75c:	20001be9 	.word	0x20001be9
 801b760:	20000638 	.word	0x20000638
 801b764:	20001bea 	.word	0x20001bea
 801b768:	20001bc8 	.word	0x20001bc8

0801b76c <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)			// RTC Alarm A CallBack
{
 801b76c:	b580      	push	{r7, lr}
 801b76e:	b082      	sub	sp, #8
 801b770:	af00      	add	r7, sp, #0
 801b772:	6078      	str	r0, [r7, #4]

	switch(my_Current_State)
 801b774:	4b11      	ldr	r3, [pc, #68]	@ (801b7bc <HAL_RTC_AlarmAEventCallback+0x50>)
 801b776:	781b      	ldrb	r3, [r3, #0]
 801b778:	2b05      	cmp	r3, #5
 801b77a:	d002      	beq.n	801b782 <HAL_RTC_AlarmAEventCallback+0x16>
 801b77c:	2b07      	cmp	r3, #7
 801b77e:	d00e      	beq.n	801b79e <HAL_RTC_AlarmAEventCallback+0x32>
	default:
	{
#if MY_TX_OTAA
		UTIL_TIMER_IRQ_Handler();
#endif
		break;
 801b780:	e018      	b.n	801b7b4 <HAL_RTC_AlarmAEventCallback+0x48>
		My_EMS_to_SMS_Timer(STOP_TIMER);							// Stop EMS to SMS Timer
 801b782:	2001      	movs	r0, #1
 801b784:	f000 fc10 	bl	801bfa8 <My_EMS_to_SMS_Timer>
		my_rtc_A_ems_flag = 0;
 801b788:	4b0d      	ldr	r3, [pc, #52]	@ (801b7c0 <HAL_RTC_AlarmAEventCallback+0x54>)
 801b78a:	2200      	movs	r2, #0
 801b78c:	701a      	strb	r2, [r3, #0]
		my_Current_State = EMS;										// Set Current State as EMS
 801b78e:	4b0b      	ldr	r3, [pc, #44]	@ (801b7bc <HAL_RTC_AlarmAEventCallback+0x50>)
 801b790:	2205      	movs	r2, #5
 801b792:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask((1 <<CFG_SEQ_Task_EHF ), CFG_SEQ_Prio_0); 	// My_EHF
 801b794:	2100      	movs	r1, #0
 801b796:	2020      	movs	r0, #32
 801b798:	f7fe fb18 	bl	8019dcc <UTIL_SEQ_SetTask>
		break;
 801b79c:	e00a      	b.n	801b7b4 <HAL_RTC_AlarmAEventCallback+0x48>
		My_VDD_to_VDDS2_Switch(Switch_OPEN);						// unBias the Sensors: Open the switch between VDD and VDDS2
 801b79e:	2000      	movs	r0, #0
 801b7a0:	f001 fa1e 	bl	801cbe0 <My_VDD_to_VDDS2_Switch>
		my_Current_State = EHS;										// Set Current State as EHS
 801b7a4:	4b05      	ldr	r3, [pc, #20]	@ (801b7bc <HAL_RTC_AlarmAEventCallback+0x50>)
 801b7a6:	2203      	movs	r2, #3
 801b7a8:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask((1 <<CFG_SEQ_Task_EHF ), CFG_SEQ_Prio_0); 	// My_EHF
 801b7aa:	2100      	movs	r1, #0
 801b7ac:	2020      	movs	r0, #32
 801b7ae:	f7fe fb0d 	bl	8019dcc <UTIL_SEQ_SetTask>
		break;
 801b7b2:	bf00      	nop
	}
	}
}
 801b7b4:	bf00      	nop
 801b7b6:	3708      	adds	r7, #8
 801b7b8:	46bd      	mov	sp, r7
 801b7ba:	bd80      	pop	{r7, pc}
 801b7bc:	20001be9 	.word	0x20001be9
 801b7c0:	20001bbe 	.word	0x20001bbe

0801b7c4 <HAL_RTCEx_AlarmBEventCallback>:

void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)	// RTC Alarm B CallBack
{
 801b7c4:	b580      	push	{r7, lr}
 801b7c6:	b082      	sub	sp, #8
 801b7c8:	af00      	add	r7, sp, #0
 801b7ca:	6078      	str	r0, [r7, #4]
	switch (my_Current_State)
 801b7cc:	4b3e      	ldr	r3, [pc, #248]	@ (801b8c8 <HAL_RTCEx_AlarmBEventCallback+0x104>)
 801b7ce:	781b      	ldrb	r3, [r3, #0]
 801b7d0:	2b05      	cmp	r3, #5
 801b7d2:	d04e      	beq.n	801b872 <HAL_RTCEx_AlarmBEventCallback+0xae>
 801b7d4:	2b05      	cmp	r3, #5
 801b7d6:	dc67      	bgt.n	801b8a8 <HAL_RTCEx_AlarmBEventCallback+0xe4>
 801b7d8:	2b03      	cmp	r3, #3
 801b7da:	d034      	beq.n	801b846 <HAL_RTCEx_AlarmBEventCallback+0x82>
 801b7dc:	2b04      	cmp	r3, #4
 801b7de:	d163      	bne.n	801b8a8 <HAL_RTCEx_AlarmBEventCallback+0xe4>
		/* The Time Measured by the RTC Alarm B Timer has gone beyond T_DCM_CCM
		 * The system switches from Discontinuous Charge Mode (DCM) to Continuous Charge Mode (CCM)
		 */

	{
		My_Set_PVD(VPS_CHECK, PWR_PVD_MODE_NORMAL);						// Configures PVD at the Highest Voltage and Normal Mode
 801b7e0:	2100      	movs	r1, #0
 801b7e2:	200c      	movs	r0, #12
 801b7e4:	f000 fee2 	bl	801c5ac <My_Set_PVD>
		My_HAL_Delay(100);												// Add Delay to settle PVD
 801b7e8:	2064      	movs	r0, #100	@ 0x64
 801b7ea:	f001 fa41 	bl	801cc70 <My_HAL_Delay>

		if (__HAL_PWR_GET_FLAG(PWR_FLAG_PVDO) == 0)						// If VDD is > VPS_CHECK and Internal Reference is Ready
 801b7ee:	4b37      	ldr	r3, [pc, #220]	@ (801b8cc <HAL_RTCEx_AlarmBEventCallback+0x108>)
 801b7f0:	695b      	ldr	r3, [r3, #20]
 801b7f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801b7f6:	2b00      	cmp	r3, #0
 801b7f8:	d111      	bne.n	801b81e <HAL_RTCEx_AlarmBEventCallback+0x5a>
		{
			my_Check_ESD = 1;
 801b7fa:	4b35      	ldr	r3, [pc, #212]	@ (801b8d0 <HAL_RTCEx_AlarmBEventCallback+0x10c>)
 801b7fc:	2201      	movs	r2, #1
 801b7fe:	701a      	strb	r2, [r3, #0]
			My_VDD_to_ES_Switch(Switch_OPEN);							// Open the VDD to ES Switch
 801b800:	2000      	movs	r0, #0
 801b802:	f001 f96f 	bl	801cae4 <My_VDD_to_ES_Switch>
			my_Current_State = SMS;										// Set Current State as SMS
 801b806:	4b30      	ldr	r3, [pc, #192]	@ (801b8c8 <HAL_RTCEx_AlarmBEventCallback+0x104>)
 801b808:	2207      	movs	r2, #7
 801b80a:	701a      	strb	r2, [r3, #0]
			my_Next_State = SMS;										// Set Next State as SMS
 801b80c:	4b31      	ldr	r3, [pc, #196]	@ (801b8d4 <HAL_RTCEx_AlarmBEventCallback+0x110>)
 801b80e:	2207      	movs	r2, #7
 801b810:	701a      	strb	r2, [r3, #0]
			UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SMF), CFG_SEQ_Prio_0); 	// My_SMF = Sensors Measurement Function
 801b812:	2100      	movs	r1, #0
 801b814:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801b818:	f7fe fad8 	bl	8019dcc <UTIL_SEQ_SetTask>
 801b81c:	e00f      	b.n	801b83e <HAL_RTCEx_AlarmBEventCallback+0x7a>
		}
		else
		{
			my_Cmode = CCM;												// Switch to Continuous Charge Mode
 801b81e:	4b2e      	ldr	r3, [pc, #184]	@ (801b8d8 <HAL_RTCEx_AlarmBEventCallback+0x114>)
 801b820:	2201      	movs	r2, #1
 801b822:	701a      	strb	r2, [r3, #0]
			My_ESW_DCM_Timer(STOP_TIMER);								// Stop ESW DCM Timer
 801b824:	2001      	movs	r0, #1
 801b826:	f000 facd 	bl	801bdc4 <My_ESW_DCM_Timer>
			My_ESW_CCM_Timer(START_TIMER);								// Start ESW CCM Timer
 801b82a:	2000      	movs	r0, #0
 801b82c:	f000 faf0 	bl	801be10 <My_ESW_CCM_Timer>

			my_Current_State = ESS;										// System keeps Staying in Energy Storage State (ESS)
 801b830:	4b25      	ldr	r3, [pc, #148]	@ (801b8c8 <HAL_RTCEx_AlarmBEventCallback+0x104>)
 801b832:	2204      	movs	r2, #4
 801b834:	701a      	strb	r2, [r3, #0]
			UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_ESF), CFG_SEQ_Prio_0); 	// My_ESF = Energy Storage Function
 801b836:	2100      	movs	r1, #0
 801b838:	2040      	movs	r0, #64	@ 0x40
 801b83a:	f7fe fac7 	bl	8019dcc <UTIL_SEQ_SetTask>
		}

		My_DCM_to_CCM_Timer(STOP_TIMER);								// Stop DCM to CCM Timer
 801b83e:	2001      	movs	r0, #1
 801b840:	f000 fb6e 	bl	801bf20 <My_DCM_to_CCM_Timer>

		break;
 801b844:	e03c      	b.n	801b8c0 <HAL_RTCEx_AlarmBEventCallback+0xfc>
	}

	/* If RTC ALARM B is triggered during EHS: EHS --> EMS to manage Energy absence*/
	case EHS: 														// EHS = Energy Harvesting State
	{
		My_EHS_to_EMS_Timer(STOP_TIMER); 							// Stop EHS_to_EMS Timer
 801b846:	2001      	movs	r0, #1
 801b848:	f000 fb48 	bl	801bedc <My_EHS_to_EMS_Timer>
		HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_A);					// Stop RTC A Alarm
 801b84c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801b850:	6878      	ldr	r0, [r7, #4]
 801b852:	f7eb f8a1 	bl	8006998 <HAL_RTC_DeactivateAlarm>

		my_rtc_B_ems_flag = 0;
 801b856:	4b21      	ldr	r3, [pc, #132]	@ (801b8dc <HAL_RTCEx_AlarmBEventCallback+0x118>)
 801b858:	2200      	movs	r2, #0
 801b85a:	701a      	strb	r2, [r3, #0]
		my_rtc_A_ems_flag = 0;
 801b85c:	4b20      	ldr	r3, [pc, #128]	@ (801b8e0 <HAL_RTCEx_AlarmBEventCallback+0x11c>)
 801b85e:	2200      	movs	r2, #0
 801b860:	701a      	strb	r2, [r3, #0]

		my_Current_State = EMS;										// Set Current State as EMS: EHS --> EMS
 801b862:	4b19      	ldr	r3, [pc, #100]	@ (801b8c8 <HAL_RTCEx_AlarmBEventCallback+0x104>)
 801b864:	2205      	movs	r2, #5
 801b866:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask((1 <<CFG_SEQ_Task_EHF ), CFG_SEQ_Prio_0);  // My_EHF -- Back to Harvest
 801b868:	2100      	movs	r1, #0
 801b86a:	2020      	movs	r0, #32
 801b86c:	f7fe faae 	bl	8019dcc <UTIL_SEQ_SetTask>
		break;
 801b870:	e026      	b.n	801b8c0 <HAL_RTCEx_AlarmBEventCallback+0xfc>
	}

	/*If the Alarm B has been Triggered during the EMS a EDS is performed */
	case EMS: 														// EMS = Energy missing State
	{
		My_VDD_to_ES_Switch(Switch_OPEN);							// Open The Switch Beteween Vdd and ES
 801b872:	2000      	movs	r0, #0
 801b874:	f001 f936 	bl	801cae4 <My_VDD_to_ES_Switch>

		HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_A);					// Deactivate Alarm A
 801b878:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801b87c:	6878      	ldr	r0, [r7, #4]
 801b87e:	f7eb f88b 	bl	8006998 <HAL_RTC_DeactivateAlarm>
		HAL_RTC_DeactivateAlarm(hrtc, RTC_ALARM_B);					// Deactivate Alarm B
 801b882:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801b886:	6878      	ldr	r0, [r7, #4]
 801b888:	f7eb f886 	bl	8006998 <HAL_RTC_DeactivateAlarm>

		my_rtc_B_ems_flag = 0;
 801b88c:	4b13      	ldr	r3, [pc, #76]	@ (801b8dc <HAL_RTCEx_AlarmBEventCallback+0x118>)
 801b88e:	2200      	movs	r2, #0
 801b890:	701a      	strb	r2, [r3, #0]
		my_rtc_A_ems_flag = 0;
 801b892:	4b13      	ldr	r3, [pc, #76]	@ (801b8e0 <HAL_RTCEx_AlarmBEventCallback+0x11c>)
 801b894:	2200      	movs	r2, #0
 801b896:	701a      	strb	r2, [r3, #0]

		my_Current_State = EDS; 									// Set Current State as EDS: EMS --> EDS
 801b898:	4b0b      	ldr	r3, [pc, #44]	@ (801b8c8 <HAL_RTCEx_AlarmBEventCallback+0x104>)
 801b89a:	2206      	movs	r2, #6
 801b89c:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask((1 <<CFG_SEQ_Task_EHF ), CFG_SEQ_Prio_0);	// My_EHF
 801b89e:	2100      	movs	r1, #0
 801b8a0:	2020      	movs	r0, #32
 801b8a2:	f7fe fa93 	bl	8019dcc <UTIL_SEQ_SetTask>
		break;
 801b8a6:	e00b      	b.n	801b8c0 <HAL_RTCEx_AlarmBEventCallback+0xfc>

	default:
	{

#if MY_TX_ABP
		my_Current_State = EHS;  									// Set Current State as EHS
 801b8a8:	4b07      	ldr	r3, [pc, #28]	@ (801b8c8 <HAL_RTCEx_AlarmBEventCallback+0x104>)
 801b8aa:	2203      	movs	r2, #3
 801b8ac:	701a      	strb	r2, [r3, #0]
		my_Next_State = SMS;										// Set Next State as SMS
 801b8ae:	4b09      	ldr	r3, [pc, #36]	@ (801b8d4 <HAL_RTCEx_AlarmBEventCallback+0x110>)
 801b8b0:	2207      	movs	r2, #7
 801b8b2:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SMF), CFG_SEQ_Prio_0);  // My_SMF -- SMF = Sensors Measurement Function
 801b8b4:	2100      	movs	r1, #0
 801b8b6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801b8ba:	f7fe fa87 	bl	8019dcc <UTIL_SEQ_SetTask>
#endif
		break;
 801b8be:	bf00      	nop
	}

	}
}
 801b8c0:	bf00      	nop
 801b8c2:	3708      	adds	r7, #8
 801b8c4:	46bd      	mov	sp, r7
 801b8c6:	bd80      	pop	{r7, pc}
 801b8c8:	20001be9 	.word	0x20001be9
 801b8cc:	58000400 	.word	0x58000400
 801b8d0:	20001bc0 	.word	0x20001bc0
 801b8d4:	20000638 	.word	0x20000638
 801b8d8:	20001bea 	.word	0x20001bea
 801b8dc:	20001bbf 	.word	0x20001bbf
 801b8e0:	20001bbe 	.word	0x20001bbe

0801b8e4 <My_RTC_Init>:

/* CallBack Section End */
/*my rtc init*/
void My_RTC_Init(void)
{
 801b8e4:	b580      	push	{r7, lr}
 801b8e6:	b092      	sub	sp, #72	@ 0x48
 801b8e8:	af00      	add	r7, sp, #0
#if MY_RTC_INIT
	HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);								// Disable Interrupt for RTC Alarms (A and B) Interrupt
 801b8ea:	202a      	movs	r0, #42	@ 0x2a
 801b8ec:	f7e7 fbbd 	bl	800306a <HAL_NVIC_DisableIRQ>

	RTC_TimeTypeDef sTime = {0};
 801b8f0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801b8f4:	2200      	movs	r2, #0
 801b8f6:	601a      	str	r2, [r3, #0]
 801b8f8:	605a      	str	r2, [r3, #4]
 801b8fa:	609a      	str	r2, [r3, #8]
 801b8fc:	60da      	str	r2, [r3, #12]
 801b8fe:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = {0};
 801b900:	2300      	movs	r3, #0
 801b902:	633b      	str	r3, [r7, #48]	@ 0x30
	RTC_AlarmTypeDef sAlarm = {0};
 801b904:	1d3b      	adds	r3, r7, #4
 801b906:	222c      	movs	r2, #44	@ 0x2c
 801b908:	2100      	movs	r1, #0
 801b90a:	4618      	mov	r0, r3
 801b90c:	f003 ffea 	bl	801f8e4 <memset>
#define CFG_RTC_SYNCH_PRESCALER     (DIVR( LSE_VALUE, (CFG_RTC_ASYNCH_PRESCALER+1) ) - 1 )
	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 801b910:	4b3f      	ldr	r3, [pc, #252]	@ (801ba10 <My_RTC_Init+0x12c>)
 801b912:	4a40      	ldr	r2, [pc, #256]	@ (801ba14 <My_RTC_Init+0x130>)
 801b914:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 801b916:	4b3e      	ldr	r3, [pc, #248]	@ (801ba10 <My_RTC_Init+0x12c>)
 801b918:	2200      	movs	r2, #0
 801b91a:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 801b91c:	4b3c      	ldr	r3, [pc, #240]	@ (801ba10 <My_RTC_Init+0x12c>)
 801b91e:	220f      	movs	r2, #15
 801b920:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 801b922:	4b3b      	ldr	r3, [pc, #236]	@ (801ba10 <My_RTC_Init+0x12c>)
 801b924:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 801b928:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 801b92a:	4b39      	ldr	r3, [pc, #228]	@ (801ba10 <My_RTC_Init+0x12c>)
 801b92c:	2200      	movs	r2, #0
 801b92e:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 801b930:	4b37      	ldr	r3, [pc, #220]	@ (801ba10 <My_RTC_Init+0x12c>)
 801b932:	2200      	movs	r2, #0
 801b934:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 801b936:	4b36      	ldr	r3, [pc, #216]	@ (801ba10 <My_RTC_Init+0x12c>)
 801b938:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 801b93c:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 801b93e:	4b34      	ldr	r3, [pc, #208]	@ (801ba10 <My_RTC_Init+0x12c>)
 801b940:	2200      	movs	r2, #0
 801b942:	615a      	str	r2, [r3, #20]
	if (HAL_RTC_Init(&hrtc) != HAL_OK)
 801b944:	4832      	ldr	r0, [pc, #200]	@ (801ba10 <My_RTC_Init+0x12c>)
 801b946:	f7ea fd15 	bl	8006374 <HAL_RTC_Init>
 801b94a:	4603      	mov	r3, r0
 801b94c:	2b00      	cmp	r3, #0
 801b94e:	d001      	beq.n	801b954 <My_RTC_Init+0x70>
	{
		Error_Handler();
 801b950:	f7e5 fcb6 	bl	80012c0 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0;
 801b954:	2300      	movs	r3, #0
 801b956:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	sTime.Minutes = 0;
 801b95a:	2300      	movs	r3, #0
 801b95c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	sTime.Seconds = 0;
 801b960:	2300      	movs	r3, #0
 801b962:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	sTime.SubSeconds = 0x0;
 801b966:	2300      	movs	r3, #0
 801b968:	63bb      	str	r3, [r7, #56]	@ 0x38
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 801b96a:	2300      	movs	r3, #0
 801b96c:	643b      	str	r3, [r7, #64]	@ 0x40
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 801b96e:	2300      	movs	r3, #0
 801b970:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 801b972:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 801b976:	2200      	movs	r2, #0
 801b978:	4619      	mov	r1, r3
 801b97a:	4825      	ldr	r0, [pc, #148]	@ (801ba10 <My_RTC_Init+0x12c>)
 801b97c:	f7ea fd7c 	bl	8006478 <HAL_RTC_SetTime>
 801b980:	4603      	mov	r3, r0
 801b982:	2b00      	cmp	r3, #0
 801b984:	d001      	beq.n	801b98a <My_RTC_Init+0xa6>
	{
		Error_Handler();
 801b986:	f7e5 fc9b 	bl	80012c0 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 801b98a:	2301      	movs	r3, #1
 801b98c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
	sDate.Month = RTC_MONTH_JANUARY;
 801b990:	2301      	movs	r3, #1
 801b992:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	sDate.Date = 1;
 801b996:	2301      	movs	r3, #1
 801b998:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	sDate.Year = 0;
 801b99c:	2300      	movs	r3, #0
 801b99e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 801b9a2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801b9a6:	2200      	movs	r2, #0
 801b9a8:	4619      	mov	r1, r3
 801b9aa:	4819      	ldr	r0, [pc, #100]	@ (801ba10 <My_RTC_Init+0x12c>)
 801b9ac:	f7ea fe62 	bl	8006674 <HAL_RTC_SetDate>
 801b9b0:	4603      	mov	r3, r0
 801b9b2:	2b00      	cmp	r3, #0
 801b9b4:	d001      	beq.n	801b9ba <My_RTC_Init+0xd6>
	{
		Error_Handler();
 801b9b6:	f7e5 fc83 	bl	80012c0 <Error_Handler>
	}

	/** Enable the Alarm A
	 */
	sAlarm.AlarmTime.Hours = 0;
 801b9ba:	2300      	movs	r3, #0
 801b9bc:	713b      	strb	r3, [r7, #4]
	sAlarm.AlarmTime.Minutes = 0;
 801b9be:	2300      	movs	r3, #0
 801b9c0:	717b      	strb	r3, [r7, #5]
	sAlarm.AlarmTime.Seconds = 0;
 801b9c2:	2300      	movs	r3, #0
 801b9c4:	71bb      	strb	r3, [r7, #6]
	sAlarm.AlarmTime.SubSeconds = 0;
 801b9c6:	2300      	movs	r3, #0
 801b9c8:	60bb      	str	r3, [r7, #8]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 801b9ca:	2300      	movs	r3, #0
 801b9cc:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 801b9ce:	2300      	movs	r3, #0
 801b9d0:	617b      	str	r3, [r7, #20]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 801b9d2:	2300      	movs	r3, #0
 801b9d4:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 801b9d6:	2300      	movs	r3, #0
 801b9d8:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 801b9da:	2300      	movs	r3, #0
 801b9dc:	627b      	str	r3, [r7, #36]	@ 0x24
	sAlarm.AlarmDateWeekDay = 1;
 801b9de:	2301      	movs	r3, #1
 801b9e0:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	sAlarm.Alarm = RTC_ALARM_A;
 801b9e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801b9e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 801b9ea:	1d3b      	adds	r3, r7, #4
 801b9ec:	2200      	movs	r2, #0
 801b9ee:	4619      	mov	r1, r3
 801b9f0:	4807      	ldr	r0, [pc, #28]	@ (801ba10 <My_RTC_Init+0x12c>)
 801b9f2:	f7ea fec5 	bl	8006780 <HAL_RTC_SetAlarm_IT>
 801b9f6:	4603      	mov	r3, r0
 801b9f8:	2b00      	cmp	r3, #0
 801b9fa:	d001      	beq.n	801ba00 <My_RTC_Init+0x11c>
	{
		Error_Handler();
 801b9fc:	f7e5 fc60 	bl	80012c0 <Error_Handler>
	}

	HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);								// Disable Interrupt for RTC Alarms (A and B) Interrupt
 801ba00:	202a      	movs	r0, #42	@ 0x2a
 801ba02:	f7e7 fb32 	bl	800306a <HAL_NVIC_DisableIRQ>
#endif
}
 801ba06:	bf00      	nop
 801ba08:	3748      	adds	r7, #72	@ 0x48
 801ba0a:	46bd      	mov	sp, r7
 801ba0c:	bd80      	pop	{r7, pc}
 801ba0e:	bf00      	nop
 801ba10:	20000750 	.word	0x20000750
 801ba14:	40002800 	.word	0x40002800

0801ba18 <My_EHF>:

/* FSM Function Begin */

void My_EHF(void)	// EHF = Energy Harvesting Function
{
 801ba18:	b580      	push	{r7, lr}
 801ba1a:	af00      	add	r7, sp, #0
	/*
	 * The EHF Function manages the Energy Harvesting feature of the system
	 */

#if !(MY_DEBUGGER_ENABLED || MY_LPTIM_Monitor || MY_RTCB_Monitor)
	My_Set_All_GPIO_To_Analog_Mode();										// Set all GPIO in Analog Mode
 801ba1c:	f000 fcf8 	bl	801c410 <My_Set_All_GPIO_To_Analog_Mode>
	My_Interrupts_Manager(NVIC_CLEAR); 										// Clear all Pending Interrupts
 801ba20:	2002      	movs	r0, #2
 801ba22:	f000 fde1 	bl	801c5e8 <My_Interrupts_Manager>
#endif

#if MY_ES_FEATURE_ENABLE
	My_VDD_to_ES_Switch(Switch_OPEN);										// Open VDD to ES Switch
 801ba26:	2000      	movs	r0, #0
 801ba28:	f001 f85c 	bl	801cae4 <My_VDD_to_ES_Switch>
#endif

	switch (my_Current_State)
 801ba2c:	4b5e      	ldr	r3, [pc, #376]	@ (801bba8 <My_EHF+0x190>)
 801ba2e:	781b      	ldrb	r3, [r3, #0]
 801ba30:	3b02      	subs	r3, #2
 801ba32:	2b05      	cmp	r3, #5
 801ba34:	f200 80ae 	bhi.w	801bb94 <My_EHF+0x17c>
 801ba38:	a201      	add	r2, pc, #4	@ (adr r2, 801ba40 <My_EHF+0x28>)
 801ba3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ba3e:	bf00      	nop
 801ba40:	0801baa7 	.word	0x0801baa7
 801ba44:	0801ba59 	.word	0x0801ba59
 801ba48:	0801bb09 	.word	0x0801bb09
 801ba4c:	0801bb2f 	.word	0x0801bb2f
 801ba50:	0801bb83 	.word	0x0801bb83
 801ba54:	0801bb1d 	.word	0x0801bb1d
	{
	case EHS:  																// EHS = Energy Harvesting State
	{
		My_EHS_to_EMS_Timer(START_TIMER);  									// Start the EHS to EMS timer
 801ba58:	2000      	movs	r0, #0
 801ba5a:	f000 fa3f 	bl	801bedc <My_EHS_to_EMS_Timer>

		switch (my_Next_State)
 801ba5e:	4b53      	ldr	r3, [pc, #332]	@ (801bbac <My_EHF+0x194>)
 801ba60:	781b      	ldrb	r3, [r3, #0]
 801ba62:	2b09      	cmp	r3, #9
 801ba64:	d012      	beq.n	801ba8c <My_EHF+0x74>
 801ba66:	2b09      	cmp	r3, #9
 801ba68:	dc16      	bgt.n	801ba98 <My_EHF+0x80>
 801ba6a:	2b04      	cmp	r3, #4
 801ba6c:	d002      	beq.n	801ba74 <My_EHF+0x5c>
 801ba6e:	2b07      	cmp	r3, #7
 801ba70:	d006      	beq.n	801ba80 <My_EHF+0x68>
 801ba72:	e011      	b.n	801ba98 <My_EHF+0x80>
		{

		case ESS:
		{
			My_Enter_Stop2_Mode_WFI(VESS_HIGH, PWR_PVD_MODE_IT_RISING); 	// Set Enter Stop2 Mode and WFI
 801ba74:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801ba78:	2008      	movs	r0, #8
 801ba7a:	f000 fd11 	bl	801c4a0 <My_Enter_Stop2_Mode_WFI>
			break;
 801ba7e:	e011      	b.n	801baa4 <My_EHF+0x8c>
		}

		case SMS:
		{
			My_Enter_Stop2_Mode_WFI(VAIS_HIGH, PWR_PVD_MODE_IT_RISING); 	// Set Enter Stop2 Mode and WFI
 801ba80:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801ba84:	200c      	movs	r0, #12
 801ba86:	f000 fd0b 	bl	801c4a0 <My_Enter_Stop2_Mode_WFI>
			break;
 801ba8a:	e00b      	b.n	801baa4 <My_EHF+0x8c>
		}
#if AI
		case AIS:
		{
			My_Enter_Stop2_Mode_WFI(VRTS, PWR_PVD_MODE_IT_RISING); 	// Set Enter Stop2 Mode and WFI
 801ba8c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801ba90:	200c      	movs	r0, #12
 801ba92:	f000 fd05 	bl	801c4a0 <My_Enter_Stop2_Mode_WFI>
			break;
 801ba96:	e005      	b.n	801baa4 <My_EHF+0x8c>
		}
#endif

		default:
		{
			My_Enter_Stop2_Mode_WFI(VRTS, PWR_PVD_MODE_IT_RISING); 			// Set Enter Stop2 Mode and WFI
 801ba98:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801ba9c:	200c      	movs	r0, #12
 801ba9e:	f000 fcff 	bl	801c4a0 <My_Enter_Stop2_Mode_WFI>
			break;
 801baa2:	bf00      	nop
		}
		}

		break;
 801baa4:	e07d      	b.n	801bba2 <My_EHF+0x18a>
	}

	case RTS:  																// RTS = Radio Transmission State
	{
#if MY_ES_FEATURE_ENABLE  													// If the Energy Storage Feature is enabled
		if (++my_RTS_cnt >= N_LORA_TX)  									// If the number of transmissions has reached the threshold
 801baa6:	4b42      	ldr	r3, [pc, #264]	@ (801bbb0 <My_EHF+0x198>)
 801baa8:	781b      	ldrb	r3, [r3, #0]
 801baaa:	3301      	adds	r3, #1
 801baac:	b2da      	uxtb	r2, r3
 801baae:	4b40      	ldr	r3, [pc, #256]	@ (801bbb0 <My_EHF+0x198>)
 801bab0:	701a      	strb	r2, [r3, #0]
 801bab2:	4b3f      	ldr	r3, [pc, #252]	@ (801bbb0 <My_EHF+0x198>)
 801bab4:	781b      	ldrb	r3, [r3, #0]
 801bab6:	2b00      	cmp	r3, #0
 801bab8:	d017      	beq.n	801baea <My_EHF+0xd2>
		{
			if (my_Cmode != EOC)											// If the Energy Storage Device (ESD) is NOT in End of Charge (EOC)
 801baba:	4b3e      	ldr	r3, [pc, #248]	@ (801bbb4 <My_EHF+0x19c>)
 801babc:	781b      	ldrb	r3, [r3, #0]
 801babe:	2b02      	cmp	r3, #2
 801bac0:	d006      	beq.n	801bad0 <My_EHF+0xb8>
			{
				my_Current_State = EHS;  									// RTS --> EHS
 801bac2:	4b39      	ldr	r3, [pc, #228]	@ (801bba8 <My_EHF+0x190>)
 801bac4:	2203      	movs	r2, #3
 801bac6:	701a      	strb	r2, [r3, #0]
				my_Next_State = ESS;  										// RTS --> EHS --> ESS
 801bac8:	4b38      	ldr	r3, [pc, #224]	@ (801bbac <My_EHF+0x194>)
 801baca:	2204      	movs	r2, #4
 801bacc:	701a      	strb	r2, [r3, #0]
 801bace:	e008      	b.n	801bae2 <My_EHF+0xca>
			}
			else  															// If Energy Storage Device (ESD) is in End of Charge (EOC)
			{
				My_VDD_to_ES_Switch(Switch_OPEN);  							// Open the Vdd to ES Switch
 801bad0:	2000      	movs	r0, #0
 801bad2:	f001 f807 	bl	801cae4 <My_VDD_to_ES_Switch>
				my_Current_State = EHS;  									// RTS --> EHS
 801bad6:	4b34      	ldr	r3, [pc, #208]	@ (801bba8 <My_EHF+0x190>)
 801bad8:	2203      	movs	r2, #3
 801bada:	701a      	strb	r2, [r3, #0]

#if MY_SM_FEATURE_ENABLE  													// If the Sensor Measurements Feature is enabled
				my_Next_State = SMS;										// RTS --> EHS --> SMS
 801badc:	4b33      	ldr	r3, [pc, #204]	@ (801bbac <My_EHF+0x194>)
 801bade:	2207      	movs	r2, #7
 801bae0:	701a      	strb	r2, [r3, #0]
#else
				my_Next_State = RTS;  										// RTS --> EHS --> RTS
#endif
			}
			my_RTS_cnt = 0;  												// Reset the transmissions counter
 801bae2:	4b33      	ldr	r3, [pc, #204]	@ (801bbb0 <My_EHF+0x198>)
 801bae4:	2200      	movs	r2, #0
 801bae6:	701a      	strb	r2, [r3, #0]
 801bae8:	e005      	b.n	801baf6 <My_EHF+0xde>
		}
		else  																// If the number of Radio transmissions is lower than N_LORA_TX
		{
			my_Current_State = EHS;  										// RTS --> EHS
 801baea:	4b2f      	ldr	r3, [pc, #188]	@ (801bba8 <My_EHF+0x190>)
 801baec:	2203      	movs	r2, #3
 801baee:	701a      	strb	r2, [r3, #0]
			my_Next_State = RTS;  											// RTS --> EHS --> RTS
 801baf0:	4b2e      	ldr	r3, [pc, #184]	@ (801bbac <My_EHF+0x194>)
 801baf2:	2202      	movs	r2, #2
 801baf4:	701a      	strb	r2, [r3, #0]
#else
		my_Next_State = RTS;  												// Set Following State as RTS
#endif
#endif

		My_EHS_to_EMS_Timer(START_TIMER);  									// Start the EHS to EMS Timer
 801baf6:	2000      	movs	r0, #0
 801baf8:	f000 f9f0 	bl	801bedc <My_EHS_to_EMS_Timer>
		My_Enter_Stop2_Mode_WFI(VRTS, PWR_PVD_MODE_IT_RISING);  			// Enter Stop2 Power Mode and Wait for Interrupt
 801bafc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801bb00:	200c      	movs	r0, #12
 801bb02:	f000 fccd 	bl	801c4a0 <My_Enter_Stop2_Mode_WFI>
		break;
 801bb06:	e04c      	b.n	801bba2 <My_EHF+0x18a>
	}

	case ESS:
	{
		if (my_Next_State == SMS)
 801bb08:	4b28      	ldr	r3, [pc, #160]	@ (801bbac <My_EHF+0x194>)
 801bb0a:	781b      	ldrb	r3, [r3, #0]
 801bb0c:	2b07      	cmp	r3, #7
 801bb0e:	d147      	bne.n	801bba0 <My_EHF+0x188>
		{
			My_Enter_Stop2_Mode_WFI(VSMS_HIGH, PWR_PVD_MODE_IT_RISING);  	// Enter Stop2 Power Mode and Wait for Interrupt
 801bb10:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801bb14:	200c      	movs	r0, #12
 801bb16:	f000 fcc3 	bl	801c4a0 <My_Enter_Stop2_Mode_WFI>
		}
		break;
 801bb1a:	e041      	b.n	801bba0 <My_EHF+0x188>
	}

	case SMS:
	{
		My_EHS_to_EMS_Timer(START_TIMER);  									// Start the EHS to EMS Timer
 801bb1c:	2000      	movs	r0, #0
 801bb1e:	f000 f9dd 	bl	801bedc <My_EHS_to_EMS_Timer>
		My_Enter_Stop2_Mode_WFI(VSMS_HIGH, PWR_PVD_MODE_IT_RISING);  		// Enter Stop2 Power Mode and Wait for Interrupt
 801bb22:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801bb26:	200c      	movs	r0, #12
 801bb28:	f000 fcba 	bl	801c4a0 <My_Enter_Stop2_Mode_WFI>
		break;
 801bb2c:	e039      	b.n	801bba2 <My_EHF+0x18a>
	}

	case EMS:  																// EMS = Energy Missing State
	{
		My_ESW_DCM_Timer(STOP_TIMER);  										// Stop the ESW Timer
 801bb2e:	2001      	movs	r0, #1
 801bb30:	f000 f948 	bl	801bdc4 <My_ESW_DCM_Timer>
		My_ESW_CCM_Timer(STOP_TIMER);  										// Stop the ESW Timer
 801bb34:	2001      	movs	r0, #1
 801bb36:	f000 f96b 	bl	801be10 <My_ESW_CCM_Timer>
#if MY_LIS2DU12 && STEVAL_HARVEST1
		My_VDD_to_VDDS1_Switch(Switch_OPEN);								// unBias the Sensors: Open the switch between VDD and VDDS1
#endif

#if (MY_SHT40 || MY_STHS34PF80 || MY_STTS22H) && STEVAL_HARVEST1
		My_VDD_to_VDDS2_Switch(Switch_OPEN);								// unBias the Sensors: Open the switch between VDD and VDDS2
 801bb3a:	2000      	movs	r0, #0
 801bb3c:	f001 f850 	bl	801cbe0 <My_VDD_to_VDDS2_Switch>
#endif

#endif

		My_VDD_to_ES_Switch(Switch_CLOSED);  								// The system is supplied by the Energy Storage Device (ESD)
 801bb40:	2001      	movs	r0, #1
 801bb42:	f000 ffcf 	bl	801cae4 <My_VDD_to_ES_Switch>

		My_PVD_Delay();														// 2 sec delay
 801bb46:	f000 ff91 	bl	801ca6c <My_PVD_Delay>
		My_PVD_Delay();														// 2 sec delay
 801bb4a:	f000 ff8f 	bl	801ca6c <My_PVD_Delay>

		if (my_rtc_B_ems_flag == 0)  										// Flag the occurrence of EDS
 801bb4e:	4b1a      	ldr	r3, [pc, #104]	@ (801bbb8 <My_EHF+0x1a0>)
 801bb50:	781b      	ldrb	r3, [r3, #0]
 801bb52:	2b00      	cmp	r3, #0
 801bb54:	d105      	bne.n	801bb62 <My_EHF+0x14a>
		{
			My_EMS_to_EDS_Timer(START_TIMER);  								// Start an Energy Presence Check
 801bb56:	2000      	movs	r0, #0
 801bb58:	f000 fa04 	bl	801bf64 <My_EMS_to_EDS_Timer>
			my_rtc_B_ems_flag = 1;
 801bb5c:	4b16      	ldr	r3, [pc, #88]	@ (801bbb8 <My_EHF+0x1a0>)
 801bb5e:	2201      	movs	r2, #1
 801bb60:	701a      	strb	r2, [r3, #0]
		}

		if (my_rtc_A_ems_flag == 0)  										// Flag the occurrence of ems Measurement
 801bb62:	4b16      	ldr	r3, [pc, #88]	@ (801bbbc <My_EHF+0x1a4>)
 801bb64:	781b      	ldrb	r3, [r3, #0]
 801bb66:	2b00      	cmp	r3, #0
 801bb68:	d105      	bne.n	801bb76 <My_EHF+0x15e>
		{
			My_EMS_to_SMS_Timer(START_TIMER);  								// Start the timer to move from EMS to SMS
 801bb6a:	2000      	movs	r0, #0
 801bb6c:	f000 fa1c 	bl	801bfa8 <My_EMS_to_SMS_Timer>
			my_rtc_A_ems_flag = 1;
 801bb70:	4b12      	ldr	r3, [pc, #72]	@ (801bbbc <My_EHF+0x1a4>)
 801bb72:	2201      	movs	r2, #1
 801bb74:	701a      	strb	r2, [r3, #0]
		}

		My_Enter_Stop2_Mode_WFI(PVD_EMS, PWR_PVD_MODE_IT_RISING);  			// Enter Stop2 Power Mode and Wait for Interrupt
 801bb76:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801bb7a:	2008      	movs	r0, #8
 801bb7c:	f000 fc90 	bl	801c4a0 <My_Enter_Stop2_Mode_WFI>
		break;
 801bb80:	e00f      	b.n	801bba2 <My_EHF+0x18a>
	}

	case EDS:  																// EDS = Energy Detection State
	{
		My_EDS_Timer(START_TIMER);  										// Start the EDS Timer
 801bb82:	2000      	movs	r0, #0
 801bb84:	f000 f990 	bl	801bea8 <My_EDS_Timer>
		My_Enter_Stop2_Mode_WFI(VRTS, PWR_PVD_MODE_IT_RISING);				// Enter Stop2 Power Mode and Wait for Interrupt
 801bb88:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801bb8c:	200c      	movs	r0, #12
 801bb8e:	f000 fc87 	bl	801c4a0 <My_Enter_Stop2_Mode_WFI>
		break;
 801bb92:	e006      	b.n	801bba2 <My_EHF+0x18a>
	}

	default:
	{
		My_Enter_Stop2_Mode_WFI(VRTS, PWR_PVD_MODE_IT_RISING);				// Enter Stop2 Power Mode and Wait for Interrupt
 801bb94:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801bb98:	200c      	movs	r0, #12
 801bb9a:	f000 fc81 	bl	801c4a0 <My_Enter_Stop2_Mode_WFI>
		break;
 801bb9e:	e000      	b.n	801bba2 <My_EHF+0x18a>
		break;
 801bba0:	bf00      	nop
	}
	}
}
 801bba2:	bf00      	nop
 801bba4:	bd80      	pop	{r7, pc}
 801bba6:	bf00      	nop
 801bba8:	20001be9 	.word	0x20001be9
 801bbac:	20000638 	.word	0x20000638
 801bbb0:	20001bba 	.word	0x20001bba
 801bbb4:	20001bea 	.word	0x20001bea
 801bbb8:	20001bbf 	.word	0x20001bbf
 801bbbc:	20001bbe 	.word	0x20001bbe

0801bbc0 <My_ESF>:
/*
 * The ESF Function performs the actions executed during the Energy Storage State (ESS).
 * In the Energy Storage State (ESS) the additional Energy Storage Device (ESD) gets charged.
 */

{
 801bbc0:	b580      	push	{r7, lr}
 801bbc2:	af00      	add	r7, sp, #0

#if !(MY_DEBUGGER_ENABLED || MY_LPTIM_Monitor || MY_RTCB_Monitor)
	My_Set_All_GPIO_To_Analog_Mode();									// Set all GPIO in Analog Mode
 801bbc4:	f000 fc24 	bl	801c410 <My_Set_All_GPIO_To_Analog_Mode>
	My_Interrupts_Manager(NVIC_CLEAR); 									// Clear all Pending Interrupts
 801bbc8:	2002      	movs	r0, #2
 801bbca:	f000 fd0d 	bl	801c5e8 <My_Interrupts_Manager>
#endif

	my_Check_ESD = 0;													// Reset my_Check_ESD
 801bbce:	4b43      	ldr	r3, [pc, #268]	@ (801bcdc <My_ESF+0x11c>)
 801bbd0:	2200      	movs	r2, #0
 801bbd2:	701a      	strb	r2, [r3, #0]

	my_Current_State = ESS;												// Set Current State as Energy Storage State (ESS)
 801bbd4:	4b42      	ldr	r3, [pc, #264]	@ (801bce0 <My_ESF+0x120>)
 801bbd6:	2204      	movs	r2, #4
 801bbd8:	701a      	strb	r2, [r3, #0]

	switch (my_Cmode)
 801bbda:	4b42      	ldr	r3, [pc, #264]	@ (801bce4 <My_ESF+0x124>)
 801bbdc:	781b      	ldrb	r3, [r3, #0]
 801bbde:	2b00      	cmp	r3, #0
 801bbe0:	d002      	beq.n	801bbe8 <My_ESF+0x28>
 801bbe2:	2b01      	cmp	r3, #1
 801bbe4:	d027      	beq.n	801bc36 <My_ESF+0x76>
		break;
	}

	default:
	{
		break;
 801bbe6:	e077      	b.n	801bcd8 <My_ESF+0x118>
		My_Interrupts_Manager(NVIC_DISABLE);							// Disable all the interrupts
 801bbe8:	2001      	movs	r0, #1
 801bbea:	f000 fcfd 	bl	801c5e8 <My_Interrupts_Manager>
		HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);								// Enable only interrupts for PVD During DCM
 801bbee:	2001      	movs	r0, #1
 801bbf0:	f7e7 fa2d 	bl	800304e <HAL_NVIC_EnableIRQ>
		if (HAL_LPTIM_ReadCounter(&hlptim1) > T_ESW || (my_ESS_cnt >= DCM_MAX))
 801bbf4:	483c      	ldr	r0, [pc, #240]	@ (801bce8 <My_ESF+0x128>)
 801bbf6:	f001 fb61 	bl	801d2bc <HAL_LPTIM_ReadCounter>
 801bbfa:	4603      	mov	r3, r0
 801bbfc:	f241 4208 	movw	r2, #5128	@ 0x1408
 801bc00:	4293      	cmp	r3, r2
 801bc02:	d803      	bhi.n	801bc0c <My_ESF+0x4c>
 801bc04:	4b39      	ldr	r3, [pc, #228]	@ (801bcec <My_ESF+0x12c>)
 801bc06:	781b      	ldrb	r3, [r3, #0]
 801bc08:	2b04      	cmp	r3, #4
 801bc0a:	d906      	bls.n	801bc1a <My_ESF+0x5a>
			My_ESW_DCM_Timer(STOP_TIMER);
 801bc0c:	2001      	movs	r0, #1
 801bc0e:	f000 f8d9 	bl	801bdc4 <My_ESW_DCM_Timer>
			my_Next_State = SMS;
 801bc12:	4b37      	ldr	r3, [pc, #220]	@ (801bcf0 <My_ESF+0x130>)
 801bc14:	2207      	movs	r2, #7
 801bc16:	701a      	strb	r2, [r3, #0]
 801bc18:	e002      	b.n	801bc20 <My_ESF+0x60>
			My_ESW_DCM_Timer(START_TIMER);								// Start the EWS DCM Timer
 801bc1a:	2000      	movs	r0, #0
 801bc1c:	f000 f8d2 	bl	801bdc4 <My_ESW_DCM_Timer>
		My_DCM_to_CCM_Timer(START_TIMER); 								// Start Timer to monitor DCM to CCM.
 801bc20:	2000      	movs	r0, #0
 801bc22:	f000 f97d 	bl	801bf20 <My_DCM_to_CCM_Timer>
		My_VDD_to_ES_Switch(Switch_CLOSED);								// Close the Switch (High side of a GPIO) between Vdd and ES
 801bc26:	2001      	movs	r0, #1
 801bc28:	f000 ff5c 	bl	801cae4 <My_VDD_to_ES_Switch>
		My_Enter_Stop2_Mode_WFI(VESS_LOW, PWR_PVD_MODE_IT_FALLING); 	// Set PVD to level VESS_LOW with Interrupt for Falling Vdd and Enter Stop2 Mode and Wait for Interrupt
 801bc2c:	4931      	ldr	r1, [pc, #196]	@ (801bcf4 <My_ESF+0x134>)
 801bc2e:	2002      	movs	r0, #2
 801bc30:	f000 fc36 	bl	801c4a0 <My_Enter_Stop2_Mode_WFI>
		break;
 801bc34:	e050      	b.n	801bcd8 <My_ESF+0x118>
		My_ESW_CCM_Timer(START_TIMER);									// Start the EWS CCM Timer
 801bc36:	2000      	movs	r0, #0
 801bc38:	f000 f8ea 	bl	801be10 <My_ESW_CCM_Timer>
		My_VDD_to_ES_Switch(Switch_CLOSED);								// Close the Switch (High side of a GPIO) between Vdd and ES
 801bc3c:	2001      	movs	r0, #1
 801bc3e:	f000 ff51 	bl	801cae4 <My_VDD_to_ES_Switch>
		My_Set_PVD(VEOC, PWR_PVD_MODE_NORMAL); 							// Set PVD in Normal Mode and VEOC
 801bc42:	2100      	movs	r1, #0
 801bc44:	2008      	movs	r0, #8
 801bc46:	f000 fcb1 	bl	801c5ac <My_Set_PVD>
		My_PVD_Delay(); 												// Delay to allow the PVD to Settle
 801bc4a:	f000 ff0f 	bl	801ca6c <My_PVD_Delay>
		if (__HAL_PWR_GET_FLAG(PWR_FLAG_PVDO) == 0) 					// If the voltage across the Energy Storage Device (ESD) is higher than VEOC the System is in End of Charge (EOC)
 801bc4e:	4b2a      	ldr	r3, [pc, #168]	@ (801bcf8 <My_ESF+0x138>)
 801bc50:	695b      	ldr	r3, [r3, #20]
 801bc52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801bc56:	2b00      	cmp	r3, #0
 801bc58:	d11a      	bne.n	801bc90 <My_ESF+0xd0>
			my_Cmode = EOC; 											// Set Charging Mode in End of Charge (EOC)
 801bc5a:	4b22      	ldr	r3, [pc, #136]	@ (801bce4 <My_ESF+0x124>)
 801bc5c:	2202      	movs	r2, #2
 801bc5e:	701a      	strb	r2, [r3, #0]
			my_Current_State = EHS;										// Set Current State as Energy Harvesting State (EHS): ESS --> EHS
 801bc60:	4b1f      	ldr	r3, [pc, #124]	@ (801bce0 <My_ESF+0x120>)
 801bc62:	2203      	movs	r2, #3
 801bc64:	701a      	strb	r2, [r3, #0]
			My_EBK_status = 100;
 801bc66:	4b25      	ldr	r3, [pc, #148]	@ (801bcfc <My_ESF+0x13c>)
 801bc68:	2264      	movs	r2, #100	@ 0x64
 801bc6a:	701a      	strb	r2, [r3, #0]
			my_Next_State = SMS; 										// Set Next State as Radio Transmission State (RTS): ESS --> EHS --> SMS
 801bc6c:	4b20      	ldr	r3, [pc, #128]	@ (801bcf0 <My_ESF+0x130>)
 801bc6e:	2207      	movs	r2, #7
 801bc70:	701a      	strb	r2, [r3, #0]
			My_VDD_to_ES_Switch(Switch_OPEN); 							// Stop Charging: Open the Switch between Vdd and ES
 801bc72:	2000      	movs	r0, #0
 801bc74:	f000 ff36 	bl	801cae4 <My_VDD_to_ES_Switch>
			My_ESW_CCM_Timer(STOP_TIMER);								// Stop the Energy Storage Window (ESW) Timer
 801bc78:	2001      	movs	r0, #1
 801bc7a:	f000 f8c9 	bl	801be10 <My_ESW_CCM_Timer>
			My_EHS_to_EMS_Timer(START_TIMER); 							// Start the EHS to EMS Timer (Detects if Energy to Harvest is Missing)
 801bc7e:	2000      	movs	r0, #0
 801bc80:	f000 f92c 	bl	801bedc <My_EHS_to_EMS_Timer>
			My_Enter_Stop2_Mode_WFI(VRTS, PWR_PVD_MODE_IT_RISING); 		// Enter Stop 2 Power Mode and Wait for Interrupt
 801bc84:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801bc88:	200c      	movs	r0, #12
 801bc8a:	f000 fc09 	bl	801c4a0 <My_Enter_Stop2_Mode_WFI>
		break;
 801bc8e:	e022      	b.n	801bcd6 <My_ESF+0x116>
				My_Set_PVD(V2P2, PWR_PVD_MODE_NORMAL); 					// Set PVD in Normal Mode and VEOC
 801bc90:	2100      	movs	r1, #0
 801bc92:	2002      	movs	r0, #2
 801bc94:	f000 fc8a 	bl	801c5ac <My_Set_PVD>
				My_PVD_Delay(); 										// Delay to allow the PVD to Settle
 801bc98:	f000 fee8 	bl	801ca6c <My_PVD_Delay>
				if (__HAL_PWR_GET_FLAG(PWR_FLAG_PVDO) == 0) 			// Check if the voltage across the Energy Storage Device (ESD) is higher than V2P2
 801bc9c:	4b16      	ldr	r3, [pc, #88]	@ (801bcf8 <My_ESF+0x138>)
 801bc9e:	695b      	ldr	r3, [r3, #20]
 801bca0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801bca4:	2b00      	cmp	r3, #0
 801bca6:	d102      	bne.n	801bcae <My_ESF+0xee>
					My_EBK_status = 33;
 801bca8:	4b14      	ldr	r3, [pc, #80]	@ (801bcfc <My_ESF+0x13c>)
 801bcaa:	2221      	movs	r2, #33	@ 0x21
 801bcac:	701a      	strb	r2, [r3, #0]
				My_Set_PVD(V2P4, PWR_PVD_MODE_NORMAL); 					// Set PVD in Normal Mode and VEOC
 801bcae:	2100      	movs	r1, #0
 801bcb0:	2004      	movs	r0, #4
 801bcb2:	f000 fc7b 	bl	801c5ac <My_Set_PVD>
				My_PVD_Delay();
 801bcb6:	f000 fed9 	bl	801ca6c <My_PVD_Delay>
				if (__HAL_PWR_GET_FLAG(PWR_FLAG_PVDO) == 0) 			// Check if the voltage across the Energy Storage Device (ESD) is higher than V2P4
 801bcba:	4b0f      	ldr	r3, [pc, #60]	@ (801bcf8 <My_ESF+0x138>)
 801bcbc:	695b      	ldr	r3, [r3, #20]
 801bcbe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801bcc2:	2b00      	cmp	r3, #0
 801bcc4:	d102      	bne.n	801bccc <My_ESF+0x10c>
					My_EBK_status = 66;
 801bcc6:	4b0d      	ldr	r3, [pc, #52]	@ (801bcfc <My_ESF+0x13c>)
 801bcc8:	2242      	movs	r2, #66	@ 0x42
 801bcca:	701a      	strb	r2, [r3, #0]
				My_Enter_Stop2_Mode_WFI(VEOC, PWR_PVD_MODE_IT_RISING);	// Enter Stop2 Mode and Wait for Interrupt and wait for the charging to be completed
 801bccc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801bcd0:	2008      	movs	r0, #8
 801bcd2:	f000 fbe5 	bl	801c4a0 <My_Enter_Stop2_Mode_WFI>
		break;
 801bcd6:	bf00      	nop
	}
	}
}
 801bcd8:	bf00      	nop
 801bcda:	bd80      	pop	{r7, pc}
 801bcdc:	20001bc0 	.word	0x20001bc0
 801bce0:	20001be9 	.word	0x20001be9
 801bce4:	20001bea 	.word	0x20001bea
 801bce8:	20001b40 	.word	0x20001b40
 801bcec:	20001bbb 	.word	0x20001bbb
 801bcf0:	20000638 	.word	0x20000638
 801bcf4:	00010002 	.word	0x00010002
 801bcf8:	58000400 	.word	0x58000400
 801bcfc:	20001bb9 	.word	0x20001bb9

0801bd00 <My_SMF>:

void My_SMF(void)	// SMF = Sensor Measurement Function
{
 801bd00:	b580      	push	{r7, lr}
 801bd02:	af00      	add	r7, sp, #0
	 * SMF = Sensor Measurement Function
	 * The SMF Function Manages the Sensors
	 */

#if !(MY_DEBUGGER_ENABLED || MY_LPTIM_Monitor || MY_RTCB_Monitor)
	My_Set_All_GPIO_To_Analog_Mode();								// Set all GPIO in Analog Mode
 801bd04:	f000 fb84 	bl	801c410 <My_Set_All_GPIO_To_Analog_Mode>
	My_Interrupts_Manager(NVIC_CLEAR); 								// Clear all Pending Interrupts
 801bd08:	2002      	movs	r0, #2
 801bd0a:	f000 fc6d 	bl	801c5e8 <My_Interrupts_Manager>
#endif

	HAL_NVIC_DisableIRQ(RTC_WKUP_IRQn);								// Disable Interrupt for RTC_WKUP
 801bd0e:	2003      	movs	r0, #3
 801bd10:	f7e7 f9ab 	bl	800306a <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);							// Disable Interrupt for RTC_Alarm_IRQn
 801bd14:	202a      	movs	r0, #42	@ 0x2a
 801bd16:	f7e7 f9a8 	bl	800306a <HAL_NVIC_DisableIRQ>
	HAL_NVIC_DisableIRQ(LPTIM1_IRQn);								// Disable Interrupt for LPTIM1
 801bd1a:	2027      	movs	r0, #39	@ 0x27
 801bd1c:	f7e7 f9a5 	bl	800306a <HAL_NVIC_DisableIRQ>

	my_Current_State = SMS;											// Set Current State as SMS
 801bd20:	4b1a      	ldr	r3, [pc, #104]	@ (801bd8c <My_SMF+0x8c>)
 801bd22:	2207      	movs	r2, #7
 801bd24:	701a      	strb	r2, [r3, #0]
	My_SMW_Timer(START_TIMER);										// Start Sensor Measurement Window Timer
 801bd26:	2000      	movs	r0, #0
 801bd28:	f000 f898 	bl	801be5c <My_SMW_Timer>

	My_Set_PVD(VSMS_LOW, PWR_PVD_MODE_IT_FALLING);					// Set PVD
 801bd2c:	4918      	ldr	r1, [pc, #96]	@ (801bd90 <My_SMF+0x90>)
 801bd2e:	2004      	movs	r0, #4
 801bd30:	f000 fc3c 	bl	801c5ac <My_Set_PVD>

	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);	// Set Internal Voltage Regulator at 1.2 V
 801bd34:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801bd38:	f7e8 fefc 	bl	8004b34 <HAL_PWREx_ControlVoltageScaling>
	My_HAL_Delay(10);												// Add a Delay
	My_I2C_Init(MY_I2C1);											// Initialize I2C1
#endif

#if (MY_SHT40 || MY_STHS34PF80 || MY_STTS22H) && STEVAL_HARVEST1
	My_VDD_to_VDDS2_Switch(Switch_CLOSED);							// Bias the Sensors: Close the switch between VDD and VDDS2 to Power Sensors
 801bd3c:	2001      	movs	r0, #1
 801bd3e:	f000 ff4f 	bl	801cbe0 <My_VDD_to_VDDS2_Switch>
	My_HAL_Delay(10);												// Add a Delay
 801bd42:	200a      	movs	r0, #10
 801bd44:	f000 ff94 	bl	801cc70 <My_HAL_Delay>
	My_I2C_Init(MY_I2C2);											// Initialize I2C2
 801bd48:	2001      	movs	r0, #1
 801bd4a:	f000 fa6d 	bl	801c228 <My_I2C_Init>
#endif

#if MY_SHT40 && STEVAL_HARVEST1
	My_SHT40_Get_Data();											// SHT40 Get Data
 801bd4e:	f000 faa9 	bl	801c2a4 <My_SHT40_Get_Data>
#if MY_LIS2DU12 && STEVAL_HARVEST1
	My_I2C_Deinit(MY_I2C1);											// Initialize I2C1
#endif

#if (MY_SHT40 || MY_STHS34PF80 || MY_STTS22H) && STEVAL_HARVEST1
	My_I2C_Deinit(MY_I2C2);											// DeInitialize I2C2
 801bd52:	2001      	movs	r0, #1
 801bd54:	f000 fa8a 	bl	801c26c <My_I2C_Deinit>
#endif

#endif

	if (my_Cmode == DCM && my_Check_ESD == 0)						// If in DCM Mode --> Charge the Energy Backup Device
 801bd58:	4b0e      	ldr	r3, [pc, #56]	@ (801bd94 <My_SMF+0x94>)
 801bd5a:	781b      	ldrb	r3, [r3, #0]
 801bd5c:	2b00      	cmp	r3, #0
 801bd5e:	d107      	bne.n	801bd70 <My_SMF+0x70>
 801bd60:	4b0d      	ldr	r3, [pc, #52]	@ (801bd98 <My_SMF+0x98>)
 801bd62:	781b      	ldrb	r3, [r3, #0]
 801bd64:	2b00      	cmp	r3, #0
 801bd66:	d103      	bne.n	801bd70 <My_SMF+0x70>
	{
		My_VDD_to_ES_Switch(Switch_CLOSED);							// Charge the Energy Backup Device
 801bd68:	2001      	movs	r0, #1
 801bd6a:	f000 febb 	bl	801cae4 <My_VDD_to_ES_Switch>
 801bd6e:	e003      	b.n	801bd78 <My_SMF+0x78>
	}
	else
	{
		Radio.Rx(1);												// Turn the Radio in RX Mode
 801bd70:	4b0a      	ldr	r3, [pc, #40]	@ (801bd9c <My_SMF+0x9c>)
 801bd72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801bd74:	2001      	movs	r0, #1
 801bd76:	4798      	blx	r3
	}

	My_Interrupts_Manager(NVIC_DISABLE);							// Disable and Clear All Pending Interrupts
 801bd78:	2001      	movs	r0, #1
 801bd7a:	f000 fc35 	bl	801c5e8 <My_Interrupts_Manager>
	HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);								// Enable Interrupt for PVD
 801bd7e:	2001      	movs	r0, #1
 801bd80:	f7e7 f965 	bl	800304e <HAL_NVIC_EnableIRQ>
	__WFI();														// Wait for Interrupt From PVD
 801bd84:	bf30      	wfi
}
 801bd86:	bf00      	nop
 801bd88:	bd80      	pop	{r7, pc}
 801bd8a:	bf00      	nop
 801bd8c:	20001be9 	.word	0x20001be9
 801bd90:	00010002 	.word	0x00010002
 801bd94:	20001bea 	.word	0x20001bea
 801bd98:	20001bc0 	.word	0x20001bc0
 801bd9c:	080210e8 	.word	0x080210e8

0801bda0 <My_AIF>:

void My_AIF(void)
{
 801bda0:	b580      	push	{r7, lr}
 801bda2:	af00      	add	r7, sp, #0
	My_Set_PVD(VAIS_LOW, PWR_PVD_MODE_IT_FALLING);					// Set PVD
 801bda4:	4906      	ldr	r1, [pc, #24]	@ (801bdc0 <My_AIF+0x20>)
 801bda6:	2006      	movs	r0, #6
 801bda8:	f000 fc00 	bl	801c5ac <My_Set_PVD>
	My_PVD_Delay();
 801bdac:	f000 fe5e 	bl	801ca6c <My_PVD_Delay>

	MX_X_CUBE_AI_Process();
 801bdb0:	f7fe ff50 	bl	801ac54 <MX_X_CUBE_AI_Process>
	UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_RTF), CFG_SEQ_Prio_0);	// SendTxData
 801bdb4:	2100      	movs	r1, #0
 801bdb6:	2010      	movs	r0, #16
 801bdb8:	f7fe f808 	bl	8019dcc <UTIL_SEQ_SetTask>
}
 801bdbc:	bf00      	nop
 801bdbe:	bd80      	pop	{r7, pc}
 801bdc0:	00010002 	.word	0x00010002

0801bdc4 <My_ESW_DCM_Timer>:


/* Timer Section Begin */

void My_ESW_DCM_Timer(My_Timer_td mode)
{
 801bdc4:	b580      	push	{r7, lr}
 801bdc6:	b082      	sub	sp, #8
 801bdc8:	af00      	add	r7, sp, #0
 801bdca:	4603      	mov	r3, r0
 801bdcc:	71fb      	strb	r3, [r7, #7]
	/* This Function Starts and Stops the LPTIM1 timer to measure the time T_ESW that defines the Energy Storage Window (ESW) in DCM */

	if ((mode == START_TIMER) && (my_ESS_cnt++ == 0))	// Start the Energy Storage Window (ESW) Timer
 801bdce:	79fb      	ldrb	r3, [r7, #7]
 801bdd0:	2b00      	cmp	r3, #0
 801bdd2:	d10c      	bne.n	801bdee <My_ESW_DCM_Timer+0x2a>
 801bdd4:	4b0c      	ldr	r3, [pc, #48]	@ (801be08 <My_ESW_DCM_Timer+0x44>)
 801bdd6:	781b      	ldrb	r3, [r3, #0]
 801bdd8:	1c5a      	adds	r2, r3, #1
 801bdda:	b2d1      	uxtb	r1, r2
 801bddc:	4a0a      	ldr	r2, [pc, #40]	@ (801be08 <My_ESW_DCM_Timer+0x44>)
 801bdde:	7011      	strb	r1, [r2, #0]
 801bde0:	2b00      	cmp	r3, #0
 801bde2:	d104      	bne.n	801bdee <My_ESW_DCM_Timer+0x2a>
	{
		HAL_LPTIM_Counter_Start(&hlptim1, (0XFFFF));	// Start the lptim1 timer used for the Energy Storage Window (ESW)
 801bde4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801bde8:	4808      	ldr	r0, [pc, #32]	@ (801be0c <My_ESW_DCM_Timer+0x48>)
 801bdea:	f001 f8ff 	bl	801cfec <HAL_LPTIM_Counter_Start>
#if MY_LPTIM_Monitor
		My_LPTIM1_Monitor(Switch_CLOSED);
#endif
	}

	if (mode == STOP_TIMER) 							// Stop the Energy Storage Window (ESW) Timer
 801bdee:	79fb      	ldrb	r3, [r7, #7]
 801bdf0:	2b01      	cmp	r3, #1
 801bdf2:	d105      	bne.n	801be00 <My_ESW_DCM_Timer+0x3c>
	{
		my_ESS_cnt = 0;									// Reset ESS Counter
 801bdf4:	4b04      	ldr	r3, [pc, #16]	@ (801be08 <My_ESW_DCM_Timer+0x44>)
 801bdf6:	2200      	movs	r2, #0
 801bdf8:	701a      	strb	r2, [r3, #0]
		HAL_LPTIM_Counter_Stop(&hlptim1); 				// Stop the lptim1 timer used for the Energy Storage Window (ESW)
 801bdfa:	4804      	ldr	r0, [pc, #16]	@ (801be0c <My_ESW_DCM_Timer+0x48>)
 801bdfc:	f001 f93a 	bl	801d074 <HAL_LPTIM_Counter_Stop>

#if MY_LPTIM_Monitor
		My_LPTIM1_Monitor(Switch_OPEN);
#endif
	}
}
 801be00:	bf00      	nop
 801be02:	3708      	adds	r7, #8
 801be04:	46bd      	mov	sp, r7
 801be06:	bd80      	pop	{r7, pc}
 801be08:	20001bbb 	.word	0x20001bbb
 801be0c:	20001b40 	.word	0x20001b40

0801be10 <My_ESW_CCM_Timer>:

void My_ESW_CCM_Timer(My_Timer_td mode)
{
 801be10:	b580      	push	{r7, lr}
 801be12:	b082      	sub	sp, #8
 801be14:	af00      	add	r7, sp, #0
 801be16:	4603      	mov	r3, r0
 801be18:	71fb      	strb	r3, [r7, #7]
	/* This Function Starts and Stops the LPTIM1 timer to measure the time T_ESW that defines the Energy Storage Window (ESW) in CCM */

	if ((mode == START_TIMER) && (my_ESS_cnt++ == 0))	// Start the Energy Storage Window (ESW) Timer
 801be1a:	79fb      	ldrb	r3, [r7, #7]
 801be1c:	2b00      	cmp	r3, #0
 801be1e:	d10c      	bne.n	801be3a <My_ESW_CCM_Timer+0x2a>
 801be20:	4b0c      	ldr	r3, [pc, #48]	@ (801be54 <My_ESW_CCM_Timer+0x44>)
 801be22:	781b      	ldrb	r3, [r3, #0]
 801be24:	1c5a      	adds	r2, r3, #1
 801be26:	b2d1      	uxtb	r1, r2
 801be28:	4a0a      	ldr	r2, [pc, #40]	@ (801be54 <My_ESW_CCM_Timer+0x44>)
 801be2a:	7011      	strb	r1, [r2, #0]
 801be2c:	2b00      	cmp	r3, #0
 801be2e:	d104      	bne.n	801be3a <My_ESW_CCM_Timer+0x2a>
	{
		HAL_LPTIM_Counter_Start_IT(&hlptim1, T_ESW);
 801be30:	f241 4108 	movw	r1, #5128	@ 0x1408
 801be34:	4808      	ldr	r0, [pc, #32]	@ (801be58 <My_ESW_CCM_Timer+0x48>)
 801be36:	f001 f939 	bl	801d0ac <HAL_LPTIM_Counter_Start_IT>
		My_LPTIM1_Monitor(Switch_CLOSED);
#endif

	}

	if (mode == STOP_TIMER) 							// Stop the Energy Storage Window (ESW) Timer
 801be3a:	79fb      	ldrb	r3, [r7, #7]
 801be3c:	2b01      	cmp	r3, #1
 801be3e:	d105      	bne.n	801be4c <My_ESW_CCM_Timer+0x3c>
	{
		my_ESS_cnt = 0;									// Reset ESS Counter
 801be40:	4b04      	ldr	r3, [pc, #16]	@ (801be54 <My_ESW_CCM_Timer+0x44>)
 801be42:	2200      	movs	r2, #0
 801be44:	701a      	strb	r2, [r3, #0]
		HAL_LPTIM_Counter_Stop_IT(&hlptim1); 			// Stop the lptim1 timer used for the Energy Storage Window (ESW)
 801be46:	4804      	ldr	r0, [pc, #16]	@ (801be58 <My_ESW_CCM_Timer+0x48>)
 801be48:	f001 f9d2 	bl	801d1f0 <HAL_LPTIM_Counter_Stop_IT>

#if MY_LPTIM_Monitor
		My_LPTIM1_Monitor(Switch_OPEN);
#endif
	}
}
 801be4c:	bf00      	nop
 801be4e:	3708      	adds	r7, #8
 801be50:	46bd      	mov	sp, r7
 801be52:	bd80      	pop	{r7, pc}
 801be54:	20001bbb 	.word	0x20001bbb
 801be58:	20001b40 	.word	0x20001b40

0801be5c <My_SMW_Timer>:

void My_SMW_Timer(My_Timer_td mode)
{
 801be5c:	b580      	push	{r7, lr}
 801be5e:	b082      	sub	sp, #8
 801be60:	af00      	add	r7, sp, #0
 801be62:	4603      	mov	r3, r0
 801be64:	71fb      	strb	r3, [r7, #7]
	/* This Function Starts and Stops the LPTIM1 timer to measure the time T_SMW that defines the Sensor Measure Window (SMW) */

	if ((mode == START_TIMER) && (my_SMS_cnt++ == 0))	// Start the Sensor Measurement Window (SMW) Timer
 801be66:	79fb      	ldrb	r3, [r7, #7]
 801be68:	2b00      	cmp	r3, #0
 801be6a:	d10c      	bne.n	801be86 <My_SMW_Timer+0x2a>
 801be6c:	4b0c      	ldr	r3, [pc, #48]	@ (801bea0 <My_SMW_Timer+0x44>)
 801be6e:	781b      	ldrb	r3, [r3, #0]
 801be70:	1c5a      	adds	r2, r3, #1
 801be72:	b2d1      	uxtb	r1, r2
 801be74:	4a0a      	ldr	r2, [pc, #40]	@ (801bea0 <My_SMW_Timer+0x44>)
 801be76:	7011      	strb	r1, [r2, #0]
 801be78:	2b00      	cmp	r3, #0
 801be7a:	d104      	bne.n	801be86 <My_SMW_Timer+0x2a>
	{
		HAL_LPTIM_Counter_Start(&hlptim1, (0XFFFF));	// Start the lptim1 timer used for the Sensor Measurement Window (SMW)
 801be7c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801be80:	4808      	ldr	r0, [pc, #32]	@ (801bea4 <My_SMW_Timer+0x48>)
 801be82:	f001 f8b3 	bl	801cfec <HAL_LPTIM_Counter_Start>
#if MY_LPTIM_Monitor
		My_LPTIM1_Monitor(Switch_CLOSED);
#endif
	}

	if (mode == STOP_TIMER) 							// Stop the Sensor Measurement Window (SMW) Timer
 801be86:	79fb      	ldrb	r3, [r7, #7]
 801be88:	2b01      	cmp	r3, #1
 801be8a:	d105      	bne.n	801be98 <My_SMW_Timer+0x3c>
	{
		my_SMS_cnt = 0;									// Reset my_SMS_cnt
 801be8c:	4b04      	ldr	r3, [pc, #16]	@ (801bea0 <My_SMW_Timer+0x44>)
 801be8e:	2200      	movs	r2, #0
 801be90:	701a      	strb	r2, [r3, #0]
		HAL_LPTIM_Counter_Stop(&hlptim1); 				// Stop the lptim1 timer used for the Sensor Measurement Window (SMW)
 801be92:	4804      	ldr	r0, [pc, #16]	@ (801bea4 <My_SMW_Timer+0x48>)
 801be94:	f001 f8ee 	bl	801d074 <HAL_LPTIM_Counter_Stop>

#if MY_LPTIM_Monitor
		My_LPTIM1_Monitor(Switch_OPEN);
#endif
	}
}
 801be98:	bf00      	nop
 801be9a:	3708      	adds	r7, #8
 801be9c:	46bd      	mov	sp, r7
 801be9e:	bd80      	pop	{r7, pc}
 801bea0:	20001bbc 	.word	0x20001bbc
 801bea4:	20001b40 	.word	0x20001b40

0801bea8 <My_EDS_Timer>:

void My_EDS_Timer(My_Timer_td mode)
{
 801bea8:	b580      	push	{r7, lr}
 801beaa:	b082      	sub	sp, #8
 801beac:	af00      	add	r7, sp, #0
 801beae:	4603      	mov	r3, r0
 801beb0:	71fb      	strb	r3, [r7, #7]
	/* This Function Starts and Stops the LPTIM1 timer to measure the time T_EDS that defines the Energy Detection State time Window */

	if (mode == START_TIMER) // Start the Energy Detection State (EDS) Timer
 801beb2:	79fb      	ldrb	r3, [r7, #7]
 801beb4:	2b00      	cmp	r3, #0
 801beb6:	d104      	bne.n	801bec2 <My_EDS_Timer+0x1a>
	{
		HAL_LPTIM_Counter_Start_IT(&hlptim1, T_EDS);
 801beb8:	f643 2198 	movw	r1, #15000	@ 0x3a98
 801bebc:	4806      	ldr	r0, [pc, #24]	@ (801bed8 <My_EDS_Timer+0x30>)
 801bebe:	f001 f8f5 	bl	801d0ac <HAL_LPTIM_Counter_Start_IT>
#if MY_LPTIM_Monitor
		My_LPTIM1_Monitor(Switch_CLOSED);
#endif
	}

	if (mode == STOP_TIMER)	// Stop the Energy Detection State (EDS) Timer
 801bec2:	79fb      	ldrb	r3, [r7, #7]
 801bec4:	2b01      	cmp	r3, #1
 801bec6:	d102      	bne.n	801bece <My_EDS_Timer+0x26>
	{
		HAL_LPTIM_Counter_Stop_IT(&hlptim1);
 801bec8:	4803      	ldr	r0, [pc, #12]	@ (801bed8 <My_EDS_Timer+0x30>)
 801beca:	f001 f991 	bl	801d1f0 <HAL_LPTIM_Counter_Stop_IT>

#if MY_LPTIM_Monitor
		My_LPTIM1_Monitor(Switch_OPEN);
#endif
	}
}
 801bece:	bf00      	nop
 801bed0:	3708      	adds	r7, #8
 801bed2:	46bd      	mov	sp, r7
 801bed4:	bd80      	pop	{r7, pc}
 801bed6:	bf00      	nop
 801bed8:	20001b40 	.word	0x20001b40

0801bedc <My_EHS_to_EMS_Timer>:

void My_EHS_to_EMS_Timer(My_Timer_td mode)
{
 801bedc:	b580      	push	{r7, lr}
 801bede:	b082      	sub	sp, #8
 801bee0:	af00      	add	r7, sp, #0
 801bee2:	4603      	mov	r3, r0
 801bee4:	71fb      	strb	r3, [r7, #7]
	 * This Function Starts and Stops the EHS to EMS Timer
	 * It starts an RCT Alarm B Timer to detect, if the energy to harvest is missing while the System is in Energy Harvesting State (EHS).
	 * If the Energy to Harvest is missing for a time longer than T_EHS_EMS the System switches from the Energy Harvesting State (EHS) into the Energy Missing State (EMS).
	 */

	if (mode == START_TIMER)
 801bee6:	79fb      	ldrb	r3, [r7, #7]
 801bee8:	2b00      	cmp	r3, #0
 801beea:	d10a      	bne.n	801bf02 <My_EHS_to_EMS_Timer+0x26>
	{
		HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_B);	// Deactivate the RTC alarm B
 801beec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801bef0:	480a      	ldr	r0, [pc, #40]	@ (801bf1c <My_EHS_to_EMS_Timer+0x40>)
 801bef2:	f7ea fd51 	bl	8006998 <HAL_RTC_DeactivateAlarm>

		My_Set_RTC_Alarm_B	// Start EHS to EMS Timer
 801bef6:	2300      	movs	r3, #0
 801bef8:	2200      	movs	r2, #0
 801befa:	2104      	movs	r1, #4
 801befc:	2000      	movs	r0, #0
 801befe:	f000 fcc5 	bl	801c88c <My_Set_RTC_Alarm_B>
#if MY_RTCB_Monitor
		My_RTCB_Monitor(Switch_CLOSED);
#endif
	}

	if (mode == STOP_TIMER)	// Stop EHS to EMS Timer
 801bf02:	79fb      	ldrb	r3, [r7, #7]
 801bf04:	2b01      	cmp	r3, #1
 801bf06:	d104      	bne.n	801bf12 <My_EHS_to_EMS_Timer+0x36>
	{
		HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_B);	// Deactivate the RTC alarm B
 801bf08:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801bf0c:	4803      	ldr	r0, [pc, #12]	@ (801bf1c <My_EHS_to_EMS_Timer+0x40>)
 801bf0e:	f7ea fd43 	bl	8006998 <HAL_RTC_DeactivateAlarm>
#if MY_RTCB_Monitor
		My_RTCB_Monitor(Switch_OPEN);
#endif
	}

}
 801bf12:	bf00      	nop
 801bf14:	3708      	adds	r7, #8
 801bf16:	46bd      	mov	sp, r7
 801bf18:	bd80      	pop	{r7, pc}
 801bf1a:	bf00      	nop
 801bf1c:	20000750 	.word	0x20000750

0801bf20 <My_DCM_to_CCM_Timer>:

void My_DCM_to_CCM_Timer(My_Timer_td mode)
{
 801bf20:	b580      	push	{r7, lr}
 801bf22:	b082      	sub	sp, #8
 801bf24:	af00      	add	r7, sp, #0
 801bf26:	4603      	mov	r3, r0
 801bf28:	71fb      	strb	r3, [r7, #7]
	/*
	 * This Function Starts and Stops the RCT Alarm B Timer to detect, while in Energy Storage State (EHS), to measure the time T_DCM_CCM.
	 * The time T_DC_CCM, defines when to switch from Discontinuous Charge Mode (DCM) to Continuous Charge Mode (CCM).
	 */

	if (mode == START_TIMER)
 801bf2a:	79fb      	ldrb	r3, [r7, #7]
 801bf2c:	2b00      	cmp	r3, #0
 801bf2e:	d10a      	bne.n	801bf46 <My_DCM_to_CCM_Timer+0x26>
	{
		HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_B);	// Deactivate the RTC alarm B
 801bf30:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801bf34:	480a      	ldr	r0, [pc, #40]	@ (801bf60 <My_DCM_to_CCM_Timer+0x40>)
 801bf36:	f7ea fd2f 	bl	8006998 <HAL_RTC_DeactivateAlarm>

		My_Set_RTC_Alarm_B
 801bf3a:	2300      	movs	r3, #0
 801bf3c:	2207      	movs	r2, #7
 801bf3e:	2100      	movs	r1, #0
 801bf40:	2000      	movs	r0, #0
 801bf42:	f000 fca3 	bl	801c88c <My_Set_RTC_Alarm_B>
#if MY_RTCB_Monitor
		My_RTCB_Monitor(Switch_CLOSED);
#endif
	}

	if (mode == STOP_TIMER)	// Stop EHS to EMS Timer
 801bf46:	79fb      	ldrb	r3, [r7, #7]
 801bf48:	2b01      	cmp	r3, #1
 801bf4a:	d104      	bne.n	801bf56 <My_DCM_to_CCM_Timer+0x36>
	{
		HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_B);	// Deactivate the RTC alarm B
 801bf4c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801bf50:	4803      	ldr	r0, [pc, #12]	@ (801bf60 <My_DCM_to_CCM_Timer+0x40>)
 801bf52:	f7ea fd21 	bl	8006998 <HAL_RTC_DeactivateAlarm>

#if MY_RTCB_Monitor
		My_RTCB_Monitor(Switch_OPEN);
#endif
	}
}
 801bf56:	bf00      	nop
 801bf58:	3708      	adds	r7, #8
 801bf5a:	46bd      	mov	sp, r7
 801bf5c:	bd80      	pop	{r7, pc}
 801bf5e:	bf00      	nop
 801bf60:	20000750 	.word	0x20000750

0801bf64 <My_EMS_to_EDS_Timer>:

void My_EMS_to_EDS_Timer(My_Timer_td mode)
{
 801bf64:	b580      	push	{r7, lr}
 801bf66:	b082      	sub	sp, #8
 801bf68:	af00      	add	r7, sp, #0
 801bf6a:	4603      	mov	r3, r0
 801bf6c:	71fb      	strb	r3, [r7, #7]
	/*
	 * This Function Starts the RCT Alarm B Timer to detect, while in Energy Missing State (EMS), to measure the time T_EMS_EDS.
	 * The time T_EMS_EDS, defines When to switch from Energy Missing State (EMS) to Energy Detection State (EDS), to perform an Energy presence check.
	 */

	if (mode == START_TIMER)
 801bf6e:	79fb      	ldrb	r3, [r7, #7]
 801bf70:	2b00      	cmp	r3, #0
 801bf72:	d10a      	bne.n	801bf8a <My_EMS_to_EDS_Timer+0x26>
	{
		HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_B);	// Deactivate the RTC alarm B
 801bf74:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801bf78:	480a      	ldr	r0, [pc, #40]	@ (801bfa4 <My_EMS_to_EDS_Timer+0x40>)
 801bf7a:	f7ea fd0d 	bl	8006998 <HAL_RTC_DeactivateAlarm>

		My_Set_RTC_Alarm_B
 801bf7e:	2300      	movs	r3, #0
 801bf80:	2200      	movs	r2, #0
 801bf82:	2102      	movs	r1, #2
 801bf84:	2000      	movs	r0, #0
 801bf86:	f000 fc81 	bl	801c88c <My_Set_RTC_Alarm_B>
#if MY_RTCB_Monitor
		My_RTCB_Monitor(Switch_CLOSED);
#endif
	}

	if (mode == STOP_TIMER)	// Stop EHS to EMS Timer
 801bf8a:	79fb      	ldrb	r3, [r7, #7]
 801bf8c:	2b01      	cmp	r3, #1
 801bf8e:	d104      	bne.n	801bf9a <My_EMS_to_EDS_Timer+0x36>
	{
		HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_B);	// Deactivate the RTC alarm B
 801bf90:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801bf94:	4803      	ldr	r0, [pc, #12]	@ (801bfa4 <My_EMS_to_EDS_Timer+0x40>)
 801bf96:	f7ea fcff 	bl	8006998 <HAL_RTC_DeactivateAlarm>
#if MY_RTCB_Monitor
		My_RTCB_Monitor(Switch_OPEN);
#endif
	}
}
 801bf9a:	bf00      	nop
 801bf9c:	3708      	adds	r7, #8
 801bf9e:	46bd      	mov	sp, r7
 801bfa0:	bd80      	pop	{r7, pc}
 801bfa2:	bf00      	nop
 801bfa4:	20000750 	.word	0x20000750

0801bfa8 <My_EMS_to_SMS_Timer>:

void My_EMS_to_SMS_Timer(My_Timer_td mode)
{
 801bfa8:	b580      	push	{r7, lr}
 801bfaa:	b082      	sub	sp, #8
 801bfac:	af00      	add	r7, sp, #0
 801bfae:	4603      	mov	r3, r0
 801bfb0:	71fb      	strb	r3, [r7, #7]
	/*
	 * This Function Starts the RTC Alarm A Timer to periodically switch into the Sensor Measurement State (SMS)
	 * while the system is in the Energy Missing State (EMS)
	 * */

	if (mode == START_TIMER)
 801bfb2:	79fb      	ldrb	r3, [r7, #7]
 801bfb4:	2b00      	cmp	r3, #0
 801bfb6:	d10a      	bne.n	801bfce <My_EMS_to_SMS_Timer+0x26>
	{
		HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);	// Deactivate the RTC alarm A
 801bfb8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801bfbc:	480a      	ldr	r0, [pc, #40]	@ (801bfe8 <My_EMS_to_SMS_Timer+0x40>)
 801bfbe:	f7ea fceb 	bl	8006998 <HAL_RTC_DeactivateAlarm>
		My_Set_RTC_Alarm_A
 801bfc2:	2300      	movs	r3, #0
 801bfc4:	221e      	movs	r2, #30
 801bfc6:	2100      	movs	r1, #0
 801bfc8:	2000      	movs	r0, #0
 801bfca:	f000 fc0f 	bl	801c7ec <My_Set_RTC_Alarm_A>
#if MY_RTCA_Monitor
		My_RTCA_Monitor(Switch_CLOSED);
#endif
	}

	if (mode == STOP_TIMER)	// Stop EHS to SMS Timer
 801bfce:	79fb      	ldrb	r3, [r7, #7]
 801bfd0:	2b01      	cmp	r3, #1
 801bfd2:	d104      	bne.n	801bfde <My_EMS_to_SMS_Timer+0x36>
	{
		HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);	// Deactivate the RTC alarm A
 801bfd4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801bfd8:	4803      	ldr	r0, [pc, #12]	@ (801bfe8 <My_EMS_to_SMS_Timer+0x40>)
 801bfda:	f7ea fcdd 	bl	8006998 <HAL_RTC_DeactivateAlarm>
#if MY_RTCA_Monitor
		My_RTCA_Monitor(Switch_OPEN);
#endif
	}
}
 801bfde:	bf00      	nop
 801bfe0:	3708      	adds	r7, #8
 801bfe2:	46bd      	mov	sp, r7
 801bfe4:	bd80      	pop	{r7, pc}
 801bfe6:	bf00      	nop
 801bfe8:	20000750 	.word	0x20000750

0801bfec <My_MX_I2C1_Init>:


/* Sensor Section Begin */

HAL_StatusTypeDef My_MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 801bfec:	b580      	push	{r7, lr}
 801bfee:	b084      	sub	sp, #16
 801bff0:	af00      	add	r7, sp, #0
 801bff2:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret = HAL_OK;
 801bff4:	2300      	movs	r3, #0
 801bff6:	73fb      	strb	r3, [r7, #15]

	hi2c->Instance = I2C1;
 801bff8:	687b      	ldr	r3, [r7, #4]
 801bffa:	4a1c      	ldr	r2, [pc, #112]	@ (801c06c <My_MX_I2C1_Init+0x80>)
 801bffc:	601a      	str	r2, [r3, #0]
	hi2c->Init.Timing = I2C_CLOCK_SPEED;
 801bffe:	687b      	ldr	r3, [r7, #4]
 801c000:	4a1b      	ldr	r2, [pc, #108]	@ (801c070 <My_MX_I2C1_Init+0x84>)
 801c002:	605a      	str	r2, [r3, #4]
	hi2c->Init.OwnAddress1 = 0;
 801c004:	687b      	ldr	r3, [r7, #4]
 801c006:	2200      	movs	r2, #0
 801c008:	609a      	str	r2, [r3, #8]
	hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801c00a:	687b      	ldr	r3, [r7, #4]
 801c00c:	2201      	movs	r2, #1
 801c00e:	60da      	str	r2, [r3, #12]
	hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 801c010:	687b      	ldr	r3, [r7, #4]
 801c012:	2200      	movs	r2, #0
 801c014:	611a      	str	r2, [r3, #16]
	hi2c->Init.OwnAddress2 = 0;
 801c016:	687b      	ldr	r3, [r7, #4]
 801c018:	2200      	movs	r2, #0
 801c01a:	615a      	str	r2, [r3, #20]
	hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 801c01c:	687b      	ldr	r3, [r7, #4]
 801c01e:	2200      	movs	r2, #0
 801c020:	619a      	str	r2, [r3, #24]
	hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801c022:	687b      	ldr	r3, [r7, #4]
 801c024:	2200      	movs	r2, #0
 801c026:	61da      	str	r2, [r3, #28]
	hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801c028:	687b      	ldr	r3, [r7, #4]
 801c02a:	2200      	movs	r2, #0
 801c02c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(hi2c) != HAL_OK)
 801c02e:	6878      	ldr	r0, [r7, #4]
 801c030:	f7e7 feb8 	bl	8003da4 <HAL_I2C_Init>
 801c034:	4603      	mov	r3, r0
 801c036:	2b00      	cmp	r3, #0
 801c038:	d001      	beq.n	801c03e <My_MX_I2C1_Init+0x52>
	{
		ret = HAL_ERROR;
 801c03a:	2301      	movs	r3, #1
 801c03c:	73fb      	strb	r3, [r7, #15]
	}

	if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 801c03e:	2100      	movs	r1, #0
 801c040:	6878      	ldr	r0, [r7, #4]
 801c042:	f7e8 fb9b 	bl	800477c <HAL_I2CEx_ConfigAnalogFilter>
 801c046:	4603      	mov	r3, r0
 801c048:	2b00      	cmp	r3, #0
 801c04a:	d001      	beq.n	801c050 <My_MX_I2C1_Init+0x64>
	{
		ret = HAL_ERROR;
 801c04c:	2301      	movs	r3, #1
 801c04e:	73fb      	strb	r3, [r7, #15]
	}

	if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 801c050:	2100      	movs	r1, #0
 801c052:	6878      	ldr	r0, [r7, #4]
 801c054:	f7e8 fbdc 	bl	8004810 <HAL_I2CEx_ConfigDigitalFilter>
 801c058:	4603      	mov	r3, r0
 801c05a:	2b00      	cmp	r3, #0
 801c05c:	d001      	beq.n	801c062 <My_MX_I2C1_Init+0x76>
	{
		ret = HAL_ERROR;
 801c05e:	2301      	movs	r3, #1
 801c060:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 801c062:	7bfb      	ldrb	r3, [r7, #15]
}
 801c064:	4618      	mov	r0, r3
 801c066:	3710      	adds	r7, #16
 801c068:	46bd      	mov	sp, r7
 801c06a:	bd80      	pop	{r7, pc}
 801c06c:	40005400 	.word	0x40005400
 801c070:	9010deff 	.word	0x9010deff

0801c074 <My_I2C1_MspInit>:

void My_I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 801c074:	b580      	push	{r7, lr}
 801c076:	b096      	sub	sp, #88	@ 0x58
 801c078:	af00      	add	r7, sp, #0
 801c07a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801c07c:	f107 030c 	add.w	r3, r7, #12
 801c080:	2238      	movs	r2, #56	@ 0x38
 801c082:	2100      	movs	r1, #0
 801c084:	4618      	mov	r0, r3
 801c086:	f003 fc2d 	bl	801f8e4 <memset>

	/* USER CODE END I2C1_MspInit 0 */

	/** Initializes the peripherals clocks
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 801c08a:	2340      	movs	r3, #64	@ 0x40
 801c08c:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 801c08e:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 801c092:	623b      	str	r3, [r7, #32]
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 801c094:	f107 030c 	add.w	r3, r7, #12
 801c098:	4618      	mov	r0, r3
 801c09a:	f7ea f851 	bl	8006140 <HAL_RCCEx_PeriphCLKConfig>

	__HAL_RCC_GPIOB_CLK_ENABLE();
 801c09e:	2002      	movs	r0, #2
 801c0a0:	f7ff f956 	bl	801b350 <LL_AHB2_GRP1_EnableClock>
	/**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 801c0a4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 801c0a8:	647b      	str	r3, [r7, #68]	@ 0x44

	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801c0aa:	2312      	movs	r3, #18
 801c0ac:	64bb      	str	r3, [r7, #72]	@ 0x48
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 801c0ae:	2301      	movs	r3, #1
 801c0b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801c0b2:	2303      	movs	r3, #3
 801c0b4:	653b      	str	r3, [r7, #80]	@ 0x50
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 801c0b6:	2304      	movs	r3, #4
 801c0b8:	657b      	str	r3, [r7, #84]	@ 0x54
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801c0ba:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801c0be:	4619      	mov	r1, r3
 801c0c0:	4805      	ldr	r0, [pc, #20]	@ (801c0d8 <My_I2C1_MspInit+0x64>)
 801c0c2:	f7e7 fc07 	bl	80038d4 <HAL_GPIO_Init>

	/* Peripheral clock enable */
	__HAL_RCC_I2C1_CLK_ENABLE();
 801c0c6:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 801c0ca:	f7ff f96b 	bl	801b3a4 <LL_APB1_GRP1_EnableClock>
	/* USER CODE BEGIN I2C1_MspInit 1 */

	/* USER CODE END I2C1_MspInit 1 */
}
 801c0ce:	bf00      	nop
 801c0d0:	3758      	adds	r7, #88	@ 0x58
 801c0d2:	46bd      	mov	sp, r7
 801c0d4:	bd80      	pop	{r7, pc}
 801c0d6:	bf00      	nop
 801c0d8:	48000400 	.word	0x48000400

0801c0dc <My_I2C1_MspDeInit>:

void My_I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 801c0dc:	b580      	push	{r7, lr}
 801c0de:	b082      	sub	sp, #8
 801c0e0:	af00      	add	r7, sp, #0
 801c0e2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN I2C1_MspDeInit 0 */

	/* USER CODE END I2C1_MspDeInit 0 */
	/* Peripheral clock disable */
	__HAL_RCC_I2C1_CLK_DISABLE();
 801c0e4:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 801c0e8:	f7ff f974 	bl	801b3d4 <LL_APB1_GRP1_DisableClock>

	/**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
	 */
	HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 801c0ec:	2180      	movs	r1, #128	@ 0x80
 801c0ee:	4806      	ldr	r0, [pc, #24]	@ (801c108 <My_I2C1_MspDeInit+0x2c>)
 801c0f0:	f7e7 fd50 	bl	8003b94 <HAL_GPIO_DeInit>

	HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 801c0f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801c0f8:	4803      	ldr	r0, [pc, #12]	@ (801c108 <My_I2C1_MspDeInit+0x2c>)
 801c0fa:	f7e7 fd4b 	bl	8003b94 <HAL_GPIO_DeInit>

	/* USER CODE BEGIN I2C1_MspDeInit 1 */

	/* USER CODE END I2C1_MspDeInit 1 */
}
 801c0fe:	bf00      	nop
 801c100:	3708      	adds	r7, #8
 801c102:	46bd      	mov	sp, r7
 801c104:	bd80      	pop	{r7, pc}
 801c106:	bf00      	nop
 801c108:	48000400 	.word	0x48000400

0801c10c <My_MX_I2C2_Init>:


HAL_StatusTypeDef My_MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 801c10c:	b580      	push	{r7, lr}
 801c10e:	b084      	sub	sp, #16
 801c110:	af00      	add	r7, sp, #0
 801c112:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret = HAL_OK;
 801c114:	2300      	movs	r3, #0
 801c116:	73fb      	strb	r3, [r7, #15]

	hi2c->Instance = I2C2;
 801c118:	687b      	ldr	r3, [r7, #4]
 801c11a:	4a1c      	ldr	r2, [pc, #112]	@ (801c18c <My_MX_I2C2_Init+0x80>)
 801c11c:	601a      	str	r2, [r3, #0]
	hi2c->Init.Timing = I2C_CLOCK_SPEED;
 801c11e:	687b      	ldr	r3, [r7, #4]
 801c120:	4a1b      	ldr	r2, [pc, #108]	@ (801c190 <My_MX_I2C2_Init+0x84>)
 801c122:	605a      	str	r2, [r3, #4]
	hi2c->Init.OwnAddress1 = 0;
 801c124:	687b      	ldr	r3, [r7, #4]
 801c126:	2200      	movs	r2, #0
 801c128:	609a      	str	r2, [r3, #8]
	hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801c12a:	687b      	ldr	r3, [r7, #4]
 801c12c:	2201      	movs	r2, #1
 801c12e:	60da      	str	r2, [r3, #12]
	hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 801c130:	687b      	ldr	r3, [r7, #4]
 801c132:	2200      	movs	r2, #0
 801c134:	611a      	str	r2, [r3, #16]
	hi2c->Init.OwnAddress2 = 0;
 801c136:	687b      	ldr	r3, [r7, #4]
 801c138:	2200      	movs	r2, #0
 801c13a:	615a      	str	r2, [r3, #20]
	hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 801c13c:	687b      	ldr	r3, [r7, #4]
 801c13e:	2200      	movs	r2, #0
 801c140:	619a      	str	r2, [r3, #24]
	hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801c142:	687b      	ldr	r3, [r7, #4]
 801c144:	2200      	movs	r2, #0
 801c146:	61da      	str	r2, [r3, #28]
	hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801c148:	687b      	ldr	r3, [r7, #4]
 801c14a:	2200      	movs	r2, #0
 801c14c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(hi2c) != HAL_OK)
 801c14e:	6878      	ldr	r0, [r7, #4]
 801c150:	f7e7 fe28 	bl	8003da4 <HAL_I2C_Init>
 801c154:	4603      	mov	r3, r0
 801c156:	2b00      	cmp	r3, #0
 801c158:	d001      	beq.n	801c15e <My_MX_I2C2_Init+0x52>
	{
		ret = HAL_ERROR;
 801c15a:	2301      	movs	r3, #1
 801c15c:	73fb      	strb	r3, [r7, #15]
	}

	if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 801c15e:	2100      	movs	r1, #0
 801c160:	6878      	ldr	r0, [r7, #4]
 801c162:	f7e8 fb0b 	bl	800477c <HAL_I2CEx_ConfigAnalogFilter>
 801c166:	4603      	mov	r3, r0
 801c168:	2b00      	cmp	r3, #0
 801c16a:	d001      	beq.n	801c170 <My_MX_I2C2_Init+0x64>
	{
		ret = HAL_ERROR;
 801c16c:	2301      	movs	r3, #1
 801c16e:	73fb      	strb	r3, [r7, #15]
	}

	if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 801c170:	2100      	movs	r1, #0
 801c172:	6878      	ldr	r0, [r7, #4]
 801c174:	f7e8 fb4c 	bl	8004810 <HAL_I2CEx_ConfigDigitalFilter>
 801c178:	4603      	mov	r3, r0
 801c17a:	2b00      	cmp	r3, #0
 801c17c:	d001      	beq.n	801c182 <My_MX_I2C2_Init+0x76>
	{
		ret = HAL_ERROR;
 801c17e:	2301      	movs	r3, #1
 801c180:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 801c182:	7bfb      	ldrb	r3, [r7, #15]
}
 801c184:	4618      	mov	r0, r3
 801c186:	3710      	adds	r7, #16
 801c188:	46bd      	mov	sp, r7
 801c18a:	bd80      	pop	{r7, pc}
 801c18c:	40005800 	.word	0x40005800
 801c190:	9010deff 	.word	0x9010deff

0801c194 <My_I2C2_MspInit>:

void My_I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 801c194:	b580      	push	{r7, lr}
 801c196:	b096      	sub	sp, #88	@ 0x58
 801c198:	af00      	add	r7, sp, #0
 801c19a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801c19c:	f107 030c 	add.w	r3, r7, #12
 801c1a0:	2238      	movs	r2, #56	@ 0x38
 801c1a2:	2100      	movs	r1, #0
 801c1a4:	4618      	mov	r0, r3
 801c1a6:	f003 fb9d 	bl	801f8e4 <memset>

	/* USER CODE END I2C2_MspInit 0 */

	/** Initializes the peripherals clocks
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 801c1aa:	2380      	movs	r3, #128	@ 0x80
 801c1ac:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 801c1ae:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 801c1b2:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 801c1b4:	f107 030c 	add.w	r3, r7, #12
 801c1b8:	4618      	mov	r0, r3
 801c1ba:	f7e9 ffc1 	bl	8006140 <HAL_RCCEx_PeriphCLKConfig>

	__HAL_RCC_GPIOA_CLK_ENABLE();
 801c1be:	2001      	movs	r0, #1
 801c1c0:	f7ff f8c6 	bl	801b350 <LL_AHB2_GRP1_EnableClock>
	/**I2C2 GPIO Configuration
    PA12     ------> I2C2_SCL
    PA15     ------> I2C2_SDA
	 */
	GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15;
 801c1c4:	f44f 4310 	mov.w	r3, #36864	@ 0x9000
 801c1c8:	647b      	str	r3, [r7, #68]	@ 0x44
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801c1ca:	2312      	movs	r3, #18
 801c1cc:	64bb      	str	r3, [r7, #72]	@ 0x48
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 801c1ce:	2301      	movs	r3, #1
 801c1d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801c1d2:	2303      	movs	r3, #3
 801c1d4:	653b      	str	r3, [r7, #80]	@ 0x50
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 801c1d6:	2304      	movs	r3, #4
 801c1d8:	657b      	str	r3, [r7, #84]	@ 0x54
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801c1da:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 801c1de:	4619      	mov	r1, r3
 801c1e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801c1e4:	f7e7 fb76 	bl	80038d4 <HAL_GPIO_Init>

	/* Peripheral clock enable */
	__HAL_RCC_I2C2_CLK_ENABLE();
 801c1e8:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 801c1ec:	f7ff f8da 	bl	801b3a4 <LL_APB1_GRP1_EnableClock>
	/* USER CODE BEGIN I2C2_MspInit 1 */

	/* USER CODE END I2C2_MspInit 1 */
}
 801c1f0:	bf00      	nop
 801c1f2:	3758      	adds	r7, #88	@ 0x58
 801c1f4:	46bd      	mov	sp, r7
 801c1f6:	bd80      	pop	{r7, pc}

0801c1f8 <My_I2C2_MspDeInit>:

void My_I2C2_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 801c1f8:	b580      	push	{r7, lr}
 801c1fa:	b082      	sub	sp, #8
 801c1fc:	af00      	add	r7, sp, #0
 801c1fe:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN I2C2_MspDeInit 0 */

	/* USER CODE END I2C2_MspDeInit 0 */
	/* Peripheral clock disable */
	__HAL_RCC_I2C2_CLK_DISABLE();
 801c200:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 801c204:	f7ff f8e6 	bl	801b3d4 <LL_APB1_GRP1_DisableClock>

	/**I2C2 GPIO Configuration
    PA12     ------> I2C2_SCL
    PA15     ------> I2C2_SDA
	 */
	HAL_GPIO_DeInit(GPIOA, GPIO_PIN_12);
 801c208:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 801c20c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801c210:	f7e7 fcc0 	bl	8003b94 <HAL_GPIO_DeInit>

	HAL_GPIO_DeInit(GPIOA, GPIO_PIN_15);
 801c214:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 801c218:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801c21c:	f7e7 fcba 	bl	8003b94 <HAL_GPIO_DeInit>

	/* USER CODE BEGIN I2C2_MspDeInit 1 */

	/* USER CODE END I2C2_MspDeInit 1 */
}
 801c220:	bf00      	nop
 801c222:	3708      	adds	r7, #8
 801c224:	46bd      	mov	sp, r7
 801c226:	bd80      	pop	{r7, pc}

0801c228 <My_I2C_Init>:


void My_I2C_Init(My_I2C_td mode)
{
 801c228:	b580      	push	{r7, lr}
 801c22a:	b082      	sub	sp, #8
 801c22c:	af00      	add	r7, sp, #0
 801c22e:	4603      	mov	r3, r0
 801c230:	71fb      	strb	r3, [r7, #7]
	switch (mode)
 801c232:	79fb      	ldrb	r3, [r7, #7]
 801c234:	2b00      	cmp	r3, #0
 801c236:	d002      	beq.n	801c23e <My_I2C_Init+0x16>
 801c238:	2b01      	cmp	r3, #1
 801c23a:	d007      	beq.n	801c24c <My_I2C_Init+0x24>
		break;
	}

	default:
	{
		break;
 801c23c:	e00d      	b.n	801c25a <My_I2C_Init+0x32>
		My_I2C1_MspInit(&hi2c1);
 801c23e:	4809      	ldr	r0, [pc, #36]	@ (801c264 <My_I2C_Init+0x3c>)
 801c240:	f7ff ff18 	bl	801c074 <My_I2C1_MspInit>
		My_MX_I2C1_Init(&hi2c1);
 801c244:	4807      	ldr	r0, [pc, #28]	@ (801c264 <My_I2C_Init+0x3c>)
 801c246:	f7ff fed1 	bl	801bfec <My_MX_I2C1_Init>
		break;
 801c24a:	e006      	b.n	801c25a <My_I2C_Init+0x32>
		My_I2C2_MspInit(&hi2c2);
 801c24c:	4806      	ldr	r0, [pc, #24]	@ (801c268 <My_I2C_Init+0x40>)
 801c24e:	f7ff ffa1 	bl	801c194 <My_I2C2_MspInit>
		My_MX_I2C2_Init(&hi2c2);
 801c252:	4805      	ldr	r0, [pc, #20]	@ (801c268 <My_I2C_Init+0x40>)
 801c254:	f7ff ff5a 	bl	801c10c <My_MX_I2C2_Init>
		break;
 801c258:	bf00      	nop
	}
	}
}
 801c25a:	bf00      	nop
 801c25c:	3708      	adds	r7, #8
 801c25e:	46bd      	mov	sp, r7
 801c260:	bd80      	pop	{r7, pc}
 801c262:	bf00      	nop
 801c264:	20001c40 	.word	0x20001c40
 801c268:	20001c94 	.word	0x20001c94

0801c26c <My_I2C_Deinit>:

void My_I2C_Deinit(My_I2C_td mode)
{
 801c26c:	b580      	push	{r7, lr}
 801c26e:	b082      	sub	sp, #8
 801c270:	af00      	add	r7, sp, #0
 801c272:	4603      	mov	r3, r0
 801c274:	71fb      	strb	r3, [r7, #7]
	switch (mode)
 801c276:	79fb      	ldrb	r3, [r7, #7]
 801c278:	2b00      	cmp	r3, #0
 801c27a:	d002      	beq.n	801c282 <My_I2C_Deinit+0x16>
 801c27c:	2b01      	cmp	r3, #1
 801c27e:	d004      	beq.n	801c28a <My_I2C_Deinit+0x1e>
		break;
	}

	default:
	{
		break;
 801c280:	e007      	b.n	801c292 <My_I2C_Deinit+0x26>
		My_I2C1_MspDeInit(&hi2c1);
 801c282:	4806      	ldr	r0, [pc, #24]	@ (801c29c <My_I2C_Deinit+0x30>)
 801c284:	f7ff ff2a 	bl	801c0dc <My_I2C1_MspDeInit>
		break;
 801c288:	e003      	b.n	801c292 <My_I2C_Deinit+0x26>
		My_I2C2_MspDeInit(&hi2c2);
 801c28a:	4805      	ldr	r0, [pc, #20]	@ (801c2a0 <My_I2C_Deinit+0x34>)
 801c28c:	f7ff ffb4 	bl	801c1f8 <My_I2C2_MspDeInit>
		break;
 801c290:	bf00      	nop
	}
	}
}
 801c292:	bf00      	nop
 801c294:	3708      	adds	r7, #8
 801c296:	46bd      	mov	sp, r7
 801c298:	bd80      	pop	{r7, pc}
 801c29a:	bf00      	nop
 801c29c:	20001c40 	.word	0x20001c40
 801c2a0:	20001c94 	.word	0x20001c94

0801c2a4 <My_SHT40_Get_Data>:

#if MY_SHT40

void My_SHT40_Get_Data(void)
{
 801c2a4:	b580      	push	{r7, lr}
 801c2a6:	b086      	sub	sp, #24
 801c2a8:	af02      	add	r7, sp, #8
	my_SHT40_Temp = 0;																								// Reset my_SHT40_Temp
 801c2aa:	4b4d      	ldr	r3, [pc, #308]	@ (801c3e0 <My_SHT40_Get_Data+0x13c>)
 801c2ac:	2200      	movs	r2, #0
 801c2ae:	601a      	str	r2, [r3, #0]
	my_SHT40_Humid = 0;																								// Reset my_SHT40_Humid
 801c2b0:	4b4c      	ldr	r3, [pc, #304]	@ (801c3e4 <My_SHT40_Get_Data+0x140>)
 801c2b2:	2200      	movs	r2, #0
 801c2b4:	601a      	str	r2, [r3, #0]

	uint8_t SHT40_Raw_Data[6];																						// Define raw data vector
	memset(SHT40_Raw_Data, 0, sizeof(SHT40_Raw_Data));																// Initialize raw data vector
 801c2b6:	1d3b      	adds	r3, r7, #4
 801c2b8:	2206      	movs	r2, #6
 801c2ba:	2100      	movs	r1, #0
 801c2bc:	4618      	mov	r0, r3
 801c2be:	f003 fb11 	bl	801f8e4 <memset>

	uint8_t SHT40_Measure_Cmd = SHT40_MEASURE_CMD_HP;																// Initialize SHT40 Address
 801c2c2:	23fd      	movs	r3, #253	@ 0xfd
 801c2c4:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Master_Transmit(&hi2c2, SHT40AD1B_I2C_ADDRESS, &SHT40_Measure_Cmd, 1, HAL_MAX_DELAY); 					// Transmit Data through I2C2
 801c2c6:	1cfa      	adds	r2, r7, #3
 801c2c8:	f04f 33ff 	mov.w	r3, #4294967295
 801c2cc:	9300      	str	r3, [sp, #0]
 801c2ce:	2301      	movs	r3, #1
 801c2d0:	2189      	movs	r1, #137	@ 0x89
 801c2d2:	4845      	ldr	r0, [pc, #276]	@ (801c3e8 <My_SHT40_Get_Data+0x144>)
 801c2d4:	f7e7 fdfe 	bl	8003ed4 <HAL_I2C_Master_Transmit>

	My_HAL_Delay(25);																								// Add delay to ensure the sensor is ready to provide data
 801c2d8:	2019      	movs	r0, #25
 801c2da:	f000 fcc9 	bl	801cc70 <My_HAL_Delay>

	HAL_I2C_Master_Receive(&hi2c2, SHT40AD1B_I2C_ADDRESS, SHT40_Raw_Data, sizeof(SHT40_Raw_Data), HAL_MAX_DELAY);	// Receive Data through I2C2
 801c2de:	1d3a      	adds	r2, r7, #4
 801c2e0:	f04f 33ff 	mov.w	r3, #4294967295
 801c2e4:	9300      	str	r3, [sp, #0]
 801c2e6:	2306      	movs	r3, #6
 801c2e8:	2189      	movs	r1, #137	@ 0x89
 801c2ea:	483f      	ldr	r0, [pc, #252]	@ (801c3e8 <My_SHT40_Get_Data+0x144>)
 801c2ec:	f7e7 fee6 	bl	80040bc <HAL_I2C_Master_Receive>

	uint16_t SHT40_Raw_Temp = (SHT40_Raw_Data[0] << 8) | SHT40_Raw_Data[1];											// Temperature Data From SHT40
 801c2f0:	793b      	ldrb	r3, [r7, #4]
 801c2f2:	b21b      	sxth	r3, r3
 801c2f4:	021b      	lsls	r3, r3, #8
 801c2f6:	b21a      	sxth	r2, r3
 801c2f8:	797b      	ldrb	r3, [r7, #5]
 801c2fa:	b21b      	sxth	r3, r3
 801c2fc:	4313      	orrs	r3, r2
 801c2fe:	b21b      	sxth	r3, r3
 801c300:	81fb      	strh	r3, [r7, #14]
	uint16_t SHT40_Raw_Humid = (SHT40_Raw_Data[3] << 8) | SHT40_Raw_Data[4];										// Relative Humidity (RH) From SHT40
 801c302:	79fb      	ldrb	r3, [r7, #7]
 801c304:	b21b      	sxth	r3, r3
 801c306:	021b      	lsls	r3, r3, #8
 801c308:	b21a      	sxth	r2, r3
 801c30a:	7a3b      	ldrb	r3, [r7, #8]
 801c30c:	b21b      	sxth	r3, r3
 801c30e:	4313      	orrs	r3, r2
 801c310:	b21b      	sxth	r3, r3
 801c312:	81bb      	strh	r3, [r7, #12]

//	float my_SHT40_Temp_Float = -45 + 175 * ((float)SHT40_Raw_Temp / 65535);										// Temperature in Celsius
//	float my_SHT40_Humid_Float = -6 + 125 * ((float)SHT40_Raw_Humid / 65535);										// Humidity in %
	my_SHT40_Temp_Float = -45 + 175 * ((float)SHT40_Raw_Temp / 65535);										// Temperature in Celsius
 801c314:	89fb      	ldrh	r3, [r7, #14]
 801c316:	4618      	mov	r0, r3
 801c318:	f7e4 faac 	bl	8000874 <__aeabi_ui2f>
 801c31c:	4603      	mov	r3, r0
 801c31e:	4933      	ldr	r1, [pc, #204]	@ (801c3ec <My_SHT40_Get_Data+0x148>)
 801c320:	4618      	mov	r0, r3
 801c322:	f7e4 fbb3 	bl	8000a8c <__aeabi_fdiv>
 801c326:	4603      	mov	r3, r0
 801c328:	4931      	ldr	r1, [pc, #196]	@ (801c3f0 <My_SHT40_Get_Data+0x14c>)
 801c32a:	4618      	mov	r0, r3
 801c32c:	f7e4 fafa 	bl	8000924 <__aeabi_fmul>
 801c330:	4603      	mov	r3, r0
 801c332:	4930      	ldr	r1, [pc, #192]	@ (801c3f4 <My_SHT40_Get_Data+0x150>)
 801c334:	4618      	mov	r0, r3
 801c336:	f7e4 f9eb 	bl	8000710 <__aeabi_fsub>
 801c33a:	4603      	mov	r3, r0
 801c33c:	461a      	mov	r2, r3
 801c33e:	4b2e      	ldr	r3, [pc, #184]	@ (801c3f8 <My_SHT40_Get_Data+0x154>)
 801c340:	601a      	str	r2, [r3, #0]
	my_SHT40_Humid_Float = -6 + 125 * ((float)SHT40_Raw_Humid / 65535);										// Humidity in %
 801c342:	89bb      	ldrh	r3, [r7, #12]
 801c344:	4618      	mov	r0, r3
 801c346:	f7e4 fa95 	bl	8000874 <__aeabi_ui2f>
 801c34a:	4603      	mov	r3, r0
 801c34c:	4927      	ldr	r1, [pc, #156]	@ (801c3ec <My_SHT40_Get_Data+0x148>)
 801c34e:	4618      	mov	r0, r3
 801c350:	f7e4 fb9c 	bl	8000a8c <__aeabi_fdiv>
 801c354:	4603      	mov	r3, r0
 801c356:	4929      	ldr	r1, [pc, #164]	@ (801c3fc <My_SHT40_Get_Data+0x158>)
 801c358:	4618      	mov	r0, r3
 801c35a:	f7e4 fae3 	bl	8000924 <__aeabi_fmul>
 801c35e:	4603      	mov	r3, r0
 801c360:	4927      	ldr	r1, [pc, #156]	@ (801c400 <My_SHT40_Get_Data+0x15c>)
 801c362:	4618      	mov	r0, r3
 801c364:	f7e4 f9d4 	bl	8000710 <__aeabi_fsub>
 801c368:	4603      	mov	r3, r0
 801c36a:	461a      	mov	r2, r3
 801c36c:	4b25      	ldr	r3, [pc, #148]	@ (801c404 <My_SHT40_Get_Data+0x160>)
 801c36e:	601a      	str	r2, [r3, #0]

	if (my_SHT40_Humid_Float > 100.0f)																				// Clamp Humidity values to valid range (0-100%)
 801c370:	4b24      	ldr	r3, [pc, #144]	@ (801c404 <My_SHT40_Get_Data+0x160>)
 801c372:	681b      	ldr	r3, [r3, #0]
 801c374:	4924      	ldr	r1, [pc, #144]	@ (801c408 <My_SHT40_Get_Data+0x164>)
 801c376:	4618      	mov	r0, r3
 801c378:	f7e4 fc90 	bl	8000c9c <__aeabi_fcmpgt>
 801c37c:	4603      	mov	r3, r0
 801c37e:	2b00      	cmp	r3, #0
 801c380:	d002      	beq.n	801c388 <My_SHT40_Get_Data+0xe4>
	{
		my_SHT40_Humid_Float = 100.0f;
 801c382:	4b20      	ldr	r3, [pc, #128]	@ (801c404 <My_SHT40_Get_Data+0x160>)
 801c384:	4a20      	ldr	r2, [pc, #128]	@ (801c408 <My_SHT40_Get_Data+0x164>)
 801c386:	601a      	str	r2, [r3, #0]
	}

	if (my_SHT40_Humid_Float < 0.0f)																				// Clamp Humidity values to valid range (0-100%)
 801c388:	4b1e      	ldr	r3, [pc, #120]	@ (801c404 <My_SHT40_Get_Data+0x160>)
 801c38a:	681b      	ldr	r3, [r3, #0]
 801c38c:	f04f 0100 	mov.w	r1, #0
 801c390:	4618      	mov	r0, r3
 801c392:	f7e4 fc65 	bl	8000c60 <__aeabi_fcmplt>
 801c396:	4603      	mov	r3, r0
 801c398:	2b00      	cmp	r3, #0
 801c39a:	d003      	beq.n	801c3a4 <My_SHT40_Get_Data+0x100>
	{
		my_SHT40_Humid_Float = 0.0f;
 801c39c:	4b19      	ldr	r3, [pc, #100]	@ (801c404 <My_SHT40_Get_Data+0x160>)
 801c39e:	f04f 0200 	mov.w	r2, #0
 801c3a2:	601a      	str	r2, [r3, #0]
	}

	my_SHT40_Temp =  (uint32_t)(10*my_SHT40_Temp_Float);															// Scale Temperature Value and convert to integer values
 801c3a4:	4b14      	ldr	r3, [pc, #80]	@ (801c3f8 <My_SHT40_Get_Data+0x154>)
 801c3a6:	681b      	ldr	r3, [r3, #0]
 801c3a8:	4918      	ldr	r1, [pc, #96]	@ (801c40c <My_SHT40_Get_Data+0x168>)
 801c3aa:	4618      	mov	r0, r3
 801c3ac:	f7e4 faba 	bl	8000924 <__aeabi_fmul>
 801c3b0:	4603      	mov	r3, r0
 801c3b2:	4618      	mov	r0, r3
 801c3b4:	f7e4 fca2 	bl	8000cfc <__aeabi_f2uiz>
 801c3b8:	4603      	mov	r3, r0
 801c3ba:	4a09      	ldr	r2, [pc, #36]	@ (801c3e0 <My_SHT40_Get_Data+0x13c>)
 801c3bc:	6013      	str	r3, [r2, #0]
	my_SHT40_Humid = (uint32_t)(10*my_SHT40_Humid_Float);															// Scale Humidity Value and convert to integer values
 801c3be:	4b11      	ldr	r3, [pc, #68]	@ (801c404 <My_SHT40_Get_Data+0x160>)
 801c3c0:	681b      	ldr	r3, [r3, #0]
 801c3c2:	4912      	ldr	r1, [pc, #72]	@ (801c40c <My_SHT40_Get_Data+0x168>)
 801c3c4:	4618      	mov	r0, r3
 801c3c6:	f7e4 faad 	bl	8000924 <__aeabi_fmul>
 801c3ca:	4603      	mov	r3, r0
 801c3cc:	4618      	mov	r0, r3
 801c3ce:	f7e4 fc95 	bl	8000cfc <__aeabi_f2uiz>
 801c3d2:	4603      	mov	r3, r0
 801c3d4:	4a03      	ldr	r2, [pc, #12]	@ (801c3e4 <My_SHT40_Get_Data+0x140>)
 801c3d6:	6013      	str	r3, [r2, #0]
}
 801c3d8:	bf00      	nop
 801c3da:	3710      	adds	r7, #16
 801c3dc:	46bd      	mov	sp, r7
 801c3de:	bd80      	pop	{r7, pc}
 801c3e0:	20001bf8 	.word	0x20001bf8
 801c3e4:	20001bfc 	.word	0x20001bfc
 801c3e8:	20001c94 	.word	0x20001c94
 801c3ec:	477fff00 	.word	0x477fff00
 801c3f0:	432f0000 	.word	0x432f0000
 801c3f4:	42340000 	.word	0x42340000
 801c3f8:	20001bf0 	.word	0x20001bf0
 801c3fc:	42fa0000 	.word	0x42fa0000
 801c400:	40c00000 	.word	0x40c00000
 801c404:	20001bf4 	.word	0x20001bf4
 801c408:	42c80000 	.word	0x42c80000
 801c40c:	41200000 	.word	0x41200000

0801c410 <My_Set_All_GPIO_To_Analog_Mode>:
#endif

/* Sensor Section End */

void My_Set_All_GPIO_To_Analog_Mode(void)
{
 801c410:	b580      	push	{r7, lr}
 801c412:	b086      	sub	sp, #24
 801c414:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 801c416:	1d3b      	adds	r3, r7, #4
 801c418:	2200      	movs	r2, #0
 801c41a:	601a      	str	r2, [r3, #0]
 801c41c:	605a      	str	r2, [r3, #4]
 801c41e:	609a      	str	r2, [r3, #8]
 801c420:	60da      	str	r2, [r3, #12]
 801c422:	611a      	str	r2, [r3, #16]

	// Enable clocks for all available GPIO ports
	__HAL_RCC_GPIOA_CLK_ENABLE();
 801c424:	2001      	movs	r0, #1
 801c426:	f7fe ff93 	bl	801b350 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 801c42a:	2002      	movs	r0, #2
 801c42c:	f7fe ff90 	bl	801b350 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 801c430:	2004      	movs	r0, #4
 801c432:	f7fe ff8d 	bl	801b350 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOH_CLK_ENABLE();
 801c436:	2080      	movs	r0, #128	@ 0x80
 801c438:	f7fe ff8a 	bl	801b350 <LL_AHB2_GRP1_EnableClock>

	// Configure all pins of the GPIO ports as analog to reduce power consumption
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801c43c:	2303      	movs	r3, #3
 801c43e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801c440:	2300      	movs	r3, #0
 801c442:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pin = GPIO_PIN_All;
 801c444:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801c448:	607b      	str	r3, [r7, #4]

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801c44a:	1d3b      	adds	r3, r7, #4
 801c44c:	4619      	mov	r1, r3
 801c44e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801c452:	f7e7 fa3f 	bl	80038d4 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801c456:	1d3b      	adds	r3, r7, #4
 801c458:	4619      	mov	r1, r3
 801c45a:	480e      	ldr	r0, [pc, #56]	@ (801c494 <My_Set_All_GPIO_To_Analog_Mode+0x84>)
 801c45c:	f7e7 fa3a 	bl	80038d4 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801c460:	1d3b      	adds	r3, r7, #4
 801c462:	4619      	mov	r1, r3
 801c464:	480c      	ldr	r0, [pc, #48]	@ (801c498 <My_Set_All_GPIO_To_Analog_Mode+0x88>)
 801c466:	f7e7 fa35 	bl	80038d4 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 801c46a:	1d3b      	adds	r3, r7, #4
 801c46c:	4619      	mov	r1, r3
 801c46e:	480b      	ldr	r0, [pc, #44]	@ (801c49c <My_Set_All_GPIO_To_Analog_Mode+0x8c>)
 801c470:	f7e7 fa30 	bl	80038d4 <HAL_GPIO_Init>

	// Disable clocks to save power
	__HAL_RCC_GPIOA_CLK_DISABLE();
 801c474:	2001      	movs	r0, #1
 801c476:	f7fe ff83 	bl	801b380 <LL_AHB2_GRP1_DisableClock>
	__HAL_RCC_GPIOB_CLK_DISABLE();
 801c47a:	2002      	movs	r0, #2
 801c47c:	f7fe ff80 	bl	801b380 <LL_AHB2_GRP1_DisableClock>
	__HAL_RCC_GPIOC_CLK_DISABLE();
 801c480:	2004      	movs	r0, #4
 801c482:	f7fe ff7d 	bl	801b380 <LL_AHB2_GRP1_DisableClock>
	__HAL_RCC_GPIOH_CLK_DISABLE();
 801c486:	2080      	movs	r0, #128	@ 0x80
 801c488:	f7fe ff7a 	bl	801b380 <LL_AHB2_GRP1_DisableClock>
}
 801c48c:	bf00      	nop
 801c48e:	3718      	adds	r7, #24
 801c490:	46bd      	mov	sp, r7
 801c492:	bd80      	pop	{r7, pc}
 801c494:	48000400 	.word	0x48000400
 801c498:	48000800 	.word	0x48000800
 801c49c:	48001c00 	.word	0x48001c00

0801c4a0 <My_Enter_Stop2_Mode_WFI>:

void My_Enter_Stop2_Mode_WFI(uint32_t PWR_PVDLEVEL, uint32_t PWR_PVD_MODE_IT)	// Enter in STOP2 MODE and Wait for Interrupts (WFI)
{
 801c4a0:	b580      	push	{r7, lr}
 801c4a2:	b082      	sub	sp, #8
 801c4a4:	af00      	add	r7, sp, #0
 801c4a6:	6078      	str	r0, [r7, #4]
 801c4a8:	6039      	str	r1, [r7, #0]

	sConfigPVD.PVDLevel = PWR_PVDLEVEL; 							// Set PVD Threshold
 801c4aa:	4a31      	ldr	r2, [pc, #196]	@ (801c570 <My_Enter_Stop2_Mode_WFI+0xd0>)
 801c4ac:	687b      	ldr	r3, [r7, #4]
 801c4ae:	6013      	str	r3, [r2, #0]
	sConfigPVD.Mode = PWR_PVD_MODE_IT;								// Config PVD to provide Interrupt
 801c4b0:	4a2f      	ldr	r2, [pc, #188]	@ (801c570 <My_Enter_Stop2_Mode_WFI+0xd0>)
 801c4b2:	683b      	ldr	r3, [r7, #0]
 801c4b4:	6053      	str	r3, [r2, #4]

	HAL_PWR_ConfigPVD(&sConfigPVD);									// Configure PVD
 801c4b6:	482e      	ldr	r0, [pc, #184]	@ (801c570 <My_Enter_Stop2_Mode_WFI+0xd0>)
 801c4b8:	f7e8 fa74 	bl	80049a4 <HAL_PWR_ConfigPVD>

	if (my_MX_GPIO_Init_done == 1)
 801c4bc:	4b2d      	ldr	r3, [pc, #180]	@ (801c574 <My_Enter_Stop2_Mode_WFI+0xd4>)
 801c4be:	781b      	ldrb	r3, [r3, #0]
 801c4c0:	2b01      	cmp	r3, #1
 801c4c2:	d101      	bne.n	801c4c8 <My_Enter_Stop2_Mode_WFI+0x28>
	{
		BSP_RADIO_DeInit();											// Deinit the External Radio Amplifier
 801c4c4:	f7e6 f97c 	bl	80027c0 <BSP_RADIO_DeInit>
	}

	if (my_SystemClock_Config_done == 1)							// Check if the Clock System has been configured
 801c4c8:	4b2b      	ldr	r3, [pc, #172]	@ (801c578 <My_Enter_Stop2_Mode_WFI+0xd8>)
 801c4ca:	781b      	ldrb	r3, [r3, #0]
 801c4cc:	2b01      	cmp	r3, #1
 801c4ce:	d104      	bne.n	801c4da <My_Enter_Stop2_Mode_WFI+0x3a>
	{
		HAL_SuspendTick();											// Suspend Tick increment of System Clock
 801c4d0:	f7e6 fa6a 	bl	80029a8 <HAL_SuspendTick>
		__HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI); 	// Ensure that MSI is wake-up system clock
 801c4d4:	2000      	movs	r0, #0
 801c4d6:	f7fe ff28 	bl	801b32a <LL_RCC_SetClkAfterWakeFromStop>
	}

	if((LL_PWR_IsActiveFlag_C1SB() == 0) || (LL_PWR_IsActiveFlag_C2SB() == 0))
 801c4da:	f7fe fed1 	bl	801b280 <LL_PWR_IsActiveFlag_C1SB>
 801c4de:	4603      	mov	r3, r0
 801c4e0:	2b00      	cmp	r3, #0
 801c4e2:	d004      	beq.n	801c4ee <My_Enter_Stop2_Mode_WFI+0x4e>
 801c4e4:	f7fe fee0 	bl	801b2a8 <LL_PWR_IsActiveFlag_C2SB>
 801c4e8:	4603      	mov	r3, r0
 801c4ea:	2b00      	cmp	r3, #0
 801c4ec:	d109      	bne.n	801c502 <My_Enter_Stop2_Mode_WFI+0x62>
	{
		LL_PWR_ClearFlag_C1STOP_C1STB();			  				// Clear standby and stop flags for CPU1
 801c4ee:	f7fe feef 	bl	801b2d0 <LL_PWR_ClearFlag_C1STOP_C1STB>
		LL_PWR_ClearFlag_C2STOP_C2STB();							// Clear standby and stop flags for CPU2
 801c4f2:	f7fe fef9 	bl	801b2e8 <LL_PWR_ClearFlag_C2STOP_C2STB>
		LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN); 				// Set the lowest low-power mode for CPU2: shutdown mode
 801c4f6:	2007      	movs	r0, #7
 801c4f8:	f7fe feac 	bl	801b254 <LL_C2_PWR_SetPowerMode>
		LL_PWR_SetPowerMode(LL_PWR_MODE_STOP2);						// Set Low-Power mode for CPU1
 801c4fc:	2002      	movs	r0, #2
 801c4fe:	f7fe fe95 	bl	801b22c <LL_PWR_SetPowerMode>
	}

	My_Interrupts_Manager(NVIC_DISABLE);							// Disable and Clear All Pending Interrupts
 801c502:	2001      	movs	r0, #1
 801c504:	f000 f870 	bl	801c5e8 <My_Interrupts_Manager>
	HAL_NVIC_ClearPendingIRQ(PVD_PVM_IRQn);							// Clear Pending Bit for PVD
 801c508:	2001      	movs	r0, #1
 801c50a:	f7e6 fdbc 	bl	8003086 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(RTC_Alarm_IRQn);						// Clear Pending Bit for RTC Alarms (A and B) Interrupt
 801c50e:	202a      	movs	r0, #42	@ 0x2a
 801c510:	f7e6 fdb9 	bl	8003086 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_ClearPendingIRQ(COMP_IRQn);							// Clear Pending Bit for Comparator
 801c514:	2015      	movs	r0, #21
 801c516:	f7e6 fdb6 	bl	8003086 <HAL_NVIC_ClearPendingIRQ>

	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_PVDO);							// CLear Power Voltage Detector output Flag
 801c51a:	4b18      	ldr	r3, [pc, #96]	@ (801c57c <My_Enter_Stop2_Mode_WFI+0xdc>)
 801c51c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801c520:	619a      	str	r2, [r3, #24]
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);								// CLear Flag
 801c522:	4b16      	ldr	r3, [pc, #88]	@ (801c57c <My_Enter_Stop2_Mode_WFI+0xdc>)
 801c524:	2207      	movs	r2, #7
 801c526:	619a      	str	r2, [r3, #24]
	HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);								// Enable Interrupt for PVD
 801c528:	2001      	movs	r0, #1
 801c52a:	f7e6 fd90 	bl	800304e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);								// Enable Interrupt for Interrupt for RTC Alarms (A and B) Interrupt
 801c52e:	202a      	movs	r0, #42	@ 0x2a
 801c530:	f7e6 fd8d 	bl	800304e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(LPTIM1_IRQn);								// Enable Interrupt for LPTIM1
 801c534:	2027      	movs	r0, #39	@ 0x27
 801c536:	f7e6 fd8a 	bl	800304e <HAL_NVIC_EnableIRQ>

	if (__HAL_PWR_GET_FLAG(PWR_CR1_LPR) == 1)						// Check if PWR_CR1_LPR is set (must be 0 in Stop2 Mode)
 801c53a:	4b10      	ldr	r3, [pc, #64]	@ (801c57c <My_Enter_Stop2_Mode_WFI+0xdc>)
 801c53c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801c540:	f003 0301 	and.w	r3, r3, #1
 801c544:	2b01      	cmp	r3, #1
 801c546:	d105      	bne.n	801c554 <My_Enter_Stop2_Mode_WFI+0xb4>
	{
		CLEAR_BIT(PWR->CR1, PWR_CR1_LPR); 							// LPR bit must be cleared to enter stop 2 mode.
 801c548:	4b0c      	ldr	r3, [pc, #48]	@ (801c57c <My_Enter_Stop2_Mode_WFI+0xdc>)
 801c54a:	681b      	ldr	r3, [r3, #0]
 801c54c:	4a0b      	ldr	r2, [pc, #44]	@ (801c57c <My_Enter_Stop2_Mode_WFI+0xdc>)
 801c54e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 801c552:	6013      	str	r3, [r2, #0]
	}

	HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);					// Enter STOP2 mode and WFI
 801c554:	2001      	movs	r0, #1
 801c556:	f7e8 fbad 	bl	8004cb4 <HAL_PWREx_EnterSTOP2Mode>

	if (my_SubghzApp_Init_done == 0)
 801c55a:	4b09      	ldr	r3, [pc, #36]	@ (801c580 <My_Enter_Stop2_Mode_WFI+0xe0>)
 801c55c:	781b      	ldrb	r3, [r3, #0]
 801c55e:	2b00      	cmp	r3, #0
 801c560:	d101      	bne.n	801c566 <My_Enter_Stop2_Mode_WFI+0xc6>
	{
		My_Exit_Stop2_Mode_WFI();									// Exit From Stop2 Mode
 801c562:	f000 f80f 	bl	801c584 <My_Exit_Stop2_Mode_WFI>
	}
}
 801c566:	bf00      	nop
 801c568:	3708      	adds	r7, #8
 801c56a:	46bd      	mov	sp, r7
 801c56c:	bd80      	pop	{r7, pc}
 801c56e:	bf00      	nop
 801c570:	20001be0 	.word	0x20001be0
 801c574:	200008a4 	.word	0x200008a4
 801c578:	2000074c 	.word	0x2000074c
 801c57c:	58000400 	.word	0x58000400
 801c580:	200008a7 	.word	0x200008a7

0801c584 <My_Exit_Stop2_Mode_WFI>:

void My_Exit_Stop2_Mode_WFI(void)	// Exit Stop2 Mode After Interrupt
{
 801c584:	b580      	push	{r7, lr}
 801c586:	af00      	add	r7, sp, #0
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2);		// Undervolting
 801c588:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 801c58c:	f7e8 fad2 	bl	8004b34 <HAL_PWREx_ControlVoltageScaling>
	My_Interrupts_Manager(NVIC_ENABLE);									// Re-Enable Interrupts
 801c590:	2000      	movs	r0, #0
 801c592:	f000 f829 	bl	801c5e8 <My_Interrupts_Manager>
	if (my_SystemClock_Config_done == 1)
 801c596:	4b04      	ldr	r3, [pc, #16]	@ (801c5a8 <My_Exit_Stop2_Mode_WFI+0x24>)
 801c598:	781b      	ldrb	r3, [r3, #0]
 801c59a:	2b01      	cmp	r3, #1
 801c59c:	d101      	bne.n	801c5a2 <My_Exit_Stop2_Mode_WFI+0x1e>
	{
		HAL_ResumeTick();												// Resume Tick Increment
 801c59e:	f7e6 fa11 	bl	80029c4 <HAL_ResumeTick>
	}
}
 801c5a2:	bf00      	nop
 801c5a4:	bd80      	pop	{r7, pc}
 801c5a6:	bf00      	nop
 801c5a8:	2000074c 	.word	0x2000074c

0801c5ac <My_Set_PVD>:

void My_Set_PVD(uint32_t PWR_PVDLEVEL, uint32_t PWR_PVD_MODE_IT)	// Sets PVD Threshold and Interrupt Modes
{
 801c5ac:	b580      	push	{r7, lr}
 801c5ae:	b082      	sub	sp, #8
 801c5b0:	af00      	add	r7, sp, #0
 801c5b2:	6078      	str	r0, [r7, #4]
 801c5b4:	6039      	str	r1, [r7, #0]
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_PVDO);							// CLear Power Voltage Detector output Flag
 801c5b6:	4b0a      	ldr	r3, [pc, #40]	@ (801c5e0 <My_Set_PVD+0x34>)
 801c5b8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801c5bc:	619a      	str	r2, [r3, #24]
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);								// CLear Flag
 801c5be:	4b08      	ldr	r3, [pc, #32]	@ (801c5e0 <My_Set_PVD+0x34>)
 801c5c0:	2207      	movs	r2, #7
 801c5c2:	619a      	str	r2, [r3, #24]
	sConfigPVD.PVDLevel = PWR_PVDLEVEL; 							// Set PVD Threshold
 801c5c4:	4a07      	ldr	r2, [pc, #28]	@ (801c5e4 <My_Set_PVD+0x38>)
 801c5c6:	687b      	ldr	r3, [r7, #4]
 801c5c8:	6013      	str	r3, [r2, #0]
	sConfigPVD.Mode = PWR_PVD_MODE_IT;								// Set PVD to provide Interrupt
 801c5ca:	4a06      	ldr	r2, [pc, #24]	@ (801c5e4 <My_Set_PVD+0x38>)
 801c5cc:	683b      	ldr	r3, [r7, #0]
 801c5ce:	6053      	str	r3, [r2, #4]
	HAL_PWR_ConfigPVD(&sConfigPVD);									// Configure PVD
 801c5d0:	4804      	ldr	r0, [pc, #16]	@ (801c5e4 <My_Set_PVD+0x38>)
 801c5d2:	f7e8 f9e7 	bl	80049a4 <HAL_PWR_ConfigPVD>
}
 801c5d6:	bf00      	nop
 801c5d8:	3708      	adds	r7, #8
 801c5da:	46bd      	mov	sp, r7
 801c5dc:	bd80      	pop	{r7, pc}
 801c5de:	bf00      	nop
 801c5e0:	58000400 	.word	0x58000400
 801c5e4:	20001be0 	.word	0x20001be0

0801c5e8 <My_Interrupts_Manager>:

	__WFI(); 														// Wait for the Interrupt
}

void My_Interrupts_Manager(My_Interrupts_Manager_td My_Interrupts_Status)	// Enable or Disable IRQ
{
 801c5e8:	b580      	push	{r7, lr}
 801c5ea:	b082      	sub	sp, #8
 801c5ec:	af00      	add	r7, sp, #0
 801c5ee:	4603      	mov	r3, r0
 801c5f0:	71fb      	strb	r3, [r7, #7]
	switch (My_Interrupts_Status)
 801c5f2:	79fb      	ldrb	r3, [r7, #7]
 801c5f4:	2b02      	cmp	r3, #2
 801c5f6:	f000 80aa 	beq.w	801c74e <My_Interrupts_Manager+0x166>
 801c5fa:	2b02      	cmp	r3, #2
 801c5fc:	f300 80f0 	bgt.w	801c7e0 <My_Interrupts_Manager+0x1f8>
 801c600:	2b00      	cmp	r3, #0
 801c602:	d033      	beq.n	801c66c <My_Interrupts_Manager+0x84>
 801c604:	2b01      	cmp	r3, #1
 801c606:	f040 80eb 	bne.w	801c7e0 <My_Interrupts_Manager+0x1f8>
	{
	case NVIC_DISABLE:
	{

		HAL_NVIC_DisableIRQ(PVD_PVM_IRQn);									// Disable Interrupt for PVD
 801c60a:	2001      	movs	r0, #1
 801c60c:	f7e6 fd2d 	bl	800306a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(RTC_WKUP_IRQn);									// Disable Interrupt for RTC_WKUP
 801c610:	2003      	movs	r0, #3
 801c612:	f7e6 fd2a 	bl	800306a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);					// Disable Interrupt for RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts
 801c616:	2002      	movs	r0, #2
 801c618:	f7e6 fd27 	bl	800306a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);							// Disable Interrupt for DMA1 Channel 5 Interrupt
 801c61c:	200f      	movs	r0, #15
 801c61e:	f7e6 fd24 	bl	800306a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(USART2_IRQn);									// Disable Interrupt for USART2
 801c622:	2025      	movs	r0, #37	@ 0x25
 801c624:	f7e6 fd21 	bl	800306a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);								// Disable Interrupt for RTC Alarms (A and B) Interrupt
 801c628:	202a      	movs	r0, #42	@ 0x2a
 801c62a:	f7e6 fd1e 	bl	800306a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(SUBGHZ_Radio_IRQn);								// Disable Interrupt for SUBGHZ Radio Interrupt
 801c62e:	2032      	movs	r0, #50	@ 0x32
 801c630:	f7e6 fd1b 	bl	800306a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(LPTIM1_IRQn);									// Disable Interrupt for LPTIM1
 801c634:	2027      	movs	r0, #39	@ 0x27
 801c636:	f7e6 fd18 	bl	800306a <HAL_NVIC_DisableIRQ>

		HAL_NVIC_ClearPendingIRQ(PVD_PVM_IRQn);								// Clear Pending Bit for PVD
 801c63a:	2001      	movs	r0, #1
 801c63c:	f7e6 fd23 	bl	8003086 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(RTC_WKUP_IRQn);							// Clear Pending Bit for RTC_WKUP
 801c640:	2003      	movs	r0, #3
 801c642:	f7e6 fd20 	bl	8003086 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);				// Clear Pending Bit for RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts
 801c646:	2002      	movs	r0, #2
 801c648:	f7e6 fd1d 	bl	8003086 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(DMA1_Channel5_IRQn);						// Clear Pending Bit for DMA1 Channel 5 Interrupt
 801c64c:	200f      	movs	r0, #15
 801c64e:	f7e6 fd1a 	bl	8003086 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(USART2_IRQn);								// Clear Pending Bit for USART2
 801c652:	2025      	movs	r0, #37	@ 0x25
 801c654:	f7e6 fd17 	bl	8003086 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(RTC_Alarm_IRQn);							// Clear Pending Bit for RTC Alarms (A and B) Interrupt
 801c658:	202a      	movs	r0, #42	@ 0x2a
 801c65a:	f7e6 fd14 	bl	8003086 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(SUBGHZ_Radio_IRQn);						// Clear Pending Bit for SUBGHZ Radio Interrupt
 801c65e:	2032      	movs	r0, #50	@ 0x32
 801c660:	f7e6 fd11 	bl	8003086 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(LPTIM1_IRQn);								// Clear Pending Bit for LPTIM1 Interrupt
 801c664:	2027      	movs	r0, #39	@ 0x27
 801c666:	f7e6 fd0e 	bl	8003086 <HAL_NVIC_ClearPendingIRQ>

		break;
 801c66a:	e0ba      	b.n	801c7e2 <My_Interrupts_Manager+0x1fa>
	}

	case NVIC_ENABLE:
	{
		HAL_NVIC_DisableIRQ(PVD_PVM_IRQn);									// Disable Interrupt for PVD
 801c66c:	2001      	movs	r0, #1
 801c66e:	f7e6 fcfc 	bl	800306a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(RTC_WKUP_IRQn);									// Disable Interrupt for RTC_WKUP
 801c672:	2003      	movs	r0, #3
 801c674:	f7e6 fcf9 	bl	800306a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);					// Disable Interrupt for RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts
 801c678:	2002      	movs	r0, #2
 801c67a:	f7e6 fcf6 	bl	800306a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);							// Disable Interrupt for DMA1 Channel 5 Interrupt
 801c67e:	200f      	movs	r0, #15
 801c680:	f7e6 fcf3 	bl	800306a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(USART2_IRQn);									// Disable Interrupt for USART2
 801c684:	2025      	movs	r0, #37	@ 0x25
 801c686:	f7e6 fcf0 	bl	800306a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);								// Disable Interrupt for RTC Alarms (A and B) Interrupt
 801c68a:	202a      	movs	r0, #42	@ 0x2a
 801c68c:	f7e6 fced 	bl	800306a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(SUBGHZ_Radio_IRQn);								// Disable Interrupt for SUBGHZ Radio Interrupt
 801c690:	2032      	movs	r0, #50	@ 0x32
 801c692:	f7e6 fcea 	bl	800306a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(LPTIM1_IRQn);									// Disable Interrupt for LPTIM1
 801c696:	2027      	movs	r0, #39	@ 0x27
 801c698:	f7e6 fce7 	bl	800306a <HAL_NVIC_DisableIRQ>

		HAL_NVIC_ClearPendingIRQ(PVD_PVM_IRQn);								// Clear Pending Bit for PVD
 801c69c:	2001      	movs	r0, #1
 801c69e:	f7e6 fcf2 	bl	8003086 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(RTC_WKUP_IRQn);							// Clear Pending Bit for RTC_WKUP
 801c6a2:	2003      	movs	r0, #3
 801c6a4:	f7e6 fcef 	bl	8003086 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);				// Clear Pending Bit for RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts
 801c6a8:	2002      	movs	r0, #2
 801c6aa:	f7e6 fcec 	bl	8003086 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(DMA1_Channel5_IRQn);						// Clear Pending Bit for DMA1 Channel 5 Interrupt
 801c6ae:	200f      	movs	r0, #15
 801c6b0:	f7e6 fce9 	bl	8003086 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(USART2_IRQn);								// Clear Pending Bit for USART2
 801c6b4:	2025      	movs	r0, #37	@ 0x25
 801c6b6:	f7e6 fce6 	bl	8003086 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(RTC_Alarm_IRQn);							// Clear Pending Bit for RTC Alarms (A and B) Interrupt
 801c6ba:	202a      	movs	r0, #42	@ 0x2a
 801c6bc:	f7e6 fce3 	bl	8003086 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(SUBGHZ_Radio_IRQn);						// Clear Pending Bit for SUBGHZ Radio Interrupt
 801c6c0:	2032      	movs	r0, #50	@ 0x32
 801c6c2:	f7e6 fce0 	bl	8003086 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(LPTIM1_IRQn);								// Clear Pending Bit for LPTIM1 Interrupt
 801c6c6:	2027      	movs	r0, #39	@ 0x27
 801c6c8:	f7e6 fcdd 	bl	8003086 <HAL_NVIC_ClearPendingIRQ>

		HAL_NVIC_SetPriority(PVD_PVM_IRQn, 0, 0);							// Set Interrupt Priority
 801c6cc:	2200      	movs	r2, #0
 801c6ce:	2100      	movs	r1, #0
 801c6d0:	2001      	movs	r0, #1
 801c6d2:	f7e6 fca2 	bl	800301a <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 1, 0);							// Set Interrupt Priority
 801c6d6:	2200      	movs	r2, #0
 801c6d8:	2101      	movs	r1, #1
 801c6da:	2003      	movs	r0, #3
 801c6dc:	f7e6 fc9d 	bl	800301a <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 1, 0);			// Set Interrupt Priority
 801c6e0:	2200      	movs	r2, #0
 801c6e2:	2101      	movs	r1, #1
 801c6e4:	2002      	movs	r0, #2
 801c6e6:	f7e6 fc98 	bl	800301a <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 1, 0);						// Set Interrupt Priority
 801c6ea:	2200      	movs	r2, #0
 801c6ec:	2101      	movs	r1, #1
 801c6ee:	200f      	movs	r0, #15
 801c6f0:	f7e6 fc93 	bl	800301a <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);							// Set Interrupt Priority
 801c6f4:	2200      	movs	r2, #0
 801c6f6:	2101      	movs	r1, #1
 801c6f8:	2025      	movs	r0, #37	@ 0x25
 801c6fa:	f7e6 fc8e 	bl	800301a <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 1, 0);							// Set Interrupt Priority
 801c6fe:	2200      	movs	r2, #0
 801c700:	2101      	movs	r1, #1
 801c702:	202a      	movs	r0, #42	@ 0x2a
 801c704:	f7e6 fc89 	bl	800301a <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 1, 0);						// Set Interrupt Priority
 801c708:	2200      	movs	r2, #0
 801c70a:	2101      	movs	r1, #1
 801c70c:	2032      	movs	r0, #50	@ 0x32
 801c70e:	f7e6 fc84 	bl	800301a <HAL_NVIC_SetPriority>
		HAL_NVIC_SetPriority(LPTIM1_IRQn, 1, 0);							// Set Interrupt Priority
 801c712:	2200      	movs	r2, #0
 801c714:	2101      	movs	r1, #1
 801c716:	2027      	movs	r0, #39	@ 0x27
 801c718:	f7e6 fc7f 	bl	800301a <HAL_NVIC_SetPriority>

		HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);									// Enable Interrupt for PVD
 801c71c:	2001      	movs	r0, #1
 801c71e:	f7e6 fc96 	bl	800304e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);									// Enable Interrupt for RTC_WKUP
 801c722:	2003      	movs	r0, #3
 801c724:	f7e6 fc93 	bl	800304e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);					// Enable Interrupt for RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts
 801c728:	2002      	movs	r0, #2
 801c72a:	f7e6 fc90 	bl	800304e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);								// Enable Interrupt for SUBGHZ Radio Interrupt
 801c72e:	200f      	movs	r0, #15
 801c730:	f7e6 fc8d 	bl	800304e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(USART2_IRQn);									// Enable Interrupt for USART2
 801c734:	2025      	movs	r0, #37	@ 0x25
 801c736:	f7e6 fc8a 	bl	800304e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);									// Enable Interrupt for Interrupt for RTC Alarms (A and B) Interrupt
 801c73a:	202a      	movs	r0, #42	@ 0x2a
 801c73c:	f7e6 fc87 	bl	800304e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);								// Enable Interrupt for SUBGHZ Radio Interrupt
 801c740:	2032      	movs	r0, #50	@ 0x32
 801c742:	f7e6 fc84 	bl	800304e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(LPTIM1_IRQn);									// Enable Interrupt for LPTIM1
 801c746:	2027      	movs	r0, #39	@ 0x27
 801c748:	f7e6 fc81 	bl	800304e <HAL_NVIC_EnableIRQ>

		break;
 801c74c:	e049      	b.n	801c7e2 <My_Interrupts_Manager+0x1fa>
	}

	case NVIC_CLEAR:
	{
		HAL_NVIC_DisableIRQ(PVD_PVM_IRQn);									// Disable Interrupt for PVD
 801c74e:	2001      	movs	r0, #1
 801c750:	f7e6 fc8b 	bl	800306a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(RTC_WKUP_IRQn);									// Disable Interrupt for RTC_WKUP
 801c754:	2003      	movs	r0, #3
 801c756:	f7e6 fc88 	bl	800306a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);					// Disable Interrupt for RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts
 801c75a:	2002      	movs	r0, #2
 801c75c:	f7e6 fc85 	bl	800306a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);							// Disable Interrupt for DMA1 Channel 5 Interrupt
 801c760:	200f      	movs	r0, #15
 801c762:	f7e6 fc82 	bl	800306a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(USART2_IRQn);									// Disable Interrupt for USART2
 801c766:	2025      	movs	r0, #37	@ 0x25
 801c768:	f7e6 fc7f 	bl	800306a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(RTC_Alarm_IRQn);								// Disable Interrupt for RTC Alarms (A and B) Interrupt
 801c76c:	202a      	movs	r0, #42	@ 0x2a
 801c76e:	f7e6 fc7c 	bl	800306a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(SUBGHZ_Radio_IRQn);								// Disable Interrupt for SUBGHZ Radio Interrupt
 801c772:	2032      	movs	r0, #50	@ 0x32
 801c774:	f7e6 fc79 	bl	800306a <HAL_NVIC_DisableIRQ>
		HAL_NVIC_DisableIRQ(LPTIM1_IRQn);									// Disable Interrupt for LPTIM1
 801c778:	2027      	movs	r0, #39	@ 0x27
 801c77a:	f7e6 fc76 	bl	800306a <HAL_NVIC_DisableIRQ>

		HAL_NVIC_ClearPendingIRQ(PVD_PVM_IRQn);								// Clear Pending Bit for PVD
 801c77e:	2001      	movs	r0, #1
 801c780:	f7e6 fc81 	bl	8003086 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(RTC_WKUP_IRQn);							// Clear Pending Bit for RTC_WKUP
 801c784:	2003      	movs	r0, #3
 801c786:	f7e6 fc7e 	bl	8003086 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);				// Clear Pending Bit for RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts
 801c78a:	2002      	movs	r0, #2
 801c78c:	f7e6 fc7b 	bl	8003086 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(DMA1_Channel5_IRQn);						// Clear Pending Bit for DMA1 Channel 5 Interrupt
 801c790:	200f      	movs	r0, #15
 801c792:	f7e6 fc78 	bl	8003086 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(USART2_IRQn);								// Clear Pending Bit for USART2
 801c796:	2025      	movs	r0, #37	@ 0x25
 801c798:	f7e6 fc75 	bl	8003086 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(RTC_Alarm_IRQn);							// Clear Pending Bit for RTC Alarms (A and B) Interrupt
 801c79c:	202a      	movs	r0, #42	@ 0x2a
 801c79e:	f7e6 fc72 	bl	8003086 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(SUBGHZ_Radio_IRQn);						// Clear Pending Bit for SUBGHZ Radio Interrupt
 801c7a2:	2032      	movs	r0, #50	@ 0x32
 801c7a4:	f7e6 fc6f 	bl	8003086 <HAL_NVIC_ClearPendingIRQ>
		HAL_NVIC_ClearPendingIRQ(LPTIM1_IRQn);								// Clear Pending Bit for LPTIM1 Interrupt
 801c7a8:	2027      	movs	r0, #39	@ 0x27
 801c7aa:	f7e6 fc6c 	bl	8003086 <HAL_NVIC_ClearPendingIRQ>

		HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);									// Enable Interrupt for PVD
 801c7ae:	2001      	movs	r0, #1
 801c7b0:	f7e6 fc4d 	bl	800304e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);									// Enable Interrupt for RTC_WKUP
 801c7b4:	2003      	movs	r0, #3
 801c7b6:	f7e6 fc4a 	bl	800304e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);					// Enable Interrupt for RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts
 801c7ba:	2002      	movs	r0, #2
 801c7bc:	f7e6 fc47 	bl	800304e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);								// Enable Interrupt for SUBGHZ Radio Interrupt
 801c7c0:	200f      	movs	r0, #15
 801c7c2:	f7e6 fc44 	bl	800304e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(USART2_IRQn);									// Enable Interrupt for USART2
 801c7c6:	2025      	movs	r0, #37	@ 0x25
 801c7c8:	f7e6 fc41 	bl	800304e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);									// Enable Interrupt for Interrupt for RTC Alarms (A and B) Interrupt
 801c7cc:	202a      	movs	r0, #42	@ 0x2a
 801c7ce:	f7e6 fc3e 	bl	800304e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);								// Enable Interrupt for SUBGHZ Radio Interrupt
 801c7d2:	2032      	movs	r0, #50	@ 0x32
 801c7d4:	f7e6 fc3b 	bl	800304e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(LPTIM1_IRQn);									// Enable Interrupt for LPTIM1
 801c7d8:	2027      	movs	r0, #39	@ 0x27
 801c7da:	f7e6 fc38 	bl	800304e <HAL_NVIC_EnableIRQ>

		break;
 801c7de:	e000      	b.n	801c7e2 <My_Interrupts_Manager+0x1fa>
	}

	default:
	{
		break;
 801c7e0:	bf00      	nop
	}

	}
}
 801c7e2:	bf00      	nop
 801c7e4:	3708      	adds	r7, #8
 801c7e6:	46bd      	mov	sp, r7
 801c7e8:	bd80      	pop	{r7, pc}
	...

0801c7ec <My_Set_RTC_Alarm_A>:

void My_Set_RTC_Alarm_A(uint8_t my_hours, uint8_t my_minutes, uint8_t my_seconds, uint32_t my_subseconds)
{
 801c7ec:	b580      	push	{r7, lr}
 801c7ee:	b082      	sub	sp, #8
 801c7f0:	af00      	add	r7, sp, #0
 801c7f2:	603b      	str	r3, [r7, #0]
 801c7f4:	4603      	mov	r3, r0
 801c7f6:	71fb      	strb	r3, [r7, #7]
 801c7f8:	460b      	mov	r3, r1
 801c7fa:	71bb      	strb	r3, [r7, #6]
 801c7fc:	4613      	mov	r3, r2
 801c7fe:	717b      	strb	r3, [r7, #5]

	/* This function Sets the RTC ALARM A Timer */

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 801c800:	2200      	movs	r2, #0
 801c802:	491f      	ldr	r1, [pc, #124]	@ (801c880 <My_Set_RTC_Alarm_A+0x94>)
 801c804:	481f      	ldr	r0, [pc, #124]	@ (801c884 <My_Set_RTC_Alarm_A+0x98>)
 801c806:	f7e9 fed3 	bl	80065b0 <HAL_RTC_GetTime>

	sAlarm.AlarmTime.Hours = sTime.Hours + my_hours;
 801c80a:	4b1d      	ldr	r3, [pc, #116]	@ (801c880 <My_Set_RTC_Alarm_A+0x94>)
 801c80c:	781a      	ldrb	r2, [r3, #0]
 801c80e:	79fb      	ldrb	r3, [r7, #7]
 801c810:	4413      	add	r3, r2
 801c812:	b2da      	uxtb	r2, r3
 801c814:	4b1c      	ldr	r3, [pc, #112]	@ (801c888 <My_Set_RTC_Alarm_A+0x9c>)
 801c816:	701a      	strb	r2, [r3, #0]
	sAlarm.AlarmTime.Minutes = my_minutes + sTime.Minutes;
 801c818:	4b19      	ldr	r3, [pc, #100]	@ (801c880 <My_Set_RTC_Alarm_A+0x94>)
 801c81a:	785a      	ldrb	r2, [r3, #1]
 801c81c:	79bb      	ldrb	r3, [r7, #6]
 801c81e:	4413      	add	r3, r2
 801c820:	b2da      	uxtb	r2, r3
 801c822:	4b19      	ldr	r3, [pc, #100]	@ (801c888 <My_Set_RTC_Alarm_A+0x9c>)
 801c824:	705a      	strb	r2, [r3, #1]
	sAlarm.AlarmTime.Seconds = my_seconds + sTime.Seconds;
 801c826:	4b16      	ldr	r3, [pc, #88]	@ (801c880 <My_Set_RTC_Alarm_A+0x94>)
 801c828:	789a      	ldrb	r2, [r3, #2]
 801c82a:	797b      	ldrb	r3, [r7, #5]
 801c82c:	4413      	add	r3, r2
 801c82e:	b2da      	uxtb	r2, r3
 801c830:	4b15      	ldr	r3, [pc, #84]	@ (801c888 <My_Set_RTC_Alarm_A+0x9c>)
 801c832:	709a      	strb	r2, [r3, #2]
	sAlarm.AlarmTime.SubSeconds = my_subseconds + sTime.SubSeconds;
 801c834:	4b12      	ldr	r3, [pc, #72]	@ (801c880 <My_Set_RTC_Alarm_A+0x94>)
 801c836:	685a      	ldr	r2, [r3, #4]
 801c838:	683b      	ldr	r3, [r7, #0]
 801c83a:	4413      	add	r3, r2
 801c83c:	4a12      	ldr	r2, [pc, #72]	@ (801c888 <My_Set_RTC_Alarm_A+0x9c>)
 801c83e:	6053      	str	r3, [r2, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 801c840:	4b11      	ldr	r3, [pc, #68]	@ (801c888 <My_Set_RTC_Alarm_A+0x9c>)
 801c842:	2200      	movs	r2, #0
 801c844:	60da      	str	r2, [r3, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 801c846:	4b10      	ldr	r3, [pc, #64]	@ (801c888 <My_Set_RTC_Alarm_A+0x9c>)
 801c848:	2200      	movs	r2, #0
 801c84a:	611a      	str	r2, [r3, #16]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 801c84c:	4b0e      	ldr	r3, [pc, #56]	@ (801c888 <My_Set_RTC_Alarm_A+0x9c>)
 801c84e:	2200      	movs	r2, #0
 801c850:	615a      	str	r2, [r3, #20]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 801c852:	4b0d      	ldr	r3, [pc, #52]	@ (801c888 <My_Set_RTC_Alarm_A+0x9c>)
 801c854:	2200      	movs	r2, #0
 801c856:	619a      	str	r2, [r3, #24]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 801c858:	4b0b      	ldr	r3, [pc, #44]	@ (801c888 <My_Set_RTC_Alarm_A+0x9c>)
 801c85a:	2200      	movs	r2, #0
 801c85c:	621a      	str	r2, [r3, #32]
	sAlarm.AlarmDateWeekDay = 0x1;
 801c85e:	4b0a      	ldr	r3, [pc, #40]	@ (801c888 <My_Set_RTC_Alarm_A+0x9c>)
 801c860:	2201      	movs	r2, #1
 801c862:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	sAlarm.Alarm = RTC_ALARM_A;
 801c866:	4b08      	ldr	r3, [pc, #32]	@ (801c888 <My_Set_RTC_Alarm_A+0x9c>)
 801c868:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801c86c:	629a      	str	r2, [r3, #40]	@ 0x28

	HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);			// Set RTC Alarm Time with Interrupt
 801c86e:	2200      	movs	r2, #0
 801c870:	4905      	ldr	r1, [pc, #20]	@ (801c888 <My_Set_RTC_Alarm_A+0x9c>)
 801c872:	4804      	ldr	r0, [pc, #16]	@ (801c884 <My_Set_RTC_Alarm_A+0x98>)
 801c874:	f7e9 ff84 	bl	8006780 <HAL_RTC_SetAlarm_IT>
}
 801c878:	bf00      	nop
 801c87a:	3708      	adds	r7, #8
 801c87c:	46bd      	mov	sp, r7
 801c87e:	bd80      	pop	{r7, pc}
 801c880:	20001c00 	.word	0x20001c00
 801c884:	20000750 	.word	0x20000750
 801c888:	20001c14 	.word	0x20001c14

0801c88c <My_Set_RTC_Alarm_B>:

void My_Set_RTC_Alarm_B(uint8_t my_hours, uint8_t my_minutes, uint8_t my_seconds, uint32_t my_subseconds)
{
 801c88c:	b580      	push	{r7, lr}
 801c88e:	b082      	sub	sp, #8
 801c890:	af00      	add	r7, sp, #0
 801c892:	603b      	str	r3, [r7, #0]
 801c894:	4603      	mov	r3, r0
 801c896:	71fb      	strb	r3, [r7, #7]
 801c898:	460b      	mov	r3, r1
 801c89a:	71bb      	strb	r3, [r7, #6]
 801c89c:	4613      	mov	r3, r2
 801c89e:	717b      	strb	r3, [r7, #5]
	/* Set the RTC ALARM B Timer */

	sTime.Hours = 0x00; 														// Config Time Parameter RTC Struct Init
 801c8a0:	4b22      	ldr	r3, [pc, #136]	@ (801c92c <My_Set_RTC_Alarm_B+0xa0>)
 801c8a2:	2200      	movs	r2, #0
 801c8a4:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = 0x00;
 801c8a6:	4b21      	ldr	r3, [pc, #132]	@ (801c92c <My_Set_RTC_Alarm_B+0xa0>)
 801c8a8:	2200      	movs	r2, #0
 801c8aa:	705a      	strb	r2, [r3, #1]
	sTime.Seconds = 0x00;
 801c8ac:	4b1f      	ldr	r3, [pc, #124]	@ (801c92c <My_Set_RTC_Alarm_B+0xa0>)
 801c8ae:	2200      	movs	r2, #0
 801c8b0:	709a      	strb	r2, [r3, #2]
	sTime.SubSeconds = 0x00;
 801c8b2:	4b1e      	ldr	r3, [pc, #120]	@ (801c92c <My_Set_RTC_Alarm_B+0xa0>)
 801c8b4:	2200      	movs	r2, #0
 801c8b6:	605a      	str	r2, [r3, #4]
	sTime.SecondFraction = 0x00;
 801c8b8:	4b1c      	ldr	r3, [pc, #112]	@ (801c92c <My_Set_RTC_Alarm_B+0xa0>)
 801c8ba:	2200      	movs	r2, #0
 801c8bc:	609a      	str	r2, [r3, #8]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 801c8be:	4b1b      	ldr	r3, [pc, #108]	@ (801c92c <My_Set_RTC_Alarm_B+0xa0>)
 801c8c0:	2200      	movs	r2, #0
 801c8c2:	60da      	str	r2, [r3, #12]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 801c8c4:	4b19      	ldr	r3, [pc, #100]	@ (801c92c <My_Set_RTC_Alarm_B+0xa0>)
 801c8c6:	2200      	movs	r2, #0
 801c8c8:	611a      	str	r2, [r3, #16]

	sAlarm.AlarmTime.Hours = my_hours;											// Config Time Parameter of RTC_Alarm Struct
 801c8ca:	4a19      	ldr	r2, [pc, #100]	@ (801c930 <My_Set_RTC_Alarm_B+0xa4>)
 801c8cc:	79fb      	ldrb	r3, [r7, #7]
 801c8ce:	7013      	strb	r3, [r2, #0]
	sAlarm.AlarmTime.Minutes = my_minutes;
 801c8d0:	4a17      	ldr	r2, [pc, #92]	@ (801c930 <My_Set_RTC_Alarm_B+0xa4>)
 801c8d2:	79bb      	ldrb	r3, [r7, #6]
 801c8d4:	7053      	strb	r3, [r2, #1]
	sAlarm.AlarmTime.Seconds = my_seconds;
 801c8d6:	4a16      	ldr	r2, [pc, #88]	@ (801c930 <My_Set_RTC_Alarm_B+0xa4>)
 801c8d8:	797b      	ldrb	r3, [r7, #5]
 801c8da:	7093      	strb	r3, [r2, #2]
	sAlarm.AlarmTime.SubSeconds = my_subseconds;
 801c8dc:	4a14      	ldr	r2, [pc, #80]	@ (801c930 <My_Set_RTC_Alarm_B+0xa4>)
 801c8de:	683b      	ldr	r3, [r7, #0]
 801c8e0:	6053      	str	r3, [r2, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 801c8e2:	4b13      	ldr	r3, [pc, #76]	@ (801c930 <My_Set_RTC_Alarm_B+0xa4>)
 801c8e4:	2200      	movs	r2, #0
 801c8e6:	60da      	str	r2, [r3, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 801c8e8:	4b11      	ldr	r3, [pc, #68]	@ (801c930 <My_Set_RTC_Alarm_B+0xa4>)
 801c8ea:	2200      	movs	r2, #0
 801c8ec:	611a      	str	r2, [r3, #16]
	sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 801c8ee:	4b10      	ldr	r3, [pc, #64]	@ (801c930 <My_Set_RTC_Alarm_B+0xa4>)
 801c8f0:	2200      	movs	r2, #0
 801c8f2:	615a      	str	r2, [r3, #20]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 801c8f4:	4b0e      	ldr	r3, [pc, #56]	@ (801c930 <My_Set_RTC_Alarm_B+0xa4>)
 801c8f6:	2200      	movs	r2, #0
 801c8f8:	619a      	str	r2, [r3, #24]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 801c8fa:	4b0d      	ldr	r3, [pc, #52]	@ (801c930 <My_Set_RTC_Alarm_B+0xa4>)
 801c8fc:	2200      	movs	r2, #0
 801c8fe:	621a      	str	r2, [r3, #32]
	sAlarm.AlarmDateWeekDay = 0x1;
 801c900:	4b0b      	ldr	r3, [pc, #44]	@ (801c930 <My_Set_RTC_Alarm_B+0xa4>)
 801c902:	2201      	movs	r2, #1
 801c904:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	sAlarm.Alarm = RTC_ALARM_B;
 801c908:	4b09      	ldr	r3, [pc, #36]	@ (801c930 <My_Set_RTC_Alarm_B+0xa4>)
 801c90a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801c90e:	629a      	str	r2, [r3, #40]	@ 0x28

	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);								// Set RTC Time (this Command needed for Set Alarm)
 801c910:	2200      	movs	r2, #0
 801c912:	4906      	ldr	r1, [pc, #24]	@ (801c92c <My_Set_RTC_Alarm_B+0xa0>)
 801c914:	4807      	ldr	r0, [pc, #28]	@ (801c934 <My_Set_RTC_Alarm_B+0xa8>)
 801c916:	f7e9 fdaf 	bl	8006478 <HAL_RTC_SetTime>
	HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);						// Set RTC Alarm Time with Interrupt
 801c91a:	2200      	movs	r2, #0
 801c91c:	4904      	ldr	r1, [pc, #16]	@ (801c930 <My_Set_RTC_Alarm_B+0xa4>)
 801c91e:	4805      	ldr	r0, [pc, #20]	@ (801c934 <My_Set_RTC_Alarm_B+0xa8>)
 801c920:	f7e9 ff2e 	bl	8006780 <HAL_RTC_SetAlarm_IT>
}
 801c924:	bf00      	nop
 801c926:	3708      	adds	r7, #8
 801c928:	46bd      	mov	sp, r7
 801c92a:	bd80      	pop	{r7, pc}
 801c92c:	20001c00 	.word	0x20001c00
 801c930:	20001c14 	.word	0x20001c14
 801c934:	20000750 	.word	0x20000750

0801c938 <My_SystemClock_Config>:

void My_SystemClock_Config(void)
{
 801c938:	b580      	push	{r7, lr}
 801c93a:	b09a      	sub	sp, #104	@ 0x68
 801c93c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 801c93e:	f107 0320 	add.w	r3, r7, #32
 801c942:	2248      	movs	r2, #72	@ 0x48
 801c944:	2100      	movs	r1, #0
 801c946:	4618      	mov	r0, r3
 801c948:	f002 ffcc 	bl	801f8e4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 801c94c:	1d3b      	adds	r3, r7, #4
 801c94e:	2200      	movs	r2, #0
 801c950:	601a      	str	r2, [r3, #0]
 801c952:	605a      	str	r2, [r3, #4]
 801c954:	609a      	str	r2, [r3, #8]
 801c956:	60da      	str	r2, [r3, #12]
 801c958:	611a      	str	r2, [r3, #16]
 801c95a:	615a      	str	r2, [r3, #20]
 801c95c:	619a      	str	r2, [r3, #24]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 801c95e:	f7e8 f813 	bl	8004988 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 801c962:	2000      	movs	r0, #0
 801c964:	f7fe fccc 	bl	801b300 <LL_RCC_LSE_SetDriveCapability>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 801c968:	4b1e      	ldr	r3, [pc, #120]	@ (801c9e4 <My_SystemClock_Config+0xac>)
 801c96a:	681b      	ldr	r3, [r3, #0]
 801c96c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 801c970:	4a1c      	ldr	r2, [pc, #112]	@ (801c9e4 <My_SystemClock_Config+0xac>)
 801c972:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 801c976:	6013      	str	r3, [r2, #0]
 801c978:	4b1a      	ldr	r3, [pc, #104]	@ (801c9e4 <My_SystemClock_Config+0xac>)
 801c97a:	681b      	ldr	r3, [r3, #0]
 801c97c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801c980:	603b      	str	r3, [r7, #0]
 801c982:	683b      	ldr	r3, [r7, #0]

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 801c984:	2324      	movs	r3, #36	@ 0x24
 801c986:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 801c988:	2381      	movs	r3, #129	@ 0x81
 801c98a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 801c98c:	2301      	movs	r3, #1
 801c98e:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 801c990:	2300      	movs	r3, #0
 801c992:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;				// Set Clock Frequency Below 16 MHz to allow Undervolting
 801c994:	2370      	movs	r3, #112	@ 0x70
 801c996:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 801c998:	2300      	movs	r3, #0
 801c99a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801c99c:	f107 0320 	add.w	r3, r7, #32
 801c9a0:	4618      	mov	r0, r3
 801c9a2:	f7e8 fc8b 	bl	80052bc <HAL_RCC_OscConfig>
 801c9a6:	4603      	mov	r3, r0
 801c9a8:	2b00      	cmp	r3, #0
 801c9aa:	d001      	beq.n	801c9b0 <My_SystemClock_Config+0x78>
	{
		Error_Handler();
 801c9ac:	f7e4 fc88 	bl	80012c0 <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 801c9b0:	234f      	movs	r3, #79	@ 0x4f
 801c9b2:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
			|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 801c9b4:	2300      	movs	r3, #0
 801c9b6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801c9b8:	2300      	movs	r3, #0
 801c9ba:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 801c9bc:	2300      	movs	r3, #0
 801c9be:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 801c9c0:	2300      	movs	r3, #0
 801c9c2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 801c9c4:	2300      	movs	r3, #0
 801c9c6:	61fb      	str	r3, [r7, #28]


	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 801c9c8:	1d3b      	adds	r3, r7, #4
 801c9ca:	2102      	movs	r1, #2
 801c9cc:	4618      	mov	r0, r3
 801c9ce:	f7e8 fff7 	bl	80059c0 <HAL_RCC_ClockConfig>
 801c9d2:	4603      	mov	r3, r0
 801c9d4:	2b00      	cmp	r3, #0
 801c9d6:	d001      	beq.n	801c9dc <My_SystemClock_Config+0xa4>
	{
		Error_Handler();
 801c9d8:	f7e4 fc72 	bl	80012c0 <Error_Handler>
	}
}
 801c9dc:	bf00      	nop
 801c9de:	3768      	adds	r7, #104	@ 0x68
 801c9e0:	46bd      	mov	sp, r7
 801c9e2:	bd80      	pop	{r7, pc}
 801c9e4:	58000400 	.word	0x58000400

0801c9e8 <My_Trise_Meas>:
	CLEAR_BIT(RCC->AHB2ENR, RCC_AHB2ENR_GPIOBEN);
	CLEAR_BIT(RCC->AHB2ENR, RCC_AHB2ENR_GPIOCEN);
}

void My_Trise_Meas(void)
{
 801c9e8:	b580      	push	{r7, lr}
 801c9ea:	af00      	add	r7, sp, #0
	/* This Function measures the charging time (Trise) during the Energy Harvesting State (EHS) from the last SMS State to the following RTS State */

	my_Trise_time_stop = HAL_LPTIM_ReadCounter(&hlptim1);// Stop Measuring Trise
 801c9ec:	481a      	ldr	r0, [pc, #104]	@ (801ca58 <My_Trise_Meas+0x70>)
 801c9ee:	f000 fc65 	bl	801d2bc <HAL_LPTIM_ReadCounter>
 801c9f2:	4603      	mov	r3, r0
 801c9f4:	b29a      	uxth	r2, r3
 801c9f6:	4b19      	ldr	r3, [pc, #100]	@ (801ca5c <My_Trise_Meas+0x74>)
 801c9f8:	801a      	strh	r2, [r3, #0]

	if (my_Trise_time_stop > my_Trise_time_start)
 801c9fa:	4b18      	ldr	r3, [pc, #96]	@ (801ca5c <My_Trise_Meas+0x74>)
 801c9fc:	881a      	ldrh	r2, [r3, #0]
 801c9fe:	4b18      	ldr	r3, [pc, #96]	@ (801ca60 <My_Trise_Meas+0x78>)
 801ca00:	881b      	ldrh	r3, [r3, #0]
 801ca02:	429a      	cmp	r2, r3
 801ca04:	d908      	bls.n	801ca18 <My_Trise_Meas+0x30>
	{
		my_Trise_time = my_Trise_time_stop - my_Trise_time_start;
 801ca06:	4b15      	ldr	r3, [pc, #84]	@ (801ca5c <My_Trise_Meas+0x74>)
 801ca08:	881a      	ldrh	r2, [r3, #0]
 801ca0a:	4b15      	ldr	r3, [pc, #84]	@ (801ca60 <My_Trise_Meas+0x78>)
 801ca0c:	881b      	ldrh	r3, [r3, #0]
 801ca0e:	1ad3      	subs	r3, r2, r3
 801ca10:	b29a      	uxth	r2, r3
 801ca12:	4b14      	ldr	r3, [pc, #80]	@ (801ca64 <My_Trise_Meas+0x7c>)
 801ca14:	801a      	strh	r2, [r3, #0]
		else
		{
			my_Trise_time = my_Trise_time_stop + (T_SMW) - my_Trise_time_start;
		}
	}
}
 801ca16:	e01c      	b.n	801ca52 <My_Trise_Meas+0x6a>
		if (my_Cmode == EOC)
 801ca18:	4b13      	ldr	r3, [pc, #76]	@ (801ca68 <My_Trise_Meas+0x80>)
 801ca1a:	781b      	ldrb	r3, [r3, #0]
 801ca1c:	2b02      	cmp	r3, #2
 801ca1e:	d10c      	bne.n	801ca3a <My_Trise_Meas+0x52>
			my_Trise_time = my_Trise_time_stop + (T_ESW + T_SMW) - my_Trise_time_start;
 801ca20:	4b0e      	ldr	r3, [pc, #56]	@ (801ca5c <My_Trise_Meas+0x74>)
 801ca22:	881a      	ldrh	r2, [r3, #0]
 801ca24:	4b0e      	ldr	r3, [pc, #56]	@ (801ca60 <My_Trise_Meas+0x78>)
 801ca26:	881b      	ldrh	r3, [r3, #0]
 801ca28:	1ad3      	subs	r3, r2, r3
 801ca2a:	b29b      	uxth	r3, r3
 801ca2c:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 801ca30:	3310      	adds	r3, #16
 801ca32:	b29a      	uxth	r2, r3
 801ca34:	4b0b      	ldr	r3, [pc, #44]	@ (801ca64 <My_Trise_Meas+0x7c>)
 801ca36:	801a      	strh	r2, [r3, #0]
}
 801ca38:	e00b      	b.n	801ca52 <My_Trise_Meas+0x6a>
			my_Trise_time = my_Trise_time_stop + (T_SMW) - my_Trise_time_start;
 801ca3a:	4b08      	ldr	r3, [pc, #32]	@ (801ca5c <My_Trise_Meas+0x74>)
 801ca3c:	881a      	ldrh	r2, [r3, #0]
 801ca3e:	4b08      	ldr	r3, [pc, #32]	@ (801ca60 <My_Trise_Meas+0x78>)
 801ca40:	881b      	ldrh	r3, [r3, #0]
 801ca42:	1ad3      	subs	r3, r2, r3
 801ca44:	b29b      	uxth	r3, r3
 801ca46:	f503 53a0 	add.w	r3, r3, #5120	@ 0x1400
 801ca4a:	3308      	adds	r3, #8
 801ca4c:	b29a      	uxth	r2, r3
 801ca4e:	4b05      	ldr	r3, [pc, #20]	@ (801ca64 <My_Trise_Meas+0x7c>)
 801ca50:	801a      	strh	r2, [r3, #0]
}
 801ca52:	bf00      	nop
 801ca54:	bd80      	pop	{r7, pc}
 801ca56:	bf00      	nop
 801ca58:	20001b40 	.word	0x20001b40
 801ca5c:	20001bc4 	.word	0x20001bc4
 801ca60:	20001bc2 	.word	0x20001bc2
 801ca64:	20001bc6 	.word	0x20001bc6
 801ca68:	20001bea 	.word	0x20001bea

0801ca6c <My_PVD_Delay>:

void My_PVD_Delay(void)
{
 801ca6c:	b580      	push	{r7, lr}
 801ca6e:	af00      	add	r7, sp, #0
	/* This Function creates a Delay to allow the PVD to settle */

	HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A); 	// Deactivate the RTC Alarm A
 801ca70:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801ca74:	4808      	ldr	r0, [pc, #32]	@ (801ca98 <My_PVD_Delay+0x2c>)
 801ca76:	f7e9 ff8f 	bl	8006998 <HAL_RTC_DeactivateAlarm>

	My_Set_RTC_Alarm_A								// Sets the RTC Alarm A Timer to create a Delay of time T_Delay_PVD
 801ca7a:	2300      	movs	r3, #0
 801ca7c:	2202      	movs	r2, #2
 801ca7e:	2100      	movs	r1, #0
 801ca80:	2000      	movs	r0, #0
 801ca82:	f7ff feb3 	bl	801c7ec <My_Set_RTC_Alarm_A>
			T_Delay_PVD_hours,
			T_Delay_PVD_minutes,
			T_Delay_PVD_seconds,
			T_Delay_PVD_subseconds
	);
	__WFI(); 										// Wait for the Interrupt
 801ca86:	bf30      	wfi

	HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);   	// Deactivate the RTC Alarm A
 801ca88:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801ca8c:	4802      	ldr	r0, [pc, #8]	@ (801ca98 <My_PVD_Delay+0x2c>)
 801ca8e:	f7e9 ff83 	bl	8006998 <HAL_RTC_DeactivateAlarm>
}
 801ca92:	bf00      	nop
 801ca94:	bd80      	pop	{r7, pc}
 801ca96:	bf00      	nop
 801ca98:	20000750 	.word	0x20000750

0801ca9c <My_PS_Detection>:

void My_PS_Detection(void)
{
 801ca9c:	b580      	push	{r7, lr}
 801ca9e:	af00      	add	r7, sp, #0
	My_Set_PVD(VPS_CHECK, PWR_PVD_MODE_NORMAL);  	  					// Configures PVD at the Highest Voltage and Normal Mode
 801caa0:	2100      	movs	r1, #0
 801caa2:	200c      	movs	r0, #12
 801caa4:	f7ff fd82 	bl	801c5ac <My_Set_PVD>

	if (__HAL_PWR_GET_FLAG(PWR_FLAG_PVDO) == 0)							// If VDD is > 2.9 Volt and and Internal Reference is Ready
 801caa8:	4b0b      	ldr	r3, [pc, #44]	@ (801cad8 <My_PS_Detection+0x3c>)
 801caaa:	695b      	ldr	r3, [r3, #20]
 801caac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801cab0:	2b00      	cmp	r3, #0
 801cab2:	d103      	bne.n	801cabc <My_PS_Detection+0x20>
	{
		my_Current_State = PSS;											// System is Supplied by a Power Supply with voltage > 3.0 V
 801cab4:	4b09      	ldr	r3, [pc, #36]	@ (801cadc <My_PS_Detection+0x40>)
 801cab6:	2201      	movs	r2, #1
 801cab8:	701a      	strb	r2, [r3, #0]
		my_Current_State = EHS;											// Set Current State as Energy Harvesting State (EHS)
		my_Next_State = RTS;											// Set Next State as Radio Transmission State (RTS)
		My_Enter_Stop2_Mode_WFI(VRTS, PWR_PVD_MODE_IT_RISING);			// Enter STOP2 Mode and WFI
//		My_Enter_Stop2_Mode_WFI(V2P5, PWR_PVD_MODE_IT_RISING);
	}
}
 801caba:	e00a      	b.n	801cad2 <My_PS_Detection+0x36>
		my_Current_State = EHS;											// Set Current State as Energy Harvesting State (EHS)
 801cabc:	4b07      	ldr	r3, [pc, #28]	@ (801cadc <My_PS_Detection+0x40>)
 801cabe:	2203      	movs	r2, #3
 801cac0:	701a      	strb	r2, [r3, #0]
		my_Next_State = RTS;											// Set Next State as Radio Transmission State (RTS)
 801cac2:	4b07      	ldr	r3, [pc, #28]	@ (801cae0 <My_PS_Detection+0x44>)
 801cac4:	2202      	movs	r2, #2
 801cac6:	701a      	strb	r2, [r3, #0]
		My_Enter_Stop2_Mode_WFI(VRTS, PWR_PVD_MODE_IT_RISING);			// Enter STOP2 Mode and WFI
 801cac8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801cacc:	200c      	movs	r0, #12
 801cace:	f7ff fce7 	bl	801c4a0 <My_Enter_Stop2_Mode_WFI>
}
 801cad2:	bf00      	nop
 801cad4:	bd80      	pop	{r7, pc}
 801cad6:	bf00      	nop
 801cad8:	58000400 	.word	0x58000400
 801cadc:	20001be9 	.word	0x20001be9
 801cae0:	20000638 	.word	0x20000638

0801cae4 <My_VDD_to_ES_Switch>:


#if STEVAL_HARVEST1
void My_VDD_to_ES_Switch(My_Switch_td mode)	// Opens and Closes the switches (High side of a GPIO) between Vdd and ES net
{
 801cae4:	b580      	push	{r7, lr}
 801cae6:	b08c      	sub	sp, #48	@ 0x30
 801cae8:	af00      	add	r7, sp, #0
 801caea:	4603      	mov	r3, r0
 801caec:	71fb      	strb	r3, [r7, #7]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 801caee:	2001      	movs	r0, #1
 801caf0:	f7fe fc2e 	bl	801b350 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 801caf4:	2002      	movs	r0, #2
 801caf6:	f7fe fc2b 	bl	801b350 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 801cafa:	2004      	movs	r0, #4
 801cafc:	f7fe fc28 	bl	801b350 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOH_CLK_ENABLE();
 801cb00:	2080      	movs	r0, #128	@ 0x80
 801cb02:	f7fe fc25 	bl	801b350 <LL_AHB2_GRP1_EnableClock>

	if (mode == Switch_OPEN)
 801cb06:	79fb      	ldrb	r3, [r7, #7]
 801cb08:	2b00      	cmp	r3, #0
 801cb0a:	d11d      	bne.n	801cb48 <My_VDD_to_ES_Switch+0x64>
	{
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 801cb0c:	f107 031c 	add.w	r3, r7, #28
 801cb10:	2200      	movs	r2, #0
 801cb12:	601a      	str	r2, [r3, #0]
 801cb14:	605a      	str	r2, [r3, #4]
 801cb16:	609a      	str	r2, [r3, #8]
 801cb18:	60da      	str	r2, [r3, #12]
 801cb1a:	611a      	str	r2, [r3, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801cb1c:	2303      	movs	r3, #3
 801cb1e:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 801cb20:	2300      	movs	r3, #0
 801cb22:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Configure GPIO Pins: PC13 */
		GPIO_InitStruct.Pin =  ES_Pin4;
 801cb24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801cb28:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(ES_PortC, &GPIO_InitStruct);
 801cb2a:	f107 031c 	add.w	r3, r7, #28
 801cb2e:	4619      	mov	r1, r3
 801cb30:	4829      	ldr	r0, [pc, #164]	@ (801cbd8 <My_VDD_to_ES_Switch+0xf4>)
 801cb32:	f7e6 fecf 	bl	80038d4 <HAL_GPIO_Init>

		/* Configure GPIO Pins: PB3, PB4, PB14 */
		GPIO_InitStruct.Pin = ES_Pin1 | ES_Pin2 | ES_Pin3;
 801cb36:	f244 0318 	movw	r3, #16408	@ 0x4018
 801cb3a:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(ES_PortB, &GPIO_InitStruct);
 801cb3c:	f107 031c 	add.w	r3, r7, #28
 801cb40:	4619      	mov	r1, r3
 801cb42:	4826      	ldr	r0, [pc, #152]	@ (801cbdc <My_VDD_to_ES_Switch+0xf8>)
 801cb44:	f7e6 fec6 	bl	80038d4 <HAL_GPIO_Init>
	}

	if (mode == Switch_CLOSED)
 801cb48:	79fb      	ldrb	r3, [r7, #7]
 801cb4a:	2b01      	cmp	r3, #1
 801cb4c:	d133      	bne.n	801cbb6 <My_VDD_to_ES_Switch+0xd2>
	{
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 801cb4e:	f107 0308 	add.w	r3, r7, #8
 801cb52:	2200      	movs	r2, #0
 801cb54:	601a      	str	r2, [r3, #0]
 801cb56:	605a      	str	r2, [r3, #4]
 801cb58:	609a      	str	r2, [r3, #8]
 801cb5a:	60da      	str	r2, [r3, #12]
 801cb5c:	611a      	str	r2, [r3, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801cb5e:	2301      	movs	r3, #1
 801cb60:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 801cb62:	2300      	movs	r3, #0
 801cb64:	613b      	str	r3, [r7, #16]

		/* Configure GPIO Pins: PC13 */
		GPIO_InitStruct.Pin =  ES_Pin4;
 801cb66:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801cb6a:	60bb      	str	r3, [r7, #8]
		HAL_GPIO_Init(ES_PortC, &GPIO_InitStruct);
 801cb6c:	f107 0308 	add.w	r3, r7, #8
 801cb70:	4619      	mov	r1, r3
 801cb72:	4819      	ldr	r0, [pc, #100]	@ (801cbd8 <My_VDD_to_ES_Switch+0xf4>)
 801cb74:	f7e6 feae 	bl	80038d4 <HAL_GPIO_Init>
		HAL_GPIO_WritePin(ES_PortC, ES_Pin4, GPIO_PIN_SET); // Close the High Side of the GPIO to connect ES_Pin4 to Vdd
 801cb78:	2201      	movs	r2, #1
 801cb7a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 801cb7e:	4816      	ldr	r0, [pc, #88]	@ (801cbd8 <My_VDD_to_ES_Switch+0xf4>)
 801cb80:	f7e7 f8d6 	bl	8003d30 <HAL_GPIO_WritePin>

		/* Configure GPIO Pins: PB3, PB4, PB14 */
		GPIO_InitStruct.Pin = ES_Pin1 | ES_Pin2 | ES_Pin3;
 801cb84:	f244 0318 	movw	r3, #16408	@ 0x4018
 801cb88:	60bb      	str	r3, [r7, #8]
		HAL_GPIO_Init(ES_PortB, &GPIO_InitStruct);
 801cb8a:	f107 0308 	add.w	r3, r7, #8
 801cb8e:	4619      	mov	r1, r3
 801cb90:	4812      	ldr	r0, [pc, #72]	@ (801cbdc <My_VDD_to_ES_Switch+0xf8>)
 801cb92:	f7e6 fe9f 	bl	80038d4 <HAL_GPIO_Init>
		HAL_GPIO_WritePin(ES_PortB, ES_Pin1, GPIO_PIN_SET); // Close the High Side of the GPIO to connect ES_Pin1 to Vdd
 801cb96:	2201      	movs	r2, #1
 801cb98:	2108      	movs	r1, #8
 801cb9a:	4810      	ldr	r0, [pc, #64]	@ (801cbdc <My_VDD_to_ES_Switch+0xf8>)
 801cb9c:	f7e7 f8c8 	bl	8003d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ES_PortB, ES_Pin2, GPIO_PIN_SET); // Close the High Side of the GPIO to connect ES_Pin2 to Vdd
 801cba0:	2201      	movs	r2, #1
 801cba2:	2110      	movs	r1, #16
 801cba4:	480d      	ldr	r0, [pc, #52]	@ (801cbdc <My_VDD_to_ES_Switch+0xf8>)
 801cba6:	f7e7 f8c3 	bl	8003d30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ES_PortB, ES_Pin3, GPIO_PIN_SET); // Close the High Side of the GPIO to connect ES_Pin3 to Vdd
 801cbaa:	2201      	movs	r2, #1
 801cbac:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 801cbb0:	480a      	ldr	r0, [pc, #40]	@ (801cbdc <My_VDD_to_ES_Switch+0xf8>)
 801cbb2:	f7e7 f8bd 	bl	8003d30 <HAL_GPIO_WritePin>
	}

	__HAL_RCC_GPIOA_CLK_DISABLE();
 801cbb6:	2001      	movs	r0, #1
 801cbb8:	f7fe fbe2 	bl	801b380 <LL_AHB2_GRP1_DisableClock>
	__HAL_RCC_GPIOB_CLK_DISABLE();
 801cbbc:	2002      	movs	r0, #2
 801cbbe:	f7fe fbdf 	bl	801b380 <LL_AHB2_GRP1_DisableClock>
	__HAL_RCC_GPIOC_CLK_DISABLE();
 801cbc2:	2004      	movs	r0, #4
 801cbc4:	f7fe fbdc 	bl	801b380 <LL_AHB2_GRP1_DisableClock>
	__HAL_RCC_GPIOH_CLK_DISABLE();
 801cbc8:	2080      	movs	r0, #128	@ 0x80
 801cbca:	f7fe fbd9 	bl	801b380 <LL_AHB2_GRP1_DisableClock>
}
 801cbce:	bf00      	nop
 801cbd0:	3730      	adds	r7, #48	@ 0x30
 801cbd2:	46bd      	mov	sp, r7
 801cbd4:	bd80      	pop	{r7, pc}
 801cbd6:	bf00      	nop
 801cbd8:	48000800 	.word	0x48000800
 801cbdc:	48000400 	.word	0x48000400

0801cbe0 <My_VDD_to_VDDS2_Switch>:
	__HAL_RCC_GPIOC_CLK_DISABLE();
	__HAL_RCC_GPIOH_CLK_DISABLE();
}

void My_VDD_to_VDDS2_Switch(My_Switch_td mode)	// Opens and Closes the switches (High side of a GPIO) between Vdd and VDDS2
{
 801cbe0:	b580      	push	{r7, lr}
 801cbe2:	b088      	sub	sp, #32
 801cbe4:	af00      	add	r7, sp, #0
 801cbe6:	4603      	mov	r3, r0
 801cbe8:	71fb      	strb	r3, [r7, #7]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 801cbea:	2001      	movs	r0, #1
 801cbec:	f7fe fbb0 	bl	801b350 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 801cbf0:	2002      	movs	r0, #2
 801cbf2:	f7fe fbad 	bl	801b350 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOC_CLK_ENABLE();
 801cbf6:	2004      	movs	r0, #4
 801cbf8:	f7fe fbaa 	bl	801b350 <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOH_CLK_ENABLE();
 801cbfc:	2080      	movs	r0, #128	@ 0x80
 801cbfe:	f7fe fba7 	bl	801b350 <LL_AHB2_GRP1_EnableClock>

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 801cc02:	f107 030c 	add.w	r3, r7, #12
 801cc06:	2200      	movs	r2, #0
 801cc08:	601a      	str	r2, [r3, #0]
 801cc0a:	605a      	str	r2, [r3, #4]
 801cc0c:	609a      	str	r2, [r3, #8]
 801cc0e:	60da      	str	r2, [r3, #12]
 801cc10:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801cc12:	2301      	movs	r3, #1
 801cc14:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 801cc16:	2300      	movs	r3, #0
 801cc18:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801cc1a:	2303      	movs	r3, #3
 801cc1c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pin =  VDDS2_Pin;
 801cc1e:	2310      	movs	r3, #16
 801cc20:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(VDDS2_Port, &GPIO_InitStruct);
 801cc22:	f107 030c 	add.w	r3, r7, #12
 801cc26:	4619      	mov	r1, r3
 801cc28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801cc2c:	f7e6 fe52 	bl	80038d4 <HAL_GPIO_Init>

	if (mode == Switch_CLOSED)
 801cc30:	79fb      	ldrb	r3, [r7, #7]
 801cc32:	2b01      	cmp	r3, #1
 801cc34:	d106      	bne.n	801cc44 <My_VDD_to_VDDS2_Switch+0x64>
	{
		HAL_GPIO_WritePin(VDDS2_Port, VDDS2_Pin, GPIO_PIN_SET); // Close the High Side of the GPIO to connect VDDS2 to Vdd
 801cc36:	2201      	movs	r2, #1
 801cc38:	2110      	movs	r1, #16
 801cc3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801cc3e:	f7e7 f877 	bl	8003d30 <HAL_GPIO_WritePin>
 801cc42:	e005      	b.n	801cc50 <My_VDD_to_VDDS2_Switch+0x70>
	}
	else
	{
		HAL_GPIO_WritePin(VDDS2_Port, VDDS2_Pin, GPIO_PIN_RESET); // Close the High Side of the GPIO to connect VDDS2 to Vdd
 801cc44:	2200      	movs	r2, #0
 801cc46:	2110      	movs	r1, #16
 801cc48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801cc4c:	f7e7 f870 	bl	8003d30 <HAL_GPIO_WritePin>
	}

	__HAL_RCC_GPIOA_CLK_DISABLE();
 801cc50:	2001      	movs	r0, #1
 801cc52:	f7fe fb95 	bl	801b380 <LL_AHB2_GRP1_DisableClock>
	__HAL_RCC_GPIOB_CLK_DISABLE();
 801cc56:	2002      	movs	r0, #2
 801cc58:	f7fe fb92 	bl	801b380 <LL_AHB2_GRP1_DisableClock>
	__HAL_RCC_GPIOC_CLK_DISABLE();
 801cc5c:	2004      	movs	r0, #4
 801cc5e:	f7fe fb8f 	bl	801b380 <LL_AHB2_GRP1_DisableClock>
	__HAL_RCC_GPIOH_CLK_DISABLE();
 801cc62:	2080      	movs	r0, #128	@ 0x80
 801cc64:	f7fe fb8c 	bl	801b380 <LL_AHB2_GRP1_DisableClock>
}
 801cc68:	bf00      	nop
 801cc6a:	3720      	adds	r7, #32
 801cc6c:	46bd      	mov	sp, r7
 801cc6e:	bd80      	pop	{r7, pc}

0801cc70 <My_HAL_Delay>:
#endif

void My_HAL_Delay(__IO uint32_t Delay)
{
 801cc70:	b580      	push	{r7, lr}
 801cc72:	b082      	sub	sp, #8
 801cc74:	af00      	add	r7, sp, #0
 801cc76:	6078      	str	r0, [r7, #4]
	/* TIMER_IF can be based on other counter the SysTick e.g. RTC */
	/* USER CODE BEGIN HAL_Delay_1 */

	/* USER CODE END HAL_Delay_1 */
	TIMER_IF_DelayMs(Delay);
 801cc78:	687b      	ldr	r3, [r7, #4]
 801cc7a:	4618      	mov	r0, r3
 801cc7c:	f7e4 ff97 	bl	8001bae <TIMER_IF_DelayMs>
	/* USER CODE BEGIN HAL_Delay_2 */

	/* USER CODE END HAL_Delay_2 */
}
 801cc80:	bf00      	nop
 801cc82:	3708      	adds	r7, #8
 801cc84:	46bd      	mov	sp, r7
 801cc86:	bd80      	pop	{r7, pc}

0801cc88 <SystemInit>:
	return deviceAddress;
}

#if !MY_SYSTEM_INIT
void SystemInit(void)	// System Init Function
{
 801cc88:	b580      	push	{r7, lr}
 801cc8a:	af00      	add	r7, sp, #0
	SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
#else
	//	My_Set_GPIO_ANALOG();							// Configure all GPIOs in Analog Mode (High Impedance)
#endif

	HAL_Init();										// Configure HAL
 801cc8c:	f7e5 fe6c 	bl	8002968 <HAL_Init>

#if !(MY_DEBUGGER_ENABLED || MY_LPTIM_Monitor || MY_RTCB_Monitor)
	My_Set_All_GPIO_To_Analog_Mode();											// Set all GPIO in Analog Mode
 801cc90:	f7ff fbbe 	bl	801c410 <My_Set_All_GPIO_To_Analog_Mode>
#endif

	HAL_PWR_EnablePVD();							// Enable PVD
 801cc94:	f7e7 fec4 	bl	8004a20 <HAL_PWR_EnablePVD>

	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2); // Undervolting
 801cc98:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 801cc9c:	f7e7 ff4a 	bl	8004b34 <HAL_PWREx_ControlVoltageScaling>

	My_Set_PVD(V2P0, PWR_PVD_MODE_IT_RISING);		// Configure PVD
 801cca0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 801cca4:	2000      	movs	r0, #0
 801cca6:	f7ff fc81 	bl	801c5ac <My_Set_PVD>
	HAL_PWREx_EnableLowPowerRunMode();				// Enter Low Power Run Mode
 801ccaa:	f7e7 ff97 	bl	8004bdc <HAL_PWREx_EnableLowPowerRunMode>
	HAL_NVIC_EnableIRQ(PVD_PVM_IRQn); 				// Enable PVD Interrupt
 801ccae:	2001      	movs	r0, #1
 801ccb0:	f7e6 f9cd 	bl	800304e <HAL_NVIC_EnableIRQ>
	HAL_PWREx_EnterSTOP0Mode(PWR_STOPENTRY_WFI);	// Enter STOP0 mode and WFI
 801ccb4:	2001      	movs	r0, #1
 801ccb6:	f7e7 ffd5 	bl	8004c64 <HAL_PWREx_EnterSTOP0Mode>
	HAL_PWREx_DisableLowPowerRunMode();				// Disable Low Power Run Mode
 801ccba:	f7e7 ff9d 	bl	8004bf8 <HAL_PWREx_DisableLowPowerRunMode>
}
 801ccbe:	bf00      	nop
 801ccc0:	bd80      	pop	{r7, pc}
	...

0801ccc4 <LL_EXTI_IsActiveFlag_0_31>:
{
 801ccc4:	b480      	push	{r7}
 801ccc6:	b083      	sub	sp, #12
 801ccc8:	af00      	add	r7, sp, #0
 801ccca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 801cccc:	4b07      	ldr	r3, [pc, #28]	@ (801ccec <LL_EXTI_IsActiveFlag_0_31+0x28>)
 801ccce:	68da      	ldr	r2, [r3, #12]
 801ccd0:	687b      	ldr	r3, [r7, #4]
 801ccd2:	4013      	ands	r3, r2
 801ccd4:	687a      	ldr	r2, [r7, #4]
 801ccd6:	429a      	cmp	r2, r3
 801ccd8:	d101      	bne.n	801ccde <LL_EXTI_IsActiveFlag_0_31+0x1a>
 801ccda:	2301      	movs	r3, #1
 801ccdc:	e000      	b.n	801cce0 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 801ccde:	2300      	movs	r3, #0
}
 801cce0:	4618      	mov	r0, r3
 801cce2:	370c      	adds	r7, #12
 801cce4:	46bd      	mov	sp, r7
 801cce6:	bc80      	pop	{r7}
 801cce8:	4770      	bx	lr
 801ccea:	bf00      	nop
 801ccec:	58000800 	.word	0x58000800

0801ccf0 <LL_EXTI_ClearFlag_0_31>:
{
 801ccf0:	b480      	push	{r7}
 801ccf2:	b083      	sub	sp, #12
 801ccf4:	af00      	add	r7, sp, #0
 801ccf6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 801ccf8:	4a03      	ldr	r2, [pc, #12]	@ (801cd08 <LL_EXTI_ClearFlag_0_31+0x18>)
 801ccfa:	687b      	ldr	r3, [r7, #4]
 801ccfc:	60d3      	str	r3, [r2, #12]
}
 801ccfe:	bf00      	nop
 801cd00:	370c      	adds	r7, #12
 801cd02:	46bd      	mov	sp, r7
 801cd04:	bc80      	pop	{r7}
 801cd06:	4770      	bx	lr
 801cd08:	58000800 	.word	0x58000800

0801cd0c <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 801cd0c:	b580      	push	{r7, lr}
 801cd0e:	b084      	sub	sp, #16
 801cd10:	af00      	add	r7, sp, #0
 801cd12:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 801cd14:	687b      	ldr	r3, [r7, #4]
 801cd16:	681b      	ldr	r3, [r3, #0]
 801cd18:	4a11      	ldr	r2, [pc, #68]	@ (801cd60 <HAL_COMP_IRQHandler+0x54>)
 801cd1a:	4293      	cmp	r3, r2
 801cd1c:	d102      	bne.n	801cd24 <HAL_COMP_IRQHandler+0x18>
 801cd1e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 801cd22:	e001      	b.n	801cd28 <HAL_COMP_IRQHandler+0x1c>
 801cd24:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 801cd28:	60fb      	str	r3, [r7, #12]

  /* Check COMP EXTI flag */
  if(LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 801cd2a:	68f8      	ldr	r0, [r7, #12]
 801cd2c:	f7ff ffca 	bl	801ccc4 <LL_EXTI_IsActiveFlag_0_31>
 801cd30:	4603      	mov	r3, r0
 801cd32:	2b00      	cmp	r3, #0
 801cd34:	d010      	beq.n	801cd58 <HAL_COMP_IRQHandler+0x4c>
  {
    /* Check whether comparator is in independent or window mode */
    if(READ_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE) != 0UL)
 801cd36:	4b0b      	ldr	r3, [pc, #44]	@ (801cd64 <HAL_COMP_IRQHandler+0x58>)
 801cd38:	681b      	ldr	r3, [r3, #0]
 801cd3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801cd3e:	2b00      	cmp	r3, #0
 801cd40:	d004      	beq.n	801cd4c <HAL_COMP_IRQHandler+0x40>
      /* Note: Pair of comparators in window mode can both trig IRQ when      */
      /*       input voltage is changing from "out of window" area            */
      /*       (low or high ) to the other "out of window" area (high or low).*/
      /*       Both flags must be cleared to call comparator trigger          */
      /*       callback is called once.                                       */
      LL_EXTI_ClearFlag_0_31((COMP_EXTI_LINE_COMP1 | COMP_EXTI_LINE_COMP2));
 801cd42:	f44f 00c0 	mov.w	r0, #6291456	@ 0x600000
 801cd46:	f7ff ffd3 	bl	801ccf0 <LL_EXTI_ClearFlag_0_31>
 801cd4a:	e002      	b.n	801cd52 <HAL_COMP_IRQHandler+0x46>
    }
    else
    {
      /* Clear COMP EXTI line pending bit */
      LL_EXTI_ClearFlag_0_31(exti_line);
 801cd4c:	68f8      	ldr	r0, [r7, #12]
 801cd4e:	f7ff ffcf 	bl	801ccf0 <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 801cd52:	6878      	ldr	r0, [r7, #4]
 801cd54:	f000 f808 	bl	801cd68 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 801cd58:	bf00      	nop
 801cd5a:	3710      	adds	r7, #16
 801cd5c:	46bd      	mov	sp, r7
 801cd5e:	bd80      	pop	{r7, pc}
 801cd60:	40010200 	.word	0x40010200
 801cd64:	40010204 	.word	0x40010204

0801cd68 <HAL_COMP_TriggerCallback>:
  * @brief  Comparator trigger callback.
  * @param  hcomp  COMP handle
  * @retval None
  */
__weak void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp)
{
 801cd68:	b480      	push	{r7}
 801cd6a:	b083      	sub	sp, #12
 801cd6c:	af00      	add	r7, sp, #0
 801cd6e:	6078      	str	r0, [r7, #4]
  UNUSED(hcomp);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_COMP_TriggerCallback should be implemented in the user file
   */
}
 801cd70:	bf00      	nop
 801cd72:	370c      	adds	r7, #12
 801cd74:	46bd      	mov	sp, r7
 801cd76:	bc80      	pop	{r7}
 801cd78:	4770      	bx	lr

0801cd7a <LL_RCC_SetLPTIMClockSource>:
{
 801cd7a:	b480      	push	{r7}
 801cd7c:	b083      	sub	sp, #12
 801cd7e:	af00      	add	r7, sp, #0
 801cd80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 801cd82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801cd86:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 801cd8a:	687b      	ldr	r3, [r7, #4]
 801cd8c:	0c1b      	lsrs	r3, r3, #16
 801cd8e:	041b      	lsls	r3, r3, #16
 801cd90:	43db      	mvns	r3, r3
 801cd92:	401a      	ands	r2, r3
 801cd94:	687b      	ldr	r3, [r7, #4]
 801cd96:	041b      	lsls	r3, r3, #16
 801cd98:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801cd9c:	4313      	orrs	r3, r2
 801cd9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 801cda2:	bf00      	nop
 801cda4:	370c      	adds	r7, #12
 801cda6:	46bd      	mov	sp, r7
 801cda8:	bc80      	pop	{r7}
 801cdaa:	4770      	bx	lr

0801cdac <LL_RCC_GetLPTIMClockSource>:
{
 801cdac:	b480      	push	{r7}
 801cdae:	b083      	sub	sp, #12
 801cdb0:	af00      	add	r7, sp, #0
 801cdb2:	6078      	str	r0, [r7, #4]
  return (uint32_t)((READ_BIT(RCC->CCIPR, LPTIMx) >> 16) | LPTIMx);
 801cdb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801cdb8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 801cdbc:	687b      	ldr	r3, [r7, #4]
 801cdbe:	4013      	ands	r3, r2
 801cdc0:	0c1a      	lsrs	r2, r3, #16
 801cdc2:	687b      	ldr	r3, [r7, #4]
 801cdc4:	4313      	orrs	r3, r2
}
 801cdc6:	4618      	mov	r0, r3
 801cdc8:	370c      	adds	r7, #12
 801cdca:	46bd      	mov	sp, r7
 801cdcc:	bc80      	pop	{r7}
 801cdce:	4770      	bx	lr

0801cdd0 <LL_APB1_GRP1_ForceReset>:
{
 801cdd0:	b480      	push	{r7}
 801cdd2:	b083      	sub	sp, #12
 801cdd4:	af00      	add	r7, sp, #0
 801cdd6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 801cdd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801cddc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801cdde:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801cde2:	687b      	ldr	r3, [r7, #4]
 801cde4:	4313      	orrs	r3, r2
 801cde6:	638b      	str	r3, [r1, #56]	@ 0x38
}
 801cde8:	bf00      	nop
 801cdea:	370c      	adds	r7, #12
 801cdec:	46bd      	mov	sp, r7
 801cdee:	bc80      	pop	{r7}
 801cdf0:	4770      	bx	lr

0801cdf2 <LL_APB1_GRP2_ForceReset>:
{
 801cdf2:	b480      	push	{r7}
 801cdf4:	b083      	sub	sp, #12
 801cdf6:	af00      	add	r7, sp, #0
 801cdf8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR2, Periphs);
 801cdfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801cdfe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801ce00:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801ce04:	687b      	ldr	r3, [r7, #4]
 801ce06:	4313      	orrs	r3, r2
 801ce08:	63cb      	str	r3, [r1, #60]	@ 0x3c
}
 801ce0a:	bf00      	nop
 801ce0c:	370c      	adds	r7, #12
 801ce0e:	46bd      	mov	sp, r7
 801ce10:	bc80      	pop	{r7}
 801ce12:	4770      	bx	lr

0801ce14 <LL_APB1_GRP1_ReleaseReset>:
{
 801ce14:	b480      	push	{r7}
 801ce16:	b083      	sub	sp, #12
 801ce18:	af00      	add	r7, sp, #0
 801ce1a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 801ce1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801ce20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801ce22:	687b      	ldr	r3, [r7, #4]
 801ce24:	43db      	mvns	r3, r3
 801ce26:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801ce2a:	4013      	ands	r3, r2
 801ce2c:	638b      	str	r3, [r1, #56]	@ 0x38
}
 801ce2e:	bf00      	nop
 801ce30:	370c      	adds	r7, #12
 801ce32:	46bd      	mov	sp, r7
 801ce34:	bc80      	pop	{r7}
 801ce36:	4770      	bx	lr

0801ce38 <LL_APB1_GRP2_ReleaseReset>:
{
 801ce38:	b480      	push	{r7}
 801ce3a:	b083      	sub	sp, #12
 801ce3c:	af00      	add	r7, sp, #0
 801ce3e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 801ce40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801ce44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801ce46:	687b      	ldr	r3, [r7, #4]
 801ce48:	43db      	mvns	r3, r3
 801ce4a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801ce4e:	4013      	ands	r3, r2
 801ce50:	63cb      	str	r3, [r1, #60]	@ 0x3c
}
 801ce52:	bf00      	nop
 801ce54:	370c      	adds	r7, #12
 801ce56:	46bd      	mov	sp, r7
 801ce58:	bc80      	pop	{r7}
 801ce5a:	4770      	bx	lr

0801ce5c <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 801ce5c:	b580      	push	{r7, lr}
 801ce5e:	b084      	sub	sp, #16
 801ce60:	af00      	add	r7, sp, #0
 801ce62:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 801ce64:	687b      	ldr	r3, [r7, #4]
 801ce66:	2b00      	cmp	r3, #0
 801ce68:	d101      	bne.n	801ce6e <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 801ce6a:	2301      	movs	r3, #1
 801ce6c:	e0b6      	b.n	801cfdc <HAL_LPTIM_Init+0x180>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 801ce6e:	687b      	ldr	r3, [r7, #4]
 801ce70:	685b      	ldr	r3, [r3, #4]
 801ce72:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 801ce74:	687b      	ldr	r3, [r7, #4]
 801ce76:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 801ce7a:	b2db      	uxtb	r3, r3
 801ce7c:	2b00      	cmp	r3, #0
 801ce7e:	d106      	bne.n	801ce8e <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 801ce80:	687b      	ldr	r3, [r7, #4]
 801ce82:	2200      	movs	r2, #0
 801ce84:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 801ce88:	6878      	ldr	r0, [r7, #4]
 801ce8a:	f7fe f979 	bl	801b180 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 801ce8e:	687b      	ldr	r3, [r7, #4]
 801ce90:	2202      	movs	r2, #2
 801ce92:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 801ce96:	687b      	ldr	r3, [r7, #4]
 801ce98:	681b      	ldr	r3, [r3, #0]
 801ce9a:	691a      	ldr	r2, [r3, #16]
 801ce9c:	687b      	ldr	r3, [r7, #4]
 801ce9e:	681b      	ldr	r3, [r3, #0]
 801cea0:	f042 0201 	orr.w	r2, r2, #1
 801cea4:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 801cea6:	687b      	ldr	r3, [r7, #4]
 801cea8:	681b      	ldr	r3, [r3, #0]
 801ceaa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801ceae:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 801ceb0:	687b      	ldr	r3, [r7, #4]
 801ceb2:	681b      	ldr	r3, [r3, #0]
 801ceb4:	687a      	ldr	r2, [r7, #4]
 801ceb6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 801ceb8:	629a      	str	r2, [r3, #40]	@ 0x28
//  if(hlptim -> Instance == LPTIM2)
//  {
//	  RCC->CCIPR |= (1 << 21) | (1 << 20);
//  }
  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 801ceba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801cebe:	6878      	ldr	r0, [r7, #4]
 801cec0:	f000 fb26 	bl	801d510 <LPTIM_WaitForFlag>
 801cec4:	4603      	mov	r3, r0
 801cec6:	2b03      	cmp	r3, #3
 801cec8:	d101      	bne.n	801cece <HAL_LPTIM_Init+0x72>
  {
    return HAL_TIMEOUT;
 801ceca:	2303      	movs	r3, #3
 801cecc:	e086      	b.n	801cfdc <HAL_LPTIM_Init+0x180>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 801cece:	6878      	ldr	r0, [r7, #4]
 801ced0:	f000 fb4e 	bl	801d570 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 801ced4:	6878      	ldr	r0, [r7, #4]
 801ced6:	f000 fb0d 	bl	801d4f4 <HAL_LPTIM_GetState>
 801ceda:	4603      	mov	r3, r0
 801cedc:	2b03      	cmp	r3, #3
 801cede:	d101      	bne.n	801cee4 <HAL_LPTIM_Init+0x88>
  {
    return HAL_TIMEOUT;
 801cee0:	2303      	movs	r3, #3
 801cee2:	e07b      	b.n	801cfdc <HAL_LPTIM_Init+0x180>
  }


  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 801cee4:	687b      	ldr	r3, [r7, #4]
 801cee6:	681b      	ldr	r3, [r3, #0]
 801cee8:	68db      	ldr	r3, [r3, #12]
 801ceea:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 801ceec:	687b      	ldr	r3, [r7, #4]
 801ceee:	685b      	ldr	r3, [r3, #4]
 801cef0:	2b01      	cmp	r3, #1
 801cef2:	d004      	beq.n	801cefe <HAL_LPTIM_Init+0xa2>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 801cef4:	687b      	ldr	r3, [r7, #4]
 801cef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cef8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801cefc:	d103      	bne.n	801cf06 <HAL_LPTIM_Init+0xaa>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 801cefe:	68fb      	ldr	r3, [r7, #12]
 801cf00:	f023 031e 	bic.w	r3, r3, #30
 801cf04:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 801cf06:	687b      	ldr	r3, [r7, #4]
 801cf08:	695b      	ldr	r3, [r3, #20]
 801cf0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801cf0e:	4293      	cmp	r3, r2
 801cf10:	d005      	beq.n	801cf1e <HAL_LPTIM_Init+0xc2>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 801cf12:	68fb      	ldr	r3, [r7, #12]
 801cf14:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 801cf18:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 801cf1c:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 801cf1e:	68fa      	ldr	r2, [r7, #12]
 801cf20:	4b30      	ldr	r3, [pc, #192]	@ (801cfe4 <HAL_LPTIM_Init+0x188>)
 801cf22:	4013      	ands	r3, r2
 801cf24:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 801cf26:	687b      	ldr	r3, [r7, #4]
 801cf28:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 801cf2a:	687b      	ldr	r3, [r7, #4]
 801cf2c:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 801cf2e:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 801cf30:	687b      	ldr	r3, [r7, #4]
 801cf32:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 801cf34:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 801cf36:	687b      	ldr	r3, [r7, #4]
 801cf38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 801cf3a:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 801cf3c:	687b      	ldr	r3, [r7, #4]
 801cf3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 801cf40:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 801cf42:	68fa      	ldr	r2, [r7, #12]
 801cf44:	4313      	orrs	r3, r2
 801cf46:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 801cf48:	687b      	ldr	r3, [r7, #4]
 801cf4a:	685b      	ldr	r3, [r3, #4]
 801cf4c:	2b00      	cmp	r3, #0
 801cf4e:	d107      	bne.n	801cf60 <HAL_LPTIM_Init+0x104>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 801cf50:	687b      	ldr	r3, [r7, #4]
 801cf52:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 801cf54:	687b      	ldr	r3, [r7, #4]
 801cf56:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 801cf58:	4313      	orrs	r3, r2
 801cf5a:	68fa      	ldr	r2, [r7, #12]
 801cf5c:	4313      	orrs	r3, r2
 801cf5e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 801cf60:	687b      	ldr	r3, [r7, #4]
 801cf62:	685b      	ldr	r3, [r3, #4]
 801cf64:	2b01      	cmp	r3, #1
 801cf66:	d004      	beq.n	801cf72 <HAL_LPTIM_Init+0x116>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 801cf68:	687b      	ldr	r3, [r7, #4]
 801cf6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cf6c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801cf70:	d107      	bne.n	801cf82 <HAL_LPTIM_Init+0x126>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 801cf72:	687b      	ldr	r3, [r7, #4]
 801cf74:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 801cf76:	687b      	ldr	r3, [r7, #4]
 801cf78:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 801cf7a:	4313      	orrs	r3, r2
 801cf7c:	68fa      	ldr	r2, [r7, #12]
 801cf7e:	4313      	orrs	r3, r2
 801cf80:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 801cf82:	687b      	ldr	r3, [r7, #4]
 801cf84:	695b      	ldr	r3, [r3, #20]
 801cf86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801cf8a:	4293      	cmp	r3, r2
 801cf8c:	d00a      	beq.n	801cfa4 <HAL_LPTIM_Init+0x148>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 801cf8e:	687b      	ldr	r3, [r7, #4]
 801cf90:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 801cf92:	687b      	ldr	r3, [r7, #4]
 801cf94:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 801cf96:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 801cf98:	687b      	ldr	r3, [r7, #4]
 801cf9a:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 801cf9c:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 801cf9e:	68fa      	ldr	r2, [r7, #12]
 801cfa0:	4313      	orrs	r3, r2
 801cfa2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 801cfa4:	687b      	ldr	r3, [r7, #4]
 801cfa6:	681b      	ldr	r3, [r3, #0]
 801cfa8:	68fa      	ldr	r2, [r7, #12]
 801cfaa:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 801cfac:	687b      	ldr	r3, [r7, #4]
 801cfae:	681b      	ldr	r3, [r3, #0]
 801cfb0:	4a0d      	ldr	r2, [pc, #52]	@ (801cfe8 <HAL_LPTIM_Init+0x18c>)
 801cfb2:	4293      	cmp	r3, r2
 801cfb4:	d108      	bne.n	801cfc8 <HAL_LPTIM_Init+0x16c>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 801cfb6:	687b      	ldr	r3, [r7, #4]
 801cfb8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801cfba:	687b      	ldr	r3, [r7, #4]
 801cfbc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801cfbe:	687b      	ldr	r3, [r7, #4]
 801cfc0:	681b      	ldr	r3, [r3, #0]
 801cfc2:	430a      	orrs	r2, r1
 801cfc4:	621a      	str	r2, [r3, #32]
 801cfc6:	e004      	b.n	801cfd2 <HAL_LPTIM_Init+0x176>
  {
    /* Check LPTIM2 and LPTIM3 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 and LPTIM3 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 801cfc8:	687b      	ldr	r3, [r7, #4]
 801cfca:	681b      	ldr	r3, [r3, #0]
 801cfcc:	687a      	ldr	r2, [r7, #4]
 801cfce:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801cfd0:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 801cfd2:	687b      	ldr	r3, [r7, #4]
 801cfd4:	2201      	movs	r2, #1
 801cfd6:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* Return function status */
  return HAL_OK;
 801cfda:	2300      	movs	r3, #0
}
 801cfdc:	4618      	mov	r0, r3
 801cfde:	3710      	adds	r7, #16
 801cfe0:	46bd      	mov	sp, r7
 801cfe2:	bd80      	pop	{r7, pc}
 801cfe4:	ff19f1fe 	.word	0xff19f1fe
 801cfe8:	40007c00 	.word	0x40007c00

0801cfec <HAL_LPTIM_Counter_Start>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 801cfec:	b580      	push	{r7, lr}
 801cfee:	b082      	sub	sp, #8
 801cff0:	af00      	add	r7, sp, #0
 801cff2:	6078      	str	r0, [r7, #4]
 801cff4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 801cff6:	687b      	ldr	r3, [r7, #4]
 801cff8:	2202      	movs	r2, #2
 801cffa:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 801cffe:	687b      	ldr	r3, [r7, #4]
 801d000:	685b      	ldr	r3, [r3, #4]
 801d002:	2b01      	cmp	r3, #1
 801d004:	d00c      	beq.n	801d020 <HAL_LPTIM_Counter_Start+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 801d006:	687b      	ldr	r3, [r7, #4]
 801d008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d00a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801d00e:	d107      	bne.n	801d020 <HAL_LPTIM_Counter_Start+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 801d010:	687b      	ldr	r3, [r7, #4]
 801d012:	681b      	ldr	r3, [r3, #0]
 801d014:	68da      	ldr	r2, [r3, #12]
 801d016:	687b      	ldr	r3, [r7, #4]
 801d018:	681b      	ldr	r3, [r3, #0]
 801d01a:	f422 6260 	bic.w	r2, r2, #3584	@ 0xe00
 801d01e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 801d020:	687b      	ldr	r3, [r7, #4]
 801d022:	681b      	ldr	r3, [r3, #0]
 801d024:	691a      	ldr	r2, [r3, #16]
 801d026:	687b      	ldr	r3, [r7, #4]
 801d028:	681b      	ldr	r3, [r3, #0]
 801d02a:	f042 0201 	orr.w	r2, r2, #1
 801d02e:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 801d030:	687b      	ldr	r3, [r7, #4]
 801d032:	681b      	ldr	r3, [r3, #0]
 801d034:	2210      	movs	r2, #16
 801d036:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 801d038:	687b      	ldr	r3, [r7, #4]
 801d03a:	681b      	ldr	r3, [r3, #0]
 801d03c:	683a      	ldr	r2, [r7, #0]
 801d03e:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 801d040:	2110      	movs	r1, #16
 801d042:	6878      	ldr	r0, [r7, #4]
 801d044:	f000 fa64 	bl	801d510 <LPTIM_WaitForFlag>
 801d048:	4603      	mov	r3, r0
 801d04a:	2b03      	cmp	r3, #3
 801d04c:	d101      	bne.n	801d052 <HAL_LPTIM_Counter_Start+0x66>
  {
    return HAL_TIMEOUT;
 801d04e:	2303      	movs	r3, #3
 801d050:	e00c      	b.n	801d06c <HAL_LPTIM_Counter_Start+0x80>
  }

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 801d052:	687b      	ldr	r3, [r7, #4]
 801d054:	681b      	ldr	r3, [r3, #0]
 801d056:	691a      	ldr	r2, [r3, #16]
 801d058:	687b      	ldr	r3, [r7, #4]
 801d05a:	681b      	ldr	r3, [r3, #0]
 801d05c:	f042 0204 	orr.w	r2, r2, #4
 801d060:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 801d062:	687b      	ldr	r3, [r7, #4]
 801d064:	2201      	movs	r2, #1
 801d066:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* Return function status */
  return HAL_OK;
 801d06a:	2300      	movs	r3, #0
}
 801d06c:	4618      	mov	r0, r3
 801d06e:	3708      	adds	r7, #8
 801d070:	46bd      	mov	sp, r7
 801d072:	bd80      	pop	{r7, pc}

0801d074 <HAL_LPTIM_Counter_Stop>:
  * @brief  Stop the Counter mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Stop(LPTIM_HandleTypeDef *hlptim)
{
 801d074:	b580      	push	{r7, lr}
 801d076:	b082      	sub	sp, #8
 801d078:	af00      	add	r7, sp, #0
 801d07a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 801d07c:	687b      	ldr	r3, [r7, #4]
 801d07e:	2202      	movs	r2, #2
 801d080:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 801d084:	6878      	ldr	r0, [r7, #4]
 801d086:	f000 fa73 	bl	801d570 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 801d08a:	6878      	ldr	r0, [r7, #4]
 801d08c:	f000 fa32 	bl	801d4f4 <HAL_LPTIM_GetState>
 801d090:	4603      	mov	r3, r0
 801d092:	2b03      	cmp	r3, #3
 801d094:	d101      	bne.n	801d09a <HAL_LPTIM_Counter_Stop+0x26>
  {
    return HAL_TIMEOUT;
 801d096:	2303      	movs	r3, #3
 801d098:	e004      	b.n	801d0a4 <HAL_LPTIM_Counter_Stop+0x30>
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 801d09a:	687b      	ldr	r3, [r7, #4]
 801d09c:	2201      	movs	r2, #1
 801d09e:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* Return function status */
  return HAL_OK;
 801d0a2:	2300      	movs	r3, #0
}
 801d0a4:	4618      	mov	r0, r3
 801d0a6:	3708      	adds	r7, #8
 801d0a8:	46bd      	mov	sp, r7
 801d0aa:	bd80      	pop	{r7, pc}

0801d0ac <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 801d0ac:	b580      	push	{r7, lr}
 801d0ae:	b082      	sub	sp, #8
 801d0b0:	af00      	add	r7, sp, #0
 801d0b2:	6078      	str	r0, [r7, #4]
 801d0b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 801d0b6:	687b      	ldr	r3, [r7, #4]
 801d0b8:	2202      	movs	r2, #2
 801d0ba:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* Enable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT(hlptim->Instance);
 801d0be:	687b      	ldr	r3, [r7, #4]
 801d0c0:	681b      	ldr	r3, [r3, #0]
 801d0c2:	4a48      	ldr	r2, [pc, #288]	@ (801d1e4 <HAL_LPTIM_Counter_Start_IT+0x138>)
 801d0c4:	4293      	cmp	r3, r2
 801d0c6:	d108      	bne.n	801d0da <HAL_LPTIM_Counter_Start_IT+0x2e>
 801d0c8:	4b47      	ldr	r3, [pc, #284]	@ (801d1e8 <HAL_LPTIM_Counter_Start_IT+0x13c>)
 801d0ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801d0ce:	4a46      	ldr	r2, [pc, #280]	@ (801d1e8 <HAL_LPTIM_Counter_Start_IT+0x13c>)
 801d0d0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801d0d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 801d0d8:	e015      	b.n	801d106 <HAL_LPTIM_Counter_Start_IT+0x5a>
 801d0da:	687b      	ldr	r3, [r7, #4]
 801d0dc:	681b      	ldr	r3, [r3, #0]
 801d0de:	4a43      	ldr	r2, [pc, #268]	@ (801d1ec <HAL_LPTIM_Counter_Start_IT+0x140>)
 801d0e0:	4293      	cmp	r3, r2
 801d0e2:	d108      	bne.n	801d0f6 <HAL_LPTIM_Counter_Start_IT+0x4a>
 801d0e4:	4b40      	ldr	r3, [pc, #256]	@ (801d1e8 <HAL_LPTIM_Counter_Start_IT+0x13c>)
 801d0e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801d0ea:	4a3f      	ldr	r2, [pc, #252]	@ (801d1e8 <HAL_LPTIM_Counter_Start_IT+0x13c>)
 801d0ec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801d0f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 801d0f4:	e007      	b.n	801d106 <HAL_LPTIM_Counter_Start_IT+0x5a>
 801d0f6:	4b3c      	ldr	r3, [pc, #240]	@ (801d1e8 <HAL_LPTIM_Counter_Start_IT+0x13c>)
 801d0f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801d0fc:	4a3a      	ldr	r2, [pc, #232]	@ (801d1e8 <HAL_LPTIM_Counter_Start_IT+0x13c>)
 801d0fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801d102:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 801d106:	687b      	ldr	r3, [r7, #4]
 801d108:	685b      	ldr	r3, [r3, #4]
 801d10a:	2b01      	cmp	r3, #1
 801d10c:	d00c      	beq.n	801d128 <HAL_LPTIM_Counter_Start_IT+0x7c>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 801d10e:	687b      	ldr	r3, [r7, #4]
 801d110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d112:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801d116:	d107      	bne.n	801d128 <HAL_LPTIM_Counter_Start_IT+0x7c>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 801d118:	687b      	ldr	r3, [r7, #4]
 801d11a:	681b      	ldr	r3, [r3, #0]
 801d11c:	68da      	ldr	r2, [r3, #12]
 801d11e:	687b      	ldr	r3, [r7, #4]
 801d120:	681b      	ldr	r3, [r3, #0]
 801d122:	f422 6260 	bic.w	r2, r2, #3584	@ 0xe00
 801d126:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 801d128:	687b      	ldr	r3, [r7, #4]
 801d12a:	681b      	ldr	r3, [r3, #0]
 801d12c:	691a      	ldr	r2, [r3, #16]
 801d12e:	687b      	ldr	r3, [r7, #4]
 801d130:	681b      	ldr	r3, [r3, #0]
 801d132:	f042 0201 	orr.w	r2, r2, #1
 801d136:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 801d138:	687b      	ldr	r3, [r7, #4]
 801d13a:	681b      	ldr	r3, [r3, #0]
 801d13c:	2210      	movs	r2, #16
 801d13e:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 801d140:	687b      	ldr	r3, [r7, #4]
 801d142:	681b      	ldr	r3, [r3, #0]
 801d144:	683a      	ldr	r2, [r7, #0]
 801d146:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 801d148:	2110      	movs	r1, #16
 801d14a:	6878      	ldr	r0, [r7, #4]
 801d14c:	f000 f9e0 	bl	801d510 <LPTIM_WaitForFlag>
 801d150:	4603      	mov	r3, r0
 801d152:	2b03      	cmp	r3, #3
 801d154:	d101      	bne.n	801d15a <HAL_LPTIM_Counter_Start_IT+0xae>
  {
    return HAL_TIMEOUT;
 801d156:	2303      	movs	r3, #3
 801d158:	e03f      	b.n	801d1da <HAL_LPTIM_Counter_Start_IT+0x12e>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 801d15a:	6878      	ldr	r0, [r7, #4]
 801d15c:	f000 fa08 	bl	801d570 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 801d160:	6878      	ldr	r0, [r7, #4]
 801d162:	f000 f9c7 	bl	801d4f4 <HAL_LPTIM_GetState>
 801d166:	4603      	mov	r3, r0
 801d168:	2b03      	cmp	r3, #3
 801d16a:	d101      	bne.n	801d170 <HAL_LPTIM_Counter_Start_IT+0xc4>
  {
    return HAL_TIMEOUT;
 801d16c:	2303      	movs	r3, #3
 801d16e:	e034      	b.n	801d1da <HAL_LPTIM_Counter_Start_IT+0x12e>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 801d170:	687b      	ldr	r3, [r7, #4]
 801d172:	681b      	ldr	r3, [r3, #0]
 801d174:	689a      	ldr	r2, [r3, #8]
 801d176:	687b      	ldr	r3, [r7, #4]
 801d178:	681b      	ldr	r3, [r3, #0]
 801d17a:	f042 0210 	orr.w	r2, r2, #16
 801d17e:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 801d180:	687b      	ldr	r3, [r7, #4]
 801d182:	681b      	ldr	r3, [r3, #0]
 801d184:	689a      	ldr	r2, [r3, #8]
 801d186:	687b      	ldr	r3, [r7, #4]
 801d188:	681b      	ldr	r3, [r3, #0]
 801d18a:	f042 0202 	orr.w	r2, r2, #2
 801d18e:	609a      	str	r2, [r3, #8]

  /* Enable Rep Update Ok interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_REPOK);
 801d190:	687b      	ldr	r3, [r7, #4]
 801d192:	681b      	ldr	r3, [r3, #0]
 801d194:	689a      	ldr	r2, [r3, #8]
 801d196:	687b      	ldr	r3, [r7, #4]
 801d198:	681b      	ldr	r3, [r3, #0]
 801d19a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801d19e:	609a      	str	r2, [r3, #8]

  /* Enable Update Event interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_UPDATE);
 801d1a0:	687b      	ldr	r3, [r7, #4]
 801d1a2:	681b      	ldr	r3, [r3, #0]
 801d1a4:	689a      	ldr	r2, [r3, #8]
 801d1a6:	687b      	ldr	r3, [r7, #4]
 801d1a8:	681b      	ldr	r3, [r3, #0]
 801d1aa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 801d1ae:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 801d1b0:	687b      	ldr	r3, [r7, #4]
 801d1b2:	681b      	ldr	r3, [r3, #0]
 801d1b4:	691a      	ldr	r2, [r3, #16]
 801d1b6:	687b      	ldr	r3, [r7, #4]
 801d1b8:	681b      	ldr	r3, [r3, #0]
 801d1ba:	f042 0201 	orr.w	r2, r2, #1
 801d1be:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 801d1c0:	687b      	ldr	r3, [r7, #4]
 801d1c2:	681b      	ldr	r3, [r3, #0]
 801d1c4:	691a      	ldr	r2, [r3, #16]
 801d1c6:	687b      	ldr	r3, [r7, #4]
 801d1c8:	681b      	ldr	r3, [r3, #0]
 801d1ca:	f042 0204 	orr.w	r2, r2, #4
 801d1ce:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 801d1d0:	687b      	ldr	r3, [r7, #4]
 801d1d2:	2201      	movs	r2, #1
 801d1d4:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* Return function status */
  return HAL_OK;
 801d1d8:	2300      	movs	r3, #0
}
 801d1da:	4618      	mov	r0, r3
 801d1dc:	3708      	adds	r7, #8
 801d1de:	46bd      	mov	sp, r7
 801d1e0:	bd80      	pop	{r7, pc}
 801d1e2:	bf00      	nop
 801d1e4:	40007c00 	.word	0x40007c00
 801d1e8:	58000800 	.word	0x58000800
 801d1ec:	40009400 	.word	0x40009400

0801d1f0 <HAL_LPTIM_Counter_Stop_IT>:
  * @brief  Stop the Counter mode in interrupt mode.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Stop_IT(LPTIM_HandleTypeDef *hlptim)
{
 801d1f0:	b580      	push	{r7, lr}
 801d1f2:	b082      	sub	sp, #8
 801d1f4:	af00      	add	r7, sp, #0
 801d1f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));


  /* Disable EXTI Line interrupt on the LPTIM Wake-up Timer */
  __HAL_LPTIM_WAKEUPTIMER_EXTI_DISABLE_IT(hlptim->Instance);
 801d1f8:	687b      	ldr	r3, [r7, #4]
 801d1fa:	681b      	ldr	r3, [r3, #0]
 801d1fc:	4a2c      	ldr	r2, [pc, #176]	@ (801d2b0 <HAL_LPTIM_Counter_Stop_IT+0xc0>)
 801d1fe:	4293      	cmp	r3, r2
 801d200:	d108      	bne.n	801d214 <HAL_LPTIM_Counter_Stop_IT+0x24>
 801d202:	4b2c      	ldr	r3, [pc, #176]	@ (801d2b4 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 801d204:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801d208:	4a2a      	ldr	r2, [pc, #168]	@ (801d2b4 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 801d20a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801d20e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 801d212:	e015      	b.n	801d240 <HAL_LPTIM_Counter_Stop_IT+0x50>
 801d214:	687b      	ldr	r3, [r7, #4]
 801d216:	681b      	ldr	r3, [r3, #0]
 801d218:	4a27      	ldr	r2, [pc, #156]	@ (801d2b8 <HAL_LPTIM_Counter_Stop_IT+0xc8>)
 801d21a:	4293      	cmp	r3, r2
 801d21c:	d108      	bne.n	801d230 <HAL_LPTIM_Counter_Stop_IT+0x40>
 801d21e:	4b25      	ldr	r3, [pc, #148]	@ (801d2b4 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 801d220:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801d224:	4a23      	ldr	r2, [pc, #140]	@ (801d2b4 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 801d226:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 801d22a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 801d22e:	e007      	b.n	801d240 <HAL_LPTIM_Counter_Stop_IT+0x50>
 801d230:	4b20      	ldr	r3, [pc, #128]	@ (801d2b4 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 801d232:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801d236:	4a1f      	ldr	r2, [pc, #124]	@ (801d2b4 <HAL_LPTIM_Counter_Stop_IT+0xc4>)
 801d238:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801d23c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 801d240:	687b      	ldr	r3, [r7, #4]
 801d242:	2202      	movs	r2, #2
 801d244:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 801d248:	6878      	ldr	r0, [r7, #4]
 801d24a:	f000 f991 	bl	801d570 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 801d24e:	6878      	ldr	r0, [r7, #4]
 801d250:	f000 f950 	bl	801d4f4 <HAL_LPTIM_GetState>
 801d254:	4603      	mov	r3, r0
 801d256:	2b03      	cmp	r3, #3
 801d258:	d101      	bne.n	801d25e <HAL_LPTIM_Counter_Stop_IT+0x6e>
  {
    return HAL_TIMEOUT;
 801d25a:	2303      	movs	r3, #3
 801d25c:	e024      	b.n	801d2a8 <HAL_LPTIM_Counter_Stop_IT+0xb8>
  }

  /* Disable Autoreload write complete interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARROK);
 801d25e:	687b      	ldr	r3, [r7, #4]
 801d260:	681b      	ldr	r3, [r3, #0]
 801d262:	689a      	ldr	r2, [r3, #8]
 801d264:	687b      	ldr	r3, [r7, #4]
 801d266:	681b      	ldr	r3, [r3, #0]
 801d268:	f022 0210 	bic.w	r2, r2, #16
 801d26c:	609a      	str	r2, [r3, #8]

  /* Disable Autoreload match interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_ARRM);
 801d26e:	687b      	ldr	r3, [r7, #4]
 801d270:	681b      	ldr	r3, [r3, #0]
 801d272:	689a      	ldr	r2, [r3, #8]
 801d274:	687b      	ldr	r3, [r7, #4]
 801d276:	681b      	ldr	r3, [r3, #0]
 801d278:	f022 0202 	bic.w	r2, r2, #2
 801d27c:	609a      	str	r2, [r3, #8]

  /* Disable Rep Update Ok interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_REPOK);
 801d27e:	687b      	ldr	r3, [r7, #4]
 801d280:	681b      	ldr	r3, [r3, #0]
 801d282:	689a      	ldr	r2, [r3, #8]
 801d284:	687b      	ldr	r3, [r7, #4]
 801d286:	681b      	ldr	r3, [r3, #0]
 801d288:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801d28c:	609a      	str	r2, [r3, #8]

  /* Disable Update Event interrupt */
  __HAL_LPTIM_DISABLE_IT(hlptim, LPTIM_IT_UPDATE);
 801d28e:	687b      	ldr	r3, [r7, #4]
 801d290:	681b      	ldr	r3, [r3, #0]
 801d292:	689a      	ldr	r2, [r3, #8]
 801d294:	687b      	ldr	r3, [r7, #4]
 801d296:	681b      	ldr	r3, [r3, #0]
 801d298:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801d29c:	609a      	str	r2, [r3, #8]
  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 801d29e:	687b      	ldr	r3, [r7, #4]
 801d2a0:	2201      	movs	r2, #1
 801d2a2:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

  /* Return function status */
  return HAL_OK;
 801d2a6:	2300      	movs	r3, #0
}
 801d2a8:	4618      	mov	r0, r3
 801d2aa:	3708      	adds	r7, #8
 801d2ac:	46bd      	mov	sp, r7
 801d2ae:	bd80      	pop	{r7, pc}
 801d2b0:	40007c00 	.word	0x40007c00
 801d2b4:	58000800 	.word	0x58000800
 801d2b8:	40009400 	.word	0x40009400

0801d2bc <HAL_LPTIM_ReadCounter>:
  * @brief  Return the current counter value.
  * @param  hlptim LPTIM handle
  * @retval Counter value.
  */
uint32_t HAL_LPTIM_ReadCounter(const LPTIM_HandleTypeDef *hlptim)
{
 801d2bc:	b480      	push	{r7}
 801d2be:	b083      	sub	sp, #12
 801d2c0:	af00      	add	r7, sp, #0
 801d2c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  return (hlptim->Instance->CNT);
 801d2c4:	687b      	ldr	r3, [r7, #4]
 801d2c6:	681b      	ldr	r3, [r3, #0]
 801d2c8:	69db      	ldr	r3, [r3, #28]
}
 801d2ca:	4618      	mov	r0, r3
 801d2cc:	370c      	adds	r7, #12
 801d2ce:	46bd      	mov	sp, r7
 801d2d0:	bc80      	pop	{r7}
 801d2d2:	4770      	bx	lr

0801d2d4 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 801d2d4:	b580      	push	{r7, lr}
 801d2d6:	b082      	sub	sp, #8
 801d2d8:	af00      	add	r7, sp, #0
 801d2da:	6078      	str	r0, [r7, #4]

  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 801d2dc:	687b      	ldr	r3, [r7, #4]
 801d2de:	681b      	ldr	r3, [r3, #0]
 801d2e0:	681b      	ldr	r3, [r3, #0]
 801d2e2:	f003 0301 	and.w	r3, r3, #1
 801d2e6:	2b01      	cmp	r3, #1
 801d2e8:	d10d      	bne.n	801d306 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 801d2ea:	687b      	ldr	r3, [r7, #4]
 801d2ec:	681b      	ldr	r3, [r3, #0]
 801d2ee:	689b      	ldr	r3, [r3, #8]
 801d2f0:	f003 0301 	and.w	r3, r3, #1
 801d2f4:	2b01      	cmp	r3, #1
 801d2f6:	d106      	bne.n	801d306 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 801d2f8:	687b      	ldr	r3, [r7, #4]
 801d2fa:	681b      	ldr	r3, [r3, #0]
 801d2fc:	2201      	movs	r2, #1
 801d2fe:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 801d300:	6878      	ldr	r0, [r7, #4]
 801d302:	f000 f8af 	bl	801d464 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 801d306:	687b      	ldr	r3, [r7, #4]
 801d308:	681b      	ldr	r3, [r3, #0]
 801d30a:	681b      	ldr	r3, [r3, #0]
 801d30c:	f003 0302 	and.w	r3, r3, #2
 801d310:	2b02      	cmp	r3, #2
 801d312:	d10d      	bne.n	801d330 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 801d314:	687b      	ldr	r3, [r7, #4]
 801d316:	681b      	ldr	r3, [r3, #0]
 801d318:	689b      	ldr	r3, [r3, #8]
 801d31a:	f003 0302 	and.w	r3, r3, #2
 801d31e:	2b02      	cmp	r3, #2
 801d320:	d106      	bne.n	801d330 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 801d322:	687b      	ldr	r3, [r7, #4]
 801d324:	681b      	ldr	r3, [r3, #0]
 801d326:	2202      	movs	r2, #2
 801d328:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 801d32a:	6878      	ldr	r0, [r7, #4]
 801d32c:	f7fe f9a0 	bl	801b670 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 801d330:	687b      	ldr	r3, [r7, #4]
 801d332:	681b      	ldr	r3, [r3, #0]
 801d334:	681b      	ldr	r3, [r3, #0]
 801d336:	f003 0304 	and.w	r3, r3, #4
 801d33a:	2b04      	cmp	r3, #4
 801d33c:	d10d      	bne.n	801d35a <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 801d33e:	687b      	ldr	r3, [r7, #4]
 801d340:	681b      	ldr	r3, [r3, #0]
 801d342:	689b      	ldr	r3, [r3, #8]
 801d344:	f003 0304 	and.w	r3, r3, #4
 801d348:	2b04      	cmp	r3, #4
 801d34a:	d106      	bne.n	801d35a <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 801d34c:	687b      	ldr	r3, [r7, #4]
 801d34e:	681b      	ldr	r3, [r3, #0]
 801d350:	2204      	movs	r2, #4
 801d352:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 801d354:	6878      	ldr	r0, [r7, #4]
 801d356:	f000 f88e 	bl	801d476 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 801d35a:	687b      	ldr	r3, [r7, #4]
 801d35c:	681b      	ldr	r3, [r3, #0]
 801d35e:	681b      	ldr	r3, [r3, #0]
 801d360:	f003 0308 	and.w	r3, r3, #8
 801d364:	2b08      	cmp	r3, #8
 801d366:	d10d      	bne.n	801d384 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 801d368:	687b      	ldr	r3, [r7, #4]
 801d36a:	681b      	ldr	r3, [r3, #0]
 801d36c:	689b      	ldr	r3, [r3, #8]
 801d36e:	f003 0308 	and.w	r3, r3, #8
 801d372:	2b08      	cmp	r3, #8
 801d374:	d106      	bne.n	801d384 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 801d376:	687b      	ldr	r3, [r7, #4]
 801d378:	681b      	ldr	r3, [r3, #0]
 801d37a:	2208      	movs	r2, #8
 801d37c:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 801d37e:	6878      	ldr	r0, [r7, #4]
 801d380:	f000 f882 	bl	801d488 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 801d384:	687b      	ldr	r3, [r7, #4]
 801d386:	681b      	ldr	r3, [r3, #0]
 801d388:	681b      	ldr	r3, [r3, #0]
 801d38a:	f003 0310 	and.w	r3, r3, #16
 801d38e:	2b10      	cmp	r3, #16
 801d390:	d10d      	bne.n	801d3ae <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 801d392:	687b      	ldr	r3, [r7, #4]
 801d394:	681b      	ldr	r3, [r3, #0]
 801d396:	689b      	ldr	r3, [r3, #8]
 801d398:	f003 0310 	and.w	r3, r3, #16
 801d39c:	2b10      	cmp	r3, #16
 801d39e:	d106      	bne.n	801d3ae <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 801d3a0:	687b      	ldr	r3, [r7, #4]
 801d3a2:	681b      	ldr	r3, [r3, #0]
 801d3a4:	2210      	movs	r2, #16
 801d3a6:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 801d3a8:	6878      	ldr	r0, [r7, #4]
 801d3aa:	f000 f876 	bl	801d49a <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 801d3ae:	687b      	ldr	r3, [r7, #4]
 801d3b0:	681b      	ldr	r3, [r3, #0]
 801d3b2:	681b      	ldr	r3, [r3, #0]
 801d3b4:	f003 0320 	and.w	r3, r3, #32
 801d3b8:	2b20      	cmp	r3, #32
 801d3ba:	d10d      	bne.n	801d3d8 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 801d3bc:	687b      	ldr	r3, [r7, #4]
 801d3be:	681b      	ldr	r3, [r3, #0]
 801d3c0:	689b      	ldr	r3, [r3, #8]
 801d3c2:	f003 0320 	and.w	r3, r3, #32
 801d3c6:	2b20      	cmp	r3, #32
 801d3c8:	d106      	bne.n	801d3d8 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 801d3ca:	687b      	ldr	r3, [r7, #4]
 801d3cc:	681b      	ldr	r3, [r3, #0]
 801d3ce:	2220      	movs	r2, #32
 801d3d0:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 801d3d2:	6878      	ldr	r0, [r7, #4]
 801d3d4:	f000 f86a 	bl	801d4ac <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 801d3d8:	687b      	ldr	r3, [r7, #4]
 801d3da:	681b      	ldr	r3, [r3, #0]
 801d3dc:	681b      	ldr	r3, [r3, #0]
 801d3de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801d3e2:	2b40      	cmp	r3, #64	@ 0x40
 801d3e4:	d10d      	bne.n	801d402 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 801d3e6:	687b      	ldr	r3, [r7, #4]
 801d3e8:	681b      	ldr	r3, [r3, #0]
 801d3ea:	689b      	ldr	r3, [r3, #8]
 801d3ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801d3f0:	2b40      	cmp	r3, #64	@ 0x40
 801d3f2:	d106      	bne.n	801d402 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 801d3f4:	687b      	ldr	r3, [r7, #4]
 801d3f6:	681b      	ldr	r3, [r3, #0]
 801d3f8:	2240      	movs	r2, #64	@ 0x40
 801d3fa:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 801d3fc:	6878      	ldr	r0, [r7, #4]
 801d3fe:	f000 f85e 	bl	801d4be <HAL_LPTIM_DirectionDownCallback>
    }
  }

  /* Repetition counter underflowed (or contains zero) and the LPTIM counter
     overflowed */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UPDATE) != RESET)
 801d402:	687b      	ldr	r3, [r7, #4]
 801d404:	681b      	ldr	r3, [r3, #0]
 801d406:	681b      	ldr	r3, [r3, #0]
 801d408:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801d40c:	2b80      	cmp	r3, #128	@ 0x80
 801d40e:	d10d      	bne.n	801d42c <HAL_LPTIM_IRQHandler+0x158>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UPDATE) != RESET)
 801d410:	687b      	ldr	r3, [r7, #4]
 801d412:	681b      	ldr	r3, [r3, #0]
 801d414:	689b      	ldr	r3, [r3, #8]
 801d416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801d41a:	2b80      	cmp	r3, #128	@ 0x80
 801d41c:	d106      	bne.n	801d42c <HAL_LPTIM_IRQHandler+0x158>
    {
      /* Clear update event flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UPDATE);
 801d41e:	687b      	ldr	r3, [r7, #4]
 801d420:	681b      	ldr	r3, [r3, #0]
 801d422:	2280      	movs	r2, #128	@ 0x80
 801d424:	605a      	str	r2, [r3, #4]

      /* Update event Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->UpdateEventCallback(hlptim);
#else
      HAL_LPTIM_UpdateEventCallback(hlptim);
 801d426:	6878      	ldr	r0, [r7, #4]
 801d428:	f000 f852 	bl	801d4d0 <HAL_LPTIM_UpdateEventCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Successful APB bus write to repetition counter register */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_REPOK) != RESET)
 801d42c:	687b      	ldr	r3, [r7, #4]
 801d42e:	681b      	ldr	r3, [r3, #0]
 801d430:	681b      	ldr	r3, [r3, #0]
 801d432:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d436:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801d43a:	d10f      	bne.n	801d45c <HAL_LPTIM_IRQHandler+0x188>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_REPOK) != RESET)
 801d43c:	687b      	ldr	r3, [r7, #4]
 801d43e:	681b      	ldr	r3, [r3, #0]
 801d440:	689b      	ldr	r3, [r3, #8]
 801d442:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d446:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801d44a:	d107      	bne.n	801d45c <HAL_LPTIM_IRQHandler+0x188>
    {
      /* Clear successful APB bus write to repetition counter flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 801d44c:	687b      	ldr	r3, [r7, #4]
 801d44e:	681b      	ldr	r3, [r3, #0]
 801d450:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801d454:	605a      	str	r2, [r3, #4]

      /* Successful APB bus write to repetition counter Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->RepCounterWriteCallback(hlptim);
#else
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
 801d456:	6878      	ldr	r0, [r7, #4]
 801d458:	f000 f843 	bl	801d4e2 <HAL_LPTIM_RepCounterWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 801d45c:	bf00      	nop
 801d45e:	3708      	adds	r7, #8
 801d460:	46bd      	mov	sp, r7
 801d462:	bd80      	pop	{r7, pc}

0801d464 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 801d464:	b480      	push	{r7}
 801d466:	b083      	sub	sp, #12
 801d468:	af00      	add	r7, sp, #0
 801d46a:	6078      	str	r0, [r7, #4]


  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 801d46c:	bf00      	nop
 801d46e:	370c      	adds	r7, #12
 801d470:	46bd      	mov	sp, r7
 801d472:	bc80      	pop	{r7}
 801d474:	4770      	bx	lr

0801d476 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 801d476:	b480      	push	{r7}
 801d478:	b083      	sub	sp, #12
 801d47a:	af00      	add	r7, sp, #0
 801d47c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 801d47e:	bf00      	nop
 801d480:	370c      	adds	r7, #12
 801d482:	46bd      	mov	sp, r7
 801d484:	bc80      	pop	{r7}
 801d486:	4770      	bx	lr

0801d488 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 801d488:	b480      	push	{r7}
 801d48a:	b083      	sub	sp, #12
 801d48c:	af00      	add	r7, sp, #0
 801d48e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 801d490:	bf00      	nop
 801d492:	370c      	adds	r7, #12
 801d494:	46bd      	mov	sp, r7
 801d496:	bc80      	pop	{r7}
 801d498:	4770      	bx	lr

0801d49a <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 801d49a:	b480      	push	{r7}
 801d49c:	b083      	sub	sp, #12
 801d49e:	af00      	add	r7, sp, #0
 801d4a0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 801d4a2:	bf00      	nop
 801d4a4:	370c      	adds	r7, #12
 801d4a6:	46bd      	mov	sp, r7
 801d4a8:	bc80      	pop	{r7}
 801d4aa:	4770      	bx	lr

0801d4ac <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 801d4ac:	b480      	push	{r7}
 801d4ae:	b083      	sub	sp, #12
 801d4b0:	af00      	add	r7, sp, #0
 801d4b2:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 801d4b4:	bf00      	nop
 801d4b6:	370c      	adds	r7, #12
 801d4b8:	46bd      	mov	sp, r7
 801d4ba:	bc80      	pop	{r7}
 801d4bc:	4770      	bx	lr

0801d4be <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 801d4be:	b480      	push	{r7}
 801d4c0:	b083      	sub	sp, #12
 801d4c2:	af00      	add	r7, sp, #0
 801d4c4:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 801d4c6:	bf00      	nop
 801d4c8:	370c      	adds	r7, #12
 801d4ca:	46bd      	mov	sp, r7
 801d4cc:	bc80      	pop	{r7}
 801d4ce:	4770      	bx	lr

0801d4d0 <HAL_LPTIM_UpdateEventCallback>:
  * @brief Repetition counter underflowed (or contains zero) and LPTIM counter overflowed callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_UpdateEventCallback(LPTIM_HandleTypeDef *hlptim)
{
 801d4d0:	b480      	push	{r7}
 801d4d2:	b083      	sub	sp, #12
 801d4d4:	af00      	add	r7, sp, #0
 801d4d6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_UpdateEventCallback could be implemented in the user file
   */
}
 801d4d8:	bf00      	nop
 801d4da:	370c      	adds	r7, #12
 801d4dc:	46bd      	mov	sp, r7
 801d4de:	bc80      	pop	{r7}
 801d4e0:	4770      	bx	lr

0801d4e2 <HAL_LPTIM_RepCounterWriteCallback>:
  * @brief  Successful APB bus write to repetition counter register callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_RepCounterWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 801d4e2:	b480      	push	{r7}
 801d4e4:	b083      	sub	sp, #12
 801d4e6:	af00      	add	r7, sp, #0
 801d4e8:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_RepCounterWriteCallback could be implemented in the user file
   */
}
 801d4ea:	bf00      	nop
 801d4ec:	370c      	adds	r7, #12
 801d4ee:	46bd      	mov	sp, r7
 801d4f0:	bc80      	pop	{r7}
 801d4f2:	4770      	bx	lr

0801d4f4 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 801d4f4:	b480      	push	{r7}
 801d4f6:	b083      	sub	sp, #12
 801d4f8:	af00      	add	r7, sp, #0
 801d4fa:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 801d4fc:	687b      	ldr	r3, [r7, #4]
 801d4fe:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 801d502:	b2db      	uxtb	r3, r3
}
 801d504:	4618      	mov	r0, r3
 801d506:	370c      	adds	r7, #12
 801d508:	46bd      	mov	sp, r7
 801d50a:	bc80      	pop	{r7}
 801d50c:	4770      	bx	lr
	...

0801d510 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 801d510:	b480      	push	{r7}
 801d512:	b085      	sub	sp, #20
 801d514:	af00      	add	r7, sp, #0
 801d516:	6078      	str	r0, [r7, #4]
 801d518:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 801d51a:	2300      	movs	r3, #0
 801d51c:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 801d51e:	4b12      	ldr	r3, [pc, #72]	@ (801d568 <LPTIM_WaitForFlag+0x58>)
 801d520:	681b      	ldr	r3, [r3, #0]
 801d522:	4a12      	ldr	r2, [pc, #72]	@ (801d56c <LPTIM_WaitForFlag+0x5c>)
 801d524:	fba2 2303 	umull	r2, r3, r2, r3
 801d528:	0b9b      	lsrs	r3, r3, #14
 801d52a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801d52e:	fb02 f303 	mul.w	r3, r2, r3
 801d532:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 801d534:	68bb      	ldr	r3, [r7, #8]
 801d536:	3b01      	subs	r3, #1
 801d538:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 801d53a:	68bb      	ldr	r3, [r7, #8]
 801d53c:	2b00      	cmp	r3, #0
 801d53e:	d101      	bne.n	801d544 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 801d540:	2303      	movs	r3, #3
 801d542:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 801d544:	687b      	ldr	r3, [r7, #4]
 801d546:	681b      	ldr	r3, [r3, #0]
 801d548:	681a      	ldr	r2, [r3, #0]
 801d54a:	683b      	ldr	r3, [r7, #0]
 801d54c:	4013      	ands	r3, r2
 801d54e:	683a      	ldr	r2, [r7, #0]
 801d550:	429a      	cmp	r2, r3
 801d552:	d002      	beq.n	801d55a <LPTIM_WaitForFlag+0x4a>
 801d554:	68bb      	ldr	r3, [r7, #8]
 801d556:	2b00      	cmp	r3, #0
 801d558:	d1ec      	bne.n	801d534 <LPTIM_WaitForFlag+0x24>

  return result;
 801d55a:	7bfb      	ldrb	r3, [r7, #15]
}
 801d55c:	4618      	mov	r0, r3
 801d55e:	3714      	adds	r7, #20
 801d560:	46bd      	mov	sp, r7
 801d562:	bc80      	pop	{r7}
 801d564:	4770      	bx	lr
 801d566:	bf00      	nop
 801d568:	20000070 	.word	0x20000070
 801d56c:	d1b71759 	.word	0xd1b71759

0801d570 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 801d570:	b580      	push	{r7, lr}
 801d572:	b08e      	sub	sp, #56	@ 0x38
 801d574:	af00      	add	r7, sp, #0
 801d576:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 801d578:	2300      	movs	r3, #0
 801d57a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801d57c:	f3ef 8310 	mrs	r3, PRIMASK
 801d580:	613b      	str	r3, [r7, #16]
  return(result);
 801d582:	693b      	ldr	r3, [r7, #16]
  uint32_t primask_bit;
  uint32_t tmpOR;
  uint32_t tmpRCR;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 801d584:	633b      	str	r3, [r7, #48]	@ 0x30
 801d586:	2301      	movs	r3, #1
 801d588:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d58a:	697b      	ldr	r3, [r7, #20]
 801d58c:	f383 8810 	msr	PRIMASK, r3
}
 801d590:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 801d592:	687b      	ldr	r3, [r7, #4]
 801d594:	681b      	ldr	r3, [r3, #0]
 801d596:	4a8f      	ldr	r2, [pc, #572]	@ (801d7d4 <LPTIM_Disable+0x264>)
 801d598:	4293      	cmp	r3, r2
 801d59a:	d015      	beq.n	801d5c8 <LPTIM_Disable+0x58>
 801d59c:	4a8d      	ldr	r2, [pc, #564]	@ (801d7d4 <LPTIM_Disable+0x264>)
 801d59e:	4293      	cmp	r3, r2
 801d5a0:	d818      	bhi.n	801d5d4 <LPTIM_Disable+0x64>
 801d5a2:	4a8d      	ldr	r2, [pc, #564]	@ (801d7d8 <LPTIM_Disable+0x268>)
 801d5a4:	4293      	cmp	r3, r2
 801d5a6:	d003      	beq.n	801d5b0 <LPTIM_Disable+0x40>
 801d5a8:	4a8c      	ldr	r2, [pc, #560]	@ (801d7dc <LPTIM_Disable+0x26c>)
 801d5aa:	4293      	cmp	r3, r2
 801d5ac:	d006      	beq.n	801d5bc <LPTIM_Disable+0x4c>
      break;
    case LPTIM3_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
      break;
    default:
      break;
 801d5ae:	e011      	b.n	801d5d4 <LPTIM_Disable+0x64>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 801d5b0:	f44f 2040 	mov.w	r0, #786432	@ 0xc0000
 801d5b4:	f7ff fbfa 	bl	801cdac <LL_RCC_GetLPTIMClockSource>
 801d5b8:	6378      	str	r0, [r7, #52]	@ 0x34
      break;
 801d5ba:	e00c      	b.n	801d5d6 <LPTIM_Disable+0x66>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 801d5bc:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
 801d5c0:	f7ff fbf4 	bl	801cdac <LL_RCC_GetLPTIMClockSource>
 801d5c4:	6378      	str	r0, [r7, #52]	@ 0x34
      break;
 801d5c6:	e006      	b.n	801d5d6 <LPTIM_Disable+0x66>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 801d5c8:	f44f 0040 	mov.w	r0, #12582912	@ 0xc00000
 801d5cc:	f7ff fbee 	bl	801cdac <LL_RCC_GetLPTIMClockSource>
 801d5d0:	6378      	str	r0, [r7, #52]	@ 0x34
      break;
 801d5d2:	e000      	b.n	801d5d6 <LPTIM_Disable+0x66>
      break;
 801d5d4:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 801d5d6:	687b      	ldr	r3, [r7, #4]
 801d5d8:	681b      	ldr	r3, [r3, #0]
 801d5da:	689b      	ldr	r3, [r3, #8]
 801d5dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  tmpCFGR = hlptim->Instance->CFGR;
 801d5de:	687b      	ldr	r3, [r7, #4]
 801d5e0:	681b      	ldr	r3, [r3, #0]
 801d5e2:	68db      	ldr	r3, [r3, #12]
 801d5e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  tmpCMP = hlptim->Instance->CMP;
 801d5e6:	687b      	ldr	r3, [r7, #4]
 801d5e8:	681b      	ldr	r3, [r3, #0]
 801d5ea:	695b      	ldr	r3, [r3, #20]
 801d5ec:	627b      	str	r3, [r7, #36]	@ 0x24
  tmpARR = hlptim->Instance->ARR;
 801d5ee:	687b      	ldr	r3, [r7, #4]
 801d5f0:	681b      	ldr	r3, [r3, #0]
 801d5f2:	699b      	ldr	r3, [r3, #24]
 801d5f4:	623b      	str	r3, [r7, #32]
  tmpOR = hlptim->Instance->OR;
 801d5f6:	687b      	ldr	r3, [r7, #4]
 801d5f8:	681b      	ldr	r3, [r3, #0]
 801d5fa:	6a1b      	ldr	r3, [r3, #32]
 801d5fc:	61fb      	str	r3, [r7, #28]
  tmpRCR = hlptim->Instance->RCR;
 801d5fe:	687b      	ldr	r3, [r7, #4]
 801d600:	681b      	ldr	r3, [r3, #0]
 801d602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d604:	61bb      	str	r3, [r7, #24]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 801d606:	687b      	ldr	r3, [r7, #4]
 801d608:	681b      	ldr	r3, [r3, #0]
 801d60a:	4a72      	ldr	r2, [pc, #456]	@ (801d7d4 <LPTIM_Disable+0x264>)
 801d60c:	4293      	cmp	r3, r2
 801d60e:	d019      	beq.n	801d644 <LPTIM_Disable+0xd4>
 801d610:	4a70      	ldr	r2, [pc, #448]	@ (801d7d4 <LPTIM_Disable+0x264>)
 801d612:	4293      	cmp	r3, r2
 801d614:	d81d      	bhi.n	801d652 <LPTIM_Disable+0xe2>
 801d616:	4a70      	ldr	r2, [pc, #448]	@ (801d7d8 <LPTIM_Disable+0x268>)
 801d618:	4293      	cmp	r3, r2
 801d61a:	d003      	beq.n	801d624 <LPTIM_Disable+0xb4>
 801d61c:	4a6f      	ldr	r2, [pc, #444]	@ (801d7dc <LPTIM_Disable+0x26c>)
 801d61e:	4293      	cmp	r3, r2
 801d620:	d009      	beq.n	801d636 <LPTIM_Disable+0xc6>
    case LPTIM3_BASE:
      __HAL_RCC_LPTIM3_FORCE_RESET();
      __HAL_RCC_LPTIM3_RELEASE_RESET();
      break;
    default:
      break;
 801d622:	e016      	b.n	801d652 <LPTIM_Disable+0xe2>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 801d624:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 801d628:	f7ff fbd2 	bl	801cdd0 <LL_APB1_GRP1_ForceReset>
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 801d62c:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 801d630:	f7ff fbf0 	bl	801ce14 <LL_APB1_GRP1_ReleaseReset>
      break;
 801d634:	e00e      	b.n	801d654 <LPTIM_Disable+0xe4>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 801d636:	2020      	movs	r0, #32
 801d638:	f7ff fbdb 	bl	801cdf2 <LL_APB1_GRP2_ForceReset>
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 801d63c:	2020      	movs	r0, #32
 801d63e:	f7ff fbfb 	bl	801ce38 <LL_APB1_GRP2_ReleaseReset>
      break;
 801d642:	e007      	b.n	801d654 <LPTIM_Disable+0xe4>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 801d644:	2040      	movs	r0, #64	@ 0x40
 801d646:	f7ff fbd4 	bl	801cdf2 <LL_APB1_GRP2_ForceReset>
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 801d64a:	2040      	movs	r0, #64	@ 0x40
 801d64c:	f7ff fbf4 	bl	801ce38 <LL_APB1_GRP2_ReleaseReset>
      break;
 801d650:	e000      	b.n	801d654 <LPTIM_Disable+0xe4>
      break;
 801d652:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
 801d654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d656:	2b00      	cmp	r3, #0
 801d658:	d106      	bne.n	801d668 <LPTIM_Disable+0xf8>
 801d65a:	6a3b      	ldr	r3, [r7, #32]
 801d65c:	2b00      	cmp	r3, #0
 801d65e:	d103      	bne.n	801d668 <LPTIM_Disable+0xf8>
 801d660:	69bb      	ldr	r3, [r7, #24]
 801d662:	2b00      	cmp	r3, #0
 801d664:	f000 8097 	beq.w	801d796 <LPTIM_Disable+0x226>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 801d668:	687b      	ldr	r3, [r7, #4]
 801d66a:	681b      	ldr	r3, [r3, #0]
 801d66c:	4a59      	ldr	r2, [pc, #356]	@ (801d7d4 <LPTIM_Disable+0x264>)
 801d66e:	4293      	cmp	r3, r2
 801d670:	d013      	beq.n	801d69a <LPTIM_Disable+0x12a>
 801d672:	4a58      	ldr	r2, [pc, #352]	@ (801d7d4 <LPTIM_Disable+0x264>)
 801d674:	4293      	cmp	r3, r2
 801d676:	d815      	bhi.n	801d6a4 <LPTIM_Disable+0x134>
 801d678:	4a57      	ldr	r2, [pc, #348]	@ (801d7d8 <LPTIM_Disable+0x268>)
 801d67a:	4293      	cmp	r3, r2
 801d67c:	d003      	beq.n	801d686 <LPTIM_Disable+0x116>
 801d67e:	4a57      	ldr	r2, [pc, #348]	@ (801d7dc <LPTIM_Disable+0x26c>)
 801d680:	4293      	cmp	r3, r2
 801d682:	d005      	beq.n	801d690 <LPTIM_Disable+0x120>
        break;
      case LPTIM3_BASE:
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_PCLK1);
        break;
      default:
        break;
 801d684:	e00e      	b.n	801d6a4 <LPTIM_Disable+0x134>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 801d686:	f44f 2040 	mov.w	r0, #786432	@ 0xc0000
 801d68a:	f7ff fb76 	bl	801cd7a <LL_RCC_SetLPTIMClockSource>
        break;
 801d68e:	e00a      	b.n	801d6a6 <LPTIM_Disable+0x136>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 801d690:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
 801d694:	f7ff fb71 	bl	801cd7a <LL_RCC_SetLPTIMClockSource>
        break;
 801d698:	e005      	b.n	801d6a6 <LPTIM_Disable+0x136>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_PCLK1);
 801d69a:	f44f 0040 	mov.w	r0, #12582912	@ 0xc00000
 801d69e:	f7ff fb6c 	bl	801cd7a <LL_RCC_SetLPTIMClockSource>
        break;
 801d6a2:	e000      	b.n	801d6a6 <LPTIM_Disable+0x136>
        break;
 801d6a4:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 801d6a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d6a8:	2b00      	cmp	r3, #0
 801d6aa:	d01a      	beq.n	801d6e2 <LPTIM_Disable+0x172>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 801d6ac:	687b      	ldr	r3, [r7, #4]
 801d6ae:	681b      	ldr	r3, [r3, #0]
 801d6b0:	691a      	ldr	r2, [r3, #16]
 801d6b2:	687b      	ldr	r3, [r7, #4]
 801d6b4:	681b      	ldr	r3, [r3, #0]
 801d6b6:	f042 0201 	orr.w	r2, r2, #1
 801d6ba:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 801d6bc:	687b      	ldr	r3, [r7, #4]
 801d6be:	681b      	ldr	r3, [r3, #0]
 801d6c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801d6c2:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 801d6c4:	2108      	movs	r1, #8
 801d6c6:	6878      	ldr	r0, [r7, #4]
 801d6c8:	f7ff ff22 	bl	801d510 <LPTIM_WaitForFlag>
 801d6cc:	4603      	mov	r3, r0
 801d6ce:	2b03      	cmp	r3, #3
 801d6d0:	d103      	bne.n	801d6da <LPTIM_Disable+0x16a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 801d6d2:	687b      	ldr	r3, [r7, #4]
 801d6d4:	2203      	movs	r2, #3
 801d6d6:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 801d6da:	687b      	ldr	r3, [r7, #4]
 801d6dc:	681b      	ldr	r3, [r3, #0]
 801d6de:	2208      	movs	r2, #8
 801d6e0:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 801d6e2:	6a3b      	ldr	r3, [r7, #32]
 801d6e4:	2b00      	cmp	r3, #0
 801d6e6:	d01a      	beq.n	801d71e <LPTIM_Disable+0x1ae>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 801d6e8:	687b      	ldr	r3, [r7, #4]
 801d6ea:	681b      	ldr	r3, [r3, #0]
 801d6ec:	691a      	ldr	r2, [r3, #16]
 801d6ee:	687b      	ldr	r3, [r7, #4]
 801d6f0:	681b      	ldr	r3, [r3, #0]
 801d6f2:	f042 0201 	orr.w	r2, r2, #1
 801d6f6:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 801d6f8:	687b      	ldr	r3, [r7, #4]
 801d6fa:	681b      	ldr	r3, [r3, #0]
 801d6fc:	6a3a      	ldr	r2, [r7, #32]
 801d6fe:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 801d700:	2110      	movs	r1, #16
 801d702:	6878      	ldr	r0, [r7, #4]
 801d704:	f7ff ff04 	bl	801d510 <LPTIM_WaitForFlag>
 801d708:	4603      	mov	r3, r0
 801d70a:	2b03      	cmp	r3, #3
 801d70c:	d103      	bne.n	801d716 <LPTIM_Disable+0x1a6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 801d70e:	687b      	ldr	r3, [r7, #4]
 801d710:	2203      	movs	r2, #3
 801d712:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 801d716:	687b      	ldr	r3, [r7, #4]
 801d718:	681b      	ldr	r3, [r3, #0]
 801d71a:	2210      	movs	r2, #16
 801d71c:	605a      	str	r2, [r3, #4]
    }

    if (tmpRCR != 0UL)
 801d71e:	69bb      	ldr	r3, [r7, #24]
 801d720:	2b00      	cmp	r3, #0
 801d722:	d01c      	beq.n	801d75e <LPTIM_Disable+0x1ee>
    {
      /* Restore RCR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 801d724:	687b      	ldr	r3, [r7, #4]
 801d726:	681b      	ldr	r3, [r3, #0]
 801d728:	691a      	ldr	r2, [r3, #16]
 801d72a:	687b      	ldr	r3, [r7, #4]
 801d72c:	681b      	ldr	r3, [r3, #0]
 801d72e:	f042 0201 	orr.w	r2, r2, #1
 801d732:	611a      	str	r2, [r3, #16]
      hlptim->Instance->RCR = tmpRCR;
 801d734:	687b      	ldr	r3, [r7, #4]
 801d736:	681b      	ldr	r3, [r3, #0]
 801d738:	69ba      	ldr	r2, [r7, #24]
 801d73a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Wait for the completion of the write operation to the LPTIM_RCR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 801d73c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801d740:	6878      	ldr	r0, [r7, #4]
 801d742:	f7ff fee5 	bl	801d510 <LPTIM_WaitForFlag>
 801d746:	4603      	mov	r3, r0
 801d748:	2b03      	cmp	r3, #3
 801d74a:	d103      	bne.n	801d754 <LPTIM_Disable+0x1e4>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 801d74c:	687b      	ldr	r3, [r7, #4]
 801d74e:	2203      	movs	r2, #3
 801d750:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 801d754:	687b      	ldr	r3, [r7, #4]
 801d756:	681b      	ldr	r3, [r3, #0]
 801d758:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801d75c:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 801d75e:	687b      	ldr	r3, [r7, #4]
 801d760:	681b      	ldr	r3, [r3, #0]
 801d762:	4a1c      	ldr	r2, [pc, #112]	@ (801d7d4 <LPTIM_Disable+0x264>)
 801d764:	4293      	cmp	r3, r2
 801d766:	d011      	beq.n	801d78c <LPTIM_Disable+0x21c>
 801d768:	4a1a      	ldr	r2, [pc, #104]	@ (801d7d4 <LPTIM_Disable+0x264>)
 801d76a:	4293      	cmp	r3, r2
 801d76c:	d812      	bhi.n	801d794 <LPTIM_Disable+0x224>
 801d76e:	4a1a      	ldr	r2, [pc, #104]	@ (801d7d8 <LPTIM_Disable+0x268>)
 801d770:	4293      	cmp	r3, r2
 801d772:	d003      	beq.n	801d77c <LPTIM_Disable+0x20c>
 801d774:	4a19      	ldr	r2, [pc, #100]	@ (801d7dc <LPTIM_Disable+0x26c>)
 801d776:	4293      	cmp	r3, r2
 801d778:	d004      	beq.n	801d784 <LPTIM_Disable+0x214>
        break;
      case LPTIM3_BASE:
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
        break;
      default:
        break;
 801d77a:	e00b      	b.n	801d794 <LPTIM_Disable+0x224>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 801d77c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801d77e:	f7ff fafc 	bl	801cd7a <LL_RCC_SetLPTIMClockSource>
        break;
 801d782:	e008      	b.n	801d796 <LPTIM_Disable+0x226>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 801d784:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801d786:	f7ff faf8 	bl	801cd7a <LL_RCC_SetLPTIMClockSource>
        break;
 801d78a:	e004      	b.n	801d796 <LPTIM_Disable+0x226>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 801d78c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801d78e:	f7ff faf4 	bl	801cd7a <LL_RCC_SetLPTIMClockSource>
        break;
 801d792:	e000      	b.n	801d796 <LPTIM_Disable+0x226>
        break;
 801d794:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 801d796:	687b      	ldr	r3, [r7, #4]
 801d798:	681b      	ldr	r3, [r3, #0]
 801d79a:	691a      	ldr	r2, [r3, #16]
 801d79c:	687b      	ldr	r3, [r7, #4]
 801d79e:	681b      	ldr	r3, [r3, #0]
 801d7a0:	f022 0201 	bic.w	r2, r2, #1
 801d7a4:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 801d7a6:	687b      	ldr	r3, [r7, #4]
 801d7a8:	681b      	ldr	r3, [r3, #0]
 801d7aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801d7ac:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 801d7ae:	687b      	ldr	r3, [r7, #4]
 801d7b0:	681b      	ldr	r3, [r3, #0]
 801d7b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801d7b4:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 801d7b6:	687b      	ldr	r3, [r7, #4]
 801d7b8:	681b      	ldr	r3, [r3, #0]
 801d7ba:	69fa      	ldr	r2, [r7, #28]
 801d7bc:	621a      	str	r2, [r3, #32]
 801d7be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801d7c0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801d7c2:	68fb      	ldr	r3, [r7, #12]
 801d7c4:	f383 8810 	msr	PRIMASK, r3
}
 801d7c8:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 801d7ca:	bf00      	nop
 801d7cc:	3738      	adds	r7, #56	@ 0x38
 801d7ce:	46bd      	mov	sp, r7
 801d7d0:	bd80      	pop	{r7, pc}
 801d7d2:	bf00      	nop
 801d7d4:	40009800 	.word	0x40009800
 801d7d8:	40007c00 	.word	0x40007c00
 801d7dc:	40009400 	.word	0x40009400

0801d7e0 <ai_buffer_get_size>:
 801d7e0:	b360      	cbz	r0, 801d83c <ai_buffer_get_size+0x5c>
 801d7e2:	b430      	push	{r4, r5}
 801d7e4:	6803      	ldr	r3, [r0, #0]
 801d7e6:	4d16      	ldr	r5, [pc, #88]	@ (801d840 <ai_buffer_get_size+0x60>)
 801d7e8:	6984      	ldr	r4, [r0, #24]
 801d7ea:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 801d7ee:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 801d7f2:	42ab      	cmp	r3, r5
 801d7f4:	6862      	ldr	r2, [r4, #4]
 801d7f6:	d01b      	beq.n	801d830 <ai_buffer_get_size+0x50>
 801d7f8:	7d03      	ldrb	r3, [r0, #20]
 801d7fa:	6941      	ldr	r1, [r0, #20]
 801d7fc:	f1a3 0301 	sub.w	r3, r3, #1
 801d800:	fab3 f383 	clz	r3, r3
 801d804:	095b      	lsrs	r3, r3, #5
 801d806:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 801d80a:	f3c1 2017 	ubfx	r0, r1, #8, #24
 801d80e:	da0b      	bge.n	801d828 <ai_buffer_get_size+0x48>
 801d810:	2b01      	cmp	r3, #1
 801d812:	d102      	bne.n	801d81a <ai_buffer_get_size+0x3a>
 801d814:	2802      	cmp	r0, #2
 801d816:	d007      	beq.n	801d828 <ai_buffer_get_size+0x48>
 801d818:	2302      	movs	r3, #2
 801d81a:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 801d81e:	3301      	adds	r3, #1
 801d820:	4298      	cmp	r0, r3
 801d822:	fb01 f202 	mul.w	r2, r1, r2
 801d826:	d1f3      	bne.n	801d810 <ai_buffer_get_size+0x30>
 801d828:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 801d82c:	bc30      	pop	{r4, r5}
 801d82e:	4770      	bx	lr
 801d830:	2900      	cmp	r1, #0
 801d832:	d0e1      	beq.n	801d7f8 <ai_buffer_get_size+0x18>
 801d834:	321f      	adds	r2, #31
 801d836:	f022 021f 	bic.w	r2, r2, #31
 801d83a:	e7dd      	b.n	801d7f8 <ai_buffer_get_size+0x18>
 801d83c:	4770      	bx	lr
 801d83e:	bf00      	nop
 801d840:	000400c0 	.word	0x000400c0

0801d844 <ai_buffer_array_sane>:
 801d844:	b138      	cbz	r0, 801d856 <ai_buffer_array_sane+0x12>
 801d846:	6843      	ldr	r3, [r0, #4]
 801d848:	b123      	cbz	r3, 801d854 <ai_buffer_array_sane+0x10>
 801d84a:	8840      	ldrh	r0, [r0, #2]
 801d84c:	3800      	subs	r0, #0
 801d84e:	bf18      	it	ne
 801d850:	2001      	movne	r0, #1
 801d852:	4770      	bx	lr
 801d854:	4618      	mov	r0, r3
 801d856:	4770      	bx	lr

0801d858 <ai_buffer_array_item_set_address>:
 801d858:	b158      	cbz	r0, 801d872 <ai_buffer_array_item_set_address+0x1a>
 801d85a:	6843      	ldr	r3, [r0, #4]
 801d85c:	b143      	cbz	r3, 801d870 <ai_buffer_array_item_set_address+0x18>
 801d85e:	8840      	ldrh	r0, [r0, #2]
 801d860:	b138      	cbz	r0, 801d872 <ai_buffer_array_item_set_address+0x1a>
 801d862:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 801d866:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801d86a:	2001      	movs	r0, #1
 801d86c:	605a      	str	r2, [r3, #4]
 801d86e:	4770      	bx	lr
 801d870:	4618      	mov	r0, r3
 801d872:	4770      	bx	lr

0801d874 <ai_platform_get_weights_map>:
 801d874:	b1f2      	cbz	r2, 801d8b4 <ai_platform_get_weights_map+0x40>
 801d876:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d878:	4605      	mov	r5, r0
 801d87a:	b1c8      	cbz	r0, 801d8b0 <ai_platform_get_weights_map+0x3c>
 801d87c:	460c      	mov	r4, r1
 801d87e:	b1b9      	cbz	r1, 801d8b0 <ai_platform_get_weights_map+0x3c>
 801d880:	4b24      	ldr	r3, [pc, #144]	@ (801d914 <ai_platform_get_weights_map+0xa0>)
 801d882:	6811      	ldr	r1, [r2, #0]
 801d884:	4299      	cmp	r1, r3
 801d886:	4616      	mov	r6, r2
 801d888:	d00b      	beq.n	801d8a2 <ai_platform_get_weights_map+0x2e>
 801d88a:	6856      	ldr	r6, [r2, #4]
 801d88c:	b186      	cbz	r6, 801d8b0 <ai_platform_get_weights_map+0x3c>
 801d88e:	6837      	ldr	r7, [r6, #0]
 801d890:	429f      	cmp	r7, r3
 801d892:	d011      	beq.n	801d8b8 <ai_platform_get_weights_map+0x44>
 801d894:	6006      	str	r6, [r0, #0]
 801d896:	f1a4 0001 	sub.w	r0, r4, #1
 801d89a:	fab0 f080 	clz	r0, r0
 801d89e:	0940      	lsrs	r0, r0, #5
 801d8a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d8a2:	1d10      	adds	r0, r2, #4
 801d8a4:	f7ff ffce 	bl	801d844 <ai_buffer_array_sane>
 801d8a8:	b110      	cbz	r0, 801d8b0 <ai_platform_get_weights_map+0x3c>
 801d8aa:	88f3      	ldrh	r3, [r6, #6]
 801d8ac:	429c      	cmp	r4, r3
 801d8ae:	d01b      	beq.n	801d8e8 <ai_platform_get_weights_map+0x74>
 801d8b0:	2000      	movs	r0, #0
 801d8b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d8b4:	2000      	movs	r0, #0
 801d8b6:	4770      	bx	lr
 801d8b8:	4631      	mov	r1, r6
 801d8ba:	3804      	subs	r0, #4
 801d8bc:	2300      	movs	r3, #0
 801d8be:	e004      	b.n	801d8ca <ai_platform_get_weights_map+0x56>
 801d8c0:	3301      	adds	r3, #1
 801d8c2:	429c      	cmp	r4, r3
 801d8c4:	f840 2f04 	str.w	r2, [r0, #4]!
 801d8c8:	d005      	beq.n	801d8d6 <ai_platform_get_weights_map+0x62>
 801d8ca:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801d8ce:	42ba      	cmp	r2, r7
 801d8d0:	d1f6      	bne.n	801d8c0 <ai_platform_get_weights_map+0x4c>
 801d8d2:	429c      	cmp	r4, r3
 801d8d4:	d1ec      	bne.n	801d8b0 <ai_platform_get_weights_map+0x3c>
 801d8d6:	3401      	adds	r4, #1
 801d8d8:	4b0e      	ldr	r3, [pc, #56]	@ (801d914 <ai_platform_get_weights_map+0xa0>)
 801d8da:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801d8de:	1ac0      	subs	r0, r0, r3
 801d8e0:	fab0 f080 	clz	r0, r0
 801d8e4:	0940      	lsrs	r0, r0, #5
 801d8e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d8e8:	2100      	movs	r1, #0
 801d8ea:	1f28      	subs	r0, r5, #4
 801d8ec:	468c      	mov	ip, r1
 801d8ee:	e005      	b.n	801d8fc <ai_platform_get_weights_map+0x88>
 801d8f0:	f10c 0c01 	add.w	ip, ip, #1
 801d8f4:	4564      	cmp	r4, ip
 801d8f6:	f840 3f04 	str.w	r3, [r0, #4]!
 801d8fa:	d005      	beq.n	801d908 <ai_platform_get_weights_map+0x94>
 801d8fc:	68b3      	ldr	r3, [r6, #8]
 801d8fe:	440b      	add	r3, r1
 801d900:	311c      	adds	r1, #28
 801d902:	685b      	ldr	r3, [r3, #4]
 801d904:	2b00      	cmp	r3, #0
 801d906:	d1f3      	bne.n	801d8f0 <ai_platform_get_weights_map+0x7c>
 801d908:	eba4 000c 	sub.w	r0, r4, ip
 801d90c:	fab0 f080 	clz	r0, r0
 801d910:	0940      	lsrs	r0, r0, #5
 801d912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d914:	a1facade 	.word	0xa1facade

0801d918 <ai_platform_get_activations_map>:
 801d918:	b1fa      	cbz	r2, 801d95a <ai_platform_get_activations_map+0x42>
 801d91a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d91c:	4605      	mov	r5, r0
 801d91e:	b1d0      	cbz	r0, 801d956 <ai_platform_get_activations_map+0x3e>
 801d920:	460c      	mov	r4, r1
 801d922:	b1c1      	cbz	r1, 801d956 <ai_platform_get_activations_map+0x3e>
 801d924:	4b25      	ldr	r3, [pc, #148]	@ (801d9bc <ai_platform_get_activations_map+0xa4>)
 801d926:	6811      	ldr	r1, [r2, #0]
 801d928:	4299      	cmp	r1, r3
 801d92a:	4616      	mov	r6, r2
 801d92c:	d00b      	beq.n	801d946 <ai_platform_get_activations_map+0x2e>
 801d92e:	6a16      	ldr	r6, [r2, #32]
 801d930:	b18e      	cbz	r6, 801d956 <ai_platform_get_activations_map+0x3e>
 801d932:	6837      	ldr	r7, [r6, #0]
 801d934:	429f      	cmp	r7, r3
 801d936:	d012      	beq.n	801d95e <ai_platform_get_activations_map+0x46>
 801d938:	6006      	str	r6, [r0, #0]
 801d93a:	f1a4 0001 	sub.w	r0, r4, #1
 801d93e:	fab0 f080 	clz	r0, r0
 801d942:	0940      	lsrs	r0, r0, #5
 801d944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d946:	f102 000c 	add.w	r0, r2, #12
 801d94a:	f7ff ff7b 	bl	801d844 <ai_buffer_array_sane>
 801d94e:	b110      	cbz	r0, 801d956 <ai_platform_get_activations_map+0x3e>
 801d950:	89f3      	ldrh	r3, [r6, #14]
 801d952:	429c      	cmp	r4, r3
 801d954:	d01b      	beq.n	801d98e <ai_platform_get_activations_map+0x76>
 801d956:	2000      	movs	r0, #0
 801d958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d95a:	2000      	movs	r0, #0
 801d95c:	4770      	bx	lr
 801d95e:	4631      	mov	r1, r6
 801d960:	3804      	subs	r0, #4
 801d962:	2300      	movs	r3, #0
 801d964:	e004      	b.n	801d970 <ai_platform_get_activations_map+0x58>
 801d966:	3301      	adds	r3, #1
 801d968:	429c      	cmp	r4, r3
 801d96a:	f840 2f04 	str.w	r2, [r0, #4]!
 801d96e:	d005      	beq.n	801d97c <ai_platform_get_activations_map+0x64>
 801d970:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801d974:	42ba      	cmp	r2, r7
 801d976:	d1f6      	bne.n	801d966 <ai_platform_get_activations_map+0x4e>
 801d978:	429c      	cmp	r4, r3
 801d97a:	d1ec      	bne.n	801d956 <ai_platform_get_activations_map+0x3e>
 801d97c:	3401      	adds	r4, #1
 801d97e:	4b0f      	ldr	r3, [pc, #60]	@ (801d9bc <ai_platform_get_activations_map+0xa4>)
 801d980:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801d984:	1ac0      	subs	r0, r0, r3
 801d986:	fab0 f080 	clz	r0, r0
 801d98a:	0940      	lsrs	r0, r0, #5
 801d98c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d98e:	2100      	movs	r1, #0
 801d990:	1f28      	subs	r0, r5, #4
 801d992:	468c      	mov	ip, r1
 801d994:	e005      	b.n	801d9a2 <ai_platform_get_activations_map+0x8a>
 801d996:	f10c 0c01 	add.w	ip, ip, #1
 801d99a:	4564      	cmp	r4, ip
 801d99c:	f840 3f04 	str.w	r3, [r0, #4]!
 801d9a0:	d005      	beq.n	801d9ae <ai_platform_get_activations_map+0x96>
 801d9a2:	6933      	ldr	r3, [r6, #16]
 801d9a4:	440b      	add	r3, r1
 801d9a6:	311c      	adds	r1, #28
 801d9a8:	685b      	ldr	r3, [r3, #4]
 801d9aa:	2b00      	cmp	r3, #0
 801d9ac:	d1f3      	bne.n	801d996 <ai_platform_get_activations_map+0x7e>
 801d9ae:	eba4 000c 	sub.w	r0, r4, ip
 801d9b2:	fab0 f080 	clz	r0, r0
 801d9b6:	0940      	lsrs	r0, r0, #5
 801d9b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d9ba:	bf00      	nop
 801d9bc:	a1facade 	.word	0xa1facade

0801d9c0 <ai_platform_bind_network_params>:
 801d9c0:	b198      	cbz	r0, 801d9ea <ai_platform_bind_network_params+0x2a>
 801d9c2:	b1a9      	cbz	r1, 801d9f0 <ai_platform_bind_network_params+0x30>
 801d9c4:	b1ba      	cbz	r2, 801d9f6 <ai_platform_bind_network_params+0x36>
 801d9c6:	b410      	push	{r4}
 801d9c8:	4603      	mov	r3, r0
 801d9ca:	4c0c      	ldr	r4, [pc, #48]	@ (801d9fc <ai_platform_bind_network_params+0x3c>)
 801d9cc:	f843 4b04 	str.w	r4, [r3], #4
 801d9d0:	f100 0c0c 	add.w	ip, r0, #12
 801d9d4:	c903      	ldmia	r1, {r0, r1}
 801d9d6:	e883 0003 	stmia.w	r3, {r0, r1}
 801d9da:	e892 0003 	ldmia.w	r2, {r0, r1}
 801d9de:	e88c 0003 	stmia.w	ip, {r0, r1}
 801d9e2:	2301      	movs	r3, #1
 801d9e4:	4618      	mov	r0, r3
 801d9e6:	bc10      	pop	{r4}
 801d9e8:	4770      	bx	lr
 801d9ea:	4603      	mov	r3, r0
 801d9ec:	4618      	mov	r0, r3
 801d9ee:	4770      	bx	lr
 801d9f0:	460b      	mov	r3, r1
 801d9f2:	4618      	mov	r0, r3
 801d9f4:	4770      	bx	lr
 801d9f6:	4613      	mov	r3, r2
 801d9f8:	4618      	mov	r0, r3
 801d9fa:	4770      	bx	lr
 801d9fc:	a1facade 	.word	0xa1facade

0801da00 <ai_platform_network_get_error>:
 801da00:	4b04      	ldr	r3, [pc, #16]	@ (801da14 <ai_platform_network_get_error+0x14>)
 801da02:	6802      	ldr	r2, [r0, #0]
 801da04:	4393      	bics	r3, r2
 801da06:	d102      	bne.n	801da0e <ai_platform_network_get_error+0xe>
 801da08:	300c      	adds	r0, #12
 801da0a:	f000 bc19 	b.w	801e240 <core_get_error>
 801da0e:	f241 0010 	movw	r0, #4112	@ 0x1010
 801da12:	4770      	bx	lr
 801da14:	a1c00100 	.word	0xa1c00100

0801da18 <ai_platform_network_set_error>:
 801da18:	b110      	cbz	r0, 801da20 <ai_platform_network_set_error+0x8>
 801da1a:	300c      	adds	r0, #12
 801da1c:	f000 bc16 	b.w	801e24c <core_set_error>
 801da20:	4770      	bx	lr
 801da22:	bf00      	nop

0801da24 <ai_platform_inputs_get>:
 801da24:	4b39      	ldr	r3, [pc, #228]	@ (801db0c <ai_platform_inputs_get+0xe8>)
 801da26:	6802      	ldr	r2, [r0, #0]
 801da28:	4393      	bics	r3, r2
 801da2a:	d163      	bne.n	801daf4 <ai_platform_inputs_get+0xd0>
 801da2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da30:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 801da32:	b085      	sub	sp, #20
 801da34:	4605      	mov	r5, r0
 801da36:	460c      	mov	r4, r1
 801da38:	2b00      	cmp	r3, #0
 801da3a:	d04e      	beq.n	801dada <ai_platform_inputs_get+0xb6>
 801da3c:	6b47      	ldr	r7, [r0, #52]	@ 0x34
 801da3e:	2f00      	cmp	r7, #0
 801da40:	d04b      	beq.n	801dada <ai_platform_inputs_get+0xb6>
 801da42:	f04f 0b00 	mov.w	fp, #0
 801da46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801da4a:	465e      	mov	r6, fp
 801da4c:	46ba      	mov	sl, r7
 801da4e:	e017      	b.n	801da80 <ai_platform_inputs_get+0x5c>
 801da50:	9901      	ldr	r1, [sp, #4]
 801da52:	f04f 0c01 	mov.w	ip, #1
 801da56:	f847 c001 	str.w	ip, [r7, r1]
 801da5a:	69a1      	ldr	r1, [r4, #24]
 801da5c:	684c      	ldr	r4, [r1, #4]
 801da5e:	6028      	str	r0, [r5, #0]
 801da60:	f04f 0101 	mov.w	r1, #1
 801da64:	7529      	strb	r1, [r5, #20]
 801da66:	6968      	ldr	r0, [r5, #20]
 801da68:	60ab      	str	r3, [r5, #8]
 801da6a:	f368 201f 	bfi	r0, r8, #8, #24
 801da6e:	2300      	movs	r3, #0
 801da70:	e9c5 3403 	strd	r3, r4, [r5, #12]
 801da74:	e9c5 0905 	strd	r0, r9, [r5, #20]
 801da78:	606a      	str	r2, [r5, #4]
 801da7a:	3601      	adds	r6, #1
 801da7c:	f10b 0b1c 	add.w	fp, fp, #28
 801da80:	f8ba 3000 	ldrh.w	r3, [sl]
 801da84:	00f2      	lsls	r2, r6, #3
 801da86:	42b3      	cmp	r3, r6
 801da88:	9201      	str	r2, [sp, #4]
 801da8a:	d935      	bls.n	801daf8 <ai_platform_inputs_get+0xd4>
 801da8c:	f8da 3004 	ldr.w	r3, [sl, #4]
 801da90:	2b00      	cmp	r3, #0
 801da92:	d031      	beq.n	801daf8 <ai_platform_inputs_get+0xd4>
 801da94:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 801da98:	b374      	cbz	r4, 801daf8 <ai_platform_inputs_get+0xd4>
 801da9a:	f8da 3008 	ldr.w	r3, [sl, #8]
 801da9e:	69a2      	ldr	r2, [r4, #24]
 801daa0:	f8d4 900c 	ldr.w	r9, [r4, #12]
 801daa4:	6810      	ldr	r0, [r2, #0]
 801daa6:	e9d3 5701 	ldrd	r5, r7, [r3, #4]
 801daaa:	68a3      	ldr	r3, [r4, #8]
 801daac:	f3c3 2817 	ubfx	r8, r3, #8, #24
 801dab0:	f001 fbc2 	bl	801f238 <ai_array_to_buffer_fmt>
 801dab4:	69a1      	ldr	r1, [r4, #24]
 801dab6:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
 801daba:	688a      	ldr	r2, [r1, #8]
 801dabc:	445d      	add	r5, fp
 801dabe:	2b00      	cmp	r3, #0
 801dac0:	d0cc      	beq.n	801da5c <ai_platform_inputs_get+0x38>
 801dac2:	2100      	movs	r1, #0
 801dac4:	f847 1036 	str.w	r1, [r7, r6, lsl #3]
 801dac8:	6821      	ldr	r1, [r4, #0]
 801daca:	6059      	str	r1, [r3, #4]
 801dacc:	b111      	cbz	r1, 801dad4 <ai_platform_inputs_get+0xb0>
 801dace:	8849      	ldrh	r1, [r1, #2]
 801dad0:	2900      	cmp	r1, #0
 801dad2:	d1bd      	bne.n	801da50 <ai_platform_inputs_get+0x2c>
 801dad4:	69a1      	ldr	r1, [r4, #24]
 801dad6:	2300      	movs	r3, #0
 801dad8:	e7c0      	b.n	801da5c <ai_platform_inputs_get+0x38>
 801dada:	2218      	movs	r2, #24
 801dadc:	2111      	movs	r1, #17
 801dade:	f105 000c 	add.w	r0, r5, #12
 801dae2:	2600      	movs	r6, #0
 801dae4:	f000 fbb2 	bl	801e24c <core_set_error>
 801dae8:	4630      	mov	r0, r6
 801daea:	b104      	cbz	r4, 801daee <ai_platform_inputs_get+0xca>
 801daec:	8026      	strh	r6, [r4, #0]
 801daee:	b005      	add	sp, #20
 801daf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801daf4:	2000      	movs	r0, #0
 801daf6:	4770      	bx	lr
 801daf8:	b2b6      	uxth	r6, r6
 801dafa:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 801dafe:	2e00      	cmp	r6, #0
 801db00:	d0eb      	beq.n	801dada <ai_platform_inputs_get+0xb6>
 801db02:	f8da 3008 	ldr.w	r3, [sl, #8]
 801db06:	6858      	ldr	r0, [r3, #4]
 801db08:	e7ef      	b.n	801daea <ai_platform_inputs_get+0xc6>
 801db0a:	bf00      	nop
 801db0c:	a1c00100 	.word	0xa1c00100

0801db10 <ai_platform_outputs_get>:
 801db10:	4b37      	ldr	r3, [pc, #220]	@ (801dbf0 <ai_platform_outputs_get+0xe0>)
 801db12:	6802      	ldr	r2, [r0, #0]
 801db14:	4393      	bics	r3, r2
 801db16:	d169      	bne.n	801dbec <ai_platform_outputs_get+0xdc>
 801db18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db1c:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 801db1e:	2b01      	cmp	r3, #1
 801db20:	b085      	sub	sp, #20
 801db22:	4605      	mov	r5, r0
 801db24:	460c      	mov	r4, r1
 801db26:	d94b      	bls.n	801dbc0 <ai_platform_outputs_get+0xb0>
 801db28:	6b47      	ldr	r7, [r0, #52]	@ 0x34
 801db2a:	f04f 0b00 	mov.w	fp, #0
 801db2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801db32:	465e      	mov	r6, fp
 801db34:	46d8      	mov	r8, fp
 801db36:	46ba      	mov	sl, r7
 801db38:	e017      	b.n	801db6a <ai_platform_outputs_get+0x5a>
 801db3a:	9901      	ldr	r1, [sp, #4]
 801db3c:	f04f 0c01 	mov.w	ip, #1
 801db40:	f847 c001 	str.w	ip, [r7, r1]
 801db44:	69a9      	ldr	r1, [r5, #24]
 801db46:	684d      	ldr	r5, [r1, #4]
 801db48:	6020      	str	r0, [r4, #0]
 801db4a:	f04f 0101 	mov.w	r1, #1
 801db4e:	7521      	strb	r1, [r4, #20]
 801db50:	6960      	ldr	r0, [r4, #20]
 801db52:	6062      	str	r2, [r4, #4]
 801db54:	f369 201f 	bfi	r0, r9, #8, #24
 801db58:	e9c4 5004 	strd	r5, r0, [r4, #16]
 801db5c:	e9c4 3802 	strd	r3, r8, [r4, #8]
 801db60:	9b00      	ldr	r3, [sp, #0]
 801db62:	61a3      	str	r3, [r4, #24]
 801db64:	3601      	adds	r6, #1
 801db66:	f10b 0b1c 	add.w	fp, fp, #28
 801db6a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 801db6e:	00f2      	lsls	r2, r6, #3
 801db70:	42b3      	cmp	r3, r6
 801db72:	9201      	str	r2, [sp, #4]
 801db74:	d931      	bls.n	801dbda <ai_platform_outputs_get+0xca>
 801db76:	f8da 3010 	ldr.w	r3, [sl, #16]
 801db7a:	b373      	cbz	r3, 801dbda <ai_platform_outputs_get+0xca>
 801db7c:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
 801db80:	b35d      	cbz	r5, 801dbda <ai_platform_outputs_get+0xca>
 801db82:	f8da 3014 	ldr.w	r3, [sl, #20]
 801db86:	69aa      	ldr	r2, [r5, #24]
 801db88:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 801db8c:	68ab      	ldr	r3, [r5, #8]
 801db8e:	6810      	ldr	r0, [r2, #0]
 801db90:	f3c3 2917 	ubfx	r9, r3, #8, #24
 801db94:	68eb      	ldr	r3, [r5, #12]
 801db96:	9300      	str	r3, [sp, #0]
 801db98:	f001 fb4e 	bl	801f238 <ai_array_to_buffer_fmt>
 801db9c:	69a9      	ldr	r1, [r5, #24]
 801db9e:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
 801dba2:	688a      	ldr	r2, [r1, #8]
 801dba4:	445c      	add	r4, fp
 801dba6:	2b00      	cmp	r3, #0
 801dba8:	d0cd      	beq.n	801db46 <ai_platform_outputs_get+0x36>
 801dbaa:	f847 8036 	str.w	r8, [r7, r6, lsl #3]
 801dbae:	6829      	ldr	r1, [r5, #0]
 801dbb0:	6059      	str	r1, [r3, #4]
 801dbb2:	b111      	cbz	r1, 801dbba <ai_platform_outputs_get+0xaa>
 801dbb4:	8849      	ldrh	r1, [r1, #2]
 801dbb6:	2900      	cmp	r1, #0
 801dbb8:	d1bf      	bne.n	801db3a <ai_platform_outputs_get+0x2a>
 801dbba:	69a9      	ldr	r1, [r5, #24]
 801dbbc:	2300      	movs	r3, #0
 801dbbe:	e7c2      	b.n	801db46 <ai_platform_outputs_get+0x36>
 801dbc0:	2218      	movs	r2, #24
 801dbc2:	2111      	movs	r1, #17
 801dbc4:	f105 000c 	add.w	r0, r5, #12
 801dbc8:	2600      	movs	r6, #0
 801dbca:	f000 fb3f 	bl	801e24c <core_set_error>
 801dbce:	4630      	mov	r0, r6
 801dbd0:	b104      	cbz	r4, 801dbd4 <ai_platform_outputs_get+0xc4>
 801dbd2:	8026      	strh	r6, [r4, #0]
 801dbd4:	b005      	add	sp, #20
 801dbd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dbda:	b2b6      	uxth	r6, r6
 801dbdc:	e9dd 5402 	ldrd	r5, r4, [sp, #8]
 801dbe0:	2e00      	cmp	r6, #0
 801dbe2:	d0ed      	beq.n	801dbc0 <ai_platform_outputs_get+0xb0>
 801dbe4:	f8da 3014 	ldr.w	r3, [sl, #20]
 801dbe8:	6858      	ldr	r0, [r3, #4]
 801dbea:	e7f1      	b.n	801dbd0 <ai_platform_outputs_get+0xc0>
 801dbec:	2000      	movs	r0, #0
 801dbee:	4770      	bx	lr
 801dbf0:	a1c00100 	.word	0xa1c00100

0801dbf4 <ai_platform_network_create>:
 801dbf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801dbf8:	b083      	sub	sp, #12
 801dbfa:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 801dbfe:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 801dc02:	b320      	cbz	r0, 801dc4e <ai_platform_network_create+0x5a>
 801dc04:	6002      	str	r2, [r0, #0]
 801dc06:	4616      	mov	r6, r2
 801dc08:	461f      	mov	r7, r3
 801dc0a:	4604      	mov	r4, r0
 801dc0c:	f000 fb16 	bl	801e23c <core_init>
 801dc10:	b970      	cbnz	r0, 801dc30 <ai_platform_network_create+0x3c>
 801dc12:	2530      	movs	r5, #48	@ 0x30
 801dc14:	2300      	movs	r3, #0
 801dc16:	6023      	str	r3, [r4, #0]
 801dc18:	2410      	movs	r4, #16
 801dc1a:	464a      	mov	r2, r9
 801dc1c:	4641      	mov	r1, r8
 801dc1e:	4638      	mov	r0, r7
 801dc20:	f001 fb8c 	bl	801f33c <ai_version_get>
 801dc24:	60b0      	str	r0, [r6, #8]
 801dc26:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 801dc2a:	b003      	add	sp, #12
 801dc2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801dc30:	2200      	movs	r2, #0
 801dc32:	4641      	mov	r1, r8
 801dc34:	4638      	mov	r0, r7
 801dc36:	f001 fb81 	bl	801f33c <ai_version_get>
 801dc3a:	2200      	movs	r2, #0
 801dc3c:	4605      	mov	r5, r0
 801dc3e:	2105      	movs	r1, #5
 801dc40:	2001      	movs	r0, #1
 801dc42:	f001 fb7b 	bl	801f33c <ai_version_get>
 801dc46:	4285      	cmp	r5, r0
 801dc48:	d008      	beq.n	801dc5c <ai_platform_network_create+0x68>
 801dc4a:	2501      	movs	r5, #1
 801dc4c:	e7e2      	b.n	801dc14 <ai_platform_network_create+0x20>
 801dc4e:	2510      	movs	r5, #16
 801dc50:	462c      	mov	r4, r5
 801dc52:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 801dc56:	b003      	add	sp, #12
 801dc58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801dc5c:	4b05      	ldr	r3, [pc, #20]	@ (801dc74 <ai_platform_network_create+0x80>)
 801dc5e:	9301      	str	r3, [sp, #4]
 801dc60:	a801      	add	r0, sp, #4
 801dc62:	f000 faff 	bl	801e264 <ai_check_custom_types>
 801dc66:	b110      	cbz	r0, 801dc6e <ai_platform_network_create+0x7a>
 801dc68:	2400      	movs	r4, #0
 801dc6a:	4625      	mov	r5, r4
 801dc6c:	e7d5      	b.n	801dc1a <ai_platform_network_create+0x26>
 801dc6e:	2502      	movs	r5, #2
 801dc70:	e7d0      	b.n	801dc14 <ai_platform_network_create+0x20>
 801dc72:	bf00      	nop
 801dc74:	84048403 	.word	0x84048403

0801dc78 <ai_platform_network_init>:
 801dc78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dc7c:	4a48      	ldr	r2, [pc, #288]	@ (801dda0 <ai_platform_network_init+0x128>)
 801dc7e:	4604      	mov	r4, r0
 801dc80:	6800      	ldr	r0, [r0, #0]
 801dc82:	460b      	mov	r3, r1
 801dc84:	ea00 0102 	and.w	r1, r0, r2
 801dc88:	4382      	bics	r2, r0
 801dc8a:	d13b      	bne.n	801dd04 <ai_platform_network_init+0x8c>
 801dc8c:	2b00      	cmp	r3, #0
 801dc8e:	d078      	beq.n	801dd82 <ai_platform_network_init+0x10a>
 801dc90:	4a44      	ldr	r2, [pc, #272]	@ (801dda4 <ai_platform_network_init+0x12c>)
 801dc92:	681d      	ldr	r5, [r3, #0]
 801dc94:	4295      	cmp	r5, r2
 801dc96:	d10a      	bne.n	801dcae <ai_platform_network_init+0x36>
 801dc98:	4288      	cmp	r0, r1
 801dc9a:	e9d3 2503 	ldrd	r2, r5, [r3, #12]
 801dc9e:	e9d3 6301 	ldrd	r6, r3, [r3, #4]
 801dca2:	d03d      	beq.n	801dd20 <ai_platform_network_init+0xa8>
 801dca4:	2303      	movs	r3, #3
 801dca6:	6123      	str	r3, [r4, #16]
 801dca8:	4620      	mov	r0, r4
 801dcaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dcae:	2101      	movs	r1, #1
 801dcb0:	4618      	mov	r0, r3
 801dcb2:	461d      	mov	r5, r3
 801dcb4:	f8d3 8004 	ldr.w	r8, [r3, #4]
 801dcb8:	f7ff fd92 	bl	801d7e0 <ai_buffer_get_size>
 801dcbc:	f105 071c 	add.w	r7, r5, #28
 801dcc0:	4606      	mov	r6, r0
 801dcc2:	2101      	movs	r1, #1
 801dcc4:	4638      	mov	r0, r7
 801dcc6:	f8d5 9020 	ldr.w	r9, [r5, #32]
 801dcca:	f7ff fd89 	bl	801d7e0 <ai_buffer_get_size>
 801dcce:	2e00      	cmp	r6, #0
 801dcd0:	bf0a      	itet	eq
 801dcd2:	4631      	moveq	r1, r6
 801dcd4:	2101      	movne	r1, #1
 801dcd6:	4635      	moveq	r5, r6
 801dcd8:	b1b0      	cbz	r0, 801dd08 <ai_platform_network_init+0x90>
 801dcda:	f1b9 0f00 	cmp.w	r9, #0
 801dcde:	d057      	beq.n	801dd90 <ai_platform_network_init+0x118>
 801dce0:	f04f 0e01 	mov.w	lr, #1
 801dce4:	f1b8 0f00 	cmp.w	r8, #0
 801dce8:	d011      	beq.n	801dd0e <ai_platform_network_init+0x96>
 801dcea:	4b2d      	ldr	r3, [pc, #180]	@ (801dda0 <ai_platform_network_init+0x128>)
 801dcec:	6822      	ldr	r2, [r4, #0]
 801dcee:	429a      	cmp	r2, r3
 801dcf0:	d1d8      	bne.n	801dca4 <ai_platform_network_init+0x2c>
 801dcf2:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 801dcf4:	428b      	cmp	r3, r1
 801dcf6:	d21b      	bcs.n	801dd30 <ai_platform_network_init+0xb8>
 801dcf8:	2212      	movs	r2, #18
 801dcfa:	2116      	movs	r1, #22
 801dcfc:	f104 000c 	add.w	r0, r4, #12
 801dd00:	f000 faa4 	bl	801e24c <core_set_error>
 801dd04:	2000      	movs	r0, #0
 801dd06:	e7d0      	b.n	801dcaa <ai_platform_network_init+0x32>
 801dd08:	4607      	mov	r7, r0
 801dd0a:	4686      	mov	lr, r0
 801dd0c:	e7ea      	b.n	801dce4 <ai_platform_network_init+0x6c>
 801dd0e:	2e00      	cmp	r6, #0
 801dd10:	d0eb      	beq.n	801dcea <ai_platform_network_init+0x72>
 801dd12:	2212      	movs	r2, #18
 801dd14:	2110      	movs	r1, #16
 801dd16:	f104 000c 	add.w	r0, r4, #12
 801dd1a:	f000 fa97 	bl	801e24c <core_set_error>
 801dd1e:	e7f1      	b.n	801dd04 <ai_platform_network_init+0x8c>
 801dd20:	e9c4 6308 	strd	r6, r3, [r4, #32]
 801dd24:	62e5      	str	r5, [r4, #44]	@ 0x2c
 801dd26:	62a2      	str	r2, [r4, #40]	@ 0x28
 801dd28:	4620      	mov	r0, r4
 801dd2a:	f000 fac5 	bl	801e2b8 <ai_layers_init_all>
 801dd2e:	e7b9      	b.n	801dca4 <ai_platform_network_init+0x2c>
 801dd30:	b1e1      	cbz	r1, 801dd6c <ai_platform_network_init+0xf4>
 801dd32:	46ac      	mov	ip, r5
 801dd34:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801dd38:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 801dd3a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801dd3c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 801dd40:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 801dd44:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 801dd46:	f44f 3680 	mov.w	r6, #65536	@ 0x10000
 801dd4a:	4573      	cmp	r3, lr
 801dd4c:	6226      	str	r6, [r4, #32]
 801dd4e:	d311      	bcc.n	801dd74 <ai_platform_network_init+0xfc>
 801dd50:	f1be 0f00 	cmp.w	lr, #0
 801dd54:	d007      	beq.n	801dd66 <ai_platform_network_init+0xee>
 801dd56:	463e      	mov	r6, r7
 801dd58:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801dd5a:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 801dd5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801dd5e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801dd62:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 801dd66:	ea4f 420e 	mov.w	r2, lr, lsl #16
 801dd6a:	e7dc      	b.n	801dd26 <ai_platform_network_init+0xae>
 801dd6c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 801dd6e:	6221      	str	r1, [r4, #32]
 801dd70:	4573      	cmp	r3, lr
 801dd72:	d2ed      	bcs.n	801dd50 <ai_platform_network_init+0xd8>
 801dd74:	2213      	movs	r2, #19
 801dd76:	2116      	movs	r1, #22
 801dd78:	f104 000c 	add.w	r0, r4, #12
 801dd7c:	f000 fa66 	bl	801e24c <core_set_error>
 801dd80:	e7c0      	b.n	801dd04 <ai_platform_network_init+0x8c>
 801dd82:	2211      	movs	r2, #17
 801dd84:	2110      	movs	r1, #16
 801dd86:	f104 000c 	add.w	r0, r4, #12
 801dd8a:	f000 fa5f 	bl	801e24c <core_set_error>
 801dd8e:	e7b9      	b.n	801dd04 <ai_platform_network_init+0x8c>
 801dd90:	2213      	movs	r2, #19
 801dd92:	2110      	movs	r1, #16
 801dd94:	f104 000c 	add.w	r0, r4, #12
 801dd98:	f000 fa58 	bl	801e24c <core_set_error>
 801dd9c:	e7b2      	b.n	801dd04 <ai_platform_network_init+0x8c>
 801dd9e:	bf00      	nop
 801dda0:	a1c00100 	.word	0xa1c00100
 801dda4:	a1facade 	.word	0xa1facade

0801dda8 <ai_platform_network_post_init>:
 801dda8:	4b15      	ldr	r3, [pc, #84]	@ (801de00 <ai_platform_network_post_init+0x58>)
 801ddaa:	6802      	ldr	r2, [r0, #0]
 801ddac:	ea02 0103 	and.w	r1, r2, r3
 801ddb0:	4393      	bics	r3, r2
 801ddb2:	d123      	bne.n	801ddfc <ai_platform_network_post_init+0x54>
 801ddb4:	b570      	push	{r4, r5, r6, lr}
 801ddb6:	6903      	ldr	r3, [r0, #16]
 801ddb8:	079b      	lsls	r3, r3, #30
 801ddba:	4604      	mov	r4, r0
 801ddbc:	d503      	bpl.n	801ddc6 <ai_platform_network_post_init+0x1e>
 801ddbe:	428a      	cmp	r2, r1
 801ddc0:	d008      	beq.n	801ddd4 <ai_platform_network_post_init+0x2c>
 801ddc2:	2001      	movs	r0, #1
 801ddc4:	bd70      	pop	{r4, r5, r6, pc}
 801ddc6:	2210      	movs	r2, #16
 801ddc8:	2111      	movs	r1, #17
 801ddca:	300c      	adds	r0, #12
 801ddcc:	f000 fa3e 	bl	801e24c <core_set_error>
 801ddd0:	2000      	movs	r0, #0
 801ddd2:	bd70      	pop	{r4, r5, r6, pc}
 801ddd4:	f000 fa80 	bl	801e2d8 <ai_layers_post_init_all>
 801ddd8:	6c26      	ldr	r6, [r4, #64]	@ 0x40
 801ddda:	2e00      	cmp	r6, #0
 801dddc:	d0f1      	beq.n	801ddc2 <ai_platform_network_post_init+0x1a>
 801ddde:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 801dde0:	2d00      	cmp	r5, #0
 801dde2:	d0ee      	beq.n	801ddc2 <ai_platform_network_post_init+0x1a>
 801dde4:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 801dde6:	4629      	mov	r1, r5
 801dde8:	2000      	movs	r0, #0
 801ddea:	47b0      	blx	r6
 801ddec:	692b      	ldr	r3, [r5, #16]
 801ddee:	42ab      	cmp	r3, r5
 801ddf0:	d0e7      	beq.n	801ddc2 <ai_platform_network_post_init+0x1a>
 801ddf2:	2b00      	cmp	r3, #0
 801ddf4:	d0e5      	beq.n	801ddc2 <ai_platform_network_post_init+0x1a>
 801ddf6:	6c26      	ldr	r6, [r4, #64]	@ 0x40
 801ddf8:	461d      	mov	r5, r3
 801ddfa:	e7f3      	b.n	801dde4 <ai_platform_network_post_init+0x3c>
 801ddfc:	2000      	movs	r0, #0
 801ddfe:	4770      	bx	lr
 801de00:	a1c00100 	.word	0xa1c00100

0801de04 <ai_platform_network_process>:
 801de04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de08:	4bb7      	ldr	r3, [pc, #732]	@ (801e0e8 <ai_platform_network_process+0x2e4>)
 801de0a:	4607      	mov	r7, r0
 801de0c:	6800      	ldr	r0, [r0, #0]
 801de0e:	4383      	bics	r3, r0
 801de10:	b085      	sub	sp, #20
 801de12:	f040 812d 	bne.w	801e070 <ai_platform_network_process+0x26c>
 801de16:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801de18:	2b00      	cmp	r3, #0
 801de1a:	f000 811d 	beq.w	801e058 <ai_platform_network_process+0x254>
 801de1e:	693b      	ldr	r3, [r7, #16]
 801de20:	f8d7 9034 	ldr.w	r9, [r7, #52]	@ 0x34
 801de24:	f003 0303 	and.w	r3, r3, #3
 801de28:	2600      	movs	r6, #0
 801de2a:	2b03      	cmp	r3, #3
 801de2c:	61be      	str	r6, [r7, #24]
 801de2e:	f040 8129 	bne.w	801e084 <ai_platform_network_process+0x280>
 801de32:	2900      	cmp	r1, #0
 801de34:	f000 8116 	beq.w	801e064 <ai_platform_network_process+0x260>
 801de38:	f1b9 0f00 	cmp.w	r9, #0
 801de3c:	f000 8112 	beq.w	801e064 <ai_platform_network_process+0x260>
 801de40:	f8b9 3000 	ldrh.w	r3, [r9]
 801de44:	2b00      	cmp	r3, #0
 801de46:	f000 810d 	beq.w	801e064 <ai_platform_network_process+0x260>
 801de4a:	698b      	ldr	r3, [r1, #24]
 801de4c:	e9cd 7202 	strd	r7, r2, [sp, #8]
 801de50:	f8d3 b000 	ldr.w	fp, [r3]
 801de54:	460c      	mov	r4, r1
 801de56:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801de5a:	2b00      	cmp	r3, #0
 801de5c:	d072      	beq.n	801df44 <ai_platform_network_process+0x140>
 801de5e:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
 801de62:	2d00      	cmp	r5, #0
 801de64:	d06e      	beq.n	801df44 <ai_platform_network_process+0x140>
 801de66:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801de6a:	f8d3 a000 	ldr.w	sl, [r3]
 801de6e:	0133      	lsls	r3, r6, #4
 801de70:	eb1a 1806 	adds.w	r8, sl, r6, lsl #4
 801de74:	9301      	str	r3, [sp, #4]
 801de76:	f000 81ba 	beq.w	801e1ee <ai_platform_network_process+0x3ea>
 801de7a:	69ab      	ldr	r3, [r5, #24]
 801de7c:	2101      	movs	r1, #1
 801de7e:	4620      	mov	r0, r4
 801de80:	685f      	ldr	r7, [r3, #4]
 801de82:	f7ff fcad 	bl	801d7e0 <ai_buffer_get_size>
 801de86:	4287      	cmp	r7, r0
 801de88:	f0c0 8103 	bcc.w	801e092 <ai_platform_network_process+0x28e>
 801de8c:	68e8      	ldr	r0, [r5, #12]
 801de8e:	69a1      	ldr	r1, [r4, #24]
 801de90:	68c2      	ldr	r2, [r0, #12]
 801de92:	68cb      	ldr	r3, [r1, #12]
 801de94:	429a      	cmp	r2, r3
 801de96:	f040 80fc 	bne.w	801e092 <ai_platform_network_process+0x28e>
 801de9a:	6882      	ldr	r2, [r0, #8]
 801de9c:	688b      	ldr	r3, [r1, #8]
 801de9e:	429a      	cmp	r2, r3
 801dea0:	f040 80f7 	bne.w	801e092 <ai_platform_network_process+0x28e>
 801dea4:	6842      	ldr	r2, [r0, #4]
 801dea6:	684b      	ldr	r3, [r1, #4]
 801dea8:	429a      	cmp	r2, r3
 801deaa:	f040 80f2 	bne.w	801e092 <ai_platform_network_process+0x28e>
 801deae:	69ab      	ldr	r3, [r5, #24]
 801deb0:	e9d3 0100 	ldrd	r0, r1, [r3]
 801deb4:	f001 fa30 	bl	801f318 <ai_array_get_data_byte_size>
 801deb8:	9001      	str	r0, [sp, #4]
 801deba:	4628      	mov	r0, r5
 801debc:	f001 fa44 	bl	801f348 <get_tensor_byte_size>
 801dec0:	9b01      	ldr	r3, [sp, #4]
 801dec2:	4283      	cmp	r3, r0
 801dec4:	f0c0 80e5 	bcc.w	801e092 <ai_platform_network_process+0x28e>
 801dec8:	69ab      	ldr	r3, [r5, #24]
 801deca:	6818      	ldr	r0, [r3, #0]
 801decc:	f001 f9b4 	bl	801f238 <ai_array_to_buffer_fmt>
 801ded0:	6823      	ldr	r3, [r4, #0]
 801ded2:	4058      	eors	r0, r3
 801ded4:	f030 437e 	bics.w	r3, r0, #4261412864	@ 0xfe000000
 801ded8:	f040 8193 	bne.w	801e202 <ai_platform_network_process+0x3fe>
 801dedc:	6863      	ldr	r3, [r4, #4]
 801dede:	2b00      	cmp	r3, #0
 801dee0:	f000 8185 	beq.w	801e1ee <ai_platform_network_process+0x3ea>
 801dee4:	69a3      	ldr	r3, [r4, #24]
 801dee6:	681b      	ldr	r3, [r3, #0]
 801dee8:	2b00      	cmp	r3, #0
 801deea:	f000 8182 	beq.w	801e1f2 <ai_platform_network_process+0x3ee>
 801deee:	459b      	cmp	fp, r3
 801def0:	4628      	mov	r0, r5
 801def2:	bf38      	it	cc
 801def4:	469b      	movcc	fp, r3
 801def6:	f001 fa27 	bl	801f348 <get_tensor_byte_size>
 801defa:	f8c8 0008 	str.w	r0, [r8, #8]
 801defe:	69a3      	ldr	r3, [r4, #24]
 801df00:	681b      	ldr	r3, [r3, #0]
 801df02:	fb00 f303 	mul.w	r3, r0, r3
 801df06:	f8c8 300c 	str.w	r3, [r8, #12]
 801df0a:	6861      	ldr	r1, [r4, #4]
 801df0c:	f8c8 1004 	str.w	r1, [r8, #4]
 801df10:	0132      	lsls	r2, r6, #4
 801df12:	440b      	add	r3, r1
 801df14:	f84a 3002 	str.w	r3, [sl, r2]
 801df18:	69a8      	ldr	r0, [r5, #24]
 801df1a:	6803      	ldr	r3, [r0, #0]
 801df1c:	009a      	lsls	r2, r3, #2
 801df1e:	f106 0601 	add.w	r6, r6, #1
 801df22:	f104 041c 	add.w	r4, r4, #28
 801df26:	f100 80a7 	bmi.w	801e078 <ai_platform_network_process+0x274>
 801df2a:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 801df2e:	1a9b      	subs	r3, r3, r2
 801df30:	4419      	add	r1, r3
 801df32:	6081      	str	r1, [r0, #8]
 801df34:	69ab      	ldr	r3, [r5, #24]
 801df36:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801df3a:	60da      	str	r2, [r3, #12]
 801df3c:	f8b9 3000 	ldrh.w	r3, [r9]
 801df40:	42b3      	cmp	r3, r6
 801df42:	d888      	bhi.n	801de56 <ai_platform_network_process+0x52>
 801df44:	e9dd 7802 	ldrd	r7, r8, [sp, #8]
 801df48:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801df4a:	f1b8 0f00 	cmp.w	r8, #0
 801df4e:	f000 80b5 	beq.w	801e0bc <ai_platform_network_process+0x2b8>
 801df52:	2b01      	cmp	r3, #1
 801df54:	f240 80a5 	bls.w	801e0a2 <ai_platform_network_process+0x29e>
 801df58:	f8d7 9034 	ldr.w	r9, [r7, #52]	@ 0x34
 801df5c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801df60:	2b00      	cmp	r3, #0
 801df62:	f000 809e 	beq.w	801e0a2 <ai_platform_network_process+0x29e>
 801df66:	4645      	mov	r5, r8
 801df68:	2600      	movs	r6, #0
 801df6a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801df6e:	2b00      	cmp	r3, #0
 801df70:	f000 80a3 	beq.w	801e0ba <ai_platform_network_process+0x2b6>
 801df74:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
 801df78:	2c00      	cmp	r4, #0
 801df7a:	f000 809e 	beq.w	801e0ba <ai_platform_network_process+0x2b6>
 801df7e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801df82:	f8d3 a000 	ldr.w	sl, [r3]
 801df86:	0133      	lsls	r3, r6, #4
 801df88:	eb1a 1806 	adds.w	r8, sl, r6, lsl #4
 801df8c:	9301      	str	r3, [sp, #4]
 801df8e:	f000 8140 	beq.w	801e212 <ai_platform_network_process+0x40e>
 801df92:	69a3      	ldr	r3, [r4, #24]
 801df94:	2101      	movs	r1, #1
 801df96:	685b      	ldr	r3, [r3, #4]
 801df98:	9301      	str	r3, [sp, #4]
 801df9a:	4628      	mov	r0, r5
 801df9c:	f7ff fc20 	bl	801d7e0 <ai_buffer_get_size>
 801dfa0:	9b01      	ldr	r3, [sp, #4]
 801dfa2:	4283      	cmp	r3, r0
 801dfa4:	d37d      	bcc.n	801e0a2 <ai_platform_network_process+0x29e>
 801dfa6:	68e0      	ldr	r0, [r4, #12]
 801dfa8:	69a9      	ldr	r1, [r5, #24]
 801dfaa:	68c2      	ldr	r2, [r0, #12]
 801dfac:	68cb      	ldr	r3, [r1, #12]
 801dfae:	429a      	cmp	r2, r3
 801dfb0:	d177      	bne.n	801e0a2 <ai_platform_network_process+0x29e>
 801dfb2:	6882      	ldr	r2, [r0, #8]
 801dfb4:	688b      	ldr	r3, [r1, #8]
 801dfb6:	429a      	cmp	r2, r3
 801dfb8:	d173      	bne.n	801e0a2 <ai_platform_network_process+0x29e>
 801dfba:	6842      	ldr	r2, [r0, #4]
 801dfbc:	684b      	ldr	r3, [r1, #4]
 801dfbe:	429a      	cmp	r2, r3
 801dfc0:	d16f      	bne.n	801e0a2 <ai_platform_network_process+0x29e>
 801dfc2:	69a3      	ldr	r3, [r4, #24]
 801dfc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 801dfc8:	f001 f9a6 	bl	801f318 <ai_array_get_data_byte_size>
 801dfcc:	9001      	str	r0, [sp, #4]
 801dfce:	4620      	mov	r0, r4
 801dfd0:	f001 f9ba 	bl	801f348 <get_tensor_byte_size>
 801dfd4:	9b01      	ldr	r3, [sp, #4]
 801dfd6:	4283      	cmp	r3, r0
 801dfd8:	d363      	bcc.n	801e0a2 <ai_platform_network_process+0x29e>
 801dfda:	69a3      	ldr	r3, [r4, #24]
 801dfdc:	6818      	ldr	r0, [r3, #0]
 801dfde:	f001 f92b 	bl	801f238 <ai_array_to_buffer_fmt>
 801dfe2:	682b      	ldr	r3, [r5, #0]
 801dfe4:	4043      	eors	r3, r0
 801dfe6:	f033 437e 	bics.w	r3, r3, #4261412864	@ 0xfe000000
 801dfea:	f040 8119 	bne.w	801e220 <ai_platform_network_process+0x41c>
 801dfee:	686b      	ldr	r3, [r5, #4]
 801dff0:	2b00      	cmp	r3, #0
 801dff2:	f000 810e 	beq.w	801e212 <ai_platform_network_process+0x40e>
 801dff6:	69ab      	ldr	r3, [r5, #24]
 801dff8:	681b      	ldr	r3, [r3, #0]
 801dffa:	2b00      	cmp	r3, #0
 801dffc:	f000 8117 	beq.w	801e22e <ai_platform_network_process+0x42a>
 801e000:	459b      	cmp	fp, r3
 801e002:	4620      	mov	r0, r4
 801e004:	bf38      	it	cc
 801e006:	469b      	movcc	fp, r3
 801e008:	f001 f99e 	bl	801f348 <get_tensor_byte_size>
 801e00c:	f8c8 0008 	str.w	r0, [r8, #8]
 801e010:	69aa      	ldr	r2, [r5, #24]
 801e012:	6812      	ldr	r2, [r2, #0]
 801e014:	4603      	mov	r3, r0
 801e016:	fb02 f303 	mul.w	r3, r2, r3
 801e01a:	f8c8 300c 	str.w	r3, [r8, #12]
 801e01e:	6869      	ldr	r1, [r5, #4]
 801e020:	f8c8 1004 	str.w	r1, [r8, #4]
 801e024:	0132      	lsls	r2, r6, #4
 801e026:	440b      	add	r3, r1
 801e028:	f84a 3002 	str.w	r3, [sl, r2]
 801e02c:	69a0      	ldr	r0, [r4, #24]
 801e02e:	6803      	ldr	r3, [r0, #0]
 801e030:	009b      	lsls	r3, r3, #2
 801e032:	f106 0601 	add.w	r6, r6, #1
 801e036:	f105 051c 	add.w	r5, r5, #28
 801e03a:	d439      	bmi.n	801e0b0 <ai_platform_network_process+0x2ac>
 801e03c:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 801e040:	1a9b      	subs	r3, r3, r2
 801e042:	4419      	add	r1, r3
 801e044:	6081      	str	r1, [r0, #8]
 801e046:	69a3      	ldr	r3, [r4, #24]
 801e048:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801e04c:	60da      	str	r2, [r3, #12]
 801e04e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801e052:	429e      	cmp	r6, r3
 801e054:	d389      	bcc.n	801df6a <ai_platform_network_process+0x166>
 801e056:	e030      	b.n	801e0ba <ai_platform_network_process+0x2b6>
 801e058:	693a      	ldr	r2, [r7, #16]
 801e05a:	61bb      	str	r3, [r7, #24]
 801e05c:	f002 0203 	and.w	r2, r2, #3
 801e060:	2a03      	cmp	r2, #3
 801e062:	d10f      	bne.n	801e084 <ai_platform_network_process+0x280>
 801e064:	2217      	movs	r2, #23
 801e066:	2112      	movs	r1, #18
 801e068:	f107 000c 	add.w	r0, r7, #12
 801e06c:	f000 f8ee 	bl	801e24c <core_set_error>
 801e070:	2000      	movs	r0, #0
 801e072:	b005      	add	sp, #20
 801e074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e078:	f8b9 3000 	ldrh.w	r3, [r9]
 801e07c:	429e      	cmp	r6, r3
 801e07e:	f4ff aeea 	bcc.w	801de56 <ai_platform_network_process+0x52>
 801e082:	e75f      	b.n	801df44 <ai_platform_network_process+0x140>
 801e084:	2230      	movs	r2, #48	@ 0x30
 801e086:	2111      	movs	r1, #17
 801e088:	f107 000c 	add.w	r0, r7, #12
 801e08c:	f000 f8de 	bl	801e24c <core_set_error>
 801e090:	e7ee      	b.n	801e070 <ai_platform_network_process+0x26c>
 801e092:	9f02      	ldr	r7, [sp, #8]
 801e094:	2218      	movs	r2, #24
 801e096:	2112      	movs	r1, #18
 801e098:	f107 000c 	add.w	r0, r7, #12
 801e09c:	f000 f8d6 	bl	801e24c <core_set_error>
 801e0a0:	e7e6      	b.n	801e070 <ai_platform_network_process+0x26c>
 801e0a2:	2218      	movs	r2, #24
 801e0a4:	2113      	movs	r1, #19
 801e0a6:	f107 000c 	add.w	r0, r7, #12
 801e0aa:	f000 f8cf 	bl	801e24c <core_set_error>
 801e0ae:	e7df      	b.n	801e070 <ai_platform_network_process+0x26c>
 801e0b0:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 801e0b4:	429e      	cmp	r6, r3
 801e0b6:	f4ff af58 	bcc.w	801df6a <ai_platform_network_process+0x166>
 801e0ba:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801e0bc:	fa1f fb8b 	uxth.w	fp, fp
 801e0c0:	f8a7 b018 	strh.w	fp, [r7, #24]
 801e0c4:	2b00      	cmp	r3, #0
 801e0c6:	f000 808c 	beq.w	801e1e2 <ai_platform_network_process+0x3de>
 801e0ca:	2b01      	cmp	r3, #1
 801e0cc:	6b7e      	ldr	r6, [r7, #52]	@ 0x34
 801e0ce:	f000 808b 	beq.w	801e1e8 <ai_platform_network_process+0x3e4>
 801e0d2:	f106 080c 	add.w	r8, r6, #12
 801e0d6:	8b78      	ldrh	r0, [r7, #26]
 801e0d8:	4583      	cmp	fp, r0
 801e0da:	d9ca      	bls.n	801e072 <ai_platform_network_process+0x26e>
 801e0dc:	4645      	mov	r5, r8
 801e0de:	46bb      	mov	fp, r7
 801e0e0:	f04f 0800 	mov.w	r8, #0
 801e0e4:	b9ae      	cbnz	r6, 801e112 <ai_platform_network_process+0x30e>
 801e0e6:	e02d      	b.n	801e144 <ai_platform_network_process+0x340>
 801e0e8:	a1c00100 	.word	0xa1c00100
 801e0ec:	68df      	ldr	r7, [r3, #12]
 801e0ee:	1bc9      	subs	r1, r1, r7
 801e0f0:	4408      	add	r0, r1
 801e0f2:	6098      	str	r0, [r3, #8]
 801e0f4:	6993      	ldr	r3, [r2, #24]
 801e0f6:	6862      	ldr	r2, [r4, #4]
 801e0f8:	60da      	str	r2, [r3, #12]
 801e0fa:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 801e0fe:	f859 200a 	ldr.w	r2, [r9, sl]
 801e102:	440b      	add	r3, r1
 801e104:	4293      	cmp	r3, r2
 801e106:	bf24      	itt	cs
 801e108:	68e3      	ldrcs	r3, [r4, #12]
 801e10a:	1ad3      	subcs	r3, r2, r3
 801e10c:	6063      	str	r3, [r4, #4]
 801e10e:	f108 0801 	add.w	r8, r8, #1
 801e112:	8833      	ldrh	r3, [r6, #0]
 801e114:	4543      	cmp	r3, r8
 801e116:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 801e11a:	d913      	bls.n	801e144 <ai_platform_network_process+0x340>
 801e11c:	6873      	ldr	r3, [r6, #4]
 801e11e:	b18b      	cbz	r3, 801e144 <ai_platform_network_process+0x340>
 801e120:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
 801e124:	b172      	cbz	r2, 801e144 <ai_platform_network_process+0x340>
 801e126:	68b1      	ldr	r1, [r6, #8]
 801e128:	6993      	ldr	r3, [r2, #24]
 801e12a:	f8d1 9000 	ldr.w	r9, [r1]
 801e12e:	681f      	ldr	r7, [r3, #0]
 801e130:	6899      	ldr	r1, [r3, #8]
 801e132:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 801e136:	00bf      	lsls	r7, r7, #2
 801e138:	6860      	ldr	r0, [r4, #4]
 801e13a:	d5d7      	bpl.n	801e0ec <ai_platform_network_process+0x2e8>
 801e13c:	68a2      	ldr	r2, [r4, #8]
 801e13e:	f000 ffdd 	bl	801f0fc <st_int8_copy>
 801e142:	e7da      	b.n	801e0fa <ai_platform_network_process+0x2f6>
 801e144:	4658      	mov	r0, fp
 801e146:	f000 f8e5 	bl	801e314 <ai_layers_forward_all>
 801e14a:	2400      	movs	r4, #0
 801e14c:	b9b5      	cbnz	r5, 801e17c <ai_platform_network_process+0x378>
 801e14e:	e03b      	b.n	801e1c8 <ai_platform_network_process+0x3c4>
 801e150:	f859 300a 	ldr.w	r3, [r9, sl]
 801e154:	eb01 020c 	add.w	r2, r1, ip
 801e158:	429a      	cmp	r2, r3
 801e15a:	bf24      	itt	cs
 801e15c:	f8d8 200c 	ldrcs.w	r2, [r8, #12]
 801e160:	1a9a      	subcs	r2, r3, r2
 801e162:	f8c8 2004 	str.w	r2, [r8, #4]
 801e166:	6981      	ldr	r1, [r0, #24]
 801e168:	e9d1 3702 	ldrd	r3, r7, [r1, #8]
 801e16c:	1bdb      	subs	r3, r3, r7
 801e16e:	441a      	add	r2, r3
 801e170:	608a      	str	r2, [r1, #8]
 801e172:	6983      	ldr	r3, [r0, #24]
 801e174:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801e178:	60da      	str	r2, [r3, #12]
 801e17a:	3401      	adds	r4, #1
 801e17c:	882b      	ldrh	r3, [r5, #0]
 801e17e:	42a3      	cmp	r3, r4
 801e180:	d922      	bls.n	801e1c8 <ai_platform_network_process+0x3c4>
 801e182:	686b      	ldr	r3, [r5, #4]
 801e184:	b303      	cbz	r3, 801e1c8 <ai_platform_network_process+0x3c4>
 801e186:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801e18a:	b1e8      	cbz	r0, 801e1c8 <ai_platform_network_process+0x3c4>
 801e18c:	68ab      	ldr	r3, [r5, #8]
 801e18e:	6982      	ldr	r2, [r0, #24]
 801e190:	f8d3 9000 	ldr.w	r9, [r3]
 801e194:	6813      	ldr	r3, [r2, #0]
 801e196:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 801e19a:	009b      	lsls	r3, r3, #2
 801e19c:	e9d8 1c01 	ldrd	r1, ip, [r8, #4]
 801e1a0:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 801e1a4:	d5d4      	bpl.n	801e150 <ai_platform_network_process+0x34c>
 801e1a6:	6890      	ldr	r0, [r2, #8]
 801e1a8:	4662      	mov	r2, ip
 801e1aa:	f000 ffa7 	bl	801f0fc <st_int8_copy>
 801e1ae:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 801e1b2:	f859 200a 	ldr.w	r2, [r9, sl]
 801e1b6:	440b      	add	r3, r1
 801e1b8:	4293      	cmp	r3, r2
 801e1ba:	bf24      	itt	cs
 801e1bc:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 801e1c0:	1ad3      	subcs	r3, r2, r3
 801e1c2:	f8c8 3004 	str.w	r3, [r8, #4]
 801e1c6:	e7d8      	b.n	801e17a <ai_platform_network_process+0x376>
 801e1c8:	f8bb 001a 	ldrh.w	r0, [fp, #26]
 801e1cc:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 801e1d0:	3001      	adds	r0, #1
 801e1d2:	b280      	uxth	r0, r0
 801e1d4:	4283      	cmp	r3, r0
 801e1d6:	f8ab 001a 	strh.w	r0, [fp, #26]
 801e1da:	d881      	bhi.n	801e0e0 <ai_platform_network_process+0x2dc>
 801e1dc:	b005      	add	sp, #20
 801e1de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e1e2:	461e      	mov	r6, r3
 801e1e4:	4698      	mov	r8, r3
 801e1e6:	e776      	b.n	801e0d6 <ai_platform_network_process+0x2d2>
 801e1e8:	f04f 0800 	mov.w	r8, #0
 801e1ec:	e773      	b.n	801e0d6 <ai_platform_network_process+0x2d2>
 801e1ee:	9f02      	ldr	r7, [sp, #8]
 801e1f0:	e738      	b.n	801e064 <ai_platform_network_process+0x260>
 801e1f2:	9f02      	ldr	r7, [sp, #8]
 801e1f4:	2221      	movs	r2, #33	@ 0x21
 801e1f6:	2112      	movs	r1, #18
 801e1f8:	f107 000c 	add.w	r0, r7, #12
 801e1fc:	f000 f826 	bl	801e24c <core_set_error>
 801e200:	e736      	b.n	801e070 <ai_platform_network_process+0x26c>
 801e202:	9f02      	ldr	r7, [sp, #8]
 801e204:	2219      	movs	r2, #25
 801e206:	2112      	movs	r1, #18
 801e208:	f107 000c 	add.w	r0, r7, #12
 801e20c:	f000 f81e 	bl	801e24c <core_set_error>
 801e210:	e72e      	b.n	801e070 <ai_platform_network_process+0x26c>
 801e212:	2217      	movs	r2, #23
 801e214:	2113      	movs	r1, #19
 801e216:	f107 000c 	add.w	r0, r7, #12
 801e21a:	f000 f817 	bl	801e24c <core_set_error>
 801e21e:	e727      	b.n	801e070 <ai_platform_network_process+0x26c>
 801e220:	2219      	movs	r2, #25
 801e222:	2113      	movs	r1, #19
 801e224:	f107 000c 	add.w	r0, r7, #12
 801e228:	f000 f810 	bl	801e24c <core_set_error>
 801e22c:	e720      	b.n	801e070 <ai_platform_network_process+0x26c>
 801e22e:	2221      	movs	r2, #33	@ 0x21
 801e230:	2113      	movs	r1, #19
 801e232:	f107 000c 	add.w	r0, r7, #12
 801e236:	f000 f809 	bl	801e24c <core_set_error>
 801e23a:	e719      	b.n	801e070 <ai_platform_network_process+0x26c>

0801e23c <core_init>:
 801e23c:	2001      	movs	r0, #1
 801e23e:	4770      	bx	lr

0801e240 <core_get_error>:
 801e240:	4603      	mov	r3, r0
 801e242:	2200      	movs	r2, #0
 801e244:	6800      	ldr	r0, [r0, #0]
 801e246:	601a      	str	r2, [r3, #0]
 801e248:	4770      	bx	lr
 801e24a:	bf00      	nop

0801e24c <core_set_error>:
 801e24c:	4603      	mov	r3, r0
 801e24e:	7800      	ldrb	r0, [r0, #0]
 801e250:	b108      	cbz	r0, 801e256 <core_set_error+0xa>
 801e252:	2000      	movs	r0, #0
 801e254:	4770      	bx	lr
 801e256:	7019      	strb	r1, [r3, #0]
 801e258:	6819      	ldr	r1, [r3, #0]
 801e25a:	f362 211f 	bfi	r1, r2, #8, #24
 801e25e:	2001      	movs	r0, #1
 801e260:	6019      	str	r1, [r3, #0]
 801e262:	4770      	bx	lr

0801e264 <ai_check_custom_types>:
 801e264:	b082      	sub	sp, #8
 801e266:	4b13      	ldr	r3, [pc, #76]	@ (801e2b4 <ai_check_custom_types+0x50>)
 801e268:	9301      	str	r3, [sp, #4]
 801e26a:	b118      	cbz	r0, 801e274 <ai_check_custom_types+0x10>
 801e26c:	7803      	ldrb	r3, [r0, #0]
 801e26e:	2b03      	cmp	r3, #3
 801e270:	d002      	beq.n	801e278 <ai_check_custom_types+0x14>
 801e272:	2000      	movs	r0, #0
 801e274:	b002      	add	sp, #8
 801e276:	4770      	bx	lr
 801e278:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801e27c:	4293      	cmp	r3, r2
 801e27e:	d004      	beq.n	801e28a <ai_check_custom_types+0x26>
 801e280:	2001      	movs	r0, #1
 801e282:	f080 0001 	eor.w	r0, r0, #1
 801e286:	b002      	add	sp, #8
 801e288:	4770      	bx	lr
 801e28a:	7842      	ldrb	r2, [r0, #1]
 801e28c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801e290:	429a      	cmp	r2, r3
 801e292:	f100 0001 	add.w	r0, r0, #1
 801e296:	d1f3      	bne.n	801e280 <ai_check_custom_types+0x1c>
 801e298:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 801e29c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801e2a0:	429a      	cmp	r2, r3
 801e2a2:	d1ed      	bne.n	801e280 <ai_check_custom_types+0x1c>
 801e2a4:	7842      	ldrb	r2, [r0, #1]
 801e2a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801e2aa:	429a      	cmp	r2, r3
 801e2ac:	d1e8      	bne.n	801e280 <ai_check_custom_types+0x1c>
 801e2ae:	2000      	movs	r0, #0
 801e2b0:	e7e7      	b.n	801e282 <ai_check_custom_types+0x1e>
 801e2b2:	bf00      	nop
 801e2b4:	84048403 	.word	0x84048403

0801e2b8 <ai_layers_init_all>:
 801e2b8:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801e2ba:	4601      	mov	r1, r0
 801e2bc:	b153      	cbz	r3, 801e2d4 <ai_layers_init_all+0x1c>
 801e2be:	2000      	movs	r0, #0
 801e2c0:	461a      	mov	r2, r3
 801e2c2:	60d9      	str	r1, [r3, #12]
 801e2c4:	691b      	ldr	r3, [r3, #16]
 801e2c6:	4293      	cmp	r3, r2
 801e2c8:	f100 0001 	add.w	r0, r0, #1
 801e2cc:	d003      	beq.n	801e2d6 <ai_layers_init_all+0x1e>
 801e2ce:	2b00      	cmp	r3, #0
 801e2d0:	d1f6      	bne.n	801e2c0 <ai_layers_init_all+0x8>
 801e2d2:	4770      	bx	lr
 801e2d4:	4618      	mov	r0, r3
 801e2d6:	4770      	bx	lr

0801e2d8 <ai_layers_post_init_all>:
 801e2d8:	b538      	push	{r3, r4, r5, lr}
 801e2da:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 801e2dc:	b1b4      	cbz	r4, 801e30c <ai_layers_post_init_all+0x34>
 801e2de:	6863      	ldr	r3, [r4, #4]
 801e2e0:	07db      	lsls	r3, r3, #31
 801e2e2:	f04f 0500 	mov.w	r5, #0
 801e2e6:	d504      	bpl.n	801e2f2 <ai_layers_post_init_all+0x1a>
 801e2e8:	6a23      	ldr	r3, [r4, #32]
 801e2ea:	4620      	mov	r0, r4
 801e2ec:	b10b      	cbz	r3, 801e2f2 <ai_layers_post_init_all+0x1a>
 801e2ee:	4798      	blx	r3
 801e2f0:	3501      	adds	r5, #1
 801e2f2:	6923      	ldr	r3, [r4, #16]
 801e2f4:	42a3      	cmp	r3, r4
 801e2f6:	d007      	beq.n	801e308 <ai_layers_post_init_all+0x30>
 801e2f8:	b133      	cbz	r3, 801e308 <ai_layers_post_init_all+0x30>
 801e2fa:	461c      	mov	r4, r3
 801e2fc:	6863      	ldr	r3, [r4, #4]
 801e2fe:	07db      	lsls	r3, r3, #31
 801e300:	d4f2      	bmi.n	801e2e8 <ai_layers_post_init_all+0x10>
 801e302:	6923      	ldr	r3, [r4, #16]
 801e304:	42a3      	cmp	r3, r4
 801e306:	d1f7      	bne.n	801e2f8 <ai_layers_post_init_all+0x20>
 801e308:	4628      	mov	r0, r5
 801e30a:	bd38      	pop	{r3, r4, r5, pc}
 801e30c:	4625      	mov	r5, r4
 801e30e:	4628      	mov	r0, r5
 801e310:	bd38      	pop	{r3, r4, r5, pc}
 801e312:	bf00      	nop

0801e314 <ai_layers_forward_all>:
 801e314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e318:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 801e31c:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 801e31e:	63c5      	str	r5, [r0, #60]	@ 0x3c
 801e320:	4604      	mov	r4, r0
 801e322:	f1b8 0f00 	cmp.w	r8, #0
 801e326:	d02a      	beq.n	801e37e <ai_layers_forward_all+0x6a>
 801e328:	b32d      	cbz	r5, 801e376 <ai_layers_forward_all+0x62>
 801e32a:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 801e32c:	4629      	mov	r1, r5
 801e32e:	2001      	movs	r0, #1
 801e330:	47c0      	blx	r8
 801e332:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 801e334:	b1fe      	cbz	r6, 801e376 <ai_layers_forward_all+0x62>
 801e336:	2700      	movs	r7, #0
 801e338:	4631      	mov	r1, r6
 801e33a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 801e33c:	2002      	movs	r0, #2
 801e33e:	47c0      	blx	r8
 801e340:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 801e342:	4628      	mov	r0, r5
 801e344:	696b      	ldr	r3, [r5, #20]
 801e346:	4798      	blx	r3
 801e348:	692e      	ldr	r6, [r5, #16]
 801e34a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 801e34c:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 801e34e:	42b5      	cmp	r5, r6
 801e350:	f04f 0003 	mov.w	r0, #3
 801e354:	d007      	beq.n	801e366 <ai_layers_forward_all+0x52>
 801e356:	47c0      	blx	r8
 801e358:	3701      	adds	r7, #1
 801e35a:	63e6      	str	r6, [r4, #60]	@ 0x3c
 801e35c:	2e00      	cmp	r6, #0
 801e35e:	d1eb      	bne.n	801e338 <ai_layers_forward_all+0x24>
 801e360:	4638      	mov	r0, r7
 801e362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e366:	2003      	movs	r0, #3
 801e368:	47c0      	blx	r8
 801e36a:	2300      	movs	r3, #0
 801e36c:	3701      	adds	r7, #1
 801e36e:	63e3      	str	r3, [r4, #60]	@ 0x3c
 801e370:	4638      	mov	r0, r7
 801e372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e376:	2700      	movs	r7, #0
 801e378:	4638      	mov	r0, r7
 801e37a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e37e:	2d00      	cmp	r5, #0
 801e380:	d0f9      	beq.n	801e376 <ai_layers_forward_all+0x62>
 801e382:	4647      	mov	r7, r8
 801e384:	696b      	ldr	r3, [r5, #20]
 801e386:	4628      	mov	r0, r5
 801e388:	4798      	blx	r3
 801e38a:	462b      	mov	r3, r5
 801e38c:	692d      	ldr	r5, [r5, #16]
 801e38e:	429d      	cmp	r5, r3
 801e390:	d004      	beq.n	801e39c <ai_layers_forward_all+0x88>
 801e392:	63e5      	str	r5, [r4, #60]	@ 0x3c
 801e394:	3701      	adds	r7, #1
 801e396:	2d00      	cmp	r5, #0
 801e398:	d1f4      	bne.n	801e384 <ai_layers_forward_all+0x70>
 801e39a:	e7e1      	b.n	801e360 <ai_layers_forward_all+0x4c>
 801e39c:	2300      	movs	r3, #0
 801e39e:	63e3      	str	r3, [r4, #60]	@ 0x3c
 801e3a0:	3701      	adds	r7, #1
 801e3a2:	e7dd      	b.n	801e360 <ai_layers_forward_all+0x4c>

0801e3a4 <forward_dense>:
 801e3a4:	6982      	ldr	r2, [r0, #24]
 801e3a6:	8813      	ldrh	r3, [r2, #0]
 801e3a8:	b90b      	cbnz	r3, 801e3ae <forward_dense+0xa>
 801e3aa:	685b      	ldr	r3, [r3, #4]
 801e3ac:	deff      	udf	#255	@ 0xff
 801e3ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e3b2:	6857      	ldr	r7, [r2, #4]
 801e3b4:	6878      	ldr	r0, [r7, #4]
 801e3b6:	b08f      	sub	sp, #60	@ 0x3c
 801e3b8:	b100      	cbz	r0, 801e3bc <forward_dense+0x18>
 801e3ba:	6800      	ldr	r0, [r0, #0]
 801e3bc:	2b01      	cmp	r3, #1
 801e3be:	d05d      	beq.n	801e47c <forward_dense+0xd8>
 801e3c0:	693a      	ldr	r2, [r7, #16]
 801e3c2:	b102      	cbz	r2, 801e3c6 <forward_dense+0x22>
 801e3c4:	6812      	ldr	r2, [r2, #0]
 801e3c6:	2b02      	cmp	r3, #2
 801e3c8:	d032      	beq.n	801e430 <forward_dense+0x8c>
 801e3ca:	69fd      	ldr	r5, [r7, #28]
 801e3cc:	2d00      	cmp	r5, #0
 801e3ce:	d053      	beq.n	801e478 <forward_dense+0xd4>
 801e3d0:	8b3c      	ldrh	r4, [r7, #24]
 801e3d2:	6829      	ldr	r1, [r5, #0]
 801e3d4:	2c01      	cmp	r4, #1
 801e3d6:	d954      	bls.n	801e482 <forward_dense+0xde>
 801e3d8:	686d      	ldr	r5, [r5, #4]
 801e3da:	698e      	ldr	r6, [r1, #24]
 801e3dc:	68c4      	ldr	r4, [r0, #12]
 801e3de:	68d1      	ldr	r1, [r2, #12]
 801e3e0:	f8d4 e004 	ldr.w	lr, [r4, #4]
 801e3e4:	f8d1 9004 	ldr.w	r9, [r1, #4]
 801e3e8:	e9d1 4c02 	ldrd	r4, ip, [r1, #8]
 801e3ec:	6831      	ldr	r1, [r6, #0]
 801e3ee:	2b03      	cmp	r3, #3
 801e3f0:	fb0c f804 	mul.w	r8, ip, r4
 801e3f4:	f021 4c7e 	bic.w	ip, r1, #4261412864	@ 0xfe000000
 801e3f8:	d045      	beq.n	801e486 <forward_dense+0xe2>
 801e3fa:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 801e3fc:	b11c      	cbz	r4, 801e406 <forward_dense+0x62>
 801e3fe:	6824      	ldr	r4, [r4, #0]
 801e400:	b10c      	cbz	r4, 801e406 <forward_dense+0x62>
 801e402:	69a3      	ldr	r3, [r4, #24]
 801e404:	689c      	ldr	r4, [r3, #8]
 801e406:	6983      	ldr	r3, [r0, #24]
 801e408:	6992      	ldr	r2, [r2, #24]
 801e40a:	6899      	ldr	r1, [r3, #8]
 801e40c:	6890      	ldr	r0, [r2, #8]
 801e40e:	b10d      	cbz	r5, 801e414 <forward_dense+0x70>
 801e410:	69ab      	ldr	r3, [r5, #24]
 801e412:	689d      	ldr	r5, [r3, #8]
 801e414:	4f1d      	ldr	r7, [pc, #116]	@ (801e48c <forward_dense+0xe8>)
 801e416:	45bc      	cmp	ip, r7
 801e418:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
 801e41c:	d022      	beq.n	801e464 <forward_dense+0xc0>
 801e41e:	4e1c      	ldr	r6, [pc, #112]	@ (801e490 <forward_dense+0xec>)
 801e420:	45b4      	cmp	ip, r6
 801e422:	d015      	beq.n	801e450 <forward_dense+0xac>
 801e424:	4b1b      	ldr	r3, [pc, #108]	@ (801e494 <forward_dense+0xf0>)
 801e426:	459c      	cmp	ip, r3
 801e428:	d005      	beq.n	801e436 <forward_dense+0x92>
 801e42a:	b00f      	add	sp, #60	@ 0x3c
 801e42c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e430:	2300      	movs	r3, #0
 801e432:	685b      	ldr	r3, [r3, #4]
 801e434:	deff      	udf	#255	@ 0xff
 801e436:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801e43a:	a807      	add	r0, sp, #28
 801e43c:	e9cd 5e0a 	strd	r5, lr, [sp, #40]	@ 0x28
 801e440:	e9cd 980c 	strd	r9, r8, [sp, #48]	@ 0x30
 801e444:	9209      	str	r2, [sp, #36]	@ 0x24
 801e446:	f000 f965 	bl	801e714 <forward_lite_dense_if32of32wf32>
 801e44a:	b00f      	add	sp, #60	@ 0x3c
 801e44c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e450:	e9cd 9803 	strd	r9, r8, [sp, #12]
 801e454:	e9cd 5e01 	strd	r5, lr, [sp, #4]
 801e458:	9400      	str	r4, [sp, #0]
 801e45a:	f000 fb35 	bl	801eac8 <forward_lite_dense_if32of32wf32_lut4>
 801e45e:	b00f      	add	sp, #60	@ 0x3c
 801e460:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e464:	e9cd 9803 	strd	r9, r8, [sp, #12]
 801e468:	e9cd 5e01 	strd	r5, lr, [sp, #4]
 801e46c:	9400      	str	r4, [sp, #0]
 801e46e:	f000 fca7 	bl	801edc0 <forward_lite_dense_if32of32wf32_lut8>
 801e472:	b00f      	add	sp, #60	@ 0x3c
 801e474:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e478:	4629      	mov	r1, r5
 801e47a:	e7ae      	b.n	801e3da <forward_dense+0x36>
 801e47c:	2300      	movs	r3, #0
 801e47e:	685b      	ldr	r3, [r3, #4]
 801e480:	deff      	udf	#255	@ 0xff
 801e482:	2500      	movs	r5, #0
 801e484:	e7a9      	b.n	801e3da <forward_dense+0x36>
 801e486:	2300      	movs	r3, #0
 801e488:	685b      	ldr	r3, [r3, #4]
 801e48a:	deff      	udf	#255	@ 0xff
 801e48c:	00d01040 	.word	0x00d01040
 801e490:	00f01040 	.word	0x00f01040
 801e494:	00821040 	.word	0x00821040

0801e498 <forward_sigmoid>:
 801e498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e49a:	6982      	ldr	r2, [r0, #24]
 801e49c:	8813      	ldrh	r3, [r2, #0]
 801e49e:	2b00      	cmp	r3, #0
 801e4a0:	d038      	beq.n	801e514 <forward_sigmoid+0x7c>
 801e4a2:	6852      	ldr	r2, [r2, #4]
 801e4a4:	6854      	ldr	r4, [r2, #4]
 801e4a6:	b104      	cbz	r4, 801e4aa <forward_sigmoid+0x12>
 801e4a8:	6824      	ldr	r4, [r4, #0]
 801e4aa:	2b01      	cmp	r3, #1
 801e4ac:	d031      	beq.n	801e512 <forward_sigmoid+0x7a>
 801e4ae:	6915      	ldr	r5, [r2, #16]
 801e4b0:	b105      	cbz	r5, 801e4b4 <forward_sigmoid+0x1c>
 801e4b2:	682d      	ldr	r5, [r5, #0]
 801e4b4:	68a3      	ldr	r3, [r4, #8]
 801e4b6:	0a1b      	lsrs	r3, r3, #8
 801e4b8:	d02e      	beq.n	801e518 <forward_sigmoid+0x80>
 801e4ba:	68e0      	ldr	r0, [r4, #12]
 801e4bc:	2201      	movs	r2, #1
 801e4be:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801e4c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801e4c6:	4298      	cmp	r0, r3
 801e4c8:	fb01 f202 	mul.w	r2, r1, r2
 801e4cc:	d1f9      	bne.n	801e4c2 <forward_sigmoid+0x2a>
 801e4ce:	69a7      	ldr	r7, [r4, #24]
 801e4d0:	69a9      	ldr	r1, [r5, #24]
 801e4d2:	68bb      	ldr	r3, [r7, #8]
 801e4d4:	688d      	ldr	r5, [r1, #8]
 801e4d6:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 801e4da:	3a01      	subs	r2, #1
 801e4dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801e4e0:	42a3      	cmp	r3, r4
 801e4e2:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 801e4e6:	d813      	bhi.n	801e510 <forward_sigmoid+0x78>
 801e4e8:	f04f 567e 	mov.w	r6, #1065353216	@ 0x3f800000
 801e4ec:	f854 0904 	ldr.w	r0, [r4], #-4
 801e4f0:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 801e4f4:	f001 fec4 	bl	8020280 <expf>
 801e4f8:	4631      	mov	r1, r6
 801e4fa:	f7e2 f90b 	bl	8000714 <__addsf3>
 801e4fe:	4601      	mov	r1, r0
 801e500:	4630      	mov	r0, r6
 801e502:	f7e2 fac3 	bl	8000a8c <__aeabi_fdiv>
 801e506:	f845 0904 	str.w	r0, [r5], #-4
 801e50a:	68bb      	ldr	r3, [r7, #8]
 801e50c:	42a3      	cmp	r3, r4
 801e50e:	d9ed      	bls.n	801e4ec <forward_sigmoid+0x54>
 801e510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e512:	2300      	movs	r3, #0
 801e514:	685b      	ldr	r3, [r3, #4]
 801e516:	deff      	udf	#255	@ 0xff
 801e518:	69a7      	ldr	r7, [r4, #24]
 801e51a:	69ab      	ldr	r3, [r5, #24]
 801e51c:	68bc      	ldr	r4, [r7, #8]
 801e51e:	689d      	ldr	r5, [r3, #8]
 801e520:	e7e2      	b.n	801e4e8 <forward_sigmoid+0x50>
 801e522:	bf00      	nop

0801e524 <forward_relu>:
 801e524:	6982      	ldr	r2, [r0, #24]
 801e526:	8813      	ldrh	r3, [r2, #0]
 801e528:	b90b      	cbnz	r3, 801e52e <forward_relu+0xa>
 801e52a:	685b      	ldr	r3, [r3, #4]
 801e52c:	deff      	udf	#255	@ 0xff
 801e52e:	6852      	ldr	r2, [r2, #4]
 801e530:	6851      	ldr	r1, [r2, #4]
 801e532:	b101      	cbz	r1, 801e536 <forward_relu+0x12>
 801e534:	6809      	ldr	r1, [r1, #0]
 801e536:	2b01      	cmp	r3, #1
 801e538:	d07a      	beq.n	801e630 <forward_relu+0x10c>
 801e53a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e53e:	6913      	ldr	r3, [r2, #16]
 801e540:	b103      	cbz	r3, 801e544 <forward_relu+0x20>
 801e542:	681b      	ldr	r3, [r3, #0]
 801e544:	699c      	ldr	r4, [r3, #24]
 801e546:	698a      	ldr	r2, [r1, #24]
 801e548:	688b      	ldr	r3, [r1, #8]
 801e54a:	69c6      	ldr	r6, [r0, #28]
 801e54c:	68a4      	ldr	r4, [r4, #8]
 801e54e:	6895      	ldr	r5, [r2, #8]
 801e550:	f3c3 2317 	ubfx	r3, r3, #8, #24
 801e554:	b1ae      	cbz	r6, 801e582 <forward_relu+0x5e>
 801e556:	6872      	ldr	r2, [r6, #4]
 801e558:	2a01      	cmp	r2, #1
 801e55a:	d037      	beq.n	801e5cc <forward_relu+0xa8>
 801e55c:	2b00      	cmp	r3, #0
 801e55e:	d05e      	beq.n	801e61e <forward_relu+0xfa>
 801e560:	68c8      	ldr	r0, [r1, #12]
 801e562:	2201      	movs	r2, #1
 801e564:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801e568:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801e56c:	4298      	cmp	r0, r3
 801e56e:	fb01 f202 	mul.w	r2, r1, r2
 801e572:	d1f9      	bne.n	801e568 <forward_relu+0x44>
 801e574:	68b3      	ldr	r3, [r6, #8]
 801e576:	4629      	mov	r1, r5
 801e578:	4620      	mov	r0, r4
 801e57a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e57e:	f000 b85b 	b.w	801e638 <forward_lite_nl_relu_generic_if32of32_kernel>
 801e582:	2b00      	cmp	r3, #0
 801e584:	d04d      	beq.n	801e622 <forward_relu+0xfe>
 801e586:	68c8      	ldr	r0, [r1, #12]
 801e588:	2201      	movs	r2, #1
 801e58a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801e58e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801e592:	4283      	cmp	r3, r0
 801e594:	fb01 f202 	mul.w	r2, r1, r2
 801e598:	d1f9      	bne.n	801e58e <forward_relu+0x6a>
 801e59a:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 801e59e:	3a01      	subs	r2, #1
 801e5a0:	eb05 0782 	add.w	r7, r5, r2, lsl #2
 801e5a4:	42af      	cmp	r7, r5
 801e5a6:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801e5aa:	d30d      	bcc.n	801e5c8 <forward_relu+0xa4>
 801e5ac:	f04f 0800 	mov.w	r8, #0
 801e5b0:	f857 6904 	ldr.w	r6, [r7], #-4
 801e5b4:	4641      	mov	r1, r8
 801e5b6:	4630      	mov	r0, r6
 801e5b8:	f7e2 fb66 	bl	8000c88 <__aeabi_fcmpge>
 801e5bc:	b900      	cbnz	r0, 801e5c0 <forward_relu+0x9c>
 801e5be:	4646      	mov	r6, r8
 801e5c0:	42bd      	cmp	r5, r7
 801e5c2:	f844 6904 	str.w	r6, [r4], #-4
 801e5c6:	d9f3      	bls.n	801e5b0 <forward_relu+0x8c>
 801e5c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e5cc:	b35b      	cbz	r3, 801e626 <forward_relu+0x102>
 801e5ce:	68c8      	ldr	r0, [r1, #12]
 801e5d0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801e5d4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801e5d8:	4298      	cmp	r0, r3
 801e5da:	fb01 f202 	mul.w	r2, r1, r2
 801e5de:	d1f9      	bne.n	801e5d4 <forward_relu+0xb0>
 801e5e0:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 801e5e4:	3a01      	subs	r2, #1
 801e5e6:	68b3      	ldr	r3, [r6, #8]
 801e5e8:	eb05 0682 	add.w	r6, r5, r2, lsl #2
 801e5ec:	42ae      	cmp	r6, r5
 801e5ee:	f8d3 8000 	ldr.w	r8, [r3]
 801e5f2:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801e5f6:	d3e7      	bcc.n	801e5c8 <forward_relu+0xa4>
 801e5f8:	f04f 0900 	mov.w	r9, #0
 801e5fc:	f856 7904 	ldr.w	r7, [r6], #-4
 801e600:	4640      	mov	r0, r8
 801e602:	4639      	mov	r1, r7
 801e604:	f7e2 fb2c 	bl	8000c60 <__aeabi_fcmplt>
 801e608:	b120      	cbz	r0, 801e614 <forward_relu+0xf0>
 801e60a:	42b5      	cmp	r5, r6
 801e60c:	f844 7904 	str.w	r7, [r4], #-4
 801e610:	d9f4      	bls.n	801e5fc <forward_relu+0xd8>
 801e612:	e7d9      	b.n	801e5c8 <forward_relu+0xa4>
 801e614:	42b5      	cmp	r5, r6
 801e616:	f844 9904 	str.w	r9, [r4], #-4
 801e61a:	d9ef      	bls.n	801e5fc <forward_relu+0xd8>
 801e61c:	e7d4      	b.n	801e5c8 <forward_relu+0xa4>
 801e61e:	2201      	movs	r2, #1
 801e620:	e7a8      	b.n	801e574 <forward_relu+0x50>
 801e622:	462f      	mov	r7, r5
 801e624:	e7c2      	b.n	801e5ac <forward_relu+0x88>
 801e626:	68b3      	ldr	r3, [r6, #8]
 801e628:	462e      	mov	r6, r5
 801e62a:	f8d3 8000 	ldr.w	r8, [r3]
 801e62e:	e7e3      	b.n	801e5f8 <forward_relu+0xd4>
 801e630:	2300      	movs	r3, #0
 801e632:	685b      	ldr	r3, [r3, #4]
 801e634:	deff      	udf	#255	@ 0xff
 801e636:	bf00      	nop

0801e638 <forward_lite_nl_relu_generic_if32of32_kernel>:
 801e638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e63c:	f102 4480 	add.w	r4, r2, #1073741824	@ 0x40000000
 801e640:	f8d3 a008 	ldr.w	sl, [r3, #8]
 801e644:	681f      	ldr	r7, [r3, #0]
 801e646:	f8d3 9004 	ldr.w	r9, [r3, #4]
 801e64a:	3c01      	subs	r4, #1
 801e64c:	eb00 0684 	add.w	r6, r0, r4, lsl #2
 801e650:	4688      	mov	r8, r1
 801e652:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801e656:	4650      	mov	r0, sl
 801e658:	2100      	movs	r1, #0
 801e65a:	f7e2 fb01 	bl	8000c60 <__aeabi_fcmplt>
 801e65e:	bb20      	cbnz	r0, 801e6aa <forward_lite_nl_relu_generic_if32of32_kernel+0x72>
 801e660:	4544      	cmp	r4, r8
 801e662:	d210      	bcs.n	801e686 <forward_lite_nl_relu_generic_if32of32_kernel+0x4e>
 801e664:	e01f      	b.n	801e6a6 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 801e666:	f7e2 fb0f 	bl	8000c88 <__aeabi_fcmpge>
 801e66a:	4603      	mov	r3, r0
 801e66c:	4639      	mov	r1, r7
 801e66e:	4628      	mov	r0, r5
 801e670:	b12b      	cbz	r3, 801e67e <forward_lite_nl_relu_generic_if32of32_kernel+0x46>
 801e672:	f7e2 f84d 	bl	8000710 <__aeabi_fsub>
 801e676:	4649      	mov	r1, r9
 801e678:	f7e2 f954 	bl	8000924 <__aeabi_fmul>
 801e67c:	4605      	mov	r5, r0
 801e67e:	45a0      	cmp	r8, r4
 801e680:	f846 5904 	str.w	r5, [r6], #-4
 801e684:	d80f      	bhi.n	801e6a6 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 801e686:	f854 5904 	ldr.w	r5, [r4], #-4
 801e68a:	4650      	mov	r0, sl
 801e68c:	4629      	mov	r1, r5
 801e68e:	f7e2 fafb 	bl	8000c88 <__aeabi_fcmpge>
 801e692:	4603      	mov	r3, r0
 801e694:	4629      	mov	r1, r5
 801e696:	4638      	mov	r0, r7
 801e698:	2b00      	cmp	r3, #0
 801e69a:	d1e4      	bne.n	801e666 <forward_lite_nl_relu_generic_if32of32_kernel+0x2e>
 801e69c:	4655      	mov	r5, sl
 801e69e:	45a0      	cmp	r8, r4
 801e6a0:	f846 5904 	str.w	r5, [r6], #-4
 801e6a4:	d9ef      	bls.n	801e686 <forward_lite_nl_relu_generic_if32of32_kernel+0x4e>
 801e6a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e6aa:	2100      	movs	r1, #0
 801e6ac:	4648      	mov	r0, r9
 801e6ae:	f7e2 facd 	bl	8000c4c <__aeabi_fcmpeq>
 801e6b2:	b9d0      	cbnz	r0, 801e6ea <forward_lite_nl_relu_generic_if32of32_kernel+0xb2>
 801e6b4:	4544      	cmp	r4, r8
 801e6b6:	d3f6      	bcc.n	801e6a6 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 801e6b8:	f854 5904 	ldr.w	r5, [r4], #-4
 801e6bc:	4639      	mov	r1, r7
 801e6be:	4628      	mov	r0, r5
 801e6c0:	f7e2 fad8 	bl	8000c74 <__aeabi_fcmple>
 801e6c4:	4603      	mov	r3, r0
 801e6c6:	4639      	mov	r1, r7
 801e6c8:	4628      	mov	r0, r5
 801e6ca:	b14b      	cbz	r3, 801e6e0 <forward_lite_nl_relu_generic_if32of32_kernel+0xa8>
 801e6cc:	f7e2 f820 	bl	8000710 <__aeabi_fsub>
 801e6d0:	4649      	mov	r1, r9
 801e6d2:	f7e2 f927 	bl	8000924 <__aeabi_fmul>
 801e6d6:	45a0      	cmp	r8, r4
 801e6d8:	f846 0904 	str.w	r0, [r6], #-4
 801e6dc:	d9ec      	bls.n	801e6b8 <forward_lite_nl_relu_generic_if32of32_kernel+0x80>
 801e6de:	e7e2      	b.n	801e6a6 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 801e6e0:	45a0      	cmp	r8, r4
 801e6e2:	f846 5904 	str.w	r5, [r6], #-4
 801e6e6:	d9e7      	bls.n	801e6b8 <forward_lite_nl_relu_generic_if32of32_kernel+0x80>
 801e6e8:	e7dd      	b.n	801e6a6 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 801e6ea:	4544      	cmp	r4, r8
 801e6ec:	d3db      	bcc.n	801e6a6 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 801e6ee:	f04f 0900 	mov.w	r9, #0
 801e6f2:	f854 5904 	ldr.w	r5, [r4], #-4
 801e6f6:	4639      	mov	r1, r7
 801e6f8:	4628      	mov	r0, r5
 801e6fa:	f7e2 facf 	bl	8000c9c <__aeabi_fcmpgt>
 801e6fe:	b120      	cbz	r0, 801e70a <forward_lite_nl_relu_generic_if32of32_kernel+0xd2>
 801e700:	45a0      	cmp	r8, r4
 801e702:	f846 5904 	str.w	r5, [r6], #-4
 801e706:	d9f4      	bls.n	801e6f2 <forward_lite_nl_relu_generic_if32of32_kernel+0xba>
 801e708:	e7cd      	b.n	801e6a6 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>
 801e70a:	45a0      	cmp	r8, r4
 801e70c:	f846 9904 	str.w	r9, [r6], #-4
 801e710:	d9ef      	bls.n	801e6f2 <forward_lite_nl_relu_generic_if32of32_kernel+0xba>
 801e712:	e7c8      	b.n	801e6a6 <forward_lite_nl_relu_generic_if32of32_kernel+0x6e>

0801e714 <forward_lite_dense_if32of32wf32>:
 801e714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e718:	e9d0 3205 	ldrd	r3, r2, [r0, #20]
 801e71c:	6805      	ldr	r5, [r0, #0]
 801e71e:	6841      	ldr	r1, [r0, #4]
 801e720:	fb03 f202 	mul.w	r2, r3, r2
 801e724:	b08b      	sub	sp, #44	@ 0x2c
 801e726:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 801e72a:	4295      	cmp	r5, r2
 801e72c:	9209      	str	r2, [sp, #36]	@ 0x24
 801e72e:	9101      	str	r1, [sp, #4]
 801e730:	f080 81a8 	bcs.w	801ea84 <forward_lite_dense_if32of32wf32+0x370>
 801e734:	f8d0 b010 	ldr.w	fp, [r0, #16]
 801e738:	4604      	mov	r4, r0
 801e73a:	ea4f 0e83 	mov.w	lr, r3, lsl #2
 801e73e:	462e      	mov	r6, r5
 801e740:	4619      	mov	r1, r3
 801e742:	44b6      	add	lr, r6
 801e744:	45b6      	cmp	lr, r6
 801e746:	f8d4 9008 	ldr.w	r9, [r4, #8]
 801e74a:	f240 818b 	bls.w	801ea64 <forward_lite_dense_if32of32wf32+0x350>
 801e74e:	f1ab 0110 	sub.w	r1, fp, #16
 801e752:	0909      	lsrs	r1, r1, #4
 801e754:	3101      	adds	r1, #1
 801e756:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801e75a:	9302      	str	r3, [sp, #8]
 801e75c:	018b      	lsls	r3, r1, #6
 801e75e:	9305      	str	r3, [sp, #20]
 801e760:	9b01      	ldr	r3, [sp, #4]
 801e762:	f8cd e00c 	str.w	lr, [sp, #12]
 801e766:	e9cd 6407 	strd	r6, r4, [sp, #28]
 801e76a:	eb03 1381 	add.w	r3, r3, r1, lsl #6
 801e76e:	9306      	str	r3, [sp, #24]
 801e770:	46b0      	mov	r8, r6
 801e772:	f1bb 0f0f 	cmp.w	fp, #15
 801e776:	f240 8188 	bls.w	801ea8a <forward_lite_dense_if32of32wf32+0x376>
 801e77a:	9b01      	ldr	r3, [sp, #4]
 801e77c:	f109 0440 	add.w	r4, r9, #64	@ 0x40
 801e780:	f103 0540 	add.w	r5, r3, #64	@ 0x40
 801e784:	46da      	mov	sl, fp
 801e786:	2600      	movs	r6, #0
 801e788:	f854 1c40 	ldr.w	r1, [r4, #-64]
 801e78c:	f855 0c40 	ldr.w	r0, [r5, #-64]
 801e790:	f7e2 f8c8 	bl	8000924 <__aeabi_fmul>
 801e794:	f854 1c3c 	ldr.w	r1, [r4, #-60]
 801e798:	4607      	mov	r7, r0
 801e79a:	f855 0c3c 	ldr.w	r0, [r5, #-60]
 801e79e:	f7e2 f8c1 	bl	8000924 <__aeabi_fmul>
 801e7a2:	4601      	mov	r1, r0
 801e7a4:	4638      	mov	r0, r7
 801e7a6:	f7e1 ffb5 	bl	8000714 <__addsf3>
 801e7aa:	f854 1c38 	ldr.w	r1, [r4, #-56]
 801e7ae:	4607      	mov	r7, r0
 801e7b0:	f855 0c38 	ldr.w	r0, [r5, #-56]
 801e7b4:	f7e2 f8b6 	bl	8000924 <__aeabi_fmul>
 801e7b8:	4601      	mov	r1, r0
 801e7ba:	4638      	mov	r0, r7
 801e7bc:	f7e1 ffaa 	bl	8000714 <__addsf3>
 801e7c0:	f854 1c34 	ldr.w	r1, [r4, #-52]
 801e7c4:	4607      	mov	r7, r0
 801e7c6:	f855 0c34 	ldr.w	r0, [r5, #-52]
 801e7ca:	f7e2 f8ab 	bl	8000924 <__aeabi_fmul>
 801e7ce:	4601      	mov	r1, r0
 801e7d0:	4638      	mov	r0, r7
 801e7d2:	f7e1 ff9f 	bl	8000714 <__addsf3>
 801e7d6:	f854 1c30 	ldr.w	r1, [r4, #-48]
 801e7da:	4607      	mov	r7, r0
 801e7dc:	f855 0c30 	ldr.w	r0, [r5, #-48]
 801e7e0:	f7e2 f8a0 	bl	8000924 <__aeabi_fmul>
 801e7e4:	4601      	mov	r1, r0
 801e7e6:	4638      	mov	r0, r7
 801e7e8:	f7e1 ff94 	bl	8000714 <__addsf3>
 801e7ec:	f854 1c2c 	ldr.w	r1, [r4, #-44]
 801e7f0:	4607      	mov	r7, r0
 801e7f2:	f855 0c2c 	ldr.w	r0, [r5, #-44]
 801e7f6:	f7e2 f895 	bl	8000924 <__aeabi_fmul>
 801e7fa:	4601      	mov	r1, r0
 801e7fc:	4638      	mov	r0, r7
 801e7fe:	f7e1 ff89 	bl	8000714 <__addsf3>
 801e802:	f854 1c28 	ldr.w	r1, [r4, #-40]
 801e806:	4607      	mov	r7, r0
 801e808:	f855 0c28 	ldr.w	r0, [r5, #-40]
 801e80c:	f7e2 f88a 	bl	8000924 <__aeabi_fmul>
 801e810:	4601      	mov	r1, r0
 801e812:	4638      	mov	r0, r7
 801e814:	f7e1 ff7e 	bl	8000714 <__addsf3>
 801e818:	f854 1c24 	ldr.w	r1, [r4, #-36]
 801e81c:	4607      	mov	r7, r0
 801e81e:	f855 0c24 	ldr.w	r0, [r5, #-36]
 801e822:	f7e2 f87f 	bl	8000924 <__aeabi_fmul>
 801e826:	4601      	mov	r1, r0
 801e828:	4638      	mov	r0, r7
 801e82a:	f7e1 ff73 	bl	8000714 <__addsf3>
 801e82e:	f854 1c20 	ldr.w	r1, [r4, #-32]
 801e832:	4607      	mov	r7, r0
 801e834:	f855 0c20 	ldr.w	r0, [r5, #-32]
 801e838:	f7e2 f874 	bl	8000924 <__aeabi_fmul>
 801e83c:	4601      	mov	r1, r0
 801e83e:	4638      	mov	r0, r7
 801e840:	f7e1 ff68 	bl	8000714 <__addsf3>
 801e844:	f854 1c1c 	ldr.w	r1, [r4, #-28]
 801e848:	4607      	mov	r7, r0
 801e84a:	f855 0c1c 	ldr.w	r0, [r5, #-28]
 801e84e:	f7e2 f869 	bl	8000924 <__aeabi_fmul>
 801e852:	4601      	mov	r1, r0
 801e854:	4638      	mov	r0, r7
 801e856:	f7e1 ff5d 	bl	8000714 <__addsf3>
 801e85a:	f854 1c18 	ldr.w	r1, [r4, #-24]
 801e85e:	4607      	mov	r7, r0
 801e860:	f855 0c18 	ldr.w	r0, [r5, #-24]
 801e864:	f7e2 f85e 	bl	8000924 <__aeabi_fmul>
 801e868:	4601      	mov	r1, r0
 801e86a:	4638      	mov	r0, r7
 801e86c:	f7e1 ff52 	bl	8000714 <__addsf3>
 801e870:	f854 1c14 	ldr.w	r1, [r4, #-20]
 801e874:	4607      	mov	r7, r0
 801e876:	f855 0c14 	ldr.w	r0, [r5, #-20]
 801e87a:	f7e2 f853 	bl	8000924 <__aeabi_fmul>
 801e87e:	4601      	mov	r1, r0
 801e880:	4638      	mov	r0, r7
 801e882:	f7e1 ff47 	bl	8000714 <__addsf3>
 801e886:	f854 1c10 	ldr.w	r1, [r4, #-16]
 801e88a:	4607      	mov	r7, r0
 801e88c:	f855 0c10 	ldr.w	r0, [r5, #-16]
 801e890:	f7e2 f848 	bl	8000924 <__aeabi_fmul>
 801e894:	4601      	mov	r1, r0
 801e896:	4638      	mov	r0, r7
 801e898:	f7e1 ff3c 	bl	8000714 <__addsf3>
 801e89c:	f854 1c0c 	ldr.w	r1, [r4, #-12]
 801e8a0:	4607      	mov	r7, r0
 801e8a2:	f855 0c0c 	ldr.w	r0, [r5, #-12]
 801e8a6:	f7e2 f83d 	bl	8000924 <__aeabi_fmul>
 801e8aa:	4601      	mov	r1, r0
 801e8ac:	4638      	mov	r0, r7
 801e8ae:	f7e1 ff31 	bl	8000714 <__addsf3>
 801e8b2:	f854 1c08 	ldr.w	r1, [r4, #-8]
 801e8b6:	4607      	mov	r7, r0
 801e8b8:	f855 0c08 	ldr.w	r0, [r5, #-8]
 801e8bc:	f7e2 f832 	bl	8000924 <__aeabi_fmul>
 801e8c0:	4601      	mov	r1, r0
 801e8c2:	4638      	mov	r0, r7
 801e8c4:	f7e1 ff26 	bl	8000714 <__addsf3>
 801e8c8:	f854 1c04 	ldr.w	r1, [r4, #-4]
 801e8cc:	4607      	mov	r7, r0
 801e8ce:	f855 0c04 	ldr.w	r0, [r5, #-4]
 801e8d2:	f7e2 f827 	bl	8000924 <__aeabi_fmul>
 801e8d6:	4601      	mov	r1, r0
 801e8d8:	4638      	mov	r0, r7
 801e8da:	f7e1 ff1b 	bl	8000714 <__addsf3>
 801e8de:	4601      	mov	r1, r0
 801e8e0:	4630      	mov	r0, r6
 801e8e2:	f7e1 ff17 	bl	8000714 <__addsf3>
 801e8e6:	f1aa 0a10 	sub.w	sl, sl, #16
 801e8ea:	f1ba 0f0f 	cmp.w	sl, #15
 801e8ee:	f104 0440 	add.w	r4, r4, #64	@ 0x40
 801e8f2:	4606      	mov	r6, r0
 801e8f4:	f105 0540 	add.w	r5, r5, #64	@ 0x40
 801e8f8:	f63f af46 	bhi.w	801e788 <forward_lite_dense_if32of32wf32+0x74>
 801e8fc:	9b05      	ldr	r3, [sp, #20]
 801e8fe:	9c06      	ldr	r4, [sp, #24]
 801e900:	eb09 0503 	add.w	r5, r9, r3
 801e904:	f00b 0a0f 	and.w	sl, fp, #15
 801e908:	f1ba 0f03 	cmp.w	sl, #3
 801e90c:	d97b      	bls.n	801ea06 <forward_lite_dense_if32of32wf32+0x2f2>
 801e90e:	6869      	ldr	r1, [r5, #4]
 801e910:	6860      	ldr	r0, [r4, #4]
 801e912:	f7e2 f807 	bl	8000924 <__aeabi_fmul>
 801e916:	6829      	ldr	r1, [r5, #0]
 801e918:	4607      	mov	r7, r0
 801e91a:	6820      	ldr	r0, [r4, #0]
 801e91c:	f7e2 f802 	bl	8000924 <__aeabi_fmul>
 801e920:	4601      	mov	r1, r0
 801e922:	4638      	mov	r0, r7
 801e924:	f7e1 fef6 	bl	8000714 <__addsf3>
 801e928:	4631      	mov	r1, r6
 801e92a:	f7e1 fef3 	bl	8000714 <__addsf3>
 801e92e:	68a9      	ldr	r1, [r5, #8]
 801e930:	4606      	mov	r6, r0
 801e932:	68a0      	ldr	r0, [r4, #8]
 801e934:	f7e1 fff6 	bl	8000924 <__aeabi_fmul>
 801e938:	4631      	mov	r1, r6
 801e93a:	f7e1 feeb 	bl	8000714 <__addsf3>
 801e93e:	68e9      	ldr	r1, [r5, #12]
 801e940:	4606      	mov	r6, r0
 801e942:	68e0      	ldr	r0, [r4, #12]
 801e944:	f7e1 ffee 	bl	8000924 <__aeabi_fmul>
 801e948:	4631      	mov	r1, r6
 801e94a:	f7e1 fee3 	bl	8000714 <__addsf3>
 801e94e:	f1aa 0204 	sub.w	r2, sl, #4
 801e952:	2a03      	cmp	r2, #3
 801e954:	4606      	mov	r6, r0
 801e956:	d94e      	bls.n	801e9f6 <forward_lite_dense_if32of32wf32+0x2e2>
 801e958:	6969      	ldr	r1, [r5, #20]
 801e95a:	6960      	ldr	r0, [r4, #20]
 801e95c:	9204      	str	r2, [sp, #16]
 801e95e:	f7e1 ffe1 	bl	8000924 <__aeabi_fmul>
 801e962:	6929      	ldr	r1, [r5, #16]
 801e964:	4607      	mov	r7, r0
 801e966:	6920      	ldr	r0, [r4, #16]
 801e968:	f7e1 ffdc 	bl	8000924 <__aeabi_fmul>
 801e96c:	4601      	mov	r1, r0
 801e96e:	4638      	mov	r0, r7
 801e970:	f7e1 fed0 	bl	8000714 <__addsf3>
 801e974:	69a9      	ldr	r1, [r5, #24]
 801e976:	4607      	mov	r7, r0
 801e978:	69a0      	ldr	r0, [r4, #24]
 801e97a:	f7e1 ffd3 	bl	8000924 <__aeabi_fmul>
 801e97e:	4601      	mov	r1, r0
 801e980:	4638      	mov	r0, r7
 801e982:	f7e1 fec7 	bl	8000714 <__addsf3>
 801e986:	69e9      	ldr	r1, [r5, #28]
 801e988:	4607      	mov	r7, r0
 801e98a:	69e0      	ldr	r0, [r4, #28]
 801e98c:	f7e1 ffca 	bl	8000924 <__aeabi_fmul>
 801e990:	4601      	mov	r1, r0
 801e992:	4638      	mov	r0, r7
 801e994:	f7e1 febe 	bl	8000714 <__addsf3>
 801e998:	4601      	mov	r1, r0
 801e99a:	4630      	mov	r0, r6
 801e99c:	f7e1 feba 	bl	8000714 <__addsf3>
 801e9a0:	f1aa 0108 	sub.w	r1, sl, #8
 801e9a4:	2903      	cmp	r1, #3
 801e9a6:	9a04      	ldr	r2, [sp, #16]
 801e9a8:	4606      	mov	r6, r0
 801e9aa:	d924      	bls.n	801e9f6 <forward_lite_dense_if32of32wf32+0x2e2>
 801e9ac:	6a21      	ldr	r1, [r4, #32]
 801e9ae:	6a28      	ldr	r0, [r5, #32]
 801e9b0:	f7e1 ffb8 	bl	8000924 <__aeabi_fmul>
 801e9b4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 801e9b6:	4607      	mov	r7, r0
 801e9b8:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 801e9ba:	f7e1 ffb3 	bl	8000924 <__aeabi_fmul>
 801e9be:	4601      	mov	r1, r0
 801e9c0:	4638      	mov	r0, r7
 801e9c2:	f7e1 fea7 	bl	8000714 <__addsf3>
 801e9c6:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801e9c8:	4607      	mov	r7, r0
 801e9ca:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801e9cc:	f7e1 ffaa 	bl	8000924 <__aeabi_fmul>
 801e9d0:	4601      	mov	r1, r0
 801e9d2:	4638      	mov	r0, r7
 801e9d4:	f7e1 fe9e 	bl	8000714 <__addsf3>
 801e9d8:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801e9da:	4607      	mov	r7, r0
 801e9dc:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801e9de:	f7e1 ffa1 	bl	8000924 <__aeabi_fmul>
 801e9e2:	4601      	mov	r1, r0
 801e9e4:	4638      	mov	r0, r7
 801e9e6:	f7e1 fe95 	bl	8000714 <__addsf3>
 801e9ea:	4601      	mov	r1, r0
 801e9ec:	4630      	mov	r0, r6
 801e9ee:	f7e1 fe91 	bl	8000714 <__addsf3>
 801e9f2:	9a04      	ldr	r2, [sp, #16]
 801e9f4:	4606      	mov	r6, r0
 801e9f6:	0892      	lsrs	r2, r2, #2
 801e9f8:	3201      	adds	r2, #1
 801e9fa:	eb05 1502 	add.w	r5, r5, r2, lsl #4
 801e9fe:	eb04 1402 	add.w	r4, r4, r2, lsl #4
 801ea02:	f00a 0a03 	and.w	sl, sl, #3
 801ea06:	f1ba 0f00 	cmp.w	sl, #0
 801ea0a:	d020      	beq.n	801ea4e <forward_lite_dense_if32of32wf32+0x33a>
 801ea0c:	6829      	ldr	r1, [r5, #0]
 801ea0e:	6820      	ldr	r0, [r4, #0]
 801ea10:	f7e1 ff88 	bl	8000924 <__aeabi_fmul>
 801ea14:	4601      	mov	r1, r0
 801ea16:	4630      	mov	r0, r6
 801ea18:	f7e1 fe7c 	bl	8000714 <__addsf3>
 801ea1c:	f1ba 0f01 	cmp.w	sl, #1
 801ea20:	4606      	mov	r6, r0
 801ea22:	d014      	beq.n	801ea4e <forward_lite_dense_if32of32wf32+0x33a>
 801ea24:	6869      	ldr	r1, [r5, #4]
 801ea26:	6860      	ldr	r0, [r4, #4]
 801ea28:	f7e1 ff7c 	bl	8000924 <__aeabi_fmul>
 801ea2c:	4601      	mov	r1, r0
 801ea2e:	4630      	mov	r0, r6
 801ea30:	f7e1 fe70 	bl	8000714 <__addsf3>
 801ea34:	f1ba 0f02 	cmp.w	sl, #2
 801ea38:	4606      	mov	r6, r0
 801ea3a:	d008      	beq.n	801ea4e <forward_lite_dense_if32of32wf32+0x33a>
 801ea3c:	68a1      	ldr	r1, [r4, #8]
 801ea3e:	68a8      	ldr	r0, [r5, #8]
 801ea40:	f7e1 ff70 	bl	8000924 <__aeabi_fmul>
 801ea44:	4601      	mov	r1, r0
 801ea46:	4630      	mov	r0, r6
 801ea48:	f7e1 fe64 	bl	8000714 <__addsf3>
 801ea4c:	4606      	mov	r6, r0
 801ea4e:	9b02      	ldr	r3, [sp, #8]
 801ea50:	f848 6b04 	str.w	r6, [r8], #4
 801ea54:	4499      	add	r9, r3
 801ea56:	9b03      	ldr	r3, [sp, #12]
 801ea58:	4543      	cmp	r3, r8
 801ea5a:	f63f ae8a 	bhi.w	801e772 <forward_lite_dense_if32of32wf32+0x5e>
 801ea5e:	e9dd 6407 	ldrd	r6, r4, [sp, #28]
 801ea62:	6961      	ldr	r1, [r4, #20]
 801ea64:	68e3      	ldr	r3, [r4, #12]
 801ea66:	b9ab      	cbnz	r3, 801ea94 <forward_lite_dense_if32of32wf32+0x380>
 801ea68:	9b01      	ldr	r3, [sp, #4]
 801ea6a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801ea6e:	eb03 038b 	add.w	r3, r3, fp, lsl #2
 801ea72:	9301      	str	r3, [sp, #4]
 801ea74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ea76:	eb06 0681 	add.w	r6, r6, r1, lsl #2
 801ea7a:	42b3      	cmp	r3, r6
 801ea7c:	ea4f 0e81 	mov.w	lr, r1, lsl #2
 801ea80:	f63f ae5f 	bhi.w	801e742 <forward_lite_dense_if32of32wf32+0x2e>
 801ea84:	b00b      	add	sp, #44	@ 0x2c
 801ea86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea8a:	9c01      	ldr	r4, [sp, #4]
 801ea8c:	46da      	mov	sl, fp
 801ea8e:	464d      	mov	r5, r9
 801ea90:	2600      	movs	r6, #0
 801ea92:	e739      	b.n	801e908 <forward_lite_dense_if32of32wf32+0x1f4>
 801ea94:	2900      	cmp	r1, #0
 801ea96:	d0e7      	beq.n	801ea68 <forward_lite_dense_if32of32wf32+0x354>
 801ea98:	6819      	ldr	r1, [r3, #0]
 801ea9a:	6830      	ldr	r0, [r6, #0]
 801ea9c:	f7e1 fe3a 	bl	8000714 <__addsf3>
 801eaa0:	6030      	str	r0, [r6, #0]
 801eaa2:	6961      	ldr	r1, [r4, #20]
 801eaa4:	2901      	cmp	r1, #1
 801eaa6:	d9df      	bls.n	801ea68 <forward_lite_dense_if32of32wf32+0x354>
 801eaa8:	46b0      	mov	r8, r6
 801eaaa:	2501      	movs	r5, #1
 801eaac:	68e3      	ldr	r3, [r4, #12]
 801eaae:	f858 0f04 	ldr.w	r0, [r8, #4]!
 801eab2:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 801eab6:	f7e1 fe2d 	bl	8000714 <__addsf3>
 801eaba:	f8c8 0000 	str.w	r0, [r8]
 801eabe:	6961      	ldr	r1, [r4, #20]
 801eac0:	3501      	adds	r5, #1
 801eac2:	42a9      	cmp	r1, r5
 801eac4:	d8f2      	bhi.n	801eaac <forward_lite_dense_if32of32wf32+0x398>
 801eac6:	e7cf      	b.n	801ea68 <forward_lite_dense_if32of32wf32+0x354>

0801eac8 <forward_lite_dense_if32of32wf32_lut4>:
 801eac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eacc:	b095      	sub	sp, #84	@ 0x54
 801eace:	469b      	mov	fp, r3
 801ead0:	9210      	str	r2, [sp, #64]	@ 0x40
 801ead2:	e9dd 2321 	ldrd	r2, r3, [sp, #132]	@ 0x84
 801ead6:	9f1e      	ldr	r7, [sp, #120]	@ 0x78
 801ead8:	fb02 f303 	mul.w	r3, r2, r3
 801eadc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801eae0:	930c      	str	r3, [sp, #48]	@ 0x30
 801eae2:	4606      	mov	r6, r0
 801eae4:	e9dd 351f 	ldrd	r3, r5, [sp, #124]	@ 0x7c
 801eae8:	460c      	mov	r4, r1
 801eaea:	b137      	cbz	r7, 801eafa <forward_lite_dense_if32of32wf32_lut4+0x32>
 801eaec:	4658      	mov	r0, fp
 801eaee:	2240      	movs	r2, #64	@ 0x40
 801eaf0:	4639      	mov	r1, r7
 801eaf2:	f000 fb03 	bl	801f0fc <st_int8_copy>
 801eaf6:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801eaf8:	46bb      	mov	fp, r7
 801eafa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801eafc:	4296      	cmp	r6, r2
 801eafe:	f080 813d 	bcs.w	801ed7c <forward_lite_dense_if32of32wf32_lut4+0x2b4>
 801eb02:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801eb04:	960a      	str	r6, [sp, #40]	@ 0x28
 801eb06:	f025 0101 	bic.w	r1, r5, #1
 801eb0a:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801eb0e:	ea4f 0a82 	mov.w	sl, r2, lsl #2
 801eb12:	9102      	str	r1, [sp, #8]
 801eb14:	f06f 0103 	mvn.w	r1, #3
 801eb18:	eba1 010a 	sub.w	r1, r1, sl
 801eb1c:	9113      	str	r1, [sp, #76]	@ 0x4c
 801eb1e:	f005 0101 	and.w	r1, r5, #1
 801eb22:	08ea      	lsrs	r2, r5, #3
 801eb24:	9107      	str	r1, [sp, #28]
 801eb26:	00a9      	lsls	r1, r5, #2
 801eb28:	9206      	str	r2, [sp, #24]
 801eb2a:	910f      	str	r1, [sp, #60]	@ 0x3c
 801eb2c:	eb04 1142 	add.w	r1, r4, r2, lsl #5
 801eb30:	0092      	lsls	r2, r2, #2
 801eb32:	9209      	str	r2, [sp, #36]	@ 0x24
 801eb34:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801eb36:	9105      	str	r1, [sp, #20]
 801eb38:	1f18      	subs	r0, r3, #4
 801eb3a:	e9cd aa0d 	strd	sl, sl, [sp, #52]	@ 0x34
 801eb3e:	f104 0120 	add.w	r1, r4, #32
 801eb42:	eb00 0482 	add.w	r4, r0, r2, lsl #2
 801eb46:	9011      	str	r0, [sp, #68]	@ 0x44
 801eb48:	9104      	str	r1, [sp, #16]
 801eb4a:	9412      	str	r4, [sp, #72]	@ 0x48
 801eb4c:	931f      	str	r3, [sp, #124]	@ 0x7c
 801eb4e:	4632      	mov	r2, r6
 801eb50:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801eb52:	9904      	ldr	r1, [sp, #16]
 801eb54:	18d3      	adds	r3, r2, r3
 801eb56:	3920      	subs	r1, #32
 801eb58:	4293      	cmp	r3, r2
 801eb5a:	9303      	str	r3, [sp, #12]
 801eb5c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801eb5e:	f240 8110 	bls.w	801ed82 <forward_lite_dense_if32of32wf32_lut4+0x2ba>
 801eb62:	9b02      	ldr	r3, [sp, #8]
 801eb64:	f8dd 9040 	ldr.w	r9, [sp, #64]	@ 0x40
 801eb68:	9200      	str	r2, [sp, #0]
 801eb6a:	3b01      	subs	r3, #1
 801eb6c:	9308      	str	r3, [sp, #32]
 801eb6e:	9b06      	ldr	r3, [sp, #24]
 801eb70:	2b00      	cmp	r3, #0
 801eb72:	f000 80e7 	beq.w	801ed44 <forward_lite_dense_if32of32wf32_lut4+0x27c>
 801eb76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eb78:	9c04      	ldr	r4, [sp, #16]
 801eb7a:	eb09 0a03 	add.w	sl, r9, r3
 801eb7e:	2500      	movs	r5, #0
 801eb80:	f899 6000 	ldrb.w	r6, [r9]
 801eb84:	f854 1c20 	ldr.w	r1, [r4, #-32]
 801eb88:	0933      	lsrs	r3, r6, #4
 801eb8a:	f006 060f 	and.w	r6, r6, #15
 801eb8e:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
 801eb92:	f7e1 fec7 	bl	8000924 <__aeabi_fmul>
 801eb96:	f854 1c1c 	ldr.w	r1, [r4, #-28]
 801eb9a:	4607      	mov	r7, r0
 801eb9c:	f85b 0026 	ldr.w	r0, [fp, r6, lsl #2]
 801eba0:	f899 6001 	ldrb.w	r6, [r9, #1]
 801eba4:	f7e1 febe 	bl	8000924 <__aeabi_fmul>
 801eba8:	4601      	mov	r1, r0
 801ebaa:	4638      	mov	r0, r7
 801ebac:	f7e1 fdb2 	bl	8000714 <__addsf3>
 801ebb0:	0933      	lsrs	r3, r6, #4
 801ebb2:	f854 1c18 	ldr.w	r1, [r4, #-24]
 801ebb6:	4607      	mov	r7, r0
 801ebb8:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
 801ebbc:	f7e1 feb2 	bl	8000924 <__aeabi_fmul>
 801ebc0:	4601      	mov	r1, r0
 801ebc2:	4638      	mov	r0, r7
 801ebc4:	f7e1 fda6 	bl	8000714 <__addsf3>
 801ebc8:	f006 060f 	and.w	r6, r6, #15
 801ebcc:	f854 1c14 	ldr.w	r1, [r4, #-20]
 801ebd0:	4607      	mov	r7, r0
 801ebd2:	f85b 0026 	ldr.w	r0, [fp, r6, lsl #2]
 801ebd6:	f899 6002 	ldrb.w	r6, [r9, #2]
 801ebda:	f7e1 fea3 	bl	8000924 <__aeabi_fmul>
 801ebde:	4601      	mov	r1, r0
 801ebe0:	4638      	mov	r0, r7
 801ebe2:	f7e1 fd97 	bl	8000714 <__addsf3>
 801ebe6:	0933      	lsrs	r3, r6, #4
 801ebe8:	f854 1c10 	ldr.w	r1, [r4, #-16]
 801ebec:	4607      	mov	r7, r0
 801ebee:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
 801ebf2:	f7e1 fe97 	bl	8000924 <__aeabi_fmul>
 801ebf6:	4601      	mov	r1, r0
 801ebf8:	4638      	mov	r0, r7
 801ebfa:	f7e1 fd8b 	bl	8000714 <__addsf3>
 801ebfe:	f006 060f 	and.w	r6, r6, #15
 801ec02:	f854 1c0c 	ldr.w	r1, [r4, #-12]
 801ec06:	4607      	mov	r7, r0
 801ec08:	f85b 0026 	ldr.w	r0, [fp, r6, lsl #2]
 801ec0c:	f899 6003 	ldrb.w	r6, [r9, #3]
 801ec10:	f7e1 fe88 	bl	8000924 <__aeabi_fmul>
 801ec14:	4601      	mov	r1, r0
 801ec16:	4638      	mov	r0, r7
 801ec18:	f7e1 fd7c 	bl	8000714 <__addsf3>
 801ec1c:	0933      	lsrs	r3, r6, #4
 801ec1e:	f854 1c08 	ldr.w	r1, [r4, #-8]
 801ec22:	4607      	mov	r7, r0
 801ec24:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
 801ec28:	f7e1 fe7c 	bl	8000924 <__aeabi_fmul>
 801ec2c:	4601      	mov	r1, r0
 801ec2e:	4638      	mov	r0, r7
 801ec30:	f7e1 fd70 	bl	8000714 <__addsf3>
 801ec34:	f006 060f 	and.w	r6, r6, #15
 801ec38:	f854 1c04 	ldr.w	r1, [r4, #-4]
 801ec3c:	4607      	mov	r7, r0
 801ec3e:	f85b 0026 	ldr.w	r0, [fp, r6, lsl #2]
 801ec42:	f7e1 fe6f 	bl	8000924 <__aeabi_fmul>
 801ec46:	4601      	mov	r1, r0
 801ec48:	4638      	mov	r0, r7
 801ec4a:	f7e1 fd63 	bl	8000714 <__addsf3>
 801ec4e:	4601      	mov	r1, r0
 801ec50:	4628      	mov	r0, r5
 801ec52:	f7e1 fd5f 	bl	8000714 <__addsf3>
 801ec56:	f109 0904 	add.w	r9, r9, #4
 801ec5a:	45d1      	cmp	r9, sl
 801ec5c:	4605      	mov	r5, r0
 801ec5e:	f104 0420 	add.w	r4, r4, #32
 801ec62:	d18d      	bne.n	801eb80 <forward_lite_dense_if32of32wf32_lut4+0xb8>
 801ec64:	9c05      	ldr	r4, [sp, #20]
 801ec66:	9b02      	ldr	r3, [sp, #8]
 801ec68:	429c      	cmp	r4, r3
 801ec6a:	d272      	bcs.n	801ed52 <forward_lite_dense_if32of32wf32_lut4+0x28a>
 801ec6c:	9b08      	ldr	r3, [sp, #32]
 801ec6e:	9401      	str	r4, [sp, #4]
 801ec70:	eba3 0804 	sub.w	r8, r3, r4
 801ec74:	f104 0608 	add.w	r6, r4, #8
 801ec78:	f10a 37ff 	add.w	r7, sl, #4294967295
 801ec7c:	ea4f 09d8 	mov.w	r9, r8, lsr #3
 801ec80:	463c      	mov	r4, r7
 801ec82:	eb0a 08d8 	add.w	r8, sl, r8, lsr #3
 801ec86:	4637      	mov	r7, r6
 801ec88:	f814 6f01 	ldrb.w	r6, [r4, #1]!
 801ec8c:	f857 1c08 	ldr.w	r1, [r7, #-8]
 801ec90:	0932      	lsrs	r2, r6, #4
 801ec92:	3708      	adds	r7, #8
 801ec94:	f85b 0022 	ldr.w	r0, [fp, r2, lsl #2]
 801ec98:	f7e1 fe44 	bl	8000924 <__aeabi_fmul>
 801ec9c:	f006 020f 	and.w	r2, r6, #15
 801eca0:	f857 1c0c 	ldr.w	r1, [r7, #-12]
 801eca4:	4606      	mov	r6, r0
 801eca6:	f85b 0022 	ldr.w	r0, [fp, r2, lsl #2]
 801ecaa:	f7e1 fe3b 	bl	8000924 <__aeabi_fmul>
 801ecae:	4601      	mov	r1, r0
 801ecb0:	4630      	mov	r0, r6
 801ecb2:	f7e1 fd2f 	bl	8000714 <__addsf3>
 801ecb6:	4601      	mov	r1, r0
 801ecb8:	4628      	mov	r0, r5
 801ecba:	f7e1 fd2b 	bl	8000714 <__addsf3>
 801ecbe:	4544      	cmp	r4, r8
 801ecc0:	4605      	mov	r5, r0
 801ecc2:	d1e1      	bne.n	801ec88 <forward_lite_dense_if32of32wf32_lut4+0x1c0>
 801ecc4:	9c01      	ldr	r4, [sp, #4]
 801ecc6:	f109 0301 	add.w	r3, r9, #1
 801ecca:	eb0a 0903 	add.w	r9, sl, r3
 801ecce:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 801ecd2:	9b07      	ldr	r3, [sp, #28]
 801ecd4:	b35b      	cbz	r3, 801ed2e <forward_lite_dense_if32of32wf32_lut4+0x266>
 801ecd6:	f819 3b01 	ldrb.w	r3, [r9], #1
 801ecda:	6821      	ldr	r1, [r4, #0]
 801ecdc:	091b      	lsrs	r3, r3, #4
 801ecde:	f85b 0023 	ldr.w	r0, [fp, r3, lsl #2]
 801ece2:	f7e1 fe1f 	bl	8000924 <__aeabi_fmul>
 801ece6:	4629      	mov	r1, r5
 801ece8:	f7e1 fd14 	bl	8000714 <__addsf3>
 801ecec:	9b00      	ldr	r3, [sp, #0]
 801ecee:	9a03      	ldr	r2, [sp, #12]
 801ecf0:	f843 0b04 	str.w	r0, [r3], #4
 801ecf4:	429a      	cmp	r2, r3
 801ecf6:	9300      	str	r3, [sp, #0]
 801ecf8:	f63f af39 	bhi.w	801eb6e <forward_lite_dense_if32of32wf32_lut4+0xa6>
 801ecfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ecfe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ed00:	189c      	adds	r4, r3, r2
 801ed02:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801ed04:	bb3b      	cbnz	r3, 801ed56 <forward_lite_dense_if32of32wf32_lut4+0x28e>
 801ed06:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ed08:	42a3      	cmp	r3, r4
 801ed0a:	d937      	bls.n	801ed7c <forward_lite_dense_if32of32wf32_lut4+0x2b4>
 801ed0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ed0e:	9a02      	ldr	r2, [sp, #8]
 801ed10:	441a      	add	r2, r3
 801ed12:	9202      	str	r2, [sp, #8]
 801ed14:	9a05      	ldr	r2, [sp, #20]
 801ed16:	441a      	add	r2, r3
 801ed18:	9205      	str	r2, [sp, #20]
 801ed1a:	9a04      	ldr	r2, [sp, #16]
 801ed1c:	441a      	add	r2, r3
 801ed1e:	9204      	str	r2, [sp, #16]
 801ed20:	9b03      	ldr	r3, [sp, #12]
 801ed22:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ed24:	4293      	cmp	r3, r2
 801ed26:	d92e      	bls.n	801ed86 <forward_lite_dense_if32of32wf32_lut4+0x2be>
 801ed28:	940a      	str	r4, [sp, #40]	@ 0x28
 801ed2a:	4622      	mov	r2, r4
 801ed2c:	e710      	b.n	801eb50 <forward_lite_dense_if32of32wf32_lut4+0x88>
 801ed2e:	9b00      	ldr	r3, [sp, #0]
 801ed30:	9a03      	ldr	r2, [sp, #12]
 801ed32:	f843 5b04 	str.w	r5, [r3], #4
 801ed36:	429a      	cmp	r2, r3
 801ed38:	9300      	str	r3, [sp, #0]
 801ed3a:	d9df      	bls.n	801ecfc <forward_lite_dense_if32of32wf32_lut4+0x234>
 801ed3c:	9b06      	ldr	r3, [sp, #24]
 801ed3e:	2b00      	cmp	r3, #0
 801ed40:	f47f af19 	bne.w	801eb76 <forward_lite_dense_if32of32wf32_lut4+0xae>
 801ed44:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801ed46:	9b02      	ldr	r3, [sp, #8]
 801ed48:	429c      	cmp	r4, r3
 801ed4a:	46ca      	mov	sl, r9
 801ed4c:	f04f 0500 	mov.w	r5, #0
 801ed50:	d38c      	bcc.n	801ec6c <forward_lite_dense_if32of32wf32_lut4+0x1a4>
 801ed52:	46d1      	mov	r9, sl
 801ed54:	e7bd      	b.n	801ecd2 <forward_lite_dense_if32of32wf32_lut4+0x20a>
 801ed56:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801ed58:	2b00      	cmp	r3, #0
 801ed5a:	d0d4      	beq.n	801ed06 <forward_lite_dense_if32of32wf32_lut4+0x23e>
 801ed5c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ed5e:	e9dd 5a11 	ldrd	r5, sl, [sp, #68]	@ 0x44
 801ed62:	18e6      	adds	r6, r4, r3
 801ed64:	f855 1f04 	ldr.w	r1, [r5, #4]!
 801ed68:	f856 0f04 	ldr.w	r0, [r6, #4]!
 801ed6c:	f7e1 fcd2 	bl	8000714 <__addsf3>
 801ed70:	4555      	cmp	r5, sl
 801ed72:	6030      	str	r0, [r6, #0]
 801ed74:	d1f6      	bne.n	801ed64 <forward_lite_dense_if32of32wf32_lut4+0x29c>
 801ed76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ed78:	42a3      	cmp	r3, r4
 801ed7a:	d8c7      	bhi.n	801ed0c <forward_lite_dense_if32of32wf32_lut4+0x244>
 801ed7c:	b015      	add	sp, #84	@ 0x54
 801ed7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed82:	4614      	mov	r4, r2
 801ed84:	e7bd      	b.n	801ed02 <forward_lite_dense_if32of32wf32_lut4+0x23a>
 801ed86:	46a1      	mov	r9, r4
 801ed88:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 801ed8c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801ed8e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801ed90:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801ed92:	b903      	cbnz	r3, 801ed96 <forward_lite_dense_if32of32wf32_lut4+0x2ce>
 801ed94:	e7fe      	b.n	801ed94 <forward_lite_dense_if32of32wf32_lut4+0x2cc>
 801ed96:	2a00      	cmp	r2, #0
 801ed98:	d0fb      	beq.n	801ed92 <forward_lite_dense_if32of32wf32_lut4+0x2ca>
 801ed9a:	f06f 0703 	mvn.w	r7, #3
 801ed9e:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 801eda2:	eba7 070a 	sub.w	r7, r7, sl
 801eda6:	eb09 0607 	add.w	r6, r9, r7
 801edaa:	4645      	mov	r5, r8
 801edac:	f855 1f04 	ldr.w	r1, [r5, #4]!
 801edb0:	f856 0f04 	ldr.w	r0, [r6, #4]!
 801edb4:	f7e1 fcae 	bl	8000714 <__addsf3>
 801edb8:	42ac      	cmp	r4, r5
 801edba:	6030      	str	r0, [r6, #0]
 801edbc:	d1f6      	bne.n	801edac <forward_lite_dense_if32of32wf32_lut4+0x2e4>
 801edbe:	e7f2      	b.n	801eda6 <forward_lite_dense_if32of32wf32_lut4+0x2de>

0801edc0 <forward_lite_dense_if32of32wf32_lut8>:
 801edc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801edc4:	b091      	sub	sp, #68	@ 0x44
 801edc6:	461d      	mov	r5, r3
 801edc8:	920c      	str	r2, [sp, #48]	@ 0x30
 801edca:	e9dd 231d 	ldrd	r2, r3, [sp, #116]	@ 0x74
 801edce:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801edd0:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 801edd2:	fb02 f303 	mul.w	r3, r2, r3
 801edd6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801edda:	4682      	mov	sl, r0
 801eddc:	460c      	mov	r4, r1
 801edde:	9309      	str	r3, [sp, #36]	@ 0x24
 801ede0:	b137      	cbz	r7, 801edf0 <forward_lite_dense_if32of32wf32_lut8+0x30>
 801ede2:	4628      	mov	r0, r5
 801ede4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801ede8:	4639      	mov	r1, r7
 801edea:	f000 f987 	bl	801f0fc <st_int8_copy>
 801edee:	463d      	mov	r5, r7
 801edf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801edf2:	459a      	cmp	sl, r3
 801edf4:	f080 8163 	bcs.w	801f0be <forward_lite_dense_if32of32wf32_lut8+0x2fe>
 801edf8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801edfa:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 801edfc:	0099      	lsls	r1, r3, #2
 801edfe:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801ee00:	9108      	str	r1, [sp, #32]
 801ee02:	1f18      	subs	r0, r3, #4
 801ee04:	f06f 0303 	mvn.w	r3, #3
 801ee08:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
 801ee0c:	08f2      	lsrs	r2, r6, #3
 801ee0e:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ee10:	00b3      	lsls	r3, r6, #2
 801ee12:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ee14:	eb04 1342 	add.w	r3, r4, r2, lsl #5
 801ee18:	9303      	str	r3, [sp, #12]
 801ee1a:	00d3      	lsls	r3, r2, #3
 801ee1c:	9305      	str	r3, [sp, #20]
 801ee1e:	9b08      	ldr	r3, [sp, #32]
 801ee20:	9204      	str	r2, [sp, #16]
 801ee22:	4652      	mov	r2, sl
 801ee24:	eb02 0e03 	add.w	lr, r2, r3
 801ee28:	f104 0c20 	add.w	ip, r4, #32
 801ee2c:	eb00 0887 	add.w	r8, r0, r7, lsl #2
 801ee30:	4596      	cmp	lr, r2
 801ee32:	900d      	str	r0, [sp, #52]	@ 0x34
 801ee34:	f006 0907 	and.w	r9, r6, #7
 801ee38:	910a      	str	r1, [sp, #40]	@ 0x28
 801ee3a:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
 801ee3e:	f1ac 0320 	sub.w	r3, ip, #32
 801ee42:	f240 810a 	bls.w	801f05a <forward_lite_dense_if32of32wf32_lut8+0x29a>
 801ee46:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801ee48:	f8cd e004 	str.w	lr, [sp, #4]
 801ee4c:	46b8      	mov	r8, r7
 801ee4e:	4693      	mov	fp, r2
 801ee50:	9306      	str	r3, [sp, #24]
 801ee52:	464f      	mov	r7, r9
 801ee54:	f8cd c008 	str.w	ip, [sp, #8]
 801ee58:	9207      	str	r2, [sp, #28]
 801ee5a:	9b04      	ldr	r3, [sp, #16]
 801ee5c:	2b00      	cmp	r3, #0
 801ee5e:	f000 810b 	beq.w	801f078 <forward_lite_dense_if32of32wf32_lut8+0x2b8>
 801ee62:	9b05      	ldr	r3, [sp, #20]
 801ee64:	9c02      	ldr	r4, [sp, #8]
 801ee66:	9700      	str	r7, [sp, #0]
 801ee68:	eb08 0a03 	add.w	sl, r8, r3
 801ee6c:	2600      	movs	r6, #0
 801ee6e:	f898 2000 	ldrb.w	r2, [r8]
 801ee72:	f854 1c20 	ldr.w	r1, [r4, #-32]
 801ee76:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
 801ee7a:	f7e1 fd53 	bl	8000924 <__aeabi_fmul>
 801ee7e:	f898 2001 	ldrb.w	r2, [r8, #1]
 801ee82:	f854 1c1c 	ldr.w	r1, [r4, #-28]
 801ee86:	4607      	mov	r7, r0
 801ee88:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
 801ee8c:	f7e1 fd4a 	bl	8000924 <__aeabi_fmul>
 801ee90:	4601      	mov	r1, r0
 801ee92:	4638      	mov	r0, r7
 801ee94:	f7e1 fc3e 	bl	8000714 <__addsf3>
 801ee98:	f898 2002 	ldrb.w	r2, [r8, #2]
 801ee9c:	f854 1c18 	ldr.w	r1, [r4, #-24]
 801eea0:	4607      	mov	r7, r0
 801eea2:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
 801eea6:	f7e1 fd3d 	bl	8000924 <__aeabi_fmul>
 801eeaa:	4601      	mov	r1, r0
 801eeac:	4638      	mov	r0, r7
 801eeae:	f7e1 fc31 	bl	8000714 <__addsf3>
 801eeb2:	f898 2003 	ldrb.w	r2, [r8, #3]
 801eeb6:	f854 1c14 	ldr.w	r1, [r4, #-20]
 801eeba:	4607      	mov	r7, r0
 801eebc:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
 801eec0:	f7e1 fd30 	bl	8000924 <__aeabi_fmul>
 801eec4:	4601      	mov	r1, r0
 801eec6:	4638      	mov	r0, r7
 801eec8:	f7e1 fc24 	bl	8000714 <__addsf3>
 801eecc:	f898 2004 	ldrb.w	r2, [r8, #4]
 801eed0:	f854 1c10 	ldr.w	r1, [r4, #-16]
 801eed4:	4607      	mov	r7, r0
 801eed6:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
 801eeda:	f7e1 fd23 	bl	8000924 <__aeabi_fmul>
 801eede:	4639      	mov	r1, r7
 801eee0:	f7e1 fc18 	bl	8000714 <__addsf3>
 801eee4:	f898 2005 	ldrb.w	r2, [r8, #5]
 801eee8:	f854 1c0c 	ldr.w	r1, [r4, #-12]
 801eeec:	4607      	mov	r7, r0
 801eeee:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
 801eef2:	f7e1 fd17 	bl	8000924 <__aeabi_fmul>
 801eef6:	4601      	mov	r1, r0
 801eef8:	4638      	mov	r0, r7
 801eefa:	f7e1 fc0b 	bl	8000714 <__addsf3>
 801eefe:	4607      	mov	r7, r0
 801ef00:	f898 0006 	ldrb.w	r0, [r8, #6]
 801ef04:	f898 9007 	ldrb.w	r9, [r8, #7]
 801ef08:	f854 1c08 	ldr.w	r1, [r4, #-8]
 801ef0c:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 801ef10:	f7e1 fd08 	bl	8000924 <__aeabi_fmul>
 801ef14:	4601      	mov	r1, r0
 801ef16:	4638      	mov	r0, r7
 801ef18:	f7e1 fbfc 	bl	8000714 <__addsf3>
 801ef1c:	f854 1c04 	ldr.w	r1, [r4, #-4]
 801ef20:	4607      	mov	r7, r0
 801ef22:	f855 0029 	ldr.w	r0, [r5, r9, lsl #2]
 801ef26:	f7e1 fcfd 	bl	8000924 <__aeabi_fmul>
 801ef2a:	4601      	mov	r1, r0
 801ef2c:	4638      	mov	r0, r7
 801ef2e:	f7e1 fbf1 	bl	8000714 <__addsf3>
 801ef32:	4601      	mov	r1, r0
 801ef34:	4630      	mov	r0, r6
 801ef36:	f7e1 fbed 	bl	8000714 <__addsf3>
 801ef3a:	f108 0808 	add.w	r8, r8, #8
 801ef3e:	45d0      	cmp	r8, sl
 801ef40:	4606      	mov	r6, r0
 801ef42:	f104 0420 	add.w	r4, r4, #32
 801ef46:	d192      	bne.n	801ee6e <forward_lite_dense_if32of32wf32_lut8+0xae>
 801ef48:	9f00      	ldr	r7, [sp, #0]
 801ef4a:	9c03      	ldr	r4, [sp, #12]
 801ef4c:	2f00      	cmp	r7, #0
 801ef4e:	f000 8091 	beq.w	801f074 <forward_lite_dense_if32of32wf32_lut8+0x2b4>
 801ef52:	f89a 3000 	ldrb.w	r3, [sl]
 801ef56:	6821      	ldr	r1, [r4, #0]
 801ef58:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 801ef5c:	f7e1 fce2 	bl	8000924 <__aeabi_fmul>
 801ef60:	4601      	mov	r1, r0
 801ef62:	4630      	mov	r0, r6
 801ef64:	f7e1 fbd6 	bl	8000714 <__addsf3>
 801ef68:	2f01      	cmp	r7, #1
 801ef6a:	4606      	mov	r6, r0
 801ef6c:	d051      	beq.n	801f012 <forward_lite_dense_if32of32wf32_lut8+0x252>
 801ef6e:	f89a 3001 	ldrb.w	r3, [sl, #1]
 801ef72:	6861      	ldr	r1, [r4, #4]
 801ef74:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 801ef78:	f7e1 fcd4 	bl	8000924 <__aeabi_fmul>
 801ef7c:	4601      	mov	r1, r0
 801ef7e:	4630      	mov	r0, r6
 801ef80:	f7e1 fbc8 	bl	8000714 <__addsf3>
 801ef84:	2f02      	cmp	r7, #2
 801ef86:	4606      	mov	r6, r0
 801ef88:	d043      	beq.n	801f012 <forward_lite_dense_if32of32wf32_lut8+0x252>
 801ef8a:	f89a 3002 	ldrb.w	r3, [sl, #2]
 801ef8e:	68a1      	ldr	r1, [r4, #8]
 801ef90:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 801ef94:	f7e1 fcc6 	bl	8000924 <__aeabi_fmul>
 801ef98:	4601      	mov	r1, r0
 801ef9a:	4630      	mov	r0, r6
 801ef9c:	f7e1 fbba 	bl	8000714 <__addsf3>
 801efa0:	2f03      	cmp	r7, #3
 801efa2:	4606      	mov	r6, r0
 801efa4:	d035      	beq.n	801f012 <forward_lite_dense_if32of32wf32_lut8+0x252>
 801efa6:	f89a 3003 	ldrb.w	r3, [sl, #3]
 801efaa:	68e1      	ldr	r1, [r4, #12]
 801efac:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 801efb0:	f7e1 fcb8 	bl	8000924 <__aeabi_fmul>
 801efb4:	4601      	mov	r1, r0
 801efb6:	4630      	mov	r0, r6
 801efb8:	f7e1 fbac 	bl	8000714 <__addsf3>
 801efbc:	2f04      	cmp	r7, #4
 801efbe:	4606      	mov	r6, r0
 801efc0:	d027      	beq.n	801f012 <forward_lite_dense_if32of32wf32_lut8+0x252>
 801efc2:	f89a 3004 	ldrb.w	r3, [sl, #4]
 801efc6:	6921      	ldr	r1, [r4, #16]
 801efc8:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 801efcc:	f7e1 fcaa 	bl	8000924 <__aeabi_fmul>
 801efd0:	4601      	mov	r1, r0
 801efd2:	4630      	mov	r0, r6
 801efd4:	f7e1 fb9e 	bl	8000714 <__addsf3>
 801efd8:	2f05      	cmp	r7, #5
 801efda:	4606      	mov	r6, r0
 801efdc:	d019      	beq.n	801f012 <forward_lite_dense_if32of32wf32_lut8+0x252>
 801efde:	f89a 3005 	ldrb.w	r3, [sl, #5]
 801efe2:	6961      	ldr	r1, [r4, #20]
 801efe4:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 801efe8:	f7e1 fc9c 	bl	8000924 <__aeabi_fmul>
 801efec:	4601      	mov	r1, r0
 801efee:	4630      	mov	r0, r6
 801eff0:	f7e1 fb90 	bl	8000714 <__addsf3>
 801eff4:	2f06      	cmp	r7, #6
 801eff6:	4606      	mov	r6, r0
 801eff8:	d00b      	beq.n	801f012 <forward_lite_dense_if32of32wf32_lut8+0x252>
 801effa:	f89a 3006 	ldrb.w	r3, [sl, #6]
 801effe:	69a1      	ldr	r1, [r4, #24]
 801f000:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 801f004:	f7e1 fc8e 	bl	8000924 <__aeabi_fmul>
 801f008:	4601      	mov	r1, r0
 801f00a:	4630      	mov	r0, r6
 801f00c:	f7e1 fb82 	bl	8000714 <__addsf3>
 801f010:	4606      	mov	r6, r0
 801f012:	eb0a 0807 	add.w	r8, sl, r7
 801f016:	f84b 6b04 	str.w	r6, [fp], #4
 801f01a:	9b01      	ldr	r3, [sp, #4]
 801f01c:	455b      	cmp	r3, fp
 801f01e:	f63f af1c 	bhi.w	801ee5a <forward_lite_dense_if32of32wf32_lut8+0x9a>
 801f022:	9a07      	ldr	r2, [sp, #28]
 801f024:	f8dd c008 	ldr.w	ip, [sp, #8]
 801f028:	469e      	mov	lr, r3
 801f02a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f02c:	46b9      	mov	r9, r7
 801f02e:	18d7      	adds	r7, r2, r3
 801f030:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801f032:	bb33      	cbnz	r3, 801f082 <forward_lite_dense_if32of32wf32_lut8+0x2c2>
 801f034:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f036:	42bb      	cmp	r3, r7
 801f038:	d941      	bls.n	801f0be <forward_lite_dense_if32of32wf32_lut8+0x2fe>
 801f03a:	9b03      	ldr	r3, [sp, #12]
 801f03c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801f03e:	4596      	cmp	lr, r2
 801f040:	440b      	add	r3, r1
 801f042:	9303      	str	r3, [sp, #12]
 801f044:	448c      	add	ip, r1
 801f046:	d950      	bls.n	801f0ea <forward_lite_dense_if32of32wf32_lut8+0x32a>
 801f048:	9b08      	ldr	r3, [sp, #32]
 801f04a:	463a      	mov	r2, r7
 801f04c:	eb02 0e03 	add.w	lr, r2, r3
 801f050:	4596      	cmp	lr, r2
 801f052:	f1ac 0320 	sub.w	r3, ip, #32
 801f056:	f63f aef6 	bhi.w	801ee46 <forward_lite_dense_if32of32wf32_lut8+0x86>
 801f05a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801f05c:	b983      	cbnz	r3, 801f080 <forward_lite_dense_if32of32wf32_lut8+0x2c0>
 801f05e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f060:	9908      	ldr	r1, [sp, #32]
 801f062:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
 801f066:	4293      	cmp	r3, r2
 801f068:	4692      	mov	sl, r2
 801f06a:	d928      	bls.n	801f0be <forward_lite_dense_if32of32wf32_lut8+0x2fe>
 801f06c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801f06e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801f070:	bb43      	cbnz	r3, 801f0c4 <forward_lite_dense_if32of32wf32_lut8+0x304>
 801f072:	e7fe      	b.n	801f072 <forward_lite_dense_if32of32wf32_lut8+0x2b2>
 801f074:	46d0      	mov	r8, sl
 801f076:	e7ce      	b.n	801f016 <forward_lite_dense_if32of32wf32_lut8+0x256>
 801f078:	9c06      	ldr	r4, [sp, #24]
 801f07a:	46c2      	mov	sl, r8
 801f07c:	2600      	movs	r6, #0
 801f07e:	e765      	b.n	801ef4c <forward_lite_dense_if32of32wf32_lut8+0x18c>
 801f080:	4617      	mov	r7, r2
 801f082:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801f084:	2b00      	cmp	r3, #0
 801f086:	d0d5      	beq.n	801f034 <forward_lite_dense_if32of32wf32_lut8+0x274>
 801f088:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f08a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801f08c:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
 801f090:	9500      	str	r5, [sp, #0]
 801f092:	18fe      	adds	r6, r7, r3
 801f094:	4625      	mov	r5, r4
 801f096:	46f3      	mov	fp, lr
 801f098:	4634      	mov	r4, r6
 801f09a:	46e2      	mov	sl, ip
 801f09c:	4616      	mov	r6, r2
 801f09e:	f855 1f04 	ldr.w	r1, [r5, #4]!
 801f0a2:	f854 0f04 	ldr.w	r0, [r4, #4]!
 801f0a6:	f7e1 fb35 	bl	8000714 <__addsf3>
 801f0aa:	4545      	cmp	r5, r8
 801f0ac:	6020      	str	r0, [r4, #0]
 801f0ae:	d1f6      	bne.n	801f09e <forward_lite_dense_if32of32wf32_lut8+0x2de>
 801f0b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f0b2:	9d00      	ldr	r5, [sp, #0]
 801f0b4:	42bb      	cmp	r3, r7
 801f0b6:	46de      	mov	lr, fp
 801f0b8:	46d4      	mov	ip, sl
 801f0ba:	4632      	mov	r2, r6
 801f0bc:	d8bd      	bhi.n	801f03a <forward_lite_dense_if32of32wf32_lut8+0x27a>
 801f0be:	b011      	add	sp, #68	@ 0x44
 801f0c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f0c4:	2a00      	cmp	r2, #0
 801f0c6:	d0d3      	beq.n	801f070 <forward_lite_dense_if32of32wf32_lut8+0x2b0>
 801f0c8:	f06f 0603 	mvn.w	r6, #3
 801f0cc:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801f0ce:	1a76      	subs	r6, r6, r1
 801f0d0:	eb0a 0506 	add.w	r5, sl, r6
 801f0d4:	463c      	mov	r4, r7
 801f0d6:	f854 1f04 	ldr.w	r1, [r4, #4]!
 801f0da:	f855 0f04 	ldr.w	r0, [r5, #4]!
 801f0de:	f7e1 fb19 	bl	8000714 <__addsf3>
 801f0e2:	4544      	cmp	r4, r8
 801f0e4:	6028      	str	r0, [r5, #0]
 801f0e6:	d1f6      	bne.n	801f0d6 <forward_lite_dense_if32of32wf32_lut8+0x316>
 801f0e8:	e7f2      	b.n	801f0d0 <forward_lite_dense_if32of32wf32_lut8+0x310>
 801f0ea:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801f0ec:	9908      	ldr	r1, [sp, #32]
 801f0ee:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
 801f0f2:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801f0f4:	46ba      	mov	sl, r7
 801f0f6:	2b00      	cmp	r3, #0
 801f0f8:	d0bb      	beq.n	801f072 <forward_lite_dense_if32of32wf32_lut8+0x2b2>
 801f0fa:	e7e3      	b.n	801f0c4 <forward_lite_dense_if32of32wf32_lut8+0x304>

0801f0fc <st_int8_copy>:
 801f0fc:	4288      	cmp	r0, r1
 801f0fe:	d021      	beq.n	801f144 <st_int8_copy+0x48>
 801f100:	b302      	cbz	r2, 801f144 <st_int8_copy+0x48>
 801f102:	4288      	cmp	r0, r1
 801f104:	d313      	bcc.n	801f12e <st_int8_copy+0x32>
 801f106:	2a03      	cmp	r2, #3
 801f108:	d81d      	bhi.n	801f146 <st_int8_copy+0x4a>
 801f10a:	3a01      	subs	r2, #1
 801f10c:	f810 3b01 	ldrb.w	r3, [r0], #1
 801f110:	f801 3b01 	strb.w	r3, [r1], #1
 801f114:	b1b2      	cbz	r2, 801f144 <st_int8_copy+0x48>
 801f116:	f810 3b01 	ldrb.w	r3, [r0], #1
 801f11a:	f801 3b01 	strb.w	r3, [r1], #1
 801f11e:	2a01      	cmp	r2, #1
 801f120:	f000 8088 	beq.w	801f234 <st_int8_copy+0x138>
 801f124:	f810 3b01 	ldrb.w	r3, [r0], #1
 801f128:	f801 3b01 	strb.w	r3, [r1], #1
 801f12c:	4770      	bx	lr
 801f12e:	1883      	adds	r3, r0, r2
 801f130:	428b      	cmp	r3, r1
 801f132:	d9e8      	bls.n	801f106 <st_int8_copy+0xa>
 801f134:	440a      	add	r2, r1
 801f136:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 801f13a:	f802 1d01 	strb.w	r1, [r2, #-1]!
 801f13e:	4298      	cmp	r0, r3
 801f140:	d1f9      	bne.n	801f136 <st_int8_copy+0x3a>
 801f142:	4770      	bx	lr
 801f144:	4770      	bx	lr
 801f146:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f14a:	f001 0e03 	and.w	lr, r1, #3
 801f14e:	f1ce 0304 	rsb	r3, lr, #4
 801f152:	eba2 0c03 	sub.w	ip, r2, r3
 801f156:	f000 0803 	and.w	r8, r0, #3
 801f15a:	f1ce 0203 	rsb	r2, lr, #3
 801f15e:	f810 3b01 	ldrb.w	r3, [r0], #1
 801f162:	f801 3b01 	strb.w	r3, [r1], #1
 801f166:	b182      	cbz	r2, 801f18a <st_int8_copy+0x8e>
 801f168:	f810 3b01 	ldrb.w	r3, [r0], #1
 801f16c:	f801 3b01 	strb.w	r3, [r1], #1
 801f170:	2a01      	cmp	r2, #1
 801f172:	d00a      	beq.n	801f18a <st_int8_copy+0x8e>
 801f174:	f810 3b01 	ldrb.w	r3, [r0], #1
 801f178:	f801 3b01 	strb.w	r3, [r1], #1
 801f17c:	f1be 0f01 	cmp.w	lr, #1
 801f180:	d003      	beq.n	801f18a <st_int8_copy+0x8e>
 801f182:	f810 3b01 	ldrb.w	r3, [r0], #1
 801f186:	f801 3b01 	strb.w	r3, [r1], #1
 801f18a:	45c6      	cmp	lr, r8
 801f18c:	d02a      	beq.n	801f1e4 <st_int8_copy+0xe8>
 801f18e:	ea5f 121c 	movs.w	r2, ip, lsr #4
 801f192:	d00a      	beq.n	801f1aa <st_int8_copy+0xae>
 801f194:	f850 3b04 	ldr.w	r3, [r0], #4
 801f198:	f850 4b04 	ldr.w	r4, [r0], #4
 801f19c:	f850 5b04 	ldr.w	r5, [r0], #4
 801f1a0:	f850 6b04 	ldr.w	r6, [r0], #4
 801f1a4:	c178      	stmia	r1!, {r3, r4, r5, r6}
 801f1a6:	3a01      	subs	r2, #1
 801f1a8:	d1f4      	bne.n	801f194 <st_int8_copy+0x98>
 801f1aa:	f01c 0f08 	tst.w	ip, #8
 801f1ae:	d004      	beq.n	801f1ba <st_int8_copy+0xbe>
 801f1b0:	f850 3b04 	ldr.w	r3, [r0], #4
 801f1b4:	f850 4b04 	ldr.w	r4, [r0], #4
 801f1b8:	c118      	stmia	r1!, {r3, r4}
 801f1ba:	f01c 0f04 	tst.w	ip, #4
 801f1be:	d003      	beq.n	801f1c8 <st_int8_copy+0xcc>
 801f1c0:	f850 3b04 	ldr.w	r3, [r0], #4
 801f1c4:	f841 3b04 	str.w	r3, [r1], #4
 801f1c8:	f01c 0f02 	tst.w	ip, #2
 801f1cc:	d003      	beq.n	801f1d6 <st_int8_copy+0xda>
 801f1ce:	f830 3b02 	ldrh.w	r3, [r0], #2
 801f1d2:	f821 3b02 	strh.w	r3, [r1], #2
 801f1d6:	f01c 0f01 	tst.w	ip, #1
 801f1da:	d001      	beq.n	801f1e0 <st_int8_copy+0xe4>
 801f1dc:	7803      	ldrb	r3, [r0, #0]
 801f1de:	700b      	strb	r3, [r1, #0]
 801f1e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f1e4:	ea5f 199c 	movs.w	r9, ip, lsr #6
 801f1e8:	d00e      	beq.n	801f208 <st_int8_copy+0x10c>
 801f1ea:	4688      	mov	r8, r1
 801f1ec:	4686      	mov	lr, r0
 801f1ee:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 801f1f2:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 801f1f6:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 801f1fa:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 801f1fe:	f1b9 0901 	subs.w	r9, r9, #1
 801f202:	4641      	mov	r1, r8
 801f204:	4670      	mov	r0, lr
 801f206:	d1f0      	bne.n	801f1ea <st_int8_copy+0xee>
 801f208:	f01c 0f20 	tst.w	ip, #32
 801f20c:	d007      	beq.n	801f21e <st_int8_copy+0x122>
 801f20e:	4688      	mov	r8, r1
 801f210:	4686      	mov	lr, r0
 801f212:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 801f216:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 801f21a:	4641      	mov	r1, r8
 801f21c:	4670      	mov	r0, lr
 801f21e:	f01c 0f10 	tst.w	ip, #16
 801f222:	d001      	beq.n	801f228 <st_int8_copy+0x12c>
 801f224:	c878      	ldmia	r0!, {r3, r4, r5, r6}
 801f226:	c178      	stmia	r1!, {r3, r4, r5, r6}
 801f228:	f01c 0f08 	tst.w	ip, #8
 801f22c:	d0c5      	beq.n	801f1ba <st_int8_copy+0xbe>
 801f22e:	c818      	ldmia	r0!, {r3, r4}
 801f230:	c118      	stmia	r1!, {r3, r4}
 801f232:	e7c2      	b.n	801f1ba <st_int8_copy+0xbe>
 801f234:	4770      	bx	lr
 801f236:	bf00      	nop

0801f238 <ai_array_to_buffer_fmt>:
 801f238:	f3c0 4343 	ubfx	r3, r0, #17, #4
 801f23c:	2b02      	cmp	r3, #2
 801f23e:	d055      	beq.n	801f2ec <ai_array_to_buffer_fmt+0xb4>
 801f240:	4a2d      	ldr	r2, [pc, #180]	@ (801f2f8 <ai_array_to_buffer_fmt+0xc0>)
 801f242:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 801f246:	4293      	cmp	r3, r2
 801f248:	d010      	beq.n	801f26c <ai_array_to_buffer_fmt+0x34>
 801f24a:	dc21      	bgt.n	801f290 <ai_array_to_buffer_fmt+0x58>
 801f24c:	4a2b      	ldr	r2, [pc, #172]	@ (801f2fc <ai_array_to_buffer_fmt+0xc4>)
 801f24e:	4293      	cmp	r3, r2
 801f250:	d00c      	beq.n	801f26c <ai_array_to_buffer_fmt+0x34>
 801f252:	dd0f      	ble.n	801f274 <ai_array_to_buffer_fmt+0x3c>
 801f254:	4a2a      	ldr	r2, [pc, #168]	@ (801f300 <ai_array_to_buffer_fmt+0xc8>)
 801f256:	4293      	cmp	r3, r2
 801f258:	d008      	beq.n	801f26c <ai_array_to_buffer_fmt+0x34>
 801f25a:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 801f25e:	4293      	cmp	r3, r2
 801f260:	d004      	beq.n	801f26c <ai_array_to_buffer_fmt+0x34>
 801f262:	4a28      	ldr	r2, [pc, #160]	@ (801f304 <ai_array_to_buffer_fmt+0xcc>)
 801f264:	4293      	cmp	r3, r2
 801f266:	bf0c      	ite	eq
 801f268:	4613      	moveq	r3, r2
 801f26a:	2340      	movne	r3, #64	@ 0x40
 801f26c:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 801f270:	4318      	orrs	r0, r3
 801f272:	4770      	bx	lr
 801f274:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 801f278:	4293      	cmp	r3, r2
 801f27a:	d0f7      	beq.n	801f26c <ai_array_to_buffer_fmt+0x34>
 801f27c:	dd2c      	ble.n	801f2d8 <ai_array_to_buffer_fmt+0xa0>
 801f27e:	4a22      	ldr	r2, [pc, #136]	@ (801f308 <ai_array_to_buffer_fmt+0xd0>)
 801f280:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 801f284:	4293      	cmp	r3, r2
 801f286:	bf0c      	ite	eq
 801f288:	4613      	moveq	r3, r2
 801f28a:	2340      	movne	r3, #64	@ 0x40
 801f28c:	4318      	orrs	r0, r3
 801f28e:	4770      	bx	lr
 801f290:	4a1e      	ldr	r2, [pc, #120]	@ (801f30c <ai_array_to_buffer_fmt+0xd4>)
 801f292:	4293      	cmp	r3, r2
 801f294:	d0ea      	beq.n	801f26c <ai_array_to_buffer_fmt+0x34>
 801f296:	dd10      	ble.n	801f2ba <ai_array_to_buffer_fmt+0x82>
 801f298:	4a1d      	ldr	r2, [pc, #116]	@ (801f310 <ai_array_to_buffer_fmt+0xd8>)
 801f29a:	4293      	cmp	r3, r2
 801f29c:	d0e6      	beq.n	801f26c <ai_array_to_buffer_fmt+0x34>
 801f29e:	f202 72f1 	addw	r2, r2, #2033	@ 0x7f1
 801f2a2:	4293      	cmp	r3, r2
 801f2a4:	d0e2      	beq.n	801f26c <ai_array_to_buffer_fmt+0x34>
 801f2a6:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
 801f2aa:	4293      	cmp	r3, r2
 801f2ac:	bf0c      	ite	eq
 801f2ae:	4613      	moveq	r3, r2
 801f2b0:	2340      	movne	r3, #64	@ 0x40
 801f2b2:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 801f2b6:	4318      	orrs	r0, r3
 801f2b8:	4770      	bx	lr
 801f2ba:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 801f2be:	4293      	cmp	r3, r2
 801f2c0:	d0d4      	beq.n	801f26c <ai_array_to_buffer_fmt+0x34>
 801f2c2:	f502 7260 	add.w	r2, r2, #896	@ 0x380
 801f2c6:	4293      	cmp	r3, r2
 801f2c8:	d0d0      	beq.n	801f26c <ai_array_to_buffer_fmt+0x34>
 801f2ca:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 801f2ce:	4293      	cmp	r3, r2
 801f2d0:	bf0c      	ite	eq
 801f2d2:	4613      	moveq	r3, r2
 801f2d4:	2340      	movne	r3, #64	@ 0x40
 801f2d6:	e7c9      	b.n	801f26c <ai_array_to_buffer_fmt+0x34>
 801f2d8:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 801f2dc:	4293      	cmp	r3, r2
 801f2de:	d0c5      	beq.n	801f26c <ai_array_to_buffer_fmt+0x34>
 801f2e0:	3280      	adds	r2, #128	@ 0x80
 801f2e2:	4293      	cmp	r3, r2
 801f2e4:	bf0c      	ite	eq
 801f2e6:	4613      	moveq	r3, r2
 801f2e8:	2340      	movne	r3, #64	@ 0x40
 801f2ea:	e7bf      	b.n	801f26c <ai_array_to_buffer_fmt+0x34>
 801f2ec:	4b09      	ldr	r3, [pc, #36]	@ (801f314 <ai_array_to_buffer_fmt+0xdc>)
 801f2ee:	4003      	ands	r3, r0
 801f2f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801f2f4:	e7ba      	b.n	801f26c <ai_array_to_buffer_fmt+0x34>
 801f2f6:	bf00      	nop
 801f2f8:	00821040 	.word	0x00821040
 801f2fc:	00040840 	.word	0x00040840
 801f300:	00041040 	.word	0x00041040
 801f304:	0004084f 	.word	0x0004084f
 801f308:	00040447 	.word	0x00040447
 801f30c:	00840447 	.word	0x00840447
 801f310:	0084084f 	.word	0x0084084f
 801f314:	00803fff 	.word	0x00803fff

0801f318 <ai_array_get_data_byte_size>:
 801f318:	b169      	cbz	r1, 801f336 <ai_array_get_data_byte_size+0x1e>
 801f31a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 801f31e:	fb01 f303 	mul.w	r3, r1, r3
 801f322:	3307      	adds	r3, #7
 801f324:	f023 0307 	bic.w	r3, r3, #7
 801f328:	f3c0 5041 	ubfx	r0, r0, #21, #2
 801f32c:	fa23 f000 	lsr.w	r0, r3, r0
 801f330:	3007      	adds	r0, #7
 801f332:	08c0      	lsrs	r0, r0, #3
 801f334:	4770      	bx	lr
 801f336:	4608      	mov	r0, r1
 801f338:	4770      	bx	lr
 801f33a:	bf00      	nop

0801f33c <ai_version_get>:
 801f33c:	0212      	lsls	r2, r2, #8
 801f33e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801f342:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 801f346:	4770      	bx	lr

0801f348 <get_tensor_byte_size>:
 801f348:	b410      	push	{r4}
 801f34a:	6983      	ldr	r3, [r0, #24]
 801f34c:	68c4      	ldr	r4, [r0, #12]
 801f34e:	6941      	ldr	r1, [r0, #20]
 801f350:	681b      	ldr	r3, [r3, #0]
 801f352:	68e0      	ldr	r0, [r4, #12]
 801f354:	4a06      	ldr	r2, [pc, #24]	@ (801f370 <get_tensor_byte_size+0x28>)
 801f356:	68c9      	ldr	r1, [r1, #12]
 801f358:	bc10      	pop	{r4}
 801f35a:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 801f35e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 801f362:	fb01 f000 	mul.w	r0, r1, r0
 801f366:	4293      	cmp	r3, r2
 801f368:	bf04      	itt	eq
 801f36a:	3007      	addeq	r0, #7
 801f36c:	08c0      	lsreq	r0, r0, #3
 801f36e:	4770      	bx	lr
 801f370:	000400c0 	.word	0x000400c0

0801f374 <sbrk_aligned>:
 801f374:	b570      	push	{r4, r5, r6, lr}
 801f376:	4e0f      	ldr	r6, [pc, #60]	@ (801f3b4 <sbrk_aligned+0x40>)
 801f378:	460c      	mov	r4, r1
 801f37a:	6831      	ldr	r1, [r6, #0]
 801f37c:	4605      	mov	r5, r0
 801f37e:	b911      	cbnz	r1, 801f386 <sbrk_aligned+0x12>
 801f380:	f000 faec 	bl	801f95c <_sbrk_r>
 801f384:	6030      	str	r0, [r6, #0]
 801f386:	4621      	mov	r1, r4
 801f388:	4628      	mov	r0, r5
 801f38a:	f000 fae7 	bl	801f95c <_sbrk_r>
 801f38e:	1c43      	adds	r3, r0, #1
 801f390:	d103      	bne.n	801f39a <sbrk_aligned+0x26>
 801f392:	f04f 34ff 	mov.w	r4, #4294967295
 801f396:	4620      	mov	r0, r4
 801f398:	bd70      	pop	{r4, r5, r6, pc}
 801f39a:	1cc4      	adds	r4, r0, #3
 801f39c:	f024 0403 	bic.w	r4, r4, #3
 801f3a0:	42a0      	cmp	r0, r4
 801f3a2:	d0f8      	beq.n	801f396 <sbrk_aligned+0x22>
 801f3a4:	1a21      	subs	r1, r4, r0
 801f3a6:	4628      	mov	r0, r5
 801f3a8:	f000 fad8 	bl	801f95c <_sbrk_r>
 801f3ac:	3001      	adds	r0, #1
 801f3ae:	d1f2      	bne.n	801f396 <sbrk_aligned+0x22>
 801f3b0:	e7ef      	b.n	801f392 <sbrk_aligned+0x1e>
 801f3b2:	bf00      	nop
 801f3b4:	20001ce8 	.word	0x20001ce8

0801f3b8 <_malloc_r>:
 801f3b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f3bc:	1ccd      	adds	r5, r1, #3
 801f3be:	f025 0503 	bic.w	r5, r5, #3
 801f3c2:	3508      	adds	r5, #8
 801f3c4:	2d0c      	cmp	r5, #12
 801f3c6:	bf38      	it	cc
 801f3c8:	250c      	movcc	r5, #12
 801f3ca:	2d00      	cmp	r5, #0
 801f3cc:	4606      	mov	r6, r0
 801f3ce:	db01      	blt.n	801f3d4 <_malloc_r+0x1c>
 801f3d0:	42a9      	cmp	r1, r5
 801f3d2:	d904      	bls.n	801f3de <_malloc_r+0x26>
 801f3d4:	230c      	movs	r3, #12
 801f3d6:	6033      	str	r3, [r6, #0]
 801f3d8:	2000      	movs	r0, #0
 801f3da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f3de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801f4b4 <_malloc_r+0xfc>
 801f3e2:	f000 f869 	bl	801f4b8 <__malloc_lock>
 801f3e6:	f8d8 3000 	ldr.w	r3, [r8]
 801f3ea:	461c      	mov	r4, r3
 801f3ec:	bb44      	cbnz	r4, 801f440 <_malloc_r+0x88>
 801f3ee:	4629      	mov	r1, r5
 801f3f0:	4630      	mov	r0, r6
 801f3f2:	f7ff ffbf 	bl	801f374 <sbrk_aligned>
 801f3f6:	1c43      	adds	r3, r0, #1
 801f3f8:	4604      	mov	r4, r0
 801f3fa:	d158      	bne.n	801f4ae <_malloc_r+0xf6>
 801f3fc:	f8d8 4000 	ldr.w	r4, [r8]
 801f400:	4627      	mov	r7, r4
 801f402:	2f00      	cmp	r7, #0
 801f404:	d143      	bne.n	801f48e <_malloc_r+0xd6>
 801f406:	2c00      	cmp	r4, #0
 801f408:	d04b      	beq.n	801f4a2 <_malloc_r+0xea>
 801f40a:	6823      	ldr	r3, [r4, #0]
 801f40c:	4639      	mov	r1, r7
 801f40e:	4630      	mov	r0, r6
 801f410:	eb04 0903 	add.w	r9, r4, r3
 801f414:	f000 faa2 	bl	801f95c <_sbrk_r>
 801f418:	4581      	cmp	r9, r0
 801f41a:	d142      	bne.n	801f4a2 <_malloc_r+0xea>
 801f41c:	6821      	ldr	r1, [r4, #0]
 801f41e:	1a6d      	subs	r5, r5, r1
 801f420:	4629      	mov	r1, r5
 801f422:	4630      	mov	r0, r6
 801f424:	f7ff ffa6 	bl	801f374 <sbrk_aligned>
 801f428:	3001      	adds	r0, #1
 801f42a:	d03a      	beq.n	801f4a2 <_malloc_r+0xea>
 801f42c:	6823      	ldr	r3, [r4, #0]
 801f42e:	442b      	add	r3, r5
 801f430:	6023      	str	r3, [r4, #0]
 801f432:	f8d8 3000 	ldr.w	r3, [r8]
 801f436:	685a      	ldr	r2, [r3, #4]
 801f438:	bb62      	cbnz	r2, 801f494 <_malloc_r+0xdc>
 801f43a:	f8c8 7000 	str.w	r7, [r8]
 801f43e:	e00f      	b.n	801f460 <_malloc_r+0xa8>
 801f440:	6822      	ldr	r2, [r4, #0]
 801f442:	1b52      	subs	r2, r2, r5
 801f444:	d420      	bmi.n	801f488 <_malloc_r+0xd0>
 801f446:	2a0b      	cmp	r2, #11
 801f448:	d917      	bls.n	801f47a <_malloc_r+0xc2>
 801f44a:	1961      	adds	r1, r4, r5
 801f44c:	42a3      	cmp	r3, r4
 801f44e:	6025      	str	r5, [r4, #0]
 801f450:	bf18      	it	ne
 801f452:	6059      	strne	r1, [r3, #4]
 801f454:	6863      	ldr	r3, [r4, #4]
 801f456:	bf08      	it	eq
 801f458:	f8c8 1000 	streq.w	r1, [r8]
 801f45c:	5162      	str	r2, [r4, r5]
 801f45e:	604b      	str	r3, [r1, #4]
 801f460:	4630      	mov	r0, r6
 801f462:	f000 f82f 	bl	801f4c4 <__malloc_unlock>
 801f466:	f104 000b 	add.w	r0, r4, #11
 801f46a:	1d23      	adds	r3, r4, #4
 801f46c:	f020 0007 	bic.w	r0, r0, #7
 801f470:	1ac2      	subs	r2, r0, r3
 801f472:	bf1c      	itt	ne
 801f474:	1a1b      	subne	r3, r3, r0
 801f476:	50a3      	strne	r3, [r4, r2]
 801f478:	e7af      	b.n	801f3da <_malloc_r+0x22>
 801f47a:	6862      	ldr	r2, [r4, #4]
 801f47c:	42a3      	cmp	r3, r4
 801f47e:	bf0c      	ite	eq
 801f480:	f8c8 2000 	streq.w	r2, [r8]
 801f484:	605a      	strne	r2, [r3, #4]
 801f486:	e7eb      	b.n	801f460 <_malloc_r+0xa8>
 801f488:	4623      	mov	r3, r4
 801f48a:	6864      	ldr	r4, [r4, #4]
 801f48c:	e7ae      	b.n	801f3ec <_malloc_r+0x34>
 801f48e:	463c      	mov	r4, r7
 801f490:	687f      	ldr	r7, [r7, #4]
 801f492:	e7b6      	b.n	801f402 <_malloc_r+0x4a>
 801f494:	461a      	mov	r2, r3
 801f496:	685b      	ldr	r3, [r3, #4]
 801f498:	42a3      	cmp	r3, r4
 801f49a:	d1fb      	bne.n	801f494 <_malloc_r+0xdc>
 801f49c:	2300      	movs	r3, #0
 801f49e:	6053      	str	r3, [r2, #4]
 801f4a0:	e7de      	b.n	801f460 <_malloc_r+0xa8>
 801f4a2:	230c      	movs	r3, #12
 801f4a4:	6033      	str	r3, [r6, #0]
 801f4a6:	4630      	mov	r0, r6
 801f4a8:	f000 f80c 	bl	801f4c4 <__malloc_unlock>
 801f4ac:	e794      	b.n	801f3d8 <_malloc_r+0x20>
 801f4ae:	6005      	str	r5, [r0, #0]
 801f4b0:	e7d6      	b.n	801f460 <_malloc_r+0xa8>
 801f4b2:	bf00      	nop
 801f4b4:	20001cec 	.word	0x20001cec

0801f4b8 <__malloc_lock>:
 801f4b8:	4801      	ldr	r0, [pc, #4]	@ (801f4c0 <__malloc_lock+0x8>)
 801f4ba:	f000 ba9c 	b.w	801f9f6 <__retarget_lock_acquire_recursive>
 801f4be:	bf00      	nop
 801f4c0:	20001e30 	.word	0x20001e30

0801f4c4 <__malloc_unlock>:
 801f4c4:	4801      	ldr	r0, [pc, #4]	@ (801f4cc <__malloc_unlock+0x8>)
 801f4c6:	f000 ba97 	b.w	801f9f8 <__retarget_lock_release_recursive>
 801f4ca:	bf00      	nop
 801f4cc:	20001e30 	.word	0x20001e30

0801f4d0 <std>:
 801f4d0:	2300      	movs	r3, #0
 801f4d2:	b510      	push	{r4, lr}
 801f4d4:	4604      	mov	r4, r0
 801f4d6:	e9c0 3300 	strd	r3, r3, [r0]
 801f4da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801f4de:	6083      	str	r3, [r0, #8]
 801f4e0:	8181      	strh	r1, [r0, #12]
 801f4e2:	6643      	str	r3, [r0, #100]	@ 0x64
 801f4e4:	81c2      	strh	r2, [r0, #14]
 801f4e6:	6183      	str	r3, [r0, #24]
 801f4e8:	4619      	mov	r1, r3
 801f4ea:	2208      	movs	r2, #8
 801f4ec:	305c      	adds	r0, #92	@ 0x5c
 801f4ee:	f000 f9f9 	bl	801f8e4 <memset>
 801f4f2:	4b0d      	ldr	r3, [pc, #52]	@ (801f528 <std+0x58>)
 801f4f4:	6263      	str	r3, [r4, #36]	@ 0x24
 801f4f6:	4b0d      	ldr	r3, [pc, #52]	@ (801f52c <std+0x5c>)
 801f4f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 801f4fa:	4b0d      	ldr	r3, [pc, #52]	@ (801f530 <std+0x60>)
 801f4fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801f4fe:	4b0d      	ldr	r3, [pc, #52]	@ (801f534 <std+0x64>)
 801f500:	6323      	str	r3, [r4, #48]	@ 0x30
 801f502:	4b0d      	ldr	r3, [pc, #52]	@ (801f538 <std+0x68>)
 801f504:	6224      	str	r4, [r4, #32]
 801f506:	429c      	cmp	r4, r3
 801f508:	d006      	beq.n	801f518 <std+0x48>
 801f50a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801f50e:	4294      	cmp	r4, r2
 801f510:	d002      	beq.n	801f518 <std+0x48>
 801f512:	33d0      	adds	r3, #208	@ 0xd0
 801f514:	429c      	cmp	r4, r3
 801f516:	d105      	bne.n	801f524 <std+0x54>
 801f518:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801f51c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f520:	f000 ba68 	b.w	801f9f4 <__retarget_lock_init_recursive>
 801f524:	bd10      	pop	{r4, pc}
 801f526:	bf00      	nop
 801f528:	0801f735 	.word	0x0801f735
 801f52c:	0801f757 	.word	0x0801f757
 801f530:	0801f78f 	.word	0x0801f78f
 801f534:	0801f7b3 	.word	0x0801f7b3
 801f538:	20001cf0 	.word	0x20001cf0

0801f53c <stdio_exit_handler>:
 801f53c:	4a02      	ldr	r2, [pc, #8]	@ (801f548 <stdio_exit_handler+0xc>)
 801f53e:	4903      	ldr	r1, [pc, #12]	@ (801f54c <stdio_exit_handler+0x10>)
 801f540:	4803      	ldr	r0, [pc, #12]	@ (801f550 <stdio_exit_handler+0x14>)
 801f542:	f000 b869 	b.w	801f618 <_fwalk_sglue>
 801f546:	bf00      	nop
 801f548:	2000063c 	.word	0x2000063c
 801f54c:	08020129 	.word	0x08020129
 801f550:	2000064c 	.word	0x2000064c

0801f554 <cleanup_stdio>:
 801f554:	6841      	ldr	r1, [r0, #4]
 801f556:	4b0c      	ldr	r3, [pc, #48]	@ (801f588 <cleanup_stdio+0x34>)
 801f558:	4299      	cmp	r1, r3
 801f55a:	b510      	push	{r4, lr}
 801f55c:	4604      	mov	r4, r0
 801f55e:	d001      	beq.n	801f564 <cleanup_stdio+0x10>
 801f560:	f000 fde2 	bl	8020128 <_fflush_r>
 801f564:	68a1      	ldr	r1, [r4, #8]
 801f566:	4b09      	ldr	r3, [pc, #36]	@ (801f58c <cleanup_stdio+0x38>)
 801f568:	4299      	cmp	r1, r3
 801f56a:	d002      	beq.n	801f572 <cleanup_stdio+0x1e>
 801f56c:	4620      	mov	r0, r4
 801f56e:	f000 fddb 	bl	8020128 <_fflush_r>
 801f572:	68e1      	ldr	r1, [r4, #12]
 801f574:	4b06      	ldr	r3, [pc, #24]	@ (801f590 <cleanup_stdio+0x3c>)
 801f576:	4299      	cmp	r1, r3
 801f578:	d004      	beq.n	801f584 <cleanup_stdio+0x30>
 801f57a:	4620      	mov	r0, r4
 801f57c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f580:	f000 bdd2 	b.w	8020128 <_fflush_r>
 801f584:	bd10      	pop	{r4, pc}
 801f586:	bf00      	nop
 801f588:	20001cf0 	.word	0x20001cf0
 801f58c:	20001d58 	.word	0x20001d58
 801f590:	20001dc0 	.word	0x20001dc0

0801f594 <global_stdio_init.part.0>:
 801f594:	b510      	push	{r4, lr}
 801f596:	4b0b      	ldr	r3, [pc, #44]	@ (801f5c4 <global_stdio_init.part.0+0x30>)
 801f598:	4c0b      	ldr	r4, [pc, #44]	@ (801f5c8 <global_stdio_init.part.0+0x34>)
 801f59a:	4a0c      	ldr	r2, [pc, #48]	@ (801f5cc <global_stdio_init.part.0+0x38>)
 801f59c:	601a      	str	r2, [r3, #0]
 801f59e:	4620      	mov	r0, r4
 801f5a0:	2200      	movs	r2, #0
 801f5a2:	2104      	movs	r1, #4
 801f5a4:	f7ff ff94 	bl	801f4d0 <std>
 801f5a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801f5ac:	2201      	movs	r2, #1
 801f5ae:	2109      	movs	r1, #9
 801f5b0:	f7ff ff8e 	bl	801f4d0 <std>
 801f5b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801f5b8:	2202      	movs	r2, #2
 801f5ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f5be:	2112      	movs	r1, #18
 801f5c0:	f7ff bf86 	b.w	801f4d0 <std>
 801f5c4:	20001e28 	.word	0x20001e28
 801f5c8:	20001cf0 	.word	0x20001cf0
 801f5cc:	0801f53d 	.word	0x0801f53d

0801f5d0 <__sfp_lock_acquire>:
 801f5d0:	4801      	ldr	r0, [pc, #4]	@ (801f5d8 <__sfp_lock_acquire+0x8>)
 801f5d2:	f000 ba10 	b.w	801f9f6 <__retarget_lock_acquire_recursive>
 801f5d6:	bf00      	nop
 801f5d8:	20001e31 	.word	0x20001e31

0801f5dc <__sfp_lock_release>:
 801f5dc:	4801      	ldr	r0, [pc, #4]	@ (801f5e4 <__sfp_lock_release+0x8>)
 801f5de:	f000 ba0b 	b.w	801f9f8 <__retarget_lock_release_recursive>
 801f5e2:	bf00      	nop
 801f5e4:	20001e31 	.word	0x20001e31

0801f5e8 <__sinit>:
 801f5e8:	b510      	push	{r4, lr}
 801f5ea:	4604      	mov	r4, r0
 801f5ec:	f7ff fff0 	bl	801f5d0 <__sfp_lock_acquire>
 801f5f0:	6a23      	ldr	r3, [r4, #32]
 801f5f2:	b11b      	cbz	r3, 801f5fc <__sinit+0x14>
 801f5f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f5f8:	f7ff bff0 	b.w	801f5dc <__sfp_lock_release>
 801f5fc:	4b04      	ldr	r3, [pc, #16]	@ (801f610 <__sinit+0x28>)
 801f5fe:	6223      	str	r3, [r4, #32]
 801f600:	4b04      	ldr	r3, [pc, #16]	@ (801f614 <__sinit+0x2c>)
 801f602:	681b      	ldr	r3, [r3, #0]
 801f604:	2b00      	cmp	r3, #0
 801f606:	d1f5      	bne.n	801f5f4 <__sinit+0xc>
 801f608:	f7ff ffc4 	bl	801f594 <global_stdio_init.part.0>
 801f60c:	e7f2      	b.n	801f5f4 <__sinit+0xc>
 801f60e:	bf00      	nop
 801f610:	0801f555 	.word	0x0801f555
 801f614:	20001e28 	.word	0x20001e28

0801f618 <_fwalk_sglue>:
 801f618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f61c:	4607      	mov	r7, r0
 801f61e:	4688      	mov	r8, r1
 801f620:	4614      	mov	r4, r2
 801f622:	2600      	movs	r6, #0
 801f624:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801f628:	f1b9 0901 	subs.w	r9, r9, #1
 801f62c:	d505      	bpl.n	801f63a <_fwalk_sglue+0x22>
 801f62e:	6824      	ldr	r4, [r4, #0]
 801f630:	2c00      	cmp	r4, #0
 801f632:	d1f7      	bne.n	801f624 <_fwalk_sglue+0xc>
 801f634:	4630      	mov	r0, r6
 801f636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f63a:	89ab      	ldrh	r3, [r5, #12]
 801f63c:	2b01      	cmp	r3, #1
 801f63e:	d907      	bls.n	801f650 <_fwalk_sglue+0x38>
 801f640:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801f644:	3301      	adds	r3, #1
 801f646:	d003      	beq.n	801f650 <_fwalk_sglue+0x38>
 801f648:	4629      	mov	r1, r5
 801f64a:	4638      	mov	r0, r7
 801f64c:	47c0      	blx	r8
 801f64e:	4306      	orrs	r6, r0
 801f650:	3568      	adds	r5, #104	@ 0x68
 801f652:	e7e9      	b.n	801f628 <_fwalk_sglue+0x10>

0801f654 <iprintf>:
 801f654:	b40f      	push	{r0, r1, r2, r3}
 801f656:	b507      	push	{r0, r1, r2, lr}
 801f658:	4906      	ldr	r1, [pc, #24]	@ (801f674 <iprintf+0x20>)
 801f65a:	ab04      	add	r3, sp, #16
 801f65c:	6808      	ldr	r0, [r1, #0]
 801f65e:	f853 2b04 	ldr.w	r2, [r3], #4
 801f662:	6881      	ldr	r1, [r0, #8]
 801f664:	9301      	str	r3, [sp, #4]
 801f666:	f000 fa3b 	bl	801fae0 <_vfiprintf_r>
 801f66a:	b003      	add	sp, #12
 801f66c:	f85d eb04 	ldr.w	lr, [sp], #4
 801f670:	b004      	add	sp, #16
 801f672:	4770      	bx	lr
 801f674:	20000648 	.word	0x20000648

0801f678 <_puts_r>:
 801f678:	6a03      	ldr	r3, [r0, #32]
 801f67a:	b570      	push	{r4, r5, r6, lr}
 801f67c:	6884      	ldr	r4, [r0, #8]
 801f67e:	4605      	mov	r5, r0
 801f680:	460e      	mov	r6, r1
 801f682:	b90b      	cbnz	r3, 801f688 <_puts_r+0x10>
 801f684:	f7ff ffb0 	bl	801f5e8 <__sinit>
 801f688:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f68a:	07db      	lsls	r3, r3, #31
 801f68c:	d405      	bmi.n	801f69a <_puts_r+0x22>
 801f68e:	89a3      	ldrh	r3, [r4, #12]
 801f690:	0598      	lsls	r0, r3, #22
 801f692:	d402      	bmi.n	801f69a <_puts_r+0x22>
 801f694:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f696:	f000 f9ae 	bl	801f9f6 <__retarget_lock_acquire_recursive>
 801f69a:	89a3      	ldrh	r3, [r4, #12]
 801f69c:	0719      	lsls	r1, r3, #28
 801f69e:	d502      	bpl.n	801f6a6 <_puts_r+0x2e>
 801f6a0:	6923      	ldr	r3, [r4, #16]
 801f6a2:	2b00      	cmp	r3, #0
 801f6a4:	d135      	bne.n	801f712 <_puts_r+0x9a>
 801f6a6:	4621      	mov	r1, r4
 801f6a8:	4628      	mov	r0, r5
 801f6aa:	f000 f8c5 	bl	801f838 <__swsetup_r>
 801f6ae:	b380      	cbz	r0, 801f712 <_puts_r+0x9a>
 801f6b0:	f04f 35ff 	mov.w	r5, #4294967295
 801f6b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801f6b6:	07da      	lsls	r2, r3, #31
 801f6b8:	d405      	bmi.n	801f6c6 <_puts_r+0x4e>
 801f6ba:	89a3      	ldrh	r3, [r4, #12]
 801f6bc:	059b      	lsls	r3, r3, #22
 801f6be:	d402      	bmi.n	801f6c6 <_puts_r+0x4e>
 801f6c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801f6c2:	f000 f999 	bl	801f9f8 <__retarget_lock_release_recursive>
 801f6c6:	4628      	mov	r0, r5
 801f6c8:	bd70      	pop	{r4, r5, r6, pc}
 801f6ca:	2b00      	cmp	r3, #0
 801f6cc:	da04      	bge.n	801f6d8 <_puts_r+0x60>
 801f6ce:	69a2      	ldr	r2, [r4, #24]
 801f6d0:	429a      	cmp	r2, r3
 801f6d2:	dc17      	bgt.n	801f704 <_puts_r+0x8c>
 801f6d4:	290a      	cmp	r1, #10
 801f6d6:	d015      	beq.n	801f704 <_puts_r+0x8c>
 801f6d8:	6823      	ldr	r3, [r4, #0]
 801f6da:	1c5a      	adds	r2, r3, #1
 801f6dc:	6022      	str	r2, [r4, #0]
 801f6de:	7019      	strb	r1, [r3, #0]
 801f6e0:	68a3      	ldr	r3, [r4, #8]
 801f6e2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801f6e6:	3b01      	subs	r3, #1
 801f6e8:	60a3      	str	r3, [r4, #8]
 801f6ea:	2900      	cmp	r1, #0
 801f6ec:	d1ed      	bne.n	801f6ca <_puts_r+0x52>
 801f6ee:	2b00      	cmp	r3, #0
 801f6f0:	da11      	bge.n	801f716 <_puts_r+0x9e>
 801f6f2:	4622      	mov	r2, r4
 801f6f4:	210a      	movs	r1, #10
 801f6f6:	4628      	mov	r0, r5
 801f6f8:	f000 f85f 	bl	801f7ba <__swbuf_r>
 801f6fc:	3001      	adds	r0, #1
 801f6fe:	d0d7      	beq.n	801f6b0 <_puts_r+0x38>
 801f700:	250a      	movs	r5, #10
 801f702:	e7d7      	b.n	801f6b4 <_puts_r+0x3c>
 801f704:	4622      	mov	r2, r4
 801f706:	4628      	mov	r0, r5
 801f708:	f000 f857 	bl	801f7ba <__swbuf_r>
 801f70c:	3001      	adds	r0, #1
 801f70e:	d1e7      	bne.n	801f6e0 <_puts_r+0x68>
 801f710:	e7ce      	b.n	801f6b0 <_puts_r+0x38>
 801f712:	3e01      	subs	r6, #1
 801f714:	e7e4      	b.n	801f6e0 <_puts_r+0x68>
 801f716:	6823      	ldr	r3, [r4, #0]
 801f718:	1c5a      	adds	r2, r3, #1
 801f71a:	6022      	str	r2, [r4, #0]
 801f71c:	220a      	movs	r2, #10
 801f71e:	701a      	strb	r2, [r3, #0]
 801f720:	e7ee      	b.n	801f700 <_puts_r+0x88>
	...

0801f724 <puts>:
 801f724:	4b02      	ldr	r3, [pc, #8]	@ (801f730 <puts+0xc>)
 801f726:	4601      	mov	r1, r0
 801f728:	6818      	ldr	r0, [r3, #0]
 801f72a:	f7ff bfa5 	b.w	801f678 <_puts_r>
 801f72e:	bf00      	nop
 801f730:	20000648 	.word	0x20000648

0801f734 <__sread>:
 801f734:	b510      	push	{r4, lr}
 801f736:	460c      	mov	r4, r1
 801f738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f73c:	f000 f8fc 	bl	801f938 <_read_r>
 801f740:	2800      	cmp	r0, #0
 801f742:	bfab      	itete	ge
 801f744:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801f746:	89a3      	ldrhlt	r3, [r4, #12]
 801f748:	181b      	addge	r3, r3, r0
 801f74a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801f74e:	bfac      	ite	ge
 801f750:	6563      	strge	r3, [r4, #84]	@ 0x54
 801f752:	81a3      	strhlt	r3, [r4, #12]
 801f754:	bd10      	pop	{r4, pc}

0801f756 <__swrite>:
 801f756:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f75a:	461f      	mov	r7, r3
 801f75c:	898b      	ldrh	r3, [r1, #12]
 801f75e:	05db      	lsls	r3, r3, #23
 801f760:	4605      	mov	r5, r0
 801f762:	460c      	mov	r4, r1
 801f764:	4616      	mov	r6, r2
 801f766:	d505      	bpl.n	801f774 <__swrite+0x1e>
 801f768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f76c:	2302      	movs	r3, #2
 801f76e:	2200      	movs	r2, #0
 801f770:	f000 f8d0 	bl	801f914 <_lseek_r>
 801f774:	89a3      	ldrh	r3, [r4, #12]
 801f776:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f77a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801f77e:	81a3      	strh	r3, [r4, #12]
 801f780:	4632      	mov	r2, r6
 801f782:	463b      	mov	r3, r7
 801f784:	4628      	mov	r0, r5
 801f786:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f78a:	f000 b8f7 	b.w	801f97c <_write_r>

0801f78e <__sseek>:
 801f78e:	b510      	push	{r4, lr}
 801f790:	460c      	mov	r4, r1
 801f792:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f796:	f000 f8bd 	bl	801f914 <_lseek_r>
 801f79a:	1c43      	adds	r3, r0, #1
 801f79c:	89a3      	ldrh	r3, [r4, #12]
 801f79e:	bf15      	itete	ne
 801f7a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 801f7a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801f7a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801f7aa:	81a3      	strheq	r3, [r4, #12]
 801f7ac:	bf18      	it	ne
 801f7ae:	81a3      	strhne	r3, [r4, #12]
 801f7b0:	bd10      	pop	{r4, pc}

0801f7b2 <__sclose>:
 801f7b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f7b6:	f000 b89d 	b.w	801f8f4 <_close_r>

0801f7ba <__swbuf_r>:
 801f7ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f7bc:	460e      	mov	r6, r1
 801f7be:	4614      	mov	r4, r2
 801f7c0:	4605      	mov	r5, r0
 801f7c2:	b118      	cbz	r0, 801f7cc <__swbuf_r+0x12>
 801f7c4:	6a03      	ldr	r3, [r0, #32]
 801f7c6:	b90b      	cbnz	r3, 801f7cc <__swbuf_r+0x12>
 801f7c8:	f7ff ff0e 	bl	801f5e8 <__sinit>
 801f7cc:	69a3      	ldr	r3, [r4, #24]
 801f7ce:	60a3      	str	r3, [r4, #8]
 801f7d0:	89a3      	ldrh	r3, [r4, #12]
 801f7d2:	071a      	lsls	r2, r3, #28
 801f7d4:	d501      	bpl.n	801f7da <__swbuf_r+0x20>
 801f7d6:	6923      	ldr	r3, [r4, #16]
 801f7d8:	b943      	cbnz	r3, 801f7ec <__swbuf_r+0x32>
 801f7da:	4621      	mov	r1, r4
 801f7dc:	4628      	mov	r0, r5
 801f7de:	f000 f82b 	bl	801f838 <__swsetup_r>
 801f7e2:	b118      	cbz	r0, 801f7ec <__swbuf_r+0x32>
 801f7e4:	f04f 37ff 	mov.w	r7, #4294967295
 801f7e8:	4638      	mov	r0, r7
 801f7ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f7ec:	6823      	ldr	r3, [r4, #0]
 801f7ee:	6922      	ldr	r2, [r4, #16]
 801f7f0:	1a98      	subs	r0, r3, r2
 801f7f2:	6963      	ldr	r3, [r4, #20]
 801f7f4:	b2f6      	uxtb	r6, r6
 801f7f6:	4283      	cmp	r3, r0
 801f7f8:	4637      	mov	r7, r6
 801f7fa:	dc05      	bgt.n	801f808 <__swbuf_r+0x4e>
 801f7fc:	4621      	mov	r1, r4
 801f7fe:	4628      	mov	r0, r5
 801f800:	f000 fc92 	bl	8020128 <_fflush_r>
 801f804:	2800      	cmp	r0, #0
 801f806:	d1ed      	bne.n	801f7e4 <__swbuf_r+0x2a>
 801f808:	68a3      	ldr	r3, [r4, #8]
 801f80a:	3b01      	subs	r3, #1
 801f80c:	60a3      	str	r3, [r4, #8]
 801f80e:	6823      	ldr	r3, [r4, #0]
 801f810:	1c5a      	adds	r2, r3, #1
 801f812:	6022      	str	r2, [r4, #0]
 801f814:	701e      	strb	r6, [r3, #0]
 801f816:	6962      	ldr	r2, [r4, #20]
 801f818:	1c43      	adds	r3, r0, #1
 801f81a:	429a      	cmp	r2, r3
 801f81c:	d004      	beq.n	801f828 <__swbuf_r+0x6e>
 801f81e:	89a3      	ldrh	r3, [r4, #12]
 801f820:	07db      	lsls	r3, r3, #31
 801f822:	d5e1      	bpl.n	801f7e8 <__swbuf_r+0x2e>
 801f824:	2e0a      	cmp	r6, #10
 801f826:	d1df      	bne.n	801f7e8 <__swbuf_r+0x2e>
 801f828:	4621      	mov	r1, r4
 801f82a:	4628      	mov	r0, r5
 801f82c:	f000 fc7c 	bl	8020128 <_fflush_r>
 801f830:	2800      	cmp	r0, #0
 801f832:	d0d9      	beq.n	801f7e8 <__swbuf_r+0x2e>
 801f834:	e7d6      	b.n	801f7e4 <__swbuf_r+0x2a>
	...

0801f838 <__swsetup_r>:
 801f838:	b538      	push	{r3, r4, r5, lr}
 801f83a:	4b29      	ldr	r3, [pc, #164]	@ (801f8e0 <__swsetup_r+0xa8>)
 801f83c:	4605      	mov	r5, r0
 801f83e:	6818      	ldr	r0, [r3, #0]
 801f840:	460c      	mov	r4, r1
 801f842:	b118      	cbz	r0, 801f84c <__swsetup_r+0x14>
 801f844:	6a03      	ldr	r3, [r0, #32]
 801f846:	b90b      	cbnz	r3, 801f84c <__swsetup_r+0x14>
 801f848:	f7ff fece 	bl	801f5e8 <__sinit>
 801f84c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f850:	0719      	lsls	r1, r3, #28
 801f852:	d422      	bmi.n	801f89a <__swsetup_r+0x62>
 801f854:	06da      	lsls	r2, r3, #27
 801f856:	d407      	bmi.n	801f868 <__swsetup_r+0x30>
 801f858:	2209      	movs	r2, #9
 801f85a:	602a      	str	r2, [r5, #0]
 801f85c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801f860:	81a3      	strh	r3, [r4, #12]
 801f862:	f04f 30ff 	mov.w	r0, #4294967295
 801f866:	e033      	b.n	801f8d0 <__swsetup_r+0x98>
 801f868:	0758      	lsls	r0, r3, #29
 801f86a:	d512      	bpl.n	801f892 <__swsetup_r+0x5a>
 801f86c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801f86e:	b141      	cbz	r1, 801f882 <__swsetup_r+0x4a>
 801f870:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801f874:	4299      	cmp	r1, r3
 801f876:	d002      	beq.n	801f87e <__swsetup_r+0x46>
 801f878:	4628      	mov	r0, r5
 801f87a:	f000 f8bf 	bl	801f9fc <_free_r>
 801f87e:	2300      	movs	r3, #0
 801f880:	6363      	str	r3, [r4, #52]	@ 0x34
 801f882:	89a3      	ldrh	r3, [r4, #12]
 801f884:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801f888:	81a3      	strh	r3, [r4, #12]
 801f88a:	2300      	movs	r3, #0
 801f88c:	6063      	str	r3, [r4, #4]
 801f88e:	6923      	ldr	r3, [r4, #16]
 801f890:	6023      	str	r3, [r4, #0]
 801f892:	89a3      	ldrh	r3, [r4, #12]
 801f894:	f043 0308 	orr.w	r3, r3, #8
 801f898:	81a3      	strh	r3, [r4, #12]
 801f89a:	6923      	ldr	r3, [r4, #16]
 801f89c:	b94b      	cbnz	r3, 801f8b2 <__swsetup_r+0x7a>
 801f89e:	89a3      	ldrh	r3, [r4, #12]
 801f8a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801f8a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801f8a8:	d003      	beq.n	801f8b2 <__swsetup_r+0x7a>
 801f8aa:	4621      	mov	r1, r4
 801f8ac:	4628      	mov	r0, r5
 801f8ae:	f000 fc89 	bl	80201c4 <__smakebuf_r>
 801f8b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801f8b6:	f013 0201 	ands.w	r2, r3, #1
 801f8ba:	d00a      	beq.n	801f8d2 <__swsetup_r+0x9a>
 801f8bc:	2200      	movs	r2, #0
 801f8be:	60a2      	str	r2, [r4, #8]
 801f8c0:	6962      	ldr	r2, [r4, #20]
 801f8c2:	4252      	negs	r2, r2
 801f8c4:	61a2      	str	r2, [r4, #24]
 801f8c6:	6922      	ldr	r2, [r4, #16]
 801f8c8:	b942      	cbnz	r2, 801f8dc <__swsetup_r+0xa4>
 801f8ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801f8ce:	d1c5      	bne.n	801f85c <__swsetup_r+0x24>
 801f8d0:	bd38      	pop	{r3, r4, r5, pc}
 801f8d2:	0799      	lsls	r1, r3, #30
 801f8d4:	bf58      	it	pl
 801f8d6:	6962      	ldrpl	r2, [r4, #20]
 801f8d8:	60a2      	str	r2, [r4, #8]
 801f8da:	e7f4      	b.n	801f8c6 <__swsetup_r+0x8e>
 801f8dc:	2000      	movs	r0, #0
 801f8de:	e7f7      	b.n	801f8d0 <__swsetup_r+0x98>
 801f8e0:	20000648 	.word	0x20000648

0801f8e4 <memset>:
 801f8e4:	4402      	add	r2, r0
 801f8e6:	4603      	mov	r3, r0
 801f8e8:	4293      	cmp	r3, r2
 801f8ea:	d100      	bne.n	801f8ee <memset+0xa>
 801f8ec:	4770      	bx	lr
 801f8ee:	f803 1b01 	strb.w	r1, [r3], #1
 801f8f2:	e7f9      	b.n	801f8e8 <memset+0x4>

0801f8f4 <_close_r>:
 801f8f4:	b538      	push	{r3, r4, r5, lr}
 801f8f6:	4d06      	ldr	r5, [pc, #24]	@ (801f910 <_close_r+0x1c>)
 801f8f8:	2300      	movs	r3, #0
 801f8fa:	4604      	mov	r4, r0
 801f8fc:	4608      	mov	r0, r1
 801f8fe:	602b      	str	r3, [r5, #0]
 801f900:	f7e1 ffab 	bl	800185a <_close>
 801f904:	1c43      	adds	r3, r0, #1
 801f906:	d102      	bne.n	801f90e <_close_r+0x1a>
 801f908:	682b      	ldr	r3, [r5, #0]
 801f90a:	b103      	cbz	r3, 801f90e <_close_r+0x1a>
 801f90c:	6023      	str	r3, [r4, #0]
 801f90e:	bd38      	pop	{r3, r4, r5, pc}
 801f910:	20001e2c 	.word	0x20001e2c

0801f914 <_lseek_r>:
 801f914:	b538      	push	{r3, r4, r5, lr}
 801f916:	4d07      	ldr	r5, [pc, #28]	@ (801f934 <_lseek_r+0x20>)
 801f918:	4604      	mov	r4, r0
 801f91a:	4608      	mov	r0, r1
 801f91c:	4611      	mov	r1, r2
 801f91e:	2200      	movs	r2, #0
 801f920:	602a      	str	r2, [r5, #0]
 801f922:	461a      	mov	r2, r3
 801f924:	f7e1 ffbd 	bl	80018a2 <_lseek>
 801f928:	1c43      	adds	r3, r0, #1
 801f92a:	d102      	bne.n	801f932 <_lseek_r+0x1e>
 801f92c:	682b      	ldr	r3, [r5, #0]
 801f92e:	b103      	cbz	r3, 801f932 <_lseek_r+0x1e>
 801f930:	6023      	str	r3, [r4, #0]
 801f932:	bd38      	pop	{r3, r4, r5, pc}
 801f934:	20001e2c 	.word	0x20001e2c

0801f938 <_read_r>:
 801f938:	b538      	push	{r3, r4, r5, lr}
 801f93a:	4d07      	ldr	r5, [pc, #28]	@ (801f958 <_read_r+0x20>)
 801f93c:	4604      	mov	r4, r0
 801f93e:	4608      	mov	r0, r1
 801f940:	4611      	mov	r1, r2
 801f942:	2200      	movs	r2, #0
 801f944:	602a      	str	r2, [r5, #0]
 801f946:	461a      	mov	r2, r3
 801f948:	f7e1 ff4e 	bl	80017e8 <_read>
 801f94c:	1c43      	adds	r3, r0, #1
 801f94e:	d102      	bne.n	801f956 <_read_r+0x1e>
 801f950:	682b      	ldr	r3, [r5, #0]
 801f952:	b103      	cbz	r3, 801f956 <_read_r+0x1e>
 801f954:	6023      	str	r3, [r4, #0]
 801f956:	bd38      	pop	{r3, r4, r5, pc}
 801f958:	20001e2c 	.word	0x20001e2c

0801f95c <_sbrk_r>:
 801f95c:	b538      	push	{r3, r4, r5, lr}
 801f95e:	4d06      	ldr	r5, [pc, #24]	@ (801f978 <_sbrk_r+0x1c>)
 801f960:	2300      	movs	r3, #0
 801f962:	4604      	mov	r4, r0
 801f964:	4608      	mov	r0, r1
 801f966:	602b      	str	r3, [r5, #0]
 801f968:	f7e1 ffa8 	bl	80018bc <_sbrk>
 801f96c:	1c43      	adds	r3, r0, #1
 801f96e:	d102      	bne.n	801f976 <_sbrk_r+0x1a>
 801f970:	682b      	ldr	r3, [r5, #0]
 801f972:	b103      	cbz	r3, 801f976 <_sbrk_r+0x1a>
 801f974:	6023      	str	r3, [r4, #0]
 801f976:	bd38      	pop	{r3, r4, r5, pc}
 801f978:	20001e2c 	.word	0x20001e2c

0801f97c <_write_r>:
 801f97c:	b538      	push	{r3, r4, r5, lr}
 801f97e:	4d07      	ldr	r5, [pc, #28]	@ (801f99c <_write_r+0x20>)
 801f980:	4604      	mov	r4, r0
 801f982:	4608      	mov	r0, r1
 801f984:	4611      	mov	r1, r2
 801f986:	2200      	movs	r2, #0
 801f988:	602a      	str	r2, [r5, #0]
 801f98a:	461a      	mov	r2, r3
 801f98c:	f7e1 ff49 	bl	8001822 <_write>
 801f990:	1c43      	adds	r3, r0, #1
 801f992:	d102      	bne.n	801f99a <_write_r+0x1e>
 801f994:	682b      	ldr	r3, [r5, #0]
 801f996:	b103      	cbz	r3, 801f99a <_write_r+0x1e>
 801f998:	6023      	str	r3, [r4, #0]
 801f99a:	bd38      	pop	{r3, r4, r5, pc}
 801f99c:	20001e2c 	.word	0x20001e2c

0801f9a0 <__errno>:
 801f9a0:	4b01      	ldr	r3, [pc, #4]	@ (801f9a8 <__errno+0x8>)
 801f9a2:	6818      	ldr	r0, [r3, #0]
 801f9a4:	4770      	bx	lr
 801f9a6:	bf00      	nop
 801f9a8:	20000648 	.word	0x20000648

0801f9ac <__libc_init_array>:
 801f9ac:	b570      	push	{r4, r5, r6, lr}
 801f9ae:	4d0d      	ldr	r5, [pc, #52]	@ (801f9e4 <__libc_init_array+0x38>)
 801f9b0:	4c0d      	ldr	r4, [pc, #52]	@ (801f9e8 <__libc_init_array+0x3c>)
 801f9b2:	1b64      	subs	r4, r4, r5
 801f9b4:	10a4      	asrs	r4, r4, #2
 801f9b6:	2600      	movs	r6, #0
 801f9b8:	42a6      	cmp	r6, r4
 801f9ba:	d109      	bne.n	801f9d0 <__libc_init_array+0x24>
 801f9bc:	4d0b      	ldr	r5, [pc, #44]	@ (801f9ec <__libc_init_array+0x40>)
 801f9be:	4c0c      	ldr	r4, [pc, #48]	@ (801f9f0 <__libc_init_array+0x44>)
 801f9c0:	f000 fe22 	bl	8020608 <_init>
 801f9c4:	1b64      	subs	r4, r4, r5
 801f9c6:	10a4      	asrs	r4, r4, #2
 801f9c8:	2600      	movs	r6, #0
 801f9ca:	42a6      	cmp	r6, r4
 801f9cc:	d105      	bne.n	801f9da <__libc_init_array+0x2e>
 801f9ce:	bd70      	pop	{r4, r5, r6, pc}
 801f9d0:	f855 3b04 	ldr.w	r3, [r5], #4
 801f9d4:	4798      	blx	r3
 801f9d6:	3601      	adds	r6, #1
 801f9d8:	e7ee      	b.n	801f9b8 <__libc_init_array+0xc>
 801f9da:	f855 3b04 	ldr.w	r3, [r5], #4
 801f9de:	4798      	blx	r3
 801f9e0:	3601      	adds	r6, #1
 801f9e2:	e7f2      	b.n	801f9ca <__libc_init_array+0x1e>
 801f9e4:	08021360 	.word	0x08021360
 801f9e8:	08021360 	.word	0x08021360
 801f9ec:	08021360 	.word	0x08021360
 801f9f0:	08021364 	.word	0x08021364

0801f9f4 <__retarget_lock_init_recursive>:
 801f9f4:	4770      	bx	lr

0801f9f6 <__retarget_lock_acquire_recursive>:
 801f9f6:	4770      	bx	lr

0801f9f8 <__retarget_lock_release_recursive>:
 801f9f8:	4770      	bx	lr
	...

0801f9fc <_free_r>:
 801f9fc:	b538      	push	{r3, r4, r5, lr}
 801f9fe:	4605      	mov	r5, r0
 801fa00:	2900      	cmp	r1, #0
 801fa02:	d041      	beq.n	801fa88 <_free_r+0x8c>
 801fa04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801fa08:	1f0c      	subs	r4, r1, #4
 801fa0a:	2b00      	cmp	r3, #0
 801fa0c:	bfb8      	it	lt
 801fa0e:	18e4      	addlt	r4, r4, r3
 801fa10:	f7ff fd52 	bl	801f4b8 <__malloc_lock>
 801fa14:	4a1d      	ldr	r2, [pc, #116]	@ (801fa8c <_free_r+0x90>)
 801fa16:	6813      	ldr	r3, [r2, #0]
 801fa18:	b933      	cbnz	r3, 801fa28 <_free_r+0x2c>
 801fa1a:	6063      	str	r3, [r4, #4]
 801fa1c:	6014      	str	r4, [r2, #0]
 801fa1e:	4628      	mov	r0, r5
 801fa20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801fa24:	f7ff bd4e 	b.w	801f4c4 <__malloc_unlock>
 801fa28:	42a3      	cmp	r3, r4
 801fa2a:	d908      	bls.n	801fa3e <_free_r+0x42>
 801fa2c:	6820      	ldr	r0, [r4, #0]
 801fa2e:	1821      	adds	r1, r4, r0
 801fa30:	428b      	cmp	r3, r1
 801fa32:	bf01      	itttt	eq
 801fa34:	6819      	ldreq	r1, [r3, #0]
 801fa36:	685b      	ldreq	r3, [r3, #4]
 801fa38:	1809      	addeq	r1, r1, r0
 801fa3a:	6021      	streq	r1, [r4, #0]
 801fa3c:	e7ed      	b.n	801fa1a <_free_r+0x1e>
 801fa3e:	461a      	mov	r2, r3
 801fa40:	685b      	ldr	r3, [r3, #4]
 801fa42:	b10b      	cbz	r3, 801fa48 <_free_r+0x4c>
 801fa44:	42a3      	cmp	r3, r4
 801fa46:	d9fa      	bls.n	801fa3e <_free_r+0x42>
 801fa48:	6811      	ldr	r1, [r2, #0]
 801fa4a:	1850      	adds	r0, r2, r1
 801fa4c:	42a0      	cmp	r0, r4
 801fa4e:	d10b      	bne.n	801fa68 <_free_r+0x6c>
 801fa50:	6820      	ldr	r0, [r4, #0]
 801fa52:	4401      	add	r1, r0
 801fa54:	1850      	adds	r0, r2, r1
 801fa56:	4283      	cmp	r3, r0
 801fa58:	6011      	str	r1, [r2, #0]
 801fa5a:	d1e0      	bne.n	801fa1e <_free_r+0x22>
 801fa5c:	6818      	ldr	r0, [r3, #0]
 801fa5e:	685b      	ldr	r3, [r3, #4]
 801fa60:	6053      	str	r3, [r2, #4]
 801fa62:	4408      	add	r0, r1
 801fa64:	6010      	str	r0, [r2, #0]
 801fa66:	e7da      	b.n	801fa1e <_free_r+0x22>
 801fa68:	d902      	bls.n	801fa70 <_free_r+0x74>
 801fa6a:	230c      	movs	r3, #12
 801fa6c:	602b      	str	r3, [r5, #0]
 801fa6e:	e7d6      	b.n	801fa1e <_free_r+0x22>
 801fa70:	6820      	ldr	r0, [r4, #0]
 801fa72:	1821      	adds	r1, r4, r0
 801fa74:	428b      	cmp	r3, r1
 801fa76:	bf04      	itt	eq
 801fa78:	6819      	ldreq	r1, [r3, #0]
 801fa7a:	685b      	ldreq	r3, [r3, #4]
 801fa7c:	6063      	str	r3, [r4, #4]
 801fa7e:	bf04      	itt	eq
 801fa80:	1809      	addeq	r1, r1, r0
 801fa82:	6021      	streq	r1, [r4, #0]
 801fa84:	6054      	str	r4, [r2, #4]
 801fa86:	e7ca      	b.n	801fa1e <_free_r+0x22>
 801fa88:	bd38      	pop	{r3, r4, r5, pc}
 801fa8a:	bf00      	nop
 801fa8c:	20001cec 	.word	0x20001cec

0801fa90 <__sfputc_r>:
 801fa90:	6893      	ldr	r3, [r2, #8]
 801fa92:	3b01      	subs	r3, #1
 801fa94:	2b00      	cmp	r3, #0
 801fa96:	b410      	push	{r4}
 801fa98:	6093      	str	r3, [r2, #8]
 801fa9a:	da07      	bge.n	801faac <__sfputc_r+0x1c>
 801fa9c:	6994      	ldr	r4, [r2, #24]
 801fa9e:	42a3      	cmp	r3, r4
 801faa0:	db01      	blt.n	801faa6 <__sfputc_r+0x16>
 801faa2:	290a      	cmp	r1, #10
 801faa4:	d102      	bne.n	801faac <__sfputc_r+0x1c>
 801faa6:	bc10      	pop	{r4}
 801faa8:	f7ff be87 	b.w	801f7ba <__swbuf_r>
 801faac:	6813      	ldr	r3, [r2, #0]
 801faae:	1c58      	adds	r0, r3, #1
 801fab0:	6010      	str	r0, [r2, #0]
 801fab2:	7019      	strb	r1, [r3, #0]
 801fab4:	4608      	mov	r0, r1
 801fab6:	bc10      	pop	{r4}
 801fab8:	4770      	bx	lr

0801faba <__sfputs_r>:
 801faba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fabc:	4606      	mov	r6, r0
 801fabe:	460f      	mov	r7, r1
 801fac0:	4614      	mov	r4, r2
 801fac2:	18d5      	adds	r5, r2, r3
 801fac4:	42ac      	cmp	r4, r5
 801fac6:	d101      	bne.n	801facc <__sfputs_r+0x12>
 801fac8:	2000      	movs	r0, #0
 801faca:	e007      	b.n	801fadc <__sfputs_r+0x22>
 801facc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fad0:	463a      	mov	r2, r7
 801fad2:	4630      	mov	r0, r6
 801fad4:	f7ff ffdc 	bl	801fa90 <__sfputc_r>
 801fad8:	1c43      	adds	r3, r0, #1
 801fada:	d1f3      	bne.n	801fac4 <__sfputs_r+0xa>
 801fadc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801fae0 <_vfiprintf_r>:
 801fae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fae4:	460d      	mov	r5, r1
 801fae6:	b09d      	sub	sp, #116	@ 0x74
 801fae8:	4614      	mov	r4, r2
 801faea:	4698      	mov	r8, r3
 801faec:	4606      	mov	r6, r0
 801faee:	b118      	cbz	r0, 801faf8 <_vfiprintf_r+0x18>
 801faf0:	6a03      	ldr	r3, [r0, #32]
 801faf2:	b90b      	cbnz	r3, 801faf8 <_vfiprintf_r+0x18>
 801faf4:	f7ff fd78 	bl	801f5e8 <__sinit>
 801faf8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801fafa:	07d9      	lsls	r1, r3, #31
 801fafc:	d405      	bmi.n	801fb0a <_vfiprintf_r+0x2a>
 801fafe:	89ab      	ldrh	r3, [r5, #12]
 801fb00:	059a      	lsls	r2, r3, #22
 801fb02:	d402      	bmi.n	801fb0a <_vfiprintf_r+0x2a>
 801fb04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801fb06:	f7ff ff76 	bl	801f9f6 <__retarget_lock_acquire_recursive>
 801fb0a:	89ab      	ldrh	r3, [r5, #12]
 801fb0c:	071b      	lsls	r3, r3, #28
 801fb0e:	d501      	bpl.n	801fb14 <_vfiprintf_r+0x34>
 801fb10:	692b      	ldr	r3, [r5, #16]
 801fb12:	b99b      	cbnz	r3, 801fb3c <_vfiprintf_r+0x5c>
 801fb14:	4629      	mov	r1, r5
 801fb16:	4630      	mov	r0, r6
 801fb18:	f7ff fe8e 	bl	801f838 <__swsetup_r>
 801fb1c:	b170      	cbz	r0, 801fb3c <_vfiprintf_r+0x5c>
 801fb1e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801fb20:	07dc      	lsls	r4, r3, #31
 801fb22:	d504      	bpl.n	801fb2e <_vfiprintf_r+0x4e>
 801fb24:	f04f 30ff 	mov.w	r0, #4294967295
 801fb28:	b01d      	add	sp, #116	@ 0x74
 801fb2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fb2e:	89ab      	ldrh	r3, [r5, #12]
 801fb30:	0598      	lsls	r0, r3, #22
 801fb32:	d4f7      	bmi.n	801fb24 <_vfiprintf_r+0x44>
 801fb34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801fb36:	f7ff ff5f 	bl	801f9f8 <__retarget_lock_release_recursive>
 801fb3a:	e7f3      	b.n	801fb24 <_vfiprintf_r+0x44>
 801fb3c:	2300      	movs	r3, #0
 801fb3e:	9309      	str	r3, [sp, #36]	@ 0x24
 801fb40:	2320      	movs	r3, #32
 801fb42:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801fb46:	f8cd 800c 	str.w	r8, [sp, #12]
 801fb4a:	2330      	movs	r3, #48	@ 0x30
 801fb4c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801fcfc <_vfiprintf_r+0x21c>
 801fb50:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801fb54:	f04f 0901 	mov.w	r9, #1
 801fb58:	4623      	mov	r3, r4
 801fb5a:	469a      	mov	sl, r3
 801fb5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801fb60:	b10a      	cbz	r2, 801fb66 <_vfiprintf_r+0x86>
 801fb62:	2a25      	cmp	r2, #37	@ 0x25
 801fb64:	d1f9      	bne.n	801fb5a <_vfiprintf_r+0x7a>
 801fb66:	ebba 0b04 	subs.w	fp, sl, r4
 801fb6a:	d00b      	beq.n	801fb84 <_vfiprintf_r+0xa4>
 801fb6c:	465b      	mov	r3, fp
 801fb6e:	4622      	mov	r2, r4
 801fb70:	4629      	mov	r1, r5
 801fb72:	4630      	mov	r0, r6
 801fb74:	f7ff ffa1 	bl	801faba <__sfputs_r>
 801fb78:	3001      	adds	r0, #1
 801fb7a:	f000 80a7 	beq.w	801fccc <_vfiprintf_r+0x1ec>
 801fb7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801fb80:	445a      	add	r2, fp
 801fb82:	9209      	str	r2, [sp, #36]	@ 0x24
 801fb84:	f89a 3000 	ldrb.w	r3, [sl]
 801fb88:	2b00      	cmp	r3, #0
 801fb8a:	f000 809f 	beq.w	801fccc <_vfiprintf_r+0x1ec>
 801fb8e:	2300      	movs	r3, #0
 801fb90:	f04f 32ff 	mov.w	r2, #4294967295
 801fb94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801fb98:	f10a 0a01 	add.w	sl, sl, #1
 801fb9c:	9304      	str	r3, [sp, #16]
 801fb9e:	9307      	str	r3, [sp, #28]
 801fba0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801fba4:	931a      	str	r3, [sp, #104]	@ 0x68
 801fba6:	4654      	mov	r4, sl
 801fba8:	2205      	movs	r2, #5
 801fbaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fbae:	4853      	ldr	r0, [pc, #332]	@ (801fcfc <_vfiprintf_r+0x21c>)
 801fbb0:	f7e0 faee 	bl	8000190 <memchr>
 801fbb4:	9a04      	ldr	r2, [sp, #16]
 801fbb6:	b9d8      	cbnz	r0, 801fbf0 <_vfiprintf_r+0x110>
 801fbb8:	06d1      	lsls	r1, r2, #27
 801fbba:	bf44      	itt	mi
 801fbbc:	2320      	movmi	r3, #32
 801fbbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801fbc2:	0713      	lsls	r3, r2, #28
 801fbc4:	bf44      	itt	mi
 801fbc6:	232b      	movmi	r3, #43	@ 0x2b
 801fbc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801fbcc:	f89a 3000 	ldrb.w	r3, [sl]
 801fbd0:	2b2a      	cmp	r3, #42	@ 0x2a
 801fbd2:	d015      	beq.n	801fc00 <_vfiprintf_r+0x120>
 801fbd4:	9a07      	ldr	r2, [sp, #28]
 801fbd6:	4654      	mov	r4, sl
 801fbd8:	2000      	movs	r0, #0
 801fbda:	f04f 0c0a 	mov.w	ip, #10
 801fbde:	4621      	mov	r1, r4
 801fbe0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801fbe4:	3b30      	subs	r3, #48	@ 0x30
 801fbe6:	2b09      	cmp	r3, #9
 801fbe8:	d94b      	bls.n	801fc82 <_vfiprintf_r+0x1a2>
 801fbea:	b1b0      	cbz	r0, 801fc1a <_vfiprintf_r+0x13a>
 801fbec:	9207      	str	r2, [sp, #28]
 801fbee:	e014      	b.n	801fc1a <_vfiprintf_r+0x13a>
 801fbf0:	eba0 0308 	sub.w	r3, r0, r8
 801fbf4:	fa09 f303 	lsl.w	r3, r9, r3
 801fbf8:	4313      	orrs	r3, r2
 801fbfa:	9304      	str	r3, [sp, #16]
 801fbfc:	46a2      	mov	sl, r4
 801fbfe:	e7d2      	b.n	801fba6 <_vfiprintf_r+0xc6>
 801fc00:	9b03      	ldr	r3, [sp, #12]
 801fc02:	1d19      	adds	r1, r3, #4
 801fc04:	681b      	ldr	r3, [r3, #0]
 801fc06:	9103      	str	r1, [sp, #12]
 801fc08:	2b00      	cmp	r3, #0
 801fc0a:	bfbb      	ittet	lt
 801fc0c:	425b      	neglt	r3, r3
 801fc0e:	f042 0202 	orrlt.w	r2, r2, #2
 801fc12:	9307      	strge	r3, [sp, #28]
 801fc14:	9307      	strlt	r3, [sp, #28]
 801fc16:	bfb8      	it	lt
 801fc18:	9204      	strlt	r2, [sp, #16]
 801fc1a:	7823      	ldrb	r3, [r4, #0]
 801fc1c:	2b2e      	cmp	r3, #46	@ 0x2e
 801fc1e:	d10a      	bne.n	801fc36 <_vfiprintf_r+0x156>
 801fc20:	7863      	ldrb	r3, [r4, #1]
 801fc22:	2b2a      	cmp	r3, #42	@ 0x2a
 801fc24:	d132      	bne.n	801fc8c <_vfiprintf_r+0x1ac>
 801fc26:	9b03      	ldr	r3, [sp, #12]
 801fc28:	1d1a      	adds	r2, r3, #4
 801fc2a:	681b      	ldr	r3, [r3, #0]
 801fc2c:	9203      	str	r2, [sp, #12]
 801fc2e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801fc32:	3402      	adds	r4, #2
 801fc34:	9305      	str	r3, [sp, #20]
 801fc36:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 801fd00 <_vfiprintf_r+0x220>
 801fc3a:	7821      	ldrb	r1, [r4, #0]
 801fc3c:	2203      	movs	r2, #3
 801fc3e:	4650      	mov	r0, sl
 801fc40:	f7e0 faa6 	bl	8000190 <memchr>
 801fc44:	b138      	cbz	r0, 801fc56 <_vfiprintf_r+0x176>
 801fc46:	9b04      	ldr	r3, [sp, #16]
 801fc48:	eba0 000a 	sub.w	r0, r0, sl
 801fc4c:	2240      	movs	r2, #64	@ 0x40
 801fc4e:	4082      	lsls	r2, r0
 801fc50:	4313      	orrs	r3, r2
 801fc52:	3401      	adds	r4, #1
 801fc54:	9304      	str	r3, [sp, #16]
 801fc56:	f814 1b01 	ldrb.w	r1, [r4], #1
 801fc5a:	482a      	ldr	r0, [pc, #168]	@ (801fd04 <_vfiprintf_r+0x224>)
 801fc5c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801fc60:	2206      	movs	r2, #6
 801fc62:	f7e0 fa95 	bl	8000190 <memchr>
 801fc66:	2800      	cmp	r0, #0
 801fc68:	d03f      	beq.n	801fcea <_vfiprintf_r+0x20a>
 801fc6a:	4b27      	ldr	r3, [pc, #156]	@ (801fd08 <_vfiprintf_r+0x228>)
 801fc6c:	bb1b      	cbnz	r3, 801fcb6 <_vfiprintf_r+0x1d6>
 801fc6e:	9b03      	ldr	r3, [sp, #12]
 801fc70:	3307      	adds	r3, #7
 801fc72:	f023 0307 	bic.w	r3, r3, #7
 801fc76:	3308      	adds	r3, #8
 801fc78:	9303      	str	r3, [sp, #12]
 801fc7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fc7c:	443b      	add	r3, r7
 801fc7e:	9309      	str	r3, [sp, #36]	@ 0x24
 801fc80:	e76a      	b.n	801fb58 <_vfiprintf_r+0x78>
 801fc82:	fb0c 3202 	mla	r2, ip, r2, r3
 801fc86:	460c      	mov	r4, r1
 801fc88:	2001      	movs	r0, #1
 801fc8a:	e7a8      	b.n	801fbde <_vfiprintf_r+0xfe>
 801fc8c:	2300      	movs	r3, #0
 801fc8e:	3401      	adds	r4, #1
 801fc90:	9305      	str	r3, [sp, #20]
 801fc92:	4619      	mov	r1, r3
 801fc94:	f04f 0c0a 	mov.w	ip, #10
 801fc98:	4620      	mov	r0, r4
 801fc9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801fc9e:	3a30      	subs	r2, #48	@ 0x30
 801fca0:	2a09      	cmp	r2, #9
 801fca2:	d903      	bls.n	801fcac <_vfiprintf_r+0x1cc>
 801fca4:	2b00      	cmp	r3, #0
 801fca6:	d0c6      	beq.n	801fc36 <_vfiprintf_r+0x156>
 801fca8:	9105      	str	r1, [sp, #20]
 801fcaa:	e7c4      	b.n	801fc36 <_vfiprintf_r+0x156>
 801fcac:	fb0c 2101 	mla	r1, ip, r1, r2
 801fcb0:	4604      	mov	r4, r0
 801fcb2:	2301      	movs	r3, #1
 801fcb4:	e7f0      	b.n	801fc98 <_vfiprintf_r+0x1b8>
 801fcb6:	ab03      	add	r3, sp, #12
 801fcb8:	9300      	str	r3, [sp, #0]
 801fcba:	462a      	mov	r2, r5
 801fcbc:	4b13      	ldr	r3, [pc, #76]	@ (801fd0c <_vfiprintf_r+0x22c>)
 801fcbe:	a904      	add	r1, sp, #16
 801fcc0:	4630      	mov	r0, r6
 801fcc2:	f3af 8000 	nop.w
 801fcc6:	4607      	mov	r7, r0
 801fcc8:	1c78      	adds	r0, r7, #1
 801fcca:	d1d6      	bne.n	801fc7a <_vfiprintf_r+0x19a>
 801fccc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801fcce:	07d9      	lsls	r1, r3, #31
 801fcd0:	d405      	bmi.n	801fcde <_vfiprintf_r+0x1fe>
 801fcd2:	89ab      	ldrh	r3, [r5, #12]
 801fcd4:	059a      	lsls	r2, r3, #22
 801fcd6:	d402      	bmi.n	801fcde <_vfiprintf_r+0x1fe>
 801fcd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801fcda:	f7ff fe8d 	bl	801f9f8 <__retarget_lock_release_recursive>
 801fcde:	89ab      	ldrh	r3, [r5, #12]
 801fce0:	065b      	lsls	r3, r3, #25
 801fce2:	f53f af1f 	bmi.w	801fb24 <_vfiprintf_r+0x44>
 801fce6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801fce8:	e71e      	b.n	801fb28 <_vfiprintf_r+0x48>
 801fcea:	ab03      	add	r3, sp, #12
 801fcec:	9300      	str	r3, [sp, #0]
 801fcee:	462a      	mov	r2, r5
 801fcf0:	4b06      	ldr	r3, [pc, #24]	@ (801fd0c <_vfiprintf_r+0x22c>)
 801fcf2:	a904      	add	r1, sp, #16
 801fcf4:	4630      	mov	r0, r6
 801fcf6:	f000 f879 	bl	801fdec <_printf_i>
 801fcfa:	e7e4      	b.n	801fcc6 <_vfiprintf_r+0x1e6>
 801fcfc:	08021308 	.word	0x08021308
 801fd00:	0802130e 	.word	0x0802130e
 801fd04:	08021312 	.word	0x08021312
 801fd08:	00000000 	.word	0x00000000
 801fd0c:	0801fabb 	.word	0x0801fabb

0801fd10 <_printf_common>:
 801fd10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fd14:	4616      	mov	r6, r2
 801fd16:	4698      	mov	r8, r3
 801fd18:	688a      	ldr	r2, [r1, #8]
 801fd1a:	690b      	ldr	r3, [r1, #16]
 801fd1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801fd20:	4293      	cmp	r3, r2
 801fd22:	bfb8      	it	lt
 801fd24:	4613      	movlt	r3, r2
 801fd26:	6033      	str	r3, [r6, #0]
 801fd28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801fd2c:	4607      	mov	r7, r0
 801fd2e:	460c      	mov	r4, r1
 801fd30:	b10a      	cbz	r2, 801fd36 <_printf_common+0x26>
 801fd32:	3301      	adds	r3, #1
 801fd34:	6033      	str	r3, [r6, #0]
 801fd36:	6823      	ldr	r3, [r4, #0]
 801fd38:	0699      	lsls	r1, r3, #26
 801fd3a:	bf42      	ittt	mi
 801fd3c:	6833      	ldrmi	r3, [r6, #0]
 801fd3e:	3302      	addmi	r3, #2
 801fd40:	6033      	strmi	r3, [r6, #0]
 801fd42:	6825      	ldr	r5, [r4, #0]
 801fd44:	f015 0506 	ands.w	r5, r5, #6
 801fd48:	d106      	bne.n	801fd58 <_printf_common+0x48>
 801fd4a:	f104 0a19 	add.w	sl, r4, #25
 801fd4e:	68e3      	ldr	r3, [r4, #12]
 801fd50:	6832      	ldr	r2, [r6, #0]
 801fd52:	1a9b      	subs	r3, r3, r2
 801fd54:	42ab      	cmp	r3, r5
 801fd56:	dc26      	bgt.n	801fda6 <_printf_common+0x96>
 801fd58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801fd5c:	6822      	ldr	r2, [r4, #0]
 801fd5e:	3b00      	subs	r3, #0
 801fd60:	bf18      	it	ne
 801fd62:	2301      	movne	r3, #1
 801fd64:	0692      	lsls	r2, r2, #26
 801fd66:	d42b      	bmi.n	801fdc0 <_printf_common+0xb0>
 801fd68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801fd6c:	4641      	mov	r1, r8
 801fd6e:	4638      	mov	r0, r7
 801fd70:	47c8      	blx	r9
 801fd72:	3001      	adds	r0, #1
 801fd74:	d01e      	beq.n	801fdb4 <_printf_common+0xa4>
 801fd76:	6823      	ldr	r3, [r4, #0]
 801fd78:	6922      	ldr	r2, [r4, #16]
 801fd7a:	f003 0306 	and.w	r3, r3, #6
 801fd7e:	2b04      	cmp	r3, #4
 801fd80:	bf02      	ittt	eq
 801fd82:	68e5      	ldreq	r5, [r4, #12]
 801fd84:	6833      	ldreq	r3, [r6, #0]
 801fd86:	1aed      	subeq	r5, r5, r3
 801fd88:	68a3      	ldr	r3, [r4, #8]
 801fd8a:	bf0c      	ite	eq
 801fd8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801fd90:	2500      	movne	r5, #0
 801fd92:	4293      	cmp	r3, r2
 801fd94:	bfc4      	itt	gt
 801fd96:	1a9b      	subgt	r3, r3, r2
 801fd98:	18ed      	addgt	r5, r5, r3
 801fd9a:	2600      	movs	r6, #0
 801fd9c:	341a      	adds	r4, #26
 801fd9e:	42b5      	cmp	r5, r6
 801fda0:	d11a      	bne.n	801fdd8 <_printf_common+0xc8>
 801fda2:	2000      	movs	r0, #0
 801fda4:	e008      	b.n	801fdb8 <_printf_common+0xa8>
 801fda6:	2301      	movs	r3, #1
 801fda8:	4652      	mov	r2, sl
 801fdaa:	4641      	mov	r1, r8
 801fdac:	4638      	mov	r0, r7
 801fdae:	47c8      	blx	r9
 801fdb0:	3001      	adds	r0, #1
 801fdb2:	d103      	bne.n	801fdbc <_printf_common+0xac>
 801fdb4:	f04f 30ff 	mov.w	r0, #4294967295
 801fdb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fdbc:	3501      	adds	r5, #1
 801fdbe:	e7c6      	b.n	801fd4e <_printf_common+0x3e>
 801fdc0:	18e1      	adds	r1, r4, r3
 801fdc2:	1c5a      	adds	r2, r3, #1
 801fdc4:	2030      	movs	r0, #48	@ 0x30
 801fdc6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801fdca:	4422      	add	r2, r4
 801fdcc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801fdd0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801fdd4:	3302      	adds	r3, #2
 801fdd6:	e7c7      	b.n	801fd68 <_printf_common+0x58>
 801fdd8:	2301      	movs	r3, #1
 801fdda:	4622      	mov	r2, r4
 801fddc:	4641      	mov	r1, r8
 801fdde:	4638      	mov	r0, r7
 801fde0:	47c8      	blx	r9
 801fde2:	3001      	adds	r0, #1
 801fde4:	d0e6      	beq.n	801fdb4 <_printf_common+0xa4>
 801fde6:	3601      	adds	r6, #1
 801fde8:	e7d9      	b.n	801fd9e <_printf_common+0x8e>
	...

0801fdec <_printf_i>:
 801fdec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801fdf0:	7e0f      	ldrb	r7, [r1, #24]
 801fdf2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801fdf4:	2f78      	cmp	r7, #120	@ 0x78
 801fdf6:	4691      	mov	r9, r2
 801fdf8:	4680      	mov	r8, r0
 801fdfa:	460c      	mov	r4, r1
 801fdfc:	469a      	mov	sl, r3
 801fdfe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801fe02:	d807      	bhi.n	801fe14 <_printf_i+0x28>
 801fe04:	2f62      	cmp	r7, #98	@ 0x62
 801fe06:	d80a      	bhi.n	801fe1e <_printf_i+0x32>
 801fe08:	2f00      	cmp	r7, #0
 801fe0a:	f000 80d1 	beq.w	801ffb0 <_printf_i+0x1c4>
 801fe0e:	2f58      	cmp	r7, #88	@ 0x58
 801fe10:	f000 80b8 	beq.w	801ff84 <_printf_i+0x198>
 801fe14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801fe18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801fe1c:	e03a      	b.n	801fe94 <_printf_i+0xa8>
 801fe1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801fe22:	2b15      	cmp	r3, #21
 801fe24:	d8f6      	bhi.n	801fe14 <_printf_i+0x28>
 801fe26:	a101      	add	r1, pc, #4	@ (adr r1, 801fe2c <_printf_i+0x40>)
 801fe28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801fe2c:	0801fe85 	.word	0x0801fe85
 801fe30:	0801fe99 	.word	0x0801fe99
 801fe34:	0801fe15 	.word	0x0801fe15
 801fe38:	0801fe15 	.word	0x0801fe15
 801fe3c:	0801fe15 	.word	0x0801fe15
 801fe40:	0801fe15 	.word	0x0801fe15
 801fe44:	0801fe99 	.word	0x0801fe99
 801fe48:	0801fe15 	.word	0x0801fe15
 801fe4c:	0801fe15 	.word	0x0801fe15
 801fe50:	0801fe15 	.word	0x0801fe15
 801fe54:	0801fe15 	.word	0x0801fe15
 801fe58:	0801ff97 	.word	0x0801ff97
 801fe5c:	0801fec3 	.word	0x0801fec3
 801fe60:	0801ff51 	.word	0x0801ff51
 801fe64:	0801fe15 	.word	0x0801fe15
 801fe68:	0801fe15 	.word	0x0801fe15
 801fe6c:	0801ffb9 	.word	0x0801ffb9
 801fe70:	0801fe15 	.word	0x0801fe15
 801fe74:	0801fec3 	.word	0x0801fec3
 801fe78:	0801fe15 	.word	0x0801fe15
 801fe7c:	0801fe15 	.word	0x0801fe15
 801fe80:	0801ff59 	.word	0x0801ff59
 801fe84:	6833      	ldr	r3, [r6, #0]
 801fe86:	1d1a      	adds	r2, r3, #4
 801fe88:	681b      	ldr	r3, [r3, #0]
 801fe8a:	6032      	str	r2, [r6, #0]
 801fe8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801fe90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801fe94:	2301      	movs	r3, #1
 801fe96:	e09c      	b.n	801ffd2 <_printf_i+0x1e6>
 801fe98:	6833      	ldr	r3, [r6, #0]
 801fe9a:	6820      	ldr	r0, [r4, #0]
 801fe9c:	1d19      	adds	r1, r3, #4
 801fe9e:	6031      	str	r1, [r6, #0]
 801fea0:	0606      	lsls	r6, r0, #24
 801fea2:	d501      	bpl.n	801fea8 <_printf_i+0xbc>
 801fea4:	681d      	ldr	r5, [r3, #0]
 801fea6:	e003      	b.n	801feb0 <_printf_i+0xc4>
 801fea8:	0645      	lsls	r5, r0, #25
 801feaa:	d5fb      	bpl.n	801fea4 <_printf_i+0xb8>
 801feac:	f9b3 5000 	ldrsh.w	r5, [r3]
 801feb0:	2d00      	cmp	r5, #0
 801feb2:	da03      	bge.n	801febc <_printf_i+0xd0>
 801feb4:	232d      	movs	r3, #45	@ 0x2d
 801feb6:	426d      	negs	r5, r5
 801feb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801febc:	4858      	ldr	r0, [pc, #352]	@ (8020020 <_printf_i+0x234>)
 801febe:	230a      	movs	r3, #10
 801fec0:	e011      	b.n	801fee6 <_printf_i+0xfa>
 801fec2:	6821      	ldr	r1, [r4, #0]
 801fec4:	6833      	ldr	r3, [r6, #0]
 801fec6:	0608      	lsls	r0, r1, #24
 801fec8:	f853 5b04 	ldr.w	r5, [r3], #4
 801fecc:	d402      	bmi.n	801fed4 <_printf_i+0xe8>
 801fece:	0649      	lsls	r1, r1, #25
 801fed0:	bf48      	it	mi
 801fed2:	b2ad      	uxthmi	r5, r5
 801fed4:	2f6f      	cmp	r7, #111	@ 0x6f
 801fed6:	4852      	ldr	r0, [pc, #328]	@ (8020020 <_printf_i+0x234>)
 801fed8:	6033      	str	r3, [r6, #0]
 801feda:	bf14      	ite	ne
 801fedc:	230a      	movne	r3, #10
 801fede:	2308      	moveq	r3, #8
 801fee0:	2100      	movs	r1, #0
 801fee2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801fee6:	6866      	ldr	r6, [r4, #4]
 801fee8:	60a6      	str	r6, [r4, #8]
 801feea:	2e00      	cmp	r6, #0
 801feec:	db05      	blt.n	801fefa <_printf_i+0x10e>
 801feee:	6821      	ldr	r1, [r4, #0]
 801fef0:	432e      	orrs	r6, r5
 801fef2:	f021 0104 	bic.w	r1, r1, #4
 801fef6:	6021      	str	r1, [r4, #0]
 801fef8:	d04b      	beq.n	801ff92 <_printf_i+0x1a6>
 801fefa:	4616      	mov	r6, r2
 801fefc:	fbb5 f1f3 	udiv	r1, r5, r3
 801ff00:	fb03 5711 	mls	r7, r3, r1, r5
 801ff04:	5dc7      	ldrb	r7, [r0, r7]
 801ff06:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801ff0a:	462f      	mov	r7, r5
 801ff0c:	42bb      	cmp	r3, r7
 801ff0e:	460d      	mov	r5, r1
 801ff10:	d9f4      	bls.n	801fefc <_printf_i+0x110>
 801ff12:	2b08      	cmp	r3, #8
 801ff14:	d10b      	bne.n	801ff2e <_printf_i+0x142>
 801ff16:	6823      	ldr	r3, [r4, #0]
 801ff18:	07df      	lsls	r7, r3, #31
 801ff1a:	d508      	bpl.n	801ff2e <_printf_i+0x142>
 801ff1c:	6923      	ldr	r3, [r4, #16]
 801ff1e:	6861      	ldr	r1, [r4, #4]
 801ff20:	4299      	cmp	r1, r3
 801ff22:	bfde      	ittt	le
 801ff24:	2330      	movle	r3, #48	@ 0x30
 801ff26:	f806 3c01 	strble.w	r3, [r6, #-1]
 801ff2a:	f106 36ff 	addle.w	r6, r6, #4294967295
 801ff2e:	1b92      	subs	r2, r2, r6
 801ff30:	6122      	str	r2, [r4, #16]
 801ff32:	f8cd a000 	str.w	sl, [sp]
 801ff36:	464b      	mov	r3, r9
 801ff38:	aa03      	add	r2, sp, #12
 801ff3a:	4621      	mov	r1, r4
 801ff3c:	4640      	mov	r0, r8
 801ff3e:	f7ff fee7 	bl	801fd10 <_printf_common>
 801ff42:	3001      	adds	r0, #1
 801ff44:	d14a      	bne.n	801ffdc <_printf_i+0x1f0>
 801ff46:	f04f 30ff 	mov.w	r0, #4294967295
 801ff4a:	b004      	add	sp, #16
 801ff4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ff50:	6823      	ldr	r3, [r4, #0]
 801ff52:	f043 0320 	orr.w	r3, r3, #32
 801ff56:	6023      	str	r3, [r4, #0]
 801ff58:	4832      	ldr	r0, [pc, #200]	@ (8020024 <_printf_i+0x238>)
 801ff5a:	2778      	movs	r7, #120	@ 0x78
 801ff5c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801ff60:	6823      	ldr	r3, [r4, #0]
 801ff62:	6831      	ldr	r1, [r6, #0]
 801ff64:	061f      	lsls	r7, r3, #24
 801ff66:	f851 5b04 	ldr.w	r5, [r1], #4
 801ff6a:	d402      	bmi.n	801ff72 <_printf_i+0x186>
 801ff6c:	065f      	lsls	r7, r3, #25
 801ff6e:	bf48      	it	mi
 801ff70:	b2ad      	uxthmi	r5, r5
 801ff72:	6031      	str	r1, [r6, #0]
 801ff74:	07d9      	lsls	r1, r3, #31
 801ff76:	bf44      	itt	mi
 801ff78:	f043 0320 	orrmi.w	r3, r3, #32
 801ff7c:	6023      	strmi	r3, [r4, #0]
 801ff7e:	b11d      	cbz	r5, 801ff88 <_printf_i+0x19c>
 801ff80:	2310      	movs	r3, #16
 801ff82:	e7ad      	b.n	801fee0 <_printf_i+0xf4>
 801ff84:	4826      	ldr	r0, [pc, #152]	@ (8020020 <_printf_i+0x234>)
 801ff86:	e7e9      	b.n	801ff5c <_printf_i+0x170>
 801ff88:	6823      	ldr	r3, [r4, #0]
 801ff8a:	f023 0320 	bic.w	r3, r3, #32
 801ff8e:	6023      	str	r3, [r4, #0]
 801ff90:	e7f6      	b.n	801ff80 <_printf_i+0x194>
 801ff92:	4616      	mov	r6, r2
 801ff94:	e7bd      	b.n	801ff12 <_printf_i+0x126>
 801ff96:	6833      	ldr	r3, [r6, #0]
 801ff98:	6825      	ldr	r5, [r4, #0]
 801ff9a:	6961      	ldr	r1, [r4, #20]
 801ff9c:	1d18      	adds	r0, r3, #4
 801ff9e:	6030      	str	r0, [r6, #0]
 801ffa0:	062e      	lsls	r6, r5, #24
 801ffa2:	681b      	ldr	r3, [r3, #0]
 801ffa4:	d501      	bpl.n	801ffaa <_printf_i+0x1be>
 801ffa6:	6019      	str	r1, [r3, #0]
 801ffa8:	e002      	b.n	801ffb0 <_printf_i+0x1c4>
 801ffaa:	0668      	lsls	r0, r5, #25
 801ffac:	d5fb      	bpl.n	801ffa6 <_printf_i+0x1ba>
 801ffae:	8019      	strh	r1, [r3, #0]
 801ffb0:	2300      	movs	r3, #0
 801ffb2:	6123      	str	r3, [r4, #16]
 801ffb4:	4616      	mov	r6, r2
 801ffb6:	e7bc      	b.n	801ff32 <_printf_i+0x146>
 801ffb8:	6833      	ldr	r3, [r6, #0]
 801ffba:	1d1a      	adds	r2, r3, #4
 801ffbc:	6032      	str	r2, [r6, #0]
 801ffbe:	681e      	ldr	r6, [r3, #0]
 801ffc0:	6862      	ldr	r2, [r4, #4]
 801ffc2:	2100      	movs	r1, #0
 801ffc4:	4630      	mov	r0, r6
 801ffc6:	f7e0 f8e3 	bl	8000190 <memchr>
 801ffca:	b108      	cbz	r0, 801ffd0 <_printf_i+0x1e4>
 801ffcc:	1b80      	subs	r0, r0, r6
 801ffce:	6060      	str	r0, [r4, #4]
 801ffd0:	6863      	ldr	r3, [r4, #4]
 801ffd2:	6123      	str	r3, [r4, #16]
 801ffd4:	2300      	movs	r3, #0
 801ffd6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801ffda:	e7aa      	b.n	801ff32 <_printf_i+0x146>
 801ffdc:	6923      	ldr	r3, [r4, #16]
 801ffde:	4632      	mov	r2, r6
 801ffe0:	4649      	mov	r1, r9
 801ffe2:	4640      	mov	r0, r8
 801ffe4:	47d0      	blx	sl
 801ffe6:	3001      	adds	r0, #1
 801ffe8:	d0ad      	beq.n	801ff46 <_printf_i+0x15a>
 801ffea:	6823      	ldr	r3, [r4, #0]
 801ffec:	079b      	lsls	r3, r3, #30
 801ffee:	d413      	bmi.n	8020018 <_printf_i+0x22c>
 801fff0:	68e0      	ldr	r0, [r4, #12]
 801fff2:	9b03      	ldr	r3, [sp, #12]
 801fff4:	4298      	cmp	r0, r3
 801fff6:	bfb8      	it	lt
 801fff8:	4618      	movlt	r0, r3
 801fffa:	e7a6      	b.n	801ff4a <_printf_i+0x15e>
 801fffc:	2301      	movs	r3, #1
 801fffe:	4632      	mov	r2, r6
 8020000:	4649      	mov	r1, r9
 8020002:	4640      	mov	r0, r8
 8020004:	47d0      	blx	sl
 8020006:	3001      	adds	r0, #1
 8020008:	d09d      	beq.n	801ff46 <_printf_i+0x15a>
 802000a:	3501      	adds	r5, #1
 802000c:	68e3      	ldr	r3, [r4, #12]
 802000e:	9903      	ldr	r1, [sp, #12]
 8020010:	1a5b      	subs	r3, r3, r1
 8020012:	42ab      	cmp	r3, r5
 8020014:	dcf2      	bgt.n	801fffc <_printf_i+0x210>
 8020016:	e7eb      	b.n	801fff0 <_printf_i+0x204>
 8020018:	2500      	movs	r5, #0
 802001a:	f104 0619 	add.w	r6, r4, #25
 802001e:	e7f5      	b.n	802000c <_printf_i+0x220>
 8020020:	08021319 	.word	0x08021319
 8020024:	0802132a 	.word	0x0802132a

08020028 <__sflush_r>:
 8020028:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 802002c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802002e:	0716      	lsls	r6, r2, #28
 8020030:	4605      	mov	r5, r0
 8020032:	460c      	mov	r4, r1
 8020034:	d454      	bmi.n	80200e0 <__sflush_r+0xb8>
 8020036:	684b      	ldr	r3, [r1, #4]
 8020038:	2b00      	cmp	r3, #0
 802003a:	dc02      	bgt.n	8020042 <__sflush_r+0x1a>
 802003c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 802003e:	2b00      	cmp	r3, #0
 8020040:	dd48      	ble.n	80200d4 <__sflush_r+0xac>
 8020042:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8020044:	2e00      	cmp	r6, #0
 8020046:	d045      	beq.n	80200d4 <__sflush_r+0xac>
 8020048:	2300      	movs	r3, #0
 802004a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 802004e:	682f      	ldr	r7, [r5, #0]
 8020050:	6a21      	ldr	r1, [r4, #32]
 8020052:	602b      	str	r3, [r5, #0]
 8020054:	d030      	beq.n	80200b8 <__sflush_r+0x90>
 8020056:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8020058:	89a3      	ldrh	r3, [r4, #12]
 802005a:	0759      	lsls	r1, r3, #29
 802005c:	d505      	bpl.n	802006a <__sflush_r+0x42>
 802005e:	6863      	ldr	r3, [r4, #4]
 8020060:	1ad2      	subs	r2, r2, r3
 8020062:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8020064:	b10b      	cbz	r3, 802006a <__sflush_r+0x42>
 8020066:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8020068:	1ad2      	subs	r2, r2, r3
 802006a:	2300      	movs	r3, #0
 802006c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802006e:	6a21      	ldr	r1, [r4, #32]
 8020070:	4628      	mov	r0, r5
 8020072:	47b0      	blx	r6
 8020074:	1c43      	adds	r3, r0, #1
 8020076:	89a3      	ldrh	r3, [r4, #12]
 8020078:	d106      	bne.n	8020088 <__sflush_r+0x60>
 802007a:	6829      	ldr	r1, [r5, #0]
 802007c:	291d      	cmp	r1, #29
 802007e:	d82b      	bhi.n	80200d8 <__sflush_r+0xb0>
 8020080:	4a28      	ldr	r2, [pc, #160]	@ (8020124 <__sflush_r+0xfc>)
 8020082:	40ca      	lsrs	r2, r1
 8020084:	07d6      	lsls	r6, r2, #31
 8020086:	d527      	bpl.n	80200d8 <__sflush_r+0xb0>
 8020088:	2200      	movs	r2, #0
 802008a:	6062      	str	r2, [r4, #4]
 802008c:	04d9      	lsls	r1, r3, #19
 802008e:	6922      	ldr	r2, [r4, #16]
 8020090:	6022      	str	r2, [r4, #0]
 8020092:	d504      	bpl.n	802009e <__sflush_r+0x76>
 8020094:	1c42      	adds	r2, r0, #1
 8020096:	d101      	bne.n	802009c <__sflush_r+0x74>
 8020098:	682b      	ldr	r3, [r5, #0]
 802009a:	b903      	cbnz	r3, 802009e <__sflush_r+0x76>
 802009c:	6560      	str	r0, [r4, #84]	@ 0x54
 802009e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80200a0:	602f      	str	r7, [r5, #0]
 80200a2:	b1b9      	cbz	r1, 80200d4 <__sflush_r+0xac>
 80200a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80200a8:	4299      	cmp	r1, r3
 80200aa:	d002      	beq.n	80200b2 <__sflush_r+0x8a>
 80200ac:	4628      	mov	r0, r5
 80200ae:	f7ff fca5 	bl	801f9fc <_free_r>
 80200b2:	2300      	movs	r3, #0
 80200b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80200b6:	e00d      	b.n	80200d4 <__sflush_r+0xac>
 80200b8:	2301      	movs	r3, #1
 80200ba:	4628      	mov	r0, r5
 80200bc:	47b0      	blx	r6
 80200be:	4602      	mov	r2, r0
 80200c0:	1c50      	adds	r0, r2, #1
 80200c2:	d1c9      	bne.n	8020058 <__sflush_r+0x30>
 80200c4:	682b      	ldr	r3, [r5, #0]
 80200c6:	2b00      	cmp	r3, #0
 80200c8:	d0c6      	beq.n	8020058 <__sflush_r+0x30>
 80200ca:	2b1d      	cmp	r3, #29
 80200cc:	d001      	beq.n	80200d2 <__sflush_r+0xaa>
 80200ce:	2b16      	cmp	r3, #22
 80200d0:	d11d      	bne.n	802010e <__sflush_r+0xe6>
 80200d2:	602f      	str	r7, [r5, #0]
 80200d4:	2000      	movs	r0, #0
 80200d6:	e021      	b.n	802011c <__sflush_r+0xf4>
 80200d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80200dc:	b21b      	sxth	r3, r3
 80200de:	e01a      	b.n	8020116 <__sflush_r+0xee>
 80200e0:	690f      	ldr	r7, [r1, #16]
 80200e2:	2f00      	cmp	r7, #0
 80200e4:	d0f6      	beq.n	80200d4 <__sflush_r+0xac>
 80200e6:	0793      	lsls	r3, r2, #30
 80200e8:	680e      	ldr	r6, [r1, #0]
 80200ea:	bf08      	it	eq
 80200ec:	694b      	ldreq	r3, [r1, #20]
 80200ee:	600f      	str	r7, [r1, #0]
 80200f0:	bf18      	it	ne
 80200f2:	2300      	movne	r3, #0
 80200f4:	1bf6      	subs	r6, r6, r7
 80200f6:	608b      	str	r3, [r1, #8]
 80200f8:	2e00      	cmp	r6, #0
 80200fa:	ddeb      	ble.n	80200d4 <__sflush_r+0xac>
 80200fc:	6a21      	ldr	r1, [r4, #32]
 80200fe:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8020102:	4633      	mov	r3, r6
 8020104:	463a      	mov	r2, r7
 8020106:	4628      	mov	r0, r5
 8020108:	47e0      	blx	ip
 802010a:	2800      	cmp	r0, #0
 802010c:	dc07      	bgt.n	802011e <__sflush_r+0xf6>
 802010e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020112:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020116:	81a3      	strh	r3, [r4, #12]
 8020118:	f04f 30ff 	mov.w	r0, #4294967295
 802011c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802011e:	4407      	add	r7, r0
 8020120:	1a36      	subs	r6, r6, r0
 8020122:	e7e9      	b.n	80200f8 <__sflush_r+0xd0>
 8020124:	20400001 	.word	0x20400001

08020128 <_fflush_r>:
 8020128:	b538      	push	{r3, r4, r5, lr}
 802012a:	690b      	ldr	r3, [r1, #16]
 802012c:	4605      	mov	r5, r0
 802012e:	460c      	mov	r4, r1
 8020130:	b913      	cbnz	r3, 8020138 <_fflush_r+0x10>
 8020132:	2500      	movs	r5, #0
 8020134:	4628      	mov	r0, r5
 8020136:	bd38      	pop	{r3, r4, r5, pc}
 8020138:	b118      	cbz	r0, 8020142 <_fflush_r+0x1a>
 802013a:	6a03      	ldr	r3, [r0, #32]
 802013c:	b90b      	cbnz	r3, 8020142 <_fflush_r+0x1a>
 802013e:	f7ff fa53 	bl	801f5e8 <__sinit>
 8020142:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020146:	2b00      	cmp	r3, #0
 8020148:	d0f3      	beq.n	8020132 <_fflush_r+0xa>
 802014a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802014c:	07d0      	lsls	r0, r2, #31
 802014e:	d404      	bmi.n	802015a <_fflush_r+0x32>
 8020150:	0599      	lsls	r1, r3, #22
 8020152:	d402      	bmi.n	802015a <_fflush_r+0x32>
 8020154:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020156:	f7ff fc4e 	bl	801f9f6 <__retarget_lock_acquire_recursive>
 802015a:	4628      	mov	r0, r5
 802015c:	4621      	mov	r1, r4
 802015e:	f7ff ff63 	bl	8020028 <__sflush_r>
 8020162:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8020164:	07da      	lsls	r2, r3, #31
 8020166:	4605      	mov	r5, r0
 8020168:	d4e4      	bmi.n	8020134 <_fflush_r+0xc>
 802016a:	89a3      	ldrh	r3, [r4, #12]
 802016c:	059b      	lsls	r3, r3, #22
 802016e:	d4e1      	bmi.n	8020134 <_fflush_r+0xc>
 8020170:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020172:	f7ff fc41 	bl	801f9f8 <__retarget_lock_release_recursive>
 8020176:	e7dd      	b.n	8020134 <_fflush_r+0xc>

08020178 <__swhatbuf_r>:
 8020178:	b570      	push	{r4, r5, r6, lr}
 802017a:	460c      	mov	r4, r1
 802017c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020180:	2900      	cmp	r1, #0
 8020182:	b096      	sub	sp, #88	@ 0x58
 8020184:	4615      	mov	r5, r2
 8020186:	461e      	mov	r6, r3
 8020188:	da0d      	bge.n	80201a6 <__swhatbuf_r+0x2e>
 802018a:	89a3      	ldrh	r3, [r4, #12]
 802018c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8020190:	f04f 0100 	mov.w	r1, #0
 8020194:	bf14      	ite	ne
 8020196:	2340      	movne	r3, #64	@ 0x40
 8020198:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802019c:	2000      	movs	r0, #0
 802019e:	6031      	str	r1, [r6, #0]
 80201a0:	602b      	str	r3, [r5, #0]
 80201a2:	b016      	add	sp, #88	@ 0x58
 80201a4:	bd70      	pop	{r4, r5, r6, pc}
 80201a6:	466a      	mov	r2, sp
 80201a8:	f000 f848 	bl	802023c <_fstat_r>
 80201ac:	2800      	cmp	r0, #0
 80201ae:	dbec      	blt.n	802018a <__swhatbuf_r+0x12>
 80201b0:	9901      	ldr	r1, [sp, #4]
 80201b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80201b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80201ba:	4259      	negs	r1, r3
 80201bc:	4159      	adcs	r1, r3
 80201be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80201c2:	e7eb      	b.n	802019c <__swhatbuf_r+0x24>

080201c4 <__smakebuf_r>:
 80201c4:	898b      	ldrh	r3, [r1, #12]
 80201c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80201c8:	079d      	lsls	r5, r3, #30
 80201ca:	4606      	mov	r6, r0
 80201cc:	460c      	mov	r4, r1
 80201ce:	d507      	bpl.n	80201e0 <__smakebuf_r+0x1c>
 80201d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80201d4:	6023      	str	r3, [r4, #0]
 80201d6:	6123      	str	r3, [r4, #16]
 80201d8:	2301      	movs	r3, #1
 80201da:	6163      	str	r3, [r4, #20]
 80201dc:	b003      	add	sp, #12
 80201de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80201e0:	ab01      	add	r3, sp, #4
 80201e2:	466a      	mov	r2, sp
 80201e4:	f7ff ffc8 	bl	8020178 <__swhatbuf_r>
 80201e8:	9f00      	ldr	r7, [sp, #0]
 80201ea:	4605      	mov	r5, r0
 80201ec:	4639      	mov	r1, r7
 80201ee:	4630      	mov	r0, r6
 80201f0:	f7ff f8e2 	bl	801f3b8 <_malloc_r>
 80201f4:	b948      	cbnz	r0, 802020a <__smakebuf_r+0x46>
 80201f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80201fa:	059a      	lsls	r2, r3, #22
 80201fc:	d4ee      	bmi.n	80201dc <__smakebuf_r+0x18>
 80201fe:	f023 0303 	bic.w	r3, r3, #3
 8020202:	f043 0302 	orr.w	r3, r3, #2
 8020206:	81a3      	strh	r3, [r4, #12]
 8020208:	e7e2      	b.n	80201d0 <__smakebuf_r+0xc>
 802020a:	89a3      	ldrh	r3, [r4, #12]
 802020c:	6020      	str	r0, [r4, #0]
 802020e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8020212:	81a3      	strh	r3, [r4, #12]
 8020214:	9b01      	ldr	r3, [sp, #4]
 8020216:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802021a:	b15b      	cbz	r3, 8020234 <__smakebuf_r+0x70>
 802021c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020220:	4630      	mov	r0, r6
 8020222:	f000 f81d 	bl	8020260 <_isatty_r>
 8020226:	b128      	cbz	r0, 8020234 <__smakebuf_r+0x70>
 8020228:	89a3      	ldrh	r3, [r4, #12]
 802022a:	f023 0303 	bic.w	r3, r3, #3
 802022e:	f043 0301 	orr.w	r3, r3, #1
 8020232:	81a3      	strh	r3, [r4, #12]
 8020234:	89a3      	ldrh	r3, [r4, #12]
 8020236:	431d      	orrs	r5, r3
 8020238:	81a5      	strh	r5, [r4, #12]
 802023a:	e7cf      	b.n	80201dc <__smakebuf_r+0x18>

0802023c <_fstat_r>:
 802023c:	b538      	push	{r3, r4, r5, lr}
 802023e:	4d07      	ldr	r5, [pc, #28]	@ (802025c <_fstat_r+0x20>)
 8020240:	2300      	movs	r3, #0
 8020242:	4604      	mov	r4, r0
 8020244:	4608      	mov	r0, r1
 8020246:	4611      	mov	r1, r2
 8020248:	602b      	str	r3, [r5, #0]
 802024a:	f7e1 fb11 	bl	8001870 <_fstat>
 802024e:	1c43      	adds	r3, r0, #1
 8020250:	d102      	bne.n	8020258 <_fstat_r+0x1c>
 8020252:	682b      	ldr	r3, [r5, #0]
 8020254:	b103      	cbz	r3, 8020258 <_fstat_r+0x1c>
 8020256:	6023      	str	r3, [r4, #0]
 8020258:	bd38      	pop	{r3, r4, r5, pc}
 802025a:	bf00      	nop
 802025c:	20001e2c 	.word	0x20001e2c

08020260 <_isatty_r>:
 8020260:	b538      	push	{r3, r4, r5, lr}
 8020262:	4d06      	ldr	r5, [pc, #24]	@ (802027c <_isatty_r+0x1c>)
 8020264:	2300      	movs	r3, #0
 8020266:	4604      	mov	r4, r0
 8020268:	4608      	mov	r0, r1
 802026a:	602b      	str	r3, [r5, #0]
 802026c:	f7e1 fb0f 	bl	800188e <_isatty>
 8020270:	1c43      	adds	r3, r0, #1
 8020272:	d102      	bne.n	802027a <_isatty_r+0x1a>
 8020274:	682b      	ldr	r3, [r5, #0]
 8020276:	b103      	cbz	r3, 802027a <_isatty_r+0x1a>
 8020278:	6023      	str	r3, [r4, #0]
 802027a:	bd38      	pop	{r3, r4, r5, pc}
 802027c:	20001e2c 	.word	0x20001e2c

08020280 <expf>:
 8020280:	b538      	push	{r3, r4, r5, lr}
 8020282:	4605      	mov	r5, r0
 8020284:	f000 f8c8 	bl	8020418 <__ieee754_expf>
 8020288:	4604      	mov	r4, r0
 802028a:	4628      	mov	r0, r5
 802028c:	f000 f81e 	bl	80202cc <finitef>
 8020290:	b150      	cbz	r0, 80202a8 <expf+0x28>
 8020292:	490c      	ldr	r1, [pc, #48]	@ (80202c4 <expf+0x44>)
 8020294:	4628      	mov	r0, r5
 8020296:	f7e0 fd01 	bl	8000c9c <__aeabi_fcmpgt>
 802029a:	b138      	cbz	r0, 80202ac <expf+0x2c>
 802029c:	f7ff fb80 	bl	801f9a0 <__errno>
 80202a0:	2322      	movs	r3, #34	@ 0x22
 80202a2:	6003      	str	r3, [r0, #0]
 80202a4:	f04f 44ff 	mov.w	r4, #2139095040	@ 0x7f800000
 80202a8:	4620      	mov	r0, r4
 80202aa:	bd38      	pop	{r3, r4, r5, pc}
 80202ac:	4906      	ldr	r1, [pc, #24]	@ (80202c8 <expf+0x48>)
 80202ae:	4628      	mov	r0, r5
 80202b0:	f7e0 fcd6 	bl	8000c60 <__aeabi_fcmplt>
 80202b4:	2800      	cmp	r0, #0
 80202b6:	d0f7      	beq.n	80202a8 <expf+0x28>
 80202b8:	f7ff fb72 	bl	801f9a0 <__errno>
 80202bc:	2322      	movs	r3, #34	@ 0x22
 80202be:	6003      	str	r3, [r0, #0]
 80202c0:	2400      	movs	r4, #0
 80202c2:	e7f1      	b.n	80202a8 <expf+0x28>
 80202c4:	42b17217 	.word	0x42b17217
 80202c8:	c2cff1b5 	.word	0xc2cff1b5

080202cc <finitef>:
 80202cc:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80202d0:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80202d4:	bfac      	ite	ge
 80202d6:	2000      	movge	r0, #0
 80202d8:	2001      	movlt	r0, #1
 80202da:	4770      	bx	lr

080202dc <with_errnof>:
 80202dc:	b538      	push	{r3, r4, r5, lr}
 80202de:	4604      	mov	r4, r0
 80202e0:	460d      	mov	r5, r1
 80202e2:	f7ff fb5d 	bl	801f9a0 <__errno>
 80202e6:	6005      	str	r5, [r0, #0]
 80202e8:	4620      	mov	r0, r4
 80202ea:	bd38      	pop	{r3, r4, r5, pc}

080202ec <xflowf>:
 80202ec:	b508      	push	{r3, lr}
 80202ee:	b140      	cbz	r0, 8020302 <xflowf+0x16>
 80202f0:	f101 4000 	add.w	r0, r1, #2147483648	@ 0x80000000
 80202f4:	f7e0 fb16 	bl	8000924 <__aeabi_fmul>
 80202f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80202fc:	2122      	movs	r1, #34	@ 0x22
 80202fe:	f7ff bfed 	b.w	80202dc <with_errnof>
 8020302:	4608      	mov	r0, r1
 8020304:	e7f6      	b.n	80202f4 <xflowf+0x8>

08020306 <__math_uflowf>:
 8020306:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 802030a:	f7ff bfef 	b.w	80202ec <xflowf>

0802030e <__math_oflowf>:
 802030e:	f04f 41e0 	mov.w	r1, #1879048192	@ 0x70000000
 8020312:	f7ff bfeb 	b.w	80202ec <xflowf>
	...

08020318 <floor>:
 8020318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802031c:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8020320:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 8020324:	2e13      	cmp	r6, #19
 8020326:	4602      	mov	r2, r0
 8020328:	460b      	mov	r3, r1
 802032a:	460c      	mov	r4, r1
 802032c:	4605      	mov	r5, r0
 802032e:	4680      	mov	r8, r0
 8020330:	dc35      	bgt.n	802039e <floor+0x86>
 8020332:	2e00      	cmp	r6, #0
 8020334:	da17      	bge.n	8020366 <floor+0x4e>
 8020336:	a334      	add	r3, pc, #208	@ (adr r3, 8020408 <floor+0xf0>)
 8020338:	e9d3 2300 	ldrd	r2, r3, [r3]
 802033c:	f7df ff7e 	bl	800023c <__adddf3>
 8020340:	2200      	movs	r2, #0
 8020342:	2300      	movs	r3, #0
 8020344:	f7e0 f9ae 	bl	80006a4 <__aeabi_dcmpgt>
 8020348:	b150      	cbz	r0, 8020360 <floor+0x48>
 802034a:	2c00      	cmp	r4, #0
 802034c:	da57      	bge.n	80203fe <floor+0xe6>
 802034e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8020352:	432c      	orrs	r4, r5
 8020354:	2500      	movs	r5, #0
 8020356:	42ac      	cmp	r4, r5
 8020358:	4c2d      	ldr	r4, [pc, #180]	@ (8020410 <floor+0xf8>)
 802035a:	bf08      	it	eq
 802035c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8020360:	4623      	mov	r3, r4
 8020362:	462a      	mov	r2, r5
 8020364:	e024      	b.n	80203b0 <floor+0x98>
 8020366:	4f2b      	ldr	r7, [pc, #172]	@ (8020414 <floor+0xfc>)
 8020368:	4137      	asrs	r7, r6
 802036a:	ea01 0c07 	and.w	ip, r1, r7
 802036e:	ea5c 0c00 	orrs.w	ip, ip, r0
 8020372:	d01d      	beq.n	80203b0 <floor+0x98>
 8020374:	a324      	add	r3, pc, #144	@ (adr r3, 8020408 <floor+0xf0>)
 8020376:	e9d3 2300 	ldrd	r2, r3, [r3]
 802037a:	f7df ff5f 	bl	800023c <__adddf3>
 802037e:	2200      	movs	r2, #0
 8020380:	2300      	movs	r3, #0
 8020382:	f7e0 f98f 	bl	80006a4 <__aeabi_dcmpgt>
 8020386:	2800      	cmp	r0, #0
 8020388:	d0ea      	beq.n	8020360 <floor+0x48>
 802038a:	2c00      	cmp	r4, #0
 802038c:	bfbe      	ittt	lt
 802038e:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8020392:	4133      	asrlt	r3, r6
 8020394:	18e4      	addlt	r4, r4, r3
 8020396:	ea24 0407 	bic.w	r4, r4, r7
 802039a:	2500      	movs	r5, #0
 802039c:	e7e0      	b.n	8020360 <floor+0x48>
 802039e:	2e33      	cmp	r6, #51	@ 0x33
 80203a0:	dd0a      	ble.n	80203b8 <floor+0xa0>
 80203a2:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80203a6:	d103      	bne.n	80203b0 <floor+0x98>
 80203a8:	f7df ff48 	bl	800023c <__adddf3>
 80203ac:	4602      	mov	r2, r0
 80203ae:	460b      	mov	r3, r1
 80203b0:	4610      	mov	r0, r2
 80203b2:	4619      	mov	r1, r3
 80203b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80203b8:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 80203bc:	f04f 3cff 	mov.w	ip, #4294967295
 80203c0:	fa2c f707 	lsr.w	r7, ip, r7
 80203c4:	4207      	tst	r7, r0
 80203c6:	d0f3      	beq.n	80203b0 <floor+0x98>
 80203c8:	a30f      	add	r3, pc, #60	@ (adr r3, 8020408 <floor+0xf0>)
 80203ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80203ce:	f7df ff35 	bl	800023c <__adddf3>
 80203d2:	2200      	movs	r2, #0
 80203d4:	2300      	movs	r3, #0
 80203d6:	f7e0 f965 	bl	80006a4 <__aeabi_dcmpgt>
 80203da:	2800      	cmp	r0, #0
 80203dc:	d0c0      	beq.n	8020360 <floor+0x48>
 80203de:	2c00      	cmp	r4, #0
 80203e0:	da0a      	bge.n	80203f8 <floor+0xe0>
 80203e2:	2e14      	cmp	r6, #20
 80203e4:	d101      	bne.n	80203ea <floor+0xd2>
 80203e6:	3401      	adds	r4, #1
 80203e8:	e006      	b.n	80203f8 <floor+0xe0>
 80203ea:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80203ee:	2301      	movs	r3, #1
 80203f0:	40b3      	lsls	r3, r6
 80203f2:	441d      	add	r5, r3
 80203f4:	4545      	cmp	r5, r8
 80203f6:	d3f6      	bcc.n	80203e6 <floor+0xce>
 80203f8:	ea25 0507 	bic.w	r5, r5, r7
 80203fc:	e7b0      	b.n	8020360 <floor+0x48>
 80203fe:	2500      	movs	r5, #0
 8020400:	462c      	mov	r4, r5
 8020402:	e7ad      	b.n	8020360 <floor+0x48>
 8020404:	f3af 8000 	nop.w
 8020408:	8800759c 	.word	0x8800759c
 802040c:	7e37e43c 	.word	0x7e37e43c
 8020410:	bff00000 	.word	0xbff00000
 8020414:	000fffff 	.word	0x000fffff

08020418 <__ieee754_expf>:
 8020418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802041c:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8020420:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8020424:	4604      	mov	r4, r0
 8020426:	d904      	bls.n	8020432 <__ieee754_expf+0x1a>
 8020428:	4601      	mov	r1, r0
 802042a:	f7e0 f973 	bl	8000714 <__addsf3>
 802042e:	4604      	mov	r4, r0
 8020430:	e005      	b.n	802043e <__ieee754_expf+0x26>
 8020432:	ea4f 76d0 	mov.w	r6, r0, lsr #31
 8020436:	d105      	bne.n	8020444 <__ieee754_expf+0x2c>
 8020438:	2e00      	cmp	r6, #0
 802043a:	f040 80c3 	bne.w	80205c4 <__ieee754_expf+0x1ac>
 802043e:	4620      	mov	r0, r4
 8020440:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020444:	4960      	ldr	r1, [pc, #384]	@ (80205c8 <__ieee754_expf+0x1b0>)
 8020446:	4288      	cmp	r0, r1
 8020448:	dd04      	ble.n	8020454 <__ieee754_expf+0x3c>
 802044a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802044e:	2000      	movs	r0, #0
 8020450:	f7ff bf5d 	b.w	802030e <__math_oflowf>
 8020454:	2800      	cmp	r0, #0
 8020456:	da07      	bge.n	8020468 <__ieee754_expf+0x50>
 8020458:	4a5c      	ldr	r2, [pc, #368]	@ (80205cc <__ieee754_expf+0x1b4>)
 802045a:	4293      	cmp	r3, r2
 802045c:	d904      	bls.n	8020468 <__ieee754_expf+0x50>
 802045e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020462:	2000      	movs	r0, #0
 8020464:	f7ff bf4f 	b.w	8020306 <__math_uflowf>
 8020468:	4a59      	ldr	r2, [pc, #356]	@ (80205d0 <__ieee754_expf+0x1b8>)
 802046a:	4293      	cmp	r3, r2
 802046c:	d971      	bls.n	8020552 <__ieee754_expf+0x13a>
 802046e:	4a59      	ldr	r2, [pc, #356]	@ (80205d4 <__ieee754_expf+0x1bc>)
 8020470:	4293      	cmp	r3, r2
 8020472:	d851      	bhi.n	8020518 <__ieee754_expf+0x100>
 8020474:	4b58      	ldr	r3, [pc, #352]	@ (80205d8 <__ieee754_expf+0x1c0>)
 8020476:	4620      	mov	r0, r4
 8020478:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 802047c:	f7e0 f948 	bl	8000710 <__aeabi_fsub>
 8020480:	4b56      	ldr	r3, [pc, #344]	@ (80205dc <__ieee754_expf+0x1c4>)
 8020482:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 8020486:	f086 0301 	eor.w	r3, r6, #1
 802048a:	4605      	mov	r5, r0
 802048c:	eba3 0806 	sub.w	r8, r3, r6
 8020490:	4639      	mov	r1, r7
 8020492:	4628      	mov	r0, r5
 8020494:	f7e0 f93c 	bl	8000710 <__aeabi_fsub>
 8020498:	4604      	mov	r4, r0
 802049a:	4621      	mov	r1, r4
 802049c:	4620      	mov	r0, r4
 802049e:	f7e0 fa41 	bl	8000924 <__aeabi_fmul>
 80204a2:	494f      	ldr	r1, [pc, #316]	@ (80205e0 <__ieee754_expf+0x1c8>)
 80204a4:	4606      	mov	r6, r0
 80204a6:	f7e0 fa3d 	bl	8000924 <__aeabi_fmul>
 80204aa:	494e      	ldr	r1, [pc, #312]	@ (80205e4 <__ieee754_expf+0x1cc>)
 80204ac:	f7e0 f930 	bl	8000710 <__aeabi_fsub>
 80204b0:	4631      	mov	r1, r6
 80204b2:	f7e0 fa37 	bl	8000924 <__aeabi_fmul>
 80204b6:	494c      	ldr	r1, [pc, #304]	@ (80205e8 <__ieee754_expf+0x1d0>)
 80204b8:	f7e0 f92c 	bl	8000714 <__addsf3>
 80204bc:	4631      	mov	r1, r6
 80204be:	f7e0 fa31 	bl	8000924 <__aeabi_fmul>
 80204c2:	494a      	ldr	r1, [pc, #296]	@ (80205ec <__ieee754_expf+0x1d4>)
 80204c4:	f7e0 f924 	bl	8000710 <__aeabi_fsub>
 80204c8:	4631      	mov	r1, r6
 80204ca:	f7e0 fa2b 	bl	8000924 <__aeabi_fmul>
 80204ce:	4948      	ldr	r1, [pc, #288]	@ (80205f0 <__ieee754_expf+0x1d8>)
 80204d0:	f7e0 f920 	bl	8000714 <__addsf3>
 80204d4:	4631      	mov	r1, r6
 80204d6:	f7e0 fa25 	bl	8000924 <__aeabi_fmul>
 80204da:	4601      	mov	r1, r0
 80204dc:	4620      	mov	r0, r4
 80204de:	f7e0 f917 	bl	8000710 <__aeabi_fsub>
 80204e2:	4601      	mov	r1, r0
 80204e4:	4606      	mov	r6, r0
 80204e6:	4620      	mov	r0, r4
 80204e8:	f7e0 fa1c 	bl	8000924 <__aeabi_fmul>
 80204ec:	4681      	mov	r9, r0
 80204ee:	f1b8 0f00 	cmp.w	r8, #0
 80204f2:	d143      	bne.n	802057c <__ieee754_expf+0x164>
 80204f4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80204f8:	4630      	mov	r0, r6
 80204fa:	f7e0 f909 	bl	8000710 <__aeabi_fsub>
 80204fe:	4601      	mov	r1, r0
 8020500:	4648      	mov	r0, r9
 8020502:	f7e0 fac3 	bl	8000a8c <__aeabi_fdiv>
 8020506:	4621      	mov	r1, r4
 8020508:	f7e0 f902 	bl	8000710 <__aeabi_fsub>
 802050c:	4601      	mov	r1, r0
 802050e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8020512:	f7e0 f8fd 	bl	8000710 <__aeabi_fsub>
 8020516:	e78a      	b.n	802042e <__ieee754_expf+0x16>
 8020518:	4936      	ldr	r1, [pc, #216]	@ (80205f4 <__ieee754_expf+0x1dc>)
 802051a:	4620      	mov	r0, r4
 802051c:	f7e0 fa02 	bl	8000924 <__aeabi_fmul>
 8020520:	4b35      	ldr	r3, [pc, #212]	@ (80205f8 <__ieee754_expf+0x1e0>)
 8020522:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8020526:	f7e0 f8f5 	bl	8000714 <__addsf3>
 802052a:	f7e0 fbc1 	bl	8000cb0 <__aeabi_f2iz>
 802052e:	4680      	mov	r8, r0
 8020530:	f7e0 f9a4 	bl	800087c <__aeabi_i2f>
 8020534:	4931      	ldr	r1, [pc, #196]	@ (80205fc <__ieee754_expf+0x1e4>)
 8020536:	4606      	mov	r6, r0
 8020538:	f7e0 f9f4 	bl	8000924 <__aeabi_fmul>
 802053c:	4601      	mov	r1, r0
 802053e:	4620      	mov	r0, r4
 8020540:	f7e0 f8e6 	bl	8000710 <__aeabi_fsub>
 8020544:	492e      	ldr	r1, [pc, #184]	@ (8020600 <__ieee754_expf+0x1e8>)
 8020546:	4605      	mov	r5, r0
 8020548:	4630      	mov	r0, r6
 802054a:	f7e0 f9eb 	bl	8000924 <__aeabi_fmul>
 802054e:	4607      	mov	r7, r0
 8020550:	e79e      	b.n	8020490 <__ieee754_expf+0x78>
 8020552:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 8020556:	d20c      	bcs.n	8020572 <__ieee754_expf+0x15a>
 8020558:	492a      	ldr	r1, [pc, #168]	@ (8020604 <__ieee754_expf+0x1ec>)
 802055a:	4620      	mov	r0, r4
 802055c:	f7e0 f8da 	bl	8000714 <__addsf3>
 8020560:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8020564:	f7e0 fb9a 	bl	8000c9c <__aeabi_fcmpgt>
 8020568:	b130      	cbz	r0, 8020578 <__ieee754_expf+0x160>
 802056a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 802056e:	4620      	mov	r0, r4
 8020570:	e75b      	b.n	802042a <__ieee754_expf+0x12>
 8020572:	f04f 0800 	mov.w	r8, #0
 8020576:	e790      	b.n	802049a <__ieee754_expf+0x82>
 8020578:	4680      	mov	r8, r0
 802057a:	e78e      	b.n	802049a <__ieee754_expf+0x82>
 802057c:	4631      	mov	r1, r6
 802057e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8020582:	f7e0 f8c5 	bl	8000710 <__aeabi_fsub>
 8020586:	4601      	mov	r1, r0
 8020588:	4648      	mov	r0, r9
 802058a:	f7e0 fa7f 	bl	8000a8c <__aeabi_fdiv>
 802058e:	4601      	mov	r1, r0
 8020590:	4638      	mov	r0, r7
 8020592:	f7e0 f8bd 	bl	8000710 <__aeabi_fsub>
 8020596:	4629      	mov	r1, r5
 8020598:	f7e0 f8ba 	bl	8000710 <__aeabi_fsub>
 802059c:	4601      	mov	r1, r0
 802059e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80205a2:	f7e0 f8b5 	bl	8000710 <__aeabi_fsub>
 80205a6:	f118 0f7d 	cmn.w	r8, #125	@ 0x7d
 80205aa:	db02      	blt.n	80205b2 <__ieee754_expf+0x19a>
 80205ac:	eb00 54c8 	add.w	r4, r0, r8, lsl #23
 80205b0:	e745      	b.n	802043e <__ieee754_expf+0x26>
 80205b2:	f108 0864 	add.w	r8, r8, #100	@ 0x64
 80205b6:	f04f 6158 	mov.w	r1, #226492416	@ 0xd800000
 80205ba:	eb00 50c8 	add.w	r0, r0, r8, lsl #23
 80205be:	f7e0 f9b1 	bl	8000924 <__aeabi_fmul>
 80205c2:	e734      	b.n	802042e <__ieee754_expf+0x16>
 80205c4:	2400      	movs	r4, #0
 80205c6:	e73a      	b.n	802043e <__ieee754_expf+0x26>
 80205c8:	42b17217 	.word	0x42b17217
 80205cc:	42cff1b5 	.word	0x42cff1b5
 80205d0:	3eb17218 	.word	0x3eb17218
 80205d4:	3f851591 	.word	0x3f851591
 80205d8:	08021344 	.word	0x08021344
 80205dc:	0802133c 	.word	0x0802133c
 80205e0:	3331bb4c 	.word	0x3331bb4c
 80205e4:	35ddea0e 	.word	0x35ddea0e
 80205e8:	388ab355 	.word	0x388ab355
 80205ec:	3b360b61 	.word	0x3b360b61
 80205f0:	3e2aaaab 	.word	0x3e2aaaab
 80205f4:	3fb8aa3b 	.word	0x3fb8aa3b
 80205f8:	0802134c 	.word	0x0802134c
 80205fc:	3f317180 	.word	0x3f317180
 8020600:	3717f7d1 	.word	0x3717f7d1
 8020604:	7149f2ca 	.word	0x7149f2ca

08020608 <_init>:
 8020608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802060a:	bf00      	nop
 802060c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802060e:	bc08      	pop	{r3}
 8020610:	469e      	mov	lr, r3
 8020612:	4770      	bx	lr

08020614 <_fini>:
 8020614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020616:	bf00      	nop
 8020618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802061a:	bc08      	pop	{r3}
 802061c:	469e      	mov	lr, r3
 802061e:	4770      	bx	lr
